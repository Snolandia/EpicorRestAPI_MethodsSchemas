import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.JobEntrySvc
# Description: The Job Entry service.
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/$metadata",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobEntries items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobEntries
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries",headers=creds) as resp:
           return await resp.json()

async def post_JobEntries(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobEntries
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobHeadRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobHeadRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum(Company, JobNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobEntry item
   Description: Calls GetByID to retrieve the JobEntry item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobEntry
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobHeadRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobEntries_Company_JobNum(Company, JobNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobEntry for the service
   Description: Calls UpdateExt to update JobEntry. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobEntry
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobHeadRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobEntries_Company_JobNum(Company, JobNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobEntry item
   Description: Call UpdateExt to delete JobEntry item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobEntry
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobAsmbls(Company, JobNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmbls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmbls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAsmbls",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobAsmbls_Company_JobNum_AssemblySeq(Company, JobNum, AssemblySeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmbl item
   Description: Calls GetByID to retrieve the JobAsmbl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmbl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobAudits(Company, JobNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAudits items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAudits1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAudits",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company, JobNum, ChangeDate, ChangeTime, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAudit item
   Description: Calls GetByID to retrieve the JobAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAudit1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobParts(Company, JobNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobParts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobParts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobParts",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobParts_Company_JobNum_PartNum(Company, JobNum, PartNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobPart item
   Description: Calls GetByID to retrieve the JobPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobPart1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobParts(" + Company + "," + JobNum + "," + PartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobHeadAttches(Company, JobNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobHeadAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobHeadAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobHeadAttches",headers=creds) as resp:
           return await resp.json()

async def get_JobEntries_Company_JobNum_JobHeadAttches_Company_JobNum_DrawingSeq(Company, JobNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobHeadAttch item
   Description: Calls GetByID to retrieve the JobHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobHeadAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobEntries(" + Company + "," + JobNum + ")/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmbls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmbls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmbls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmbls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq(Company, JobNum, AssemblySeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmbl item
   Description: Calls GetByID to retrieve the JobAsmbl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmbl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmbls_Company_JobNum_AssemblySeq(Company, JobNum, AssemblySeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmbl for the service
   Description: Calls UpdateExt to update JobAsmbl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmbl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmbls_Company_JobNum_AssemblySeq(Company, JobNum, AssemblySeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmbl item
   Description: Call UpdateExt to delete JobAsmbl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmbl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblInsps(Company, JobNum, AssemblySeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblInsps1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblInsps",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company, JobNum, AssemblySeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblInsp item
   Description: Calls GetByID to retrieve the JobAsmblInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblInsp1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobMtls(Company, JobNum, AssemblySeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobMtls",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company, JobNum, AssemblySeq, MtlSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtl item
   Description: Calls GetByID to retrieve the JobMtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobOpers(Company, JobNum, AssemblySeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOpers items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOpers1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobOpers",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company, JobNum, AssemblySeq, OprSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOper item
   Description: Calls GetByID to retrieve the JobOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOper1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblRestrictions(Company, JobNum, AssemblySeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblRestrictions1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblRestrictions",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company, JobNum, AssemblySeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblRestriction item
   Description: Calls GetByID to retrieve the JobAsmblRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestriction1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmRefDes(Company, JobNum, AssemblySeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmRefDes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmRefDes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmRefDes",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmRefDe item
   Description: Calls GetByID to retrieve the JobAsmRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmRefDe1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblAttches(Company, JobNum, AssemblySeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblAttches",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmbls_Company_JobNum_AssemblySeq_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company, JobNum, AssemblySeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblAttch item
   Description: Calls GetByID to retrieve the JobAsmblAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmbls(" + Company + "," + JobNum + "," + AssemblySeq + ")/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblInsps(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblInsps
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmblInsps(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblInsps
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company, JobNum, AssemblySeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblInsp item
   Description: Calls GetByID to retrieve the JobAsmblInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company, JobNum, AssemblySeq, PlanSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmblInsp for the service
   Description: Calls UpdateExt to update JobAsmblInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmblInsps_Company_JobNum_AssemblySeq_PlanSeq(Company, JobNum, AssemblySeq, PlanSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmblInsp item
   Description: Call UpdateExt to delete JobAsmblInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls",headers=creds) as resp:
           return await resp.json()

async def post_JobMtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company, JobNum, AssemblySeq, MtlSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtl item
   Description: Calls GetByID to retrieve the JobMtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company, JobNum, AssemblySeq, MtlSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtl for the service
   Description: Calls UpdateExt to update JobMtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtls_Company_JobNum_AssemblySeq_MtlSeq(Company, JobNum, AssemblySeq, MtlSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtl item
   Description: Call UpdateExt to delete JobMtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlInsps(Company, JobNum, AssemblySeq, MtlSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtlInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlInsps1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlInsps",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company, JobNum, AssemblySeq, MtlSeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlInsp item
   Description: Calls GetByID to retrieve the JobMtlInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlInsp1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRefDes(Company, JobNum, AssemblySeq, MtlSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRefDes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRefDes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRefDes",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRefDe item
   Description: Calls GetByID to retrieve the JobMtlRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRefDe1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRestrictions(Company, JobNum, AssemblySeq, MtlSeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRestrictions1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRestrictions",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRestriction item
   Description: Calls GetByID to retrieve the JobMtlRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestriction1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlAttches(Company, JobNum, AssemblySeq, MtlSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtlAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlAttches",headers=creds) as resp:
           return await resp.json()

async def get_JobMtls_Company_JobNum_AssemblySeq_MtlSeq_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company, JobNum, AssemblySeq, MtlSeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlAttch item
   Description: Calls GetByID to retrieve the JobMtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + ")/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlInsps(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtlInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlInsps
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps",headers=creds) as resp:
           return await resp.json()

async def post_JobMtlInsps(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlInsps
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company, JobNum, AssemblySeq, MtlSeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlInsp item
   Description: Calls GetByID to retrieve the JobMtlInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company, JobNum, AssemblySeq, MtlSeq, PlanSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtlInsp for the service
   Description: Calls UpdateExt to update JobMtlInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtlInsps_Company_JobNum_AssemblySeq_MtlSeq_PlanSeq(Company, JobNum, AssemblySeq, MtlSeq, PlanSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtlInsp item
   Description: Call UpdateExt to delete JobMtlInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRefDes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRefDes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRefDes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes",headers=creds) as resp:
           return await resp.json()

async def post_JobMtlRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRefDe item
   Description: Calls GetByID to retrieve the JobMtlRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtlRefDe for the service
   Description: Calls UpdateExt to update JobMtlRefDe. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRefDesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtlRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtlRefDe item
   Description: Call UpdateExt to delete JobMtlRefDe item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictions(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRestrictions
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions",headers=creds) as resp:
           return await resp.json()

async def post_JobMtlRestrictions(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRestrictions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRestriction item
   Description: Calls GetByID to retrieve the JobMtlRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtlRestriction for the service
   Description: Calls UpdateExt to update JobMtlRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtlRestriction item
   Description: Call UpdateExt to delete JobMtlRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_JobMtlRestrictSubsts(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobMtlRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobMtlRestrictSubsts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")/JobMtlRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictions_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRestrictSubst item
   Description: Calls GetByID to retrieve the JobMtlRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestrictSubst1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + ")/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictSubsts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtlRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlRestrictSubsts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def post_JobMtlRestrictSubsts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlRestrictSubsts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlRestrictSubst item
   Description: Calls GetByID to retrieve the JobMtlRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, SubstanceID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtlRestrictSubst for the service
   Description: Calls UpdateExt to update JobMtlRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtlRestrictSubsts_Company_JobNum_AssemblySeq_MtlSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, MtlSeq, RestrictionTypeID, SubstanceID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtlRestrictSubst item
   Description: Call UpdateExt to delete JobMtlRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobMtlAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobMtlAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobMtlAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobMtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches",headers=creds) as resp:
           return await resp.json()

async def post_JobMtlAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobMtlAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company, JobNum, AssemblySeq, MtlSeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobMtlAttch item
   Description: Calls GetByID to retrieve the JobMtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobMtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company, JobNum, AssemblySeq, MtlSeq, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobMtlAttch for the service
   Description: Calls UpdateExt to update JobMtlAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobMtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobMtlAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobMtlAttches_Company_JobNum_AssemblySeq_MtlSeq_DrawingSeq(Company, JobNum, AssemblySeq, MtlSeq, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobMtlAttch item
   Description: Call UpdateExt to delete JobMtlAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobMtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobMtlAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOpers items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOpers
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers",headers=creds) as resp:
           return await resp.json()

async def post_JobOpers(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOpers
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company, JobNum, AssemblySeq, OprSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOper item
   Description: Calls GetByID to retrieve the JobOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOper
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company, JobNum, AssemblySeq, OprSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOper for the service
   Description: Calls UpdateExt to update JobOper. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOper
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOpers_Company_JobNum_AssemblySeq_OprSeq(Company, JobNum, AssemblySeq, OprSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOper item
   Description: Call UpdateExt to delete JobOper item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOper
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperActions(Company, JobNum, AssemblySeq, OprSeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperActions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperActions1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperActions",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperAction item
   Description: Calls GetByID to retrieve the JobOperAction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAction1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperInsps(Company, JobNum, AssemblySeq, OprSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperInsps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperInsps1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperInsps",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company, JobNum, AssemblySeq, OprSeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperInsp item
   Description: Calls GetByID to retrieve the JobOperInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperInsp1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperMachParams(Company, JobNum, AssemblySeq, OprSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperMachParams items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperMachParams1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperMachParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperMachParams",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company, JobNum, AssemblySeq, OprSeq, MachParamSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperMachParam item
   Description: Calls GetByID to retrieve the JobOperMachParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperMachParam1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param MachParamSeq: Desc: MachParamSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOpDtls(Company, JobNum, AssemblySeq, OprSeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOpDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOpDtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOpDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOpDtls",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOpDtl item
   Description: Calls GetByID to retrieve the JobOpDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOpDtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperRestrictions(Company, JobNum, AssemblySeq, OprSeq, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperRestrictions1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperRestrictions",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperRestriction item
   Description: Calls GetByID to retrieve the JobOperRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestriction1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperAttches(Company, JobNum, AssemblySeq, OprSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperAttches",headers=creds) as resp:
           return await resp.json()

async def get_JobOpers_Company_JobNum_AssemblySeq_OprSeq_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company, JobNum, AssemblySeq, OprSeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperAttch item
   Description: Calls GetByID to retrieve the JobOperAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpers(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + ")/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperActions(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperActions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperActions
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions",headers=creds) as resp:
           return await resp.json()

async def post_JobOperActions(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperActions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperAction item
   Description: Calls GetByID to retrieve the JobOperAction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperAction for the service
   Description: Calls UpdateExt to update JobOperAction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperAction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperActionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperAction item
   Description: Call UpdateExt to delete JobOperAction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperAction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_JobOperActionParams(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperActionParams items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperActionParams1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")/JobOperActionParams",headers=creds) as resp:
           return await resp.json()

async def get_JobOperActions_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, ActionParamSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperActionParam item
   Description: Calls GetByID to retrieve the JobOperActionParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperActionParam1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param ActionParamSeq: Desc: ActionParamSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + ")/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperActionParams(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperActionParams items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperActionParams
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperActionParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams",headers=creds) as resp:
           return await resp.json()

async def post_JobOperActionParams(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperActionParams
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, ActionParamSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperActionParam item
   Description: Calls GetByID to retrieve the JobOperActionParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperActionParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param ActionParamSeq: Desc: ActionParamSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, ActionParamSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperActionParam for the service
   Description: Calls UpdateExt to update JobOperActionParam. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperActionParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param ActionParamSeq: Desc: ActionParamSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperActionParamRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperActionParams_Company_JobNum_AssemblySeq_OprSeq_ActionSeq_ActionParamSeq(Company, JobNum, AssemblySeq, OprSeq, ActionSeq, ActionParamSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperActionParam item
   Description: Call UpdateExt to delete JobOperActionParam item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperActionParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param ActionSeq: Desc: ActionSeq   Required: True
      :param ActionParamSeq: Desc: ActionParamSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperActionParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + ActionSeq + "," + ActionParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperInsps(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperInsps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperInsps
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps",headers=creds) as resp:
           return await resp.json()

async def post_JobOperInsps(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperInsps
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company, JobNum, AssemblySeq, OprSeq, PlanSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperInsp item
   Description: Calls GetByID to retrieve the JobOperInsp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company, JobNum, AssemblySeq, OprSeq, PlanSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperInsp for the service
   Description: Calls UpdateExt to update JobOperInsp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperInspRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperInsps_Company_JobNum_AssemblySeq_OprSeq_PlanSeq(Company, JobNum, AssemblySeq, OprSeq, PlanSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperInsp item
   Description: Call UpdateExt to delete JobOperInsp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperInsp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param PlanSeq: Desc: PlanSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperInsps(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + PlanSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperMachParams(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperMachParams items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperMachParams
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperMachParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams",headers=creds) as resp:
           return await resp.json()

async def post_JobOperMachParams(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperMachParams
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company, JobNum, AssemblySeq, OprSeq, MachParamSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperMachParam item
   Description: Calls GetByID to retrieve the JobOperMachParam item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperMachParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param MachParamSeq: Desc: MachParamSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company, JobNum, AssemblySeq, OprSeq, MachParamSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperMachParam for the service
   Description: Calls UpdateExt to update JobOperMachParam. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperMachParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param MachParamSeq: Desc: MachParamSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperMachParamRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperMachParams_Company_JobNum_AssemblySeq_OprSeq_MachParamSeq(Company, JobNum, AssemblySeq, OprSeq, MachParamSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperMachParam item
   Description: Call UpdateExt to delete JobOperMachParam item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperMachParam
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param MachParamSeq: Desc: MachParamSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperMachParams(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + MachParamSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpDtls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOpDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOpDtls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOpDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls",headers=creds) as resp:
           return await resp.json()

async def post_JobOpDtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOpDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOpDtl item
   Description: Calls GetByID to retrieve the JobOpDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOpDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOpDtl for the service
   Description: Calls UpdateExt to update JobOpDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOpDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOpDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOpDtl item
   Description: Call UpdateExt to delete JobOpDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOpDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_JobResources(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobResources items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobResources1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobResourcesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")/JobResources",headers=creds) as resp:
           return await resp.json()

async def get_JobOpDtls_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, WhatIf, AllocNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobResource item
   Description: Calls GetByID to retrieve the JobResource item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobResource1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param WhatIf: Desc: WhatIf   Required: True
      :param AllocNum: Desc: AllocNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOpDtls(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + ")/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobResources(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobResources items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobResources
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobResourcesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources",headers=creds) as resp:
           return await resp.json()

async def post_JobResources(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobResources
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, WhatIf, AllocNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobResource item
   Description: Calls GetByID to retrieve the JobResource item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobResource
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param WhatIf: Desc: WhatIf   Required: True
      :param AllocNum: Desc: AllocNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, WhatIf, AllocNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobResource for the service
   Description: Calls UpdateExt to update JobResource. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobResource
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param WhatIf: Desc: WhatIf   Required: True
      :param AllocNum: Desc: AllocNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobResourcesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobResources_Company_JobNum_AssemblySeq_OprSeq_OpDtlSeq_WhatIf_AllocNum(Company, JobNum, AssemblySeq, OprSeq, OpDtlSeq, WhatIf, AllocNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobResource item
   Description: Call UpdateExt to delete JobResource item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobResource
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param OpDtlSeq: Desc: OpDtlSeq   Required: True
      :param WhatIf: Desc: WhatIf   Required: True
      :param AllocNum: Desc: AllocNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobResources(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + OpDtlSeq + "," + WhatIf + "," + AllocNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictions(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperRestrictions
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions",headers=creds) as resp:
           return await resp.json()

async def post_JobOperRestrictions(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperRestrictions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperRestriction item
   Description: Calls GetByID to retrieve the JobOperRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperRestriction for the service
   Description: Calls UpdateExt to update JobOperRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperRestriction item
   Description: Call UpdateExt to delete JobOperRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_JobOperRestrictSubsts(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobOperRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobOperRestrictSubsts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")/JobOperRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictions_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperRestrictSubst item
   Description: Calls GetByID to retrieve the JobOperRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestrictSubst1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + ")/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictSubsts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperRestrictSubsts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def post_JobOperRestrictSubsts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperRestrictSubsts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperRestrictSubst item
   Description: Calls GetByID to retrieve the JobOperRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, SubstanceID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperRestrictSubst for the service
   Description: Calls UpdateExt to update JobOperRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperRestrictSubsts_Company_JobNum_AssemblySeq_OprSeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, OprSeq, RestrictionTypeID, SubstanceID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperRestrictSubst item
   Description: Call UpdateExt to delete JobOperRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobOperAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobOperAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobOperAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobOperAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches",headers=creds) as resp:
           return await resp.json()

async def post_JobOperAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobOperAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company, JobNum, AssemblySeq, OprSeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobOperAttch item
   Description: Calls GetByID to retrieve the JobOperAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobOperAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company, JobNum, AssemblySeq, OprSeq, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobOperAttch for the service
   Description: Calls UpdateExt to update JobOperAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobOperAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobOperAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobOperAttches_Company_JobNum_AssemblySeq_OprSeq_DrawingSeq(Company, JobNum, AssemblySeq, OprSeq, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobOperAttch item
   Description: Call UpdateExt to delete JobOperAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobOperAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param OprSeq: Desc: OprSeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobOperAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + OprSeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictions(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblRestrictions
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmblRestrictions(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblRestrictions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company, JobNum, AssemblySeq, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblRestriction item
   Description: Calls GetByID to retrieve the JobAsmblRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company, JobNum, AssemblySeq, RestrictionTypeID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmblRestriction for the service
   Description: Calls UpdateExt to update JobAsmblRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID(Company, JobNum, AssemblySeq, RestrictionTypeID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmblRestriction item
   Description: Call UpdateExt to delete JobAsmblRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID_JobAsmblRestrictSubsts(Company, JobNum, AssemblySeq, RestrictionTypeID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobAsmblRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobAsmblRestrictSubsts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")/JobAsmblRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictions_Company_JobNum_AssemblySeq_RestrictionTypeID_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblRestrictSubst item
   Description: Calls GetByID to retrieve the JobAsmblRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestrictSubst1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictions(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + ")/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictSubsts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblRestrictSubsts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmblRestrictSubsts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblRestrictSubsts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblRestrictSubst item
   Description: Calls GetByID to retrieve the JobAsmblRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, RestrictionTypeID, SubstanceID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmblRestrictSubst for the service
   Description: Calls UpdateExt to update JobAsmblRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmblRestrictSubsts_Company_JobNum_AssemblySeq_RestrictionTypeID_SubstanceID(Company, JobNum, AssemblySeq, RestrictionTypeID, SubstanceID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmblRestrictSubst item
   Description: Call UpdateExt to delete JobAsmblRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblRestrictSubsts(" + Company + "," + JobNum + "," + AssemblySeq + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmRefDes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmRefDes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmRefDes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmRefDe item
   Description: Calls GetByID to retrieve the JobAsmRefDe item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmRefDe for the service
   Description: Calls UpdateExt to update JobAsmRefDe. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmRefDesRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmRefDes_Company_JobNum_AssemblySeq_MtlSeq_RefDesSeq(Company, JobNum, AssemblySeq, MtlSeq, RefDesSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmRefDe item
   Description: Call UpdateExt to delete JobAsmRefDe item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmRefDe
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param RefDesSeq: Desc: RefDesSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmRefDes(" + Company + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + RefDesSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAsmblAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAsmblAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAsmblAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches",headers=creds) as resp:
           return await resp.json()

async def post_JobAsmblAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAsmblAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company, JobNum, AssemblySeq, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAsmblAttch item
   Description: Calls GetByID to retrieve the JobAsmblAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAsmblAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company, JobNum, AssemblySeq, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAsmblAttch for the service
   Description: Calls UpdateExt to update JobAsmblAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAsmblAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAsmblAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAsmblAttches_Company_JobNum_AssemblySeq_DrawingSeq(Company, JobNum, AssemblySeq, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAsmblAttch item
   Description: Call UpdateExt to delete JobAsmblAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAsmblAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAsmblAttches(" + Company + "," + JobNum + "," + AssemblySeq + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobAudits(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobAudits items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobAudits
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits",headers=creds) as resp:
           return await resp.json()

async def post_JobAudits(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobAudits
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobAuditRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company, JobNum, ChangeDate, ChangeTime, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobAudit item
   Description: Calls GetByID to retrieve the JobAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company, JobNum, ChangeDate, ChangeTime, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobAudit for the service
   Description: Calls UpdateExt to update JobAudit. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobAuditRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobAudits_Company_JobNum_ChangeDate_ChangeTime(Company, JobNum, ChangeDate, ChangeTime, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobAudit item
   Description: Call UpdateExt to delete JobAudit item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobAudits(" + Company + "," + JobNum + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobParts(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobParts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobParts
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts",headers=creds) as resp:
           return await resp.json()

async def post_JobParts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobParts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobPartRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobPartRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobParts_Company_JobNum_PartNum(Company, JobNum, PartNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobPart item
   Description: Calls GetByID to retrieve the JobPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobParts_Company_JobNum_PartNum(Company, JobNum, PartNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobPart for the service
   Description: Calls UpdateExt to update JobPart. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobPartRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobParts_Company_JobNum_PartNum(Company, JobNum, PartNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobPart item
   Description: Call UpdateExt to delete JobPart item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobParts_Company_JobNum_PartNum_JobProds(Company, JobNum, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get JobProds items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_JobProds1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobProdRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")/JobProds",headers=creds) as resp:
           return await resp.json()

async def get_JobParts_Company_JobNum_PartNum_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company, JobNum, PartNum, OrderNum, OrderLine, OrderRelNum, WarehouseCode, TargetJobNum, TargetAssemblySeq, TargetMtlSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobProd item
   Description: Calls GetByID to retrieve the JobProd item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobProd1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param TargetJobNum: Desc: TargetJobNum   Required: True   Allow empty value : True
      :param TargetAssemblySeq: Desc: TargetAssemblySeq   Required: True
      :param TargetMtlSeq: Desc: TargetMtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobProdRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobParts(" + Company + "," + JobNum + "," + PartNum + ")/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobProds(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobProds items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobProds
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobProdRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds",headers=creds) as resp:
           return await resp.json()

async def post_JobProds(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobProds
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobProdRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobProdRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company, JobNum, PartNum, OrderNum, OrderLine, OrderRelNum, WarehouseCode, TargetJobNum, TargetAssemblySeq, TargetMtlSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobProd item
   Description: Calls GetByID to retrieve the JobProd item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobProd
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param TargetJobNum: Desc: TargetJobNum   Required: True   Allow empty value : True
      :param TargetAssemblySeq: Desc: TargetAssemblySeq   Required: True
      :param TargetMtlSeq: Desc: TargetMtlSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobProdRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company, JobNum, PartNum, OrderNum, OrderLine, OrderRelNum, WarehouseCode, TargetJobNum, TargetAssemblySeq, TargetMtlSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobProd for the service
   Description: Calls UpdateExt to update JobProd. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobProd
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param TargetJobNum: Desc: TargetJobNum   Required: True   Allow empty value : True
      :param TargetAssemblySeq: Desc: TargetAssemblySeq   Required: True
      :param TargetMtlSeq: Desc: TargetMtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobProdRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobProds_Company_JobNum_PartNum_OrderNum_OrderLine_OrderRelNum_WarehouseCode_TargetJobNum_TargetAssemblySeq_TargetMtlSeq(Company, JobNum, PartNum, OrderNum, OrderLine, OrderRelNum, WarehouseCode, TargetJobNum, TargetAssemblySeq, TargetMtlSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobProd item
   Description: Call UpdateExt to delete JobProd item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobProd
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param TargetJobNum: Desc: TargetJobNum   Required: True   Allow empty value : True
      :param TargetAssemblySeq: Desc: TargetAssemblySeq   Required: True
      :param TargetMtlSeq: Desc: TargetMtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobProds(" + Company + "," + JobNum + "," + PartNum + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + WarehouseCode + "," + TargetJobNum + "," + TargetAssemblySeq + "," + TargetMtlSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobHeadAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobHeadAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobHeadAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches",headers=creds) as resp:
           return await resp.json()

async def post_JobHeadAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobHeadAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobHeadAttches_Company_JobNum_DrawingSeq(Company, JobNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobHeadAttch item
   Description: Calls GetByID to retrieve the JobHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobHeadAttches_Company_JobNum_DrawingSeq(Company, JobNum, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobHeadAttch for the service
   Description: Calls UpdateExt to update JobHeadAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobHeadAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobHeadAttches_Company_JobNum_DrawingSeq(Company, JobNum, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobHeadAttch item
   Description: Call UpdateExt to delete JobHeadAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobHeadAttches(" + Company + "," + JobNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_JobStages(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get JobStages items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_JobStages
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobStageRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages",headers=creds) as resp:
           return await resp.json()

async def post_JobStages(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_JobStages
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.JobStageRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.JobStageRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company, JobNum, AssemblySeq, StageSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the JobStage item
   Description: Calls GetByID to retrieve the JobStage item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_JobStage
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param StageSeq: Desc: StageSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.JobStageRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company, JobNum, AssemblySeq, StageSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update JobStage for the service
   Description: Calls UpdateExt to update JobStage. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_JobStage
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param StageSeq: Desc: StageSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.JobStageRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_JobStages_Company_JobNum_AssemblySeq_StageSeq(Company, JobNum, AssemblySeq, StageSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete JobStage item
   Description: Call UpdateExt to delete JobStage item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_JobStage
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param StageSeq: Desc: StageSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/JobStages(" + Company + "," + JobNum + "," + AssemblySeq + "," + StageSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_List(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.JobHeadListRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def get_GetRows(whereClauseJobHead, whereClauseJobHeadAttch, whereClauseJobAsmbl, whereClauseJobAsmblAttch, whereClauseJobAsmblInsp, whereClauseJobMtl, whereClauseJobMtlAttch, whereClauseJobMtlInsp, whereClauseJobMtlRefDes, whereClauseJobMtlRestriction, whereClauseJobMtlRestrictSubst, whereClauseJobOper, whereClauseJobOperAttch, whereClauseJobOperAction, whereClauseJobOperActionParam, whereClauseJobOperInsp, whereClauseJobOperMachParam, whereClauseJobOpDtl, whereClauseJobResources, whereClauseJobOperRestriction, whereClauseJobOperRestrictSubst, whereClauseJobAsmblRestriction, whereClauseJobAsmblRestrictSubst, whereClauseJobAsmRefDes, whereClauseJobAudit, whereClauseJobPart, whereClauseJobProd, whereClauseJobStage, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobHead=" + whereClauseJobHead
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobHeadAttch=" + whereClauseJobHeadAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmbl=" + whereClauseJobAsmbl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmblAttch=" + whereClauseJobAsmblAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmblInsp=" + whereClauseJobAsmblInsp
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtl=" + whereClauseJobMtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtlAttch=" + whereClauseJobMtlAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtlInsp=" + whereClauseJobMtlInsp
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtlRefDes=" + whereClauseJobMtlRefDes
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtlRestriction=" + whereClauseJobMtlRestriction
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobMtlRestrictSubst=" + whereClauseJobMtlRestrictSubst
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOper=" + whereClauseJobOper
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperAttch=" + whereClauseJobOperAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperAction=" + whereClauseJobOperAction
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperActionParam=" + whereClauseJobOperActionParam
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperInsp=" + whereClauseJobOperInsp
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperMachParam=" + whereClauseJobOperMachParam
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOpDtl=" + whereClauseJobOpDtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobResources=" + whereClauseJobResources
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperRestriction=" + whereClauseJobOperRestriction
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobOperRestrictSubst=" + whereClauseJobOperRestrictSubst
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmblRestriction=" + whereClauseJobAsmblRestriction
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmblRestrictSubst=" + whereClauseJobAsmblRestrictSubst
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAsmRefDes=" + whereClauseJobAsmRefDes
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobAudit=" + whereClauseJobAudit
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobPart=" + whereClauseJobPart
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobProd=" + whereClauseJobProd
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseJobStage=" + whereClauseJobStage
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetByID(jobNum, epicorHeaders = None):
   """  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "jobNum=" + jobNum

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetList(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlRefDes
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlRestrictSubst(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlRestrictSubst
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOper(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOper
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOper
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperAction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperAction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperAction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperAction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperAction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperActionParam(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperActionParam
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperActionParam
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperActionParam_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperActionParam_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperInsp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperInsp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperMachParam(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperMachParam
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperMachParam
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperMachParam_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperMachParam_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOpDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOpDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOpDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobOperRestrictSubst(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobOperRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobOperRestrictSubst
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobOperRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobOperRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmblRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmblRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmblRestrictSubst(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmblRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblRestrictSubst
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmRefDes
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAudit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAudit
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAudit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAudit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAudit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobPart
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobProd(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobProd
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobProd
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobProd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobProd_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobStage(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobStage
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobStage
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteByID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowID(id, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "id=" + id

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowIDs(ids, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "ids=" + ids

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_Update(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdMakeToType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdMakeToType
   Description: This method runs logic determine what fields can have value based on the MakeToType

and runs logic to set the stock and order WIP quantities.

This method should run when the JobProd.MakeToType field changes.
   OperationID: ChangeJobProdMakeToType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdOrderLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdOrderLine
   Description: This method sets the OrderRelNum to zero when OrderLine is changed.

This method should run when the JobProd.OrderLine field is changed.
   OperationID: ChangeJobProdOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdOrderNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdOrderNum
   Description: This method runs logic to numerous associated fields to blank or zero based on a new OrderNum.

This method should run when the JobProd.OrderNum field changes.
   OperationID: ChangeJobProdOrderNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdOrderRelNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdOrderRelNum
   Description: This method runs logic to validate if a link exists, update the Production Quantity,

set stock and order WIP quantities, and validate if direct has been selected.

This method should run when the JobProd.OrderRelNum field changes.
   OperationID: ChangeJobProdOrderRelNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOrderRelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOrderRelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdOurStockQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdOurStockQty
   Description: This method runs public method CheckJobProdProdQty to validate quantities.

This method should run when the JobProd.OurStockQty field changes.
   OperationID: ChangeJobProdOurStockQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdOurStockQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdOurStockQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdProdQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdProdQty
   Description: This method runs public method CheckJobProdProdQty to validate quantities and

set stock and order WIP quantities.

This method should run when the JobProd.ProdQty field changes.
   OperationID: ChangeJobProdProdQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdTargetAssemblySeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdTargetAssemblySeq
   Description: This method runs logic to clear detail sequence and populate the MakeToJobQty field.

This method should run when the JobProd.TargetAssemblySeq field changes.
   OperationID: ChangeJobProdTargetAssemblySeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetAssemblySeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetAssemblySeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdTargetJobNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdTargetJobNum
   Description: This method should run when the JobProd.TargetJobNum field changes.
   OperationID: ChangeJobProdTargetJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdTargetMtlSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdTargetMtlSeq
   Description: This method runs validation for links, assign values, and populate MakeToJobQty field

This method should run when the JobProd.TargetMtlSeq field changes.
   OperationID: ChangeJobProdTargetMtlSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdTargetMtlSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdTargetMtlSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeResTopics(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeResTopics
   Description: This method should be invoked when the ResTopics changes.

Validates and sets the individual ResTopic fields.
   OperationID: ChangeResTopics
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeResTopics_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeResTopics_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckApprovedSupplier(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckApprovedSupplier
   Description: This method runs logic to verify if supplier is approved.  This should be called

after adding/updating a demand link or adding/updating a subcontract operation.

This method always needs a jobnumber inputted.  However, ipJobOperRowid or ipJobProdRowid

can either be blank.  If ipJobOperRowid has value then this method will ignore any value

in ipJobProdRowid.   This method will output warning messages that may or may not

exist.
   OperationID: CheckApprovedSupplier
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckApprovedSupplier_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckApprovedSupplier_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobAsmblParent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobAsmblParent
   Description: This method validates validates the new Parent field
   OperationID: CheckChangeJobAsmblParent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobAsmblParent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobAsmblParent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobMtlMiscCharge(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobMtlMiscCharge
   Description: This method validates if transaction exists
   OperationID: CheckChangeJobMtlMiscCharge
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobMtlMiscCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobMtlMiscCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlAttributeSetID
   OperationID: ChangeJobMtlAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadAttributeSetID
   OperationID: ChangeJobHeadAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobPartAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobPartAttributeSetID
   OperationID: ChangeJobPartAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobPartAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobPartAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobOperPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobOperPartNum
   Description: This method validates the JobOper.PartNum

This method should run when the JobOper.PartNum field changes.
   OperationID: CheckChangeJobOperPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobOperPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobOperPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobProdOrderRelNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobProdOrderRelNum
   Description: This method runs logic to validate if a link exists, and validate if direct has been selected.
   OperationID: CheckChangeJobProdOrderRelNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdOrderRelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdOrderRelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobProdTargetAssemblySeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobProdTargetAssemblySeq
   Description: This method checks if a record to make the assembly direct already exists.
   OperationID: CheckChangeJobProdTargetAssemblySeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetAssemblySeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetAssemblySeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobProdTargetJobNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobProdTargetJobNum
   Description: This method checks to see if the target job is closed or not

and returns a message if job is closed, also validates the jobnum
   OperationID: CheckChangeJobProdTargetJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckChangeJobProdTargetMtlSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckChangeJobProdTargetMtlSeq
   Description: This method runs validation for links, assign values, and populate MakeToJobQty field

This method should run when the JobProd.TargetMtlSeq field changes.
   OperationID: CheckChangeJobProdTargetMtlSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangeJobProdTargetMtlSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangeJobProdTargetMtlSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckConfigurationAndGetConfigType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckConfigurationAndGetConfigType
   Description: This method checks if a part must be configured prior to a GetDetails.
   OperationID: CheckConfigurationAndGetConfigType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckConfigurationAndGetConfigType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfigurationAndGetConfigType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckConfiguration(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckConfiguration
   Description: This method checks if a part must be configured prior to a GetDetails.
   OperationID: CheckConfiguration
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckConfiguration_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfiguration_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckConfigurationAndGetConfigInfo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckConfigurationAndGetConfigInfo
   Description: This method checks if a part must be configured prior to a GetDetails and retrieves information related to the configuration.
   OperationID: CheckConfigurationAndGetConfigInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckConfigurationAndGetConfigInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfigurationAndGetConfigInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateKBMaxConfigurator(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateKBMaxConfigurator
   Description: Update the CPQ Configurator on the given Job
   OperationID: UpdateKBMaxConfigurator
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateKBMaxConfigurator_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateKBMaxConfigurator_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SyncKBMaxConfigurator(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SyncKBMaxConfigurator
   Description: This will trigger the loading of the method from CPQ onto the Job Assembly.
   OperationID: SyncKBMaxConfigurator
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SyncKBMaxConfigurator_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SyncKBMaxConfigurator_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetKBMaxConfigProdID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetKBMaxConfigProdID
   Description: Set the CPQ Quote Product ID on the given Job.

This will trigger the loading of the method from CPQ onto the Job Assembly.
   OperationID: SetKBMaxConfigProdID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetKBMaxConfigProdID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetKBMaxConfigProdID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PopulateCallContext(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PopulateCallContext
   Description: Allows for assigning of a generic CallContext for integrations.
   OperationID: PopulateCallContext
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PopulateCallContext_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PopulateCallContext_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetApprovedConfiguredRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetApprovedConfiguredRevisionNum
   Description: Gets the most recent approved configured revision.
   OperationID: GetApprovedConfiguredRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetApprovedConfiguredRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetApprovedConfiguredRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckForChanges(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckForChanges
   Description: This method determines if a job audit description needs to be entered into

ttjobhead.changedescription to be stored in the jobaudit record.  Call this

before the update of the JobHead record.
   OperationID: CheckForChanges
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckForChanges_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckForChanges_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckInactiveSchedRequirement(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckInactiveSchedRequirement
   Description: Validates if we're using an Inactive Scheduling Resource
   OperationID: CheckInactiveSchedRequirement
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckInactiveSchedRequirement_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckInactiveSchedRequirement_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobMtlBuyIt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobMtlBuyIt
   Description: This method should run when the JobMtl.BuyIt field is changing.
   OperationID: CheckJobMtlBuyIt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobMtlBuyIt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobMtlBuyIt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobMtlPartNumFixQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobMtlPartNumFixQty
   Description: This method validates the Fixed Qty checkbox control on screen, according to Serial Numbers rules.
   OperationID: CheckJobMtlPartNumFixQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobMtlPartNumFixQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobMtlPartNumFixQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobOperOprSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobOperOprSeq
   Description: This method validates for an invalid sequence for Operation of Subcontract
   OperationID: CheckJobOperOprSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobOperOprSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperOprSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobOperPrimaryProdOpDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobOperPrimaryProdOpDtl
   Description: This method validated the value of Primary Production Operation Detail.

This method should run when the JobOper.PrimaryProdOpDtl is changing.
   OperationID: CheckJobOperPrimaryProdOpDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobOperPrimaryProdOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperPrimaryProdOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobOperPrimarySetupOpDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobOperPrimarySetupOpDtl
   Description: This method validated the value of Primary Setup Operation Detail.

This method should run when the JobOper.PrimarySetupOpDtl is changing.
   OperationID: CheckJobOperPrimarySetupOpDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobOperPrimarySetupOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobOperPrimarySetupOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobPartPartNumIsSerTra(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobPartPartNumIsSerTra
   Description: This method validates the JobPart.PartNum is not serial tracked. The rule is that additional JobPart

records are not allowed to be serial tracked.
   OperationID: CheckJobPartPartNumIsSerTra
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobPartPartNumIsSerTra_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobPartPartNumIsSerTra_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobProdMakeToType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobProdMakeToType
   Description: This method validates for an invalid if you can change the JobProd.MakeToType

to the provided new value.
   OperationID: CheckJobProdMakeToType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobProdMakeToType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdMakeToType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobProdProdQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobProdProdQty
   Description: This method validates the JobProd.ProdQty field and returns a message.
   OperationID: CheckJobProdProdQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobProdProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobProdQtyJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobProdQtyJob
   Description: This method checks the allocated material/assembly to see if short/over requested quantity

and returns a message.
   OperationID: CheckJobProdQtyJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobProdQtyJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobProdQtyJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLink(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLink
   Description: can be changed make direct or not
   OperationID: CheckLink
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLink_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckPrePartInfo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckPrePartInfo
   Description: This method checks to see if there are any questions or issues with the part entered

and returns a message, a part number and if any substitutes exist.
   OperationID: CheckPrePartInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckPrePartInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPrePartInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckPreProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckPreProjectID
   Description: This method validates the project id and returns a question if you would like to proceed message.
   OperationID: CheckPreProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckPreProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPreProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckIfMaterialIsIssued(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckIfMaterialIsIssued
   Description: This method validates if the part has been issued.
   OperationID: CheckIfMaterialIsIssued
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckIfMaterialIsIssued_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckIfMaterialIsIssued_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckResourcePlants(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckResourcePlants
   Description: This method validates that the Plant of the job operation resources

are the same as the job

Maintenance Jobs are and exception,

they can have resources of the Job Plant or Equipments Plant or the Plant Maintenance Plant
   OperationID: CheckResourcePlants
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckResourcePlants_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckResourcePlants_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckEngineered(epicorHeaders = None):
   """  
   Summary: Invoke method CheckEngineered
   OperationID: CheckEngineered
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckEngineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CheckToScheduleAnUnengineered(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckToScheduleAnUnengineered
   OperationID: CheckToScheduleAnUnengineered
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckToScheduleAnUnengineered_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckToScheduleAnUnengineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckToReschedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckToReschedule
   Description: This method checks the required due date and production quantity and

returns a message asking if you would like to schedule if the conditions are met.
   OperationID: CheckToReschedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckToReschedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckToReschedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckTotProdQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckTotProdQty
   Description: This method checks the total production quantity and returns messages if conditions exist

and the returned message will contain 'do you want to continue?'.

Depending on how/where it is called, the ipJobNum may be blank and the ipQuantity may be zero.

Job Entry calls this on "changing" of the Engineered flag to true. In this case it passes the ipQuantity is zero since

the jobs production demands are already known.

During Job Manager, Create Job the ipJobNum is blank, but the ipQuantity of the demand is passed since this demand is yet in the

job.
   OperationID: CheckTotProdQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckTotProdQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckTotProdQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckUnfirmJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckUnfirmJob
   Description: This method checks to see if the unfirmed job the user is firming

is the child of another job (make to job) that is as of yet

not firmed. If so, then ask the user if they still want to continue to firm the

job.
   OperationID: CheckUnfirmJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckUnfirmJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckUnfirmJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChooseUnlink(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChooseUnlink
   Description: This method unlinks and deletes a jobprod record and returns the updated dataset
   OperationID: ChooseUnlink
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChooseUnlink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChooseUnlink_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_JobAsmblChildDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method JobAsmblChildDelete
   Description: Deletes the JobAsmbl child records
   OperationID: JobAsmblChildDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/JobAsmblChildDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/JobAsmblChildDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateJobPWB(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateJobPWB
   Description: The method will create a job when properly called from Planning Workbench.
   OperationID: CreateJobPWB
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateJobPWB_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateJobPWB_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteAll(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteAll
   Description: The method deletes all assemblys and their subassemblys, materials and operations

while leaving the base assembly sequence alone however removing the base assembly's material

and operations.
   OperationID: DeleteAll
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteAll_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteAll_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteRefDesRange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteRefDesRange
   Description: Deletes JobMtlRefDes records based on the JobMtl dataset fields.
   OperationID: DeleteRefDesRange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteRefDesRange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteRefDesRange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlByStageNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlByStageNumber
   Description: Inserts a new JobMtl row in the DataSet with defaults populated, based on Stage Number.
   OperationID: GetNewJobMtlByStageNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlByStageNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlByStageNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_FindAssembly(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method FindAssembly
   Description: This method will locate a JobAsmbl record in the tree based on the inputted parameters.
   OperationID: FindAssembly
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/FindAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/FindAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAssemblyCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAssemblyCosts
   Description: Returns the costs of Assemblies and Materials.
   OperationID: GetAssemblyCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAssemblyCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAssemblyCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetByIdandJobType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetByIdandJobType
   Description: A variation of the standard GetByID. Besides JobNum also has parameter for JobType(s).

Note JobType is a comma separated list of types to be considered valid for this Get.

Used as a predecessor to calling GetByID.
   OperationID: GetByIdandJobType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetByIdandJobType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByIdandJobType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDatasetForTreeByRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDatasetForTreeByRef
   Description: Same as GetDataSetForTree but expects ref JobEntryTableset to improve performance within kinetic merging large volumes of data.

            

This methods will return the dataset for Job Entry.  The method will return the

records related to the assembly provided and the first child level assemblies related to

the input inputted assembly.
   OperationID: GetDatasetForTreeByRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDatasetForTreeByRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDatasetForTreeByRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDatasetForTree(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDatasetForTree
   Description: This methods will return the dataset for Job Entry.  The method will return the

records related to the assembly provided and the first child level assemblies related to

the input inputted assembly.
   OperationID: GetDatasetForTree
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDatasetForTree_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDatasetForTree_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDetails(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDetails
   Description: This method retrieves the manufacturing details from a source file.  The source file

will either be a Quote, a Job, or a Method (Part).  The assembly records will

be created regardless if the part is in error or not.
   OperationID: GetDetails
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDetailsMsgWarning(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDetailsMsgWarning
   Description: This method retrieves the manufacturing details from a source file and generates a list of Warning messages. The source file

will either be a Quote, a Job, or a Method (Part).  The assembly records will

be created regardless if the part is in error or not.
   OperationID: GetDetailsMsgWarning
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDetailsMsgWarning_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDetailsMsgWarning_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetJMtlStat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJMtlStat
   Description: This method returns the JMtlStat dataset.  This dataset is used for the

Job Material Status view.  Prior to running this method, the RowMod field

in JMtlStatFilters must be set to U if it does not alreay have this value.
   OperationID: GetJMtlStat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJMtlStat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJMtlStat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetJMtlStatFilters(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJMtlStatFilters
   Description: This method returns a record in the JMtlStatFilters dataset.  This record

is used to capture the filters to retrieve the JMtlStat data for the

Job Material Status view.
   OperationID: GetJMtlStatFilters
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJMtlStatFilters_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJMtlStatFilters_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLinkedQuoteLineList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLinkedQuoteLineList
   Description: This method returns a list of QuoteNum and QuoteLine values for a JobProd record whose

OrderNum is greater than 0.
   OperationID: GetLinkedQuoteLineList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLinkedQuoteLineList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLinkedQuoteLineList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMaintJobEntryUIDefaults(epicorHeaders = None):
   """  
   Summary: Invoke method GetMaintJobEntryUIDefaults
   Description: Return separated list of values for use in MaintJobEntry: ExternalMES, JobReleaseAutoReserve, Use3rdPartySched from PlantConfCtrl
   OperationID: GetMaintJobEntryUIDefaults
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMaintJobEntryUIDefaults_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetNextJobNum(epicorHeaders = None):
   """  
   Summary: Invoke method GetNextJobNum
   Description: This methods generates the next available job number from the JCSyst table.
   OperationID: GetNextJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetNextJobNumOrderRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNextJobNumOrderRelease
   Description: This methods generates the job number based off

of the OrderRel record related to the input PartSug.
   OperationID: GetNextJobNumOrderRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNextJobNumOrderRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextJobNumOrderRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNextMntJobNum(epicorHeaders = None):
   """  
   Summary: Invoke method GetNextMntJobNum
   Description: Gets Next Job number for a "Maintenance" Job
   OperationID: GetNextMntJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextMntJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetMultiJobList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMultiJobList
   Description: This method searches for Multi Jobs and its parent/child jobs, validating the proper flags are active

(autoLoadParentJobs and autoLoadChildJobs).
   OperationID: GetMultiJobList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMultiJobList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMultiJobList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetProjectRoles(epicorHeaders = None):
   """  
   Summary: Invoke method GetProjectRoles
   Description: Returns list of Project Roles
   OperationID: GetProjectRoles
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetProjectRoles_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_InitJobOperSNReqSubConShip(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InitJobOperSNReqSubConShip
   OperationID: InitJobOperSNReqSubConShip
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InitJobOperSNReqSubConShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InitJobOperSNReqSubConShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertBOMAsm(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertBOMAsm
   Description: This methods allows for the insertion of an engineering assembly for drag/drop functionality,

validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMAsm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertBOMAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertBOMMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertBOMMtl
   Description: This methods allows for the insertion of an engineering material for drag/drop functionality,

validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertBOMMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertBOMMtlWithStage(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertBOMMtlWithStage
   Description: This methods allows for the insertion of an engineering material for drag/drop functionality,

validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMMtlWithStage
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertBOMMtlWithStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMMtlWithStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertBOMOper(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertBOMOper
   Description: This methods allows for the insertion of an engineering operation for drag/drop functionality,

validates a JobAsmbl record exists for the parent
   OperationID: InsertBOMOper
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertBOMOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertBOMOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertMaterial(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertMaterial
   Description: This methods allows for the insertion on a material for drag/drop functionality,

validates a JobAsmbl record exists and the part is valid.
   OperationID: InsertMaterial
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertMaterial_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertMaterial_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertMaterialWithStage(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertMaterialWithStage
   Description: This methods allows for the insertion on a material for drag/drop functionality,

validates a JobAsmbl record exists and the part is valid. Used by Jobs with stages
   OperationID: InsertMaterialWithStage
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertMaterialWithStage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertMaterialWithStage_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertNewJobAsmbl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertNewJobAsmbl
   Description: This method creates a new Assembly after prompting for the AsemblySeq and BOMLevel

as well as the JobNum field. This is to replace the standard GetNewJobAsmbl when

needing to insert a new record between two existing records.
   OperationID: InsertNewJobAsmbl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertNewJobAsmbl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobAsmbl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertNewJobMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertNewJobMtl
   Description: This methods allows for the insertion on a material for drag/drop functionality,

validates a JobAsmbl record exists and the part is valid.
   OperationID: InsertNewJobMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertNewJobMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertNewJobOper(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertNewJobOper
   Description: This methods allows for the insertion on a new operation between two records
   OperationID: InsertNewJobOper
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertNewJobOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewJobOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOpDtlCapability(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOpDtlCapability
   Description: This method allows for the insertion of Capability on an operation to create

operation detail for drag/drop functionality.
   OperationID: InsertOpDtlCapability
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOpDtlCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOpDtlResGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOpDtlResGroup
   Description: This method allows for the insertion of Resource Group on an operation to create

operation detail for drag/drop functionality.
   OperationID: InsertOpDtlResGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOpDtlResGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlResGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOpDtlResource(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOpDtlResource
   Description: This method allows for the insertion of Resource on an operation to create

operation detail for drag/drop functionality.
   OperationID: InsertOpDtlResource
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOpDtlResource_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOpDtlResource_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOperationOP(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOperationOP
   Description: This methods allows for the insertion on an operation for drag/drop functionality
   OperationID: InsertOperationOP
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOperationOP_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperationOP_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOperCapability(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOperCapability
   Description: This method allows for the insertion of Capability on an assembly to create

JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperCapability
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOperCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOperResGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOperResGroup
   Description: This method allows for the insertion of ResourceGroup on an assembly to create

JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperResGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOperResGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperResGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertOperResource(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertOperResource
   Description: This method allows for the insertion of Resource on an assembly to create

JobOper/JobOpDtl for drag/drop functionality.
   OperationID: InsertOperResource
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertOperResource_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertOperResource_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertSubAssembly(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertSubAssembly
   Description: This methods allows for the insertion of a subassembly for drag/drop functionality,

validates the part.
   OperationID: InsertSubAssembly
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InsertNewSubAssembly(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InsertNewSubAssembly
   Description: This methods allows for the insertion of a subassembly for drag/drop functionality,

validates the part.
   OperationID: InsertNewSubAssembly
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InsertNewSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InsertNewSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CollapseAsm(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CollapseAsm
   OperationID: CollapseAsm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CollapseAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CollapseAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_JobScheduling(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method JobScheduling
   Description: Calls jc/jcshded.p and performs the job scheduling without an interface like in Sales Order
   OperationID: JobScheduling
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/JobScheduling_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/JobScheduling_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreCheckNewJobProd(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreCheckNewJobProd
   Description: This method is ran before GetNewJobProd.  It will determine if you can create a

demand link with a Make To Type of Stock.  It will validate that you aren't creating

a Stock demand link with a non-stock part.
   OperationID: PreCheckNewJobProd
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreCheckNewJobProd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreCheckNewJobProd_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreGetDetails(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreGetDetails
   Description: This method should be called right before the GetDetails method.  It necessasry,

it'll return a question on resequencing assembly's while getting details.

The answer will be sent as a parameter to the GetDetails method.

This method will also return a BasePartNum and BaseRevisionNum.  If the BasePartNum

isn't null then use this as the default part number for GetDetails.

This is called from GetDetailsEntry
   OperationID: PreGetDetails
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreGetDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreGetDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMtlConfigPartRevAndConfigType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMtlConfigPartRevAndConfigType
   OperationID: GetMtlConfigPartRevAndConfigType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMtlConfigPartRevAndConfigType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMtlConfigPartRevAndConfigType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMtlConfigPartRev(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMtlConfigPartRev
   OperationID: GetMtlConfigPartRev
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMtlConfigPartRev_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMtlConfigPartRev_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ResequenceOperations(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ResequenceOperations
   Description: This method will resequence the operations, update the ECORev and JobMtl records.

This method should run from the menu/task "Operation>Resequence" as it was in the old

Vantage 6.1.  When the method is finished running, it will run a GetById based on the

inputted Group ID. This will cause a refreshing of the dataset to reflect all of the changes.
   OperationID: ResequenceOperations
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ResequenceOperations_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ResequenceOperations_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ResequenceMaterials(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ResequenceMaterials
   Description: This method will resequence the operations, update the JobMtl records.

This method should run from the context menu > Resequence

When the method is finished running, it will run a GetDatasetForTree or GetByID

Depending on what is passed from UI.
   OperationID: ResequenceMaterials
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ResequenceMaterials_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ResequenceMaterials_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreInsertSubAssembly(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreInsertSubAssembly
   Description: This method should be called right before the InsertMaterial.  It necessasry,

it'll return a warning if there is no source method.
   OperationID: PreInsertSubAssembly
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreInsertSubAssembly_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreInsertSubAssembly_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RemoveFromSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RemoveFromSchedule
   Description: Removes job from schedule
   OperationID: RemoveFromSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RemoveFromSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RemoveFromSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInspection(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInspection
   Description: Method to validate the Inspection control fields. (EQM)
   OperationID: ValidateInspection
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInspection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInspection_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateJobNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateJobNum
   Description: This method will validate that the job number entered not through a search

will be a valid job number for the entered plant.
   OperationID: ValidateJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateJobNumJobType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateJobNumJobType
   Description: Checks if the requested job has the proper job type.

Ex: When calling from MaintJobEntry only Jobs with JobType = "MNT" are allowed.

Ex: When calling from ServiceJobEntry only Jobs with JobType = "SRV" are allowed.

Calling from standard JobEntry, types of "MFG,PRJ,SRV" are allowed.
   OperationID: ValidateJobNumJobType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateJobNumJobType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobNumJobType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPlantConfCtrlUse3rdPartySched(epicorHeaders = None):
   """  
   Summary: Invoke method GetPlantConfCtrlUse3rdPartySched
   Description: Get the Use3rdPartySched field from PlantConfCtrl table.
   OperationID: GetPlantConfCtrlUse3rdPartySched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPlantConfCtrlUse3rdPartySched_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ValidateRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateRefDes
   Description: Check the number of reference designators are equal to

the Required Ref Designators defined on JobMtl.
   OperationID: ValidateRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_nextMtlRefDesSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method nextMtlRefDesSeq
   Description: Functions nextAsmInspPlanSeq,nextMtlInspPlanSeq, nextMtlRefDesSeq, and nextOprInspPlanSeq are used during

the CollapseAssembly process.
   OperationID: nextMtlRefDesSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/nextMtlRefDesSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/nextMtlRefDesSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetIfCurrentSiteHasExternalMES(epicorHeaders = None):
   """  
   Summary: Invoke method GetIfCurrentSiteHasExternalMES
   Description: Purpose:

Parameters:  none

Notes:
   OperationID: GetIfCurrentSiteHasExternalMES
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetIfCurrentSiteHasExternalMES_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetJobMtlIsMtlConfigurationOn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJobMtlIsMtlConfigurationOn
   Description: After Material was configured we need to check if was success to display the correct Materials Tree Context Menu option (Configure or Configuration)
   OperationID: GetJobMtlIsMtlConfigurationOn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJobMtlIsMtlConfigurationOn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobMtlIsMtlConfigurationOn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_setJobMtlIsMtlConfigurationOn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method setJobMtlIsMtlConfigurationOn
   OperationID: setJobMtlIsMtlConfigurationOn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/setJobMtlIsMtlConfigurationOn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/setJobMtlIsMtlConfigurationOn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConfigurationRefreshQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConfigurationRefreshQty
   Description: Update PriceList Qty breaks and set new unit price on those

when the Part Number is changed by Document Rule.
   OperationID: ConfigurationRefreshQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConfigurationRefreshQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigurationRefreshQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingNumberOfPieces(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingNumberOfPieces
   Description: Logic for when the number of pieces is changing
   OperationID: OnChangingNumberOfPieces
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingSalvageNumberOfPieces(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingSalvageNumberOfPieces
   Description: Logic for when the salvage number of pieces is changing
   OperationID: OnChangingSalvageNumberOfPieces
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingJobProdAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingJobProdAttributeSetID
   Description: Call this method when the attribute set changes
   OperationID: OnChangingJobProdAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingJobProdAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobProdAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingJobProdNumberOfPieces(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingJobProdNumberOfPieces
   Description: Logic for when the number of pieces is changing
   OperationID: OnChangingJobProdNumberOfPieces
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingJobProdNumberOfPieces_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobProdNumberOfPieces_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetTreeStructure(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetTreeStructure
   Description: GetDataTreeStructure
   OperationID: GetTreeStructure
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetTreeStructure_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetTreeStructure_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOprByStageNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOprByStageNumber
   OperationID: GetNewOprByStageNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOprByStageNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOprByStageNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingSalvageAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingSalvageAttributeSetID
   Description: Logic for when the salvage attribute set changes
   OperationID: OnChangingSalvageAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingSalvageRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingSalvageRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingSalvageRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingSalvageRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingSalvageRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingJobOperRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingJobOperRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingJobOperRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingJobOperRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobOperRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobHead
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobHeadAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobHeadAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobHeadAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobHeadAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobHeadAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmbl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmbl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmbl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmbl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmbl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmblAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmblAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobAsmblInsp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobAsmblInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobAsmblInsp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobAsmblInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobAsmblInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewJobMtlInsp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewJobMtlInsp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewJobMtlInsp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewJobMtlInsp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewJobMtlInsp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCodeDescList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCodeDescList
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AddOperation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AddOperation
   Description: THIS METHOD NEEDS TO BE PUBLIC - CALLED FROM bo/Project/Project.p
   OperationID: AddOperation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddOperation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddOperation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AddRefDesRange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AddRefDesRange
   Description: Creates new JobMtlRefDes records based on the JobMtl dataset fields.
   OperationID: AddRefDesRange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddRefDesRange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddRefDesRange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AppendDetails(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AppendDetails
   OperationID: AppendDetails
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AppendDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AppendDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetJobListForSerialTrackedParts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJobListForSerialTrackedParts
   Description: Returns a list of jobs for serially tracked parts
   OperationID: GetJobListForSerialTrackedParts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJobListForSerialTrackedParts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobListForSerialTrackedParts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BuildAppendDetails(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BuildAppendDetails
   Description: This method returns the information that can be appened for approval
   OperationID: BuildAppendDetails
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildAppendDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildAppendDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BuildWhseLinkList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BuildWhseLinkList
   Description: This methods builds a list of linked warehouses for the jobprod records.
   OperationID: BuildWhseLinkList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildWhseLinkList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildWhseLinkList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CopyValuesOrderJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CopyValuesOrderJob
   Description: If the job is linked to an order with a configuration, and the AllowReconfig is true

for the JobHead target entity, copy the values from the order to the job if the user

is reconfiguring.
   OperationID: CopyValuesOrderJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CopyValuesOrderJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CopyValuesOrderJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalcJobMtlEstMtlBurUnitCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalcJobMtlEstMtlBurUnitCost
   Description: This method updates the calculation for the Estimated Material Burden Unit Cost,

(JobMtl.EstMtlBurUnitCost) field.
   OperationID: CalcJobMtlEstMtlBurUnitCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalcJobMtlEstMtlBurUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalcJobMtlEstMtlBurUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeEquipID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeEquipID
   Description: This method should be invoked when the Equip ID changes.

Validates the EQUIPID and refreshes linked fields.
   OperationID: ChangeEquipID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeEquipID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeEquipID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeIssueTopics(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeIssueTopics
   Description: This method should be invoked when the IssueTopics changes.

Validates and sets the individual IssueTopic fields.
   OperationID: ChangeIssueTopics
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeIssueTopics_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeIssueTopics_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblDirect(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblDirect
   Description: This method is called when the user has changed the JobAsmbl.Direct field.

This methods is currently not working.  This method needs to check for a remote

warehouse, if errors then set the JobAsmbl.Direct flag to true and then set the warehouse.
   OperationID: ChangeJobAsmblDirect
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblDirect_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblDirect_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblEstSplitCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblEstSplitCosts
   Description: This method calculates the Estimated Unit Cost and Material Burden Unit Cost.

This method is called when the user has changed one of the Unit Cost Breakdown

fields: JobAsmbl.EstMtlUnitCost/EstLbrUnitCost/EstBurUnitCost/EstSubUnitCost.
   OperationID: ChangeJobAsmblEstSplitCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblEstSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblEstSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblEstUnitCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblEstUnitCost
   Description: This method calculates the Estimated Material Burden Unit Cost.

This method is called when the user has changed the JobAsmbl.EstUnitCost field.
   OperationID: ChangeJobAsmblEstUnitCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblEstUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblEstUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblMtlBurRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblMtlBurRate
   Description: This methods updates the JobAsmbl Material Burden Rate.

This method should run when the JobAsmbl.MtlBurRate changes.
   OperationID: ChangeJobAsmblMtlBurRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblOpr(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblOpr
   Description: This methods updates the JobAsmbl Related Operation Description.

This method should run when the JobAsmbl.RelatedOperation field changes.
   OperationID: ChangeJobAsmblOpr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblOpr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblOpr_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblOverRunQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblOverRunQty
   Description: This methods updates the JobAsmbl Required Quantity.

This method should run when the JobAsmbl.OverRunQty field changes.
   OperationID: ChangeJobAsmblOverRunQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblOverRunQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblOverRunQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblParent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblParent
   Description: This method validates the new Parent field and populates defaults assoicated witht the Parent.

This method should run when the JobAsmbl.Parent field changes.
   OperationID: ChangeJobAsmblParent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblParent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblParent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateLinkToContractData(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateLinkToContractData
   Description: Validate Parts allowed for Planning Contracts.
   OperationID: ValidateLinkToContractData
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateLinkToContractData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateLinkToContractData_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblPartNum
   Description: This method validates the JobAsmbl.PartNum and defaults fields associated with the partnum.

This method should run when the JobAsmbl.PartNum field changes.
   OperationID: ChangeJobAsmblPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblQtyPer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblQtyPer
   Description: This methods updates the JobAsmbl Required Quantity.

This method should run when the JobAsmbl.QtyPer field changes.
   OperationID: ChangeJobAsmblQtyPer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblReassignSNAsm(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblReassignSNAsm
   Description: Checks if there is any other JobMtl or JobAsmbl records with ReassignSNAsm flag before enabling

this flag for a specific JobAsmbl.
   OperationID: ChangeJobAsmblReassignSNAsm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblReassignSNAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblReassignSNAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblRevisionNum
   Description: This methods updates the JobAsmbl Drawing Number and creates drawing records.

This method should run when the JobAsmbl.OverRunQty field changes.
   OperationID: ChangeJobAsmblRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblValRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblValRefDes
   Description: Verify that there are no other JobMtlRefDes records in the assembly having

the same RefDes value if the JobAsmbl.ValRefDes = true. This method should

run before changing the JobAsmbl.ValRefDes.
   OperationID: ChangeJobAsmblValRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblValRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblValRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblWarehouseCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblWarehouseCode
   Description: This methods updates the JobAsmbl Available Quantity.

This method should run when the JobAsmbl.WarehouseCode field changes.
   OperationID: ChangeJobAsmblWarehouseCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblWarehouseCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblWarehouseCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblAttributeSetID
   Description: This methods updates the JobAsmbl Available Quantity.

This method should run when the JobAsmbl.AttributeSetID field changes.
   OperationID: ChangeJobAsmblAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmReqRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmReqRefDes
   Description: This methods assigns JobAsmbl.RDEndNum field when JobAsmbl.ReqRefDes changes.

This method should run when the JobAsmbl.ReqRefDes changes.
   OperationID: ChangeJobAsmReqRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmReqRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmReqRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmRestriction
   Description: This methods assigns associated fields when JobAsmblRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobAsmRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmRestrictManual(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmRestrictManual
   Description: Called when the user changes the Manual field at the Job Assembly Restriction.
   OperationID: ChangeJobAsmRestrictManual
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmRestrictManual_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmRestrictManual_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmSubstance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmSubstance
   Description: This methods assigns associated fields when JobAsmblRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobAsmSubstance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobHeadContractID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobHeadContractID
   Description: This method should run on JobHead.ContractID changing.
   OperationID: CheckJobHeadContractID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobHeadContractID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobHeadContractID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadJobEngineered(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadJobEngineered
   OperationID: ChangeJobHeadJobEngineered
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadJobEngineered_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadJobEngineered_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadJobReleased(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadJobReleased
   Description: This method potentially updates the JobHead.JobEngineered field and the ttJobHead.EnableJobFirm

This method should run when the JobHead.JobReleased field changes.
   OperationID: ChangeJobHeadJobReleased
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadJobReleased_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadJobReleased_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadPartNum
   Description: This method validates the JobHead.PartNum and defaults fields associated with the partnum.

This method should run when the JobHead.PartNum field changes.
   OperationID: ChangeJobHeadPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadPersonID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadPersonID
   Description: This method should run when the JobHead.PersonID field changes.
   OperationID: ChangeJobHeadPersonID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPersonID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPersonID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadPhaseID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadPhaseID
   Description: This method updates the JobHead Required Due Date field

This method should run when the JobHead.PhaseID field changes.
   OperationID: ChangeJobHeadPhaseID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadPhaseID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadPhaseID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadProdCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadProdCode
   Description: This method should run when the JobHead.ProdCode field changes.
   OperationID: ChangeJobHeadProdCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProdCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProdCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadProdTeamID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadProdTeamID
   Description: This method should run when the JobHead.ProdTeamID field changes.
   OperationID: ChangeJobHeadProdTeamID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProdTeamID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProdTeamID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckJobHeadProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckJobHeadProjectID
   Description: This method should run on changing the JobHead.ProjectID.
   OperationID: CheckJobHeadProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckJobHeadProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckJobHeadProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadProjectID
   Description: This method should run after the JobHead.ProjectID field changes.
   OperationID: ChangeJobHeadProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobHeadRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobHeadRevisionNum
   Description: This method updates the JobHead Drawing number and creates drawing records.

This method should run when the JobHead.RevisionNum field changes.
   OperationID: ChangeJobHeadRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobHeadRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobHeadRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlBackflush(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlBackflush
   Description: This method updates  fields associated with the JobMtl.Backflush field

This method should run when the JobMtl.Backflush field changes.
   OperationID: ChangeJobMtlBackflush
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBackflush_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBackflush_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlBillable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlBillable
   Description: This method updates the JobMtl Unit Price.

This method should run when the JobMtl.Billable field changes.
   OperationID: ChangeJobMtlBillable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBillable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBillable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlBurUnitCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlBurUnitCost
   Description: This method updates the JobMtl.MtlBurRate

This method should run when the JobMtl.EstMtlBurUnitCost field changes.
   OperationID: ChangeJobMtlBurUnitCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBurUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBurUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlBuyIt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlBuyIt
   Description: This method updates numerous fields associated with the JobMtl.BuyIt field

This method should run when the JobMtl.BuyIt field changes.
   OperationID: ChangeJobMtlBuyIt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlBuyIt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlBuyIt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlCurrencySwitch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlCurrencySwitch
   Description: This method changes the display unit prices based on the flipping of the JobMtl.CurrencySwitch field

This method should run when the JobMtl.CurrencySwitch external field changes.
   OperationID: ChangeJobMtlCurrencySwitch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlCurrencySwitch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlCurrencySwitch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlDirect(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlDirect
   Description: This method updates fields associated with the JobMtl direct flag.

This method should run when the JobMtl.Direct field changes.
   OperationID: ChangeJobMtlDirect
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlDirect_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlDirect_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlDisplayUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlDisplayUnitPrice
   Description: This method calculates the db unit price fields when the external display unit price changes.

This method should run when the JobMtl.DisplayUnitPrice field changes.
   OperationID: ChangeJobMtlDisplayUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlDisplayUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlDisplayUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlEstSalSplitCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlEstSalSplitCosts
   Description: This method calculates the Estimated Salvage Unit Credit and Salvage Material

Burden Unit Credit.

This method is called when the user has changed one of the Salvage Unit Credit

Breakdown fields: JobMtl.SalvageEstMtlUnitCredit/SalvageEstLbrUnitCredit/

SalvageEstBurUnitCredit/SalvageEstSubUnitCredit.
   OperationID: ChangeJobMtlEstSalSplitCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstSalSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstSalSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlEstScrap(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlEstScrap
   Description: This method updates the JobMtl Required Quantity and price breaks

This method should run when the JobMtl.EstScrap field changes.
   OperationID: ChangeJobMtlEstScrap
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstScrap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstScrap_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlEstScrapType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlEstScrapType
   Description: This method updates the JobMtl Required Quantity and price breaks

This method should run when the JobMtl.EstScrapType field changes.
   OperationID: ChangeJobMtlEstScrapType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstScrapType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstScrapType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlEstSplitCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlEstSplitCosts
   Description: This method calculates the Estimated Unit Cost and Material Burden Unit Cost.

This method is called when the user has changed one of the Unit Cost Breakdown

fields: JobMtl.EstMtlUnitCost/EstLbrUnitCost/EstBurUnitCost/EstSubUnitCost.
   OperationID: ChangeJobMtlEstSplitCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlEstSplitCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlEstSplitCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlFixedQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlFixedQty
   Description: This method updates the JobMtl Required Quantity and price breaks

and if FixedQty is true then JobMtl.EstScrap = 0

This method should run when the JobMtl.FixedQty field changes.
   OperationID: ChangeJobMtlFixedQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlFixedQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlFixedQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlIUM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlIUM
   Description: procedure for changing JobMtl.IUM field
   OperationID: ChangeJobMtlIUM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlIUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlIUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlMiscCharge(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlMiscCharge
   Description: This method validates if transaction exists and updates fields based on value of Misc. Charge flag.

This method should run when the JobMtl.MiscCharge field changes.
   OperationID: ChangeJobMtlMiscCharge
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlMiscCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlMiscCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlMtlBurRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlMtlBurRate
   Description: This method updates the JobMtl.EstMtlBurUnitCost

This method should run when the JobMtl.MtlBurRate field changes.
   OperationID: ChangeJobMtlMtlBurRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlPartNum
   Description: This method validates the JobMtl.PartNum and defaults fields associated with the partnum.

This method should run when the JobMtl.PartNum field changes.
   OperationID: ChangeJobMtlPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingMtlRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingMtlRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingMtlRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingMtlRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingMtlRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingJobPartRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingJobPartRevisionNum
   Description: Call this method when the Revision changes to maintain inventory tracking
   OperationID: OnChangingJobPartRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingJobPartRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingJobPartRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateJobDuomAttributes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateJobDuomAttributes
   Description: If Advance Unit of Measure licensed review all parts (From Material, subcontract, subassemblies and demand)

For each part that is marked as track Inventory Attributes, validates that the attribute set is assigned and valid.
   OperationID: ValidateJobDuomAttributes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateJobDuomAttributes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateJobDuomAttributes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlPlant(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlPlant
   Description: This method should run when the JobMtl.Plant field changes.

This method determines the default JobMtl.WarehouseCode associated with the new JobMtl.Plant.
   OperationID: ChangeJobMtlPlant
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlPricePerCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlPricePerCode
   Description: This method recalculates the JobMtl Display Extended Price

This method should run when the JobMtl.PricePerCode field changes.
   OperationID: ChangeJobMtlPricePerCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlPurPoint(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlPurPoint
   Description: This method runs vendor price break logic and sets RcvInspectionReq when JobMtl.PurPoint changes

This method should run when the JobMtl.PurPoint field changes.
   OperationID: ChangeJobMtlPurPoint
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlPurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlPurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlQtyPer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlQtyPer
   Description: This method calculates the JobMtl Required Quantity when the JobMtl Quantity Per changes.

This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlQtyPer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSalvageQtyPer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSalvageQtyPer
   Description: This method updates the JobMtl Salvage Number of Pieces when the

JobMtl Salvage Quantity Per changes.

This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlSalvageQtyPer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSalvageUM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSalvageUM
   Description: This method updates the JobMtl Salvage Number of Pieces when the

JobMtl Salvage UOM changes.

This method should run when the JobMtl.QtyPer field changes.
   OperationID: ChangeJobMtlSalvageUM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlRcvInspectionReq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlRcvInspectionReq
   Description: This method checks the vendor and partclass to see if inspection is required

This method should run when the JobMtl.RcvInspectionReq field changes.
   OperationID: ChangeJobMtlRcvInspectionReq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRcvInspectionReq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRcvInspectionReq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlReassignSNAsm(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlReassignSNAsm
   Description: Checks if there is any other JobMtl or JobAsmbl records with ReassignSNAsm flag before enabling

this flag for a specific JobMtl.
   OperationID: ChangeJobMtlReassignSNAsm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlReassignSNAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlReassignSNAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlRelatedOperation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlRelatedOperation
   Description: This method validates the JobMtl Related Operation field, sets the Estimated Scrap,

and calculates the Required Quantity.

This method should run when the JobMtl.RelatedOperation field changes.
   OperationID: ChangeJobMtlRelatedOperation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRelatedOperation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRelatedOperation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlLinkToContract(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlLinkToContract
   Description: This method should run when the JobMtl.LinkToContract changes.
   OperationID: ChangeJobMtlLinkToContract
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlLinkToContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlLinkToContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobAsmblLinkToContract(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobAsmblLinkToContract
   Description: This method should run when the JobAsmbl.LinkToContract changes.
   OperationID: ChangeJobAsmblLinkToContract
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobAsmblLinkToContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobAsmblLinkToContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlReqRefDes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlReqRefDes
   Description: This methods assigns JobMtl.RDEndNum field when JobMtl.ReqRefDes changes.

This method should run when the JobMtl.ReqRefDes changes.
   OperationID: ChangeJobMtlReqRefDes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlReqRefDes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlReqRefDes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlRestriction
   Description: This methods assigns associated fields when JobMtlRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobMtlRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSalvageMtlBurRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSalvageMtlBurRate
   Description: This methods updates the JobMtl Salvage Est Material Burden Unit Credit.

This method should run when the JobMtl.SalvageMtlBurRate changes.
   OperationID: ChangeJobMtlSalvageMtlBurRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageMtlBurRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageMtlBurRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSalvagePartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSalvagePartNum
   Description: This methods assigns associated fields when JobMtl.SalvagePartNum changes.

This method should run when the JobMtl.SalvagePartNum changes.
   OperationID: ChangeJobMtlSalvagePartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvagePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvagePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSalvageUnitCredit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSalvageUnitCredit
   Description: This method calculates the Salvage Estimated Material Burden Unit Credit.

This method is called when the user has changed the JobMtl.SalvageUnitCredit field.
   OperationID: ChangeJobMtlSalvageUnitCredit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSalvageUnitCredit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSalvageUnitCredit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlSubstance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlSubstance
   Description: This methods assigns associated fields when JobMtlRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobMtlSubstance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ClearPurchasingData(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ClearPurchasingData
   Description: Clears data in Job>Assemblies>Materials Purchasing section.
   OperationID: ClearPurchasingData
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ClearPurchasingData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ClearPurchasingData_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMtlVendorNumVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMtlVendorNumVendorID
   Description: This method runs vendor price break logic and sets RcvInspectionReq when JobMtl.VendorNumVendorID changes

and validates the jobmtl.vendornumvendorid and assigns the associated fields.

This method should run when the JobMtl.VendorNumVendorID field changes.
   OperationID: ChangeJobMtlVendorNumVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMtlVendorNumVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMtlVendorNumVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlCapability(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlCapability
   Description: Method to call when changing the Capability ID.  This method will update JobOpDtl

to see if the labor and burden rates need to be reset.  Blank is a valid entry for

Capability ID.
   OperationID: ChangeJobOpDtlCapability
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlCapability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlCapability_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlEstSetHoursPerMch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlEstSetHoursPerMch
   Description: This method recalculates the Estimated Setup Hours when Estimated Setup Hours Per Machine changes.

This method should run when the JobOpDtl.EstSetHoursPerMch field changes.
   OperationID: ChangeJobOpDtlEstSetHoursPerMch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlEstSetHoursPerMch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlEstSetHoursPerMch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlOpsPerPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlOpsPerPart
   Description: This method calculates Estimated Production Hours when the OpsPerPart field changes.

This method should run when the JobOpDtl.OpsPerPart field changes.
   OperationID: ChangeJobOpDtlOpsPerPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlOpsPerPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlOpsPerPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlOverrideRates(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlOverrideRates
   Description: Method to call when changing the Override Rates Flag.  This method will update

JobOpDtl with the default labor and burden rates from the appropriate resource

or resource group if the JobOpDtl.OverrideRates is set to false.
   OperationID: ChangeJobOpDtlOverrideRates
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlOverrideRates_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlOverrideRates_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlProdStandard(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlProdStandard
   Description: This method recalculates the Estimated Production Hours when ProdStandard changes.

This method should run when the JobOpDtl.ProdStandard field changes.
   OperationID: ChangeJobOpDtlProdStandard
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlProdStandard_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlProdStandard_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlQtyPerCycle(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlQtyPerCycle
   OperationID: ChangeJobOpDtlQtyPerCycle
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlQtyPerCycle_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlQtyPerCycle_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlResourceGrpID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlResourceGrpID
   Description: Method to call when changing the Resource Group ID.  This method will update JobOpDtl

with the default labor and burden rates from the new resource group.  Blank is a valid

entry for Resource Group ID.
   OperationID: ChangeJobOpDtlResourceGrpID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlResourceGrpID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlResourceGrpID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlResourceID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlResourceID
   Description: Method to call when changing the Resource ID.  This method will update JobOpDtl

with the default labor and burden rates from the new resource.  Blank is a valid

entry for Resource ID.
   OperationID: ChangeJobOpDtlResourceID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlResourceID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlResourceID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlStdBasis(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlStdBasis
   Description: This method recalculates the Estimated Production Hours when StdBasis changes.

This method should run when the JobOpDtl.StdBasis field changes.
   OperationID: ChangeJobOpDtlStdBasis
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlStdBasis_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlStdBasis_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOpDtlStdFormat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOpDtlStdFormat
   Description: This method recalculates the Estimated Production Hours when StdFormat changes.

This method should run when the JobOpDtl.StdFormat field changes.
   OperationID: ChangeJobOpDtlStdFormat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOpDtlStdFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOpDtlStdFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperAutoReceive(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperAutoReceive
   OperationID: ChangeJobOperAutoReceive
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperAutoReceive_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperAutoReceive_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperBillable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperBillable
   Description: This method calculates the Labor Rate and Unit Price when the Billable flag changes.

This method should run when the JobOper.Billable field changes.
   OperationID: ChangeJobOperBillable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperBillable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperBillable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperCurrencySwitch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperCurrencySwitch
   Description: This method changes the display unit prices based on the flipping of the JobOPer.CurrencySwitch field

This method should run when the JobOper.CurrencySwitch external field changes.
   OperationID: ChangeJobOperCurrencySwitch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperCurrencySwitch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperCurrencySwitch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperDisplayUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperDisplayUnitPrice
   Description: This method runs logic to calculate the doc price fields and the display extended price.

This method should run when the JobOper.UnitPrice field changes.
   OperationID: ChangeJobOperDisplayUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperDisplayUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperDisplayUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperDocUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperDocUnitPrice
   Description: This method calculates Unit Price and Billable Unit Price when Doc Unit Price changes.

This method should run when the JobOper.DocUnitPrice field changes.
   OperationID: ChangeJobOperDocUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperDocUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperDocUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperEstLabHours(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperEstLabHours
   Description: This method updates the Estimated Production Hours, rate fields, and Production Standard along with others.

This method should run when the JobOper.EstLabHours field changes.
   OperationID: ChangeJobOperEstLabHours
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstLabHours_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstLabHours_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperEstScrap(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperEstScrap
   Description: This method calculates Production and Scrap Quantities and estimate producition hours.

This method should run when the JobOper.EstScrap field changes.
   OperationID: ChangeJobOperEstScrap
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstScrap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstScrap_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperEstScrapType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperEstScrapType
   Description: This method calculates Production and Scrap Quantities and estimate producition hours.

This method should run when the JobOper.EstScrapType field changes.
   OperationID: ChangeJobOperEstScrapType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstScrapType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstScrapType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperEstSetHoursPerMch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperEstSetHoursPerMch
   Description: This method calculates the estimated labor hours when Job Type = "SRV" and

update the display fields for service amount and labor amount.

This method should run when the JobOper.EstSetHoursPerMch field changes.
   OperationID: ChangeJobOperEstSetHoursPerMch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperEstSetHoursPerMch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperEstSetHoursPerMch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperIUM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperIUM
   Description: procedure for changing JobOper.IUM field
   OperationID: ChangeJobOperIUM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperIUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperIUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperLaborEntryMethod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperLaborEntryMethod
   OperationID: ChangeJobOperLaborEntryMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperLaborEntryMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperLaborEntryMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperMachines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperMachines
   Description: This method updates the fields associated with the changing of the machines,

EstLabHours should change.

This method should run when the JobOper.Machines field changes.
   OperationID: ChangeJobOperMachines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperMachines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperMachines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperOpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperOpCode
   Description: This method sets Labor Rates when the JobOper.OpCode changes.

This method should run when the JobOper.OpCode field changes.
   OperationID: ChangeJobOperOpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperOprSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperOprSeq
   OperationID: ChangeJobOperOprSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOprSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOprSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperOpsPerPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperOpsPerPart
   Description: This method calculates Estimated Production Hours when the OpsPerPart field changes.

This method should run when the JobOper.OpsPerPart field changes.
   OperationID: ChangeJobOperOpsPerPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpsPerPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpsPerPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperOpStdID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperOpStdID
   Description: This method defaults the new setup and production values when the Operation Standard ID changes.

This method should run when the JobOper.OpStdID field changes.
   OperationID: ChangeJobOperOpStdID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperOpStdID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperOpStdID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperPartNum
   Description: This method validates the JobOper.PartNum and defaults fields associated with the partnum.

This method should run when the JobOper.PartNum field changes.
   OperationID: ChangeJobOperPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperPricePerCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperPricePerCode
   Description: This method recalculates the JobOper Display Extended Price when PricePerCode changes.

This method should run when the JobOper.PricePerCode field changes.
   OperationID: ChangeJobOperPricePerCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperPrimaryProdOpDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperPrimaryProdOpDtl
   Description: This method defaults/resets the production standards when selecting Primary

Production Operation Detail.

This method should run when the JobOper.PrimaryProdOpDtl field changes.
   OperationID: ChangeJobOperPrimaryProdOpDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPrimaryProdOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPrimaryProdOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperPrimarySetupOpDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperPrimarySetupOpDtl
   Description: This method defaults/resets the setup values when selecting Primary

Setup Operation Detail.

This method should run when the JobOper.PrimarySetupOpDtl field changes.
   OperationID: ChangeJobOperPrimarySetupOpDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPrimarySetupOpDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPrimarySetupOpDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperProdStandard(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperProdStandard
   Description: This method recalculates teh Estimated Production Hours when ProdStandard changes.

This method should run when the JobOper.ProdStandard field changes.
   OperationID: ChangeJobOperProdStandard
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperProdStandard_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperProdStandard_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperQtyPerCycle(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperQtyPerCycle
   OperationID: ChangeJobOperQtyPerCycle
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperQtyPerCycle_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperQtyPerCycle_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperPurPoint(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperPurPoint
   Description: This method determines price breaks and check if inspection is required.

This method should run when the JobOper.PurPoint field changes.
   OperationID: ChangeJobOperPurPoint
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperPurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperPurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperQtyPer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperQtyPer
   Description: This method calculates the production scrap, determines vendor price breaks, and

updates the display extended price.

This method should run when the JobOper.QtyPer field changes.
   OperationID: ChangeJobOperQtyPer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperRcvInspection(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperRcvInspection
   Description: This method runs logic to determine if inspection is required.

This method should run when the JobOper.RcvInspection field changes.
   OperationID: ChangeJobOperRcvInspection
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperRcvInspection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperRcvInspection_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperSNRequired(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperSNRequired
   OperationID: ChangeJobOperSNRequired
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperSNRequired_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperSNRequired_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperSNRequiredSubConShip(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperSNRequiredSubConShip
   OperationID: ChangeJobOperSNRequiredSubConShip
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperSNRequiredSubConShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperSNRequiredSubConShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperStdBasis(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperStdBasis
   Description: This method runs logic to calculate the estimated production hours.

This method should run when the JobOper.StdBasis field changes.
   OperationID: ChangeJobOperStdBasis
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperStdBasis_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperStdBasis_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperStdFormat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperStdFormat
   Description: This method runs logic to calculate the estimated production hours.

This method should run when the JobOper.StdFormat field changes.
   OperationID: ChangeJobOperStdFormat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperStdFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperStdFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperUnitPrice
   Description: This method runs logic to calculate the doc price fields and the display extended price.

This method should run when the JobOper.UnitPrice field changes.
   OperationID: ChangeJobOperUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOperVendorNumVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOperVendorNumVendorID
   Description: This method runs logic to set the purchase points, calculate the price breaks,

and checks to see if inspection is required.

This method should run when the JobOper.VendorNumVendorID field changes.
   OperationID: ChangeJobOperVendorNumVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOperVendorNumVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOperVendorNumVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOprRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOprRestriction
   Description: This methods assigns associated fields when JobOperRestriction.RestrictionTypeID changes.
   OperationID: ChangeJobOprRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOprRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOprRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobOprSubstance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobOprSubstance
   Description: This methods assigns associated fields when JobOperRestrictSubst.SubstanceID changes.
   OperationID: ChangeJobOprSubstance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobOprSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobOprSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobPartPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobPartPartNum
   Description: This method validates the JobPart.PartNum and defaults fields associated with the partnum.

This method should run when the JobPart.PartNum field changes.
   OperationID: ChangeJobPartPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobPartPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobPartPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdMakeToJobQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdMakeToJobQty
   Description: This method runs public method CheckJobProdQtyJob to validate quantities.

This method should run when the JobProd.MakeToJobQty field changes.
   OperationID: ChangeJobProdMakeToJobQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToJobQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToJobQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobProdMakeToStockQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobProdMakeToStockQty
   Description: This method runs logic to set the stock and order WIP quantities

This method should run when the JobProd.MakeToStockQty field changes.
   OperationID: ChangeJobProdMakeToStockQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobProdMakeToStockQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobProdMakeToStockQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.JobEntrySvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################
class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmRefDesRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmRefDesRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmblAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblInspRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmblInspRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictSubstRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmblRestrictSubstRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRestrictionRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmblRestrictionRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAsmblRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAsmblRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobAuditRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobAuditRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobHeadAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadListRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobHeadListRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobHeadRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobHeadRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlInspRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlInspRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRefDesRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlRefDesRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictSubstRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlRestrictSubstRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRestrictionRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlRestrictionRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobMtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobMtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOpDtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOpDtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionParamRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperActionParamRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperActionRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperActionRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperInspRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperInspRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperMachParamRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperMachParamRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictSubstRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperRestrictSubstRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRestrictionRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperRestrictionRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobOperRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobOperRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobPartRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobPartRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobProdRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobProdRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobResourcesRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobResourcesRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_JobStageRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_JobStageRow] = obj["value"]
      pass

class Erp_Tablesets_JobAsmRefDesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RefDes:str = obj["RefDes"]
      """  Identifier of Reference Designator  """  
      self.RefDesSeq:int = obj["RefDesSeq"]
      """  Unique identifies the reference designator with the material sequence.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Side:str = obj["Side"]
      """  Free form side location. (Top, Bottom, Both, Level, etc)  """  
      self.XLocation:int = obj["XLocation"]
      """  X Coordinate of the reference designator  """  
      self.YLocation:int = obj["YLocation"]
      """  Y Coordinate of the reference designator  """  
      self.ZLocation:int = obj["ZLocation"]
      """  Z Coordinate of the reference designator  """  
      self.Rotation:int = obj["Rotation"]
      """  Rotation of the reference designator. Max value = 360.000  """  
      self.Description:str = obj["Description"]
      """  Designator Description  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobAsmblInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  Defaulted from Part Master Substances. When true then weight is disregarded in compliance roll-up.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PartNum:str = obj["PartNum"]
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.RollupType:str = obj["RollupType"]
      """  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  """  
      self.Compliance:str = obj["Compliance"]
      """  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.ComplianceDate:str = obj["ComplianceDate"]
      """  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.LastRollUp:str = obj["LastRollUp"]
      """  Set after compliance roll-up  """  
      self.BuiltCompliance:str = obj["BuiltCompliance"]
      """  Displays one of the built compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.BuiltComplianceDate:str = obj["BuiltComplianceDate"]
      """  Set when Manual flag is checked or after built compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.BuiltLastRollUp:str = obj["BuiltLastRollUp"]
      """  Set after built compliance roll-up  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.EnableRollUpType:bool = obj["EnableRollUpType"]
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if the Job is complete.  This is a mirror image of JobHead.JobComplete.  Not directly maintainable.  When Job is complete, then all assembly records are also marked complete.  This is used to make database access to open assembly records more efficient.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  """  
      self.Description:str = obj["Description"]
      """  Description for the Part on the assembly record.  This cannot be blank.  Use Part.Description as default if a valid Part record exists.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the assembly.  An optional field.  Defaults from the most current PartRev.RevisionNum.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  The production quantity required for this assembly per one of it's parent part.  """  
      self.IUM:str = obj["IUM"]
      """  The internal unit of measure for this assembly.  Use the Part.IUM as a default.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """   This is how many of the assemblies are required to produce the END ITEM.  This is a calculated field.  Calculated as the (( Parents RequiredQty - Parents PullQty) X QtyPer) + OverRunQty.

This field needs to be refreshed whenever a change is made to the production quantity in any of its parents or when its QtyPer, or Overrun fields are changed. The refresh may also occur if the structure of the assemblies is changed.

The production quantity for the assembly which will drive raw material requirements and estimated production times can be determined by ( RequiredQty - PullQty).  """  
      self.PullQty:int = obj["PullQty"]
      """  This indicates a quantity that will be pulled from inventory for this assembly instead of being manufactured. This is a fixed quantity and is not affected by  QtyPer type changes. If this a valid Part, then it must update the PartWhse.AllocQty.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  This is the warehouse that the material is allocated against.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Assembly.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  The estimated unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  The estimated Mtl burden unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  """  
      self.OverRunQty:int = obj["OverRunQty"]
      """  This value indicates a quantity that is planned to be overrun and put into inventory. This is kept as a separate field so that is does not distort the BOM requirement relationships. This increases the total production quantity for the assembly.  This is a FIXED quantity and is not affected by structure or qty/per type changes.  """  
      self.StartDate:str = obj["StartDate"]
      """  Scheduled start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process.  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  """  
      self.DueDate:str = obj["DueDate"]
      """  The scheduled due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the  "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  """  
      self.Parent:int = obj["Parent"]
      """  Sequence number of the Parent Assembly.  """  
      self.PriorPeer:int = obj["PriorPeer"]
      """   The  sequence number of the prior assembly that is on the same level as this assembly.  This  is known as a PriorPeer assembly.  This is automatically maintained by the maintenance programs.

The logic is to find an assembly where the Parent is the same and the NextPeer is -1.  Then NextPeer of that assembly gets updated with this assemblies sequence number and this assembly gets its PriorPeer field updated with the sequence number from the assembly which was found.  """  
      self.NextPeer:int = obj["NextPeer"]
      """   The sequence number of the Next Assembly on the same level as this assembly.  This is known as a NextPeer assembly.  Automatically maintained by the maintenance programs.

The logic is to find an assembly where the Parent is the same and the PriorPeer is -1.  Then the PriorPeer of that assembly is updated with this assemblies sequence number and then this assemblies NextPeer gets updated with the sequence number from the assembly that was found.  """  
      self.Child:int = obj["Child"]
      """  Sequence number of this assemblies very first subassembly.  This is known as the Child assembly.  Automatically maintained by the maintenance programs.  The logic is to find the Parent assembly record and if its child is -1, update it with this assemblies sequence number.  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date, of this component that was issued from stock.  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total material burden cost to date, of this component that was issued from stock.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions that were issued to meet this assemblies PullQty requirements.  This is not directly maintainable.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Optional field for Engineering Drawing Number.  Defaulted from BomHead.DrawNum during methods pull functions.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if the pull quantity has been issued complete.  If "yes" then this record is NOT part of the PartWhse.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job Assembly comments.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if this assembly is to be included in the browse of assemblies in the  "get details" function.  The user can use this option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly, it just keeps it out of the browse.  """  
      self.BomSequence:int = obj["BomSequence"]
      """  An internally system assigned integer which is used as part of an index to organize the records into a Bill of Material fashion sequence.  """  
      self.BomLevel:int = obj["BomLevel"]
      """  An internally system assigned integer which represents the "Level of Indention" of the assembly in reference to the Bill of Material structure.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  Scheduled "What If" start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If  "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  The scheduled "What-If" due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  """  
      self.TLALaborCost:int = obj["TLALaborCost"]
      """  This Level Actual Labor Cost.  """  
      self.TLABurdenCost:int = obj["TLABurdenCost"]
      """  This Level Actual Burden Cost.  """  
      self.TLAMaterialCost:int = obj["TLAMaterialCost"]
      """  This Level Actual Material Cost.  """  
      self.TLASubcontractCost:int = obj["TLASubcontractCost"]
      """  This Level Actual Subcontract Cost.  """  
      self.TLAMtlBurCost:int = obj["TLAMtlBurCost"]
      """  This Level Actual Material Burden Cost.  """  
      self.TLASetupHours:int = obj["TLASetupHours"]
      """  This Level Actual Setup Hours.  """  
      self.TLAProdHours:int = obj["TLAProdHours"]
      """  This Level Actual Production Hours.  """  
      self.TLELaborCost:int = obj["TLELaborCost"]
      """  This Level Estimated Labor Cost.  """  
      self.TLEBurdenCost:int = obj["TLEBurdenCost"]
      """  This Level Estimated Burden Cost.  """  
      self.TLEMaterialCost:int = obj["TLEMaterialCost"]
      """  This Level Estimated Material Cost.  """  
      self.TLESubcontractCost:int = obj["TLESubcontractCost"]
      """  This Level Estimated Subcontract Cost.  """  
      self.TLEMtlBurCost:int = obj["TLEMtlBurCost"]
      """  This Level Estimated Material Burden Cost.  """  
      self.TLESetupHours:int = obj["TLESetupHours"]
      """  This Level Estimated Setup Hours.  """  
      self.TLEProdHours:int = obj["TLEProdHours"]
      """  This Level Estimated Production Hours.  """  
      self.LLALaborCost:int = obj["LLALaborCost"]
      """  Lower Level Actual Labor Cost.  """  
      self.LLABurdenCost:int = obj["LLABurdenCost"]
      """  Lower Level Burden Labor Cost.  """  
      self.LLAMaterialCost:int = obj["LLAMaterialCost"]
      """  Lower Level Actual Material Cost.  """  
      self.LLASubcontractCost:int = obj["LLASubcontractCost"]
      """  Lower Level Actual Subcontractor Cost.  """  
      self.LLAMtlBurCost:int = obj["LLAMtlBurCost"]
      """  Lower Level Actual Material Burden Cost.  """  
      self.LLASetupHours:int = obj["LLASetupHours"]
      """  Lower Level Actual Setup Hours.  """  
      self.LLAProdHours:int = obj["LLAProdHours"]
      """  Lower Level Actual Production Hours.  """  
      self.LLELaborCost:int = obj["LLELaborCost"]
      """  Lower Level Estimated Labor Cost.  """  
      self.LLEBurdenCost:int = obj["LLEBurdenCost"]
      """  Lower Level Estimated Burden Cost.  """  
      self.LLEMaterialCost:int = obj["LLEMaterialCost"]
      """  Lower Level Estimated Material Cost.  """  
      self.LLESubcontractCost:int = obj["LLESubcontractCost"]
      """  Lower Level Estimated Subcontract Cost.  """  
      self.LLEMtlBurCost:int = obj["LLEMtlBurCost"]
      """  Lower Level Estimated Material Burden Cost.  """  
      self.LLESetupHours:int = obj["LLESetupHours"]
      """  Lower Level Estimated Setup Hours.  """  
      self.LLEProdHours:int = obj["LLEProdHours"]
      """  Lower Level Estimated Production Hours.  """  
      self.AutoRecOpr:int = obj["AutoRecOpr"]
      """   The operation number (JobOper.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.

This field is not directly maintainable.  Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  """  
      self.FinalOpr:int = obj["FinalOpr"]
      """   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.

This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  """  
      self.FindNum:str = obj["FindNum"]
      """  FUTURE IMPLEMENTATION - Characters used on the parent assembly drawing to show where assembly  is used.  """  
      self.ReceivedToStock:int = obj["ReceivedToStock"]
      """  Total received to stock.  This pertains receiving an OverRun quantity.  Used to update the PartDtl file for expected production quantity.  PartDtl is OverRun - ReceivedToStock.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this assembly material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified..  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """   An assembly record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.

It can be left as zero meaning that this assembly is required at the very beginning of the production job.  The related operation is also used to calculate scheduled start date.  """  
      self.TLAMaterialLabCost:int = obj["TLAMaterialLabCost"]
      """  This Level Actual Material Labor Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialLabCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialMtlCost:int = obj["TLAMaterialMtlCost"]
      """  This Level Actual Issued Material Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialMtlCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialSubCost:int = obj["TLAMaterialSubCost"]
      """  This Level Actual Material Subcontract Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialSubCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialBurCost:int = obj["TLAMaterialBurCost"]
      """  This Level Actual Material Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialBurCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.LLAMaterialLabCost:int = obj["LLAMaterialLabCost"]
      """  Lower Level Actual Material Labor Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialLabCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialMtlCost:int = obj["LLAMaterialMtlCost"]
      """  Lower Level Actual Material Material Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialMtlCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialSubCost:int = obj["LLAMaterialSubCost"]
      """  Lower Level Actual Material Subcontract Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialSubCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialBurCost:int = obj["LLAMaterialBurCost"]
      """  Lower Level Actual Material Burden Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialBurCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.TotalMtlMtlCost:int = obj["TotalMtlMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.TotalMtlLabCost:int = obj["TotalMtlLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.TotalMtlSubCost:int = obj["TotalMtlSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.TotalMtlBurCost:int = obj["TotalMtlBurCost"]
      """  Total Burden cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this assembly belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this assembly relates to.  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.OrigRequiredQty:int = obj["OrigRequiredQty"]
      """  This field will be set to the value of the JobAsmbl.RequiredQty at the time the JobHead.Engineered flag is set to true.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.TLAMaterialMtlBurCost:int = obj["TLAMaterialMtlBurCost"]
      """  This Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for this level.  Otherwise, TLAMaterialMtlBurCost may be populated but is not included in the calculation of TLAMaterialCost.  """  
      self.LLAMaterialMtlBurCost:int = obj["LLAMaterialMtlBurCost"]
      """  Lower Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for the lower level.  Otherwise, LLAMaterialMtlBurCost may be populated but is not included in the calculation of LLAMaterialCost.  """  
      self.TLAMfgCompLabCost:int = obj["TLAMfgCompLabCost"]
      """  This Level Actual Component Labor Cost.  This is the Total Labor costs of all manufactured parts issued as material for this level. Unlike TLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompMtlCost:int = obj["TLAMfgCompMtlCost"]
      """  This Level Actual Component Material Cost.  This is the Total Material costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompSubCost:int = obj["TLAMfgCompSubCost"]
      """  This Level Actual Component Subcontract Cost.  This is the Total Subcontract costs of all manufactured parts issued as material for this level. Unlike TLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompBurCost:int = obj["TLAMfgCompBurCost"]
      """  This Level Actual Component Burden Cost.  This is the Total Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompMtlBurCost:int = obj["TLAMfgCompMtlBurCost"]
      """  This Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.LLAMfgCompLabCost:int = obj["LLAMfgCompLabCost"]
      """  Lower Level Actual Component Labor Cost. This is the Total Labor costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompMtlCost:int = obj["LLAMfgCompMtlCost"]
      """  Lower Level Actual Component Material Cost. This is the Total Material costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompSubCost:int = obj["LLAMfgCompSubCost"]
      """  Lower Level Actual Component Subcontract Cost. This is the Total Subcontract costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompBurCost:int = obj["LLAMfgCompBurCost"]
      """  Lower Level Actual Component Burden Cost. This is the Total Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompMtlBurCost:int = obj["LLAMfgCompMtlBurCost"]
      """  Lower Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.Weight:int = obj["Weight"]
      """  Assembly Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Assembly Weight UOM defaulted from Part Master.  """  
      self.OrigMtlSeq:int = obj["OrigMtlSeq"]
      """  Original Material Sequence. Used in the configurator.  """  
      self.OrigRuleTag:str = obj["OrigRuleTag"]
      """  Original Rule Tag. Used in the Configurator.  """  
      self.ValRefDes:bool = obj["ValRefDes"]
      """  Validate Reference Designators.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      """   The estimated material unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      """   The estimated labor unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      """   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      """   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.PlanAsAsm:bool = obj["PlanAsAsm"]
      """  Indicates if the sub-assemby can be spawned off to a different job.  This can occur during the firming up of a job.  """  
      self.PAARef:str = obj["PAARef"]
      """  Plan as assembly reference.  Used to link related subassemblies together when multiple assemblies are created for the same part due to PartSite lot size values.  """  
      self.PAAFirm:bool = obj["PAAFirm"]
      """  Used only on Plan As Assembly records.  Indicates the sub assembly will be split of from the the current job and a separate job for the assembly will be created.  """  
      self.EstScrap:int = obj["EstScrap"]
      """  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.ReqRefDes:int = obj["ReqRefDes"]
      """  Required number of designators  """  
      self.ReassignSNAsm:bool = obj["ReassignSNAsm"]
      """  Reassign Serial Numbers Assembly  """  
      self.TLAODCCost:int = obj["TLAODCCost"]
      """  This Level Actual Other Direct Cost.  """  
      self.AssemblyMatch:str = obj["AssemblyMatch"]
      """  AssemblyMatch  """  
      self.JdfStatus:str = obj["JdfStatus"]
      """  JdfStatus  """  
      self.PressDevice:str = obj["PressDevice"]
      """  PressDevice  """  
      self.DigitalFileName:str = obj["DigitalFileName"]
      """  DigitalFileName  """  
      self.PrepressJobName:str = obj["PrepressJobName"]
      """  PrepressJobName  """  
      self.JdfPrepressAction:str = obj["JdfPrepressAction"]
      """  JdfPrepressAction  """  
      self.SendToPress:bool = obj["SendToPress"]
      """  SendToPress  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.SendToPressInitiator:int = obj["SendToPressInitiator"]
      """  SendToPressInitiator  """  
      self.OperationType:int = obj["OperationType"]
      """  OperationType  """  
      self.SendToPrePress:bool = obj["SendToPrePress"]
      """  SendToPrePress  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PartPlanInfo:str = obj["PartPlanInfo"]
      """  PartPlanInfo  """  
      self.OrigStructTag:str = obj["OrigStructTag"]
      """  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.AvailableQty:int = obj["AvailableQty"]
      """  Calculated Available Quantity  """  
      self.bUseAvailQty:bool = obj["bUseAvailQty"]
      """  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  """  
      self.ChildAssemblySeq:int = obj["ChildAssemblySeq"]
      """  The child assembly sequence field.  The JobAsmbl.Child field value.  The field Child was causing a .net conflict.  """  
      self.DispIUM:str = obj["DispIUM"]
      """  The internal unit of measure for this assembly.  Same as IUM but readOnly  """  
      self.DisplayOrder:int = obj["DisplayOrder"]
      """  The order JobAsmbl records should be displayed.  """  
      self.EnableAsmSplitCosts:bool = obj["EnableAsmSplitCosts"]
      """  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  """  
      self.EnableMtlSalvage:bool = obj["EnableMtlSalvage"]
      self.EnablePurDir:bool = obj["EnablePurDir"]
      self.FirmProcEnable:bool = obj["FirmProcEnable"]
      """  If it's Stocked assembly and PlanAsAsm is true.  """  
      self.FirmProcess:bool = obj["FirmProcess"]
      """  Is used to select stocked Job Assemblies which will be processed by Firming Process. Is available only for .FirmProcEnable = true.  """  
      self.GetCostsFromInventory:bool = obj["GetCostsFromInventory"]
      """  External field for EQSyst GetCostsFromInventory  """  
      self.GetCostsFromTemplate:bool = obj["GetCostsFromTemplate"]
      """  External field to hold JCSyst.GetCostsFromTemplate value  """  
      self.ParentAssemblySeq:int = obj["ParentAssemblySeq"]
      """  The parent assembly sequence field.  The JobAsmbl.Parent field value.  The field Parent was causing a .net conflict.  """  
      self.ParentDescription:str = obj["ParentDescription"]
      """  Parent Description  """  
      self.ParentPartNum:str = obj["ParentPartNum"]
      """  Parent PartNum  """  
      self.ParentRev:str = obj["ParentRev"]
      """  Parent RevisionNum  """  
      self.PartExists:bool = obj["PartExists"]
      """  Internal flag to identify if current Part is an Inventory Part.  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      self.RDEndNum:int = obj["RDEndNum"]
      """  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  """  
      self.RDPrefix:str = obj["RDPrefix"]
      """  The prefix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  """  
      self.RDStartNum:int = obj["RDStartNum"]
      """  This number will be used to create reference designators. This field will be defaulted to ?1?  """  
      self.RDSuffix:str = obj["RDSuffix"]
      """  The suffix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  """  
      self.RelatedOperationDesc:str = obj["RelatedOperationDesc"]
      """  Related Operation Description  """  
      self.ShowWarningBOMResequence:bool = obj["ShowWarningBOMResequence"]
      """  For Internal use ONLY to set a flag calculated from BO to show a warning message to the user when there exists some inconsistences between records on JobAsml table that can cause infinite loop when BOM Resequence.  """  
      self.AddAsmAs:str = obj["AddAsmAs"]
      """  External field used to determine if Add assembly as "Sub"assembly or "Asm"bly  """  
      self.bAvailQty:int = obj["bAvailQty"]
      """  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      self.AttrClassID:str = obj["AttrClassID"]
      self.TLATotalCost:int = obj["TLATotalCost"]
      """  This Level Total Actual Cost (TLAMaterialCost + TLALaborCost + TLABurdenCost + TLASubcontractCost + TLAMtlBurCost)  """  
      self.TLETotalCost:int = obj["TLETotalCost"]
      """  The Level Estimated Total Cost (TLEMaterialCost + TLELaborCost + TLEBurdenCost + TLESubcontractCost + TLEMtlBurCost)  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PlantName:str = obj["PlantName"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAuditRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  System date when this change was made.  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  System time (seconds since midnight) of when the changes were made.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID who made the changes.  Not maintainable by the user.  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  Used to enter a description of the changes that were made.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DspChangeTime:str = obj["DspChangeTime"]
      """  Formatted display of ChangeTime  """  
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobHeadAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobHeadListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  Date the Job was closed.  Defaults as the system but can be overridden.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  """  
      self.JobCompletionDate:str = obj["JobCompletionDate"]
      """  The date that production was completed for this Job.  Maintained via Job Completion Processing.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  """  
      self.JobReleased:bool = obj["JobReleased"]
      """  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  """  
      self.JobHeld:bool = obj["JobHeld"]
      """  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  The description of the part that is to be manufactured.  Use the Part.Description as the default.  """  
      self.ProdQty:int = obj["ProdQty"]
      """  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.

See JobPart table for information on end parts of a job.  """  
      self.IUM:str = obj["IUM"]
      """  The unit of measure for the job.  Defaulted from Part.IUM.  """  
      self.StartDate:str = obj["StartDate"]
      """  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.ReqDueDate:str = obj["ReqDueDate"]
      """  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  """  
      self.JobCode:str = obj["JobCode"]
      """  An optional user defined code.  This will be used for report selections and views of job headers.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Contains the quote line number reference. (see QuoteNum )  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job header comments.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.Candidate:bool = obj["Candidate"]
      """   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.

This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  """  
      self.SchedCode:str = obj["SchedCode"]
      """  Scheduling Code.  SchedCode references a record in the SchedPri table.  """  
      self.SchedLocked:bool = obj["SchedLocked"]
      """  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Associates the JobHead with a project in the Project table.  This can be blank.  """  
      self.WIPCleared:bool = obj["WIPCleared"]
      """  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  """  
      self.JobFirm:bool = obj["JobFirm"]
      """  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  """  
      self.PersonList:str = obj["PersonList"]
      """  A LIST-DELIM delimited list of people.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.

Manufacturing suggestions can be filtered by Planner.

Relates to the Person table.  Defaults from the ProdGrup.PersonID.  """  
      self.ProdTeamID:str = obj["ProdTeamID"]
      """  Production Team for the Job.  Associates the JobHead with a ProdTeam.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Production quantity completed.

Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DatePurged:str = obj["DatePurged"]
      """  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  """  
      self.TravelerReadyToPrint:bool = obj["TravelerReadyToPrint"]
      """  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  """  
      self.TravelerLastPrinted:str = obj["TravelerLastPrinted"]
      """  The last date the job traveler was mass printed.  """  
      self.StatusReadyToPrint:bool = obj["StatusReadyToPrint"]
      """  Indicates if the Status can be printed. Print functions are not available if this is = No.  """  
      self.StatusLastPrinted:str = obj["StatusLastPrinted"]
      """  The last date the job status was mass printed.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.JobType:str = obj["JobType"]
      """  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this job.  """  
      self.ProductionYield:bool = obj["ProductionYield"]
      """  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  """  
      self.EquipID:str = obj["EquipID"]
      """   The ID of the Equipment that this "Maintenance Job" is for.

Foreign key component to Equip table.  """  
      self.PlanNum:int = obj["PlanNum"]
      """   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.

Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.

If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  """  
      self.IssueTopicID1:str = obj["IssueTopicID1"]
      """  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PersonIDName:str = obj["PersonIDName"]
      """  PersonIDName  """  
      self.SOExists:bool = obj["SOExists"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      """  Part Description  """  
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      """  Track Dimension  """  
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      """  Track Lots  """  
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      """  Track Serial Num  """  
      self.EquipOEM:str = obj["EquipOEM"]
      self.EquipModel:str = obj["EquipModel"]
      self.EquipTypeID:str = obj["EquipTypeID"]
      self.EquipLocID:str = obj["EquipLocID"]
      self.PMJob:bool = obj["PMJob"]
      """  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  """  
      self.EquipDescription:str = obj["EquipDescription"]
      self.JobTypeName:str = obj["JobTypeName"]
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class  """  
      self.AttrDescription:str = obj["AttrDescription"]
      """  Description of values in set  """  
      self.ShortDescription:str = obj["ShortDescription"]
      """  The Short Description of the Attribute Set which will be visible throughout the system and is to be used in selecting an Attribute Set to go along with the Part  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  Date the Job was closed.  Defaults as the system but can be overridden.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  """  
      self.JobCompletionDate:str = obj["JobCompletionDate"]
      """  The date that production was completed for this Job.  Maintained via Job Completion Processing.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  """  
      self.CheckOff1:bool = obj["CheckOff1"]
      """   Optional Job check off number 1.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff2:bool = obj["CheckOff2"]
      """   Optional Job check off number 2.  The label for this field is found in JCSyst. If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff3:bool = obj["CheckOff3"]
      """   Optional Job check off number 3.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff4:bool = obj["CheckOff4"]
      """  Optional Job check off number 4.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff5:bool = obj["CheckOff5"]
      """  Optional Job check off number 5.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.JobReleased:bool = obj["JobReleased"]
      """  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  """  
      self.JobHeld:bool = obj["JobHeld"]
      """  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  """  
      self.SchedStatus:str = obj["SchedStatus"]
      """  Scheduling Status Control (R-Required, P-Pending, A-Active, C-Complete).  NOT CURRENTLY IMPLEMENTED.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  The description of the part that is to be manufactured.  Use the Part.Description as the default.  """  
      self.ProdQty:int = obj["ProdQty"]
      """  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.

See JobPart table for information on end parts of a job.  """  
      self.IUM:str = obj["IUM"]
      """  The unit of measure for the job.  Defaulted from Part.IUM.  """  
      self.StartDate:str = obj["StartDate"]
      """  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.ReqDueDate:str = obj["ReqDueDate"]
      """  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  """  
      self.JobCode:str = obj["JobCode"]
      """  An optional user defined code.  This will be used for report selections and views of job headers.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Contains the quote line number reference. (see QuoteNum )  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job header comments.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  Scheduled "What If" finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.Candidate:bool = obj["Candidate"]
      """   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.

This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  """  
      self.SchedCode:str = obj["SchedCode"]
      """  Scheduling Code.  SchedCode references a record in the SchedPri table.  """  
      self.SchedLocked:bool = obj["SchedLocked"]
      """  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Associates the JobHead with a project in the Project table.  This can be blank.  """  
      self.WIPCleared:bool = obj["WIPCleared"]
      """  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  """  
      self.JobFirm:bool = obj["JobFirm"]
      """  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  """  
      self.PersonList:str = obj["PersonList"]
      """  A LIST-DELIM delimited list of people.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.

Manufacturing suggestions can be filtered by Planner.

Relates to the Person table.  Defaults from the ProdGrup.PersonID.  """  
      self.ProdTeamID:str = obj["ProdTeamID"]
      """  Production Team for the Job.  Associates the JobHead with a ProdTeam.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Production quantity completed.

Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DatePurged:str = obj["DatePurged"]
      """  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  """  
      self.TravelerReadyToPrint:bool = obj["TravelerReadyToPrint"]
      """  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  """  
      self.TravelerLastPrinted:str = obj["TravelerLastPrinted"]
      """  The last date the job traveler was mass printed.  """  
      self.StatusReadyToPrint:bool = obj["StatusReadyToPrint"]
      """  Indicates if the Status can be printed. Print functions are not available if this is = No.  """  
      self.StatusLastPrinted:str = obj["StatusLastPrinted"]
      """  The last date the job status was mass printed.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.JobType:str = obj["JobType"]
      """  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.LockQty:bool = obj["LockQty"]
      """  Indicates that the quantity on this job is locked  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this job.  """  
      self.ProcessMode:str = obj["ProcessMode"]
      """   Values: S(Sequential) or C(Concurrent).

Defaults as S. Must have Advanced Production License to change. Controls how the operations and material requirements are developed. Concurrent jobs are used where the production time is based on the number of machine operations performed and not on the number of parts created. For example, a stamping operation where each cycle of the machine stamps out x number of parts. A further extension of this is that the operation can yield multiple different parts from each cycle of the machine.  Identification of these parts and there associated PPO (parts per operation) is define in the JobPart table.  """  
      self.PlannedActionDate:str = obj["PlannedActionDate"]
      """  The planned date when the job needs to be actioned by the production department to make sure that the job is ready on the planned completion date.  """  
      self.PlannedKitDate:str = obj["PlannedKitDate"]
      """  The date that the job needs to be ready for the warehouse to kit to make sure that it is ready for the job start date.  """  
      self.MSPTaskID:str = obj["MSPTaskID"]
      """  The task ID that is returned from Microsoft Project.  """  
      self.MSPPredecessor:str = obj["MSPPredecessor"]
      """  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back an alpha numeric string.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.ProductionYield:bool = obj["ProductionYield"]
      """  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  """  
      self.OrigProdQty:int = obj["OrigProdQty"]
      """  This field will be set to the value of the JobHead.ProdQty at the time the JobHead.Engineered flag is set to true.  """  
      self.PreserveOrigQtys:bool = obj["PreserveOrigQtys"]
      """  This field is used to indicate whether the original quantities should be reset in the job header and its assemblies at JobHead update if JobHead.JobEngineered has been changed from false to true. Generally the orig qtys will be reset, unless this flag is set to true because the user was asked if they wanted to reset the orig qtys and they answered yes.  """  
      self.NoAutoCompletion:bool = obj["NoAutoCompletion"]
      """  If set to yes then exclude this job from the Job Auto-Completion process. Not directly maintainable.  """  
      self.NoAutoClosing:bool = obj["NoAutoClosing"]
      """  No Auto Closing. If set to yes then exclude this job from the Job Auto-Closing process.  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  The user that created this Job.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  The date that this Job was created.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of PDM parts.  """  
      self.ExportRequested:str = obj["ExportRequested"]
      """  This field is used to store a code that represents the external system that the Job is being exported to (ex. PDM).  This field is short lived, it is used to instruct the write trigger logic to create IM records for certain types of external systems.  After creating the IM records, the trigger logic should immediately clear the field.  """  
      self.SplitMfgCostElements:bool = obj["SplitMfgCostElements"]
      """  Flag to indicate how to split the manufacturing cost elements when a manufactured material is issued to the job.  If flag is set to true, the cost of the issued material will be split into individual manufacturing cost elements. If set to false, the cost of the issued material is added to the manufacturing material cost element only.  This is defaulted from the JCSyst.SplitMfgCostElements and is not user maintainable.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Cross Reference Part Num. Used for alternate serial mask support.  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """   Cross Reference Part Type. Used for alternate serial mask support.



I=Internal Cross Reference / C = Customer Part  """  
      self.XRefCustNum:int = obj["XRefCustNum"]
      """  Customer Number XRefPartNum is related to if it is a customer part. Used for alternate serial number mask support.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.RoughCutScheduled:bool = obj["RoughCutScheduled"]
      """  Indicates if the job was rough cut scheduled.  """  
      self.EquipID:str = obj["EquipID"]
      """   The ID of the Equipment that this "Maintenance Job" is for.

Foreign key component to Equip table.  """  
      self.PlanNum:int = obj["PlanNum"]
      """   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.

Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.

If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  """  
      self.MaintPriority:str = obj["MaintPriority"]
      """  Maintenance Job Priority. Valid values: H - High, M - Medium, L - Low.  M is default or if created from a Maint Request then MaintReq.Priority is used as default.  """  
      self.SplitJob:bool = obj["SplitJob"]
      """  Internal field indicating this job was created by a job split.  Assigned true when a job has been split due to start minimum lot size quantity processing.  """  
      self.NumberSource:bool = obj["NumberSource"]
      """  Indicates the type of prefix which is used for create jobs in MRP  """  
      self.CloseMeterReading:int = obj["CloseMeterReading"]
      """  The Meter Reading value entered at time of Job Closing.  """  
      self.IssueTopicID1:str = obj["IssueTopicID1"]
      """  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  """  
      self.IssueTopicID2:str = obj["IssueTopicID2"]
      """  Maintenance Issue Topic 2. A sub-topic of IssueTopicID1.  """  
      self.IssueTopicID3:str = obj["IssueTopicID3"]
      """  Maintenance Issue Topic 3. A sub-topic of IssueTopicID2.  """  
      self.IssueTopicID4:str = obj["IssueTopicID4"]
      """  Maintenance Issue Topic 4. A sub-topic of IssueTopicID3.  """  
      self.IssueTopicID5:str = obj["IssueTopicID5"]
      """  Maintenance Issue Topic 5. A sub-topic of IssueTopicID4.  """  
      self.IssueTopicID6:str = obj["IssueTopicID6"]
      """  Maintenance Issue Topic 6. A sub-topic of IssueTopicID5.  """  
      self.IssueTopicID7:str = obj["IssueTopicID7"]
      """  Maintenance Issue Topic 7. A sub-topic of IssueTopicID6.  """  
      self.IssueTopicID8:str = obj["IssueTopicID8"]
      """  Maintenance Issue Topic 8. A sub-topic of IssueTopicID7.  """  
      self.IssueTopicID9:str = obj["IssueTopicID9"]
      """  Maintenance Issue Topic 9. A sub-topic of IssueTopicID8.  """  
      self.IssueTopicID10:str = obj["IssueTopicID10"]
      """  Maintenance Issue Topic 10. A sub-topic of IssueTopicID9.  """  
      self.IssueTopics:str = obj["IssueTopics"]
      """  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  """  
      self.ResTopicID1:str = obj["ResTopicID1"]
      """  Maintenance Resolution Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintRes = Yes  """  
      self.ResTopicID2:str = obj["ResTopicID2"]
      """  Maintenance Resolution Topic 2. A sub-topic of ResTopicID1.  """  
      self.ResTopicID3:str = obj["ResTopicID3"]
      """  Maintenace  Resolution Topic 3. A sub-topic of ResTopicID2.  """  
      self.ResTopicID4:str = obj["ResTopicID4"]
      """  Maintenance Resolution Topic 4. A sub-topic of ResTopicID3.  """  
      self.ResTopicID5:str = obj["ResTopicID5"]
      """  Maintenance Resolution Topic 5. A sub-topic of ResTopicID4.  """  
      self.ResTopicID6:str = obj["ResTopicID6"]
      """  Maintenance Resolution Topic 6. A sub-topic of ResTopicID5.  """  
      self.ResTopicID7:str = obj["ResTopicID7"]
      """  Maintenance Resolution Topic 7. A sub-topic of ResTopicID6.  """  
      self.ResTopicID8:str = obj["ResTopicID8"]
      """  Maintenance Resolution Topic 8. A sub-topic of ResTopicID7.  """  
      self.ResTopicID9:str = obj["ResTopicID9"]
      """  Maintenance Resolution Topic 9. A sub-topic of ResTopicID8.  """  
      self.ResTopicID10:str = obj["ResTopicID10"]
      """  Maintenance Resolution Topic 10. A sub-topic of ResTopicID9.  """  
      self.ResTopics:str = obj["ResTopics"]
      """  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  """  
      self.Forward:bool = obj["Forward"]
      """  It is updated by Calculate Global Scheduling Order process, it indicates if a job has to be scheduled Backwards or Forwards by Global Scheduling Process and it can be modified by Adjust Scheduling Global Order  """  
      self.SchedSeq:int = obj["SchedSeq"]
      """  This is the sequence number used to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  """  
      self.PAAExists:bool = obj["PAAExists"]
      """  Indicates if at least one subassembly contains a part that is plan as assembly.  It does not indicate if the assembly is marked as PAA - only that the part is PAA in the BOM.  Used in MRP when determining if a job can be reused.  """  
      self.DtlsWithinLeadTime:bool = obj["DtlsWithinLeadTime"]
      """  Indicates if the job structure (BOM) was created inside or outside of the mfg lead time for the job part.  Used in MRP when determining if a job can be reused.  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.RoughCut:bool = obj["RoughCut"]
      """  It indicates that the shop load for that job was not generated (shopload table). The load in shopload can be recreated by Save Resource Load process  """  
      self.PlanGUID:str = obj["PlanGUID"]
      """  PlanGUID  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.LastChangedBy:str = obj["LastChangedBy"]
      """  LastChangedBy  """  
      self.LastChangedOn:str = obj["LastChangedOn"]
      """  LastChangedOn  """  
      self.EPMExportLevel:int = obj["EPMExportLevel"]
      """  EPMExportLevel  """  
      self.JobWorkflowState:str = obj["JobWorkflowState"]
      """  JobWorkflowState  """  
      self.JobCSR:str = obj["JobCSR"]
      """  JobCSR  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.LastExternalMESDate:str = obj["LastExternalMESDate"]
      """  LastExternalMESDate  """  
      self.LastScheduleDate:str = obj["LastScheduleDate"]
      """  LastScheduleDate  """  
      self.LastScheduleProc:str = obj["LastScheduleProc"]
      """  LastScheduleProc  """  
      self.SchedPriority:int = obj["SchedPriority"]
      """  Sequence priority used internally by Calculate Global Scheduling Order process to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  """  
      self.DaysLate:int = obj["DaysLate"]
      """  It indicates the days a job is going to be late in relation to its required due date  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.ProjProcessed:bool = obj["ProjProcessed"]
      """  Logical field to indicate if this record has been read by project analysis process  """  
      self.SyncReqBy:bool = obj["SyncReqBy"]
      """  SyncReqBy  """  
      self.CustName:str = obj["CustName"]
      """  CustName  """  
      self.CustID:str = obj["CustID"]
      """  CustID  """  
      self.IsCSRSet:bool = obj["IsCSRSet"]
      """  IsCSRSet  """  
      self.UnReadyCostProcess:bool = obj["UnReadyCostProcess"]
      """  UnReadyCostProcess  """  
      self.ProcSuspendedUpdates:str = obj["ProcSuspendedUpdates"]
      """  ProcSuspendedUpdates  """  
      self.ProjProcessedDate:str = obj["ProjProcessedDate"]
      """  DateTime field to indicate when this record has been read by project analysis process  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  Related to Epicor FSA  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.UseAdvancedStaging:bool = obj["UseAdvancedStaging"]
      """  Indicates if this revision is to use Advanced Staging.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PersonIDName:str = obj["PersonIDName"]
      """  PersonIDName  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the job is ready to be fulfilled.  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMServiceReportID:str = obj["FSMServiceReportID"]
      """  FSMServiceReportID  """  
      self.AdvanceLaborRate:bool = obj["AdvanceLaborRate"]
      self.dspReadyCostProcess:bool = obj["dspReadyCostProcess"]
      """  Calculated field is set Not UnReadyCostProcess  """  
      self.EnableJobEngineered:bool = obj["EnableJobEngineered"]
      """  Determine if jobengineered is enabled or disabled.  """  
      self.EnableJobFirm:bool = obj["EnableJobFirm"]
      """  Should JobFirm be enabled or disabled?  """  
      self.EnableJobReleased:bool = obj["EnableJobReleased"]
      """  Determine if jobreleased is enabled or disabled.  """  
      self.EnableMaterialStatus:bool = obj["EnableMaterialStatus"]
      self.EnableProject:bool = obj["EnableProject"]
      self.EngineerAllowed:bool = obj["EngineerAllowed"]
      """  Is the job allowed to be engineered?  """  
      self.EquipLocDesc:str = obj["EquipLocDesc"]
      self.ExtUpdated:bool = obj["ExtUpdated"]
      """  If some fields except ToFirm have been updated  """  
      self.FinalOpDueDate:str = obj["FinalOpDueDate"]
      """   Final Operation – This is scheduled Due Date for either:

1.	Operation on ASM that has Final Operation checkbox selected

2.	If no Operation on ASM has Final Operation selected than use Last Operation on ASM  """  
      self.FirmProcEnable:bool = obj["FirmProcEnable"]
      """  If it's Stocked assembly and PlanAsAsm is true.  """  
      self.FirmProcess:bool = obj["FirmProcess"]
      """  is used to select stocked Job which will be processed by Firming Process instead of Firm check-box. Is available only for .FirmProcEnable = true (in Job Status Maintenance).  """  
      self.HasPlanAsAsm:bool = obj["HasPlanAsAsm"]
      """  Job has at least one assembly with flag Plan as Assembly.  """  
      self.HeaderSensitive:bool = obj["HeaderSensitive"]
      """  Depending on the engineered job flag, is the header information enabled?  """  
      self.IgnoreMtlConstraints:bool = obj["IgnoreMtlConstraints"]
      """  It will allow displaying default of this value from Plant.IgnoreMtlConstraints  """  
      self.JobTypeName:str = obj["JobTypeName"]
      self.KitTime:int = obj["KitTime"]
      """  If part is backflush the kit time is ignored.  """  
      self.LockedQty:bool = obj["LockedQty"]
      """  Locked Qty Flag  """  
      self.NewMeter:int = obj["NewMeter"]
      self.OldJobNum:str = obj["OldJobNum"]
      """  The old Job Number when JobFirm is changed from no to yes.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  The order qty  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      """  Logical field signifying whether JobHead.PartNum is a valid part master part.  """  
      self.PhaseDescription:str = obj["PhaseDescription"]
      self.PMJob:bool = obj["PMJob"]
      """  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  """  
      self.ProcessModeDescription:str = obj["ProcessModeDescription"]
      """  Process Mode Description  """  
      self.ReceiveTime:int = obj["ReceiveTime"]
      """  Receive Time field for Job Part entered on Job  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SOExists:bool = obj["SOExists"]
      self.StockQty:int = obj["StockQty"]
      self.ToFirm:bool = obj["ToFirm"]
      """  To be Firmed  """  
      self.XRefPartTypeDesc:str = obj["XRefPartTypeDesc"]
      """  Description for XRefPartType  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  The audit change description for the jobaudit record.  """  
      self.ClearDataset:bool = obj["ClearDataset"]
      self.IsCoPart:bool = obj["IsCoPart"]
      """  True if more than one co-part exists  """  
      self.PartRevProcessMfgID:str = obj["PartRevProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.PartRevProcessMfgType:str = obj["PartRevProcessMfgType"]
      """  Type of Process Manufacturing.  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the Service Job has to be synchronized with Epicor FSI application.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.EquipMeterUOM:str = obj["EquipMeterUOM"]
      self.EquipSerialNum:str = obj["EquipSerialNum"]
      self.EquipLocID:str = obj["EquipLocID"]
      self.EquipPlant:str = obj["EquipPlant"]
      self.EquipDescription:str = obj["EquipDescription"]
      self.EquipBrand:str = obj["EquipBrand"]
      self.EquipModel:str = obj["EquipModel"]
      self.EquipCurrentMeter:int = obj["EquipCurrentMeter"]
      self.EquipTypeID:str = obj["EquipTypeID"]
      self.EquipOEM:str = obj["EquipOEM"]
      self.ExpenseCodeDescription:str = obj["ExpenseCodeDescription"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IssueTopicID1Description:str = obj["IssueTopicID1Description"]
      self.IssueTopicID10Description:str = obj["IssueTopicID10Description"]
      self.IssueTopicID2Description:str = obj["IssueTopicID2Description"]
      self.IssueTopicID3Description:str = obj["IssueTopicID3Description"]
      self.IssueTopicID4Description:str = obj["IssueTopicID4Description"]
      self.IssueTopicID5Description:str = obj["IssueTopicID5Description"]
      self.IssueTopicID6Description:str = obj["IssueTopicID6Description"]
      self.IssueTopicID7Description:str = obj["IssueTopicID7Description"]
      self.IssueTopicID8Description:str = obj["IssueTopicID8Description"]
      self.IssueTopicID9Description:str = obj["IssueTopicID9Description"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumLocationIDNumReq:bool = obj["PartNumLocationIDNumReq"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PlantName:str = obj["PlantName"]
      self.PlantMaintPlant:str = obj["PlantMaintPlant"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProdTeamIDDescription:str = obj["ProdTeamIDDescription"]
      self.ProdTeamIDName:str = obj["ProdTeamIDName"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.QuoteLineLineDesc:str = obj["QuoteLineLineDesc"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.ResTopicID1Description:str = obj["ResTopicID1Description"]
      self.ResTopicID10Description:str = obj["ResTopicID10Description"]
      self.ResTopicID2Description:str = obj["ResTopicID2Description"]
      self.ResTopicID3Description:str = obj["ResTopicID3Description"]
      self.ResTopicID4Description:str = obj["ResTopicID4Description"]
      self.ResTopicID5Description:str = obj["ResTopicID5Description"]
      self.ResTopicID6Description:str = obj["ResTopicID6Description"]
      self.ResTopicID7Description:str = obj["ResTopicID7Description"]
      self.ResTopicID8Description:str = obj["ResTopicID8Description"]
      self.ResTopicID9Description:str = obj["ResTopicID9Description"]
      self.SchedCodeDescription:str = obj["SchedCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.MtlSeq:int = obj["MtlSeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobMtlInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRefDesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RefDes:str = obj["RefDes"]
      """  Identifier of Reference Designator  """  
      self.RefDesSeq:int = obj["RefDesSeq"]
      """  Unique identifies the reference designator with the material sequence.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Side:str = obj["Side"]
      """  Free form side location. (Top, Bottom, Both, Level, etc)  """  
      self.XLocation:int = obj["XLocation"]
      """  X Coordinate of the reference designator  """  
      self.YLocation:int = obj["YLocation"]
      """  Y Coordinate of the reference designator  """  
      self.ZLocation:int = obj["ZLocation"]
      """  Z Coordinate of the reference designator  """  
      self.Rotation:int = obj["Rotation"]
      """  Rotation of the reference designator. Max value = 360.000  """  
      self.Description:str = obj["Description"]
      """  Designator Description  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Material Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Material Weight UOM defaulted from Part Master.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      """  Read-only. True when exempt date >= today.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  """  
      self.Description:str = obj["Description"]
      """  A description of the material.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Quantity per parent.  Field Service was EstQty in FSCallMt.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  """  
      self.IUM:str = obj["IUM"]
      """  Internal unit of measure.  The unit used to measure the material.  """  
      self.LeadTime:int = obj["LeadTime"]
      """   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.

When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.

It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Material.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  The warehouse that the material is allocated against.  """  
      self.SalvagePartNum:str = obj["SalvagePartNum"]
      """  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  """  
      self.SalvageDescription:str = obj["SalvageDescription"]
      """  Description of Salvageable material.  Use Part.Description for a default.  """  
      self.SalvageQtyPer:int = obj["SalvageQtyPer"]
      """  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  """  
      self.SalvageUM:str = obj["SalvageUM"]
      """  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  """  
      self.SalvageMtlBurRate:int = obj["SalvageMtlBurRate"]
      """  The salvage material burden rate for this Job Material.  """  
      self.SalvageUnitCredit:int = obj["SalvageUnitCredit"]
      """  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageEstMtlBurUnitCredit:int = obj["SalvageEstMtlBurUnitCredit"]
      """  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageQtyToDate:int = obj["SalvageQtyToDate"]
      """  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  """  
      self.SalvageCredit:int = obj["SalvageCredit"]
      """  Total salvage credit to date.  A summary of salvage receipt transactions.  """  
      self.SalvageMtlBurCredit:int = obj["SalvageMtlBurCredit"]
      """  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  """  
      self.MfgComment:str = obj["MfgComment"]
      """   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.

View as editor widget.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  """  
      self.BuyIt:bool = obj["BuyIt"]
      """  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  """  
      self.Ordered:bool = obj["Ordered"]
      """  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  """  
      self.PurComment:str = obj["PurComment"]
      """   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.

View as editor widget.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """   Indicates if this material will be backflushed.

Note: this field is defaulted from Part.BackFlush

Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  """  
      self.EstScrap:int = obj["EstScrap"]
      """  Estimated Scrap.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  """  
      self.FixedQty:bool = obj["FixedQty"]
      """  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  """  
      self.FindNum:str = obj["FindNum"]
      """  Characters used on the drawing to show where material is used.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobMtl is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  """  
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      """  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.SalvageMtlCredit:int = obj["SalvageMtlCredit"]
      """  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageLbrCredit:int = obj["SalvageLbrCredit"]
      """  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageBurCredit:int = obj["SalvageBurCredit"]
      """  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageSubCredit:int = obj["SalvageSubCredit"]
      """  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.APSAddResType:str = obj["APSAddResType"]
      """   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.

'I' to ignore in eScheduler

'M' to treat at Material in eScheduler

'A' to treat as AddResType in eScheduler  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this Material belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this material relates to.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the Material in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the Material in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the material in customers currency.  """  
      self.ResReasonCode:str = obj["ResReasonCode"]
      """  Problem reason code from the reason master table. type Service call.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.Billable:bool = obj["Billable"]
      """  Is this a billable material item.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """  Holds the quantity of the item that has been shipped through misc.  shipments  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the Material in Customer currency.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  """  
      self.AddedMtl:bool = obj["AddedMtl"]
      """  This material was added after initial setup of the job  """  
      self.MiscCharge:bool = obj["MiscCharge"]
      """  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  """  
      self.SCMiscCode:str = obj["SCMiscCode"]
      """  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.GlbRFQ:bool = obj["GlbRFQ"]
      """  Global RFQ flag.  Used in Consolidated Purchasing.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.WIReqDate:str = obj["WIReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.Rpt1BillableUnitPrice:int = obj["Rpt1BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableUnitPrice:int = obj["Rpt2BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableUnitPrice:int = obj["Rpt3BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.BaseRequiredQty:int = obj["BaseRequiredQty"]
      """   Required Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the JobMtl.RequiredQty which is in the UOM of the requirement to the JobMtl.BaseUOM which is the UOM of the Part and it's unit costs.

This quantity multiplied by the JobMtl.EstMtlUnitCost is used to update the total estimated costs found in JobAsmbl.TLEMaterialCost  """  
      self.BaseUOM:str = obj["BaseUOM"]
      """   Unit of Measure of the JobMtl.BaseRequiredQty.

If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as JobMtl.IUM  """  
      self.Weight:int = obj["Weight"]
      """  Material Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Material Weight UOM defaulted from Part Master.  """  
      self.ReqRefDes:int = obj["ReqRefDes"]
      """  Required number of designators  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.SelectForPicking:bool = obj["SelectForPicking"]
      """  Indicates if the job material is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  """  
      self.StagingWarehouseCode:str = obj["StagingWarehouseCode"]
      """  The job pick "Staging" warehouse for the job material.  Defaults from the system default warehouse (PlantConfCtrl.DefJobPickWhse).  """  
      self.StagingBinNum:str = obj["StagingBinNum"]
      """  The job pick "Staging" bin for the job material.  Defaults from the system default bin (PlantConfCtrl.DefJobPickBin).  """  
      self.PickError:str = obj["PickError"]
      """   A non blank character indicates that the release could not be picked by the Auto Pick process.

The possible values are;

"L" - Order Line can't be shipped complete.

"O" - Order can't be shipped complete.

"I" - Insufficient quantity reserved

"Z" - Zero quantity reserved.  """  
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      """   Estimated Material Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      """   Estimated Labor Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      """   Estimated Burden Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      """   Estimated Subcontract Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.SalvageEstMtlUnitCredit:int = obj["SalvageEstMtlUnitCredit"]
      """   Estimated Salvage Material Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstLbrUnitCredit:int = obj["SalvageEstLbrUnitCredit"]
      """   Estimated Salvage Labor Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstBurUnitCredit:int = obj["SalvageEstBurUnitCredit"]
      """   Estimated Salvage Burden Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstSubUnitCredit:int = obj["SalvageEstSubUnitCredit"]
      """   Estimated Salvage Subcontract Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.LoanedQty:int = obj["LoanedQty"]
      """  The material quantity that has been loaned out to another job.  """  
      self.BorrowedQty:int = obj["BorrowedQty"]
      """  The material quantity that has been borrowed from another job.  """  
      self.ReassignSNAsm:bool = obj["ReassignSNAsm"]
      """  flag used to designate if the serial numbers from the job material/subassembly can be reassigned as the serial number of the parent assembly (top assembly or n deep subassembly) being reworked using a job.  """  
      self.GeneralPlanInfo:str = obj["GeneralPlanInfo"]
      """  GeneralPlanInfo  """  
      self.EstStdDescription:str = obj["EstStdDescription"]
      """  EstStdDescription  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.IsPOCostingMaintained:bool = obj["IsPOCostingMaintained"]
      """  IsPOCostingMaintained  """  
      self.EstStdType:int = obj["EstStdType"]
      """  EstStdType  """  
      self.POCostingFactor:int = obj["POCostingFactor"]
      """  POCostingFactor  """  
      self.PlannedQtyPerUnit:int = obj["PlannedQtyPerUnit"]
      """  PlannedQtyPerUnit  """  
      self.POCostingDirection:int = obj["POCostingDirection"]
      """  POCostingDirection  """  
      self.POCostingUnitVal:int = obj["POCostingUnitVal"]
      """  POCostingUnitVal  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrigStructTag:str = obj["OrigStructTag"]
      """  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.OrigGroupSeq:int = obj["OrigGroupSeq"]
      """  By storing the original Group Sequence of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.ShowStatusIcon:str = obj["ShowStatusIcon"]
      """  ShowStatusIcon  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  """  
      self.StagingLotNum:str = obj["StagingLotNum"]
      """  Stores the lot number of the material in the Staging Warehouse/Bin.  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.LocationView:bool = obj["LocationView"]
      """  Controls if this material record is viewable in Location Management or the web.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.SalvageAttributeSetID:int = obj["SalvageAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.SalvagePlanningNumberOfPieces:int = obj["SalvagePlanningNumberOfPieces"]
      """  Salvage planning number of pieces for this attribute set.  """  
      self.SalvagePlanningAttributeSetID:int = obj["SalvagePlanningAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.RelatedStage:str = obj["RelatedStage"]
      """  The identification of related StageNo.  """  
      self.SalvageRevisionNum:str = obj["SalvageRevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.PartAllocQueueAction:str = obj["PartAllocQueueAction"]
      """  Indicates if the job material should be added or removed from the fulfillment queue.  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the job material is ready to be fulfilled.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  The currency switch flag  """  
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.DisplayExtPrice:int = obj["DisplayExtPrice"]
      """  The display of extended price.  """  
      self.DisplayUnitPrice:int = obj["DisplayUnitPrice"]
      """  The display unit price.  """  
      self.DocDisplayExtPrice:int = obj["DocDisplayExtPrice"]
      """  The document display extended price  """  
      self.DocDisplayUnitPrice:int = obj["DocDisplayUnitPrice"]
      """  The document display extended price  """  
      self.dspBuyIt:bool = obj["dspBuyIt"]
      """  BuyIt field for display in the UI.  """  
      self.DspIUM:str = obj["DspIUM"]
      """  Display IUM (readonly)  """  
      self.EnableBackflush:bool = obj["EnableBackflush"]
      """  Should the backflush field be enabled?  """  
      self.EnableBuyIt:bool = obj["EnableBuyIt"]
      """  Field used to determine if there is security on JobMtl.BuyIt. If there is a row rule will disable the dspBuyIt.  """  
      self.EnableConfigure:bool = obj["EnableConfigure"]
      """  flag to determine whether the Configure Option should be enabled.  """  
      self.EnableDirect:bool = obj["EnableDirect"]
      """  flag to determine whether the Make Direct field should be enabled.  """  
      self.EnableFixedQty:bool = obj["EnableFixedQty"]
      """  This external field is used as a flag to determine when to enable/disable the FixedQty field according to the rules of Serial numbers design.  """  
      self.EnableMtlSalvage:bool = obj["EnableMtlSalvage"]
      self.EnablePurDir:bool = obj["EnablePurDir"]
      self.EnableRcvInspReq:bool = obj["EnableRcvInspReq"]
      """  Field to determine if the the RcvInspectionReq field should be enabled or disabled.  """  
      self.EnableSndAlrtCmpl:bool = obj["EnableSndAlrtCmpl"]
      """  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  """  
      self.EnableSplitCosts:bool = obj["EnableSplitCosts"]
      """  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  """  
      self.EstCost:int = obj["EstCost"]
      """  RequiredQty * EstUnitCost - RequiredQty * SalvageQtyPer * SalvageUnitCredit  """  
      self.IPCaller:str = obj["IPCaller"]
      """  The name of the calling program  """  
      self.IsBaseCurrency:bool = obj["IsBaseCurrency"]
      """  IsBaseCurrency  """  
      self.IsMtlConfigurationOn:bool = obj["IsMtlConfigurationOn"]
      self.IsMtlConfigureOn:bool = obj["IsMtlConfigureOn"]
      self.IsMtlExtConfig:bool = obj["IsMtlExtConfig"]
      self.IsMtlRevisionApproved:bool = obj["IsMtlRevisionApproved"]
      """  IsMtlRevisionApproved  """  
      self.PartExists:bool = obj["PartExists"]
      """  Internal flag to identify if current Part is an Inventory Part.  """  
      self.PlantList:str = obj["PlantList"]
      """  Calculated field gets list of available Sites  """  
      self.PricePerCodeDescription:str = obj["PricePerCodeDescription"]
      """  Price Per Code Description  """  
      self.RDEndNum:int = obj["RDEndNum"]
      """  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  """  
      self.RDPrefix:str = obj["RDPrefix"]
      """  The prefix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  """  
      self.RDStartNum:int = obj["RDStartNum"]
      """  This number will be used to create reference designators. This field will be defaulted to ?1?  """  
      self.RDSuffix:str = obj["RDSuffix"]
      """  The suffix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  """  
      self.RelatedOperationDesc:str = obj["RelatedOperationDesc"]
      """  The description of the related operation  """  
      self.RetainValues:bool = obj["RetainValues"]
      """  Logical used to determine if record is created from PO Entry.  """  
      self.Rpt1DisplayExtPrice:int = obj["Rpt1DisplayExtPrice"]
      self.Rpt1DisplayUnitPrice:int = obj["Rpt1DisplayUnitPrice"]
      self.Rpt2DisplayExtPrice:int = obj["Rpt2DisplayExtPrice"]
      self.Rpt2DisplayUnitPrice:int = obj["Rpt2DisplayUnitPrice"]
      self.Rpt3DisplayExtPrice:int = obj["Rpt3DisplayExtPrice"]
      self.Rpt3DisplayUnitPrice:int = obj["Rpt3DisplayUnitPrice"]
      self.SalvageBaseUOM:str = obj["SalvageBaseUOM"]
      """  BaseUOM for SalvagePartNum  """  
      self.ShowInspRqdImg:bool = obj["ShowInspRqdImg"]
      """  Satatus of InspectionRequired image on JobMaterial form.  """  
      self.SubContract:bool = obj["SubContract"]
      """  Added for UI Framework?  This flags the material as being a "SubContract" or an "Internal" material.  """  
      self.AllowBackflushUncheck:bool = obj["AllowBackflushUncheck"]
      """  Can the backflush be unchecked?  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.EnableSalvageAttributeSetSearch:bool = obj["EnableSalvageAttributeSetSearch"]
      self.PlanningNumberOfPiecesDisp:int = obj["PlanningNumberOfPiecesDisp"]
      """  Number of pieces for inventory attribute tracked parts  """  
      self.SalvagePlanningNumberOfPiecesDisp:int = obj["SalvagePlanningNumberOfPiecesDisp"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.SkipUnitPriceCalc:bool = obj["SkipUnitPriceCalc"]
      """  Indicates if unit price calculation should occur.  When false the unit price will be calculated.  When false the unit price will remain its current value.  """  
      self.ErrorStatusDisplay:str = obj["ErrorStatusDisplay"]
      """  Error Status Display  """  
      self.InPartAllocQueue:bool = obj["InPartAllocQueue"]
      """  True if this job material is in the fulfillment queue.  """  
      self.ShowFulfillmentQueueActions:bool = obj["ShowFulfillmentQueueActions"]
      """  Show Fulfillment Queue Actions  """  
      self.SelectedForAction:bool = obj["SelectedForAction"]
      """  Indicates this row is selected for action.  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  The allocated quantity for this job material.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  The reserved quantity for this job material.  """  
      self.AvailableQty:int = obj["AvailableQty"]
      """  The available quantity for this job material.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.AssemblySeqPartNum:str = obj["AssemblySeqPartNum"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.JobNumPartNum:str = obj["JobNumPartNum"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PlantName:str = obj["PlantName"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.PurMiscCodeDescription:str = obj["PurMiscCodeDescription"]
      self.PurMiscCodeLCAmount:int = obj["PurMiscCodeLCAmount"]
      self.PurMiscCodeLCDisburseMethod:str = obj["PurMiscCodeLCDisburseMethod"]
      self.PurMiscCodeLCCurrencyCode:str = obj["PurMiscCodeLCCurrencyCode"]
      self.ReasonDescription:str = obj["ReasonDescription"]
      self.RFQLineLineDesc:str = obj["RFQLineLineDesc"]
      self.SalvageAttributeSetIDDescription:str = obj["SalvageAttributeSetIDDescription"]
      self.SalvageAttributeSetIDShortDescription:str = obj["SalvageAttributeSetIDShortDescription"]
      self.SalvagePartNumPartDescription:str = obj["SalvagePartNumPartDescription"]
      self.SalvagePartNumPricePerCode:str = obj["SalvagePartNumPricePerCode"]
      self.SalvagePartNumTrackInventoryByRevision:bool = obj["SalvagePartNumTrackInventoryByRevision"]
      self.SalvagePartNumTrackSerialNum:bool = obj["SalvagePartNumTrackSerialNum"]
      self.SalvagePartNumTrackDimension:bool = obj["SalvagePartNumTrackDimension"]
      self.SalvagePartNumTrackInventoryAttributes:bool = obj["SalvagePartNumTrackInventoryAttributes"]
      self.SalvagePartNumAttrClassID:str = obj["SalvagePartNumAttrClassID"]
      self.SalvagePartNumSellingFactor:int = obj["SalvagePartNumSellingFactor"]
      self.SalvagePartNumTrackLots:bool = obj["SalvagePartNumTrackLots"]
      self.SalvagePartNumSalesUM:str = obj["SalvagePartNumSalesUM"]
      self.SalvagePartNumIUM:str = obj["SalvagePartNumIUM"]
      self.SCMiscCodeDescription:str = obj["SCMiscCodeDescription"]
      self.StageNoDescription:str = obj["StageNoDescription"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorPPState:str = obj["VendorPPState"]
      self.VendorPPAddress2:str = obj["VendorPPAddress2"]
      self.VendorPPCountry:str = obj["VendorPPCountry"]
      self.VendorPPPrimPCon:int = obj["VendorPPPrimPCon"]
      self.VendorPPZip:str = obj["VendorPPZip"]
      self.VendorPPCity:str = obj["VendorPPCity"]
      self.VendorPPAddress1:str = obj["VendorPPAddress1"]
      self.VendorPPAddress3:str = obj["VendorPPAddress3"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOpDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the record back to the JobHead.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  Assigned by the system.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the JobOper record within the JobAsmbl.   System assigned.  """  
      self.OpDtlSeq:int = obj["OpDtlSeq"]
      """  Uniquely identifies an OpDtl.  System assigned.  """  
      self.SetupOrProd:str = obj["SetupOrProd"]
      """  Identifies which part of the production, setup or production, the resource is required for.   Valid values are "S", indicating the resource is RequiredFor the Setup phase of this operation, "P" for Production phase, or "B" meaning Both setup and production phase.  """  
      self.CapabilityID:str = obj["CapabilityID"]
      """  The user can select the capability the operation is to perform.  The system will select the resource.  """  
      self.ResourceGrpID:str = obj["ResourceGrpID"]
      """  The user can select a Resource Group for the operation to be performed on.  The system will select the actual resource.  """  
      self.ResourceID:str = obj["ResourceID"]
      """  Descriptive code assigned by the user to uniquely identify the Resource for this operation to be performed on.  If a resource was not explicitly assigned this field is blank.  """  
      self.ConcurrentCapacity:int = obj["ConcurrentCapacity"]
      """  Concurrent Capacity is a constraint that prevents a Resource from being overloaded because it has, at a given time, this much capacity.  For example, a Resource has 4 racks, and they can be reused, but once they've been selected for an operation, they're tied up until the operation is complete.  """  
      self.DailyProdRate:int = obj["DailyProdRate"]
      """  The Daily Prod rate contains the rate required to make 1. This is multiplied with the mfg qty of the job to get the total production qty. This total is then compared to the resource's daily production quantity  and with any usage stored in the Shopload record.   Once the production limit for a resource has been reached, the Resource has been consumed for that day.  """  
      self.NumResources:int = obj["NumResources"]
      """  This is the number of resources the operation can run on.  If multiple resources can perform the required Capability, then up to this many will be employed.  This determines the number of setups the system will allow for the operation.  However, the number of setups cannot exceed the number of operations.  The idea being that once a part is on a machine you will complete the operation on that resource.  """  
      self.EstSetHours:int = obj["EstSetHours"]
      """  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  """  
      self.EstProdHours:int = obj["EstProdHours"]
      """   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.

FORMULAS:

If StdFormat = "HR" then EstProdHours = ProdStandard. 

If StdFormat = "PH" then (JobOper.RunQty / Std).

If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.

If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.

If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.

If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.

If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  """  
      self.ProdStandard:int = obj["ProdStandard"]
      """   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.

NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  """  
      self.StdFormat:str = obj["StdFormat"]
      """   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;

"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,

"PM" - Pieces/Minute, "OH" - Operations/Hour,

"OM"  - Operations/minute, HR - Fixed Hours.  """  
      self.StdBasis:str = obj["StdBasis"]
      """   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.

This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  """  
      self.OpsPerPart:int = obj["OpsPerPart"]
      """  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  """  
      self.ProdLabRate:int = obj["ProdLabRate"]
      """  Labor rate used for estimated production labor costs. Default from the OpMasDtl.ProdLabRate.  """  
      self.SetupLabRate:int = obj["SetupLabRate"]
      """  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  """  
      self.ProdBurRate:int = obj["ProdBurRate"]
      """  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  """  
      self.SetupBurRate:int = obj["SetupBurRate"]
      """  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  """  
      self.ProdComplete:bool = obj["ProdComplete"]
      """  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  """  
      self.SetupComplete:bool = obj["SetupComplete"]
      """  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  """  
      self.ActProdHours:int = obj["ActProdHours"]
      """  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  """  
      self.ActProdRwkHours:int = obj["ActProdRwkHours"]
      """  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.ActSetupHours:int = obj["ActSetupHours"]
      """  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  """  
      self.ActSetupRwkHours:int = obj["ActSetupRwkHours"]
      """  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.SetupPctComplete:int = obj["SetupPctComplete"]
      """  Setup function percent complete.  Maintained via labor entry.  """  
      self.ActBurCost:int = obj["ActBurCost"]
      """  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  """  
      self.ActLabCost:int = obj["ActLabCost"]
      """   Total of ALL labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.

The Total Cost, updated via the receipt process.  """  
      self.ReworkBurCost:int = obj["ReworkBurCost"]
      """  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  """  
      self.ReworkLabCost:int = obj["ReworkLabCost"]
      """  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup and Production. Updated via the LaborDtl\Write.p trigger.  """  
      self.ResourceLock:bool = obj["ResourceLock"]
      """  Resource Lock.  If the user explicitly selected a Resource for the JobOpDtl, when they accept the scheduling changes, the WISchedResource will be stored as the explicit Resource.  Else the WISchedResource will become the SchedResource and the WISchedResourceGrp will become the ResourceGroup.  """  
      self.SysCreateDate:str = obj["SysCreateDate"]
      """  System maintained.  Date the JobOpDtl record was added to the database.  """  
      self.SysCreateTime:int = obj["SysCreateTime"]
      """  Time in seconds since midnight that the system created the record.  """  
      self.OpDtlDesc:str = obj["OpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.EstSetHoursPerMch:int = obj["EstSetHoursPerMch"]
      """   The estimated set up hours per machine.

Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  """  
      self.OverrideRates:bool = obj["OverrideRates"]
      """  If yes then the user has overridden the rates that were on the  record when it was inititally created.  The initial rates came from the master files.  """  
      self.ProdCrewSize:int = obj["ProdCrewSize"]
      """  Duplicated from JobOper.SetupCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  """  
      self.SetUpCrewSize:int = obj["SetUpCrewSize"]
      """  Duplicated from JobOper.SetupCrewSize. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.IsPrimaryProd:bool = obj["IsPrimaryProd"]
      """  IsPrimaryProd  """  
      self.IsPrimarySetup:bool = obj["IsPrimarySetup"]
      """  IsPrimarySetup  """  
      self.AutoSystemAdded:bool = obj["AutoSystemAdded"]
      """  AutoSystemAdded  """  
      self.MobileAllocatedResource:bool = obj["MobileAllocatedResource"]
      """  MobileAllocatedResource  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.QtyPerCycle:int = obj["QtyPerCycle"]
      """  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  """  
      self.CapabilityDesc:str = obj["CapabilityDesc"]
      """  Capability Description  """  
      self.OperOpStdID:str = obj["OperOpStdID"]
      """  The Operation Standard ID stored in JobOper.  """  
      self.PrimaryProd:bool = obj["PrimaryProd"]
      """  Indicates if primary production operation.  """  
      self.PrimarySetup:bool = obj["PrimarySetup"]
      """  Indicates if primary setup operation.  """  
      self.ResourceGrpDesc:str = obj["ResourceGrpDesc"]
      """  Resource Group Description  """  
      self.SchedResourceDesc:str = obj["SchedResourceDesc"]
      """  Scheduled Resource Description  """  
      self.SchedResourceGrpDesc:str = obj["SchedResourceGrpDesc"]
      """  Scheduled Resource Group Description  """  
      self.SubContract:bool = obj["SubContract"]
      """  flag for subcontract  """  
      self.WISchedResourceDesc:str = obj["WISchedResourceDesc"]
      """  What-if Scheduled Resource Description  """  
      self.WISchedResourceGrpDesc:str = obj["WISchedResourceGrpDesc"]
      """  What-if Scheduled Resource Group Description  """  
      self.ResourceDesc:str = obj["ResourceDesc"]
      """  Resource Description  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CapabilityIDDescription:str = obj["CapabilityIDDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.ResourceGrpIDDescription:str = obj["ResourceGrpIDDescription"]
      self.ResourceIDDescription:str = obj["ResourceIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperActionParamRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number which uniquely identifies the assembly record within the method.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the method.  """  
      self.ActionSeq:int = obj["ActionSeq"]
      """  A sequence number which uniquely identifies action record within the operation set.  """  
      self.ActionParamSeq:int = obj["ActionParamSeq"]
      """  A sequence number which uniquely identifies parameter within the Operation/Action set.  """  
      self.ActionParamFieldDataType:str = obj["ActionParamFieldDataType"]
      """  Data type of Action Parameter.  """  
      self.ActionParamValueCharacter:str = obj["ActionParamValueCharacter"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueDate:str = obj["ActionParamValueDate"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueDecimal:int = obj["ActionParamValueDecimal"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueInteger:int = obj["ActionParamValueInteger"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueLogical:bool = obj["ActionParamValueLogical"]
      """  Value of Action Parameter.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperActionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number which uniquely identifies the assembly record within the method.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the method.  """  
      self.ActionSeq:int = obj["ActionSeq"]
      """  A sequence number which uniquely identifies action record within the operation set.  """  
      self.ActionDesc:str = obj["ActionDesc"]
      """  Description of Action.  """  
      self.Required:bool = obj["Required"]
      """  Indicated if this action must be completed before Operation can be completed.  """  
      self.Completed:bool = obj["Completed"]
      """  Indicates if this Action was completed.  """  
      self.CompletedBy:str = obj["CompletedBy"]
      """  The number of the employee that performed the work.  """  
      self.CompletedOn:str = obj["CompletedOn"]
      """  Date the Action was completed.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.EmpBasicName:str = obj["EmpBasicName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.OprSeq:int = obj["OprSeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobOperInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperMachParamRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.JobNum:str = obj["JobNum"]
      """  JobNum  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  AssemblySeq  """  
      self.OprSeq:int = obj["OprSeq"]
      """  OprSeq  """  
      self.MachParamSeq:int = obj["MachParamSeq"]
      """  MachParamSeq  """  
      self.RequestCode:str = obj["RequestCode"]
      """  RequestCode  """  
      self.MachineNum:str = obj["MachineNum"]
      """  MachineNum  """  
      self.ToolNum:str = obj["ToolNum"]
      """  ToolNum  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.ParamNum:int = obj["ParamNum"]
      """  ParamNum  """  
      self.ParamUpperLimit:int = obj["ParamUpperLimit"]
      """  ParamUpperLimit  """  
      self.ParamNominalValue:int = obj["ParamNominalValue"]
      """  ParamNominalValue  """  
      self.ParamLowerLimit:int = obj["ParamLowerLimit"]
      """  ParamLowerLimit  """  
      self.ParamDelayValue:int = obj["ParamDelayValue"]
      """  ParamDelayValue  """  
      self.SpecEnable:bool = obj["SpecEnable"]
      """  SpecEnable  """  
      self.SpecControlAlarm:bool = obj["SpecControlAlarm"]
      """  SpecControlAlarm  """  
      self.SpecRunAlarm:bool = obj["SpecRunAlarm"]
      """  SpecRunAlarm  """  
      self.ProcSpecAlarm:bool = obj["ProcSpecAlarm"]
      """  ProcSpecAlarm  """  
      self.ProcControlAlarm:bool = obj["ProcControlAlarm"]
      """  ProcControlAlarm  """  
      self.PartQualSpecEnable:bool = obj["PartQualSpecEnable"]
      """  PartQualSpecEnable  """  
      self.PartQualControlEnable:bool = obj["PartQualControlEnable"]
      """  PartQualControlEnable  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      """  Read-only. True when exempt date >= today.  """  
      self.OpCode:str = obj["OpCode"]
      """  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.OpCode:str = obj["OpCode"]
      """  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  """  
      self.OpComplete:bool = obj["OpComplete"]
      """   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.

Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.

This field is also set by PO receipt entry "issue complete" for subcontract operations.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.OpCode:str = obj["OpCode"]
      """  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  """  
      self.OpStdID:str = obj["OpStdID"]
      """   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.

Valid for "inside operations" only.  """  
      self.EstSetHours:int = obj["EstSetHours"]
      """  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  """  
      self.EstProdHours:int = obj["EstProdHours"]
      """   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.

FORMULAS:

If StdFormat = "HR" then EstProdHours = ProdStandard. 

If StdFormat = "PH" then (JobOper.RunQty / Std).

If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.

If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.

If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.

If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.

If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  """  
      self.ProdStandard:int = obj["ProdStandard"]
      """   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.

NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  """  
      self.StdFormat:str = obj["StdFormat"]
      """   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;

"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,

"PM" - Pieces/Minute, "OH" - Operations/Hour,

"OM"  - Operations/minute, HR - Fixed Hours.  """  
      self.StdBasis:str = obj["StdBasis"]
      """   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.

This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  """  
      self.OpsPerPart:int = obj["OpsPerPart"]
      """  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Production Quantity per one of the Parent Item.  """  
      self.QueStartDate:str = obj["QueStartDate"]
      """  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.QueStartHour:int = obj["QueStartHour"]
      """  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.StartDate:str = obj["StartDate"]
      """  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.MoveDueDate:str = obj["MoveDueDate"]
      """  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.MoveDueHour:int = obj["MoveDueHour"]
      """  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.ProdLabRate:int = obj["ProdLabRate"]
      """  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  """  
      self.SetupLabRate:int = obj["SetupLabRate"]
      """  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  """  
      self.ProdBurRate:int = obj["ProdBurRate"]
      """  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  """  
      self.SetupBurRate:int = obj["SetupBurRate"]
      """  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  """  
      self.AddedOper:bool = obj["AddedOper"]
      """  This indicates if this is an "added operation". An added operation is one that was not planned on.  """  
      self.Machines:int = obj["Machines"]
      """  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  """  
      self.SetUpCrewSize:int = obj["SetUpCrewSize"]
      """  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  """  
      self.ProdCrewSize:int = obj["ProdCrewSize"]
      """  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  """  
      self.ProdComplete:bool = obj["ProdComplete"]
      """  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  """  
      self.SetupComplete:bool = obj["SetupComplete"]
      """  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  """  
      self.ActProdHours:int = obj["ActProdHours"]
      """  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  """  
      self.ActProdRwkHours:int = obj["ActProdRwkHours"]
      """  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.ActSetupHours:int = obj["ActSetupHours"]
      """  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  """  
      self.ActSetupRwkHours:int = obj["ActSetupRwkHours"]
      """  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.

This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)

For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  """  
      self.SetupPctComplete:int = obj["SetupPctComplete"]
      """  Setup function percent complete.  Maintained via labor entry.  """  
      self.EstScrap:int = obj["EstScrap"]
      """  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  """  
      self.SubContract:bool = obj["SubContract"]
      """  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  """  
      self.IUM:str = obj["IUM"]
      """  Inventory UOM  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  """  
      self.DaysOut:int = obj["DaysOut"]
      """  Hours required is calculated as days * 8.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  """  
      self.Description:str = obj["Description"]
      """  Description used only for subcontract operations  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job operation comments.  """  
      self.SchedRelation:str = obj["SchedRelation"]
      """   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.

A "SS" can start when the preceding operation starts.

A "FS" starts when the preceding operation is finished.

A "FF" can finish when the preceding operation finishes.

These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.

A "FF" finishes when the preceding operation is finished.  """  
      self.RunQty:int = obj["RunQty"]
      """   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.

This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIMachines:int = obj["WIMachines"]
      """  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  """  
      self.WIQueStartDate:str = obj["WIQueStartDate"]
      """  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIQueStartHour:int = obj["WIQueStartHour"]
      """  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.WIMoveDueDate:str = obj["WIMoveDueDate"]
      """  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIMoveDueHour:int = obj["WIMoveDueHour"]
      """  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIHoursPerMachine:int = obj["WIHoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  """  
      self.WILoadDate:str = obj["WILoadDate"]
      """  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  """  
      self.WILoadHour:int = obj["WILoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  """  
      self.ActBurCost:int = obj["ActBurCost"]
      """  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  """  
      self.ActLabCost:int = obj["ActLabCost"]
      """   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.

FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  """  
      self.ReworkBurCost:int = obj["ReworkBurCost"]
      """  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  """  
      self.ReworkLabCost:int = obj["ReworkLabCost"]
      """  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).

Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  """  
      self.HoursPerMachine:int = obj["HoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  """  
      self.LoadDate:str = obj["LoadDate"]
      """   Date at which the operations current outstanding load starts at.

Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  """  
      self.LoadHour:int = obj["LoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  """  
      self.ReloadNum:int = obj["ReloadNum"]
      """  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobOper is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  """  
      self.EstSetHoursPerMch:int = obj["EstSetHoursPerMch"]
      """   The estimated set up hours per machine.

Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """   Part Revision number.

Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  """  
      self.AutoReceiptDate:str = obj["AutoReceiptDate"]
      """  Currently not used. Prep for future development.  """  
      self.LastLaborDate:str = obj["LastLaborDate"]
      """  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this operation belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this operation relates to.  """  
      self.LaborRate:int = obj["LaborRate"]
      """  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  """  
      self.DocLaborRate:int = obj["DocLaborRate"]
      """  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  """  
      self.DocBillableLaborRate:int = obj["DocBillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  """  
      self.Billable:bool = obj["Billable"]
      """  FS - Is this a billable operation.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the subcontract in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the subcontract in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the subcontract in customers currency.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the for the Subcontract in Customer currency.  """  
      self.LaborEntryMethod:str = obj["LaborEntryMethod"]
      """  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.FAQty:int = obj["FAQty"]
      """  The quantity requested for first article inspection.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.SetupGroup:str = obj["SetupGroup"]
      """  Used to group operation to save on setups.  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.PrimarySetupOpDtl:int = obj["PrimarySetupOpDtl"]
      """   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  """  
      self.PrimaryProdOpDtl:int = obj["PrimaryProdOpDtl"]
      """   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  """  
      self.OpDesc:str = obj["OpDesc"]
      """  Operation Description.  """  
      self.KitDate:str = obj["KitDate"]
      """  Kit Date. Not directly maintanable. Updated via the scheduling process.  """  
      self.GlbRFQ:bool = obj["GlbRFQ"]
      """  Global RFQ flag.  Used in Consolidated Purchasing.  """  
      self.BookedUnitCost:int = obj["BookedUnitCost"]
      """  Booked Unit Cost  """  
      self.RecalcExpProdYld:bool = obj["RecalcExpProdYld"]
      """   Initially defaulted to false. This flag is set to true at the time JobOper.ProdComplete is set to true if JobHead.ProductionYield = true and OpMaster. PrdYldRecalcExpected = true and the actual completed qty for the operation vs. the expected completion qty is out of variance based on the under percentage set in OpMaster. This flag is used by the production yield recalculation logic to determine if recalculation is required for a job.

This field is maintained by the system only.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.RoughCutSched:bool = obj["RoughCutSched"]
      """  When true this would signify that this operation was rough cut scheduled - meaning the operation would have start and end dates but no supporting resourcetimeused or shopload records.  """  
      self.SchedComment:str = obj["SchedComment"]
      """  Scheduling Comments  """  
      self.Rpt1BillableLaborRate:int = obj["Rpt1BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableLaborRate:int = obj["Rpt2BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableLaborRate:int = obj["Rpt3BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt1BillableUnitPrice:int = obj["Rpt1BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableUnitPrice:int = obj["Rpt2BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableUnitPrice:int = obj["Rpt3BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1LaborRate:int = obj["Rpt1LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt2LaborRate:int = obj["Rpt2LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt3LaborRate:int = obj["Rpt3LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.SNRequiredOpr:bool = obj["SNRequiredOpr"]
      """  Indicates whether serial numbers are required form this operation. When true the system will prompt in labor entry processes for the serial numbers that have been completed on this operation.  """  
      self.SNRequiredSubConShip:bool = obj["SNRequiredSubConShip"]
      """  Indicates whether serial numbers are required on subcontract ship for a subcontract operation.  """  
      self.Weight:int = obj["Weight"]
      """  Operation Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Operation Weight UOM defaulted from Part Master.  """  
      self.SendAheadType:str = obj["SendAheadType"]
      """   Determines the scheduling offset for the secondary start-to-start operation, offset which will be either



calculated (or entered) on the primary operation. The offset time can be calculated by pieces, percentage 



of the operation duration or entered manually by the user on the primary operation. The secondary operation 



will scheduled to start after the offset period.  """  
      self.SendAheadOffset:int = obj["SendAheadOffset"]
      """   Scheduling offset for the secondary start-to-start operation. The offset time can be calculated by pieces,



percentage of the operation duration or entered manually by the user on the primary operation. The 



secondary operation will scheduled to start after the offset period.  """  
      self.PrjRoleList:str = obj["PrjRoleList"]
      """  Delimited list of PrjRoleCd codes that are allowed for this operation.  """  
      self.TearDwnEndDate:str = obj["TearDwnEndDate"]
      """  Scheduled tear down start date. The start date would be the production end date.  """  
      self.TearDwnEndHour:int = obj["TearDwnEndHour"]
      """  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  """  
      self.WITearDwnEndDate:str = obj["WITearDwnEndDate"]
      """  Scheduled tear down start date. The start date would be the production end date.  """  
      self.WITearDwnEndHour:int = obj["WITearDwnEndHour"]
      """  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  """  
      self.UseAllRoles:bool = obj["UseAllRoles"]
      self.AssetPartNum:str = obj["AssetPartNum"]
      """  The PartNum for the asset. This should be disabled for a service call job, in which case the asset information would be transferred from the service call line when an operation is created for the job.  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  Serial number of the asset.  """  
      self.ActualStartDate:str = obj["ActualStartDate"]
      """  ActualStartDate  """  
      self.ActualStartHour:int = obj["ActualStartHour"]
      """  ActualStartHour  """  
      self.ActualEndDate:str = obj["ActualEndDate"]
      """  ActualEndDate  """  
      self.ActualEndHour:int = obj["ActualEndHour"]
      """  ActualEndHour  """  
      self.FSJobStatus:int = obj["FSJobStatus"]
      """  FSJobStatus  """  
      self.Instructions:str = obj["Instructions"]
      """  Instructions  """  
      self.ProdUOM:str = obj["ProdUOM"]
      """  ProdUOM  """  
      self.GeneralPlanInfo:str = obj["GeneralPlanInfo"]
      """  GeneralPlanInfo  """  
      self.EstStdDescription:str = obj["EstStdDescription"]
      """  EstStdDescription  """  
      self.JDFOpCompleted:bool = obj["JDFOpCompleted"]
      """  JDFOpCompleted  """  
      self.RemovedfromPlan:bool = obj["RemovedfromPlan"]
      """  RemovedfromPlan  """  
      self.EstStdType:int = obj["EstStdType"]
      """  EstStdType  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.PctReg:int = obj["PctReg"]
      """  PctReg  """  
      self.SetupMaterial:int = obj["SetupMaterial"]
      """  SetupMaterial  """  
      self.MaterialColorRating:int = obj["MaterialColorRating"]
      """  MaterialColorRating  """  
      self.MiscInfo1:str = obj["MiscInfo1"]
      """  MiscInfo1  """  
      self.MiscInfo2:str = obj["MiscInfo2"]
      """  MiscInfo2  """  
      self.SetupURL:str = obj["SetupURL"]
      """  SetupURL  """  
      self.ExpPctUp:int = obj["ExpPctUp"]
      """  ExpPctUp  """  
      self.ExpCycTm:int = obj["ExpCycTm"]
      """  ExpCycTm  """  
      self.ExpGood:int = obj["ExpGood"]
      """  ExpGood  """  
      self.NonProdLimit:int = obj["NonProdLimit"]
      """  NonProdLimit  """  
      self.AutoSpcEnable:bool = obj["AutoSpcEnable"]
      """  AutoSpcEnable  """  
      self.AutoSpcPeriod:int = obj["AutoSpcPeriod"]
      """  AutoSpcPeriod  """  
      self.PartQualEnable:bool = obj["PartQualEnable"]
      """  PartQualEnable  """  
      self.AutoSpcSubgroup:int = obj["AutoSpcSubgroup"]
      """  AutoSpcSubgroup  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MobileOperation:bool = obj["MobileOperation"]
      """  MobileOperation  """  
      self.ReWork:bool = obj["ReWork"]
      """  ReWork  """  
      self.RequestMove:bool = obj["RequestMove"]
      """  RequestMove  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.PrinterID:str = obj["PrinterID"]
      """  PrinterID  """  
      self.LastPrintedDate:str = obj["LastPrintedDate"]
      """  LastPrintedDate  """  
      self.LastPCIDPrinted:str = obj["LastPCIDPrinted"]
      """  LastPCIDPrinted  """  
      self.CurrentPkgCode:str = obj["CurrentPkgCode"]
      """  CurrentPkgCode  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.QtyPerCycle:int = obj["QtyPerCycle"]
      """  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.StageNumber:str = obj["StageNumber"]
      """  The identification of related StageNo.  """  
      self.TemplateID:str = obj["TemplateID"]
      """  TemplateID  """  
      self.ActScrapQty:int = obj["ActScrapQty"]
      """  The sum of LaborDtl ScrapQty for this operation.  """  
      self.AutoReceive:bool = obj["AutoReceive"]
      """  Auto receive flag  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  The currency switch flag.  """  
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.DisplayExtPrice:int = obj["DisplayExtPrice"]
      self.DisplayServAmt:int = obj["DisplayServAmt"]
      """  The display service amount.  """  
      self.DisplayServLaborRate:int = obj["DisplayServLaborRate"]
      """  The display service labor rate  """  
      self.DisplayUnitPrice:int = obj["DisplayUnitPrice"]
      """  Calculated display unit price  """  
      self.DocDisplayExtPrice:int = obj["DocDisplayExtPrice"]
      """  The document display extended price  """  
      self.DocDisplayServAmt:int = obj["DocDisplayServAmt"]
      """  The converted display service amount.  """  
      self.DocDisplayServLaborRate:int = obj["DocDisplayServLaborRate"]
      """  The converted display service labor rate.  """  
      self.DocDisplayUnitPrice:int = obj["DocDisplayUnitPrice"]
      """  The document display unit price  """  
      self.DspIUM:str = obj["DspIUM"]
      """  Display IUM field (readonly)  """  
      self.EnableAutoReceive:bool = obj["EnableAutoReceive"]
      """  Field to determine to enable or disable autoreceive.  """  
      self.EnableSndAlrtCmpl:bool = obj["EnableSndAlrtCmpl"]
      """  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  """  
      self.EnableSNReqSubConShip:bool = obj["EnableSNReqSubConShip"]
      """  This external field is used as a flag to determine when to enable/disable the SNRequiredSubConShip field on UI screen.  """  
      self.EnableSNRequiredOpr:bool = obj["EnableSNRequiredOpr"]
      self.EstBurdenCost:int = obj["EstBurdenCost"]
      """  For non subconctract operations JobOper.EstSetHours * JobOper.SetupBurRate + JobOper.EstProdHours * JobOper.ProdBurRate  """  
      self.EstLabHours:int = obj["EstLabHours"]
      """  The calculated estimated labor hours  """  
      self.EstLaborCost:int = obj["EstLaborCost"]
      """  For non subcontract operations : JobOper.EstSetHours * JobOper.SetupCrewSize * JobOper.SetupLabRate +JobOper.EstProdHours * JobOper.ProdCrewSize * JobOper.ProdLabRate  """  
      self.EstSubCost:int = obj["EstSubCost"]
      """  For SubContract operations: JobOper.EstUnitCost * JobOper.RunQty  """  
      self.FinalOpr:bool = obj["FinalOpr"]
      """  Final operation  """  
      self.IsBaseCurrency:bool = obj["IsBaseCurrency"]
      """  IsBaseCurrency  """  
      self.LaborEntryMethodDesc:str = obj["LaborEntryMethodDesc"]
      """  This is the description of the Method for Labor Entry.  Can be "Time and Quantity" for 'T', "Quantity Only" for 'Q', "Backflush" for 'B' or "Time and Backflush Qty" for 'X'  """  
      self.LoadHrs:int = obj["LoadHrs"]
      """  The total Load Hours calculated by summing the SetUpLoadHrs + ProdLoadHrs.  """  
      self.OpStdDescription:str = obj["OpStdDescription"]
      self.PrimaryProdOpDtlDesc:str = obj["PrimaryProdOpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.PrimaryResourceGrpDesc:str = obj["PrimaryResourceGrpDesc"]
      """  Primary Resource Group Description  """  
      self.PrimaryResourceGrpID:str = obj["PrimaryResourceGrpID"]
      """  The Resource Group ID of the primary production operation detail.  """  
      self.PrimarySetupOpDtlDesc:str = obj["PrimarySetupOpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.ProductionQty:int = obj["ProductionQty"]
      """  The calculated production quantity  """  
      self.RefreshResources:bool = obj["RefreshResources"]
      """  Indicates if the scheduling resources should be refreshed when the op code changes.  """  
      self.Rpt1DisplayExtPrice:int = obj["Rpt1DisplayExtPrice"]
      self.Rpt1DisplayServAmt:int = obj["Rpt1DisplayServAmt"]
      self.Rpt1DisplayServLaborRate:int = obj["Rpt1DisplayServLaborRate"]
      self.Rpt1DisplayUnitPrice:int = obj["Rpt1DisplayUnitPrice"]
      self.Rpt2DisplayExtPrice:int = obj["Rpt2DisplayExtPrice"]
      self.Rpt2DisplayServAmt:int = obj["Rpt2DisplayServAmt"]
      self.Rpt2DisplayServLaborRate:int = obj["Rpt2DisplayServLaborRate"]
      self.Rpt2DisplayUnitPrice:int = obj["Rpt2DisplayUnitPrice"]
      self.Rpt3DisplayExtPrice:int = obj["Rpt3DisplayExtPrice"]
      self.Rpt3DisplayServAmt:int = obj["Rpt3DisplayServAmt"]
      self.Rpt3DisplayServLaborRate:int = obj["Rpt3DisplayServLaborRate"]
      self.Rpt3DisplayUnitPrice:int = obj["Rpt3DisplayUnitPrice"]
      self.ScrapQty:int = obj["ScrapQty"]
      """  The calculated scrap quantity  """  
      self.ShowStatusIcon:str = obj["ShowStatusIcon"]
      """  Contains the value of which icon to display in tree for joboper  """  
      self.StdBasisDescription:str = obj["StdBasisDescription"]
      """  StdBasis Description  """  
      self.StdFormatDescription:str = obj["StdFormatDescription"]
      """  StdFormat Description  """  
      self.ActSubCost:int = obj["ActSubCost"]
      """  For SubContract Operations equals to the ActLaborCost  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OpCodeOpDesc:str = obj["OpCodeOpDesc"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.RFQLineLineDesc:str = obj["RFQLineLineDesc"]
      self.SetupGroupDescription:str = obj["SetupGroupDescription"]
      self.StageNoDescription:str = obj["StageNoDescription"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorPPZip:str = obj["VendorPPZip"]
      self.VendorPPCity:str = obj["VendorPPCity"]
      self.VendorPPAddress2:str = obj["VendorPPAddress2"]
      self.VendorPPPrimPCon:int = obj["VendorPPPrimPCon"]
      self.VendorPPAddress1:str = obj["VendorPPAddress1"]
      self.VendorPPCountry:str = obj["VendorPPCountry"]
      self.VendorPPState:str = obj["VendorPPState"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.VendorPPAddress3:str = obj["VendorPPAddress3"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobPartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number. Used in tying record back to its parent JobHead record.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.PartsPerOp:int = obj["PartsPerOp"]
      """   Part Per Operation. Active only for Concurrent process

Jobs. Otherwise set to 1.  """  
      self.PartQty:int = obj["PartQty"]
      """   The number of individual parts that are being produced

part. Sum of all related JobProd.ProdQty.

Not Directly maintable.  """  
      self.StockQty:int = obj["StockQty"]
      """  Part Qty that is being produced for Stock.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """   Total Quantity of the end part shipped from this job.

Updated via the ShipDtl write triggers.  """  
      self.ReceivedQty:int = obj["ReceivedQty"]
      """   Total quantity received to stock for the end part of the Job.

Updated via the Manufacturing receipts process.  """  
      self.WIPQty:int = obj["WIPQty"]
      """   Represents the "outstanding" WIP of production quantity.

A summary of JobProd.WIPQty, updated via JobProd write trigger.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Part Production quantity completed.

Updated via JobOper write trigger or LaborPart trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  Quantity of the job completed quantity that is "Reserved" for the linked demands (sales orders/other jobs). Summary of PartAlloc.ReservedQty where PartAlloc.SupplyJobNum = JobHead.JobNum.  Reservations for Orders are made via the Order Allocations program. They are excluded from available quantity calculations for the job. Available Quantity = JobHead.QtyCompleted - (Shipped + Received to stk + ReservedAllocQty + PickingQty + PickedQty).  Maintained via PartAlloc write trigger.  """  
      self.AllocatedQty900:int = obj["AllocatedQty900"]
      """  Total Allocated Quantity for this job part  """  
      self.PickingQty:int = obj["PickingQty"]
      """  Quantity of the job completed quantity that is considered as in the "Picking" process for the linked sales orders. Summary of PartAlloc.PickingQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickingQty is set in the Order Allocation program. Maintained via PartAlloc write trigger.  """  
      self.PickedQty:int = obj["PickedQty"]
      """  Quantity of the job completed quantity that is considered as in the shipping "Staging" process for the linked sales orders. Summary of PartAlloc.PickedQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickedQty is updated when the material move moves the item to the staging area.  Maintained via PartAlloc write trigger.  """  
      self.LbrCostBase:int = obj["LbrCostBase"]
      """   Defines an integer value which is used to calculate a

ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.MtlCostBase:int = obj["MtlCostBase"]
      """   Defines an integer value which is used to calculate a

ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  Mirror image of JobHead.JobClosed. Duplicated for performance reasons  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.   Mirror image of JobHead.JobClosed. Duplicated for performance reasons  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  Mirror image of JobHead.Site. Duplicated for performance reasons  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.IUM:str = obj["IUM"]
      """  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  """  
      self.ShipDocReq:bool = obj["ShipDocReq"]
      """   Shipping Documents Required.

Indicates if shipping documents are required when shipping this part from the Job. Pertains to Job Shipments only and only if the PartNum does not exist in the PartTable. If it does exist then the Part.ShipDocReq. If checked, then at the time of shipping the system will require that the JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  """  
      self.ShipDocAvail:bool = obj["ShipDocAvail"]
      """   Required Shipping Documents Available.

A flag manually set by the user to indicate that the required documents for the Job Part  are available. In order to set to Yes, at least one attachment having a DocType with Shipment = yes must exist for the Job Part.  If the Part.ShipDocReq = yes  then JobPart.ShipDocsA vail must = yes before the system will allow shipment of the Part from the job.Requires DocManagement license.  """  
      self.MtlList:str = obj["MtlList"]
      """  List of materials that us this part as cost base  """  
      self.PreventSugg:bool = obj["PreventSugg"]
      """  Indicates that MRP should not create job suggestions for the specified co-part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.OrderQty:int = obj["OrderQty"]
      self.ProcessMode:str = obj["ProcessMode"]
      """  The value of the JobHead.ProcessMode  """  
      self.EnableShipDocReq:bool = obj["EnableShipDocReq"]
      """  Indicates if ShipDocReq is enabled. Only if JobPart.PartNum does not exist in Part Table and if Document Management is installed.  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      """  Logical field signifying whether JobPart.PartNum is a valid part master part.  """  
      self.EnableSugg:bool = obj["EnableSugg"]
      self.BitFlag:int = obj["BitFlag"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackInventoryByRevision:bool = obj["PartTrackInventoryByRevision"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobProdRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number. Used in tying record back to its parent JobHead record.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Related sales order number. For build to stock demands the OrderNum, OrderLine and OrderRel fields are all zero  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Related Sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Related sales order release number.  """  
      self.ProdQty:int = obj["ProdQty"]
      """   The planned production quantity for a  Job to fill the demand.

Note: updates the JobHead.ProdQty via JobProd write trigger.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """   Inventory warehouse that job is producing for.

Only relevant for build to stock demands (ordernum = 0). In this case a valid Part must be referenced.  """  
      self.TargetJobNum:str = obj["TargetJobNum"]
      """  Production Demands can be from other jobs.  That is, one job can be building parts that are required by another job. The demand is defined by a JobMtl record on some other job.  "TargetJobNum" is the job that this job is making parts for.  """  
      self.TargetAssemblySeq:int = obj["TargetAssemblySeq"]
      """  Assembly Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.TargetMtlSeq:int = obj["TargetMtlSeq"]
      """  Material Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """   Quantity Shipped against this allocation.

Updated via the ShipDtl write triggers.  """  
      self.ReceivedQty:int = obj["ReceivedQty"]
      """   Total quantity received to stock for this production allocation.

Updated via the Manufacturing Receipts process  """  
      self.WIPQty:int = obj["WIPQty"]
      """   Represents the "outstanding" WIP production quantity.

WIPQty = JobProd.Quantity - (ShippedQty +ReceivedQty) if negative then it is set to zero. If related Order Release is closed then reservation is zero.

Updated via the JobProd, OrderRel triggers.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.TFLineNum:str = obj["TFLineNum"]
      """  This is the unique key for this table.  It will have a prefix like Job to indicate firm or unfirm orders.  The record can be linked to an Order Header by using the TFOrdNum TFOrdSeq keys.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand schedule is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  The sequence from the DemandHead record this DemandSchedule is related to.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  The sequence from the DemandDetail record this DemandSchedule is related to.  """  
      self.DemandScheduleSeq:int = obj["DemandScheduleSeq"]
      """  This field along with Company, DemandContractNum, DemandHeadSeq, and DemandDetailSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandSchedulel record for the DemandDetail and the adding 1 to it.  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanID:str = obj["PlanID"]
      """  PlanID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.WIPToMiscShipment:bool = obj["WIPToMiscShipment"]
      """  Job will be shipped through a Misc Shipment directly from WIP when job is closed.  """  
      self.RMANum:int = obj["RMANum"]
      """  RMA Num linked from RMA Disposition.  """  
      self.RMALine:int = obj["RMALine"]
      """  RMA Line linked from RMA Disposition.  """  
      self.RMAReceipt:int = obj["RMAReceipt"]
      """  RMA Receipt linked from RMA Disposition.  """  
      self.RMADisp:int = obj["RMADisp"]
      """  RMA Disposition linked from RMA Disposition.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  DMRNum  """  
      self.DMRActionNum:int = obj["DMRActionNum"]
      """  DMRActionNum  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.CustID:str = obj["CustID"]
      """  The customer ID  """  
      self.CustName:str = obj["CustName"]
      """  The customer name.  """  
      self.DemandLinkSource:str = obj["DemandLinkSource"]
      """  The demand linke source  """  
      self.DemandLinkStatus:str = obj["DemandLinkStatus"]
      """  The demand link status  """  
      self.IUM:str = obj["IUM"]
      """  IUM  """  
      self.JHPartDesc:str = obj["JHPartDesc"]
      """  The jobhead part description  """  
      self.JHPartNum:str = obj["JHPartNum"]
      """  The jobhead part number  """  
      self.MakeToJobQty:int = obj["MakeToJobQty"]
      """  The make to job quantity  """  
      self.MakeToStockQty:int = obj["MakeToStockQty"]
      """  The make to stock quantity  """  
      self.MakeToType:str = obj["MakeToType"]
      """  The Make to type (i.e. Stock, Job, Order)  """  
      self.MaxAllowedQty:int = obj["MaxAllowedQty"]
      """  Calculated quantity that could come from allocatedqty or accumulation from parttran.  """  
      self.MtlPartDesc:str = obj["MtlPartDesc"]
      """  The jobmtl part description.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The jobmtl part number.  """  
      self.OrdWIPQty:int = obj["OrdWIPQty"]
      """  The order WIP quantity  """  
      self.OurStockQty:int = obj["OurStockQty"]
      """  Calculated field OurStockQty, will update OrderRel.OurStockQty  """  
      self.PullFromStockWarehouseCode:str = obj["PullFromStockWarehouseCode"]
      """  Pull from Stock warehouse code (orderrel.warehousecode  """  
      self.PullFromStockWarehouseDesc:str = obj["PullFromStockWarehouseDesc"]
      """  The pull from stock warehouse description  """  
      self.ShipBy:str = obj["ShipBy"]
      """  The Demand Link Due Date - Ship By  """  
      self.SplitQty:int = obj["SplitQty"]
      """  The split quantity for the demand.  """  
      self.StkWIPQty:int = obj["StkWIPQty"]
      """  The stock WIP quantity  """  
      self.TFOrdLine:int = obj["TFOrdLine"]
      self.TFOrdNum:str = obj["TFOrdNum"]
      self.TotalSplitQuantity:int = obj["TotalSplitQuantity"]
      """  Temp field so UI has a column to bind to for calculation of Total Split Quantity.  """  
      self.TrackSerialNumbers:bool = obj["TrackSerialNumbers"]
      self.Valid:bool = obj["Valid"]
      """  This is a field used in Split Job to determine if record has been validated.  """  
      self.AsmPartDesc:str = obj["AsmPartDesc"]
      """  The jobasmbl part description.  """  
      self.AsmPartNum:str = obj["AsmPartNum"]
      """  The jobasmbl part number.  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.DispNumberOfPieces:int = obj["DispNumberOfPieces"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.CustInactive:bool = obj["CustInactive"]
      """  Indicates a customer referenced on the record is inactive.  """  
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      """  Indicates if a ShipTo referenced on the record is inactive.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartTrackInventoryByRevision:bool = obj["PartTrackInventoryByRevision"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobResourcesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.OprSeq:int = obj["OprSeq"]
      self.OpDtlSeq:int = obj["OpDtlSeq"]
      self.WhatIf:bool = obj["WhatIf"]
      self.AllocNum:int = obj["AllocNum"]
      self.ResourceGrpID:str = obj["ResourceGrpID"]
      self.ResourceID:str = obj["ResourceID"]
      self.ResourceDesc:str = obj["ResourceDesc"]
      self.CalendarName:str = obj["CalendarName"]
      """  Calendar Name  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobStageRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Stage is associated with.  """  
      self.StageSeq:int = obj["StageSeq"]
      """  A sequence number which uniquely identifies stage record within the stage set.  """  
      self.StageNumber:str = obj["StageNumber"]
      """  The identification of related StageNo.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.StageNumberDescription:str = obj["StageNumberDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass




#########################################################################
# Custom Schemas:
#########################################################################
class AddOperation_input:
   """ Required : 
   ipJobAsmblRowID
   ipOPCode
   ipNewOprSeq
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      self.ipOPCode:str = obj["ipOPCode"]
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      self.ipReturn:bool = obj["ipReturn"]
      pass

class AddOperation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opShowmsg:bool = obj["opShowmsg"]
      pass

      """  output parameters  """  

class AddRefDesRange_input:
   """ Required : 
   ipJobNum
   ipAsmSeq
   ipMtlSeq
   ipPrefix
   ipStartNum
   ipEndNum
   ipSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number  """  
      self.ipAsmSeq:int = obj["ipAsmSeq"]
      """  The Job Assembly  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The Job Material Seq  """  
      self.ipPrefix:str = obj["ipPrefix"]
      """  The Prefix to be used to create Reference Designators  """  
      self.ipStartNum:int = obj["ipStartNum"]
      """  The Starting Number to create Reference Designators  """  
      self.ipEndNum:int = obj["ipEndNum"]
      """  The Ending Number to create Reference Designators  """  
      self.ipSuffix:str = obj["ipSuffix"]
      """  The Suffix to be used to create Reference Designators  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class AddRefDesRange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class AppendDetails_input:
   """ Required : 
   ds
   targetJob
   targetAsm
   sourceFile
   keyOne
   keyTwo
   keyThree
   getCostsFromInv
   getCostsFromTemp
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JbAppendTableset] = obj["ds"]
      self.targetJob:str = obj["targetJob"]
      self.targetAsm:int = obj["targetAsm"]
      self.sourceFile:str = obj["sourceFile"]
      self.keyOne:str = obj["keyOne"]
      self.keyTwo:str = obj["keyTwo"]
      self.keyThree:str = obj["keyThree"]
      self.getCostsFromInv:bool = obj["getCostsFromInv"]
      self.getCostsFromTemp:bool = obj["getCostsFromTemp"]
      pass

class AppendDetails_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.errorList:str = obj["parameters"]
      pass

      """  output parameters  """  

class BuildAppendDetails_input:
   """ Required : 
   sourceFile
   keyOne
   keyTwo
   keyThree
   targetJob
   targetAsm
   vDueDate
   """  
   def __init__(self, obj):
      self.sourceFile:str = obj["sourceFile"]
      """  Source of the append details, Quote, Job or Method  """  
      self.keyOne:str = obj["keyOne"]
      """  First key field of source  """  
      self.keyTwo:str = obj["keyTwo"]
      """  Second key field of source  """  
      self.keyThree:str = obj["keyThree"]
      """  Third key field of source  """  
      self.targetJob:str = obj["targetJob"]
      """  Target Job Num  """  
      self.targetAsm:int = obj["targetAsm"]
      """  Target Assembly  """  
      self.vDueDate:str = obj["vDueDate"]
      """  Due Date to calculate V_AsOfDate and grac correct revision on Append Details.  """  
      pass

class BuildAppendDetails_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JbAppendTableset] = obj["returnObj"]
      pass

class BuildWhseLinkList_input:
   """ Required : 
   ipJobProdRowid
   ds
   """  
   def __init__(self, obj):
      self.ipJobProdRowid:str = obj["ipJobProdRowid"]
      """  The rowid of the JobProd record to build the warehouses for  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class BuildWhseLinkList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opWhseList:str = obj["parameters"]
      pass

      """  output parameters  """  

class CalcJobMtlEstMtlBurUnitCost_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CalcJobMtlEstMtlBurUnitCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeEquipID_input:
   """ Required : 
   equipID
   ds
   """  
   def __init__(self, obj):
      self.equipID:str = obj["equipID"]
      """  Proposed equipment id  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeEquipID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeIssueTopics_input:
   """ Required : 
   topics
   ds
   """  
   def __init__(self, obj):
      self.topics:str = obj["topics"]
      """  Proposed topics string id  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeIssueTopics_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmReqRefDes_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmReqRefDes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmRestrictManual_input:
   """ Required : 
   checkManual
   ds
   """  
   def __init__(self, obj):
      self.checkManual:bool = obj["checkManual"]
      """  Indicates if the Restriction is Manual Compliant  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmRestrictManual_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmRestriction_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmSubstance_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmSubstance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblAttributeSetID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblDirect_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblDirect_output:
   def __init__(self, obj):
      pass

class ChangeJobAsmblEstSplitCosts_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblEstSplitCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblEstUnitCost_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblEstUnitCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblLinkToContract_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblLinkToContract_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblMtlBurRate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblMtlBurRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblOpr_input:
   """ Required : 
   iProposedRelatedOperation
   ds
   """  
   def __init__(self, obj):
      self.iProposedRelatedOperation:int = obj["iProposedRelatedOperation"]
      """  The new proposed JobAsmbl.RelatedOperation value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblOpr_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblOverRunQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblOverRunQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblParent_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblParent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblPartNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblQtyPer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblQtyPer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblReassignSNAsm_input:
   """ Required : 
   proposedReassignSNAsm
   ds
   """  
   def __init__(self, obj):
      self.proposedReassignSNAsm:bool = obj["proposedReassignSNAsm"]
      """  The new proposed JobAsmbl.ReassignSNAsm value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblReassignSNAsm_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblRevisionNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblValRefDes_input:
   """ Required : 
   ipProposedValResDes
   ds
   """  
   def __init__(self, obj):
      self.ipProposedValResDes:bool = obj["ipProposedValResDes"]
      """  The new proposed JobAsmbl.ValRefDes value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblValRefDes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobAsmblWarehouseCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobAsmblWarehouseCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadAttributeSetID_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadJobEngineered_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadJobEngineered_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadJobReleased_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadJobReleased_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadPartNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadPersonID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadPersonID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadPhaseID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadPhaseID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadProdCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadProdCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadProdTeamID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadProdTeamID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadProjectID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobHeadRevisionNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobHeadRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlAttributeSetID_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlBackflush_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlBackflush_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlBillable_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlBillable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlBurUnitCost_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlBurUnitCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlBuyIt_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlBuyIt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlCurrencySwitch_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlCurrencySwitch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlDirect_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlDirect_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlDisplayUnitPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlDisplayUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlEstSalSplitCosts_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlEstSalSplitCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlEstScrapType_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlEstScrapType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlEstScrap_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlEstScrap_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlEstSplitCosts_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlEstSplitCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlFixedQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlFixedQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlIUM_input:
   """ Required : 
   ipProposedIUM
   ds
   """  
   def __init__(self, obj):
      self.ipProposedIUM:str = obj["ipProposedIUM"]
      """  The proposed IUM.  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlIUM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlLinkToContract_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlLinkToContract_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlMiscCharge_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlMiscCharge_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlMtlBurRate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlMtlBurRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlPartNum_input:
   """ Required : 
   ds
   ipValidatePart
   ipPartNum
   SysRowID
   xrefPartNum
   xrefPartType
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.ipValidatePart:bool = obj["ipValidatePart"]
      """  Flag to indicate if the part validations are required (used only after multiple match resolved)  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The input-output part number to validate and it gets returned  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID (used only after multiple match resolved)  """  
      self.xrefPartNum:str = obj["xrefPartNum"]
      """  XRef Part Number (used only after multiple match resolved)  """  
      self.xrefPartType:str = obj["xrefPartType"]
      """  XRef Part Type (used only after multiple match resolved)  """  
      pass

class ChangeJobMtlPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.ipPartNum:str = obj["parameters"]
      self.vMsgText:str = obj["parameters"]
      self.vSubAvail:bool = obj["vSubAvail"]
      self.vMsgType:str = obj["parameters"]
      self.multipleMatch:bool = obj["multipleMatch"]
      self.opPartChgCompleted:bool = obj["opPartChgCompleted"]
      self.opMtlIssuedAction:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeJobMtlPlant_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlPlant_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlPricePerCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlPricePerCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlPurPoint_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlPurPoint_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlQtyPer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlQtyPer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlRcvInspectionReq_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlRcvInspectionReq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlReassignSNAsm_input:
   """ Required : 
   proposedReassignSNAsm
   ds
   """  
   def __init__(self, obj):
      self.proposedReassignSNAsm:bool = obj["proposedReassignSNAsm"]
      """  The new proposed JobMtl.ReassignSNAsm value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlReassignSNAsm_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlRelatedOperation_input:
   """ Required : 
   iProposedRelatedOperation
   ds
   """  
   def __init__(self, obj):
      self.iProposedRelatedOperation:int = obj["iProposedRelatedOperation"]
      """  The new proposed JobMtl.RelatedOperation value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlRelatedOperation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlReqRefDes_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlReqRefDes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlRestriction_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSalvageMtlBurRate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSalvageMtlBurRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSalvagePartNum_input:
   """ Required : 
   ipProposedSalvagePartNum
   ds
   """  
   def __init__(self, obj):
      self.ipProposedSalvagePartNum:str = obj["ipProposedSalvagePartNum"]
      """  The new proposed JobMtl.SalvagePartNum value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSalvagePartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSalvageQtyPer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSalvageQtyPer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSalvageUM_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSalvageUM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSalvageUnitCredit_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSalvageUnitCredit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlSubstance_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlSubstance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMtlVendorNumVendorID_input:
   """ Required : 
   ipProposedVendorNumVendorID
   ds
   """  
   def __init__(self, obj):
      self.ipProposedVendorNumVendorID:str = obj["ipProposedVendorNumVendorID"]
      """  The proposed supplier id.  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobMtlVendorNumVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlCapability_input:
   """ Required : 
   ProposedCapID
   ds
   """  
   def __init__(self, obj):
      self.ProposedCapID:str = obj["ProposedCapID"]
      """  The proposed Capability ID  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlCapability_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlEstSetHoursPerMch_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlEstSetHoursPerMch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlOpsPerPart_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlOpsPerPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlOverrideRates_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlOverrideRates_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlProdStandard_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlProdStandard_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlQtyPerCycle_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlQtyPerCycle_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlResourceGrpID_input:
   """ Required : 
   ProposedResGrpID
   ds
   """  
   def __init__(self, obj):
      self.ProposedResGrpID:str = obj["ProposedResGrpID"]
      """  The proposed Resource Group ID  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlResourceGrpID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlResourceID_input:
   """ Required : 
   ProposedResourceID
   ds
   """  
   def __init__(self, obj):
      self.ProposedResourceID:str = obj["ProposedResourceID"]
      """  The proposed Resource ID  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlResourceID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlStdBasis_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlStdBasis_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOpDtlStdFormat_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOpDtlStdFormat_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperAutoReceive_input:
   """ Required : 
   ipProposedAutoReceive
   ds
   """  
   def __init__(self, obj):
      self.ipProposedAutoReceive:bool = obj["ipProposedAutoReceive"]
      """  The new proposed JobOper.AutoReceive value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperAutoReceive_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperBillable_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperBillable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperCurrencySwitch_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperCurrencySwitch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperDisplayUnitPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperDisplayUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperDocUnitPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperDocUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperEstLabHours_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperEstLabHours_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperEstScrapType_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperEstScrapType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperEstScrap_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperEstScrap_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperEstSetHoursPerMch_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperEstSetHoursPerMch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperIUM_input:
   """ Required : 
   ipProposedIUM
   ds
   """  
   def __init__(self, obj):
      self.ipProposedIUM:str = obj["ipProposedIUM"]
      """  The proposed IUM.  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperIUM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperLaborEntryMethod_input:
   """ Required : 
   iLaborEntryMethod
   ds
   """  
   def __init__(self, obj):
      self.iLaborEntryMethod:str = obj["iLaborEntryMethod"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperLaborEntryMethod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperMachines_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperMachines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperOpCode_input:
   """ Required : 
   ProposedOpCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedOpCode:str = obj["ProposedOpCode"]
      """  The proposed Operation Code  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperOpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.RefreshMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperOpStdID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperOpStdID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperOprSeq_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperOprSeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperOpsPerPart_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperOpsPerPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperPartNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperPricePerCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperPricePerCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperPrimaryProdOpDtl_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperPrimaryProdOpDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperPrimarySetupOpDtl_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperPrimarySetupOpDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperProdStandard_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperProdStandard_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperPurPoint_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperPurPoint_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperQtyPerCycle_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperQtyPerCycle_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperQtyPer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperQtyPer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperRcvInspection_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperRcvInspection_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperSNRequiredSubConShip_input:
   """ Required : 
   ipProposedSNRequiredSubConShip
   ds
   """  
   def __init__(self, obj):
      self.ipProposedSNRequiredSubConShip:bool = obj["ipProposedSNRequiredSubConShip"]
      """  The new proposed JobOper.SNRequiredOprSubConShip value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperSNRequiredSubConShip_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperSNRequired_input:
   """ Required : 
   ipProposedSNRequired
   ds
   """  
   def __init__(self, obj):
      self.ipProposedSNRequired:bool = obj["ipProposedSNRequired"]
      """  The new proposed JobOper.SNRequiredOpr value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperSNRequired_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperStdBasis_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperStdBasis_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperStdFormat_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperStdFormat_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperUnitPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOperVendorNumVendorID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOperVendorNumVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOprRestriction_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOprRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobOprSubstance_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobOprSubstance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobPartAttributeSetID_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobPartAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobPartPartNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobPartPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdMakeToJobQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdMakeToJobQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdMakeToStockQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdMakeToStockQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdMakeToType_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdMakeToType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdOrderLine_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdOrderLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdOrderNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdOrderNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdOrderRelNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdOrderRelNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdOurStockQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdOurStockQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.oMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdProdQty_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdProdQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdTargetAssemblySeq_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdTargetAssemblySeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdTargetJobNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdTargetJobNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobProdTargetMtlSeq_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeJobProdTargetMtlSeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeResTopics_input:
   """ Required : 
   topics
   ds
   """  
   def __init__(self, obj):
      self.topics:str = obj["topics"]
      """  Proposed topics string id  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ChangeResTopics_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckApprovedSupplier_input:
   """ Required : 
   ipJobNum
   ipJobOperRowid
   ipJobProdRowid
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number to check for approved suppliers.  """  
      self.ipJobOperRowid:str = obj["ipJobOperRowid"]
      """  The rowid of subcontract operation to check.  """  
      self.ipJobProdRowid:str = obj["ipJobProdRowid"]
      """  The rowid of the demand link to check.  """  
      pass

class CheckApprovedSupplier_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opWarningMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckChangeJobAsmblParent_input:
   """ Required : 
   ipNewParent
   ds
   """  
   def __init__(self, obj):
      self.ipNewParent:int = obj["ipNewParent"]
      """  New Parent value to check against  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobAsmblParent_output:
   def __init__(self, obj):
      pass

class CheckChangeJobMtlMiscCharge_input:
   """ Required : 
   ipMiscCharge
   ds
   """  
   def __init__(self, obj):
      self.ipMiscCharge:bool = obj["ipMiscCharge"]
      """  New Misc Charge  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobMtlMiscCharge_output:
   def __init__(self, obj):
      pass

class CheckChangeJobOperPartNum_input:
   """ Required : 
   ipJobNum
   ipPartNum
   ipAssemblySeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The New PartNum to validate against.  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  The inputted Assembly Sequence to validate  """  
      pass

class CheckChangeJobOperPartNum_output:
   def __init__(self, obj):
      pass

class CheckChangeJobProdOrderRelNum_input:
   """ Required : 
   ipNewOrderRelNum
   ds
   """  
   def __init__(self, obj):
      self.ipNewOrderRelNum:int = obj["ipNewOrderRelNum"]
      """  New OrderRelNum value to check against  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobProdOrderRelNum_output:
   def __init__(self, obj):
      pass

class CheckChangeJobProdTargetAssemblySeq_input:
   """ Required : 
   ipNewTargetAssemblySeq
   ds
   """  
   def __init__(self, obj):
      self.ipNewTargetAssemblySeq:int = obj["ipNewTargetAssemblySeq"]
      """  New Target Assembly Number  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobProdTargetAssemblySeq_output:
   def __init__(self, obj):
      pass

class CheckChangeJobProdTargetJobNum_input:
   """ Required : 
   ipNewTargetJobNum
   ds
   """  
   def __init__(self, obj):
      self.ipNewTargetJobNum:str = obj["ipNewTargetJobNum"]
      """  The New TargetJobNum to validate against.  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobProdTargetJobNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckChangeJobProdTargetMtlSeq_input:
   """ Required : 
   ipNewTargetMtlSeq
   ds
   """  
   def __init__(self, obj):
      self.ipNewTargetMtlSeq:int = obj["ipNewTargetMtlSeq"]
      """  The New TargetMtlSeq to validate against.  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckChangeJobProdTargetMtlSeq_output:
   def __init__(self, obj):
      pass

class CheckConfigurationAndGetConfigInfo_input:
   """ Required : 
   relatedToTable
   relatedToSysRowID
   sourcePart
   sourceRevision
   findRevision
   foreignTable
   foreignSysRowID
   """  
   def __init__(self, obj):
      self.relatedToTable:str = obj["relatedToTable"]
      """  Related To File  """  
      self.relatedToSysRowID:str = obj["relatedToSysRowID"]
      """  The job on which the configuration should be saved.  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRevision:str = obj["sourceRevision"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.findRevision:bool = obj["findRevision"]
      """  Foreign row  """  
      self.foreignTable:str = obj["foreignTable"]
      """  Foreign row  """  
      self.foreignSysRowID:str = obj["foreignSysRowID"]
      """  Foreign row SysRowID  """  
      pass

class CheckConfigurationAndGetConfigInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.foreignTable:str = obj["parameters"]
      self.foreignSysRowID:str = obj["parameters"]
      self.configurationExists:bool = obj["configurationExists"]
      self.canGetDetails:bool = obj["canGetDetails"]
      self.needsConfiguration:bool = obj["needsConfiguration"]
      self.configureRevision:str = obj["parameters"]
      self.reasonMessage:str = obj["parameters"]
      self.warningMsg:bool = obj["warningMsg"]
      self.isNIC:bool = obj["isNIC"]
      self.structTag:str = obj["parameters"]
      self.ruleTag:str = obj["parameters"]
      self.configType:str = obj["parameters"]
      self.configURL:str = obj["parameters"]
      self.configID:str = obj["parameters"]
      self.kbConfigProdID:int = obj["parameters"]
      pass

      """  output parameters  """  

class CheckConfigurationAndGetConfigType_input:
   """ Required : 
   relatedToTable
   relatedToSysRowID
   sourcePart
   sourceRevision
   findRevision
   foreignTable
   foreignSysRowID
   """  
   def __init__(self, obj):
      self.relatedToTable:str = obj["relatedToTable"]
      """  Related To File  """  
      self.relatedToSysRowID:str = obj["relatedToSysRowID"]
      """  The job on which the configuration should be saved.  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRevision:str = obj["sourceRevision"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.findRevision:bool = obj["findRevision"]
      """  Foreign row  """  
      self.foreignTable:str = obj["foreignTable"]
      """  Foreign row  """  
      self.foreignSysRowID:str = obj["foreignSysRowID"]
      """  Foreign row SysRowID  """  
      pass

class CheckConfigurationAndGetConfigType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.foreignTable:str = obj["parameters"]
      self.foreignSysRowID:str = obj["parameters"]
      self.configurationExists:bool = obj["configurationExists"]
      self.canGetDetails:bool = obj["canGetDetails"]
      self.needsConfiguration:bool = obj["needsConfiguration"]
      self.configureRevision:str = obj["parameters"]
      self.reasonMessage:str = obj["parameters"]
      self.warningMsg:bool = obj["warningMsg"]
      self.isNIC:bool = obj["isNIC"]
      self.structTag:str = obj["parameters"]
      self.ruleTag:str = obj["parameters"]
      self.configType:str = obj["parameters"]
      self.configURL:str = obj["parameters"]
      self.configID:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckConfiguration_input:
   """ Required : 
   relatedToTable
   relatedToSysRowID
   sourcePart
   sourceRevision
   findRevision
   foreignTable
   foreignSysRowID
   """  
   def __init__(self, obj):
      self.relatedToTable:str = obj["relatedToTable"]
      """  Related To File  """  
      self.relatedToSysRowID:str = obj["relatedToSysRowID"]
      """  The job on which the configuration should be saved.  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRevision:str = obj["sourceRevision"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.findRevision:bool = obj["findRevision"]
      self.foreignTable:str = obj["foreignTable"]
      """  Foreign row  """  
      self.foreignSysRowID:str = obj["foreignSysRowID"]
      """  Foreign row SysRowID  """  
      pass

class CheckConfiguration_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.foreignTable:str = obj["parameters"]
      self.foreignSysRowID:str = obj["parameters"]
      self.configurationExists:bool = obj["configurationExists"]
      self.canGetDetails:bool = obj["canGetDetails"]
      self.needsConfiguration:bool = obj["needsConfiguration"]
      self.configureRevision:str = obj["parameters"]
      self.reasonMessage:str = obj["parameters"]
      self.warningMsg:bool = obj["warningMsg"]
      self.isNIC:bool = obj["isNIC"]
      self.structTag:str = obj["parameters"]
      self.ruleTag:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckEngineered_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.v_Engineered:bool = obj["v_Engineered"]
      pass

      """  output parameters  """  

class CheckForChanges_input:
   """ Required : 
   cCompany
   cJobNum
   lJobEng
   lJobRel
   lInCopy
   lSchedL
   lChkOff1
   lChkOff2
   lChkOff3
   lChkOff4
   lChkOff5
   """  
   def __init__(self, obj):
      self.cCompany:str = obj["cCompany"]
      """  Should the user to be prompted for change description?  """  
      self.cJobNum:str = obj["cJobNum"]
      """  Should the user to be prompted for change description?  """  
      self.lJobEng:bool = obj["lJobEng"]
      """  Should the user to be prompted for change description?  """  
      self.lJobRel:bool = obj["lJobRel"]
      """  Should the user to be prompted for change description?  """  
      self.lInCopy:bool = obj["lInCopy"]
      """  Should the user to be prompted for change description?  """  
      self.lSchedL:bool = obj["lSchedL"]
      """  Should the user to be prompted for change description?  """  
      self.lChkOff1:bool = obj["lChkOff1"]
      """  Should the user to be prompted for change description?  """  
      self.lChkOff2:bool = obj["lChkOff2"]
      """  Should the user to be prompted for change description?  """  
      self.lChkOff3:bool = obj["lChkOff3"]
      """  Should the user to be prompted for change description?  """  
      self.lChkOff4:bool = obj["lChkOff4"]
      """  Should the user to be prompted for change description?  """  
      self.lChkOff5:bool = obj["lChkOff5"]
      """  Should the user to be prompted for change description?  """  
      pass

class CheckForChanges_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opChangeDescription:bool = obj["opChangeDescription"]
      pass

      """  output parameters  """  

class CheckIfMaterialIsIssued_input:
   """ Required : 
   ipJobNum
   ipPartNum
   ipAssemblySeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The inputted Job Number to validate  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The inputted PartNum to validate  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  The inputted Assembly Sequence to validate  """  
      pass

class CheckIfMaterialIsIssued_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.mtlIssueAction:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckInactiveSchedRequirement_input:
   """ Required : 
   capability
   resourceID
   resourceGroupID
   """  
   def __init__(self, obj):
      self.capability:str = obj["capability"]
      """  Capability to be validated  """  
      self.resourceID:str = obj["resourceID"]
      """  Resource to be validated  """  
      self.resourceGroupID:str = obj["resourceGroupID"]
      """  Resource Group to be validated  """  
      pass

class CheckInactiveSchedRequirement_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.inactiveMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckJobHeadContractID_input:
   """ Required : 
   ipJobNum
   ipContractID
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      self.ipContractID:str = obj["ipContractID"]
      pass

class CheckJobHeadContractID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ipContractID:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckJobHeadProjectID_input:
   """ Required : 
   ds
   projectID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.projectID:str = obj["projectID"]
      pass

class CheckJobHeadProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobMtlBuyIt_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobMtlBuyIt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobMtlPartNumFixQty_input:
   """ Required : 
   ipProposedMtlPartNum
   ds
   """  
   def __init__(self, obj):
      self.ipProposedMtlPartNum:str = obj["ipProposedMtlPartNum"]
      """  The new proposed ttJobMtl.PartNum value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobMtlPartNumFixQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobOperOprSeq_input:
   """ Required : 
   ipJobNum
   ipAssemblySeq
   ipOprSeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The inputted Job Number to validate  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  The inputted Assembly Sequence to validate  """  
      self.ipOprSeq:int = obj["ipOprSeq"]
      """  The inputted Operation Sequence to validate  """  
      pass

class CheckJobOperOprSeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckJobOperPrimaryProdOpDtl_input:
   """ Required : 
   ds
   ipPrimaryProdOpDtl
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.ipPrimaryProdOpDtl:int = obj["ipPrimaryProdOpDtl"]
      """  The new PrimaryProdOpDtl value to change to  """  
      pass

class CheckJobOperPrimaryProdOpDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobOperPrimarySetupOpDtl_input:
   """ Required : 
   ds
   ipPrimarySetupOpDtl
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.ipPrimarySetupOpDtl:int = obj["ipPrimarySetupOpDtl"]
      """  The new PrimarySetupOpDtl value to change to  """  
      pass

class CheckJobOperPrimarySetupOpDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobPartPartNumIsSerTra_input:
   """ Required : 
   ipProposedPartNum
   ds
   """  
   def __init__(self, obj):
      self.ipProposedPartNum:str = obj["ipProposedPartNum"]
      """  The new proposed JobPart.PartNum value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobPartPartNumIsSerTra_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobProdMakeToType_input:
   """ Required : 
   ipChangeToType
   ds
   """  
   def __init__(self, obj):
      self.ipChangeToType:str = obj["ipChangeToType"]
      """  The new maketotype value to change to  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobProdMakeToType_output:
   def __init__(self, obj):
      pass

class CheckJobProdProdQty_input:
   """ Required : 
   dProposedProdQty
   ds
   """  
   def __init__(self, obj):
      self.dProposedProdQty:int = obj["dProposedProdQty"]
      """  The new proposed JobProd.ProdQty value  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobProdProdQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckJobProdQtyJob_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckJobProdQtyJob_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckLink_input:
   """ Required : 
   targetJob
   targetAsm
   targetMtl
   isEnabled
   """  
   def __init__(self, obj):
      self.targetJob:str = obj["targetJob"]
      """  Target Job Number  """  
      self.targetAsm:int = obj["targetAsm"]
      """  Target Job AssemblySeq  """  
      self.targetMtl:int = obj["targetMtl"]
      """  Target Job Mtl  """  
      self.isEnabled:bool = obj["isEnabled"]
      """  Make Direct Is Enabled  """  
      pass

class CheckLink_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.isEnabled:bool = obj["isEnabled"]
      pass

      """  output parameters  """  

class CheckPrePartInfo_input:
   """ Required : 
   ds
   partNum
   SysRowID
   skipXRefUpdate
   xrefPartNum
   xrefPartType
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      """  The input-output part number to validate and it gets returned  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID (used only after multiple match resolved)  """  
      self.skipXRefUpdate:bool = obj["skipXRefUpdate"]
      """  Skip part xref jobhead field update logic (true for asm and mtl)  """  
      self.xrefPartNum:str = obj["xrefPartNum"]
      """  XRef Part Number (used only after multiple match resolved)  """  
      self.xrefPartType:str = obj["xrefPartType"]
      """  XRef Part Type (used only after multiple match resolved)  """  
      pass

class CheckPrePartInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.partNum:str = obj["parameters"]
      self.vMsgText:str = obj["parameters"]
      self.vSubAvail:bool = obj["vSubAvail"]
      self.vMsgType:str = obj["parameters"]
      self.multipleMatch:bool = obj["multipleMatch"]
      pass

      """  output parameters  """  

class CheckPreProjectID_input:
   """ Required : 
   ipJobProdRowid
   ds
   """  
   def __init__(self, obj):
      self.ipJobProdRowid:str = obj["ipJobProdRowid"]
      """  The character rowid value of the JobProd to validate  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class CheckPreProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckResourcePlants_input:
   """ Required : 
   cjobnum
   """  
   def __init__(self, obj):
      self.cjobnum:str = obj["cjobnum"]
      """  Job number  """  
      pass

class CheckResourcePlants_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.runOutWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckToReschedule_input:
   """ Required : 
   cCompany
   cJobNum
   reqDueDate
   prodQty
   dueDate
   startDate
   jobEngineered
   """  
   def __init__(self, obj):
      self.cCompany:str = obj["cCompany"]
      """  The returned message  """  
      self.cJobNum:str = obj["cJobNum"]
      """  The returned message  """  
      self.reqDueDate:str = obj["reqDueDate"]
      """  The returned message  """  
      self.prodQty:int = obj["prodQty"]
      """  The returned message  """  
      self.dueDate:str = obj["dueDate"]
      """  The returned message  """  
      self.startDate:str = obj["startDate"]
      """  The returned message  """  
      self.jobEngineered:bool = obj["jobEngineered"]
      """  The returned message  """  
      pass

class CheckToReschedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckToScheduleAnUnengineered_input:
   """ Required : 
   cCompany
   cJobNum
   """  
   def __init__(self, obj):
      self.cCompany:str = obj["cCompany"]
      self.cJobNum:str = obj["cJobNum"]
      pass

class CheckToScheduleAnUnengineered_output:
   def __init__(self, obj):
      pass

class CheckTotProdQty_input:
   """ Required : 
   ipJobNum
   ipPartNum
   ipAttributeSetID
   ipQuantity
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number to validate  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number to validate  """  
      self.ipAttributeSetID:int = obj["ipAttributeSetID"]
      """  The attribute set to validate  """  
      self.ipQuantity:int = obj["ipQuantity"]
      """  The quantity of the new Demand being added.  """  
      pass

class CheckTotProdQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckUnfirmJob_input:
   """ Required : 
   ipJobNum
   ipPartNum
   ipAttributeSetID
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number  """  
      self.ipAttributeSetID:int = obj["ipAttributeSetID"]
      """  The attribute set  """  
      pass

class CheckUnfirmJob_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChooseUnlink_input:
   """ Required : 
   ipJobProdRowid
   """  
   def __init__(self, obj):
      self.ipJobProdRowid:str = obj["ipJobProdRowid"]
      """  The character rowid value of the JobProd to unlink  """  
      pass

class ChooseUnlink_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class ClearPurchasingData_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ClearPurchasingData_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CollapseAsm_input:
   """ Required : 
   ipJobNum
   ipAsmSeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      self.ipAsmSeq:int = obj["ipAsmSeq"]
      pass

class CollapseAsm_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class ConfigurationRefreshQty_input:
   """ Required : 
   jobHeadSysRowID
   """  
   def __init__(self, obj):
      self.jobHeadSysRowID:str = obj["jobHeadSysRowID"]
      """  Job Head SysRowID  """  
      pass

class ConfigurationRefreshQty_output:
   def __init__(self, obj):
      pass

class CopyValuesOrderJob_input:
   """ Required : 
   ipJobNum
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number to create the jobprod for  """  
      pass

class CopyValuesOrderJob_output:
   def __init__(self, obj):
      pass

class CreateJobPWB_input:
   """ Required : 
   ipNewJobNum
   ipPartSugRowid
   ipGetDetails
   ipScheduleAll
   ipReleaseAll
   ipTravelerReadyToPrint
   ipBackground
   """  
   def __init__(self, obj):
      self.ipNewJobNum:str = obj["ipNewJobNum"]
      """  The next/new job number to use.  """  
      self.ipPartSugRowid:str = obj["ipPartSugRowid"]
      """  The rowid of the partsug record to create job for.  """  
      self.ipGetDetails:bool = obj["ipGetDetails"]
      """  The flag to get details.  """  
      self.ipScheduleAll:bool = obj["ipScheduleAll"]
      """  The flag to schedule all.  """  
      self.ipReleaseAll:bool = obj["ipReleaseAll"]
      """  The flag to release all.  """  
      self.ipTravelerReadyToPrint:bool = obj["ipTravelerReadyToPrint"]
      """  Indicates if the Traveler can be printed  """  
      self.ipBackground:bool = obj["ipBackground"]
      """  The flag to send the Job's creation to the background process.  """  
      pass

class CreateJobPWB_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opCreatedJobNum:str = obj["parameters"]
      self.opErrMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeleteAll_input:
   """ Required : 
   ipJobHeadRowid
   """  
   def __init__(self, obj):
      self.ipJobHeadRowid:str = obj["ipJobHeadRowid"]
      """  The JobHead rowid of to delete all of the assemblies for  """  
      pass

class DeleteAll_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class DeleteByID_input:
   """ Required : 
   jobNum
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      pass

class DeleteByID_output:
   def __init__(self, obj):
      pass

class DeleteRefDesRange_input:
   """ Required : 
   ipJobNum
   ipAsmSeq
   ipMtlSeq
   ipPrefix
   ipStartNum
   ipEndNum
   ipSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number  """  
      self.ipAsmSeq:int = obj["ipAsmSeq"]
      """  The Job Assembly  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The Job Material Seq  """  
      self.ipPrefix:str = obj["ipPrefix"]
      """  The Prefix to be used to delete Reference Designators  """  
      self.ipStartNum:int = obj["ipStartNum"]
      """  The Starting Number to delete Reference Designators  """  
      self.ipEndNum:int = obj["ipEndNum"]
      """  The Ending Number to delete Reference Designators  """  
      self.ipSuffix:str = obj["ipSuffix"]
      """  The Suffix to be used to delete Reference Designators  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class DeleteRefDesRange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class Erp_Tablesets_AssemblyCostRow:
   def __init__(self, obj):
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.Description:str = obj["Description"]
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      self.EstUnitCost:int = obj["EstUnitCost"]
      self.LLABurdenCost:int = obj["LLABurdenCost"]
      self.LLALaborCost:int = obj["LLALaborCost"]
      self.LLAMaterialCost:int = obj["LLAMaterialCost"]
      self.LLAMtlBurCost:int = obj["LLAMtlBurCost"]
      self.LLAProdHours:int = obj["LLAProdHours"]
      self.LLASetupHours:int = obj["LLASetupHours"]
      self.LLASubcontractCost:int = obj["LLASubcontractCost"]
      self.LLEBurdenCost:int = obj["LLEBurdenCost"]
      self.LLELaborCost:int = obj["LLELaborCost"]
      self.LLEMaterialCost:int = obj["LLEMaterialCost"]
      self.LLEMtlBurCost:int = obj["LLEMtlBurCost"]
      self.LLEProdHours:int = obj["LLEProdHours"]
      self.LLESetupHours:int = obj["LLESetupHours"]
      self.LLESubcontractCost:int = obj["LLESubcontractCost"]
      self.MtlBurCost:int = obj["MtlBurCost"]
      self.PartNum:str = obj["PartNum"]
      self.TLABurdenCost:int = obj["TLABurdenCost"]
      self.TLALaborCost:int = obj["TLALaborCost"]
      self.TLAMaterialCost:int = obj["TLAMaterialCost"]
      self.TLAMtlBurCost:int = obj["TLAMtlBurCost"]
      self.TLAProdHours:int = obj["TLAProdHours"]
      self.TLASetupHours:int = obj["TLASetupHours"]
      self.TLASubcontractCost:int = obj["TLASubcontractCost"]
      self.TLEBurdenCost:int = obj["TLEBurdenCost"]
      self.TLELaborCost:int = obj["TLELaborCost"]
      self.TLEMaterialCost:int = obj["TLEMaterialCost"]
      self.TLEMtlBurCost:int = obj["TLEMtlBurCost"]
      self.TLEProdHours:int = obj["TLEProdHours"]
      self.TLESetupHours:int = obj["TLESetupHours"]
      self.TLESubcontractCost:int = obj["TLESubcontractCost"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JMtlStatFiltersRow:
   def __init__(self, obj):
      self.CutoffDate:str = obj["CutoffDate"]
      self.ExceptionsOnly:bool = obj["ExceptionsOnly"]
      self.JobNum:str = obj["JobNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JMtlStatFiltersTableset:
   def __init__(self, obj):
      self.JMtlStatFilters:list[Erp_Tablesets_JMtlStatFiltersRow] = obj["JMtlStatFilters"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JMtlStatRow:
   def __init__(self, obj):
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the material record within a specific Job/Assembly.  """  
      self.PartNum:str = obj["PartNum"]
      """  The part number.  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Requested date for material.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required quantity per end item.  """  
      self.OutstandingQty:int = obj["OutstandingQty"]
      """  RequiredQty - IssuedQty.  """  
      self.OnHandQty:int = obj["OnHandQty"]
      """  Part total onhand qty.  """  
      self.WIPQty:int = obj["WIPQty"]
      """  Part total WIP quantity.  """  
      self.AvailableQty:int = obj["AvailableQty"]
      """  Part total available quantity.  """  
      self.Source:str = obj["Source"]
      """  Source for the associated JobMtl, either Vendor or Stock.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase Order Number for the FIRST associated PO, if one is available.  """  
      self.DueDate:str = obj["DueDate"]
      """  Due Date from the FIRST associated PO Rel.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.WIPUOM:str = obj["WIPUOM"]
      """  UOM for WIPQty  """  
      self.AvailableUOM:str = obj["AvailableUOM"]
      """  UOM for AvailableQty  """  
      self.OnHandUOM:str = obj["OnHandUOM"]
      """  UOM for OnHandQty  """  
      self.OutstandingUOM:str = obj["OutstandingUOM"]
      """  UOM for OutstandingQty  """  
      self.RequiredUOM:str = obj["RequiredUOM"]
      """  UOM for RequiredQty  """  
      self.AllocatedUOM:str = obj["AllocatedUOM"]
      self.AttrClassID:str = obj["AttrClassID"]
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  AttributeSetID  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the part revision. Default from the PartRev.RevisionNum field.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JMtlStatTableset:
   def __init__(self, obj):
      self.JMtlStat:list[Erp_Tablesets_JMtlStatRow] = obj["JMtlStat"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JbAppendTableset:
   def __init__(self, obj):
      self.JbMtlApp:list[Erp_Tablesets_JbMtlAppRow] = obj["JbMtlApp"]
      self.JbOprApp:list[Erp_Tablesets_JbOprAppRow] = obj["JbOprApp"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JbMtlAppRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  """  
      self.Description:str = obj["Description"]
      """  A description of the material.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Quantity per parent.  Field Service was EstQty in FSCallMt.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  """  
      self.IUM:str = obj["IUM"]
      """  Internal unit of measure.  The unit used to measure the material.  """  
      self.LeadTime:int = obj["LeadTime"]
      """   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.

When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.

It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Material.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  The warehouse that the material is allocated against.  """  
      self.SalvagePartNum:str = obj["SalvagePartNum"]
      """  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  """  
      self.SalvageDescription:str = obj["SalvageDescription"]
      """  Description of Salvageable material.  Use Part.Description for a default.  """  
      self.SalvageQtyPer:int = obj["SalvageQtyPer"]
      """  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  """  
      self.SalvageUM:str = obj["SalvageUM"]
      """  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  """  
      self.SalvageMtlBurRate:int = obj["SalvageMtlBurRate"]
      """  The salvage material burden rate for this Job Material.  """  
      self.SalvageUnitCredit:int = obj["SalvageUnitCredit"]
      """  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageEstMtlBurUnitCredit:int = obj["SalvageEstMtlBurUnitCredit"]
      """  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageQtyToDate:int = obj["SalvageQtyToDate"]
      """  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  """  
      self.SalvageCredit:int = obj["SalvageCredit"]
      """  Total salvage credit to date.  A summary of salvage receipt transactions.  """  
      self.SalvageMtlBurCredit:int = obj["SalvageMtlBurCredit"]
      """  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  """  
      self.MfgComment:str = obj["MfgComment"]
      """   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.

View as editor widget.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  """  
      self.BuyIt:bool = obj["BuyIt"]
      """  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  """  
      self.Ordered:bool = obj["Ordered"]
      """  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  """  
      self.PurComment:str = obj["PurComment"]
      """   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.

View as editor widget.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """   Indicates if this material will be backflushed.

Note: this field is defaulted from Part.BackFlush

Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  """  
      self.EstScrap:int = obj["EstScrap"]
      """  Estimated Scrap.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  """  
      self.FixedQty:bool = obj["FixedQty"]
      """  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  """  
      self.FindNum:str = obj["FindNum"]
      """  Characters used on the drawing to show where material is used.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobMtl is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  """  
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      """  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.SalvageMtlCredit:int = obj["SalvageMtlCredit"]
      """  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageLbrCredit:int = obj["SalvageLbrCredit"]
      """  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageBurCredit:int = obj["SalvageBurCredit"]
      """  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageSubCredit:int = obj["SalvageSubCredit"]
      """  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.APSAddResType:str = obj["APSAddResType"]
      """   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.

'I' to ignore in eScheduler

'M' to treat at Material in eScheduler

'A' to treat as AddResType in eScheduler  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this Material belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this material relates to.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the Material in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the Material in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the material in customers currency.  """  
      self.ResReasonCode:str = obj["ResReasonCode"]
      """  Problem reason code from the reason master table. type Service call.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.Billable:bool = obj["Billable"]
      """  Is this a billable material item.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """  Holds the quantity of the item that has been shipped through misc.  shipments  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the Material in Customer currency.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  """  
      self.AddedMtl:bool = obj["AddedMtl"]
      """  This material was added after initial setup of the job  """  
      self.MiscCharge:bool = obj["MiscCharge"]
      """  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  """  
      self.SCMiscCode:str = obj["SCMiscCode"]
      """  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      self.Append:bool = obj["Append"]
      """  Flag to indicate whether to append this material record  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      self.OrigMtlSeq:int = obj["OrigMtlSeq"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.PullAsAsm:bool = obj["PullAsAsm"]
      self.MtlAltMethod:str = obj["MtlAltMethod"]
      """  The alternate method for the MtlPart  """  
      self.AltMethod:str = obj["AltMethod"]
      """  The alternate method for the material.  """  
      self.MtlRevisionNum:str = obj["MtlRevisionNum"]
      """  The revision number for the MtlPartNum.  """  
      self.LinkGroupSeq:str = obj["LinkGroupSeq"]
      """  Group Sequence used during Job Entry Append Details.  This field is used to associate materials to operations.  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JbOprAppRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  """  
      self.OpComplete:bool = obj["OpComplete"]
      """   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.

Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.

This field is also set by PO receipt entry "issue complete" for subcontract operations.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.OpCode:str = obj["OpCode"]
      """  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  """  
      self.OpStdID:str = obj["OpStdID"]
      """   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.

Valid for "inside operations" only.  """  
      self.EstSetHours:int = obj["EstSetHours"]
      """  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  """  
      self.EstProdHours:int = obj["EstProdHours"]
      """   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.

FORMULAS:

If StdFormat = "HR" then EstProdHours = ProdStandard. 

If StdFormat = "PH" then (JobOper.RunQty / Std).

If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.

If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.

If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.

If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.

If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  """  
      self.ProdStandard:int = obj["ProdStandard"]
      """   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.

NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  """  
      self.StdFormat:str = obj["StdFormat"]
      """   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;

"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,

"PM" - Pieces/Minute, "OH" - Operations/Hour,

"OM"  - Operations/minute, HR - Fixed Hours.  """  
      self.StdBasis:str = obj["StdBasis"]
      """   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.

This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  """  
      self.OpsPerPart:int = obj["OpsPerPart"]
      """  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Production Quantity per one of the Parent Item.  """  
      self.QueStartDate:str = obj["QueStartDate"]
      """  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.QueStartHour:int = obj["QueStartHour"]
      """  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.StartDate:str = obj["StartDate"]
      """  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.MoveDueDate:str = obj["MoveDueDate"]
      """  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.MoveDueHour:int = obj["MoveDueHour"]
      """  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.ProdLabRate:int = obj["ProdLabRate"]
      """  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  """  
      self.SetupLabRate:int = obj["SetupLabRate"]
      """  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  """  
      self.ProdBurRate:int = obj["ProdBurRate"]
      """  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  """  
      self.SetupBurRate:int = obj["SetupBurRate"]
      """  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  """  
      self.AddedOper:bool = obj["AddedOper"]
      """  This indicates if this is an "added operation". An added operation is one that was not planned on.  """  
      self.Machines:int = obj["Machines"]
      """  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  """  
      self.SetUpCrewSize:int = obj["SetUpCrewSize"]
      """  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  """  
      self.ProdCrewSize:int = obj["ProdCrewSize"]
      """  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  """  
      self.ProdComplete:bool = obj["ProdComplete"]
      """  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  """  
      self.SetupComplete:bool = obj["SetupComplete"]
      """  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  """  
      self.ActProdHours:int = obj["ActProdHours"]
      """  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  """  
      self.ActProdRwkHours:int = obj["ActProdRwkHours"]
      """  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.ActSetupHours:int = obj["ActSetupHours"]
      """  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  """  
      self.ActSetupRwkHours:int = obj["ActSetupRwkHours"]
      """  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.

This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)

For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  """  
      self.SetupPctComplete:int = obj["SetupPctComplete"]
      """  Setup function percent complete.  Maintained via labor entry.  """  
      self.EstScrap:int = obj["EstScrap"]
      """  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  """  
      self.SubContract:bool = obj["SubContract"]
      """  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  """  
      self.IUM:str = obj["IUM"]
      """  Inventory UOM  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  """  
      self.DaysOut:int = obj["DaysOut"]
      """  Hours required is calculated as days * 8.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  """  
      self.Description:str = obj["Description"]
      """  Description used only for subcontract operations  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job operation comments.  """  
      self.SchedRelation:str = obj["SchedRelation"]
      """   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.

A "SS" can start when the preceding operation starts.

A "FS" starts when the preceding operation is finished.

A "FF" can finish when the preceding operation finishes.

These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.

A "FF" finishes when the preceding operation is finished.  """  
      self.RunQty:int = obj["RunQty"]
      """   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.

This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIMachines:int = obj["WIMachines"]
      """  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  """  
      self.WIQueStartDate:str = obj["WIQueStartDate"]
      """  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIQueStartHour:int = obj["WIQueStartHour"]
      """  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.WIMoveDueDate:str = obj["WIMoveDueDate"]
      """  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIMoveDueHour:int = obj["WIMoveDueHour"]
      """  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIHoursPerMachine:int = obj["WIHoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  """  
      self.WILoadDate:str = obj["WILoadDate"]
      """  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  """  
      self.WILoadHour:int = obj["WILoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  """  
      self.ActBurCost:int = obj["ActBurCost"]
      """  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  """  
      self.ActLabCost:int = obj["ActLabCost"]
      """   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.

FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  """  
      self.ReworkBurCost:int = obj["ReworkBurCost"]
      """  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  """  
      self.ReworkLabCost:int = obj["ReworkLabCost"]
      """  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).

Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  """  
      self.HoursPerMachine:int = obj["HoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  """  
      self.LoadDate:str = obj["LoadDate"]
      """   Date at which the operations current outstanding load starts at.

Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  """  
      self.LoadHour:int = obj["LoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  """  
      self.ReloadNum:int = obj["ReloadNum"]
      """  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobOper is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  """  
      self.EstSetHoursPerMch:int = obj["EstSetHoursPerMch"]
      """   The estimated set up hours per machine.

Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """   Part Revision number.

Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  """  
      self.AutoReceiptDate:str = obj["AutoReceiptDate"]
      """  Currently not used. Prep for future development.  """  
      self.LastLaborDate:str = obj["LastLaborDate"]
      """  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this operation belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this operation relates to.  """  
      self.LaborRate:int = obj["LaborRate"]
      """  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  """  
      self.DocLaborRate:int = obj["DocLaborRate"]
      """  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  """  
      self.DocBillableLaborRate:int = obj["DocBillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  """  
      self.Billable:bool = obj["Billable"]
      """  FS - Is this a billable operation.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the subcontract in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the subcontract in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the subcontract in customers currency.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the for the Subcontract in Customer currency.  """  
      self.LaborEntryMethod:str = obj["LaborEntryMethod"]
      """  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.FAQty:int = obj["FAQty"]
      """  The quantity requested for first article inspection.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.SetupGroup:str = obj["SetupGroup"]
      """  Used to group operation to save on setups.  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.PrimarySetupOpDtl:int = obj["PrimarySetupOpDtl"]
      """   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  """  
      self.PrimaryProdOpDtl:int = obj["PrimaryProdOpDtl"]
      """   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.QtyPerCycle:int = obj["QtyPerCycle"]
      """  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  """  
      self.WIWCCode:str = obj["WIWCCode"]
      self.APSPrepOp:int = obj["APSPrepOp"]
      self.APSNextOp:int = obj["APSNextOp"]
      self.APSAltOp:int = obj["APSAltOp"]
      self.APSSpecificResource:str = obj["APSSpecificResource"]
      self.APSCycleTime:int = obj["APSCycleTime"]
      self.APSConstantTime:int = obj["APSConstantTime"]
      self.APSSetupGroup:int = obj["APSSetupGroup"]
      self.APSMakeFactor:int = obj["APSMakeFactor"]
      self.APSContainerSize:int = obj["APSContainerSize"]
      self.APSSchedulerName:str = obj["APSSchedulerName"]
      self.APSMaxLength:int = obj["APSMaxLength"]
      self.APSTransferTime:int = obj["APSTransferTime"]
      self.APSEffectiveness:int = obj["APSEffectiveness"]
      self.APSOperationClass:str = obj["APSOperationClass"]
      self.APSAuxResource:str = obj["APSAuxResource"]
      self.APSAddResource:str = obj["APSAddResource"]
      self.Append:bool = obj["Append"]
      """  Indicates whether to append this operation  """  
      self.AppendedOprSeq:int = obj["AppendedOprSeq"]
      """  The new operation sequence (for related operations)  """  
      self.FinalOperation:bool = obj["FinalOperation"]
      """  Indicates if final operation  """  
      self.AutoReceive:bool = obj["AutoReceive"]
      self.ResourceGrpID:str = obj["ResourceGrpID"]
      self.ParentPartNum:str = obj["ParentPartNum"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Job Oper Alternate Method.  """  
      self.TargetAsmSeq:int = obj["TargetAsmSeq"]
      """  Target Assembly Sequence used during Job Entry Append Details.  """  
      self.TargetOprSeq:int = obj["TargetOprSeq"]
      """  Target Assembly Sequence used during Job Entry Append Details.  """  
      self.GroupSeq:str = obj["GroupSeq"]
      """  Group Sequence used during Job Entry Append Details.  This field is used to associate materials to operations.  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmRefDesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RefDes:str = obj["RefDes"]
      """  Identifier of Reference Designator  """  
      self.RefDesSeq:int = obj["RefDesSeq"]
      """  Unique identifies the reference designator with the material sequence.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Side:str = obj["Side"]
      """  Free form side location. (Top, Bottom, Both, Level, etc)  """  
      self.XLocation:int = obj["XLocation"]
      """  X Coordinate of the reference designator  """  
      self.YLocation:int = obj["YLocation"]
      """  Y Coordinate of the reference designator  """  
      self.ZLocation:int = obj["ZLocation"]
      """  Z Coordinate of the reference designator  """  
      self.Rotation:int = obj["Rotation"]
      """  Rotation of the reference designator. Max value = 360.000  """  
      self.Description:str = obj["Description"]
      """  Designator Description  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobAsmblInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  Defaulted from Part Master Substances. When true then weight is disregarded in compliance roll-up.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PartNum:str = obj["PartNum"]
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.RollupType:str = obj["RollupType"]
      """  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  """  
      self.Compliance:str = obj["Compliance"]
      """  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.ComplianceDate:str = obj["ComplianceDate"]
      """  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.LastRollUp:str = obj["LastRollUp"]
      """  Set after compliance roll-up  """  
      self.BuiltCompliance:str = obj["BuiltCompliance"]
      """  Displays one of the built compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.BuiltComplianceDate:str = obj["BuiltComplianceDate"]
      """  Set when Manual flag is checked or after built compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.BuiltLastRollUp:str = obj["BuiltLastRollUp"]
      """  Set after built compliance roll-up  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.EnableRollUpType:bool = obj["EnableRollUpType"]
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAsmblRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if the Job is complete.  This is a mirror image of JobHead.JobComplete.  Not directly maintainable.  When Job is complete, then all assembly records are also marked complete.  This is used to make database access to open assembly records more efficient.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number for this assembly.  Cannot be blank.  Does not have to be valid in the Part master file.  """  
      self.Description:str = obj["Description"]
      """  Description for the Part on the assembly record.  This cannot be blank.  Use Part.Description as default if a valid Part record exists.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the assembly.  An optional field.  Defaults from the most current PartRev.RevisionNum.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  The production quantity required for this assembly per one of it's parent part.  """  
      self.IUM:str = obj["IUM"]
      """  The internal unit of measure for this assembly.  Use the Part.IUM as a default.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """   This is how many of the assemblies are required to produce the END ITEM.  This is a calculated field.  Calculated as the (( Parents RequiredQty - Parents PullQty) X QtyPer) + OverRunQty.

This field needs to be refreshed whenever a change is made to the production quantity in any of its parents or when its QtyPer, or Overrun fields are changed. The refresh may also occur if the structure of the assemblies is changed.

The production quantity for the assembly which will drive raw material requirements and estimated production times can be determined by ( RequiredQty - PullQty).  """  
      self.PullQty:int = obj["PullQty"]
      """  This indicates a quantity that will be pulled from inventory for this assembly instead of being manufactured. This is a fixed quantity and is not affected by  QtyPer type changes. If this a valid Part, then it must update the PartWhse.AllocQty.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  This is the warehouse that the material is allocated against.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Assembly.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  The estimated unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  The estimated Mtl burden unit cost for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  """  
      self.OverRunQty:int = obj["OverRunQty"]
      """  This value indicates a quantity that is planned to be overrun and put into inventory. This is kept as a separate field so that is does not distort the BOM requirement relationships. This increases the total production quantity for the assembly.  This is a FIXED quantity and is not affected by structure or qty/per type changes.  """  
      self.StartDate:str = obj["StartDate"]
      """  Scheduled start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process.  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  """  
      self.DueDate:str = obj["DueDate"]
      """  The scheduled due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the  "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  """  
      self.Parent:int = obj["Parent"]
      """  Sequence number of the Parent Assembly.  """  
      self.PriorPeer:int = obj["PriorPeer"]
      """   The  sequence number of the prior assembly that is on the same level as this assembly.  This  is known as a PriorPeer assembly.  This is automatically maintained by the maintenance programs.

The logic is to find an assembly where the Parent is the same and the NextPeer is -1.  Then NextPeer of that assembly gets updated with this assemblies sequence number and this assembly gets its PriorPeer field updated with the sequence number from the assembly which was found.  """  
      self.NextPeer:int = obj["NextPeer"]
      """   The sequence number of the Next Assembly on the same level as this assembly.  This is known as a NextPeer assembly.  Automatically maintained by the maintenance programs.

The logic is to find an assembly where the Parent is the same and the PriorPeer is -1.  Then the PriorPeer of that assembly is updated with this assemblies sequence number and then this assemblies NextPeer gets updated with the sequence number from the assembly that was found.  """  
      self.Child:int = obj["Child"]
      """  Sequence number of this assemblies very first subassembly.  This is known as the Child assembly.  Automatically maintained by the maintenance programs.  The logic is to find the Parent assembly record and if its child is -1, update it with this assemblies sequence number.  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date, of this component that was issued from stock.  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total material burden cost to date, of this component that was issued from stock.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions that were issued to meet this assemblies PullQty requirements.  This is not directly maintainable.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Optional field for Engineering Drawing Number.  Defaulted from BomHead.DrawNum during methods pull functions.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if the pull quantity has been issued complete.  If "yes" then this record is NOT part of the PartWhse.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job Assembly comments.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if this assembly is to be included in the browse of assemblies in the  "get details" function.  The user can use this option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly, it just keeps it out of the browse.  """  
      self.BomSequence:int = obj["BomSequence"]
      """  An internally system assigned integer which is used as part of an index to organize the records into a Bill of Material fashion sequence.  """  
      self.BomLevel:int = obj["BomLevel"]
      """  An internally system assigned integer which represents the "Level of Indention" of the assembly in reference to the Bill of Material structure.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  Scheduled "What If" start date for the assembly (including queue time).  This is not user maintainable.  It is updated by the scheduling process  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If  "Hour offset from the beginning of the work day" when this assembly is scheduled to begin (including queue time).  Scheduling uses the StartDate and StartHour of the parent assembly as the beginning Date/Hour when Backward scheduling subassemblies.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  The scheduled "What-If" due date for the assembly (including move time).  Not user maintainable, updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this assembly is scheduled to end (including move time).  """  
      self.TLALaborCost:int = obj["TLALaborCost"]
      """  This Level Actual Labor Cost.  """  
      self.TLABurdenCost:int = obj["TLABurdenCost"]
      """  This Level Actual Burden Cost.  """  
      self.TLAMaterialCost:int = obj["TLAMaterialCost"]
      """  This Level Actual Material Cost.  """  
      self.TLASubcontractCost:int = obj["TLASubcontractCost"]
      """  This Level Actual Subcontract Cost.  """  
      self.TLAMtlBurCost:int = obj["TLAMtlBurCost"]
      """  This Level Actual Material Burden Cost.  """  
      self.TLASetupHours:int = obj["TLASetupHours"]
      """  This Level Actual Setup Hours.  """  
      self.TLAProdHours:int = obj["TLAProdHours"]
      """  This Level Actual Production Hours.  """  
      self.TLELaborCost:int = obj["TLELaborCost"]
      """  This Level Estimated Labor Cost.  """  
      self.TLEBurdenCost:int = obj["TLEBurdenCost"]
      """  This Level Estimated Burden Cost.  """  
      self.TLEMaterialCost:int = obj["TLEMaterialCost"]
      """  This Level Estimated Material Cost.  """  
      self.TLESubcontractCost:int = obj["TLESubcontractCost"]
      """  This Level Estimated Subcontract Cost.  """  
      self.TLEMtlBurCost:int = obj["TLEMtlBurCost"]
      """  This Level Estimated Material Burden Cost.  """  
      self.TLESetupHours:int = obj["TLESetupHours"]
      """  This Level Estimated Setup Hours.  """  
      self.TLEProdHours:int = obj["TLEProdHours"]
      """  This Level Estimated Production Hours.  """  
      self.LLALaborCost:int = obj["LLALaborCost"]
      """  Lower Level Actual Labor Cost.  """  
      self.LLABurdenCost:int = obj["LLABurdenCost"]
      """  Lower Level Burden Labor Cost.  """  
      self.LLAMaterialCost:int = obj["LLAMaterialCost"]
      """  Lower Level Actual Material Cost.  """  
      self.LLASubcontractCost:int = obj["LLASubcontractCost"]
      """  Lower Level Actual Subcontractor Cost.  """  
      self.LLAMtlBurCost:int = obj["LLAMtlBurCost"]
      """  Lower Level Actual Material Burden Cost.  """  
      self.LLASetupHours:int = obj["LLASetupHours"]
      """  Lower Level Actual Setup Hours.  """  
      self.LLAProdHours:int = obj["LLAProdHours"]
      """  Lower Level Actual Production Hours.  """  
      self.LLELaborCost:int = obj["LLELaborCost"]
      """  Lower Level Estimated Labor Cost.  """  
      self.LLEBurdenCost:int = obj["LLEBurdenCost"]
      """  Lower Level Estimated Burden Cost.  """  
      self.LLEMaterialCost:int = obj["LLEMaterialCost"]
      """  Lower Level Estimated Material Cost.  """  
      self.LLESubcontractCost:int = obj["LLESubcontractCost"]
      """  Lower Level Estimated Subcontract Cost.  """  
      self.LLEMtlBurCost:int = obj["LLEMtlBurCost"]
      """  Lower Level Estimated Material Burden Cost.  """  
      self.LLESetupHours:int = obj["LLESetupHours"]
      """  Lower Level Estimated Setup Hours.  """  
      self.LLEProdHours:int = obj["LLEProdHours"]
      """  Lower Level Estimated Production Hours.  """  
      self.AutoRecOpr:int = obj["AutoRecOpr"]
      """   The operation number (JobOper.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.

This field is not directly maintainable.  Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  """  
      self.FinalOpr:int = obj["FinalOpr"]
      """   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.

This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  """  
      self.FindNum:str = obj["FindNum"]
      """  FUTURE IMPLEMENTATION - Characters used on the parent assembly drawing to show where assembly  is used.  """  
      self.ReceivedToStock:int = obj["ReceivedToStock"]
      """  Total received to stock.  This pertains receiving an OverRun quantity.  Used to update the PartDtl file for expected production quantity.  PartDtl is OverRun - ReceivedToStock.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this assembly material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified..  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """   An assembly record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.

It can be left as zero meaning that this assembly is required at the very beginning of the production job.  The related operation is also used to calculate scheduled start date.  """  
      self.TLAMaterialLabCost:int = obj["TLAMaterialLabCost"]
      """  This Level Actual Material Labor Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialLabCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialMtlCost:int = obj["TLAMaterialMtlCost"]
      """  This Level Actual Issued Material Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialMtlCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialSubCost:int = obj["TLAMaterialSubCost"]
      """  This Level Actual Material Subcontract Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialSubCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.TLAMaterialBurCost:int = obj["TLAMaterialBurCost"]
      """  This Level Actual Material Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for this level (independent of TLAMaterialCost). Otherwise, TLAMaterialBurCost is one of the component costs that makes up the TLAMaterialCost (i.e. TLAMaterialCost = TLAMaterialLabCost + TLAMaterialMtlCost + TLAMaterialSubCost + TLAMaterialBurCost).  """  
      self.LLAMaterialLabCost:int = obj["LLAMaterialLabCost"]
      """  Lower Level Actual Material Labor Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialLabCost is the Total Labor costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialLabCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialMtlCost:int = obj["LLAMaterialMtlCost"]
      """  Lower Level Actual Material Material Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlCost is the Total Material costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialMtlCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialSubCost:int = obj["LLAMaterialSubCost"]
      """  Lower Level Actual Material Subcontract Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialSubCost is the Total Subcontract costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialSubCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.LLAMaterialBurCost:int = obj["LLAMaterialBurCost"]
      """  Lower Level Actual Material Burden Cost. Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialBurCost is the Total Burden costs of all manufactured parts issued as material for the lower level (independent of LLAMaterialCost). Otherwise, LLAMaterialBurCost is one of the component costs that makes up the LLAMaterialCost (i.e. LLAMaterialCost = LLAMaterialLabCost + LLAMaterialMtlCost + LLAMaterialSubCost + LLAMaterialBurCost).  """  
      self.TotalMtlMtlCost:int = obj["TotalMtlMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.TotalMtlLabCost:int = obj["TotalMtlLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.TotalMtlSubCost:int = obj["TotalMtlSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.TotalMtlBurCost:int = obj["TotalMtlBurCost"]
      """  Total Burden cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this assembly belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this assembly relates to.  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.OrigRequiredQty:int = obj["OrigRequiredQty"]
      """  This field will be set to the value of the JobAsmbl.RequiredQty at the time the JobHead.Engineered flag is set to true.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.TLAMaterialMtlBurCost:int = obj["TLAMaterialMtlBurCost"]
      """  This Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then TLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for this level.  Otherwise, TLAMaterialMtlBurCost may be populated but is not included in the calculation of TLAMaterialCost.  """  
      self.LLAMaterialMtlBurCost:int = obj["LLAMaterialMtlBurCost"]
      """  Lower Level Actual Material Mtl Burden Cost.  Depending on the setting of JCSyst.SplitMfgCostElements, if set to true then LLAMaterialMtlBurCost is the Total Material Burden costs of all manufactured parts issued as material for the lower level.  Otherwise, LLAMaterialMtlBurCost may be populated but is not included in the calculation of LLAMaterialCost.  """  
      self.TLAMfgCompLabCost:int = obj["TLAMfgCompLabCost"]
      """  This Level Actual Component Labor Cost.  This is the Total Labor costs of all manufactured parts issued as material for this level. Unlike TLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompMtlCost:int = obj["TLAMfgCompMtlCost"]
      """  This Level Actual Component Material Cost.  This is the Total Material costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompSubCost:int = obj["TLAMfgCompSubCost"]
      """  This Level Actual Component Subcontract Cost.  This is the Total Subcontract costs of all manufactured parts issued as material for this level. Unlike TLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompBurCost:int = obj["TLAMfgCompBurCost"]
      """  This Level Actual Component Burden Cost.  This is the Total Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.TLAMfgCompMtlBurCost:int = obj["TLAMfgCompMtlBurCost"]
      """  This Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for this level. Unlike TLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for this assembly.  """  
      self.LLAMfgCompLabCost:int = obj["LLAMfgCompLabCost"]
      """  Lower Level Actual Component Labor Cost. This is the Total Labor costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialLabCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompMtlCost:int = obj["LLAMfgCompMtlCost"]
      """  Lower Level Actual Component Material Cost. This is the Total Material costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompSubCost:int = obj["LLAMfgCompSubCost"]
      """  Lower Level Actual Component Subcontract Cost. This is the Total Subcontract costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialSubCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompBurCost:int = obj["LLAMfgCompBurCost"]
      """  Lower Level Actual Component Burden Cost. This is the Total Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.LLAMfgCompMtlBurCost:int = obj["LLAMfgCompMtlBurCost"]
      """  Lower Level Actual Component Material Burden Cost.  This is the Total Material Burden costs of all manufactured parts issued as material for the lower level. Unlike LLAMaterialMtlBurCost, this field will only store component costs that are from issued Mfg type materials used for the lower assemblies.  """  
      self.Weight:int = obj["Weight"]
      """  Assembly Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Assembly Weight UOM defaulted from Part Master.  """  
      self.OrigMtlSeq:int = obj["OrigMtlSeq"]
      """  Original Material Sequence. Used in the configurator.  """  
      self.OrigRuleTag:str = obj["OrigRuleTag"]
      """  Original Rule Tag. Used in the Configurator.  """  
      self.ValRefDes:bool = obj["ValRefDes"]
      """  Validate Reference Designators.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      """   The estimated material unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      """   The estimated labor unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      """   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      """   The estimated burden unit cost component for the assembly quantity (JobAsmbl.PullQty)  that will be pulled from inventory.  Use the appropriate cost found in the Part file as a default.  That is, select the cost fields based on Part.CostMethod.  Then crossfoot the labor, burden and material into the EstUnitCost field.  This field is a subcomponent of EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurunitCost + EstSubUnitCost.  """  
      self.PlanAsAsm:bool = obj["PlanAsAsm"]
      """  Indicates if the sub-assemby can be spawned off to a different job.  This can occur during the firming up of a job.  """  
      self.PAARef:str = obj["PAARef"]
      """  Plan as assembly reference.  Used to link related subassemblies together when multiple assemblies are created for the same part due to PartSite lot size values.  """  
      self.PAAFirm:bool = obj["PAAFirm"]
      """  Used only on Plan As Assembly records.  Indicates the sub assembly will be split of from the the current job and a separate job for the assembly will be created.  """  
      self.EstScrap:int = obj["EstScrap"]
      """  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.ReqRefDes:int = obj["ReqRefDes"]
      """  Required number of designators  """  
      self.ReassignSNAsm:bool = obj["ReassignSNAsm"]
      """  Reassign Serial Numbers Assembly  """  
      self.TLAODCCost:int = obj["TLAODCCost"]
      """  This Level Actual Other Direct Cost.  """  
      self.AssemblyMatch:str = obj["AssemblyMatch"]
      """  AssemblyMatch  """  
      self.JdfStatus:str = obj["JdfStatus"]
      """  JdfStatus  """  
      self.PressDevice:str = obj["PressDevice"]
      """  PressDevice  """  
      self.DigitalFileName:str = obj["DigitalFileName"]
      """  DigitalFileName  """  
      self.PrepressJobName:str = obj["PrepressJobName"]
      """  PrepressJobName  """  
      self.JdfPrepressAction:str = obj["JdfPrepressAction"]
      """  JdfPrepressAction  """  
      self.SendToPress:bool = obj["SendToPress"]
      """  SendToPress  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.SendToPressInitiator:int = obj["SendToPressInitiator"]
      """  SendToPressInitiator  """  
      self.OperationType:int = obj["OperationType"]
      """  OperationType  """  
      self.SendToPrePress:bool = obj["SendToPrePress"]
      """  SendToPrePress  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PartPlanInfo:str = obj["PartPlanInfo"]
      """  PartPlanInfo  """  
      self.OrigStructTag:str = obj["OrigStructTag"]
      """  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.AvailableQty:int = obj["AvailableQty"]
      """  Calculated Available Quantity  """  
      self.bUseAvailQty:bool = obj["bUseAvailQty"]
      """  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  """  
      self.ChildAssemblySeq:int = obj["ChildAssemblySeq"]
      """  The child assembly sequence field.  The JobAsmbl.Child field value.  The field Child was causing a .net conflict.  """  
      self.DispIUM:str = obj["DispIUM"]
      """  The internal unit of measure for this assembly.  Same as IUM but readOnly  """  
      self.DisplayOrder:int = obj["DisplayOrder"]
      """  The order JobAsmbl records should be displayed.  """  
      self.EnableAsmSplitCosts:bool = obj["EnableAsmSplitCosts"]
      """  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  """  
      self.EnableMtlSalvage:bool = obj["EnableMtlSalvage"]
      self.EnablePurDir:bool = obj["EnablePurDir"]
      self.FirmProcEnable:bool = obj["FirmProcEnable"]
      """  If it's Stocked assembly and PlanAsAsm is true.  """  
      self.FirmProcess:bool = obj["FirmProcess"]
      """  Is used to select stocked Job Assemblies which will be processed by Firming Process. Is available only for .FirmProcEnable = true.  """  
      self.GetCostsFromInventory:bool = obj["GetCostsFromInventory"]
      """  External field for EQSyst GetCostsFromInventory  """  
      self.GetCostsFromTemplate:bool = obj["GetCostsFromTemplate"]
      """  External field to hold JCSyst.GetCostsFromTemplate value  """  
      self.ParentAssemblySeq:int = obj["ParentAssemblySeq"]
      """  The parent assembly sequence field.  The JobAsmbl.Parent field value.  The field Parent was causing a .net conflict.  """  
      self.ParentDescription:str = obj["ParentDescription"]
      """  Parent Description  """  
      self.ParentPartNum:str = obj["ParentPartNum"]
      """  Parent PartNum  """  
      self.ParentRev:str = obj["ParentRev"]
      """  Parent RevisionNum  """  
      self.PartExists:bool = obj["PartExists"]
      """  Internal flag to identify if current Part is an Inventory Part.  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      self.RDEndNum:int = obj["RDEndNum"]
      """  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  """  
      self.RDPrefix:str = obj["RDPrefix"]
      """  The prefix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  """  
      self.RDStartNum:int = obj["RDStartNum"]
      """  This number will be used to create reference designators. This field will be defaulted to ?1?  """  
      self.RDSuffix:str = obj["RDSuffix"]
      """  The suffix will be defaulted from the reference category defined for the assembly. The value on this field will be used to create reference designators.  """  
      self.RelatedOperationDesc:str = obj["RelatedOperationDesc"]
      """  Related Operation Description  """  
      self.ShowWarningBOMResequence:bool = obj["ShowWarningBOMResequence"]
      """  For Internal use ONLY to set a flag calculated from BO to show a warning message to the user when there exists some inconsistences between records on JobAsml table that can cause infinite loop when BOM Resequence.  """  
      self.AddAsmAs:str = obj["AddAsmAs"]
      """  External field used to determine if Add assembly as "Sub"assembly or "Asm"bly  """  
      self.bAvailQty:int = obj["bAvailQty"]
      """  external field used to calculate JobAsmbl.AvailableQty when PullQty changes.  This is needed because of a timing issue with PartQty getting updated too late.  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      self.AttrClassID:str = obj["AttrClassID"]
      self.TLATotalCost:int = obj["TLATotalCost"]
      """  This Level Total Actual Cost (TLAMaterialCost + TLALaborCost + TLABurdenCost + TLASubcontractCost + TLAMtlBurCost)  """  
      self.TLETotalCost:int = obj["TLETotalCost"]
      """  The Level Estimated Total Cost (TLEMaterialCost + TLELaborCost + TLEBurdenCost + TLESubcontractCost + TLEMtlBurCost)  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PlantName:str = obj["PlantName"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobAuditRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  System date when this change was made.  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  System time (seconds since midnight) of when the changes were made.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID who made the changes.  Not maintainable by the user.  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  Used to enter a description of the changes that were made.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DspChangeTime:str = obj["DspChangeTime"]
      """  Formatted display of ChangeTime  """  
      self.BitFlag:int = obj["BitFlag"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobCostsTableset:
   def __init__(self, obj):
      self.AssemblyCost:list[Erp_Tablesets_AssemblyCostRow] = obj["AssemblyCost"]
      self.MaterialCost:list[Erp_Tablesets_MaterialCostRow] = obj["MaterialCost"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JobEntryTableset:
   def __init__(self, obj):
      self.JobHead:list[Erp_Tablesets_JobHeadRow] = obj["JobHead"]
      self.JobHeadAttch:list[Erp_Tablesets_JobHeadAttchRow] = obj["JobHeadAttch"]
      self.JobAsmbl:list[Erp_Tablesets_JobAsmblRow] = obj["JobAsmbl"]
      self.JobAsmblAttch:list[Erp_Tablesets_JobAsmblAttchRow] = obj["JobAsmblAttch"]
      self.JobAsmblInsp:list[Erp_Tablesets_JobAsmblInspRow] = obj["JobAsmblInsp"]
      self.JobMtl:list[Erp_Tablesets_JobMtlRow] = obj["JobMtl"]
      self.JobMtlAttch:list[Erp_Tablesets_JobMtlAttchRow] = obj["JobMtlAttch"]
      self.JobMtlInsp:list[Erp_Tablesets_JobMtlInspRow] = obj["JobMtlInsp"]
      self.JobMtlRefDes:list[Erp_Tablesets_JobMtlRefDesRow] = obj["JobMtlRefDes"]
      self.JobMtlRestriction:list[Erp_Tablesets_JobMtlRestrictionRow] = obj["JobMtlRestriction"]
      self.JobMtlRestrictSubst:list[Erp_Tablesets_JobMtlRestrictSubstRow] = obj["JobMtlRestrictSubst"]
      self.JobOper:list[Erp_Tablesets_JobOperRow] = obj["JobOper"]
      self.JobOperAttch:list[Erp_Tablesets_JobOperAttchRow] = obj["JobOperAttch"]
      self.JobOperAction:list[Erp_Tablesets_JobOperActionRow] = obj["JobOperAction"]
      self.JobOperActionParam:list[Erp_Tablesets_JobOperActionParamRow] = obj["JobOperActionParam"]
      self.JobOperInsp:list[Erp_Tablesets_JobOperInspRow] = obj["JobOperInsp"]
      self.JobOperMachParam:list[Erp_Tablesets_JobOperMachParamRow] = obj["JobOperMachParam"]
      self.JobOpDtl:list[Erp_Tablesets_JobOpDtlRow] = obj["JobOpDtl"]
      self.JobResources:list[Erp_Tablesets_JobResourcesRow] = obj["JobResources"]
      self.JobOperRestriction:list[Erp_Tablesets_JobOperRestrictionRow] = obj["JobOperRestriction"]
      self.JobOperRestrictSubst:list[Erp_Tablesets_JobOperRestrictSubstRow] = obj["JobOperRestrictSubst"]
      self.JobAsmblRestriction:list[Erp_Tablesets_JobAsmblRestrictionRow] = obj["JobAsmblRestriction"]
      self.JobAsmblRestrictSubst:list[Erp_Tablesets_JobAsmblRestrictSubstRow] = obj["JobAsmblRestrictSubst"]
      self.JobAsmRefDes:list[Erp_Tablesets_JobAsmRefDesRow] = obj["JobAsmRefDes"]
      self.JobAudit:list[Erp_Tablesets_JobAuditRow] = obj["JobAudit"]
      self.JobPart:list[Erp_Tablesets_JobPartRow] = obj["JobPart"]
      self.JobProd:list[Erp_Tablesets_JobProdRow] = obj["JobProd"]
      self.JobStage:list[Erp_Tablesets_JobStageRow] = obj["JobStage"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JobHeadAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobHeadListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  Date the Job was closed.  Defaults as the system but can be overridden.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  """  
      self.JobCompletionDate:str = obj["JobCompletionDate"]
      """  The date that production was completed for this Job.  Maintained via Job Completion Processing.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  """  
      self.JobReleased:bool = obj["JobReleased"]
      """  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  """  
      self.JobHeld:bool = obj["JobHeld"]
      """  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  The description of the part that is to be manufactured.  Use the Part.Description as the default.  """  
      self.ProdQty:int = obj["ProdQty"]
      """  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.

See JobPart table for information on end parts of a job.  """  
      self.IUM:str = obj["IUM"]
      """  The unit of measure for the job.  Defaulted from Part.IUM.  """  
      self.StartDate:str = obj["StartDate"]
      """  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.ReqDueDate:str = obj["ReqDueDate"]
      """  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  """  
      self.JobCode:str = obj["JobCode"]
      """  An optional user defined code.  This will be used for report selections and views of job headers.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Contains the quote line number reference. (see QuoteNum )  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job header comments.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.Candidate:bool = obj["Candidate"]
      """   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.

This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  """  
      self.SchedCode:str = obj["SchedCode"]
      """  Scheduling Code.  SchedCode references a record in the SchedPri table.  """  
      self.SchedLocked:bool = obj["SchedLocked"]
      """  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Associates the JobHead with a project in the Project table.  This can be blank.  """  
      self.WIPCleared:bool = obj["WIPCleared"]
      """  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  """  
      self.JobFirm:bool = obj["JobFirm"]
      """  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  """  
      self.PersonList:str = obj["PersonList"]
      """  A LIST-DELIM delimited list of people.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.

Manufacturing suggestions can be filtered by Planner.

Relates to the Person table.  Defaults from the ProdGrup.PersonID.  """  
      self.ProdTeamID:str = obj["ProdTeamID"]
      """  Production Team for the Job.  Associates the JobHead with a ProdTeam.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Production quantity completed.

Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DatePurged:str = obj["DatePurged"]
      """  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  """  
      self.TravelerReadyToPrint:bool = obj["TravelerReadyToPrint"]
      """  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  """  
      self.TravelerLastPrinted:str = obj["TravelerLastPrinted"]
      """  The last date the job traveler was mass printed.  """  
      self.StatusReadyToPrint:bool = obj["StatusReadyToPrint"]
      """  Indicates if the Status can be printed. Print functions are not available if this is = No.  """  
      self.StatusLastPrinted:str = obj["StatusLastPrinted"]
      """  The last date the job status was mass printed.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.JobType:str = obj["JobType"]
      """  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this job.  """  
      self.ProductionYield:bool = obj["ProductionYield"]
      """  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  """  
      self.EquipID:str = obj["EquipID"]
      """   The ID of the Equipment that this "Maintenance Job" is for.

Foreign key component to Equip table.  """  
      self.PlanNum:int = obj["PlanNum"]
      """   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.

Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.

If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  """  
      self.IssueTopicID1:str = obj["IssueTopicID1"]
      """  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PersonIDName:str = obj["PersonIDName"]
      """  PersonIDName  """  
      self.SOExists:bool = obj["SOExists"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      """  Part Description  """  
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      """  Track Dimension  """  
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      """  Track Lots  """  
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      """  Track Serial Num  """  
      self.EquipOEM:str = obj["EquipOEM"]
      self.EquipModel:str = obj["EquipModel"]
      self.EquipTypeID:str = obj["EquipTypeID"]
      self.EquipLocID:str = obj["EquipLocID"]
      self.PMJob:bool = obj["PMJob"]
      """  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  """  
      self.EquipDescription:str = obj["EquipDescription"]
      self.JobTypeName:str = obj["JobTypeName"]
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class  """  
      self.AttrDescription:str = obj["AttrDescription"]
      """  Description of values in set  """  
      self.ShortDescription:str = obj["ShortDescription"]
      """  The Short Description of the Attribute Set which will be visible throughout the system and is to be used in selecting an Attribute Set to go along with the Part  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobHeadListTableset:
   def __init__(self, obj):
      self.JobHeadList:list[Erp_Tablesets_JobHeadListRow] = obj["JobHeadList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_JobHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  A closed Job cannot be accessed for maintenance.  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  Date the Job was closed.  Defaults as the system but can be overridden.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.  A complete job cannot be scheduled.  It can still have cost posted against it.  Maintained via Job Completion processing.  """  
      self.JobCompletionDate:str = obj["JobCompletionDate"]
      """  The date that production was completed for this Job.  Maintained via Job Completion Processing.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Indicates if Engineering is complete for this job.  That is, all departments that need to "check off" on this job before it is actually considered ready to go have done so.  A job must be Engineered before it  can be scheduled.  Non Engineered Jobs are excluded from most reports.  """  
      self.CheckOff1:bool = obj["CheckOff1"]
      """   Optional Job check off number 1.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff2:bool = obj["CheckOff2"]
      """   Optional Job check off number 2.  The label for this field is found in JCSyst. If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff3:bool = obj["CheckOff3"]
      """   Optional Job check off number 3.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff4:bool = obj["CheckOff4"]
      """  Optional Job check off number 4.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff5:bool = obj["CheckOff5"]
      """  Optional Job check off number 5.  The label for this field is found in JCSyst.  If the label field is blank then field should be invisible.

These "check offs" will be used for selecting jobs.  An example would be a "Engineering" or "Purchasing" check off.  """  
      self.JobReleased:bool = obj["JobReleased"]
      """  Indicates if job has been "Released" to production.  Only jobs that are released can have labor posted against them.  Once labor is posted to a Job this flag cannot be changed.  """  
      self.JobHeld:bool = obj["JobHeld"]
      """  Indicates if the Job has been placed on "HOLD".  Currently this field is only used for display purposes.  It may be used later to prevent or provide warnings and messages in appropriate areas such as Shipping, Purchasing, Labor processing, etc.  """  
      self.SchedStatus:str = obj["SchedStatus"]
      """  Scheduling Status Control (R-Required, P-Pending, A-Active, C-Complete).  NOT CURRENTLY IMPLEMENTED.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number.  An optional field.  Defaulted from BomHead.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  The description of the part that is to be manufactured.  Use the Part.Description as the default.  """  
      self.ProdQty:int = obj["ProdQty"]
      """  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.

See JobPart table for information on end parts of a job.  """  
      self.IUM:str = obj["IUM"]
      """  The unit of measure for the job.  Defaulted from Part.IUM.  """  
      self.StartDate:str = obj["StartDate"]
      """  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.ReqDueDate:str = obj["ReqDueDate"]
      """  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  """  
      self.JobCode:str = obj["JobCode"]
      """  An optional user defined code.  This will be used for report selections and views of job headers.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Contains the quote line number reference. (see QuoteNum )  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code.  Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job header comments.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  The default override expense code that will be used for all labor reported against this job.  When this is entered then it will override all over default logic for developing the default G/L expense account in labor entry.  This can be blank or must be valid in the LabExpCd master file.  """  
      self.InCopyList:bool = obj["InCopyList"]
      """  Indicates if the final assembly is to be included in the browse of assemblies in the  "get details"  function.  The user can use to option to keep the "Copy from" list from becoming cluttered with too many assemblies.  This does not prevent the user from copying this assembly it just keeps it out of the browse.  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID.  When not blank it indicates that some or all the operations of this job are in a "What if" scheduling mode.  In this condition the scheduling board prevents other users from modifying any operations on this job until the changes get committed.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  The Scheduled "What If" job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  Scheduled "What If" finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling.  It represents the What-If "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  """  
      self.Candidate:bool = obj["Candidate"]
      """   Indicates if the system considers this  Job as a candidate for the completion process.  Jobs that are marked as JobClosed = No, JobComplete = No and Candidate = Yes can be viewed in the Job Completion/Closing program by selecting the Candidates option.

This field is not directly maintainable.  It is set to based on the value of JobOper.OpComplete of the last operation of the final assembly.  """  
      self.SchedCode:str = obj["SchedCode"]
      """  Scheduling Code.  SchedCode references a record in the SchedPri table.  """  
      self.SchedLocked:bool = obj["SchedLocked"]
      """  If yes the Jobs' schedule is locked, and not affected by the SchedCode.  Locked jobs are allocated (and over-allocated) machine time before any non-locked jobs are scheduled.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Associates the JobHead with a project in the Project table.  This can be blank.  """  
      self.WIPCleared:bool = obj["WIPCleared"]
      """  For closed jobs (JobHead.JobClosed = yes) this indicates if all of the costs on this job have been removed from WIP.  Costs are moved out of WIP during the "Generate WIP transactions" process.  """  
      self.JobFirm:bool = obj["JobFirm"]
      """  A flag which controls whether or not the MRP process can make changes to this job.  MRP can only make changes when JobFirm = No.  """  
      self.PersonList:str = obj["PersonList"]
      """  A LIST-DELIM delimited list of people.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the Production Planner.  This person is responsible for handling the manufacturing suggestions to this job.

Manufacturing suggestions can be filtered by Planner.

Relates to the Person table.  Defaults from the ProdGrup.PersonID.  """  
      self.ProdTeamID:str = obj["ProdTeamID"]
      """  Production Team for the Job.  Associates the JobHead with a ProdTeam.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Production quantity completed.

Updated via JobOper write trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DatePurged:str = obj["DatePurged"]
      """  The date the detail for the Job was purged.  The detail is the LaborDtl, PartTrans, and JobOpMac records associated with the job.  Once details have been purged the job cannot be reopened.  A job must be closed for it to be purged.  """  
      self.TravelerReadyToPrint:bool = obj["TravelerReadyToPrint"]
      """  Indicates if the Traveler can be printed. Print functions are not available if this is = No.  """  
      self.TravelerLastPrinted:str = obj["TravelerLastPrinted"]
      """  The last date the job traveler was mass printed.  """  
      self.StatusReadyToPrint:bool = obj["StatusReadyToPrint"]
      """  Indicates if the Status can be printed. Print functions are not available if this is = No.  """  
      self.StatusLastPrinted:str = obj["StatusLastPrinted"]
      """  The last date the job status was mass printed.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.JobType:str = obj["JobType"]
      """  Describe the type of job this is: MFG = Manufacturing, MNT = Maintenance, PRJ = Project, SRV = Service  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.LockQty:bool = obj["LockQty"]
      """  Indicates that the quantity on this job is locked  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this job.  """  
      self.ProcessMode:str = obj["ProcessMode"]
      """   Values: S(Sequential) or C(Concurrent).

Defaults as S. Must have Advanced Production License to change. Controls how the operations and material requirements are developed. Concurrent jobs are used where the production time is based on the number of machine operations performed and not on the number of parts created. For example, a stamping operation where each cycle of the machine stamps out x number of parts. A further extension of this is that the operation can yield multiple different parts from each cycle of the machine.  Identification of these parts and there associated PPO (parts per operation) is define in the JobPart table.  """  
      self.PlannedActionDate:str = obj["PlannedActionDate"]
      """  The planned date when the job needs to be actioned by the production department to make sure that the job is ready on the planned completion date.  """  
      self.PlannedKitDate:str = obj["PlannedKitDate"]
      """  The date that the job needs to be ready for the warehouse to kit to make sure that it is ready for the job start date.  """  
      self.MSPTaskID:str = obj["MSPTaskID"]
      """  The task ID that is returned from Microsoft Project.  """  
      self.MSPPredecessor:str = obj["MSPPredecessor"]
      """  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back an alpha numeric string.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.ProductionYield:bool = obj["ProductionYield"]
      """  Flag to indicate whether operations for this job will use the production yield features set up in OpMaster for the operation code. Defaulted from Site.ProductionYield  """  
      self.OrigProdQty:int = obj["OrigProdQty"]
      """  This field will be set to the value of the JobHead.ProdQty at the time the JobHead.Engineered flag is set to true.  """  
      self.PreserveOrigQtys:bool = obj["PreserveOrigQtys"]
      """  This field is used to indicate whether the original quantities should be reset in the job header and its assemblies at JobHead update if JobHead.JobEngineered has been changed from false to true. Generally the orig qtys will be reset, unless this flag is set to true because the user was asked if they wanted to reset the orig qtys and they answered yes.  """  
      self.NoAutoCompletion:bool = obj["NoAutoCompletion"]
      """  If set to yes then exclude this job from the Job Auto-Completion process. Not directly maintainable.  """  
      self.NoAutoClosing:bool = obj["NoAutoClosing"]
      """  No Auto Closing. If set to yes then exclude this job from the Job Auto-Closing process.  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  The user that created this Job.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  The date that this Job was created.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of PDM parts.  """  
      self.ExportRequested:str = obj["ExportRequested"]
      """  This field is used to store a code that represents the external system that the Job is being exported to (ex. PDM).  This field is short lived, it is used to instruct the write trigger logic to create IM records for certain types of external systems.  After creating the IM records, the trigger logic should immediately clear the field.  """  
      self.SplitMfgCostElements:bool = obj["SplitMfgCostElements"]
      """  Flag to indicate how to split the manufacturing cost elements when a manufactured material is issued to the job.  If flag is set to true, the cost of the issued material will be split into individual manufacturing cost elements. If set to false, the cost of the issued material is added to the manufacturing material cost element only.  This is defaulted from the JCSyst.SplitMfgCostElements and is not user maintainable.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Cross Reference Part Num. Used for alternate serial mask support.  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """   Cross Reference Part Type. Used for alternate serial mask support.



I=Internal Cross Reference / C = Customer Part  """  
      self.XRefCustNum:int = obj["XRefCustNum"]
      """  Customer Number XRefPartNum is related to if it is a customer part. Used for alternate serial number mask support.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.RoughCutScheduled:bool = obj["RoughCutScheduled"]
      """  Indicates if the job was rough cut scheduled.  """  
      self.EquipID:str = obj["EquipID"]
      """   The ID of the Equipment that this "Maintenance Job" is for.

Foreign key component to Equip table.  """  
      self.PlanNum:int = obj["PlanNum"]
      """   Preventive Maintenance Plan Number that this "Maintenance Job" is for. Foreign key component to EquipPlan table.

Note: A Maintenance Job does not have to be for a Preventive Maintenance plan, in which case this is zero.

If time based plan, then the closing process will update the EquipPlan.NextDate. Therefore, the Job must know the EquipID and PlanNum in order to do this.  """  
      self.MaintPriority:str = obj["MaintPriority"]
      """  Maintenance Job Priority. Valid values: H - High, M - Medium, L - Low.  M is default or if created from a Maint Request then MaintReq.Priority is used as default.  """  
      self.SplitJob:bool = obj["SplitJob"]
      """  Internal field indicating this job was created by a job split.  Assigned true when a job has been split due to start minimum lot size quantity processing.  """  
      self.NumberSource:bool = obj["NumberSource"]
      """  Indicates the type of prefix which is used for create jobs in MRP  """  
      self.CloseMeterReading:int = obj["CloseMeterReading"]
      """  The Meter Reading value entered at time of Job Closing.  """  
      self.IssueTopicID1:str = obj["IssueTopicID1"]
      """  Maintenance Issue Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintIssue = Yes  """  
      self.IssueTopicID2:str = obj["IssueTopicID2"]
      """  Maintenance Issue Topic 2. A sub-topic of IssueTopicID1.  """  
      self.IssueTopicID3:str = obj["IssueTopicID3"]
      """  Maintenance Issue Topic 3. A sub-topic of IssueTopicID2.  """  
      self.IssueTopicID4:str = obj["IssueTopicID4"]
      """  Maintenance Issue Topic 4. A sub-topic of IssueTopicID3.  """  
      self.IssueTopicID5:str = obj["IssueTopicID5"]
      """  Maintenance Issue Topic 5. A sub-topic of IssueTopicID4.  """  
      self.IssueTopicID6:str = obj["IssueTopicID6"]
      """  Maintenance Issue Topic 6. A sub-topic of IssueTopicID5.  """  
      self.IssueTopicID7:str = obj["IssueTopicID7"]
      """  Maintenance Issue Topic 7. A sub-topic of IssueTopicID6.  """  
      self.IssueTopicID8:str = obj["IssueTopicID8"]
      """  Maintenance Issue Topic 8. A sub-topic of IssueTopicID7.  """  
      self.IssueTopicID9:str = obj["IssueTopicID9"]
      """  Maintenance Issue Topic 9. A sub-topic of IssueTopicID8.  """  
      self.IssueTopicID10:str = obj["IssueTopicID10"]
      """  Maintenance Issue Topic 10. A sub-topic of IssueTopicID9.  """  
      self.IssueTopics:str = obj["IssueTopics"]
      """  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  """  
      self.ResTopicID1:str = obj["ResTopicID1"]
      """  Maintenance Resolution Topic 1.  Pertinent to maint jobs only. (JobType = "MNT") Foreign Key to HDTopic table.  Must be a top level topic (HDTopic.TopLevel = Yes) and HDTopic.MaintRes = Yes  """  
      self.ResTopicID2:str = obj["ResTopicID2"]
      """  Maintenance Resolution Topic 2. A sub-topic of ResTopicID1.  """  
      self.ResTopicID3:str = obj["ResTopicID3"]
      """  Maintenace  Resolution Topic 3. A sub-topic of ResTopicID2.  """  
      self.ResTopicID4:str = obj["ResTopicID4"]
      """  Maintenance Resolution Topic 4. A sub-topic of ResTopicID3.  """  
      self.ResTopicID5:str = obj["ResTopicID5"]
      """  Maintenance Resolution Topic 5. A sub-topic of ResTopicID4.  """  
      self.ResTopicID6:str = obj["ResTopicID6"]
      """  Maintenance Resolution Topic 6. A sub-topic of ResTopicID5.  """  
      self.ResTopicID7:str = obj["ResTopicID7"]
      """  Maintenance Resolution Topic 7. A sub-topic of ResTopicID6.  """  
      self.ResTopicID8:str = obj["ResTopicID8"]
      """  Maintenance Resolution Topic 8. A sub-topic of ResTopicID7.  """  
      self.ResTopicID9:str = obj["ResTopicID9"]
      """  Maintenance Resolution Topic 9. A sub-topic of ResTopicID8.  """  
      self.ResTopicID10:str = obj["ResTopicID10"]
      """  Maintenance Resolution Topic 10. A sub-topic of ResTopicID9.  """  
      self.ResTopics:str = obj["ResTopics"]
      """  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  """  
      self.Forward:bool = obj["Forward"]
      """  It is updated by Calculate Global Scheduling Order process, it indicates if a job has to be scheduled Backwards or Forwards by Global Scheduling Process and it can be modified by Adjust Scheduling Global Order  """  
      self.SchedSeq:int = obj["SchedSeq"]
      """  This is the sequence number used to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  """  
      self.PAAExists:bool = obj["PAAExists"]
      """  Indicates if at least one subassembly contains a part that is plan as assembly.  It does not indicate if the assembly is marked as PAA - only that the part is PAA in the BOM.  Used in MRP when determining if a job can be reused.  """  
      self.DtlsWithinLeadTime:bool = obj["DtlsWithinLeadTime"]
      """  Indicates if the job structure (BOM) was created inside or outside of the mfg lead time for the job part.  Used in MRP when determining if a job can be reused.  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.RoughCut:bool = obj["RoughCut"]
      """  It indicates that the shop load for that job was not generated (shopload table). The load in shopload can be recreated by Save Resource Load process  """  
      self.PlanGUID:str = obj["PlanGUID"]
      """  PlanGUID  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.LastChangedBy:str = obj["LastChangedBy"]
      """  LastChangedBy  """  
      self.LastChangedOn:str = obj["LastChangedOn"]
      """  LastChangedOn  """  
      self.EPMExportLevel:int = obj["EPMExportLevel"]
      """  EPMExportLevel  """  
      self.JobWorkflowState:str = obj["JobWorkflowState"]
      """  JobWorkflowState  """  
      self.JobCSR:str = obj["JobCSR"]
      """  JobCSR  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.LastExternalMESDate:str = obj["LastExternalMESDate"]
      """  LastExternalMESDate  """  
      self.LastScheduleDate:str = obj["LastScheduleDate"]
      """  LastScheduleDate  """  
      self.LastScheduleProc:str = obj["LastScheduleProc"]
      """  LastScheduleProc  """  
      self.SchedPriority:int = obj["SchedPriority"]
      """  Sequence priority used internally by Calculate Global Scheduling Order process to order the jobs to be scheduled by Global Scheduling, it is generated by Scheduling Order Process taking into account the priorities of the jobs  """  
      self.DaysLate:int = obj["DaysLate"]
      """  It indicates the days a job is going to be late in relation to its required due date  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.ProjProcessed:bool = obj["ProjProcessed"]
      """  Logical field to indicate if this record has been read by project analysis process  """  
      self.SyncReqBy:bool = obj["SyncReqBy"]
      """  SyncReqBy  """  
      self.CustName:str = obj["CustName"]
      """  CustName  """  
      self.CustID:str = obj["CustID"]
      """  CustID  """  
      self.IsCSRSet:bool = obj["IsCSRSet"]
      """  IsCSRSet  """  
      self.UnReadyCostProcess:bool = obj["UnReadyCostProcess"]
      """  UnReadyCostProcess  """  
      self.ProcSuspendedUpdates:str = obj["ProcSuspendedUpdates"]
      """  ProcSuspendedUpdates  """  
      self.ProjProcessedDate:str = obj["ProjProcessedDate"]
      """  DateTime field to indicate when this record has been read by project analysis process  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  Related to Epicor FSA  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.UseAdvancedStaging:bool = obj["UseAdvancedStaging"]
      """  Indicates if this revision is to use Advanced Staging.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PersonIDName:str = obj["PersonIDName"]
      """  PersonIDName  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the job is ready to be fulfilled.  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMServiceReportID:str = obj["FSMServiceReportID"]
      """  FSMServiceReportID  """  
      self.AdvanceLaborRate:bool = obj["AdvanceLaborRate"]
      self.dspReadyCostProcess:bool = obj["dspReadyCostProcess"]
      """  Calculated field is set Not UnReadyCostProcess  """  
      self.EnableJobEngineered:bool = obj["EnableJobEngineered"]
      """  Determine if jobengineered is enabled or disabled.  """  
      self.EnableJobFirm:bool = obj["EnableJobFirm"]
      """  Should JobFirm be enabled or disabled?  """  
      self.EnableJobReleased:bool = obj["EnableJobReleased"]
      """  Determine if jobreleased is enabled or disabled.  """  
      self.EnableMaterialStatus:bool = obj["EnableMaterialStatus"]
      self.EnableProject:bool = obj["EnableProject"]
      self.EngineerAllowed:bool = obj["EngineerAllowed"]
      """  Is the job allowed to be engineered?  """  
      self.EquipLocDesc:str = obj["EquipLocDesc"]
      self.ExtUpdated:bool = obj["ExtUpdated"]
      """  If some fields except ToFirm have been updated  """  
      self.FinalOpDueDate:str = obj["FinalOpDueDate"]
      """   Final Operation – This is scheduled Due Date for either:

1.	Operation on ASM that has Final Operation checkbox selected

2.	If no Operation on ASM has Final Operation selected than use Last Operation on ASM  """  
      self.FirmProcEnable:bool = obj["FirmProcEnable"]
      """  If it's Stocked assembly and PlanAsAsm is true.  """  
      self.FirmProcess:bool = obj["FirmProcess"]
      """  is used to select stocked Job which will be processed by Firming Process instead of Firm check-box. Is available only for .FirmProcEnable = true (in Job Status Maintenance).  """  
      self.HasPlanAsAsm:bool = obj["HasPlanAsAsm"]
      """  Job has at least one assembly with flag Plan as Assembly.  """  
      self.HeaderSensitive:bool = obj["HeaderSensitive"]
      """  Depending on the engineered job flag, is the header information enabled?  """  
      self.IgnoreMtlConstraints:bool = obj["IgnoreMtlConstraints"]
      """  It will allow displaying default of this value from Plant.IgnoreMtlConstraints  """  
      self.JobTypeName:str = obj["JobTypeName"]
      self.KitTime:int = obj["KitTime"]
      """  If part is backflush the kit time is ignored.  """  
      self.LockedQty:bool = obj["LockedQty"]
      """  Locked Qty Flag  """  
      self.NewMeter:int = obj["NewMeter"]
      self.OldJobNum:str = obj["OldJobNum"]
      """  The old Job Number when JobFirm is changed from no to yes.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  The order qty  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      """  Logical field signifying whether JobHead.PartNum is a valid part master part.  """  
      self.PhaseDescription:str = obj["PhaseDescription"]
      self.PMJob:bool = obj["PMJob"]
      """  Relative to Maintenance Jobs (JobType = "MNT") indicates if job is for "Preventive Maintenance".  This is a job that was created for a Equipment Maintenance Plan (JobHead.PlanNum > 0)  """  
      self.ProcessModeDescription:str = obj["ProcessModeDescription"]
      """  Process Mode Description  """  
      self.ReceiveTime:int = obj["ReceiveTime"]
      """  Receive Time field for Job Part entered on Job  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SOExists:bool = obj["SOExists"]
      self.StockQty:int = obj["StockQty"]
      self.ToFirm:bool = obj["ToFirm"]
      """  To be Firmed  """  
      self.XRefPartTypeDesc:str = obj["XRefPartTypeDesc"]
      """  Description for XRefPartType  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  The audit change description for the jobaudit record.  """  
      self.ClearDataset:bool = obj["ClearDataset"]
      self.IsCoPart:bool = obj["IsCoPart"]
      """  True if more than one co-part exists  """  
      self.PartRevProcessMfgID:str = obj["PartRevProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.PartRevProcessMfgType:str = obj["PartRevProcessMfgType"]
      """  Type of Process Manufacturing.  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the Service Job has to be synchronized with Epicor FSI application.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.EquipMeterUOM:str = obj["EquipMeterUOM"]
      self.EquipSerialNum:str = obj["EquipSerialNum"]
      self.EquipLocID:str = obj["EquipLocID"]
      self.EquipPlant:str = obj["EquipPlant"]
      self.EquipDescription:str = obj["EquipDescription"]
      self.EquipBrand:str = obj["EquipBrand"]
      self.EquipModel:str = obj["EquipModel"]
      self.EquipCurrentMeter:int = obj["EquipCurrentMeter"]
      self.EquipTypeID:str = obj["EquipTypeID"]
      self.EquipOEM:str = obj["EquipOEM"]
      self.ExpenseCodeDescription:str = obj["ExpenseCodeDescription"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IssueTopicID1Description:str = obj["IssueTopicID1Description"]
      self.IssueTopicID10Description:str = obj["IssueTopicID10Description"]
      self.IssueTopicID2Description:str = obj["IssueTopicID2Description"]
      self.IssueTopicID3Description:str = obj["IssueTopicID3Description"]
      self.IssueTopicID4Description:str = obj["IssueTopicID4Description"]
      self.IssueTopicID5Description:str = obj["IssueTopicID5Description"]
      self.IssueTopicID6Description:str = obj["IssueTopicID6Description"]
      self.IssueTopicID7Description:str = obj["IssueTopicID7Description"]
      self.IssueTopicID8Description:str = obj["IssueTopicID8Description"]
      self.IssueTopicID9Description:str = obj["IssueTopicID9Description"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumLocationIDNumReq:bool = obj["PartNumLocationIDNumReq"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PlantName:str = obj["PlantName"]
      self.PlantMaintPlant:str = obj["PlantMaintPlant"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProdTeamIDDescription:str = obj["ProdTeamIDDescription"]
      self.ProdTeamIDName:str = obj["ProdTeamIDName"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.QuoteLineLineDesc:str = obj["QuoteLineLineDesc"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.ResTopicID1Description:str = obj["ResTopicID1Description"]
      self.ResTopicID10Description:str = obj["ResTopicID10Description"]
      self.ResTopicID2Description:str = obj["ResTopicID2Description"]
      self.ResTopicID3Description:str = obj["ResTopicID3Description"]
      self.ResTopicID4Description:str = obj["ResTopicID4Description"]
      self.ResTopicID5Description:str = obj["ResTopicID5Description"]
      self.ResTopicID6Description:str = obj["ResTopicID6Description"]
      self.ResTopicID7Description:str = obj["ResTopicID7Description"]
      self.ResTopicID8Description:str = obj["ResTopicID8Description"]
      self.ResTopicID9Description:str = obj["ResTopicID9Description"]
      self.SchedCodeDescription:str = obj["SchedCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.MtlSeq:int = obj["MtlSeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobMtlInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRefDesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RefDes:str = obj["RefDes"]
      """  Identifier of Reference Designator  """  
      self.RefDesSeq:int = obj["RefDesSeq"]
      """  Unique identifies the reference designator with the material sequence.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Side:str = obj["Side"]
      """  Free form side location. (Top, Bottom, Both, Level, etc)  """  
      self.XLocation:int = obj["XLocation"]
      """  X Coordinate of the reference designator  """  
      self.YLocation:int = obj["YLocation"]
      """  Y Coordinate of the reference designator  """  
      self.ZLocation:int = obj["ZLocation"]
      """  Z Coordinate of the reference designator  """  
      self.Rotation:int = obj["Rotation"]
      """  Rotation of the reference designator. Max value = 360.000  """  
      self.Description:str = obj["Description"]
      """  Designator Description  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Material Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Material Weight UOM defaulted from Part Master.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      """  Read-only. True when exempt date >= today.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobMtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  """  
      self.Description:str = obj["Description"]
      """  A description of the material.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Quantity per parent.  Field Service was EstQty in FSCallMt.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  """  
      self.IUM:str = obj["IUM"]
      """  Internal unit of measure.  The unit used to measure the material.  """  
      self.LeadTime:int = obj["LeadTime"]
      """   Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.

When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """   A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.

It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Material.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  The warehouse that the material is allocated against.  """  
      self.SalvagePartNum:str = obj["SalvagePartNum"]
      """  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  """  
      self.SalvageDescription:str = obj["SalvageDescription"]
      """  Description of Salvageable material.  Use Part.Description for a default.  """  
      self.SalvageQtyPer:int = obj["SalvageQtyPer"]
      """  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  """  
      self.SalvageUM:str = obj["SalvageUM"]
      """  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  """  
      self.SalvageMtlBurRate:int = obj["SalvageMtlBurRate"]
      """  The salvage material burden rate for this Job Material.  """  
      self.SalvageUnitCredit:int = obj["SalvageUnitCredit"]
      """  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageEstMtlBurUnitCredit:int = obj["SalvageEstMtlBurUnitCredit"]
      """  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageQtyToDate:int = obj["SalvageQtyToDate"]
      """  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  """  
      self.SalvageCredit:int = obj["SalvageCredit"]
      """  Total salvage credit to date.  A summary of salvage receipt transactions.  """  
      self.SalvageMtlBurCredit:int = obj["SalvageMtlBurCredit"]
      """  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  """  
      self.MfgComment:str = obj["MfgComment"]
      """   Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.

View as editor widget.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  """  
      self.BuyIt:bool = obj["BuyIt"]
      """  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  """  
      self.Ordered:bool = obj["Ordered"]
      """  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  """  
      self.PurComment:str = obj["PurComment"]
      """   Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.

View as editor widget.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """   Indicates if this material will be backflushed.

Note: this field is defaulted from Part.BackFlush

Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  """  
      self.EstScrap:int = obj["EstScrap"]
      """  Estimated Scrap.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  """  
      self.FixedQty:bool = obj["FixedQty"]
      """  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  """  
      self.FindNum:str = obj["FindNum"]
      """  Characters used on the drawing to show where material is used.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobMtl is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  """  
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      """  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.SalvageMtlCredit:int = obj["SalvageMtlCredit"]
      """  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageLbrCredit:int = obj["SalvageLbrCredit"]
      """  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageBurCredit:int = obj["SalvageBurCredit"]
      """  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageSubCredit:int = obj["SalvageSubCredit"]
      """  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.APSAddResType:str = obj["APSAddResType"]
      """   Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler.

'I' to ignore in eScheduler

'M' to treat at Material in eScheduler

'A' to treat as AddResType in eScheduler  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this Material belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this material relates to.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the Material in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the Material in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the material in customers currency.  """  
      self.ResReasonCode:str = obj["ResReasonCode"]
      """  Problem reason code from the reason master table. type Service call.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.Billable:bool = obj["Billable"]
      """  Is this a billable material item.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """  Holds the quantity of the item that has been shipped through misc.  shipments  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the Material in Customer currency.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  """  
      self.AddedMtl:bool = obj["AddedMtl"]
      """  This material was added after initial setup of the job  """  
      self.MiscCharge:bool = obj["MiscCharge"]
      """  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  """  
      self.SCMiscCode:str = obj["SCMiscCode"]
      """  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.GlbRFQ:bool = obj["GlbRFQ"]
      """  Global RFQ flag.  Used in Consolidated Purchasing.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.WIReqDate:str = obj["WIReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.Rpt1BillableUnitPrice:int = obj["Rpt1BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableUnitPrice:int = obj["Rpt2BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableUnitPrice:int = obj["Rpt3BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.BaseRequiredQty:int = obj["BaseRequiredQty"]
      """   Required Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the JobMtl.RequiredQty which is in the UOM of the requirement to the JobMtl.BaseUOM which is the UOM of the Part and it's unit costs.

This quantity multiplied by the JobMtl.EstMtlUnitCost is used to update the total estimated costs found in JobAsmbl.TLEMaterialCost  """  
      self.BaseUOM:str = obj["BaseUOM"]
      """   Unit of Measure of the JobMtl.BaseRequiredQty.

If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as JobMtl.IUM  """  
      self.Weight:int = obj["Weight"]
      """  Material Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Material Weight UOM defaulted from Part Master.  """  
      self.ReqRefDes:int = obj["ReqRefDes"]
      """  Required number of designators  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.SelectForPicking:bool = obj["SelectForPicking"]
      """  Indicates if the job material is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  """  
      self.StagingWarehouseCode:str = obj["StagingWarehouseCode"]
      """  The job pick "Staging" warehouse for the job material.  Defaults from the system default warehouse (PlantConfCtrl.DefJobPickWhse).  """  
      self.StagingBinNum:str = obj["StagingBinNum"]
      """  The job pick "Staging" bin for the job material.  Defaults from the system default bin (PlantConfCtrl.DefJobPickBin).  """  
      self.PickError:str = obj["PickError"]
      """   A non blank character indicates that the release could not be picked by the Auto Pick process.

The possible values are;

"L" - Order Line can't be shipped complete.

"O" - Order can't be shipped complete.

"I" - Insufficient quantity reserved

"Z" - Zero quantity reserved.  """  
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      """   Estimated Material Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      """   Estimated Labor Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      """   Estimated Burden Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      """   Estimated Subcontract Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where:

EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.SalvageEstMtlUnitCredit:int = obj["SalvageEstMtlUnitCredit"]
      """   Estimated Salvage Material Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstLbrUnitCredit:int = obj["SalvageEstLbrUnitCredit"]
      """   Estimated Salvage Labor Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstBurUnitCredit:int = obj["SalvageEstBurUnitCredit"]
      """   Estimated Salvage Burden Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstSubUnitCredit:int = obj["SalvageEstSubUnitCredit"]
      """   Estimated Salvage Subcontract Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where:

SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.LoanedQty:int = obj["LoanedQty"]
      """  The material quantity that has been loaned out to another job.  """  
      self.BorrowedQty:int = obj["BorrowedQty"]
      """  The material quantity that has been borrowed from another job.  """  
      self.ReassignSNAsm:bool = obj["ReassignSNAsm"]
      """  flag used to designate if the serial numbers from the job material/subassembly can be reassigned as the serial number of the parent assembly (top assembly or n deep subassembly) being reworked using a job.  """  
      self.GeneralPlanInfo:str = obj["GeneralPlanInfo"]
      """  GeneralPlanInfo  """  
      self.EstStdDescription:str = obj["EstStdDescription"]
      """  EstStdDescription  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.IsPOCostingMaintained:bool = obj["IsPOCostingMaintained"]
      """  IsPOCostingMaintained  """  
      self.EstStdType:int = obj["EstStdType"]
      """  EstStdType  """  
      self.POCostingFactor:int = obj["POCostingFactor"]
      """  POCostingFactor  """  
      self.PlannedQtyPerUnit:int = obj["PlannedQtyPerUnit"]
      """  PlannedQtyPerUnit  """  
      self.POCostingDirection:int = obj["POCostingDirection"]
      """  POCostingDirection  """  
      self.POCostingUnitVal:int = obj["POCostingUnitVal"]
      """  POCostingUnitVal  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrigStructTag:str = obj["OrigStructTag"]
      """  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.OrigGroupSeq:int = obj["OrigGroupSeq"]
      """  By storing the original Group Sequence of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.ShowStatusIcon:str = obj["ShowStatusIcon"]
      """  ShowStatusIcon  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  """  
      self.StagingLotNum:str = obj["StagingLotNum"]
      """  Stores the lot number of the material in the Staging Warehouse/Bin.  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.LocationView:bool = obj["LocationView"]
      """  Controls if this material record is viewable in Location Management or the web.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.SalvageAttributeSetID:int = obj["SalvageAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.SalvagePlanningNumberOfPieces:int = obj["SalvagePlanningNumberOfPieces"]
      """  Salvage planning number of pieces for this attribute set.  """  
      self.SalvagePlanningAttributeSetID:int = obj["SalvagePlanningAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.RelatedStage:str = obj["RelatedStage"]
      """  The identification of related StageNo.  """  
      self.SalvageRevisionNum:str = obj["SalvageRevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.PartAllocQueueAction:str = obj["PartAllocQueueAction"]
      """  Indicates if the job material should be added or removed from the fulfillment queue.  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the job material is ready to be fulfilled.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  The currency switch flag  """  
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.DisplayExtPrice:int = obj["DisplayExtPrice"]
      """  The display of extended price.  """  
      self.DisplayUnitPrice:int = obj["DisplayUnitPrice"]
      """  The display unit price.  """  
      self.DocDisplayExtPrice:int = obj["DocDisplayExtPrice"]
      """  The document display extended price  """  
      self.DocDisplayUnitPrice:int = obj["DocDisplayUnitPrice"]
      """  The document display extended price  """  
      self.dspBuyIt:bool = obj["dspBuyIt"]
      """  BuyIt field for display in the UI.  """  
      self.DspIUM:str = obj["DspIUM"]
      """  Display IUM (readonly)  """  
      self.EnableBackflush:bool = obj["EnableBackflush"]
      """  Should the backflush field be enabled?  """  
      self.EnableBuyIt:bool = obj["EnableBuyIt"]
      """  Field used to determine if there is security on JobMtl.BuyIt. If there is a row rule will disable the dspBuyIt.  """  
      self.EnableConfigure:bool = obj["EnableConfigure"]
      """  flag to determine whether the Configure Option should be enabled.  """  
      self.EnableDirect:bool = obj["EnableDirect"]
      """  flag to determine whether the Make Direct field should be enabled.  """  
      self.EnableFixedQty:bool = obj["EnableFixedQty"]
      """  This external field is used as a flag to determine when to enable/disable the FixedQty field according to the rules of Serial numbers design.  """  
      self.EnableMtlSalvage:bool = obj["EnableMtlSalvage"]
      self.EnablePurDir:bool = obj["EnablePurDir"]
      self.EnableRcvInspReq:bool = obj["EnableRcvInspReq"]
      """  Field to determine if the the RcvInspectionReq field should be enabled or disabled.  """  
      self.EnableSndAlrtCmpl:bool = obj["EnableSndAlrtCmpl"]
      """  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  """  
      self.EnableSplitCosts:bool = obj["EnableSplitCosts"]
      """  Flag to indicate if the Unit Cost Breakdown costs should be enabled or not.  """  
      self.EstCost:int = obj["EstCost"]
      """  RequiredQty * EstUnitCost - RequiredQty * SalvageQtyPer * SalvageUnitCredit  """  
      self.IPCaller:str = obj["IPCaller"]
      """  The name of the calling program  """  
      self.IsBaseCurrency:bool = obj["IsBaseCurrency"]
      """  IsBaseCurrency  """  
      self.IsMtlConfigurationOn:bool = obj["IsMtlConfigurationOn"]
      self.IsMtlConfigureOn:bool = obj["IsMtlConfigureOn"]
      self.IsMtlExtConfig:bool = obj["IsMtlExtConfig"]
      self.IsMtlRevisionApproved:bool = obj["IsMtlRevisionApproved"]
      """  IsMtlRevisionApproved  """  
      self.PartExists:bool = obj["PartExists"]
      """  Internal flag to identify if current Part is an Inventory Part.  """  
      self.PlantList:str = obj["PlantList"]
      """  Calculated field gets list of available Sites  """  
      self.PricePerCodeDescription:str = obj["PricePerCodeDescription"]
      """  Price Per Code Description  """  
      self.RDEndNum:int = obj["RDEndNum"]
      """  The starting and ending numbers define the reference designators that will be created. This field will be default to the same value as the ?Required Designators? field.  """  
      self.RDPrefix:str = obj["RDPrefix"]
      """  The prefix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  """  
      self.RDStartNum:int = obj["RDStartNum"]
      """  This number will be used to create reference designators. This field will be defaulted to ?1?  """  
      self.RDSuffix:str = obj["RDSuffix"]
      """  The suffix will be defaulted from the reference category defined for the material. The value on this field will be used to create reference designators.  """  
      self.RelatedOperationDesc:str = obj["RelatedOperationDesc"]
      """  The description of the related operation  """  
      self.RetainValues:bool = obj["RetainValues"]
      """  Logical used to determine if record is created from PO Entry.  """  
      self.Rpt1DisplayExtPrice:int = obj["Rpt1DisplayExtPrice"]
      self.Rpt1DisplayUnitPrice:int = obj["Rpt1DisplayUnitPrice"]
      self.Rpt2DisplayExtPrice:int = obj["Rpt2DisplayExtPrice"]
      self.Rpt2DisplayUnitPrice:int = obj["Rpt2DisplayUnitPrice"]
      self.Rpt3DisplayExtPrice:int = obj["Rpt3DisplayExtPrice"]
      self.Rpt3DisplayUnitPrice:int = obj["Rpt3DisplayUnitPrice"]
      self.SalvageBaseUOM:str = obj["SalvageBaseUOM"]
      """  BaseUOM for SalvagePartNum  """  
      self.ShowInspRqdImg:bool = obj["ShowInspRqdImg"]
      """  Satatus of InspectionRequired image on JobMaterial form.  """  
      self.SubContract:bool = obj["SubContract"]
      """  Added for UI Framework?  This flags the material as being a "SubContract" or an "Internal" material.  """  
      self.AllowBackflushUncheck:bool = obj["AllowBackflushUncheck"]
      """  Can the backflush be unchecked?  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.EnableSalvageAttributeSetSearch:bool = obj["EnableSalvageAttributeSetSearch"]
      self.PlanningNumberOfPiecesDisp:int = obj["PlanningNumberOfPiecesDisp"]
      """  Number of pieces for inventory attribute tracked parts  """  
      self.SalvagePlanningNumberOfPiecesDisp:int = obj["SalvagePlanningNumberOfPiecesDisp"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.SkipUnitPriceCalc:bool = obj["SkipUnitPriceCalc"]
      """  Indicates if unit price calculation should occur.  When false the unit price will be calculated.  When false the unit price will remain its current value.  """  
      self.ErrorStatusDisplay:str = obj["ErrorStatusDisplay"]
      """  Error Status Display  """  
      self.InPartAllocQueue:bool = obj["InPartAllocQueue"]
      """  True if this job material is in the fulfillment queue.  """  
      self.ShowFulfillmentQueueActions:bool = obj["ShowFulfillmentQueueActions"]
      """  Show Fulfillment Queue Actions  """  
      self.SelectedForAction:bool = obj["SelectedForAction"]
      """  Indicates this row is selected for action.  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  The allocated quantity for this job material.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  The reserved quantity for this job material.  """  
      self.AvailableQty:int = obj["AvailableQty"]
      """  The available quantity for this job material.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.AssemblySeqPartNum:str = obj["AssemblySeqPartNum"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.JobNumPartNum:str = obj["JobNumPartNum"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PlantName:str = obj["PlantName"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.PurMiscCodeDescription:str = obj["PurMiscCodeDescription"]
      self.PurMiscCodeLCAmount:int = obj["PurMiscCodeLCAmount"]
      self.PurMiscCodeLCDisburseMethod:str = obj["PurMiscCodeLCDisburseMethod"]
      self.PurMiscCodeLCCurrencyCode:str = obj["PurMiscCodeLCCurrencyCode"]
      self.ReasonDescription:str = obj["ReasonDescription"]
      self.RFQLineLineDesc:str = obj["RFQLineLineDesc"]
      self.SalvageAttributeSetIDDescription:str = obj["SalvageAttributeSetIDDescription"]
      self.SalvageAttributeSetIDShortDescription:str = obj["SalvageAttributeSetIDShortDescription"]
      self.SalvagePartNumPartDescription:str = obj["SalvagePartNumPartDescription"]
      self.SalvagePartNumPricePerCode:str = obj["SalvagePartNumPricePerCode"]
      self.SalvagePartNumTrackInventoryByRevision:bool = obj["SalvagePartNumTrackInventoryByRevision"]
      self.SalvagePartNumTrackSerialNum:bool = obj["SalvagePartNumTrackSerialNum"]
      self.SalvagePartNumTrackDimension:bool = obj["SalvagePartNumTrackDimension"]
      self.SalvagePartNumTrackInventoryAttributes:bool = obj["SalvagePartNumTrackInventoryAttributes"]
      self.SalvagePartNumAttrClassID:str = obj["SalvagePartNumAttrClassID"]
      self.SalvagePartNumSellingFactor:int = obj["SalvagePartNumSellingFactor"]
      self.SalvagePartNumTrackLots:bool = obj["SalvagePartNumTrackLots"]
      self.SalvagePartNumSalesUM:str = obj["SalvagePartNumSalesUM"]
      self.SalvagePartNumIUM:str = obj["SalvagePartNumIUM"]
      self.SCMiscCodeDescription:str = obj["SCMiscCodeDescription"]
      self.StageNoDescription:str = obj["StageNoDescription"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorPPState:str = obj["VendorPPState"]
      self.VendorPPAddress2:str = obj["VendorPPAddress2"]
      self.VendorPPCountry:str = obj["VendorPPCountry"]
      self.VendorPPPrimPCon:int = obj["VendorPPPrimPCon"]
      self.VendorPPZip:str = obj["VendorPPZip"]
      self.VendorPPCity:str = obj["VendorPPCity"]
      self.VendorPPAddress1:str = obj["VendorPPAddress1"]
      self.VendorPPAddress3:str = obj["VendorPPAddress3"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOpDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the record back to the JobHead.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  Assigned by the system.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the JobOper record within the JobAsmbl.   System assigned.  """  
      self.OpDtlSeq:int = obj["OpDtlSeq"]
      """  Uniquely identifies an OpDtl.  System assigned.  """  
      self.SetupOrProd:str = obj["SetupOrProd"]
      """  Identifies which part of the production, setup or production, the resource is required for.   Valid values are "S", indicating the resource is RequiredFor the Setup phase of this operation, "P" for Production phase, or "B" meaning Both setup and production phase.  """  
      self.CapabilityID:str = obj["CapabilityID"]
      """  The user can select the capability the operation is to perform.  The system will select the resource.  """  
      self.ResourceGrpID:str = obj["ResourceGrpID"]
      """  The user can select a Resource Group for the operation to be performed on.  The system will select the actual resource.  """  
      self.ResourceID:str = obj["ResourceID"]
      """  Descriptive code assigned by the user to uniquely identify the Resource for this operation to be performed on.  If a resource was not explicitly assigned this field is blank.  """  
      self.ConcurrentCapacity:int = obj["ConcurrentCapacity"]
      """  Concurrent Capacity is a constraint that prevents a Resource from being overloaded because it has, at a given time, this much capacity.  For example, a Resource has 4 racks, and they can be reused, but once they've been selected for an operation, they're tied up until the operation is complete.  """  
      self.DailyProdRate:int = obj["DailyProdRate"]
      """  The Daily Prod rate contains the rate required to make 1. This is multiplied with the mfg qty of the job to get the total production qty. This total is then compared to the resource's daily production quantity  and with any usage stored in the Shopload record.   Once the production limit for a resource has been reached, the Resource has been consumed for that day.  """  
      self.NumResources:int = obj["NumResources"]
      """  This is the number of resources the operation can run on.  If multiple resources can perform the required Capability, then up to this many will be employed.  This determines the number of setups the system will allow for the operation.  However, the number of setups cannot exceed the number of operations.  The idea being that once a part is on a machine you will complete the operation on that resource.  """  
      self.EstSetHours:int = obj["EstSetHours"]
      """  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  """  
      self.EstProdHours:int = obj["EstProdHours"]
      """   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.

FORMULAS:

If StdFormat = "HR" then EstProdHours = ProdStandard. 

If StdFormat = "PH" then (JobOper.RunQty / Std).

If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.

If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.

If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.

If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.

If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  """  
      self.ProdStandard:int = obj["ProdStandard"]
      """   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.

NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  """  
      self.StdFormat:str = obj["StdFormat"]
      """   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;

"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,

"PM" - Pieces/Minute, "OH" - Operations/Hour,

"OM"  - Operations/minute, HR - Fixed Hours.  """  
      self.StdBasis:str = obj["StdBasis"]
      """   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.

This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  """  
      self.OpsPerPart:int = obj["OpsPerPart"]
      """  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  """  
      self.ProdLabRate:int = obj["ProdLabRate"]
      """  Labor rate used for estimated production labor costs. Default from the OpMasDtl.ProdLabRate.  """  
      self.SetupLabRate:int = obj["SetupLabRate"]
      """  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  """  
      self.ProdBurRate:int = obj["ProdBurRate"]
      """  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  """  
      self.SetupBurRate:int = obj["SetupBurRate"]
      """  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  """  
      self.ProdComplete:bool = obj["ProdComplete"]
      """  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  """  
      self.SetupComplete:bool = obj["SetupComplete"]
      """  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  """  
      self.ActProdHours:int = obj["ActProdHours"]
      """  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  """  
      self.ActProdRwkHours:int = obj["ActProdRwkHours"]
      """  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.ActSetupHours:int = obj["ActSetupHours"]
      """  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  """  
      self.ActSetupRwkHours:int = obj["ActSetupRwkHours"]
      """  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.SetupPctComplete:int = obj["SetupPctComplete"]
      """  Setup function percent complete.  Maintained via labor entry.  """  
      self.ActBurCost:int = obj["ActBurCost"]
      """  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  """  
      self.ActLabCost:int = obj["ActLabCost"]
      """   Total of ALL labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.

The Total Cost, updated via the receipt process.  """  
      self.ReworkBurCost:int = obj["ReworkBurCost"]
      """  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  """  
      self.ReworkLabCost:int = obj["ReworkLabCost"]
      """  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup and Production. Updated via the LaborDtl\Write.p trigger.  """  
      self.ResourceLock:bool = obj["ResourceLock"]
      """  Resource Lock.  If the user explicitly selected a Resource for the JobOpDtl, when they accept the scheduling changes, the WISchedResource will be stored as the explicit Resource.  Else the WISchedResource will become the SchedResource and the WISchedResourceGrp will become the ResourceGroup.  """  
      self.SysCreateDate:str = obj["SysCreateDate"]
      """  System maintained.  Date the JobOpDtl record was added to the database.  """  
      self.SysCreateTime:int = obj["SysCreateTime"]
      """  Time in seconds since midnight that the system created the record.  """  
      self.OpDtlDesc:str = obj["OpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.EstSetHoursPerMch:int = obj["EstSetHoursPerMch"]
      """   The estimated set up hours per machine.

Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  """  
      self.OverrideRates:bool = obj["OverrideRates"]
      """  If yes then the user has overridden the rates that were on the  record when it was inititally created.  The initial rates came from the master files.  """  
      self.ProdCrewSize:int = obj["ProdCrewSize"]
      """  Duplicated from JobOper.SetupCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  """  
      self.SetUpCrewSize:int = obj["SetUpCrewSize"]
      """  Duplicated from JobOper.SetupCrewSize. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.IsPrimaryProd:bool = obj["IsPrimaryProd"]
      """  IsPrimaryProd  """  
      self.IsPrimarySetup:bool = obj["IsPrimarySetup"]
      """  IsPrimarySetup  """  
      self.AutoSystemAdded:bool = obj["AutoSystemAdded"]
      """  AutoSystemAdded  """  
      self.MobileAllocatedResource:bool = obj["MobileAllocatedResource"]
      """  MobileAllocatedResource  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.QtyPerCycle:int = obj["QtyPerCycle"]
      """  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  """  
      self.CapabilityDesc:str = obj["CapabilityDesc"]
      """  Capability Description  """  
      self.OperOpStdID:str = obj["OperOpStdID"]
      """  The Operation Standard ID stored in JobOper.  """  
      self.PrimaryProd:bool = obj["PrimaryProd"]
      """  Indicates if primary production operation.  """  
      self.PrimarySetup:bool = obj["PrimarySetup"]
      """  Indicates if primary setup operation.  """  
      self.ResourceGrpDesc:str = obj["ResourceGrpDesc"]
      """  Resource Group Description  """  
      self.SchedResourceDesc:str = obj["SchedResourceDesc"]
      """  Scheduled Resource Description  """  
      self.SchedResourceGrpDesc:str = obj["SchedResourceGrpDesc"]
      """  Scheduled Resource Group Description  """  
      self.SubContract:bool = obj["SubContract"]
      """  flag for subcontract  """  
      self.WISchedResourceDesc:str = obj["WISchedResourceDesc"]
      """  What-if Scheduled Resource Description  """  
      self.WISchedResourceGrpDesc:str = obj["WISchedResourceGrpDesc"]
      """  What-if Scheduled Resource Group Description  """  
      self.ResourceDesc:str = obj["ResourceDesc"]
      """  Resource Description  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CapabilityIDDescription:str = obj["CapabilityIDDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.ResourceGrpIDDescription:str = obj["ResourceGrpIDDescription"]
      self.ResourceIDDescription:str = obj["ResourceIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperActionParamRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number which uniquely identifies the assembly record within the method.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the method.  """  
      self.ActionSeq:int = obj["ActionSeq"]
      """  A sequence number which uniquely identifies action record within the operation set.  """  
      self.ActionParamSeq:int = obj["ActionParamSeq"]
      """  A sequence number which uniquely identifies parameter within the Operation/Action set.  """  
      self.ActionParamFieldDataType:str = obj["ActionParamFieldDataType"]
      """  Data type of Action Parameter.  """  
      self.ActionParamValueCharacter:str = obj["ActionParamValueCharacter"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueDate:str = obj["ActionParamValueDate"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueDecimal:int = obj["ActionParamValueDecimal"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueInteger:int = obj["ActionParamValueInteger"]
      """  Value of Action Parameter.  """  
      self.ActionParamValueLogical:bool = obj["ActionParamValueLogical"]
      """  Value of Action Parameter.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperActionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number which uniquely identifies the assembly record within the method.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the method.  """  
      self.ActionSeq:int = obj["ActionSeq"]
      """  A sequence number which uniquely identifies action record within the operation set.  """  
      self.ActionDesc:str = obj["ActionDesc"]
      """  Description of Action.  """  
      self.Required:bool = obj["Required"]
      """  Indicated if this action must be completed before Operation can be completed.  """  
      self.Completed:bool = obj["Completed"]
      """  Indicates if this Action was completed.  """  
      self.CompletedBy:str = obj["CompletedBy"]
      """  The number of the employee that performed the work.  """  
      self.CompletedOn:str = obj["CompletedOn"]
      """  Date the Action was completed.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.EmpBasicName:str = obj["EmpBasicName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.OprSeq:int = obj["OprSeq"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperInspRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job.  """  
      self.PlanSeq:int = obj["PlanSeq"]
      """  A sequence number that uniquely identifies the JobOperInsp record within the JobNum  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.InspPlanRevNum:str = obj["InspPlanRevNum"]
      """  The inspection plan revision number (configurator revision number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be valid in the SpecHed table.  """  
      self.SpecRevNum:str = obj["SpecRevNum"]
      """  The specification revision number.  Must be valid in the SpecRev table.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperMachParamRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.JobNum:str = obj["JobNum"]
      """  JobNum  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  AssemblySeq  """  
      self.OprSeq:int = obj["OprSeq"]
      """  OprSeq  """  
      self.MachParamSeq:int = obj["MachParamSeq"]
      """  MachParamSeq  """  
      self.RequestCode:str = obj["RequestCode"]
      """  RequestCode  """  
      self.MachineNum:str = obj["MachineNum"]
      """  MachineNum  """  
      self.ToolNum:str = obj["ToolNum"]
      """  ToolNum  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.ParamNum:int = obj["ParamNum"]
      """  ParamNum  """  
      self.ParamUpperLimit:int = obj["ParamUpperLimit"]
      """  ParamUpperLimit  """  
      self.ParamNominalValue:int = obj["ParamNominalValue"]
      """  ParamNominalValue  """  
      self.ParamLowerLimit:int = obj["ParamLowerLimit"]
      """  ParamLowerLimit  """  
      self.ParamDelayValue:int = obj["ParamDelayValue"]
      """  ParamDelayValue  """  
      self.SpecEnable:bool = obj["SpecEnable"]
      """  SpecEnable  """  
      self.SpecControlAlarm:bool = obj["SpecControlAlarm"]
      """  SpecControlAlarm  """  
      self.SpecRunAlarm:bool = obj["SpecRunAlarm"]
      """  SpecRunAlarm  """  
      self.ProcSpecAlarm:bool = obj["ProcSpecAlarm"]
      """  ProcSpecAlarm  """  
      self.ProcControlAlarm:bool = obj["ProcControlAlarm"]
      """  ProcControlAlarm  """  
      self.PartQualSpecEnable:bool = obj["PartQualSpecEnable"]
      """  PartQualSpecEnable  """  
      self.PartQualControlEnable:bool = obj["PartQualControlEnable"]
      """  PartQualControlEnable  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      """  Read-only. True when exempt date >= today.  """  
      self.OpCode:str = obj["OpCode"]
      """  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.OpCode:str = obj["OpCode"]
      """  Descriptive code assigned by user which uniquely identifies a Operation master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      """  Read-only. Yes to display when the part has no net weight or when one or more of the selected has no weight.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.RestrictionDescription:str = obj["RestrictionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobOperRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobOper records are also marked.  This is used to make database access to open operation records more efficient.  """  
      self.OpComplete:bool = obj["OpComplete"]
      """   Indicates if this operation is completed. This is normally set to complete via labor entry transactions.   Not maintainable by Job Entry. It can't be reset to "No" if the JobHead.Complete = Yes.

Labor entry setting logic is: If SetUpComplete = Yes and  EstProdHours = 0 or ProdComplete = Yes and EstSetHours = 0 or both ProdComplete = Yes and SetupComplete = Yes  then OpComplete = Yes.

This field is also set by PO receipt entry "issue complete" for subcontract operations.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Operation is associated with.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.OpCode:str = obj["OpCode"]
      """  Operation Master Code - Links the JobOper  record with a OpMaster record.  Default is given from WrkCenter.OpCode.  Must be valid in the OpMaster file.  """  
      self.OpStdID:str = obj["OpStdID"]
      """   The Operation standard ID.  This links the JobOper to the OpStd master file.  This can be blank or if entered must be valid if entered.  When this field is changed the ProdStandard, StdFormat and StdBasis should be refreshed with the new defaults.

Valid for "inside operations" only.  """  
      self.EstSetHours:int = obj["EstSetHours"]
      """  Total estimated set up hours.  Calculated as EstSetHoursPerMch * Machines.  It is set to zero if operation qty is zero.  This is maintained via the JobOper write trigger.  """  
      self.EstProdHours:int = obj["EstProdHours"]
      """   The estimated Production run hours for internal operations (JobOper.Subcontract = No) . This is not directly maintainable. It exists so that it will be easier to display than always having to  recalculate it  when it is needed.  It is calculated using the ProdStandard, StdFormat, StdBasis, OpsPerPart, QtyPer, EstScrap and EstScrapType.

FORMULAS:

If StdFormat = "HR" then EstProdHours = ProdStandard. 

If StdFormat = "PH" then (JobOper.RunQty / Std).

If StdFormat = "PM" then (JobOper.RunQty / Std ) / 60.

If StdFormat = "OH" then (JobOper.RunQty/OpsPerPart) / Std.

If StdFormat = "OM" then ((JobOper.RunQty/OpsPerPart) / Std) / 60.

If StdFormat = "HP" then (JobOPer.RunQty/Basis) X Std.

If StdFormat = "MP" then ((JobOper.RunQty/Basis) X Std) / 60.  """  
      self.ProdStandard:int = obj["ProdStandard"]
      """   The production standard for the operation.  It can be expressed as Hours, Minutes per piece, Pieces per Time, Operations per Minute or Operations per hour. This along with the StdFormat, StdBasis, OpsPer and   fields are used to calculate the operations estimated production hours.  A value can be defaulted from the OpStd master.

NOTE: The ProdStandard can only be zero if the EstSetHours are greater than zero.  """  
      self.StdFormat:str = obj["StdFormat"]
      """   Qualifier for the Production Standard field. This is used as a default to the qualifier field in operation details. The valid qualifiers are;

"HP" - Hours/Piece, "MP" - minutes/piece, "PH" - pieces/hour,

"PM" - Pieces/Minute, "OH" - Operations/Hour,

"OM"  - Operations/minute, HR - Fixed Hours.  """  
      self.StdBasis:str = obj["StdBasis"]
      """   A standard basis is to be used to with standards that are time per piece (HP & MP). The basis is a Divisor. Valid codes are E-Eaches, C=100's, M=1000's, T=10,000.

This field is used in the formula for calculating the estimated production hours. The operation quantity is divided by the basis value and then multiplied by the standard to result in hours.  """  
      self.OpsPerPart:int = obj["OpsPerPart"]
      """  Number of operations per part. This is used in the calculation of the estimated production hours when the StdFormat is "OM" or "OH".  This should not be accessible if StdFormat is not "OM" or "OH".  It MUST BE > 0 if StdFormat is "OM" or "OH".  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Production Quantity per one of the Parent Item.  """  
      self.QueStartDate:str = obj["QueStartDate"]
      """  Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.QueStartHour:int = obj["QueStartHour"]
      """  Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.StartDate:str = obj["StartDate"]
      """  Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.StartHour:int = obj["StartHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.DueDate:str = obj["DueDate"]
      """  Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.DueHour:int = obj["DueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.MoveDueDate:str = obj["MoveDueDate"]
      """  Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.MoveDueHour:int = obj["MoveDueHour"]
      """  Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.ProdLabRate:int = obj["ProdLabRate"]
      """  Labor rate used for estimated production labor costs. Default from the OpMaster.ProdLabRate.  """  
      self.SetupLabRate:int = obj["SetupLabRate"]
      """  Labor rate for estimated setup labor costs. Default from the OpMaster.SetupLabRate.  """  
      self.ProdBurRate:int = obj["ProdBurRate"]
      """  The burden rate to be used for the production time on this operation. (EstProdHrs X ProdBurRate). Default from the WrkCenter.ProdBurRate.  """  
      self.SetupBurRate:int = obj["SetupBurRate"]
      """  The burden rate to be used for the Setup time on this operation. (EstSetHours X ProdBurRate). Default from the WrkCenter.SetupBurRate.  """  
      self.AddedOper:bool = obj["AddedOper"]
      """  This indicates if this is an "added operation". An added operation is one that was not planned on.  """  
      self.Machines:int = obj["Machines"]
      """  Defaulted from the WrkCenter.SchMachines field. This is the number of machines that this operation will run on at the same time. Logically thought of as a "Squeeze factor" to scheduling. That is the more machines, the shorter the schedule. This affects how much of the total daily workcenter capacity that the operation will consume. For example; Center has 4 machines, 8 Hours per day and operation 2 machines. This operation would consume 16 hours of capacity per day. So if it had 32 hours of estimated production it would schedule as taking 2 days. NOTE THIS ONLY APPLIES TO PRODUCTION HOURS, TOTAL SETUP HOURS ARE ADDED TO THE SQUEEZED PRODUCTION HOURS TO GET THE NUMBER OF HOURS TO BE SCHEDULED. It is however used to calculate the total setup hours on the operation.  """  
      self.SetUpCrewSize:int = obj["SetUpCrewSize"]
      """  Defaulted from the WrkCenter.SetUpCrewSize field. Its the number of people it physically takes to setup this operation. It is used as a  multiplier in the estimated labor hours calculation.  JobOper.EstSetHours * JobOper.SetUpCrewSize = Estimated Labor hours for the operation. This also affects the estimated labor cost. Est Cost = Est Labor Hours * SetUpLaborRate  """  
      self.ProdCrewSize:int = obj["ProdCrewSize"]
      """  Defaults from the WrkCenter.ProdCrewSize. The # of people it physically takes to perform the production on this operation per machine that it is run on.  CrewSize * JobOper.EstProdHours = Est. Prod. Labor Hours. Note this can be a fraction for operations that do not require full time attention of an employee. See also SetUpCrewSize  """  
      self.ProdComplete:bool = obj["ProdComplete"]
      """  A flag indicating if the production is complete for this operation. It is updated via Labor Entry.  """  
      self.SetupComplete:bool = obj["SetupComplete"]
      """  Flag that indicates if Setup is complete on this operation. This flag is only used when the operation has EstSetupHours > 0.00.  """  
      self.ActProdHours:int = obj["ActProdHours"]
      """  Total Actual Production Hours. A summary of non-setup LaborDtl.BurdenHrs. This includes REWORK hours.  This is maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActReworkHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H").  """  
      self.ActProdRwkHours:int = obj["ActProdRwkHours"]
      """  Total Actual Production Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "P" and Rework = Yes. This number is also included as part of the JobOPer.ActProdHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActProdHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.ActSetupHours:int = obj["ActSetupHours"]
      """  Actual setup hours.  A summary of setup (LaborDtl.LaborType = S) labor transactions hours (LaborDtl.Burden). Actual Setup hours reduce the shop load if the system is configured to remove load based on hours (JCSyst.RemoveLoad = "H").  """  
      self.ActSetupRwkHours:int = obj["ActSetupRwkHours"]
      """  Total Actual Setup Rework  Hours. A summary of rework labor transactions (LaborDtl.BurdenHrs) where LaborDtl.LaborType = "S" and Rework = Yes. This number is also included as part of the JobOPer.ActSetupHours.  Maintained via write/delete triggers on the LaborDtl file. Along with JobOper.ActSetHours it is used to reduce the shop load if the system is configured to remove load by actual hours (JCSyst.RemoveLoad = "H"). (See the lib/inopload.i code for load remaining logic)  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   For Non Subcontract operations: A summary of labor transaction detail. (LaborDtl.LaborQty). Labor entry/collection maintains this field.  Only the LaborQty for transactions that are Production labor ( LaborType = P ) and Not rework (LaborDtl.Rework = No) are included in this summary.

This quantity is used to reduce shop load when the system is configured to reduce load based on quantity completed. (JCSyst.RemoveLoad = Q)

For Subcontract Operations this field is updated by the Purchased Receipt process. The detail records are in the PartTran file.  """  
      self.SetupPctComplete:int = obj["SetupPctComplete"]
      """  Setup function percent complete.  Maintained via labor entry.  """  
      self.EstScrap:int = obj["EstScrap"]
      """  EstScrap =  a number representing either a scrap qty or a scrap percent depending on the value of EstScrapType field.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the ScrapQty entry as being a fixed quantity or a percentage of run quantity.  """  
      self.SubContract:bool = obj["SubContract"]
      """  This flags the operation as being a "SubContract" or an "Internal" operation.  This also controls what fields are allowed to be updated for this record. For example,  an internal operation will not have a PartNum.  """  
      self.IUM:str = obj["IUM"]
      """  Inventory UOM  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost for the SubContract operation.  Defaults from the Part table if valid PartNum.  """  
      self.DaysOut:int = obj["DaysOut"]
      """  Hours required is calculated as days * 8.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum to be shipped to the subcontract. Default the JobHead.PartNum or JobAsmbl.PartNum depending on the JobMtl.AssemblySeq.  """  
      self.Description:str = obj["Description"]
      """  Description used only for subcontract operations  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The SubContractors VendorNum that ties back to the Vendor master file.  This is only valid for "SubContract"  operations. This field is not directly maintainable, instead its assigned by having the user either enter the "VendorID" and then finding the VendorNum in the Vendor file or by  selection list processing.  This is a mandatory entry for subcontract operations.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID. This field is only for the "Subcontract" operations. Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default Purchase point defined in the Vendor file.  """  
      self.CommentText:str = obj["CommentText"]
      """  Editor widget for Job operation comments.  """  
      self.SchedRelation:str = obj["SchedRelation"]
      """   Indicates the scheduling relationship between this and the preceding  operation. Possible values are "SS" - Start to Start, "FS" Finish to Start or "FF" Finish to Finish.

A "SS" can start when the preceding operation starts.

A "FS" starts when the preceding operation is finished.

A "FF" can finish when the preceding operation finishes.

These relationships do not span between levels of assemblies. The first operation on an assembly is always treated as being "FS" relationship.

A "FF" finishes when the preceding operation is finished.  """  
      self.RunQty:int = obj["RunQty"]
      """   The total operation quantity. This is a calculated field.  Calculated as (Assembly Required Qty X QtyPer) + Scrap. The assembly qty is either the JobHead.ProdQty if  JobOPer.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobOPer.AssemblySeq > 0.

This value is refreshed when maintenance is performed on the operation record or an assemblies production qty is changed  """  
      self.WIName:str = obj["WIName"]
      """   This field is blank or contains the UserID. When not blank it indicates that the operations schedule has been changed and is considered as being in a "What If" mode.

This field is also used as part of an index which allows the system to quickly find the operations that need to be reset to "Actual Schedule".  """  
      self.WIMachines:int = obj["WIMachines"]
      """  This is the What-If number of machines that this operation will run on at the same time.  Setup by and for scheduling from the Machines field.  """  
      self.WIQueStartDate:str = obj["WIQueStartDate"]
      """  What-if Scheduled queue start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIQueStartHour:int = obj["WIQueStartHour"]
      """  What-if Scheduled queue start hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  What if Scheduled production start date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling. It represents the What If "Hour offset from the beginning of the work day" when this operation is scheduled to begin.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  What If Scheduled production due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  This field is established by scheduling. It represents the "Hour offset from the beginning of the work day" when this operation is scheduled to end.  """  
      self.WIMoveDueDate:str = obj["WIMoveDueDate"]
      """  What-If Scheduled move due date. Not directly maintainable, updated via the scheduling process.  """  
      self.WIMoveDueHour:int = obj["WIMoveDueHour"]
      """  What-if Scheduled move due hour offset from the beginning of the work day.  This field is established by scheduling.  """  
      self.WIHoursPerMachine:int = obj["WIHoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "What If" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining ShopLoad records.  """  
      self.WILoadDate:str = obj["WILoadDate"]
      """  Date at which the operations current outstanding "What-If" load starts at.  Updated by the JobOper write trigger. (See LoadDate)  """  
      self.WILoadHour:int = obj["WILoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding "What-If"  load. Related to WILoadDate.  """  
      self.ActBurCost:int = obj["ActBurCost"]
      """  Total Burden cost to date. This is update via the LaborDtl\Write.p trigger procedure. It includes ALL burden costs (Setup, Production and Rework)  """  
      self.ActLabCost:int = obj["ActLabCost"]
      """   FOR NON-SUBCONTRACT OPERATIONS: Total of "ALL" labor costs to date. This includes Setup, Production and Rework. Updated via the LaborDtl.Write.p trigger.

FOR SUBCONTRACT OPERATIONS: The Total Cost, updated via the receipt process.  """  
      self.ReworkBurCost:int = obj["ReworkBurCost"]
      """  Total Rework Burden cost todate. This value is also included in the ActBurCost total. It includes both setup & production rework. Updated via LaborDtl\Write.P trigger.  """  
      self.ReworkLabCost:int = obj["ReworkLabCost"]
      """  Total Rework Labor cost to date. This value is also included in the ActLabCost field. This includes both Setup & Production. Updated via the LaborDtl\Write.p trigger.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """   A total additional charge that is incurred when purchasing this service. Ex(Lot,Setup,Handling,etc...).

Defaulted from VendPart.MiscAmt. This is NOT part of the a Unit Cost. It is NOT consider in the logic of using Minimum Cost.  """  
      self.HoursPerMachine:int = obj["HoursPerMachine"]
      """  The Number of Hours per machine per day that this operations "actual" schedule is based on.  This is for "Inbetween" days, not first or last days.  It is a copy of WrkCenter.HoursPerMachine field at the time of scheduling.  Used in logic of maintaining the ShopLoad records.  """  
      self.LoadDate:str = obj["LoadDate"]
      """   Date at which the operations current outstanding load starts at.

Ex: Op schedule is 2/1/97 - 2/10/97, initially LoadDate = 2/1/97. As load is relieved through labor processing the LoadDate moves forward accordingly. When 1/2 completed the LoadDate would be 2/5/97. This field is primarily used by the Scheduling Board to calculate the graphical image of outstanding load.  Updated by the JobOper write trigger.  """  
      self.LoadHour:int = obj["LoadHour"]
      """  "Hour offset from the beginning of the work day" for the operations outstanding load. Related to LoadDate.  """  
      self.ReloadNum:int = obj["ReloadNum"]
      """  Internally used field to prevent redundant read of JobOper during execution of "Reloader" program. (See WrkCenter.ReloadNum)  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobOper is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required when items are received to this JobOper (subcontract only). Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Identical to JobHead.JobEngineered.  ShopLoad capacity is only allocated to Jobs where JobEngineered = YES.  """  
      self.EstSetHoursPerMch:int = obj["EstSetHoursPerMch"]
      """   The estimated set up hours per machine.

Default from OpStd.SetupHours.  Used to calculate JobOper.EstSetupHours.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """   Part Revision number.

Pertains to subcontracting operations only.   An optional field.   Related JobAsmbl.RevisionNum is used as the default.  """  
      self.AutoReceiptDate:str = obj["AutoReceiptDate"]
      """  Currently not used. Prep for future development.  """  
      self.LastLaborDate:str = obj["LastLaborDate"]
      """  The labor date of the last labor transaction that was posted to this operation.  Used by the JobOper write trigger Auto Receieve logic.  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this operation belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this operation relates to.  """  
      self.LaborRate:int = obj["LaborRate"]
      """  Labor rate used for  time on an operation.  Time per hour per technician. in base currency.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. in base currency. This field considers the percentage coverage of a warranty or contract.  """  
      self.DocLaborRate:int = obj["DocLaborRate"]
      """  Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. Does not consider warranty or contract  """  
      self.DocBillableLaborRate:int = obj["DocBillableLaborRate"]
      """  Billable Labor rate used for  time on a service.  Time per hour per technician. In Customer currency. considers warranty or contract  """  
      self.Billable:bool = obj["Billable"]
      """  FS - Is this a billable operation.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the subcontract in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the subcontract in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the subcontract in customers currency.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the for the Subcontract in Customer currency.  """  
      self.LaborEntryMethod:str = obj["LaborEntryMethod"]
      """  Indicates the Method for Labor Entry.  Can be "T" - Time and Quantity, "Q" - Quantity Only (Time is estimated), "B" - Backflush or "X" - Time - Backflush Qty.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.FAQty:int = obj["FAQty"]
      """  The quantity requested for first article inspection.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The "to date" quantity that has been moved to the input Warehouse/Bin of the subsequent operations ResourceGroup/Resource input Warehouse/Bin.  This is NOT A balance.  It is a "to date" value.  It is not reduced as it is consumed.  Used in calculation of "Outstanding" WIP in the Request Material/WIP program (ame30-dg.w).  Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the WIP material in/out of the staging area (Issues, Returns).  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job operation requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  This only applies to subcontract operations.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job subcontract operation.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """   RFQ Status.

W= Waiting, A = Accepted, R = Requested, C = Received  """  
      self.SetupGroup:str = obj["SetupGroup"]
      """  Used to group operation to save on setups.  """  
      self.RestoreFlag:str = obj["RestoreFlag"]
      """  Used to determine if this record was modified during the last What-If Schedule Restore.  The contents are Date-Time.  Example: "04/11/02-34221".  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.PrimarySetupOpDtl:int = obj["PrimarySetupOpDtl"]
      """   Identifies the primary JobOpDtl to be used for setup.  The setup time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = S or B.  """  
      self.PrimaryProdOpDtl:int = obj["PrimaryProdOpDtl"]
      """   Identifies the primary JobOpDtl to be used for production.  The production run time for the operation is determined on the JobOpDtl.

If <> 0, must identify a valid JobOpDtl.  The JobOpDtl needs to have a RequiredFor = P or B.  """  
      self.OpDesc:str = obj["OpDesc"]
      """  Operation Description.  """  
      self.KitDate:str = obj["KitDate"]
      """  Kit Date. Not directly maintanable. Updated via the scheduling process.  """  
      self.GlbRFQ:bool = obj["GlbRFQ"]
      """  Global RFQ flag.  Used in Consolidated Purchasing.  """  
      self.BookedUnitCost:int = obj["BookedUnitCost"]
      """  Booked Unit Cost  """  
      self.RecalcExpProdYld:bool = obj["RecalcExpProdYld"]
      """   Initially defaulted to false. This flag is set to true at the time JobOper.ProdComplete is set to true if JobHead.ProductionYield = true and OpMaster. PrdYldRecalcExpected = true and the actual completed qty for the operation vs. the expected completion qty is out of variance based on the under percentage set in OpMaster. This flag is used by the production yield recalculation logic to determine if recalculation is required for a job.

This field is maintained by the system only.  """  
      self.UserMapData:str = obj["UserMapData"]
      """  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  """  
      self.RoughCutSched:bool = obj["RoughCutSched"]
      """  When true this would signify that this operation was rough cut scheduled - meaning the operation would have start and end dates but no supporting resourcetimeused or shopload records.  """  
      self.SchedComment:str = obj["SchedComment"]
      """  Scheduling Comments  """  
      self.Rpt1BillableLaborRate:int = obj["Rpt1BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableLaborRate:int = obj["Rpt2BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableLaborRate:int = obj["Rpt3BillableLaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt1BillableUnitPrice:int = obj["Rpt1BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableUnitPrice:int = obj["Rpt2BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableUnitPrice:int = obj["Rpt3BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1LaborRate:int = obj["Rpt1LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt2LaborRate:int = obj["Rpt2LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt3LaborRate:int = obj["Rpt3LaborRate"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.SNRequiredOpr:bool = obj["SNRequiredOpr"]
      """  Indicates whether serial numbers are required form this operation. When true the system will prompt in labor entry processes for the serial numbers that have been completed on this operation.  """  
      self.SNRequiredSubConShip:bool = obj["SNRequiredSubConShip"]
      """  Indicates whether serial numbers are required on subcontract ship for a subcontract operation.  """  
      self.Weight:int = obj["Weight"]
      """  Operation Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Operation Weight UOM defaulted from Part Master.  """  
      self.SendAheadType:str = obj["SendAheadType"]
      """   Determines the scheduling offset for the secondary start-to-start operation, offset which will be either



calculated (or entered) on the primary operation. The offset time can be calculated by pieces, percentage 



of the operation duration or entered manually by the user on the primary operation. The secondary operation 



will scheduled to start after the offset period.  """  
      self.SendAheadOffset:int = obj["SendAheadOffset"]
      """   Scheduling offset for the secondary start-to-start operation. The offset time can be calculated by pieces,



percentage of the operation duration or entered manually by the user on the primary operation. The 



secondary operation will scheduled to start after the offset period.  """  
      self.PrjRoleList:str = obj["PrjRoleList"]
      """  Delimited list of PrjRoleCd codes that are allowed for this operation.  """  
      self.TearDwnEndDate:str = obj["TearDwnEndDate"]
      """  Scheduled tear down start date. The start date would be the production end date.  """  
      self.TearDwnEndHour:int = obj["TearDwnEndHour"]
      """  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  """  
      self.WITearDwnEndDate:str = obj["WITearDwnEndDate"]
      """  Scheduled tear down start date. The start date would be the production end date.  """  
      self.WITearDwnEndHour:int = obj["WITearDwnEndHour"]
      """  Scheduled tear down due hour offset from the end of the prodution time.  This field is established by scheduling.  """  
      self.UseAllRoles:bool = obj["UseAllRoles"]
      self.AssetPartNum:str = obj["AssetPartNum"]
      """  The PartNum for the asset. This should be disabled for a service call job, in which case the asset information would be transferred from the service call line when an operation is created for the job.  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  Serial number of the asset.  """  
      self.ActualStartDate:str = obj["ActualStartDate"]
      """  ActualStartDate  """  
      self.ActualStartHour:int = obj["ActualStartHour"]
      """  ActualStartHour  """  
      self.ActualEndDate:str = obj["ActualEndDate"]
      """  ActualEndDate  """  
      self.ActualEndHour:int = obj["ActualEndHour"]
      """  ActualEndHour  """  
      self.FSJobStatus:int = obj["FSJobStatus"]
      """  FSJobStatus  """  
      self.Instructions:str = obj["Instructions"]
      """  Instructions  """  
      self.ProdUOM:str = obj["ProdUOM"]
      """  ProdUOM  """  
      self.GeneralPlanInfo:str = obj["GeneralPlanInfo"]
      """  GeneralPlanInfo  """  
      self.EstStdDescription:str = obj["EstStdDescription"]
      """  EstStdDescription  """  
      self.JDFOpCompleted:bool = obj["JDFOpCompleted"]
      """  JDFOpCompleted  """  
      self.RemovedfromPlan:bool = obj["RemovedfromPlan"]
      """  RemovedfromPlan  """  
      self.EstStdType:int = obj["EstStdType"]
      """  EstStdType  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.PctReg:int = obj["PctReg"]
      """  PctReg  """  
      self.SetupMaterial:int = obj["SetupMaterial"]
      """  SetupMaterial  """  
      self.MaterialColorRating:int = obj["MaterialColorRating"]
      """  MaterialColorRating  """  
      self.MiscInfo1:str = obj["MiscInfo1"]
      """  MiscInfo1  """  
      self.MiscInfo2:str = obj["MiscInfo2"]
      """  MiscInfo2  """  
      self.SetupURL:str = obj["SetupURL"]
      """  SetupURL  """  
      self.ExpPctUp:int = obj["ExpPctUp"]
      """  ExpPctUp  """  
      self.ExpCycTm:int = obj["ExpCycTm"]
      """  ExpCycTm  """  
      self.ExpGood:int = obj["ExpGood"]
      """  ExpGood  """  
      self.NonProdLimit:int = obj["NonProdLimit"]
      """  NonProdLimit  """  
      self.AutoSpcEnable:bool = obj["AutoSpcEnable"]
      """  AutoSpcEnable  """  
      self.AutoSpcPeriod:int = obj["AutoSpcPeriod"]
      """  AutoSpcPeriod  """  
      self.PartQualEnable:bool = obj["PartQualEnable"]
      """  PartQualEnable  """  
      self.AutoSpcSubgroup:int = obj["AutoSpcSubgroup"]
      """  AutoSpcSubgroup  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MobileOperation:bool = obj["MobileOperation"]
      """  MobileOperation  """  
      self.ReWork:bool = obj["ReWork"]
      """  ReWork  """  
      self.RequestMove:bool = obj["RequestMove"]
      """  RequestMove  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.PrinterID:str = obj["PrinterID"]
      """  PrinterID  """  
      self.LastPrintedDate:str = obj["LastPrintedDate"]
      """  LastPrintedDate  """  
      self.LastPCIDPrinted:str = obj["LastPCIDPrinted"]
      """  LastPCIDPrinted  """  
      self.CurrentPkgCode:str = obj["CurrentPkgCode"]
      """  CurrentPkgCode  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.QtyPerCycle:int = obj["QtyPerCycle"]
      """  Number of pieces created per cycle if Cycle/Minute or Cycle/Hour is selected  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.StageNumber:str = obj["StageNumber"]
      """  The identification of related StageNo.  """  
      self.TemplateID:str = obj["TemplateID"]
      """  TemplateID  """  
      self.ActScrapQty:int = obj["ActScrapQty"]
      """  The sum of LaborDtl ScrapQty for this operation.  """  
      self.AutoReceive:bool = obj["AutoReceive"]
      """  Auto receive flag  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  The currency switch flag.  """  
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.DisplayExtPrice:int = obj["DisplayExtPrice"]
      self.DisplayServAmt:int = obj["DisplayServAmt"]
      """  The display service amount.  """  
      self.DisplayServLaborRate:int = obj["DisplayServLaborRate"]
      """  The display service labor rate  """  
      self.DisplayUnitPrice:int = obj["DisplayUnitPrice"]
      """  Calculated display unit price  """  
      self.DocDisplayExtPrice:int = obj["DocDisplayExtPrice"]
      """  The document display extended price  """  
      self.DocDisplayServAmt:int = obj["DocDisplayServAmt"]
      """  The converted display service amount.  """  
      self.DocDisplayServLaborRate:int = obj["DocDisplayServLaborRate"]
      """  The converted display service labor rate.  """  
      self.DocDisplayUnitPrice:int = obj["DocDisplayUnitPrice"]
      """  The document display unit price  """  
      self.DspIUM:str = obj["DspIUM"]
      """  Display IUM field (readonly)  """  
      self.EnableAutoReceive:bool = obj["EnableAutoReceive"]
      """  Field to determine to enable or disable autoreceive.  """  
      self.EnableSndAlrtCmpl:bool = obj["EnableSndAlrtCmpl"]
      """  Field to determine if the the sndalrtcmpl field should be enabled or disabled.  """  
      self.EnableSNReqSubConShip:bool = obj["EnableSNReqSubConShip"]
      """  This external field is used as a flag to determine when to enable/disable the SNRequiredSubConShip field on UI screen.  """  
      self.EnableSNRequiredOpr:bool = obj["EnableSNRequiredOpr"]
      self.EstBurdenCost:int = obj["EstBurdenCost"]
      """  For non subconctract operations JobOper.EstSetHours * JobOper.SetupBurRate + JobOper.EstProdHours * JobOper.ProdBurRate  """  
      self.EstLabHours:int = obj["EstLabHours"]
      """  The calculated estimated labor hours  """  
      self.EstLaborCost:int = obj["EstLaborCost"]
      """  For non subcontract operations : JobOper.EstSetHours * JobOper.SetupCrewSize * JobOper.SetupLabRate +JobOper.EstProdHours * JobOper.ProdCrewSize * JobOper.ProdLabRate  """  
      self.EstSubCost:int = obj["EstSubCost"]
      """  For SubContract operations: JobOper.EstUnitCost * JobOper.RunQty  """  
      self.FinalOpr:bool = obj["FinalOpr"]
      """  Final operation  """  
      self.IsBaseCurrency:bool = obj["IsBaseCurrency"]
      """  IsBaseCurrency  """  
      self.LaborEntryMethodDesc:str = obj["LaborEntryMethodDesc"]
      """  This is the description of the Method for Labor Entry.  Can be "Time and Quantity" for 'T', "Quantity Only" for 'Q', "Backflush" for 'B' or "Time and Backflush Qty" for 'X'  """  
      self.LoadHrs:int = obj["LoadHrs"]
      """  The total Load Hours calculated by summing the SetUpLoadHrs + ProdLoadHrs.  """  
      self.OpStdDescription:str = obj["OpStdDescription"]
      self.PrimaryProdOpDtlDesc:str = obj["PrimaryProdOpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.PrimaryResourceGrpDesc:str = obj["PrimaryResourceGrpDesc"]
      """  Primary Resource Group Description  """  
      self.PrimaryResourceGrpID:str = obj["PrimaryResourceGrpID"]
      """  The Resource Group ID of the primary production operation detail.  """  
      self.PrimarySetupOpDtlDesc:str = obj["PrimarySetupOpDtlDesc"]
      """  Description is initially created when the JobOpDtl is created.   If the JobOpDtl is created from a Resource it will be the Resource.Description, if it's created from an ResourceGroup it will be the ResourceGroup.Description.  Once set it is not changed by the system.  """  
      self.ProductionQty:int = obj["ProductionQty"]
      """  The calculated production quantity  """  
      self.RefreshResources:bool = obj["RefreshResources"]
      """  Indicates if the scheduling resources should be refreshed when the op code changes.  """  
      self.Rpt1DisplayExtPrice:int = obj["Rpt1DisplayExtPrice"]
      self.Rpt1DisplayServAmt:int = obj["Rpt1DisplayServAmt"]
      self.Rpt1DisplayServLaborRate:int = obj["Rpt1DisplayServLaborRate"]
      self.Rpt1DisplayUnitPrice:int = obj["Rpt1DisplayUnitPrice"]
      self.Rpt2DisplayExtPrice:int = obj["Rpt2DisplayExtPrice"]
      self.Rpt2DisplayServAmt:int = obj["Rpt2DisplayServAmt"]
      self.Rpt2DisplayServLaborRate:int = obj["Rpt2DisplayServLaborRate"]
      self.Rpt2DisplayUnitPrice:int = obj["Rpt2DisplayUnitPrice"]
      self.Rpt3DisplayExtPrice:int = obj["Rpt3DisplayExtPrice"]
      self.Rpt3DisplayServAmt:int = obj["Rpt3DisplayServAmt"]
      self.Rpt3DisplayServLaborRate:int = obj["Rpt3DisplayServLaborRate"]
      self.Rpt3DisplayUnitPrice:int = obj["Rpt3DisplayUnitPrice"]
      self.ScrapQty:int = obj["ScrapQty"]
      """  The calculated scrap quantity  """  
      self.ShowStatusIcon:str = obj["ShowStatusIcon"]
      """  Contains the value of which icon to display in tree for joboper  """  
      self.StdBasisDescription:str = obj["StdBasisDescription"]
      """  StdBasis Description  """  
      self.StdFormatDescription:str = obj["StdFormatDescription"]
      """  StdFormat Description  """  
      self.ActSubCost:int = obj["ActSubCost"]
      """  For SubContract Operations equals to the ActLaborCost  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OpCodeOpDesc:str = obj["OpCodeOpDesc"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.RFQLineLineDesc:str = obj["RFQLineLineDesc"]
      self.SetupGroupDescription:str = obj["SetupGroupDescription"]
      self.StageNoDescription:str = obj["StageNoDescription"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorPPZip:str = obj["VendorPPZip"]
      self.VendorPPCity:str = obj["VendorPPCity"]
      self.VendorPPAddress2:str = obj["VendorPPAddress2"]
      self.VendorPPPrimPCon:int = obj["VendorPPPrimPCon"]
      self.VendorPPAddress1:str = obj["VendorPPAddress1"]
      self.VendorPPCountry:str = obj["VendorPPCountry"]
      self.VendorPPState:str = obj["VendorPPState"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.VendorPPAddress3:str = obj["VendorPPAddress3"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobPartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number. Used in tying record back to its parent JobHead record.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  """  
      self.PartsPerOp:int = obj["PartsPerOp"]
      """   Part Per Operation. Active only for Concurrent process

Jobs. Otherwise set to 1.  """  
      self.PartQty:int = obj["PartQty"]
      """   The number of individual parts that are being produced

part. Sum of all related JobProd.ProdQty.

Not Directly maintable.  """  
      self.StockQty:int = obj["StockQty"]
      """  Part Qty that is being produced for Stock.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """   Total Quantity of the end part shipped from this job.

Updated via the ShipDtl write triggers.  """  
      self.ReceivedQty:int = obj["ReceivedQty"]
      """   Total quantity received to stock for the end part of the Job.

Updated via the Manufacturing receipts process.  """  
      self.WIPQty:int = obj["WIPQty"]
      """   Represents the "outstanding" WIP of production quantity.

A summary of JobProd.WIPQty, updated via JobProd write trigger.  """  
      self.QtyCompleted:int = obj["QtyCompleted"]
      """   Part Production quantity completed.

Updated via JobOper write trigger or LaborPart trigger.  If JobOper is the "Final Operation" (see JobAsmbl.FinalOpr) then this is set equal to JobOper.QtyCompleted.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  Quantity of the job completed quantity that is "Reserved" for the linked demands (sales orders/other jobs). Summary of PartAlloc.ReservedQty where PartAlloc.SupplyJobNum = JobHead.JobNum.  Reservations for Orders are made via the Order Allocations program. They are excluded from available quantity calculations for the job. Available Quantity = JobHead.QtyCompleted - (Shipped + Received to stk + ReservedAllocQty + PickingQty + PickedQty).  Maintained via PartAlloc write trigger.  """  
      self.AllocatedQty900:int = obj["AllocatedQty900"]
      """  Total Allocated Quantity for this job part  """  
      self.PickingQty:int = obj["PickingQty"]
      """  Quantity of the job completed quantity that is considered as in the "Picking" process for the linked sales orders. Summary of PartAlloc.PickingQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickingQty is set in the Order Allocation program. Maintained via PartAlloc write trigger.  """  
      self.PickedQty:int = obj["PickedQty"]
      """  Quantity of the job completed quantity that is considered as in the shipping "Staging" process for the linked sales orders. Summary of PartAlloc.PickedQty where PartAlloc.SupplyJobNum = JobHead.JobNum. PickedQty is updated when the material move moves the item to the staging area.  Maintained via PartAlloc write trigger.  """  
      self.LbrCostBase:int = obj["LbrCostBase"]
      """   Defines an integer value which is used to calculate a

ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.MtlCostBase:int = obj["MtlCostBase"]
      """   Defines an integer value which is used to calculate a

ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.JobClosed:bool = obj["JobClosed"]
      """  Indicates if Job is closed.  Mirror image of JobHead.JobClosed. Duplicated for performance reasons  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if production is complete for the job.   Mirror image of JobHead.JobClosed. Duplicated for performance reasons  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  Mirror image of JobHead.Site. Duplicated for performance reasons  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.IUM:str = obj["IUM"]
      """  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  """  
      self.ShipDocReq:bool = obj["ShipDocReq"]
      """   Shipping Documents Required.

Indicates if shipping documents are required when shipping this part from the Job. Pertains to Job Shipments only and only if the PartNum does not exist in the PartTable. If it does exist then the Part.ShipDocReq. If checked, then at the time of shipping the system will require that the JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  """  
      self.ShipDocAvail:bool = obj["ShipDocAvail"]
      """   Required Shipping Documents Available.

A flag manually set by the user to indicate that the required documents for the Job Part  are available. In order to set to Yes, at least one attachment having a DocType with Shipment = yes must exist for the Job Part.  If the Part.ShipDocReq = yes  then JobPart.ShipDocsA vail must = yes before the system will allow shipment of the Part from the job.Requires DocManagement license.  """  
      self.MtlList:str = obj["MtlList"]
      """  List of materials that us this part as cost base  """  
      self.PreventSugg:bool = obj["PreventSugg"]
      """  Indicates that MRP should not create job suggestions for the specified co-part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.OrderQty:int = obj["OrderQty"]
      self.ProcessMode:str = obj["ProcessMode"]
      """  The value of the JobHead.ProcessMode  """  
      self.EnableShipDocReq:bool = obj["EnableShipDocReq"]
      """  Indicates if ShipDocReq is enabled. Only if JobPart.PartNum does not exist in Part Table and if Document Management is installed.  """  
      self.PartmasterPart:bool = obj["PartmasterPart"]
      """  Logical field signifying whether JobPart.PartNum is a valid part master part.  """  
      self.EnableSugg:bool = obj["EnableSugg"]
      self.BitFlag:int = obj["BitFlag"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackInventoryByRevision:bool = obj["PartTrackInventoryByRevision"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobProdRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number. Used in tying record back to its parent JobHead record.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Related sales order number. For build to stock demands the OrderNum, OrderLine and OrderRel fields are all zero  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Related Sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Related sales order release number.  """  
      self.ProdQty:int = obj["ProdQty"]
      """   The planned production quantity for a  Job to fill the demand.

Note: updates the JobHead.ProdQty via JobProd write trigger.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """   Inventory warehouse that job is producing for.

Only relevant for build to stock demands (ordernum = 0). In this case a valid Part must be referenced.  """  
      self.TargetJobNum:str = obj["TargetJobNum"]
      """  Production Demands can be from other jobs.  That is, one job can be building parts that are required by another job. The demand is defined by a JobMtl record on some other job.  "TargetJobNum" is the job that this job is making parts for.  """  
      self.TargetAssemblySeq:int = obj["TargetAssemblySeq"]
      """  Assembly Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.TargetMtlSeq:int = obj["TargetMtlSeq"]
      """  Material Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """   Quantity Shipped against this allocation.

Updated via the ShipDtl write triggers.  """  
      self.ReceivedQty:int = obj["ReceivedQty"]
      """   Total quantity received to stock for this production allocation.

Updated via the Manufacturing Receipts process  """  
      self.WIPQty:int = obj["WIPQty"]
      """   Represents the "outstanding" WIP production quantity.

WIPQty = JobProd.Quantity - (ShippedQty +ReceivedQty) if negative then it is set to zero. If related Order Release is closed then reservation is zero.

Updated via the JobProd, OrderRel triggers.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.TFLineNum:str = obj["TFLineNum"]
      """  This is the unique key for this table.  It will have a prefix like Job to indicate firm or unfirm orders.  The record can be linked to an Order Header by using the TFOrdNum TFOrdSeq keys.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.

With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.

This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand schedule is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  The sequence from the DemandHead record this DemandSchedule is related to.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  The sequence from the DemandDetail record this DemandSchedule is related to.  """  
      self.DemandScheduleSeq:int = obj["DemandScheduleSeq"]
      """  This field along with Company, DemandContractNum, DemandHeadSeq, and DemandDetailSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandSchedulel record for the DemandDetail and the adding 1 to it.  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanID:str = obj["PlanID"]
      """  PlanID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.WIPToMiscShipment:bool = obj["WIPToMiscShipment"]
      """  Job will be shipped through a Misc Shipment directly from WIP when job is closed.  """  
      self.RMANum:int = obj["RMANum"]
      """  RMA Num linked from RMA Disposition.  """  
      self.RMALine:int = obj["RMALine"]
      """  RMA Line linked from RMA Disposition.  """  
      self.RMAReceipt:int = obj["RMAReceipt"]
      """  RMA Receipt linked from RMA Disposition.  """  
      self.RMADisp:int = obj["RMADisp"]
      """  RMA Disposition linked from RMA Disposition.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  DMRNum  """  
      self.DMRActionNum:int = obj["DMRActionNum"]
      """  DMRActionNum  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.CustID:str = obj["CustID"]
      """  The customer ID  """  
      self.CustName:str = obj["CustName"]
      """  The customer name.  """  
      self.DemandLinkSource:str = obj["DemandLinkSource"]
      """  The demand linke source  """  
      self.DemandLinkStatus:str = obj["DemandLinkStatus"]
      """  The demand link status  """  
      self.IUM:str = obj["IUM"]
      """  IUM  """  
      self.JHPartDesc:str = obj["JHPartDesc"]
      """  The jobhead part description  """  
      self.JHPartNum:str = obj["JHPartNum"]
      """  The jobhead part number  """  
      self.MakeToJobQty:int = obj["MakeToJobQty"]
      """  The make to job quantity  """  
      self.MakeToStockQty:int = obj["MakeToStockQty"]
      """  The make to stock quantity  """  
      self.MakeToType:str = obj["MakeToType"]
      """  The Make to type (i.e. Stock, Job, Order)  """  
      self.MaxAllowedQty:int = obj["MaxAllowedQty"]
      """  Calculated quantity that could come from allocatedqty or accumulation from parttran.  """  
      self.MtlPartDesc:str = obj["MtlPartDesc"]
      """  The jobmtl part description.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The jobmtl part number.  """  
      self.OrdWIPQty:int = obj["OrdWIPQty"]
      """  The order WIP quantity  """  
      self.OurStockQty:int = obj["OurStockQty"]
      """  Calculated field OurStockQty, will update OrderRel.OurStockQty  """  
      self.PullFromStockWarehouseCode:str = obj["PullFromStockWarehouseCode"]
      """  Pull from Stock warehouse code (orderrel.warehousecode  """  
      self.PullFromStockWarehouseDesc:str = obj["PullFromStockWarehouseDesc"]
      """  The pull from stock warehouse description  """  
      self.ShipBy:str = obj["ShipBy"]
      """  The Demand Link Due Date - Ship By  """  
      self.SplitQty:int = obj["SplitQty"]
      """  The split quantity for the demand.  """  
      self.StkWIPQty:int = obj["StkWIPQty"]
      """  The stock WIP quantity  """  
      self.TFOrdLine:int = obj["TFOrdLine"]
      self.TFOrdNum:str = obj["TFOrdNum"]
      self.TotalSplitQuantity:int = obj["TotalSplitQuantity"]
      """  Temp field so UI has a column to bind to for calculation of Total Split Quantity.  """  
      self.TrackSerialNumbers:bool = obj["TrackSerialNumbers"]
      self.Valid:bool = obj["Valid"]
      """  This is a field used in Split Job to determine if record has been validated.  """  
      self.AsmPartDesc:str = obj["AsmPartDesc"]
      """  The jobasmbl part description.  """  
      self.AsmPartNum:str = obj["AsmPartNum"]
      """  The jobasmbl part number.  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.DispNumberOfPieces:int = obj["DispNumberOfPieces"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.CustInactive:bool = obj["CustInactive"]
      """  Indicates a customer referenced on the record is inactive.  """  
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      """  Indicates if a ShipTo referenced on the record is inactive.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartTrackInventoryByRevision:bool = obj["PartTrackInventoryByRevision"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobResourcesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.JobNum:str = obj["JobNum"]
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.OprSeq:int = obj["OprSeq"]
      self.OpDtlSeq:int = obj["OpDtlSeq"]
      self.WhatIf:bool = obj["WhatIf"]
      self.AllocNum:int = obj["AllocNum"]
      self.ResourceGrpID:str = obj["ResourceGrpID"]
      self.ResourceID:str = obj["ResourceID"]
      self.ResourceDesc:str = obj["ResourceDesc"]
      self.CalendarName:str = obj["CalendarName"]
      """  Calendar Name  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobStageRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly Sequence # that this Stage is associated with.  """  
      self.StageSeq:int = obj["StageSeq"]
      """  A sequence number which uniquely identifies stage record within the stage set.  """  
      self.StageNumber:str = obj["StageNumber"]
      """  The identification of related StageNo.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.StageNumberDescription:str = obj["StageNumberDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_MaterialCostRow:
   def __init__(self, obj):
      self.AssemblySeq:int = obj["AssemblySeq"]
      self.Description:str = obj["Description"]
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      self.EstUnitCost:int = obj["EstUnitCost"]
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      self.MtlBurCost:int = obj["MtlBurCost"]
      self.MtlSeq:int = obj["MtlSeq"]
      self.PartNum:str = obj["PartNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_UpdExtJobEntryTableset:
   def __init__(self, obj):
      self.JobHead:list[Erp_Tablesets_JobHeadRow] = obj["JobHead"]
      self.JobHeadAttch:list[Erp_Tablesets_JobHeadAttchRow] = obj["JobHeadAttch"]
      self.JobAsmbl:list[Erp_Tablesets_JobAsmblRow] = obj["JobAsmbl"]
      self.JobAsmblAttch:list[Erp_Tablesets_JobAsmblAttchRow] = obj["JobAsmblAttch"]
      self.JobAsmblInsp:list[Erp_Tablesets_JobAsmblInspRow] = obj["JobAsmblInsp"]
      self.JobMtl:list[Erp_Tablesets_JobMtlRow] = obj["JobMtl"]
      self.JobMtlAttch:list[Erp_Tablesets_JobMtlAttchRow] = obj["JobMtlAttch"]
      self.JobMtlInsp:list[Erp_Tablesets_JobMtlInspRow] = obj["JobMtlInsp"]
      self.JobMtlRefDes:list[Erp_Tablesets_JobMtlRefDesRow] = obj["JobMtlRefDes"]
      self.JobMtlRestriction:list[Erp_Tablesets_JobMtlRestrictionRow] = obj["JobMtlRestriction"]
      self.JobMtlRestrictSubst:list[Erp_Tablesets_JobMtlRestrictSubstRow] = obj["JobMtlRestrictSubst"]
      self.JobOper:list[Erp_Tablesets_JobOperRow] = obj["JobOper"]
      self.JobOperAttch:list[Erp_Tablesets_JobOperAttchRow] = obj["JobOperAttch"]
      self.JobOperAction:list[Erp_Tablesets_JobOperActionRow] = obj["JobOperAction"]
      self.JobOperActionParam:list[Erp_Tablesets_JobOperActionParamRow] = obj["JobOperActionParam"]
      self.JobOperInsp:list[Erp_Tablesets_JobOperInspRow] = obj["JobOperInsp"]
      self.JobOperMachParam:list[Erp_Tablesets_JobOperMachParamRow] = obj["JobOperMachParam"]
      self.JobOpDtl:list[Erp_Tablesets_JobOpDtlRow] = obj["JobOpDtl"]
      self.JobResources:list[Erp_Tablesets_JobResourcesRow] = obj["JobResources"]
      self.JobOperRestriction:list[Erp_Tablesets_JobOperRestrictionRow] = obj["JobOperRestriction"]
      self.JobOperRestrictSubst:list[Erp_Tablesets_JobOperRestrictSubstRow] = obj["JobOperRestrictSubst"]
      self.JobAsmblRestriction:list[Erp_Tablesets_JobAsmblRestrictionRow] = obj["JobAsmblRestriction"]
      self.JobAsmblRestrictSubst:list[Erp_Tablesets_JobAsmblRestrictSubstRow] = obj["JobAsmblRestrictSubst"]
      self.JobAsmRefDes:list[Erp_Tablesets_JobAsmRefDesRow] = obj["JobAsmRefDes"]
      self.JobAudit:list[Erp_Tablesets_JobAuditRow] = obj["JobAudit"]
      self.JobPart:list[Erp_Tablesets_JobPartRow] = obj["JobPart"]
      self.JobProd:list[Erp_Tablesets_JobProdRow] = obj["JobProd"]
      self.JobStage:list[Erp_Tablesets_JobStageRow] = obj["JobStage"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class FindAssembly_input:
   """ Required : 
   ipJobNum
   ipStartAssemblySeq
   ipPartNum
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number to search from.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The starting assembly sequence to search from.  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number or part number string to search for.  """  
      pass

class FindAssembly_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opAssemblySeq:int = obj["parameters"]
      self.opRowid:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetApprovedConfiguredRevisionNum_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Part Number that will be used to get the most recent approved part revision  """  
      pass

class GetApprovedConfiguredRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.revisionNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetAssemblyCosts_input:
   """ Required : 
   ipJobNum
   ipAssemblySeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  Job Number of the target Assembly  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  Assembly Sequence  """  
      pass

class GetAssemblyCosts_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobCostsTableset] = obj["returnObj"]
      pass

class GetByID_input:
   """ Required : 
   jobNum
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      pass

class GetByID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetByIdandJobType_input:
   """ Required : 
   jobNum
   jobType
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      """  JobHead.JobNum  """  
      self.jobType:str = obj["jobType"]
      """  JobHead.JobType  """  
      pass

class GetByIdandJobType_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetBySysRowID_input:
   """ Required : 
   id
   """  
   def __init__(self, obj):
      self.id:str = obj["id"]
      pass

class GetBySysRowID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetBySysRowIDs_input:
   """ Required : 
   ids
   """  
   def __init__(self, obj):
      self.ids:str = obj["ids"]
      pass

class GetBySysRowIDs_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetCodeDescList_input:
   """ Required : 
   tableName
   fieldName
   """  
   def __init__(self, obj):
      self.tableName:str = obj["tableName"]
      self.fieldName:str = obj["fieldName"]
      pass

class GetCodeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetDatasetForTreeByRef_input:
   """ Required : 
   ds
   ipJobNum
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   ipJobTypeMode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number to return data for.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      self.ipJobTypeMode:str = obj["ipJobTypeMode"]
      """  Job must be one of these types else it is an error. ipJobTypeMode can be blank, no constraint  """  
      pass

class GetDatasetForTreeByRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDatasetForTree_input:
   """ Required : 
   ipJobNum
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   ipJobTypeMode
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number to return data for.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      self.ipJobTypeMode:str = obj["ipJobTypeMode"]
      """  Job must be one of these types else it is an error. ipJobTypeMode can be blank, no constraint  """  
      pass

class GetDatasetForTree_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetDetailsMsgWarning_input:
   """ Required : 
   currJobNum
   currAsmSeq
   sourceFile
   sourceQuote
   sourceLine
   sourceJob
   sourceAsm
   sourcePart
   sourceRev
   sourceAltMethod
   resequence
   useMethodForParts
   getCostsFromInv
   getCostsFromTemp
   """  
   def __init__(self, obj):
      self.currJobNum:str = obj["currJobNum"]
      """  Job Number of the target Assembly  """  
      self.currAsmSeq:int = obj["currAsmSeq"]
      """  Sequence of the target Assembly  """  
      self.sourceFile:str = obj["sourceFile"]
      """  Source (Quote, Job, or Method) of the details to copy  """  
      self.sourceQuote:int = obj["sourceQuote"]
      """  Quote Number to get details from (populated when sourceFile = "Quote")  """  
      self.sourceLine:int = obj["sourceLine"]
      """  Quote Line to get details from (populated when sourceFile = "Quote")  """  
      self.sourceJob:str = obj["sourceJob"]
      """  Job Number to get details from (populated when sourceFile = "Job")  """  
      self.sourceAsm:int = obj["sourceAsm"]
      """  Quote Assembly to get details from (populated when sourceFile = "Quote" or "Job")  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRev:str = obj["sourceRev"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.sourceAltMethod:str = obj["sourceAltMethod"]
      """  Alternate Method to get details from (populated when sourceFile = "Method")  """  
      self.resequence:bool = obj["resequence"]
      """  Indicates if assemblys should be resequenced  """  
      self.useMethodForParts:bool = obj["useMethodForParts"]
      """  If true use the method passed in for all parts in assemblies, if false

            <param name="getCostsFromInv"></param><param name="getCostsFromTemp"></param>

            use the assembly part's default method.  """  
      self.getCostsFromInv:bool = obj["getCostsFromInv"]
      self.getCostsFromTemp:bool = obj["getCostsFromTemp"]
      pass

class GetDetailsMsgWarning_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.outWarningList:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetDetails_input:
   """ Required : 
   currJobNum
   currAsmSeq
   sourceFile
   sourceQuote
   sourceLine
   sourceJob
   sourceAsm
   sourcePart
   sourceRev
   sourceAltMethod
   resequence
   useMethodForParts
   getCostsFromInv
   getCostsFromTemp
   """  
   def __init__(self, obj):
      self.currJobNum:str = obj["currJobNum"]
      """  Job Number of the target Assembly  """  
      self.currAsmSeq:int = obj["currAsmSeq"]
      """  Sequence of the target Assembly  """  
      self.sourceFile:str = obj["sourceFile"]
      """  Source (Quote, Job, or Method) of the details to copy  """  
      self.sourceQuote:int = obj["sourceQuote"]
      """  Quote Number to get details from (populated when sourceFile = "Quote")  """  
      self.sourceLine:int = obj["sourceLine"]
      """  Quote Line to get details from (populated when sourceFile = "Quote")  """  
      self.sourceJob:str = obj["sourceJob"]
      """  Job Number to get details from (populated when sourceFile = "Job")  """  
      self.sourceAsm:int = obj["sourceAsm"]
      """  Quote Assembly to get details from (populated when sourceFile = "Quote" or "Job")  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRev:str = obj["sourceRev"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.sourceAltMethod:str = obj["sourceAltMethod"]
      """  Alternate Method to get details from (populated when sourceFile = "Method")  """  
      self.resequence:bool = obj["resequence"]
      """  Indicates if assemblys should be resequenced  """  
      self.useMethodForParts:bool = obj["useMethodForParts"]
      """  If true use the method passed in for all parts in assemblies, if false

            <param name="getCostsFromInv"></param><param name="getCostsFromTemp"></param>

            use the assembly part's default method.  """  
      self.getCostsFromInv:bool = obj["getCostsFromInv"]
      self.getCostsFromTemp:bool = obj["getCostsFromTemp"]
      pass

class GetDetails_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class GetIfCurrentSiteHasExternalMES_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class GetJMtlStatFilters_input:
   """ Required : 
   JobNum
   """  
   def __init__(self, obj):
      self.JobNum:str = obj["JobNum"]
      """  Job Number for the Job Material Status view  """  
      pass

class GetJMtlStatFilters_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JMtlStatFiltersTableset] = obj["returnObj"]
      pass

class GetJMtlStat_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JMtlStatFiltersTableset] = obj["ds"]
      pass

class GetJMtlStat_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JMtlStatTableset] = obj["returnObj"]
      pass

class GetJobListForSerialTrackedParts_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetJobListForSerialTrackedParts_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobHeadListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetJobMtlIsMtlConfigurationOn_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class GetJobMtlIsMtlConfigurationOn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetLinkedQuoteLineList_input:
   """ Required : 
   ipJobNum
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The JobNum to return values for  """  
      pass

class GetLinkedQuoteLineList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opQuoteLineList:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobHeadListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetMaintJobEntryUIDefaults_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.defaultValues:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetMtlConfigPartRevAndConfigType_input:
   """ Required : 
   sysRowID
   revisionNum
   """  
   def __init__(self, obj):
      self.sysRowID:str = obj["sysRowID"]
      self.revisionNum:str = obj["revisionNum"]
      pass

class GetMtlConfigPartRevAndConfigType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cfgPartNum:str = obj["parameters"]
      self.cfgRevisionNum:str = obj["parameters"]
      self.configType:str = obj["parameters"]
      self.configURL:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetMtlConfigPartRev_input:
   """ Required : 
   sysRowID
   tableName
   """  
   def __init__(self, obj):
      self.sysRowID:str = obj["sysRowID"]
      self.tableName:str = obj["tableName"]
      pass

class GetMtlConfigPartRev_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cfgPartNum:str = obj["parameters"]
      self.cfgRevisionNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetMultiJobList_input:
   """ Required : 
   jobSelected
   """  
   def __init__(self, obj):
      self.jobSelected:list[Erp_Tablesets_JobHeadListTableset] = obj["jobSelected"]
      pass

class GetMultiJobList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opJobList:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetNewJobAsmRefDes_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewJobAsmRefDes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAsmblAttch_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobAsmblAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAsmblInsp_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobAsmblInsp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAsmblRestrictSubst_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   restrictionTypeID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.restrictionTypeID:str = obj["restrictionTypeID"]
      pass

class GetNewJobAsmblRestrictSubst_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAsmblRestriction_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobAsmblRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAsmbl_input:
   """ Required : 
   ds
   jobNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      pass

class GetNewJobAsmbl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobAudit_input:
   """ Required : 
   ds
   jobNum
   changeDate
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.changeDate:str = obj["changeDate"]
      pass

class GetNewJobAudit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobHeadAttch_input:
   """ Required : 
   ds
   jobNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      pass

class GetNewJobHeadAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobHead_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class GetNewJobHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlAttch_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewJobMtlAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlByStageNumber_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   stageNumber
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.stageNumber:str = obj["stageNumber"]
      pass

class GetNewJobMtlByStageNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlInsp_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewJobMtlInsp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlRefDes_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewJobMtlRefDes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlRestrictSubst_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   restrictionTypeID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      self.restrictionTypeID:str = obj["restrictionTypeID"]
      pass

class GetNewJobMtlRestrictSubst_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtlRestriction_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewJobMtlRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobMtl_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobMtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOpDtl_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOpDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperActionParam_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   actionSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      self.actionSeq:int = obj["actionSeq"]
      pass

class GetNewJobOperActionParam_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperAction_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOperAction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperAttch_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOperAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperInsp_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOperInsp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperMachParam_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOperMachParam_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperRestrictSubst_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   restrictionTypeID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      self.restrictionTypeID:str = obj["restrictionTypeID"]
      pass

class GetNewJobOperRestrictSubst_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOperRestriction_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   oprSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.oprSeq:int = obj["oprSeq"]
      pass

class GetNewJobOperRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobOper_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobOper_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobPart_input:
   """ Required : 
   ds
   jobNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      pass

class GetNewJobPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobProd_input:
   """ Required : 
   ds
   jobNum
   partNum
   orderNum
   orderLine
   orderRelNum
   warehouseCode
   targetJobNum
   targetAssemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.partNum:str = obj["partNum"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      self.orderRelNum:int = obj["orderRelNum"]
      self.warehouseCode:str = obj["warehouseCode"]
      self.targetJobNum:str = obj["targetJobNum"]
      self.targetAssemblySeq:int = obj["targetAssemblySeq"]
      pass

class GetNewJobProd_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewJobStage_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class GetNewJobStage_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOprByStageNumber_input:
   """ Required : 
   ds
   jobNum
   assySeq
   stageNumber
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      self.assySeq:int = obj["assySeq"]
      self.stageNumber:str = obj["stageNumber"]
      pass

class GetNewOprByStageNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNextJobNumOrderRelease_input:
   """ Required : 
   ipPartSugRowid
   """  
   def __init__(self, obj):
      self.ipPartSugRowid:str = obj["ipPartSugRowid"]
      """  The rowid of the partsug record to create job for.  """  
      pass

class GetNextJobNumOrderRelease_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNextJobNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetNextJobNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNextJobNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetNextMntJobNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNextJobNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetPlantConfCtrlUse3rdPartySched_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      """  bool: the value  """  
      pass

class GetProjectRoles_output:
   def __init__(self, obj):
      self.returnObj      #schema had no properties on an object.
      pass

class GetRows_input:
   """ Required : 
   whereClauseJobHead
   whereClauseJobHeadAttch
   whereClauseJobAsmbl
   whereClauseJobAsmblAttch
   whereClauseJobAsmblInsp
   whereClauseJobMtl
   whereClauseJobMtlAttch
   whereClauseJobMtlInsp
   whereClauseJobMtlRefDes
   whereClauseJobMtlRestriction
   whereClauseJobMtlRestrictSubst
   whereClauseJobOper
   whereClauseJobOperAttch
   whereClauseJobOperAction
   whereClauseJobOperActionParam
   whereClauseJobOperInsp
   whereClauseJobOperMachParam
   whereClauseJobOpDtl
   whereClauseJobResources
   whereClauseJobOperRestriction
   whereClauseJobOperRestrictSubst
   whereClauseJobAsmblRestriction
   whereClauseJobAsmblRestrictSubst
   whereClauseJobAsmRefDes
   whereClauseJobAudit
   whereClauseJobPart
   whereClauseJobProd
   whereClauseJobStage
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseJobHead:str = obj["whereClauseJobHead"]
      self.whereClauseJobHeadAttch:str = obj["whereClauseJobHeadAttch"]
      self.whereClauseJobAsmbl:str = obj["whereClauseJobAsmbl"]
      self.whereClauseJobAsmblAttch:str = obj["whereClauseJobAsmblAttch"]
      self.whereClauseJobAsmblInsp:str = obj["whereClauseJobAsmblInsp"]
      self.whereClauseJobMtl:str = obj["whereClauseJobMtl"]
      self.whereClauseJobMtlAttch:str = obj["whereClauseJobMtlAttch"]
      self.whereClauseJobMtlInsp:str = obj["whereClauseJobMtlInsp"]
      self.whereClauseJobMtlRefDes:str = obj["whereClauseJobMtlRefDes"]
      self.whereClauseJobMtlRestriction:str = obj["whereClauseJobMtlRestriction"]
      self.whereClauseJobMtlRestrictSubst:str = obj["whereClauseJobMtlRestrictSubst"]
      self.whereClauseJobOper:str = obj["whereClauseJobOper"]
      self.whereClauseJobOperAttch:str = obj["whereClauseJobOperAttch"]
      self.whereClauseJobOperAction:str = obj["whereClauseJobOperAction"]
      self.whereClauseJobOperActionParam:str = obj["whereClauseJobOperActionParam"]
      self.whereClauseJobOperInsp:str = obj["whereClauseJobOperInsp"]
      self.whereClauseJobOperMachParam:str = obj["whereClauseJobOperMachParam"]
      self.whereClauseJobOpDtl:str = obj["whereClauseJobOpDtl"]
      self.whereClauseJobResources:str = obj["whereClauseJobResources"]
      self.whereClauseJobOperRestriction:str = obj["whereClauseJobOperRestriction"]
      self.whereClauseJobOperRestrictSubst:str = obj["whereClauseJobOperRestrictSubst"]
      self.whereClauseJobAsmblRestriction:str = obj["whereClauseJobAsmblRestriction"]
      self.whereClauseJobAsmblRestrictSubst:str = obj["whereClauseJobAsmblRestrictSubst"]
      self.whereClauseJobAsmRefDes:str = obj["whereClauseJobAsmRefDes"]
      self.whereClauseJobAudit:str = obj["whereClauseJobAudit"]
      self.whereClauseJobPart:str = obj["whereClauseJobPart"]
      self.whereClauseJobProd:str = obj["whereClauseJobProd"]
      self.whereClauseJobStage:str = obj["whereClauseJobStage"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRows_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetTreeStructure_input:
   """ Required : 
   treeSelection
   """  
   def __init__(self, obj):
      self.treeSelection:str = obj["treeSelection"]
      """  The string identifier that corresponds to the tree you want  """  
      pass

class GetTreeStructure_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      """  The requested JSON as a string  """  
      pass

class Ice_BOUpdErrorRow:
   def __init__(self, obj):
      self.TableName:str = obj["TableName"]
      self.ErrorLevel:str = obj["ErrorLevel"]
      self.ErrorType:str = obj["ErrorType"]
      self.ErrorText:str = obj["ErrorText"]
      self.ErrorSysRowID:str = obj["ErrorSysRowID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      pass

class Ice_BOUpdErrorTableset:
   def __init__(self, obj):
      self.BOUpdError:list[Ice_BOUpdErrorRow] = obj["BOUpdError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class InitJobOperSNReqSubConShip_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class InitJobOperSNReqSubConShip_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class InsertBOMAsm_input:
   """ Required : 
   ipParentJobAsmblRowid
   ipSourceRowid
   ipOperSeq
   ipDroppedAs
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipParentJobAsmblRowid:str = obj["ipParentJobAsmblRowid"]
      """  The rowid of the parent jobasmbl to add to  """  
      self.ipSourceRowid:str = obj["ipSourceRowid"]
      """  The rowid of source record could be jobasmbl, jobmtl, or

            quotemtl to be added to the parent jobasmbl  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipDroppedAs:str = obj["ipDroppedAs"]
      """  The character value to determine where to drop and to drop as what.

            valid values: JobAsmbl, JobAsmbl-AsMtl, QuoteAsm, QuoteAsm-AsMtl  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      pass

class InsertBOMAsm_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertBOMMtlWithStage_input:
   """ Required : 
   ipParentJobAsmblRowid
   ipSourceRowid
   ipOperSeq
   ipMtlSeq
   ipBeforeMtlRowid
   ipDroppedAs
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   ipRelatedStage
   """  
   def __init__(self, obj):
      self.ipParentJobAsmblRowid:str = obj["ipParentJobAsmblRowid"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipSourceRowid:str = obj["ipSourceRowid"]
      """  The rowid of source record could be jobasmbl, jobmtl, or

            quotemtl to be added to the parent jobasmbl  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The material seq to use  """  
      self.ipBeforeMtlRowid:str = obj["ipBeforeMtlRowid"]
      """  The material rowid to insert material before  """  
      self.ipDroppedAs:str = obj["ipDroppedAs"]
      """  The character value to determine where to drop and to drop as what.

            valid values: PartMtl-AsMtl, PartMtl-AsAsm, JobMtl-AsAsm, JobMtl, QuoteMtl-AsAsm, QuoteMtl  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      self.ipRelatedStage:str = obj["ipRelatedStage"]
      """  Related stage  """  
      pass

class InsertBOMMtlWithStage_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertBOMMtl_input:
   """ Required : 
   ipParentJobAsmblRowid
   ipSourceRowid
   ipOperSeq
   ipMtlSeq
   ipBeforeMtlRowid
   ipDroppedAs
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipParentJobAsmblRowid:str = obj["ipParentJobAsmblRowid"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipSourceRowid:str = obj["ipSourceRowid"]
      """  The rowid of source record could be jobasmbl, jobmtl, or

            quotemtl to be added to the parent jobasmbl  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The material seq to use  """  
      self.ipBeforeMtlRowid:str = obj["ipBeforeMtlRowid"]
      """  The material rowid to insert material before  """  
      self.ipDroppedAs:str = obj["ipDroppedAs"]
      """  The character value to determine where to drop and to drop as what.

            valid values: PartMtl-AsMtl, PartMtl-AsAsm, JobMtl-AsAsm, JobMtl, QuoteMtl-AsAsm, QuoteMtl  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      pass

class InsertBOMMtl_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertBOMOper_input:
   """ Required : 
   ipParentJobAsmblRowid
   ipSourceRowid
   ipNewOperSeq
   ipBeforeOperRowid
   ipDroppedAs
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipParentJobAsmblRowid:str = obj["ipParentJobAsmblRowid"]
      """  The rowid of the parent jobasmbl to add to  """  
      self.ipSourceRowid:str = obj["ipSourceRowid"]
      """  The rowid of source record could be joboper, partopr, or

            quoteopr to be added to the parent jobasmbl  """  
      self.ipNewOperSeq:int = obj["ipNewOperSeq"]
      """  The new operation seq  """  
      self.ipBeforeOperRowid:str = obj["ipBeforeOperRowid"]
      """  The operation rowid to insert operation before  """  
      self.ipDroppedAs:str = obj["ipDroppedAs"]
      """  The character value to determine where to drop and to drop as what.

            valid values: PartOpr, JobOper, QuoteOpr  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      pass

class InsertBOMOper_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertMaterialWithStage_input:
   """ Required : 
   ipJobAsmblRowID
   ipPartNum
   ipOperSeq
   ipMtlSeq
   ipBeforeMtlRowid
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   ipRelatedStage
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number being added  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The material seq to use  """  
      self.ipBeforeMtlRowid:str = obj["ipBeforeMtlRowid"]
      """  The material rowid to insert material before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      self.ipRelatedStage:str = obj["ipRelatedStage"]
      """  The related stage for the ingredient(material)  """  
      pass

class InsertMaterialWithStage_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertMaterial_input:
   """ Required : 
   ipJobAsmblRowID
   ipPartNum
   ipOperSeq
   ipMtlSeq
   ipBeforeMtlRowid
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number being added  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The material seq to use  """  
      self.ipBeforeMtlRowid:str = obj["ipBeforeMtlRowid"]
      """  The material rowid to insert material before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      pass

class InsertMaterial_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertNewJobAsmbl_input:
   """ Required : 
   ds
   jobNum
   assemblySeq
   bomLevel
   priorAssemblySeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      self.jobNum:str = obj["jobNum"]
      """  Assembly's parent Job  """  
      self.assemblySeq:int = obj["assemblySeq"]
      """  Assembly's parent assembly Seq  """  
      self.bomLevel:int = obj["bomLevel"]
      """  Assembly's parent BOMLevel  """  
      self.priorAssemblySeq:int = obj["priorAssemblySeq"]
      """  If adding a sub-assembly record, this value is 0.  If

            insterting after a specific assembly then use that record's assembly seq (must be different

            from the parent assembly seq)  """  
      pass

class InsertNewJobAsmbl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class InsertNewJobMtl_input:
   """ Required : 
   ipJobAsmblRowID
   ipPartNum
   ipOperSeq
   ipMtlSeq
   ipBeforeMtlRowid
   ds
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number being added  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipMtlSeq:int = obj["ipMtlSeq"]
      """  The material seq to use  """  
      self.ipBeforeMtlRowid:str = obj["ipBeforeMtlRowid"]
      """  The material rowid to insert material before  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class InsertNewJobMtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class InsertNewJobOper_input:
   """ Required : 
   ipJobAsmblRowID
   ipNewOprSeq
   ipBeforeOperRowid
   ds
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the operation to  """  
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      """  The new operation seq  """  
      self.ipBeforeOperRowid:str = obj["ipBeforeOperRowid"]
      """  The operation rowid to insert operation before  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class InsertNewJobOper_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class InsertNewSubAssembly_input:
   """ Required : 
   ipJobAsmblRowID
   ipPartNum
   ipOperSeq
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number being added  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      pass

class InsertNewSubAssembly_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.revisionNum:str = obj["parameters"]
      self.newJobAsmblSeq:int = obj["parameters"]
      self.newJobAsmblSysRowID:str = obj["parameters"]
      pass

      """  output parameters  """  

class InsertOpDtlCapability_input:
   """ Required : 
   ipJobOperRowID
   ipCapabilityID
   ipNewOpDtlSeq
   ipBeforeOpDtlRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobOperRowID:str = obj["ipJobOperRowID"]
      """  The rowid of the JobOper record to add the operation detail to  """  
      self.ipCapabilityID:str = obj["ipCapabilityID"]
      """  The Capability ID being added  """  
      self.ipNewOpDtlSeq:int = obj["ipNewOpDtlSeq"]
      """  The new operation detail seq  """  
      self.ipBeforeOpDtlRowid:str = obj["ipBeforeOpDtlRowid"]
      """  The operation detail rowid to insert operation detail before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOpDtlCapability_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertOpDtlResGroup_input:
   """ Required : 
   ipJobOperRowID
   ipResourceGrpID
   ipNewOpDtlSeq
   ipBeforeOpDtlRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobOperRowID:str = obj["ipJobOperRowID"]
      """  The rowid of the JobOper record to add the operation detail to  """  
      self.ipResourceGrpID:str = obj["ipResourceGrpID"]
      """  The Resource Group ID being added  """  
      self.ipNewOpDtlSeq:int = obj["ipNewOpDtlSeq"]
      """  The new operation detail seq  """  
      self.ipBeforeOpDtlRowid:str = obj["ipBeforeOpDtlRowid"]
      """  The operation detail rowid to insert operation detail before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOpDtlResGroup_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertOpDtlResource_input:
   """ Required : 
   ipJobOperRowID
   ipResourceID
   ipNewOpDtlSeq
   ipBeforeOpDtlRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobOperRowID:str = obj["ipJobOperRowID"]
      """  The rowid of the JobOper record to add the operation detail to  """  
      self.ipResourceID:str = obj["ipResourceID"]
      """  The Resource ID being added  """  
      self.ipNewOpDtlSeq:int = obj["ipNewOpDtlSeq"]
      """  The new operation detail seq  """  
      self.ipBeforeOpDtlRowid:str = obj["ipBeforeOpDtlRowid"]
      """  The operation detail rowid to insert operation detail before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOpDtlResource_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class InsertOperCapability_input:
   """ Required : 
   ipJobAsmblRowID
   ipCapabilityID
   ipNewOprSeq
   ipBeforeOprRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the operation detail to  """  
      self.ipCapabilityID:str = obj["ipCapabilityID"]
      """  The Capability ID being added  """  
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      """  The new operation seq  """  
      self.ipBeforeOprRowid:str = obj["ipBeforeOprRowid"]
      """  The operation rowid to insert operation before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOperCapability_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class InsertOperResGroup_input:
   """ Required : 
   ipJobAsmblRowID
   ipResourceGrpID
   ipNewOprSeq
   ipBeforeOprRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the operation detail to  """  
      self.ipResourceGrpID:str = obj["ipResourceGrpID"]
      """  The Resource Group ID being added  """  
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      """  The new operation seq  """  
      self.ipBeforeOprRowid:str = obj["ipBeforeOprRowid"]
      """  The operation rowid to insert operation before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOperResGroup_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class InsertOperResource_input:
   """ Required : 
   ipJobAsmblRowID
   ipResourceID
   ipNewOprSeq
   ipBeforeOprRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the operation detail to  """  
      self.ipResourceID:str = obj["ipResourceID"]
      """  The Resource ID being added  """  
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      """  The new operation seq  """  
      self.ipBeforeOprRowid:str = obj["ipBeforeOprRowid"]
      """  The operation rowid to insert operation before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOperResource_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class InsertOperationOP_input:
   """ Required : 
   ipJobAsmblRowID
   ipOpCode
   ipNewOprSeq
   ipBeforeOperRowid
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the operation to  """  
      self.ipOpCode:str = obj["ipOpCode"]
      """  The operation code being added  """  
      self.ipNewOprSeq:int = obj["ipNewOprSeq"]
      """  The new operation seq  """  
      self.ipBeforeOperRowid:str = obj["ipBeforeOperRowid"]
      """  The operation rowid to insert operation before  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      pass

class InsertOperationOP_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class InsertSubAssembly_input:
   """ Required : 
   ipJobAsmblRowID
   ipPartNum
   ipOperSeq
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipJobAsmblRowID:str = obj["ipJobAsmblRowID"]
      """  The rowid of the JobAsmbl record to add the material to  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number being added  """  
      self.ipOperSeq:int = obj["ipOperSeq"]
      """  The related operation seq (or 0 if unrelated)  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      pass

class InsertSubAssembly_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class JobAsmblChildDelete_input:
   """ Required : 
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class JobAsmblChildDelete_output:
   def __init__(self, obj):
      pass

class JobScheduling_input:
   """ Required : 
   ipJobNum
   ipReturn
   ipStartAssemblySeq
   ipCurrentAssemblySeq
   ipCompleteTree
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The  Job to schedule  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical used to determine if you would like the dataset refreshed and brought back.  """  
      self.ipStartAssemblySeq:int = obj["ipStartAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCurrentAssemblySeq:int = obj["ipCurrentAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to retun a complete dataset for this job number?  """  
      pass

class JobScheduling_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class OnChangingJobOperRevisionNum_input:
   """ Required : 
   revisionNum
   ds
   """  
   def __init__(self, obj):
      self.revisionNum:str = obj["revisionNum"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingJobOperRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingJobPartRevisionNum_input:
   """ Required : 
   revisionNum
   ds
   """  
   def __init__(self, obj):
      self.revisionNum:str = obj["revisionNum"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingJobPartRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingJobProdAttributeSetID_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingJobProdAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingJobProdNumberOfPieces_input:
   """ Required : 
   numberOfPieces
   ds
   """  
   def __init__(self, obj):
      self.numberOfPieces:int = obj["numberOfPieces"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingJobProdNumberOfPieces_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingMtlRevisionNum_input:
   """ Required : 
   revisionNum
   ds
   """  
   def __init__(self, obj):
      self.revisionNum:str = obj["revisionNum"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingMtlRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingNumberOfPieces_input:
   """ Required : 
   numberOfPieces
   ds
   """  
   def __init__(self, obj):
      self.numberOfPieces:int = obj["numberOfPieces"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingNumberOfPieces_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingSalvageAttributeSetID_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingSalvageAttributeSetID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingSalvageNumberOfPieces_input:
   """ Required : 
   salvageNumberOfPieces
   ds
   """  
   def __init__(self, obj):
      self.salvageNumberOfPieces:int = obj["salvageNumberOfPieces"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingSalvageNumberOfPieces_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingSalvageRevisionNum_input:
   """ Required : 
   revisionNum
   ds
   """  
   def __init__(self, obj):
      self.revisionNum:str = obj["revisionNum"]
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class OnChangingSalvageRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PopulateCallContext_input:
   """ Required : 
   jobNum
   assemblySeq
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      pass

class PopulateCallContext_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.callContext:str = obj["parameters"]
      pass

      """  output parameters  """  

class PreCheckNewJobProd_input:
   """ Required : 
   ipJobNum
   ipPartNum
   ipMakeToType
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The job number to create the jobprod for  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  The part number to create the jobprod for  """  
      self.ipMakeToType:str = obj["ipMakeToType"]
      """  The new maketotype value to create the jobprod with.

            Valid Values: STOCK, ORDER, JOB  """  
      pass

class PreCheckNewJobProd_output:
   def __init__(self, obj):
      pass

class PreGetDetails_input:
   """ Required : 
   sourcePartNum
   sourceRevisionNum
   sourceFile
   targetJobNum
   targetAsm
   sourceSysRowID
   """  
   def __init__(self, obj):
      self.sourcePartNum:str = obj["sourcePartNum"]
      """  Indicates the source part number to get details from  """  
      self.sourceRevisionNum:str = obj["sourceRevisionNum"]
      """  Indicates the source revision number to get details from  """  
      self.sourceFile:str = obj["sourceFile"]
      """  Indicates where the details are being appended from.  Either Quote,

            Job or Method  """  
      self.targetJobNum:str = obj["targetJobNum"]
      """  Target Job Number  """  
      self.targetAsm:int = obj["targetAsm"]
      """  Sequence of the target Assembly  """  
      self.sourceSysRowID:str = obj["sourceSysRowID"]
      pass

class PreGetDetails_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      self.BasePartNum:str = obj["parameters"]
      self.BaseRevisionNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class PreInsertSubAssembly_input:
   """ Required : 
   ipPartNum
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  The inputted part number  """  
      pass

class PreInsertSubAssembly_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class RemoveFromSchedule_input:
   """ Required : 
   ipJobNum
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  Job number  """  
      pass

class RemoveFromSchedule_output:
   def __init__(self, obj):
      pass

class ResequenceMaterials_input:
   """ Required : 
   ipJobNum
   ipAssemblySeq
   ipCompleteTree
   ipResequenceBy
   ipGetDatasetForTree
   ipReturn
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number to return data for.  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      self.ipResequenceBy:str = obj["ipResequenceBy"]
      """  Will provide the field to resequence the materials by.  """  
      self.ipGetDatasetForTree:bool = obj["ipGetDatasetForTree"]
      """  Used for GetDatasetForTree, Would you like to retun a complete dataset for this Job  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical to determine if you would like the dataset refreshed and brought back

            refreshed by GetDatasetForTree?  True = call GetDatasetFor, False = call GetByID  """  
      pass

class ResequenceMaterials_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class ResequenceOperations_input:
   """ Required : 
   ipJobNum
   ipAssemblySeq
   ipCompleteTree
   ipGetDatasetForTree
   ipReturn
   ipOrderOprByStageSeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The Job Number to return data for.  """  
      self.ipAssemblySeq:int = obj["ipAssemblySeq"]
      """  The Assembly Sequence to return data for.  """  
      self.ipCompleteTree:bool = obj["ipCompleteTree"]
      """  Would you like to return a complete dataset for this job number?  """  
      self.ipGetDatasetForTree:bool = obj["ipGetDatasetForTree"]
      """  Used for GetDatasetForTree, Would you like to retun a complete dataset for this Job  """  
      self.ipReturn:bool = obj["ipReturn"]
      """  Logical to determine if you would like the dataset refreshed and brought back

             refreshed by GetDatasetForTree?  True = call GetDatasetFor, False = call GetByID  """  
      self.ipOrderOprByStageSeq:bool = obj["ipOrderOprByStageSeq"]
      """  If true ECOOprs are retrieved ordered by their parent StageSeq in order to correctly resequence

             operations after changing a StageSeq  """  
      pass

class ResequenceOperations_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_JobEntryTableset] = obj["returnObj"]
      pass

class SetKBMaxConfigProdID_input:
   """ Required : 
   jobNum
   kbConfigProdID
   assemblySeq
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      """  Job Number  """  
      self.kbConfigProdID:int = obj["kbConfigProdID"]
      """  CPQ Quote Product ID  """  
      self.assemblySeq:int = obj["assemblySeq"]
      """  Job Assembly sequence  """  
      pass

class SetKBMaxConfigProdID_output:
   def __init__(self, obj):
      pass

class SyncKBMaxConfigurator_input:
   """ Required : 
   jobNum
   kbConfigProdID
   assemblySeq
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      """  Job Number  """  
      self.kbConfigProdID:int = obj["kbConfigProdID"]
      """  CPQ Quote Product ID  """  
      self.assemblySeq:int = obj["assemblySeq"]
      """  Job Assembly sequence  """  
      pass

class SyncKBMaxConfigurator_output:
   def __init__(self, obj):
      pass

class UpdateExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtJobEntryTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtJobEntryTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class UpdateKBMaxConfigurator_input:
   """ Required : 
   jobNum
   assemblySeq
   configuredProductJson
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      """  Job Number  """  
      self.assemblySeq:int = obj["assemblySeq"]
      """  Job Assembly sequence  """  
      self.configuredProductJson:str = obj["configuredProductJson"]
      """  KBMax configurator data passed from the embed API  """  
      pass

class UpdateKBMaxConfigurator_output:
   def __init__(self, obj):
      pass

class Update_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class Update_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateInspection_input:
   """ Required : 
   ipProposedInspPlan
   ipProposedSpecId
   iptable
   setRev
   ds
   """  
   def __init__(self, obj):
      self.ipProposedInspPlan:str = obj["ipProposedInspPlan"]
      """  The new proposed InspPlanPartNum value  """  
      self.ipProposedSpecId:str = obj["ipProposedSpecId"]
      """  The new proposed SpecID value  """  
      self.iptable:str = obj["iptable"]
      """  table name  """  
      self.setRev:bool = obj["setRev"]
      """  if set default revision  """  
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

class ValidateInspection_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_JobEntryTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateJobDuomAttributes_input:
   """ Required : 
   ValidationLevel
   JobNum
   JobEngineered
   JobReleased
   """  
   def __init__(self, obj):
      self.ValidationLevel:str = obj["ValidationLevel"]
      """  Options are: "JobEngineered" or "JobReleased"  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number to be validated  """  
      self.JobEngineered:bool = obj["JobEngineered"]
      """  Current value or proposed value of JobEngineered  """  
      self.JobReleased:bool = obj["JobReleased"]
      """  Current value or proposed value of JobReleased  """  
      pass

class ValidateJobDuomAttributes_output:
   def __init__(self, obj):
      pass

class ValidateJobNumJobType_input:
   """ Required : 
   jobNum
   jobType
   """  
   def __init__(self, obj):
      self.jobNum:str = obj["jobNum"]
      """  The Job Number to validate.  """  
      self.jobType:str = obj["jobType"]
      """  Job must be one of these types else it is an error. jobType can be blank, no constraint  """  
      pass

class ValidateJobNumJobType_output:
   def __init__(self, obj):
      pass

class ValidateJobNum_input:
   """ Required : 
   ipJobNum
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  The entered job number.  """  
      pass

class ValidateJobNum_output:
   def __init__(self, obj):
      pass

class ValidateLinkToContractData_input:
   """ Required : 
   bLinkToContract
   partNum
   jobnum
   tablename
   """  
   def __init__(self, obj):
      self.bLinkToContract:bool = obj["bLinkToContract"]
      """  Indicates if LinkToContract was selected  """  
      self.partNum:str = obj["partNum"]
      """  Part Number to be validated  """  
      self.jobnum:str = obj["jobnum"]
      """  Job Number to find the ContractID row.  """  
      self.tablename:str = obj["tablename"]
      """  Table where the error is generated.  """  
      pass

class ValidateLinkToContractData_output:
   def __init__(self, obj):
      pass

class ValidateRefDes_input:
   """ Required : 
   ipJobNum
   ipAsmSeq
   """  
   def __init__(self, obj):
      self.ipJobNum:str = obj["ipJobNum"]
      """  Job Number to validate  """  
      self.ipAsmSeq:int = obj["ipAsmSeq"]
      """  Assembly Seq of the Job Number to validate or -1 to validate all of them  """  
      pass

class ValidateRefDes_output:
   def __init__(self, obj):
      pass

class nextMtlRefDesSeq_input:
   """ Required : 
   cCompany
   cJobNum
   iAsmSeq
   """  
   def __init__(self, obj):
      self.cCompany:str = obj["cCompany"]
      self.cJobNum:str = obj["cJobNum"]
      self.iAsmSeq:int = obj["iAsmSeq"]
      pass

class nextMtlRefDesSeq_output:
   def __init__(self, obj):
      self.returnObj:int = obj["returnObj"]
      pass

class setJobMtlIsMtlConfigurationOn_input:
   """ Required : 
   ttJobMtl
   """  
   def __init__(self, obj):
      self.ttJobMtl:list[Erp_Tablesets_JobMtlRow] = obj["ttJobMtl"]
      pass

class setJobMtlIsMtlConfigurationOn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ttJobMtl:list[Erp_Tablesets_JobMtlRow] = obj["ttJobMtl"]
      pass

      """  output parameters  """  

