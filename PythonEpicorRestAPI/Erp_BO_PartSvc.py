import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.PartSvc
# Description: Part Master file. This file is the Parent to the PartSubs, PartWhse, and PartBin files.
Do not allow delete of Part record if it has existing PartBin records, if it is referenced in the OrderDtl,
JobDtl, or the PartTran file.
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/$metadata",headers=creds) as resp:
           return await resp.json()

async def get_Parts(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get Parts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_Parts
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts",headers=creds) as resp:
           return await resp.json()

async def post_Parts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_Parts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum(Company, PartNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the Part item
   Description: Calls GetByID to retrieve the Part item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_Part
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_Parts_Company_PartNum(Company, PartNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update Part for the service
   Description: Calls UpdateExt to update Part. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_Part
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_Parts_Company_PartNum(Company, PartNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete Part item
   Description: Call UpdateExt to delete Part item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_Part
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_EntityGLCs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get EntityGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_EntityGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/EntityGLCs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, PartNum, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_TaxExempts(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get TaxExempts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_TaxExempts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.TaxExemptRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/TaxExempts",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_TaxExempts_Company_RelatedToFile_Key1_Key2_TaxCode_RateCode_EffectiveFrom(Company, PartNum, RelatedToFile, Key1, Key2, TaxCode, RateCode, EffectiveFrom, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the TaxExempt item
   Description: Calls GetByID to retrieve the TaxExempt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_TaxExempt1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param EffectiveFrom: Desc: EffectiveFrom   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.TaxExemptRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/TaxExempts(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + TaxCode + "," + RateCode + "," + EffectiveFrom + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartCOOs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartCOOs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartCOOs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartCOORow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartCOOs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartCOOs_Company_PartNum_OrigCountry(Company, PartNum, OrigCountry, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartCOO item
   Description: Calls GetByID to retrieve the PartCOO item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartCOO1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrigCountry: Desc: OrigCountry   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartCOORow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartCOOs(" + Company + "," + PartNum + "," + OrigCountry + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartDims(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartDims items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartDims1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartDimRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartDims",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartDims_Company_PartNum_DimCode(Company, PartNum, DimCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartDim item
   Description: Calls GetByID to retrieve the PartDim item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartDim1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DimCode: Desc: DimCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartDimRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartDims(" + Company + "," + PartNum + "," + DimCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartLangDescs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartLangDescs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartLangDescs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartLangDescRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartLangDescs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartLangDescs_Company_PartNum_LangNameID(Company, PartNum, LangNameID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartLangDesc item
   Description: Calls GetByID to retrieve the PartLangDesc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartLangDesc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param LangNameID: Desc: LangNameID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartLangDescRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartLangDescs(" + Company + "," + PartNum + "," + LangNameID + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlanningPools(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartPlanningPools items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartPlanningPools1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlanningPoolRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlanningPools",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlanningPools_Company_PartNum_PoolPartNum(Company, PartNum, PoolPartNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlanningPool item
   Description: Calls GetByID to retrieve the PartPlanningPool item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlanningPool1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PoolPartNum: Desc: PoolPartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlanningPoolRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlanningPools(" + Company + "," + PartNum + "," + PoolPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlants(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartPlants items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartPlants1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlantRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlants",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlants_Company_PartNum_Plant(Company, PartNum, Plant, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlant item
   Description: Calls GetByID to retrieve the PartPlant item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlant1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlantRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlants(" + Company + "," + PartNum + "," + Plant + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlantPlanningAttributes(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartPlantPlanningAttributes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartPlantPlanningAttributes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlantPlanningAttributeRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlantPlanningAttributes",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPlantPlanningAttributes_Company_PartNum_Plant_AttrClassID_PlanningAttributeSetSeq(Company, PartNum, Plant, AttrClassID, PlanningAttributeSetSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlantPlanningAttribute item
   Description: Calls GetByID to retrieve the PartPlantPlanningAttribute item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlantPlanningAttribute1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param AttrClassID: Desc: AttrClassID   Required: True   Allow empty value : True
      :param PlanningAttributeSetSeq: Desc: PlanningAttributeSetSeq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlantPlanningAttributeRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPlantPlanningAttributes(" + Company + "," + PartNum + "," + Plant + "," + AttrClassID + "," + PlanningAttributeSetSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartRestrictions(Company, PartNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRestrictions items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRestrictions1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartRestrictions",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartRestrictions_Company_PartNum_RestrictionTypeID(Company, PartNum, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRestriction item
   Description: Calls GetByID to retrieve the PartRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRestriction1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartRevs(Company, PartNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRevs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRevs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartRevs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRev item
   Description: Calls GetByID to retrieve the PartRev item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRev1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartSubs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartSubs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartSubs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartSubs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartSub item
   Description: Calls GetByID to retrieve the PartSub item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartSub1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartBinInfoes(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartBinInfoes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartBinInfoes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartBinInfoRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartBinInfoes",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartBinInfoes_Company_PartNum_Plant_WarehouseCode_BinNum(Company, PartNum, Plant, WarehouseCode, BinNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartBinInfo item
   Description: Calls GetByID to retrieve the PartBinInfo item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartBinInfo1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param BinNum: Desc: BinNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartBinInfoRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartBinInfoes(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + "," + BinNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPCs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartPCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartPCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPCs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartPCs_Company_PartNum_PCType_ProdCode(Company, PartNum, PCType, ProdCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPC item
   Description: Calls GetByID to retrieve the PartPC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PCType: Desc: PCType   Required: True   Allow empty value : True
      :param ProdCode: Desc: ProdCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartPCs(" + Company + "," + PartNum + "," + PCType + "," + ProdCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartWhses(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartWhses items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartWhses1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartWhseRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartWhses",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartWhses_Company_PartNum_Plant_WarehouseCode(Company, PartNum, Plant, WarehouseCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartWhse item
   Description: Calls GetByID to retrieve the PartWhse item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartWhse1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartWhseRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartWhses(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartUOMs(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartUOMs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartUOMs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartUOMRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartUOMs",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartUOMs_Company_PartNum_UOMCode(Company, PartNum, UOMCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartUOM item
   Description: Calls GetByID to retrieve the PartUOM item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartUOM1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param UOMCode: Desc: UOMCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartUOMRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartUOMs(" + Company + "," + PartNum + "," + UOMCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartAttches(Company, PartNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartAttches",headers=creds) as resp:
           return await resp.json()

async def get_Parts_Company_PartNum_PartAttches_Company_PartNum_DrawingSeq(Company, PartNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartAttch item
   Description: Calls GetByID to retrieve the PartAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/Parts(" + Company + "," + PartNum + ")/PartAttches(" + Company + "," + PartNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_EntityGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get EntityGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_EntityGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/EntityGLCs",headers=creds) as resp:
           return await resp.json()

async def post_EntityGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_EntityGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/EntityGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def patch_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update EntityGLC for the service
   Description: Calls UpdateExt to update EntityGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete EntityGLC item
   Description: Call UpdateExt to delete EntityGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def get_TaxExempts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get TaxExempts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_TaxExempts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.TaxExemptRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/TaxExempts",headers=creds) as resp:
           return await resp.json()

async def post_TaxExempts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_TaxExempts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.TaxExemptRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.TaxExemptRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/TaxExempts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_TaxExempts_Company_RelatedToFile_Key1_Key2_TaxCode_RateCode_EffectiveFrom(Company, RelatedToFile, Key1, Key2, TaxCode, RateCode, EffectiveFrom, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the TaxExempt item
   Description: Calls GetByID to retrieve the TaxExempt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_TaxExempt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param EffectiveFrom: Desc: EffectiveFrom   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.TaxExemptRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/TaxExempts(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + TaxCode + "," + RateCode + "," + EffectiveFrom + ")",headers=creds) as resp:
           return await resp.json()

async def patch_TaxExempts_Company_RelatedToFile_Key1_Key2_TaxCode_RateCode_EffectiveFrom(Company, RelatedToFile, Key1, Key2, TaxCode, RateCode, EffectiveFrom, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update TaxExempt for the service
   Description: Calls UpdateExt to update TaxExempt. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_TaxExempt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param EffectiveFrom: Desc: EffectiveFrom   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.TaxExemptRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/TaxExempts(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + TaxCode + "," + RateCode + "," + EffectiveFrom + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_TaxExempts_Company_RelatedToFile_Key1_Key2_TaxCode_RateCode_EffectiveFrom(Company, RelatedToFile, Key1, Key2, TaxCode, RateCode, EffectiveFrom, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete TaxExempt item
   Description: Call UpdateExt to delete TaxExempt item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_TaxExempt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param EffectiveFrom: Desc: EffectiveFrom   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/TaxExempts(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + TaxCode + "," + RateCode + "," + EffectiveFrom + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartCOOs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartCOOs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartCOOs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartCOORow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOOs",headers=creds) as resp:
           return await resp.json()

async def post_PartCOOs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartCOOs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartCOORow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartCOORow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOOs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartCOOs_Company_PartNum_OrigCountry(Company, PartNum, OrigCountry, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartCOO item
   Description: Calls GetByID to retrieve the PartCOO item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartCOO
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrigCountry: Desc: OrigCountry   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartCOORow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOOs(" + Company + "," + PartNum + "," + OrigCountry + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartCOOs_Company_PartNum_OrigCountry(Company, PartNum, OrigCountry, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartCOO for the service
   Description: Calls UpdateExt to update PartCOO. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartCOO
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrigCountry: Desc: OrigCountry   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartCOORow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOOs(" + Company + "," + PartNum + "," + OrigCountry + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartCOOs_Company_PartNum_OrigCountry(Company, PartNum, OrigCountry, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartCOO item
   Description: Call UpdateExt to delete PartCOO item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartCOO
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param OrigCountry: Desc: OrigCountry   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOOs(" + Company + "," + PartNum + "," + OrigCountry + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartDims(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartDims items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartDims
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartDimRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartDims",headers=creds) as resp:
           return await resp.json()

async def post_PartDims(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartDims
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartDimRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartDimRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartDims", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartDims_Company_PartNum_DimCode(Company, PartNum, DimCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartDim item
   Description: Calls GetByID to retrieve the PartDim item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartDim
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DimCode: Desc: DimCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartDimRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartDims(" + Company + "," + PartNum + "," + DimCode + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartDims_Company_PartNum_DimCode(Company, PartNum, DimCode, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartDim for the service
   Description: Calls UpdateExt to update PartDim. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartDim
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DimCode: Desc: DimCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartDimRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartDims(" + Company + "," + PartNum + "," + DimCode + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartDims_Company_PartNum_DimCode(Company, PartNum, DimCode, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartDim item
   Description: Call UpdateExt to delete PartDim item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartDim
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DimCode: Desc: DimCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartDims(" + Company + "," + PartNum + "," + DimCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartLangDescs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartLangDescs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartLangDescs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartLangDescRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartLangDescs",headers=creds) as resp:
           return await resp.json()

async def post_PartLangDescs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartLangDescs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartLangDescRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartLangDescRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartLangDescs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartLangDescs_Company_PartNum_LangNameID(Company, PartNum, LangNameID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartLangDesc item
   Description: Calls GetByID to retrieve the PartLangDesc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartLangDesc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param LangNameID: Desc: LangNameID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartLangDescRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartLangDescs(" + Company + "," + PartNum + "," + LangNameID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartLangDescs_Company_PartNum_LangNameID(Company, PartNum, LangNameID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartLangDesc for the service
   Description: Calls UpdateExt to update PartLangDesc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartLangDesc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param LangNameID: Desc: LangNameID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartLangDescRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartLangDescs(" + Company + "," + PartNum + "," + LangNameID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartLangDescs_Company_PartNum_LangNameID(Company, PartNum, LangNameID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartLangDesc item
   Description: Call UpdateExt to delete PartLangDesc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartLangDesc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param LangNameID: Desc: LangNameID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartLangDescs(" + Company + "," + PartNum + "," + LangNameID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartPlanningPools(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartPlanningPools items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartPlanningPools
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlanningPoolRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlanningPools",headers=creds) as resp:
           return await resp.json()

async def post_PartPlanningPools(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartPlanningPools
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartPlanningPoolRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartPlanningPoolRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlanningPools", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartPlanningPools_Company_PartNum_PoolPartNum(Company, PartNum, PoolPartNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlanningPool item
   Description: Calls GetByID to retrieve the PartPlanningPool item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlanningPool
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PoolPartNum: Desc: PoolPartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlanningPoolRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlanningPools(" + Company + "," + PartNum + "," + PoolPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartPlanningPools_Company_PartNum_PoolPartNum(Company, PartNum, PoolPartNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartPlanningPool for the service
   Description: Calls UpdateExt to update PartPlanningPool. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartPlanningPool
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PoolPartNum: Desc: PoolPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartPlanningPoolRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlanningPools(" + Company + "," + PartNum + "," + PoolPartNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartPlanningPools_Company_PartNum_PoolPartNum(Company, PartNum, PoolPartNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartPlanningPool item
   Description: Call UpdateExt to delete PartPlanningPool item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartPlanningPool
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PoolPartNum: Desc: PoolPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlanningPools(" + Company + "," + PartNum + "," + PoolPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartPlants(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartPlants items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartPlants
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlantRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlants",headers=creds) as resp:
           return await resp.json()

async def post_PartPlants(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartPlants
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartPlantRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartPlantRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlants", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartPlants_Company_PartNum_Plant(Company, PartNum, Plant, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlant item
   Description: Calls GetByID to retrieve the PartPlant item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlant
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlantRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlants(" + Company + "," + PartNum + "," + Plant + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartPlants_Company_PartNum_Plant(Company, PartNum, Plant, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartPlant for the service
   Description: Calls UpdateExt to update PartPlant. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartPlant
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartPlantRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlants(" + Company + "," + PartNum + "," + Plant + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartPlants_Company_PartNum_Plant(Company, PartNum, Plant, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartPlant item
   Description: Call UpdateExt to delete PartPlant item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartPlant
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlants(" + Company + "," + PartNum + "," + Plant + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartPlantPlanningAttributes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartPlantPlanningAttributes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartPlantPlanningAttributes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPlantPlanningAttributeRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlantPlanningAttributes",headers=creds) as resp:
           return await resp.json()

async def post_PartPlantPlanningAttributes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartPlantPlanningAttributes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartPlantPlanningAttributeRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartPlantPlanningAttributeRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlantPlanningAttributes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartPlantPlanningAttributes_Company_PartNum_Plant_AttrClassID_PlanningAttributeSetSeq(Company, PartNum, Plant, AttrClassID, PlanningAttributeSetSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPlantPlanningAttribute item
   Description: Calls GetByID to retrieve the PartPlantPlanningAttribute item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPlantPlanningAttribute
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param AttrClassID: Desc: AttrClassID   Required: True   Allow empty value : True
      :param PlanningAttributeSetSeq: Desc: PlanningAttributeSetSeq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPlantPlanningAttributeRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlantPlanningAttributes(" + Company + "," + PartNum + "," + Plant + "," + AttrClassID + "," + PlanningAttributeSetSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartPlantPlanningAttributes_Company_PartNum_Plant_AttrClassID_PlanningAttributeSetSeq(Company, PartNum, Plant, AttrClassID, PlanningAttributeSetSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartPlantPlanningAttribute for the service
   Description: Calls UpdateExt to update PartPlantPlanningAttribute. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartPlantPlanningAttribute
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param AttrClassID: Desc: AttrClassID   Required: True   Allow empty value : True
      :param PlanningAttributeSetSeq: Desc: PlanningAttributeSetSeq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartPlantPlanningAttributeRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlantPlanningAttributes(" + Company + "," + PartNum + "," + Plant + "," + AttrClassID + "," + PlanningAttributeSetSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartPlantPlanningAttributes_Company_PartNum_Plant_AttrClassID_PlanningAttributeSetSeq(Company, PartNum, Plant, AttrClassID, PlanningAttributeSetSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartPlantPlanningAttribute item
   Description: Call UpdateExt to delete PartPlantPlanningAttribute item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartPlantPlanningAttribute
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param AttrClassID: Desc: AttrClassID   Required: True   Allow empty value : True
      :param PlanningAttributeSetSeq: Desc: PlanningAttributeSetSeq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPlantPlanningAttributes(" + Company + "," + PartNum + "," + Plant + "," + AttrClassID + "," + PlanningAttributeSetSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictions(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRestrictions items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRestrictions
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions",headers=creds) as resp:
           return await resp.json()

async def post_PartRestrictions(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRestrictions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRestrictionRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRestrictionRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictions_Company_PartNum_RestrictionTypeID(Company, PartNum, RestrictionTypeID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRestriction item
   Description: Calls GetByID to retrieve the PartRestriction item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRestrictionRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRestrictions_Company_PartNum_RestrictionTypeID(Company, PartNum, RestrictionTypeID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRestriction for the service
   Description: Calls UpdateExt to update PartRestriction. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRestrictionRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRestrictions_Company_PartNum_RestrictionTypeID(Company, PartNum, RestrictionTypeID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRestriction item
   Description: Call UpdateExt to delete PartRestriction item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRestriction
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictions_Company_PartNum_RestrictionTypeID_PartRestrictSubsts(Company, PartNum, RestrictionTypeID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRestrictSubsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRestrictSubsts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")/PartRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictions_Company_PartNum_RestrictionTypeID_PartRestrictSubsts_Company_PartNum_RestrictionTypeID_SubstanceID(Company, PartNum, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRestrictSubst item
   Description: Calls GetByID to retrieve the PartRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRestrictSubst1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictions(" + Company + "," + PartNum + "," + RestrictionTypeID + ")/PartRestrictSubsts(" + Company + "," + PartNum + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictSubsts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRestrictSubsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRestrictSubsts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictSubsts",headers=creds) as resp:
           return await resp.json()

async def post_PartRestrictSubsts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRestrictSubsts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRestrictSubstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRestrictSubstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictSubsts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRestrictSubsts_Company_PartNum_RestrictionTypeID_SubstanceID(Company, PartNum, RestrictionTypeID, SubstanceID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRestrictSubst item
   Description: Calls GetByID to retrieve the PartRestrictSubst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRestrictSubstRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictSubsts(" + Company + "," + PartNum + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRestrictSubsts_Company_PartNum_RestrictionTypeID_SubstanceID(Company, PartNum, RestrictionTypeID, SubstanceID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRestrictSubst for the service
   Description: Calls UpdateExt to update PartRestrictSubst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRestrictSubstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictSubsts(" + Company + "," + PartNum + "," + RestrictionTypeID + "," + SubstanceID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRestrictSubsts_Company_PartNum_RestrictionTypeID_SubstanceID(Company, PartNum, RestrictionTypeID, SubstanceID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRestrictSubst item
   Description: Call UpdateExt to delete PartRestrictSubst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRestrictSubst
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RestrictionTypeID: Desc: RestrictionTypeID   Required: True   Allow empty value : True
      :param SubstanceID: Desc: SubstanceID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRestrictSubsts(" + Company + "," + PartNum + "," + RestrictionTypeID + "," + SubstanceID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRevs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRevs
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs",headers=creds) as resp:
           return await resp.json()

async def post_PartRevs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRevs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRevRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRevRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRev item
   Description: Calls GetByID to retrieve the PartRev item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRev for the service
   Description: Calls UpdateExt to update PartRev. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRevRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRev item
   Description: Call UpdateExt to delete PartRev item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartAudits(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartAudits items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartAudits1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartAudits",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartAudits_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_ChangeDate_ChangeTime(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, ChangeDate, ChangeTime, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartAudit item
   Description: Calls GetByID to retrieve the PartAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartAudit1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartAudits(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartCOParts(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartCOParts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartCOParts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartCOPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartCOParts",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartCOParts_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_CoPartNum(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, CoPartNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartCOPart item
   Description: Calls GetByID to retrieve the PartCOPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartCOPart1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param CoPartNum: Desc: CoPartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartCOPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartCOParts(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + CoPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevInspPlans(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRevInspPlans items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRevInspPlans1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspPlanRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevInspPlans",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspPlan item
   Description: Calls GetByID to retrieve the PartRevInspPlan item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspPlan1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevInspVends(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRevInspVends items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRevInspVends1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspVendRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevInspVends",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevInspVends_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_VendorID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, VendorID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspVend item
   Description: Calls GetByID to retrieve the PartRevInspVend item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspVend1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param VendorID: Desc: VendorID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspVendRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevInspVends(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + VendorID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevAttches(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRevAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRevAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevAttches",headers=creds) as resp:
           return await resp.json()

async def get_PartRevs_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_PartRevAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevAttch item
   Description: Calls GetByID to retrieve the PartRevAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevs(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + ")/PartRevAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartAudits(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartAudits items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartAudits
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAudits",headers=creds) as resp:
           return await resp.json()

async def post_PartAudits(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartAudits
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartAuditRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartAuditRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAudits", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartAudits_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_ChangeDate_ChangeTime(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, ChangeDate, ChangeTime, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartAudit item
   Description: Calls GetByID to retrieve the PartAudit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartAuditRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAudits(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartAudits_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_ChangeDate_ChangeTime(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, ChangeDate, ChangeTime, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartAudit for the service
   Description: Calls UpdateExt to update PartAudit. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartAuditRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAudits(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + ChangeDate + "," + ChangeTime + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartAudits_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_ChangeDate_ChangeTime(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, ChangeDate, ChangeTime, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartAudit item
   Description: Call UpdateExt to delete PartAudit item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartAudit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param ChangeDate: Desc: ChangeDate   Required: True   Allow empty value : True
      :param ChangeTime: Desc: ChangeTime   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAudits(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + ChangeDate + "," + ChangeTime + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartCOParts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartCOParts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartCOParts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartCOPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOParts",headers=creds) as resp:
           return await resp.json()

async def post_PartCOParts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartCOParts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartCOPartRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartCOPartRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOParts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartCOParts_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_CoPartNum(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, CoPartNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartCOPart item
   Description: Calls GetByID to retrieve the PartCOPart item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartCOPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param CoPartNum: Desc: CoPartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartCOPartRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOParts(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + CoPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartCOParts_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_CoPartNum(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, CoPartNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartCOPart for the service
   Description: Calls UpdateExt to update PartCOPart. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartCOPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param CoPartNum: Desc: CoPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartCOPartRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOParts(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + CoPartNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartCOParts_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_CoPartNum(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, CoPartNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartCOPart item
   Description: Call UpdateExt to delete PartCOPart item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartCOPart
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param CoPartNum: Desc: CoPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartCOParts(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + CoPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlans(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRevInspPlans items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRevInspPlans
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspPlanRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans",headers=creds) as resp:
           return await resp.json()

async def post_PartRevInspPlans(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRevInspPlans
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspPlan item
   Description: Calls GetByID to retrieve the PartRevInspPlan item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspPlan
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRevInspPlan for the service
   Description: Calls UpdateExt to update PartRevInspPlan. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRevInspPlan
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRevInspPlan item
   Description: Call UpdateExt to delete PartRevInspPlan item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRevInspPlan
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_PartRevInspPlanAttches(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PartRevInspPlanAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PartRevInspPlanAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspPlanAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")/PartRevInspPlanAttches",headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlans_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_PartRevInspPlanAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspPlanAttch item
   Description: Calls GetByID to retrieve the PartRevInspPlanAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspPlanAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlans(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + ")/PartRevInspPlanAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlanAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRevInspPlanAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRevInspPlanAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspPlanAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlanAttches",headers=creds) as resp:
           return await resp.json()

async def post_PartRevInspPlanAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRevInspPlanAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlanAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspPlanAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspPlanAttch item
   Description: Calls GetByID to retrieve the PartRevInspPlanAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspPlanAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlanAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRevInspPlanAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRevInspPlanAttch for the service
   Description: Calls UpdateExt to update PartRevInspPlanAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRevInspPlanAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRevInspPlanAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlanAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRevInspPlanAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_SeqPlan_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, SeqPlan, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRevInspPlanAttch item
   Description: Call UpdateExt to delete PartRevInspPlanAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRevInspPlanAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param SeqPlan: Desc: SeqPlan   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspPlanAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + SeqPlan + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspVends(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRevInspVends items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRevInspVends
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevInspVendRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspVends",headers=creds) as resp:
           return await resp.json()

async def post_PartRevInspVends(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRevInspVends
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRevInspVendRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRevInspVendRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspVends", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRevInspVends_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_VendorID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, VendorID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevInspVend item
   Description: Calls GetByID to retrieve the PartRevInspVend item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevInspVend
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param VendorID: Desc: VendorID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevInspVendRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspVends(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + VendorID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRevInspVends_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_VendorID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, VendorID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRevInspVend for the service
   Description: Calls UpdateExt to update PartRevInspVend. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRevInspVend
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param VendorID: Desc: VendorID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRevInspVendRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspVends(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + VendorID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRevInspVends_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_VendorID(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, VendorID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRevInspVend item
   Description: Call UpdateExt to delete PartRevInspVend item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRevInspVend
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param VendorID: Desc: VendorID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevInspVends(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + VendorID + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartRevAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartRevAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartRevAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartRevAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevAttches",headers=creds) as resp:
           return await resp.json()

async def post_PartRevAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartRevAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartRevAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartRevAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartRevAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartRevAttch item
   Description: Calls GetByID to retrieve the PartRevAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartRevAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartRevAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartRevAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartRevAttch for the service
   Description: Calls UpdateExt to update PartRevAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartRevAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartRevAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartRevAttches_Company_PartNum_RevisionNum_AltMethod_ProcessMfgID_DrawingSeq(Company, PartNum, RevisionNum, AltMethod, ProcessMfgID, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartRevAttch item
   Description: Call UpdateExt to delete PartRevAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartRevAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param RevisionNum: Desc: RevisionNum   Required: True   Allow empty value : True
      :param AltMethod: Desc: AltMethod   Required: True   Allow empty value : True
      :param ProcessMfgID: Desc: ProcessMfgID   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartRevAttches(" + Company + "," + PartNum + "," + RevisionNum + "," + AltMethod + "," + ProcessMfgID + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartSubs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartSubs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartSubs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartSubs",headers=creds) as resp:
           return await resp.json()

async def post_PartSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartSubs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartSub item
   Description: Calls GetByID to retrieve the PartSub item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartSub for the service
   Description: Calls UpdateExt to update PartSub. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartSub item
   Description: Call UpdateExt to delete PartSub item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartBinInfoes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartBinInfoes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartBinInfoes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartBinInfoRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartBinInfoes",headers=creds) as resp:
           return await resp.json()

async def post_PartBinInfoes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartBinInfoes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartBinInfoRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartBinInfoRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartBinInfoes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartBinInfoes_Company_PartNum_Plant_WarehouseCode_BinNum(Company, PartNum, Plant, WarehouseCode, BinNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartBinInfo item
   Description: Calls GetByID to retrieve the PartBinInfo item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartBinInfo
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param BinNum: Desc: BinNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartBinInfoRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartBinInfoes(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + "," + BinNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartBinInfoes_Company_PartNum_Plant_WarehouseCode_BinNum(Company, PartNum, Plant, WarehouseCode, BinNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartBinInfo for the service
   Description: Calls UpdateExt to update PartBinInfo. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartBinInfo
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param BinNum: Desc: BinNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartBinInfoRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartBinInfoes(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + "," + BinNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartBinInfoes_Company_PartNum_Plant_WarehouseCode_BinNum(Company, PartNum, Plant, WarehouseCode, BinNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartBinInfo item
   Description: Call UpdateExt to delete PartBinInfo item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartBinInfo
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param BinNum: Desc: BinNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartBinInfoes(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + "," + BinNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartPCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartPCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartPCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartPCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPCs",headers=creds) as resp:
           return await resp.json()

async def post_PartPCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartPCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartPCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartPCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartPCs_Company_PartNum_PCType_ProdCode(Company, PartNum, PCType, ProdCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartPC item
   Description: Calls GetByID to retrieve the PartPC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartPC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PCType: Desc: PCType   Required: True   Allow empty value : True
      :param ProdCode: Desc: ProdCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartPCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPCs(" + Company + "," + PartNum + "," + PCType + "," + ProdCode + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartPCs_Company_PartNum_PCType_ProdCode(Company, PartNum, PCType, ProdCode, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartPC for the service
   Description: Calls UpdateExt to update PartPC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartPC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PCType: Desc: PCType   Required: True   Allow empty value : True
      :param ProdCode: Desc: ProdCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartPCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPCs(" + Company + "," + PartNum + "," + PCType + "," + ProdCode + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartPCs_Company_PartNum_PCType_ProdCode(Company, PartNum, PCType, ProdCode, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartPC item
   Description: Call UpdateExt to delete PartPC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartPC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param PCType: Desc: PCType   Required: True   Allow empty value : True
      :param ProdCode: Desc: ProdCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartPCs(" + Company + "," + PartNum + "," + PCType + "," + ProdCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartWhses(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartWhses items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartWhses
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartWhseRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartWhses",headers=creds) as resp:
           return await resp.json()

async def post_PartWhses(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartWhses
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartWhseRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartWhseRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartWhses", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartWhses_Company_PartNum_Plant_WarehouseCode(Company, PartNum, Plant, WarehouseCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartWhse item
   Description: Calls GetByID to retrieve the PartWhse item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartWhse
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartWhseRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartWhses(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartWhses_Company_PartNum_Plant_WarehouseCode(Company, PartNum, Plant, WarehouseCode, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartWhse for the service
   Description: Calls UpdateExt to update PartWhse. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartWhse
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartWhseRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartWhses(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartWhses_Company_PartNum_Plant_WarehouseCode(Company, PartNum, Plant, WarehouseCode, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartWhse item
   Description: Call UpdateExt to delete PartWhse item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartWhse
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param WarehouseCode: Desc: WarehouseCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartWhses(" + Company + "," + PartNum + "," + Plant + "," + WarehouseCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartUOMs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartUOMs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartUOMs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartUOMRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartUOMs",headers=creds) as resp:
           return await resp.json()

async def post_PartUOMs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartUOMs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartUOMRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartUOMRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartUOMs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartUOMs_Company_PartNum_UOMCode(Company, PartNum, UOMCode, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartUOM item
   Description: Calls GetByID to retrieve the PartUOM item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartUOM
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param UOMCode: Desc: UOMCode   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartUOMRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartUOMs(" + Company + "," + PartNum + "," + UOMCode + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartUOMs_Company_PartNum_UOMCode(Company, PartNum, UOMCode, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartUOM for the service
   Description: Calls UpdateExt to update PartUOM. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartUOM
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param UOMCode: Desc: UOMCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartUOMRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartUOMs(" + Company + "," + PartNum + "," + UOMCode + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartUOMs_Company_PartNum_UOMCode(Company, PartNum, UOMCode, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartUOM item
   Description: Call UpdateExt to delete PartUOM item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartUOM
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param UOMCode: Desc: UOMCode   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartUOMs(" + Company + "," + PartNum + "," + UOMCode + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAttches",headers=creds) as resp:
           return await resp.json()

async def post_PartAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartAttches_Company_PartNum_DrawingSeq(Company, PartNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartAttch item
   Description: Calls GetByID to retrieve the PartAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAttches(" + Company + "," + PartNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartAttches_Company_PartNum_DrawingSeq(Company, PartNum, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartAttch for the service
   Description: Calls UpdateExt to update PartAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAttches(" + Company + "," + PartNum + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartAttches_Company_PartNum_DrawingSeq(Company, PartNum, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartAttch item
   Description: Call UpdateExt to delete PartAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/PartAttches(" + Company + "," + PartNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_List(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartListRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def get_GetList(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_WhereUsedTrackUp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method WhereUsedTrackUp
   Description: Adds new part to Used List
   OperationID: WhereUsedTrackUp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/WhereUsedTrackUp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/WhereUsedTrackUp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_WhereUsedTrackDown(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method WhereUsedTrackDown
   Description: Removes part From Used List
   OperationID: WhereUsedTrackDown
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/WhereUsedTrackDown_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/WhereUsedTrackDown_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_WhereUsedRtnStart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method WhereUsedRtnStart
   Description: Clear Used List
   OperationID: WhereUsedRtnStart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/WhereUsedRtnStart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/WhereUsedRtnStart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetWhereUsedECORevClause(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetWhereUsedECORevClause
   Description: Calculates ECORevClause where clause
   OperationID: GetWhereUsedECORevClause
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetWhereUsedECORevClause_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetWhereUsedECORevClause_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetConfTypeDescList(epicorHeaders = None):
   """  
   Summary: Invoke method GetConfTypeDescList
   Description: Method to call to get a Code Description list.
   OperationID: GetConfTypeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetConfTypeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ValidateNewPartRevAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateNewPartRevAttch
   Description: Limit addition of attachments to approved Part Revisions
   OperationID: ValidateNewPartRevAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateNewPartRevAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateNewPartRevAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateAfterGlbPartLink(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateAfterGlbPartLink
   Description: The call to Update after linking to a global part.  Need the ErpCallContext to check during update to skip some checks in ValidateTrackInventoryAttributes
   OperationID: UpdateAfterGlbPartLink
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateAfterGlbPartLink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateAfterGlbPartLink_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartUOMPlasticTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartUOMPlasticTax
   OperationID: GetNewPartUOMPlasticTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartUOMPlasticTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartUOMPlasticTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartUOMPlasticTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartUOMPlasticTax
   OperationID: GetPartUOMPlasticTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartUOMPlasticTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartUOMPlasticTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PartUOMPlasticTaxUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PartUOMPlasticTaxUpdate
   OperationID: PartUOMPlasticTaxUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PartUOMPlasticTaxUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PartUOMPlasticTaxUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PartUOMPlasticTaxDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PartUOMPlasticTaxDelete
   OperationID: PartUOMPlasticTaxDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PartUOMPlasticTaxDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PartUOMPlasticTaxDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSerialNumberFormatLeadingZeros(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSerialNumberFormatLeadingZeros
   Description: Calculates Serial Number Format for Kinetic
   OperationID: GetSerialNumberFormatLeadingZeros
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSerialNumberFormatLeadingZeros_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSerialNumberFormatLeadingZeros_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSNBaseDataTypePrep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSNBaseDataTypePrep
   OperationID: ChangePartSNBaseDataTypePrep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSNBaseDataTypePrep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSNBaseDataTypePrep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePlantSNBaseDataTypePrep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePlantSNBaseDataTypePrep
   OperationID: ChangePlantSNBaseDataTypePrep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePlantSNBaseDataTypePrep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePlantSNBaseDataTypePrep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantSourceTypePrep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantSourceTypePrep
   Description: Used when the SourceType field of PartPlant or the TypeCode of Part is being changed
to a new value and the user selected to update the PartPlant records with the change.
It will check to see if a configuration exists for the part.  If a configuration
exists it will return a warning message in ruleMessage that should be displayed to the user as a warning.
If the configuration is not marked as single-level configuration then a message will be returned in
singleLevelConfMsg which should be displayed to the user asking if they want to continue.  If they answer Yes
to continue then the method DeleteMultiLevelRules should be called.
   OperationID: ChangePartPlantSourceTypePrep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantSourceTypePrep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantSourceTypePrep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSNMaskPrefixSuffixPrep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSNMaskPrefixSuffixPrep
   OperationID: ChangePartSNMaskPrefixSuffixPrep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSNMaskPrefixSuffixPrep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSNMaskPrefixSuffixPrep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePlantSNMaskPrefixSuffixPrep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePlantSNMaskPrefixSuffixPrep
   OperationID: ChangePlantSNMaskPrefixSuffixPrep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePlantSNMaskPrefixSuffixPrep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePlantSNMaskPrefixSuffixPrep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckColumnValue(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckColumnValue
   OperationID: CheckColumnValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckColumnValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckColumnValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRestrictedMethodsInfo(epicorHeaders = None):
   """  
   Summary: Invoke method GetRestrictedMethodsInfo
   OperationID: GetRestrictedMethodsInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRestrictedMethodsInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetValidatePartWarehouseBin(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetValidatePartWarehouseBin
   Description: Finds bin related with a Warehouse, and return binNum only if part has such warehouse configured.
   OperationID: GetValidatePartWarehouseBin
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetValidatePartWarehouseBin_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetValidatePartWarehouseBin_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPart
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartCOO(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartCOO
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartCOO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartCOO_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartCOO_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartDim(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartDim
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartDim
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartDim_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartDim_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartLangDesc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartLangDesc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartLangDesc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartLangDesc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartLangDesc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartPlanningPool(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartPlanningPool
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartPlanningPool
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartPlanningPool_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartPlanningPool_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartPlant(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartPlant
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartPlant
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartPlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartPlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartPlantPlanningAttribute(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartPlantPlanningAttribute
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartPlantPlanningAttribute
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartPlantPlanningAttribute_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartPlantPlanningAttribute_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRestriction(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRestriction
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRestriction
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRestriction_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRestriction_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRestrictSubst(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRestrictSubst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRestrictSubst
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRestrictSubst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRestrictSubst_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRev(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRev
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRev
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRev_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRev_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRevAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRevAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRevAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRevAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRevAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartAudit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartAudit
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartAudit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartAudit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartAudit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartCOPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartCOPart
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartCOPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartCOPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartCOPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRevInspPlan(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRevInspPlan
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRevInspPlan
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRevInspPlan_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRevInspPlan_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRevInspPlanAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRevInspPlanAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRevInspPlanAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRevInspPlanAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRevInspPlanAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartRevInspVend(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartRevInspVend
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartRevInspVend
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartRevInspVend_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartRevInspVend_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartSubs
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartSubs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartSubs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartPC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartPC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartPC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartPC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartPC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartWhse(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartWhse
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartWhse
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartWhse_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartWhse_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartBinInfo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartBinInfo
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartBinInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartBinInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartBinInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPartUOM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPartUOM
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPartUOM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPartUOM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPartUOM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewEntityGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewEntityGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewEntityGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewEntityGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewEntityGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewTaxExempt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewTaxExempt
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewTaxExempt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewTaxExempt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewTaxExempt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteByID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetByID(partNum, epicorHeaders = None):
   """  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "partNum=" + partNum

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetRows(whereClausePart, whereClausePartAttch, whereClausePartCOO, whereClausePartDim, whereClausePartLangDesc, whereClausePartPlanningPool, whereClausePartPlant, whereClausePartPlantPlanningAttribute, whereClausePartRestriction, whereClausePartRestrictSubst, whereClausePartRev, whereClausePartRevAttch, whereClausePartAudit, whereClausePartCOPart, whereClausePartRevInspPlan, whereClausePartRevInspPlanAttch, whereClausePartRevInspVend, whereClausePartSubs, whereClausePartPC, whereClausePartWhse, whereClausePartBinInfo, whereClausePartUOM, whereClauseEntityGLC, whereClauseTaxExempt, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePart=" + whereClausePart
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartAttch=" + whereClausePartAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartCOO=" + whereClausePartCOO
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartDim=" + whereClausePartDim
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartLangDesc=" + whereClausePartLangDesc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartPlanningPool=" + whereClausePartPlanningPool
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartPlant=" + whereClausePartPlant
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartPlantPlanningAttribute=" + whereClausePartPlantPlanningAttribute
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRestriction=" + whereClausePartRestriction
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRestrictSubst=" + whereClausePartRestrictSubst
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRev=" + whereClausePartRev
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRevAttch=" + whereClausePartRevAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartAudit=" + whereClausePartAudit
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartCOPart=" + whereClausePartCOPart
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRevInspPlan=" + whereClausePartRevInspPlan
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRevInspPlanAttch=" + whereClausePartRevInspPlanAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartRevInspVend=" + whereClausePartRevInspVend
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartSubs=" + whereClausePartSubs
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartPC=" + whereClausePartPC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartWhse=" + whereClausePartWhse
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartBinInfo=" + whereClausePartBinInfo
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartUOM=" + whereClausePartUOM
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseEntityGLC=" + whereClauseEntityGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseTaxExempt=" + whereClauseTaxExempt
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowID(id, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "id=" + id

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowIDs(ids, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "ids=" + ids

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_Update(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartGlobalFields(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartGlobalFields
   Description: Gets Part global fields
   OperationID: GetPartGlobalFields
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartGlobalFields_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartGlobalFields_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BuildPartPlantPlanningAttributeTable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BuildPartPlantPlanningAttributeTable
   Description: Add records in PartPlantPlanningAttribute table against the current part and PartPlant
   OperationID: BuildPartPlantPlanningAttributeTable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildPartPlantPlanningAttributeTable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildPartPlantPlanningAttributeTable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AllowDimensionMaintenance(epicorHeaders = None):
   """  
   Summary: Invoke method AllowDimensionMaintenance
   Description: This method exists soley for the purpose of allowing security for
dimension maintenance to be defined
   OperationID: AllowDimensionMaintenance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllowDimensionMaintenance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_AllowInventoryInfo(epicorHeaders = None):
   """  
   Summary: Invoke method AllowInventoryInfo
   Description: This method exists soley for the purpose of allowing security for
inventory information to be defined
   OperationID: AllowInventoryInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllowInventoryInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_AllowLotMaintenance(epicorHeaders = None):
   """  
   Summary: Invoke method AllowLotMaintenance
   Description: This method exists soley for the purpose of allowing security for
lot maintenance to be defined
   OperationID: AllowLotMaintenance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllowLotMaintenance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_AllowPurchasingInfo(epicorHeaders = None):
   """  
   Summary: Invoke method AllowPurchasingInfo
   Description: This method exists soley for the purpose of allowing security for
purchasing information to be defined
   OperationID: AllowPurchasingInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllowPurchasingInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_AllowViewLotCosts(epicorHeaders = None):
   """  
   Summary: Invoke method AllowViewLotCosts
   Description: This method exists soley for the purpose of allowing security for
viewing part lot costs to be defined
   OperationID: AllowViewLotCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllowViewLotCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ChangeMRPWarning(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMRPWarning
   Description: When the ProcessMRP flag for a Part/Plant is changed from Yes to No all related unfirm jobs will be deleted
when the record is committed to the database.
You can use this method to provide a warning to the user of this fact and provide a confirmation dialog. This is
intended to be called upon value change of the ProcessMRP field.
If there are existing unfirm Jobs for the given Part/PlantThis warningMsg will contain a translated text message
which can be used to display in your message dialog.  Otherwise it returns blanks and there is no need to provide a
dialog.
   OperationID: ChangeMRPWarning
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMRPWarning_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMRPWarning_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetTrackInventoryByRevision(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetTrackInventoryByRevision
   Description: Returns TrackInventoryByRevision value for the given PartNum
   OperationID: GetTrackInventoryByRevision
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetTrackInventoryByRevision_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetTrackInventoryByRevision_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartBinInfoKBCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartBinInfoKBCode
   Description: Used when the KBCode field of PartBinInfo is being changed to a new value.
It will validate the new KBCode field.
If it is valid the dataset will be updated with the new KBCode and related KBActionCode.
   OperationID: ChangePartBinInfoKBCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartBinInfoKBCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartBinInfoKBCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartBuyToOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartBuyToOrder
   Description: Used when the Buy To Order field of Part is being changed to a new value.
   OperationID: ChangePartBuyToOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartBuyToOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartBuyToOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartInspectionRequired(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartInspectionRequired
   Description: Used when the Inspection Required of Part is being changed to a new value.
   OperationID: ChangePartInspectionRequired
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartInspectionRequired_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartInspectionRequired_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartCommodityCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartCommodityCode
   Description: Used when the Part.CommodityCode field is being changed to a new value.
It will validate the new value, passed in with newCommodityCode
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartCommodityCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartCommodityCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartCommodityCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartIsServices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartIsServices
   Description: Used when the Part.IsServices field is being changed to a new value.
the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartIsServices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartIsServices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartIsServices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSyncToExternalCRM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSyncToExternalCRM
   Description: Used when the Part.SyncToExternalCRM field is being changed to a new value.
the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartSyncToExternalCRM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSyncToExternalCRM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSyncToExternalCRM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartExternalMESSyncRequired(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartExternalMESSyncRequired
   Description: Used when the Part.ExternalMESSyncRequired field is being changed to a new value.
the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartExternalMESSyncRequired
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartExternalMESSyncRequired_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartExternalMESSyncRequired_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartNonStock(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartNonStock
   Description: Used when the Part.NonStock field is being changed to a new value.
It will verify a configurator ID isn't assigned to any part revisions
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartNonStock
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartNonStock_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartNonStock_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartGlobalPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartGlobalPart
   Description: Method to call when changing the global part flag on a part.
Assigns the GlbFlag base on the new value.
   OperationID: ChangePartGlobalPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartGlobalPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartGlobalPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartNum
   Description: Method to call when changing the Part Number.
Validates this is a "Add", PartNumber does not already exist, sets defaults for UOMClass, UOM
   OperationID: ChangePartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantBuyToOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantBuyToOrder
   Description: Used when the Buy To Order field of PartPlant is being changed to a new value.
   OperationID: ChangePartPlantBuyToOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantBuyToOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantBuyToOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantSourceType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantSourceType
   Description: Used when the SourceType field of PartPlant or the TypeCode of Part is being changed
to a new value and the user selected to update the PartPlant records with the change.
It will check to see if a configuration exists for the part.  If a configuration
exists it will return a warning message in ruleMessage that should be displayed to the user as a warning.
If the configuration is not marked as single-level configuration then a message will be returned in
singleLevelConfMsg which should be displayed to the user asking if they want to continue.  If they answer Yes
to continue then the method DeleteMultiLevelRules should be called.
   OperationID: ChangePartPlantSourceType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantSourceType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantSourceType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantUrgentVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantUrgentVendorID
   Description: Used when the VendorID field of PartPlant is being changed to a new value.
It will validate the new VendorID field.
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartPlantUrgentVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantUrgentVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantUrgentVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantPlanningAttributeUrgentVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantPlanningAttributeUrgentVendorID
   Description: Used when the VendorID field of PartPlantPlanningAttribute is being changed to a new value.
It will validate the new VendorID field.
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartPlantPlanningAttributeUrgentVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantPlanningAttributeUrgentVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantPlanningAttributeUrgentVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantVendorID
   Description: Used when the VendorID field of PartPlant is being changed to a new value.
It will validate the new VendorID field.
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartPlantVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantPlanningAttributeVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantPlanningAttributeVendorID
   Description: Used when the VendorID field of PartPlantPlanningAttribute is being changed to a new value.
It will validate the new VendorID field.
If it is valid the dataset will be updated with the new value and related values will be refreshed.
   OperationID: ChangePartPlantPlanningAttributeVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantPlanningAttributeVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantPlanningAttributeVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantPlanningAttributeNofP(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantPlanningAttributeNofP
   Description: Used when any of the 12 Number of Pieces columns of ttPartPlantPlanningAttribute are being changed.
The dataset will be updated with the new values and returned.
   OperationID: ChangePartPlantPlanningAttributeNofP
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantPlanningAttributeNofP_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantPlanningAttributeNofP_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantPlanningAttributeQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantPlanningAttributeQty
   Description: Used when any of the 12 Quantity columns of ttPartPlantPlanningAttribute are being changed.
The dataset will be updated with the new values and returned.
   OperationID: ChangePartPlantPlanningAttributeQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantPlanningAttributeQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantPlanningAttributeQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartPlantPlanningAttributeQtyDisplayOption(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartPlantPlanningAttributeQtyDisplayOption
   Description: Used when the QtyDisplayOption field of ttPartPlantPlanningAttribute is being changed.
When false - all quantity columns will already contain the value in IUM, so no recalculation is required
When true - all Number of Pieces columns will need to be recalculated based on the current quantity values
The dataset will be updated with the new values and returned.
   OperationID: ChangePartPlantPlanningAttributeQtyDisplayOption
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartPlantPlanningAttributeQtyDisplayOption_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartPlantPlanningAttributeQtyDisplayOption_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartProdCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartProdCode
   Description: Method to call when changing the product group code on a part.
Validates the code and defaults the part tax category code based
on the product group.
   OperationID: ChangePartProdCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartProdCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartProdCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartRestrictionManual(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartRestrictionManual
   Description: Used when Manual field of PartRestriction is being changed to a new value.
   OperationID: ChangePartRestrictionManual
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartRestrictionManual_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartRestrictionManual_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartRestrictionType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartRestrictionType
   Description: This methods assigns associated fields when PartRestriction.RestrictionTypeID changes.
   OperationID: ChangePartRestrictionType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartRestrictionType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartRestrictionType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartRestrictSubstance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartRestrictSubstance
   Description: This methods assigns associated fields when PartRestrictSubst.SubstanceID changes.
   OperationID: ChangePartRestrictSubstance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartRestrictSubstance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartRestrictSubstance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartRevApproved(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartRevApproved
   Description: This method checks that a valid password was provided when required before
changing the PartRev.Approved flag
   OperationID: ChangePartRevApproved
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartRevApproved_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartRevApproved_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSNBaseDataType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSNBaseDataType
   OperationID: ChangePartSNBaseDataType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSNBaseDataType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSNBaseDataType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSNMaskPrefixSuffix(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSNMaskPrefixSuffix
   OperationID: ChangePartSNMaskPrefixSuffix
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSNMaskPrefixSuffix_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSNMaskPrefixSuffix_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartSubsPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartSubsPartNum
   Description: Method to call when changing the Part Number for an Alternate Part
   OperationID: ChangePartSubsPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartSubsPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartSubsPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartTrackDimension(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartTrackDimension
   Description: Used when the Track Dimension field of Part is being changed to a new value.
It cannot be turned On if Part.TypeCode is Sales Kit (K).
   OperationID: ChangePartTrackDimension
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartTrackDimension_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartTrackDimension_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartTrackLots(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartTrackLots
   Description: Used when the Track Lots field of Part is being changed to a new value.
It cannot be turned On if Part.TypeCode is Sales Kit (K).
   OperationID: ChangePartTrackLots
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartTrackLots_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartTrackLots_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartUnitPrice
   Description: Used when the UnitPrice is set.
It should be validated.
   OperationID: ChangePartUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartInternalUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartInternalUnitPrice
   Description: Used when the InternalUnitPrice is set.
It should be validated.
   OperationID: ChangePartInternalUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartInternalUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartInternalUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartTrackSerialNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartTrackSerialNum
   Description: Used when the Track Serial Numbers field of Part is being changed to a new value.
It cannot be turned On if Part.TypeCode is Sales Kit (K).
   OperationID: ChangePartTrackSerialNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartTrackSerialNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartTrackSerialNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartLocationIDNumReq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartLocationIDNumReq
   Description: Used when the LocationIDNumReq field of Part is being changed to a new value.
It cannot be turned On if Part.TypeCode is Sales Kit (K).
   OperationID: ChangePartLocationIDNumReq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartLocationIDNumReq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartLocationIDNumReq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangedAttrClassID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangedAttrClassID
   Description: Used when Attr Class ID changed.
   OperationID: ChangedAttrClassID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangedAttrClassID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangedAttrClassID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangedAttrClassIDFromPartUOMConversion(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangedAttrClassIDFromPartUOMConversion
   Description: Used when Attr Class ID changed in the Part UOM Conversion}
THis will update the database Part record when the Attribute Clas is changed - will result and clear
   OperationID: ChangedAttrClassIDFromPartUOMConversion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangedAttrClassIDFromPartUOMConversion_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangedAttrClassIDFromPartUOMConversion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTrackInventoryAttributes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTrackInventoryAttributes
   Description: Obsoleted.  Performs specific action when changing the Track Inventory Attributes.  Modifies columns specifically related to TrackInventoryAttributes.
   OperationID: ChangeTrackInventoryAttributes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTrackInventoryAttributes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTrackInventoryAttributes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartTypeCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartTypeCode
   Description: Used when the Type field of Part is being changed to a new value.
It can be turned to Sales Kit if any of Track Lots, Dimension or Serial Numbers are ON.
   OperationID: ChangePartTypeCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartTypeCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartTypeCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartUOMConvOverride(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartUOMConvOverride
   OperationID: ChangePartUOMConvOverride
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartUOMConvOverride_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartUOMConvOverride_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartUOMConvFactor(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartUOMConvFactor
   Description: Updates ConvToUOM according to ConvFactor
   OperationID: ChangePartUOMConvFactor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartUOMConvFactor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartUOMConvFactor_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartWhseKBCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartWhseKBCode
   Description: Used when the KBCode field of PartWhse is being changed to a new value.
It will validate the new KBCode field.
If it is valid the dataset will be updated with the new KBCode and related KBActionCode.
   OperationID: ChangePartWhseKBCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartWhseKBCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartWhseKBCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePlantSNBaseDataType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePlantSNBaseDataType
   OperationID: ChangePlantSNBaseDataType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePlantSNBaseDataType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePlantSNBaseDataType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePlantSNMaskPrefixSuffix(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePlantSNMaskPrefixSuffix
   OperationID: ChangePlantSNMaskPrefixSuffix
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePlantSNMaskPrefixSuffix_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePlantSNMaskPrefixSuffix_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeQtyBearing(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeQtyBearing
   OperationID: ChangeQtyBearing
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeQtyBearing_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeQtyBearing_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeLinkToContract(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeLinkToContract
   OperationID: ChangeLinkToContract
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeLinkToContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeLinkToContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCostMethod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCostMethod
   Description: Method that is executed when the costing method is changing
Costing method cannot be changed if there is any qty on hand, either for Part or for PartPlant
   OperationID: ChangeCostMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCostMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCostMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSNMask(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSNMask
   OperationID: ChangeSNMask
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSNMask_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSNMask_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDualUOMClassID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDualUOMClassID
   Description: Used when the Dual UOM Class ID is modified
   OperationID: ChangeDualUOMClassID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDualUOMClassID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDualUOMClassID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeUOMClassID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeUOMClassID
   Description: Used when the UOM Class ID is modified
   OperationID: ChangeUOMClassID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeUOMClassID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeUOMClassID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeUOMCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeUOMCode
   Description: Used when the UOM code is modified
   OperationID: ChangeUOMCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeUOMCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeUOMCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChanginPartRestrictSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChanginPartRestrictSubs
   Description: This methods to validate duplicated substances on the part.
   OperationID: ChanginPartRestrictSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChanginPartRestrictSubs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChanginPartRestrictSubs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckAltMethodForDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckAltMethodForDelete
   Description: This method should be called before allowing delete a revision.  This method
will determine if the revision being deleted has alternate methods.  If it
does, the user will be prompted with a message indicating this revision
has alternate methods and if they want to delete those records as well.  If
the user answers yes, the delete can procede.  If they answer no, the delete
should be canceled.  This method will return a string that contains the text
of the message to ask the  user.
   OperationID: CheckAltMethodForDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckAltMethodForDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckAltMethodForDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCOOPercents(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCOOPercents
   Description: CheckCOOPercents
   OperationID: CheckCOOPercents
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCOOPercents_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCOOPercents_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCOOPercentsExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCOOPercentsExt
   Description: CheckCOOPercents
   OperationID: CheckCOOPercentsExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCOOPercentsExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCOOPercentsExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckDuplicateCOO(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckDuplicateCOO
   Description: Check Duplicate COO - called only when the coo is changed or a partcoo is being added
   OperationID: CheckDuplicateCOO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckDuplicateCOO_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckDuplicateCOO_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckPartChanges(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckPartChanges
   Description: Checks to see if certain fields changed on the part record.  If they did,
a question is presented to the user asking if these changes should carry over
to the PartPlant records. Changes to Part serial format fields builds a separate message.
This method returns the text of the message
to ask.  When adding a part it is not necessary to call this method because the
default (current) PartPlant record already uses the Part fields to default from.
The user can answer yes or no, but processing doesn't stop based on the answer.
The answers should be stored in the dataset in field Part.UpdatePartPlant and Part.UpdateSNPartPlant.
   OperationID: CheckPartChanges
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckPartChanges_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPartChanges_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteMRPJobs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteMRPJobs
   Description: Deletes MRP Jobs.
   OperationID: DeleteMRPJobs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteMRPJobs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteMRPJobs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteMultiLevelRules(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteMultiLevelRules
   Description: Used when the SourceType field of PartPlant is being changed to SalesKit and
a multi-level configuration exists for the part.  This method is called after
displaying the message returned from ChangePartPlantSourceType.  This method
will unapprove the revision and configuration, set the single-level configuration
flag to true on the configuration, and then delete any existing lower level rules
that may have been created for the configuration.
   OperationID: DeleteMultiLevelRules
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteMultiLevelRules_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteMultiLevelRules_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DuplicatePart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DuplicatePart
   Description: To create a new part by duplicating from another.
   OperationID: DuplicatePart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DuplicatePart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DuplicatePart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EnterpriseGetList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method EnterpriseGetList
   Description: Will invoke GetList or perform the Enterprise Search when enterpriseSearchText / enterpriseBAQID is provided
   OperationID: EnterpriseGetList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/EnterpriseGetList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/EnterpriseGetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGlbPartList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGlbPartList
   Description: This method returns the GlbPart dataset based on a delimited list of
GlbPartNum values passed in.
If GlbPart.PartNum = chr(9) that means the record has been skipped and should be shown
at the bottom of the browser. (GlbPart only)
   OperationID: GetGlbPartList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGlbPartList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGlbPartList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListByConfigID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListByConfigID
   Description: Retreive all Parts related with the PartRev.ConfigID received from the UI
Used PartRevWhereClause in case a new Clause is added
instead of just receive the configID
   OperationID: GetListByConfigID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListByConfigID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListByConfigID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListByWarehouseBin(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListByWarehouseBin
   Description: Gets a part list depending on the warehouse/bin conditions.
   OperationID: GetListByWarehouseBin
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListByWarehouseBin_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListByWarehouseBin_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListFilterPlants(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListFilterPlants
   Description: Filter parts by plant.  Call normal GetList method.
   OperationID: GetListFilterPlants
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListFilterPlants_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListFilterPlants_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListFilterCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListFilterCustXPrt
   Description: Filter parts by Customer Part Cross Reference.  Call normal GetList method.
   OperationID: GetListFilterCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListFilterCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListFilterCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListFromSelectedKeys(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListFromSelectedKeys
   Description: This methods will return all of the Part recordsthat meet the selection criteria.
This method will try to mirror the functionality of the base GetList method but
since we are populating a temp table we need our own public method.
   OperationID: GetListFromSelectedKeys
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListFromSelectedKeys_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListFromSelectedKeys_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartForLink(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartForLink
   Description: This returns the Part dataset for linking.
   OperationID: GetPartForLink
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartForLink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartForLink_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartWhereUsed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartWhereUsed
   Description: To return a PartWhereUsed dataset for a given part number
   OperationID: GetPartWhereUsed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartWhereUsed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartWhereUsed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartXRefInfo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartXRefInfo
   Description: This method defaults PartAdvisor fields when the PartNum field changes
   OperationID: GetPartXRefInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartXRefInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartXRefInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InitializeTracker(epicorHeaders = None):
   """  
   Summary: Invoke method InitializeTracker
   Description: Method for kinetic part tracker
   OperationID: InitializeTracker
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/InitializeTracker_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CalcWipWClause(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalcWipWClause
   Description: CalcWipWClause static filter calculation
   OperationID: CalcWipWClause
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalcWipWClause_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalcWipWClause_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSerialNumberFormat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSerialNumberFormat
   Description: Calculates Serial Number Format for Kinetic
   OperationID: GetSerialNumberFormat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSerialNumberFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSerialNumberFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDMRListSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDMRListSearch
   Description: Part
   OperationID: GetDMRListSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDMRListSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDMRListSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GlbPartsExist(epicorHeaders = None):
   """  
   Summary: Invoke method GlbPartsExist
   Description: This method checks if GlbPart records exist or not.  Can be used
to determine if the option to link/unlink parts is available.
   OperationID: GlbPartsExist
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GlbPartsExist_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_HasIntrastat(epicorHeaders = None):
   """  
   Summary: Invoke method HasIntrastat
   Description: To determine if the Current company is using Intrastat
The following fields on the part table are controlled by this method
part.CommodityCode
part.ISOrigCountry
part.ISSuppUnitsFactor
   OperationID: HasIntrastat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/HasIntrastat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_IsRunOutOnHand(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method IsRunOutOnHand
   Description: This method receives a part and returns a flag if the part is a run out part with on hand quantity.
   OperationID: IsRunOutOnHand
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/IsRunOutOnHand_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/IsRunOutOnHand_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_LinkGlbPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method LinkGlbPart
   Description: This method performs the actual logic behind linking a Part.  It is run after
the PreLinkGlbPart method which determines the Part Number to link to.
If the Part Number is for a Part that already exists, the GlbPart information is
translated and then copied to the PartDataSet as an update.
If the Part Number is for a new Part, the GlbPart information is translated and then
copied to the PartDataSet as an Add.  Until the update method is run on Part record
the Link process is not completed.
   OperationID: LinkGlbPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/LinkGlbPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/LinkGlbPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePkgCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePkgCode
   Description: This method should be called when PartUOM DispPkgCode changes.
   OperationID: OnChangePkgCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePkgCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePkgCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePESUNAT(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePESUNAT
   Description: This method should be called after SUNAT fieds has been changed.
   OperationID: OnChangePESUNAT
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePESUNAT_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePESUNAT_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingDefaultAttributeSet(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingDefaultAttributeSet
   Description: Call this method when the default attribute set changes
   OperationID: OnChangingDefaultAttributeSet
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingDefaultAttributeSet_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingDefaultAttributeSet_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePlant(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePlant
   Description: Run after Plant changing.
   OperationID: OnChangePlant
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalcACWDays(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalcACWDays
   Description: Calculate the Auto Consume Window Days
   OperationID: CalcACWDays
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalcACWDays_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalcACWDays_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreLinkGlbPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreLinkGlbPart
   Description: Linking a GlbPart record ties a global record to a new or existing Vendor record so
that any changes made to the GlbPart record in another company are automatically copied
to any linked Parts.
This method performs the pre link logic to check of okay to link or get the new partnum
to create/link to.  Will be run before LinkGlbPart which actually creates/updates a
Part record and will send the modified record back for update.  When the Link "button" is
originally selected, the LinkPartNum will be defaulted to the GlbPartNum field.  It will then
check to see if this part number is available for Use.  If available for use the system will return a
question asking the user if they want to use this number.  If the answer is no, then the user
either needs to select an existing Part Number to link to or enter a brand new number.  You will
run this method until the user answer is yes.  Then the LinkGlbPart method is called.
   OperationID: PreLinkGlbPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreLinkGlbPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreLinkGlbPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PromptForPassword(epicorHeaders = None):
   """  
   Summary: Invoke method PromptForPassword
   Description: This method checks the BMSyst record to see if a password should prompted for and then
validated by the ValidatePassword method in UserFile BO.  Run this before ApproveAll,
CheckECORevApproved, CheckIn, CheckInAll, and CheckOut.
   OperationID: PromptForPassword
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/PromptForPassword_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_SetMRPRecalcFlag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetMRPRecalcFlag
   Description: This method is used to enable the MRPRecalcFlag on PartPlant.  This
field determines whether the part is picked up in MRP Net Change mode or not.
   OperationID: SetMRPRecalcFlag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetMRPRecalcFlag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetMRPRecalcFlag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetNextGeneratedLotNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetNextGeneratedLotNum
   Description: Set the Next Generated Lot Number.
   OperationID: SetNextGeneratedLotNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetNextGeneratedLotNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetNextGeneratedLotNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SkipGlbPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SkipGlbPart
   Description: This method performs the logic behind the skip/UnSkip option for GlbPart
This works as a toggle.  If the flag is currently true it will change it to false
and if the flag is currently false, it will change it to true.
If the PartNum field is not blank will error out
   OperationID: SkipGlbPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SkipGlbPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SkipGlbPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UnlinkGlbPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UnlinkGlbPart
   Description: This method performs the logic behind the unlink option for GlbPart
Unlink - clears the PartNum field in GlbPart.  Returns the Part DataSet
   OperationID: UnlinkGlbPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UnlinkGlbPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UnlinkGlbPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInspection(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInspection
   Description: Method to validate the Inspection control fields. (EQM)
   OperationID: ValidateInspection
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInspection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInspection_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInspVendor(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInspVendor
   Description: Method to validate the Inspection control fields. (EQM)
   OperationID: ValidateInspVendor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInspVendor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInspVendor_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateUOMconvChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateUOMconvChange
   Description: Method to validate the changing of UOM Class when performing UOM conversion
   OperationID: ValidateUOMconvChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateUOMconvChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateUOMconvChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateUOMConvTrans(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateUOMConvTrans
   Description: Method to validate there are no open transactions when changing UOM Class, and performs the conversion
   OperationID: ValidateUOMConvTrans
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateUOMConvTrans_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateUOMConvTrans_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EnableTrackInventoryAttributeConversion(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method EnableTrackInventoryAttributeConversion
   Description: Determines what should be enabled based on current selections.
   OperationID: EnableTrackInventoryAttributeConversion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/EnableTrackInventoryAttributeConversion_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/EnableTrackInventoryAttributeConversion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateRevisionListValForPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateRevisionListValForPart
   Description: Creates DynAttrClassDtlListVal records for all Revision of a Part.
Typically used when enabling Part.TrackInventoryByRevision
   OperationID: CreateRevisionListValForPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateRevisionListValForPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateRevisionListValForPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckTrackInventoryAttributeConversion(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckTrackInventoryAttributeConversion
   Description: Performs validation on changing of: Attribute Class, Track Inventory Attributes, Track Inventory By Revision , Planning By Revision
   OperationID: CheckTrackInventoryAttributeConversion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckTrackInventoryAttributeConversion_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckTrackInventoryAttributeConversion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PerformTrackInventoryAttributeConversion(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PerformTrackInventoryAttributeConversion
   Description: Performs the conversion when changing: Attribute Class, Track Inventory Attributes, Track Inventory By Revision , Planning By Revision
   OperationID: PerformTrackInventoryAttributeConversion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PerformTrackInventoryAttributeConversion_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PerformTrackInventoryAttributeConversion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PerformTrackByRevisionConversion(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PerformTrackByRevisionConversion
   Description: Procedure to update the Track Inventory by Revision.
If passes all validation change will be committed.
   OperationID: PerformTrackByRevisionConversion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PerformTrackByRevisionConversion_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PerformTrackByRevisionConversion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSNFormat(epicorHeaders = None):
   """  
   Summary: Invoke method GetSNFormat
   Description: Gets serial number format
   OperationID: GetSNFormat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSNFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_PartExists(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PartExists
   Description: Verifies if a part already exists
   OperationID: PartExists
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PartExists_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PartExists_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPcStatusIsKinetic(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPcStatusIsKinetic
   Description: Returns true if the given Configurator has Design in App Studio.
   OperationID: GetPcStatusIsKinetic
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPcStatusIsKinetic_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPcStatusIsKinetic_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PartIsActive(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PartIsActive
   Description: Verifies if a part is active
   OperationID: PartIsActive
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PartIsActive_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PartIsActive_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PartIsSalesKit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PartIsSalesKit
   Description: Returns true if the given PartNumber is defined as a Sales Kit
on the current plant (PartPlant.SourceType = "K")
   OperationID: PartIsSalesKit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PartIsSalesKit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PartIsSalesKit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCodeDescList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCodeDescList
   Description: Returns a list of code descriptions
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_FindPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method FindPart
   Description: Finds an existing part
   OperationID: FindPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/FindPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/FindPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartFromRowID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartFromRowID
   Description: Gets a Part from RowID
   OperationID: GetPartFromRowID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartFromRowID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartFromRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeSNLastUsedSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeSNLastUsedSeq
   Description: On Change SN Last Used Seq
   OperationID: OnChangeSNLastUsedSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeSNLastUsedSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeSNLastUsedSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDupPartConfigID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDupPartConfigID
   Description: Returns ConfigID and Description
   OperationID: GetDupPartConfigID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDupPartConfigID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDupPartConfigID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConfigIDChanging(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConfigIDChanging
   Description: Returns correct ConfigID
   OperationID: ConfigIDChanging
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConfigIDChanging_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigIDChanging_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangedConfigID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangedConfigID
   Description: Delete pcrules when
   OperationID: OnChangedConfigID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangedConfigID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangedConfigID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckConfigForDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckConfigForDelete
   Description: This method should be called before allowing delete a part or revision.  This method
will determine if the part/revision being deleted has an existing configuration.  If it
does, the user will be prompted with a message indicating this part/revision
has an existing configuration and if they want to delete those records as well.  If
the user answers yes, the delete can procede.  If they answer no, the delete
should be canceled.  This method will return a string that contains the text
of the message to ask the  user.
   OperationID: CheckConfigForDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckConfigForDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfigForDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetIfCurrentSiteHasExternalMES(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetIfCurrentSiteHasExternalMES
   Description: Returns If Current Site has External (MES)
   OperationID: GetIfCurrentSiteHasExternalMES
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetIfCurrentSiteHasExternalMES_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetIfCurrentSiteHasExternalMES_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetIfCurrentRevIsSiteExternalMES(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetIfCurrentRevIsSiteExternalMES
   Description: Returns If Current Revision Is SiteExternal (MES)
   OperationID: GetIfCurrentRevIsSiteExternalMES
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetIfCurrentRevIsSiteExternalMES_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetIfCurrentRevIsSiteExternalMES_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSendToFSAChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSendToFSAChange
   Description: Returns If SendToFSA has change from false to true.
   OperationID: GetSendToFSAChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSendToFSAChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSendToFSAChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RequestNoRevWithExternalMESForSiteValidation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RequestNoRevWithExternalMESForSiteValidation
   Description: Request No Rev With External MES For Site Validation
   OperationID: RequestNoRevWithExternalMESForSiteValidation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RequestNoRevWithExternalMESForSiteValidation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RequestNoRevWithExternalMESForSiteValidation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetExternalCRMIntegrationIsEnabled(epicorHeaders = None):
   """  
   Summary: Invoke method GetExternalCRMIntegrationIsEnabled
   OperationID: GetExternalCRMIntegrationIsEnabled
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetExternalCRMIntegrationIsEnabled_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ChangeMXProdServCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMXProdServCode
   Description: Performs required logic when Part.MXProdServCode is modified.
   OperationID: ChangeMXProdServCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMXProdServCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMXProdServCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDualUomClassList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDualUomClassList
   Description: Get a list of compatible dual UOM class IDs for the specified UOM class ID
   OperationID: GetDualUomClassList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDualUomClassList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDualUomClassList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.PartSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################
class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_EntityGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartAuditRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartAuditRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartBinInfoRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartBinInfoRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartCOORow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartCOORow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartCOPartRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartCOPartRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartDimRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartDimRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartLangDescRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartLangDescRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartListRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartListRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartPCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartPCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartPlanningPoolRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartPlanningPoolRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartPlantPlanningAttributeRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartPlantPlanningAttributeRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartPlantRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartPlantRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRestrictSubstRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRestrictSubstRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRestrictionRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRestrictionRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRevAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRevAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRevInspPlanAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRevInspPlanAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRevInspPlanRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRevInspPlanRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRevInspVendRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRevInspVendRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRevRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRevRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartSubsRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartUOMRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartUOMRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartWhseRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartWhseRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_TaxExemptRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_TaxExemptRow] = obj["value"]
      pass

class Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.GLControlType:str = obj["GLControlType"]
      """  Identifier of the GL Control Type.  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  GL Control Identifier.  """  
      self.BusinessEntity:str = obj["BusinessEntity"]
      """  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.GlobalEntityGLC:bool = obj["GlobalEntityGLC"]
      """  Marks this EntityGLC as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BankAcctID:str = obj["BankAcctID"]
      """  BankAcctID of the related BankAcct record.  """  
      self.BankFeeID:str = obj["BankFeeID"]
      self.CallCode:str = obj["CallCode"]
      """  CallCode of the related FSCallCd record.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      self.ClassCode:str = obj["ClassCode"]
      """  ClassCode of the related FAClass record.  """  
      self.ClassID:str = obj["ClassID"]
      """  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  """  
      self.ContractCode:str = obj["ContractCode"]
      """  ContractCode of the related FSContCd record.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode of the related Currency record.  """  
      self.CustNum:int = obj["CustNum"]
      """  CustNum of the related Customer record  """  
      self.DeductionID:str = obj["DeductionID"]
      """  DeductionID of PRClsDed or PRDeduct.  """  
      self.EmpID:str = obj["EmpID"]
      """  EmpID of the related PREmpMas record.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  ExpenseCode of PayTLbr, LabExpCd  """  
      self.ExtSystemID:str = obj["ExtSystemID"]
      """  ExtSystemID of ExtCompany table  """  
      self.FromPlant:str = obj["FromPlant"]
      """  FromPlant value of the related PlntTranDef record.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  GroupCode of the related FAGroup record.  """  
      self.GroupID:str = obj["GroupID"]
      self.HeadNum:int = obj["HeadNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.JCDept:str = obj["JCDept"]
      """  JCDept of the related JCDept record.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode of the related MiscChrg or PurMisc record.  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum of the related Part record.  """  
      self.PayTypeID:str = obj["PayTypeID"]
      """  PayTypeID of PayType  """  
      self.PerConName:str = obj["PerConName"]
      self.PIStatus:str = obj["PIStatus"]
      """  PI Status  """  
      self.Plant:str = obj["Plant"]
      """  Plant of the related PlantConfCtrl record.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  ProdCode of the related ProdGrup record.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  ProjectID of the related Project record.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  PurchCode of the related GLPurch record.  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode of the related GLRate record.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  ReasonCode of the related Reason record.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  ReasonType of the related Reason record.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  SalesCatID of the related SalesCat record.  """  
      self.Shift:int = obj["Shift"]
      """  Shift value of the related JCShift record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode of the related SalesTax record.  """  
      self.TaxTblID:str = obj["TaxTblID"]
      """  TaxTblID of PRTaxMas or PRClsTax.  """  
      self.ToPlant:str = obj["ToPlant"]
      """  ToPlant value of the related PlntTranDef record.  """  
      self.TransferMethod:str = obj["TransferMethod"]
      """  TransferMethod of ExtCompany table  """  
      self.TypeID:str = obj["TypeID"]
      """  Type ID  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum of the related Vendor record.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  WarehouseCode of the related Warehse record.  """  
      self.ExpenseTypeCode:str = obj["ExpenseTypeCode"]
      self.IsFiltered:bool = obj["IsFiltered"]
      self.OprTypeCode:str = obj["OprTypeCode"]
      self.CashDeskID:str = obj["CashDeskID"]
      self.TIN:str = obj["TIN"]
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      self.BitFlag:int = obj["BitFlag"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartAuditRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum of the Part master to which this record is related.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  System Date when this change was made.  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  System Time (seconds since midnight) of when the changes were made.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID who made the changes.  Not maintainable by the user.  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  Used to enter a description of the changes that were made.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.DspChangeTime:str = obj["DspChangeTime"]
      """  Display ChangeTime in HH:MM AM format  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.RevisionNumRevShortDesc:str = obj["RevisionNumRevShortDesc"]
      self.RevisionNumRevDescription:str = obj["RevisionNumRevDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartBinInfoRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Identifies the Part Number. It must be valid in the Part table.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Contains the Warehouse code of where this part exists. This must be valid in the WareHouse table.  """  
      self.BinNum:str = obj["BinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """  Safety quantity is a "purchasing cushion" limit.  """  
      self.KBCode:str = obj["KBCode"]
      """  Uniquely indentifies the record.  """  
      self.KBPONUM:int = obj["KBPONUM"]
      """  Purchase order number  that the detail line item is linked to.  """  
      self.KBPOLine:int = obj["KBPOLine"]
      """  The line number of the detail record on the purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.KBWarehouseCode:str = obj["KBWarehouseCode"]
      """  Kanban Warehouse  """  
      self.KBBinNum:str = obj["KBBinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.KBPlant:str = obj["KBPlant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.OnhandQty:int = obj["OnhandQty"]
      """  Holds the Quantity onhand for this Part in the warehouse in the specific bin location.  Whenever this quantity becomes zero the record should be deleted. This quantity needs to added to or subtracted from Manufactured receipts, Purchased receipts, Physical inventories, Inventory issues, Warehouse Transfers, Shipping and Adjustments.  """  
      self.KBQty:int = obj["KBQty"]
      """  Indicates the desired minimum on-hand Kanban quantity.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.KBActionCode:str = obj["KBActionCode"]
      self.KBActionDesc:str = obj["KBActionDesc"]
      self.MaxQtyUOM:str = obj["MaxQtyUOM"]
      """  Maximum Quantity UOM  """  
      self.MinQtyUOM:str = obj["MinQtyUOM"]
      """  Minimum Quantity UOM  """  
      self.Plant:str = obj["Plant"]
      """  Filled in by BO, not phiscally in database.  """  
      self.PlantOwner:str = obj["PlantOwner"]
      self.SafetyQtyUOM:str = obj["SafetyQtyUOM"]
      """  Safety Quantity UOM  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BinNumDescription:str = obj["BinNumDescription"]
      self.BinNumNonNettable:bool = obj["BinNumNonNettable"]
      self.KBBinNumDescription:str = obj["KBBinNumDescription"]
      self.KBCodeKBDescription:str = obj["KBCodeKBDescription"]
      self.KBCodeKBActionCode:str = obj["KBCodeKBActionCode"]
      self.KBPlantName:str = obj["KBPlantName"]
      self.KBWarehouseCodeDescription:str = obj["KBWarehouseCodeDescription"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartCOORow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.OrigCountry:int = obj["OrigCountry"]
      """  CountryNum for Country of Origin  """  
      self.QtyPerc:int = obj["QtyPerc"]
      """  Qty percent of this part which is from this country of origin.  """  
      self.ValuePerc:int = obj["ValuePerc"]
      """  Value percent of this part from this country of origin.  """  
      self.Primary:bool = obj["Primary"]
      """  Is this the primary country of origin for this part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CountryDescription:str = obj["CountryDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartCOPartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as part of the primary key.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.CoPartNum:str = obj["CoPartNum"]
      """  Companion PartNum identifies the Part that is manufactured along with the main part (ex: Right and Left parts)  """  
      self.CoRevisionNum:str = obj["CoRevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the companion part, and is used as part of the primary key  """  
      self.PartsPerOp:int = obj["PartsPerOp"]
      """   Part Per Operation. Active only for Concurrent process
Jobs. Otherwise set to 1.  """  
      self.LbrCostBase:int = obj["LbrCostBase"]
      """   Defines an integer value which is used to calculate a
ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.MtlCostBase:int = obj["MtlCostBase"]
      """   Defines an integer value which is used to calculate a
ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.IUM:str = obj["IUM"]
      """  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.PreventSugg:bool = obj["PreventSugg"]
      """  If true, MRP will not generate change suggestions for the co-part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PrimaryCost:bool = obj["PrimaryCost"]
      """  Indicates if the parent Part should be used as the primary costing method for the co-part  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.EnablePreventSugg:bool = obj["EnablePreventSugg"]
      self.PartMasterPart:bool = obj["PartMasterPart"]
      self.ProcessMode:str = obj["ProcessMode"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartDimRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part.  """  
      self.DimCode:str = obj["DimCode"]
      """  Unique dimension code for the part.  """  
      self.DimCodeDescription:str = obj["DimCodeDescription"]
      """  Description for the dimension code.  """  
      self.DUM:str = obj["DUM"]
      """  Dimension unit of measure. Cannot be blank. Defaults to part's unit of measure.  """  
      self.DimConvFactor:int = obj["DimConvFactor"]
      """   Dimension conversion factor.  This conversion factor is used to convert the qty to the base part unit of measure.
Example: A half sheet to full sheet conversion factor would be 2 and a double sheet to full sheet conversion factor would be 0.5.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultDim:bool = obj["DefaultDim"]
      """  Default Dimenision for this part.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartLangDescRow:
   def __init__(self, obj):
      self.LangNameID:str = obj["LangNameID"]
      """  Language ID  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as the primary key.  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.LangNameIDDescription:str = obj["LangNameIDDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. In Part maintenance the Search Word is to only be updated upon initial creation of the Part with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.ClassID:str = obj["ClassID"]
      """   The Inventory class that this Part belongs to. The Class field can be blank or must be valid in the PartClass master file.
Classes could be set up for different type of raw materials. It will primarily be used as a report selection parameter.  """  
      self.IUM:str = obj["IUM"]
      """  Primary Inventory Unit of Measure. The unit costs, are based on this uom. Used as a default for issue transactions for the part.  Part onhand and allocation quantities are tracked by this uom.  The quantities can also be tracked by other uoms (see PartUOM table) but tracking at this uom is mandatory.   Use UOMClass.DefUOMCode of the system default UOMClass  when creating new part records (see XASyst.DefUOMClassID).  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part.
K = Sales Kit Part.B = Planning BOM.
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """   Onhand quantity is always tracked in the Parts primary inventory uom (Part.IUM). Checking this box indicates that you want to allow tracking of onhand quantity by additional uoms.
The actual UOMs to be tracked for the part are indicated by PartUOM.TrackOnHand. In order to set the PartUOM.TrackOhHand = True the Part.TrackDimension must = true.
This replaces the old 8.3 Track Dimension feature  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Indicates a Quantity Bearing part. Works in conjunction with the Non-Stock field to enable the part master parts to be setup for expense items.  Quantity Bearing will be set to Yes by default and only enable to be set to No if the Non-Stock flag is Yes.  """  
      self.LotBatch:bool = obj["LotBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgLot:bool = obj["LotMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotHeat:bool = obj["LotHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotFirmware:bool = obj["LotFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgDt:bool = obj["LotMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotCureDt:bool = obj["LotCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotExpDt:bool = obj["LotExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttBatch:str = obj["AttBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttHeat:str = obj["AttHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.HasMRPPlanningAttribute:bool = obj["HasMRPPlanningAttribute"]
      """  If this Part is TrackInventoryAttributes = true, and the AttrClassID it is associated to has one or more attributes whose DynAttrClassDtl.UsedInPlanning= true.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.PCType:str = obj["PCType"]
      """   Identifies the type of product code. This value can be used to find a Product code for a specific PartNum/ Type/UOM combination.
Currentlt the following types are valid;
"UPC-12,EAN-13,EAN-14,EAN-8,GTIN-14" 
This is for reference only and performs not other function.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group code  """  
      self.UOMCode:str = obj["UOMCode"]
      """  Unit of Measure code that will be defaulted in when this Product Code is used. Must be a Unit of measure that is valid within the Parts UOMClass.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlanningPoolRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number.  """  
      self.PoolPartNum:str = obj["PoolPartNum"]
      """  Pool Part Number.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PoolPartNumPartDescription:str = obj["PoolPartNumPartDescription"]
      self.PoolPartNumAttrClassID:str = obj["PoolPartNumAttrClassID"]
      self.PoolPartNumTrackDimension:bool = obj["PoolPartNumTrackDimension"]
      self.PoolPartNumTrackLots:bool = obj["PoolPartNumTrackLots"]
      self.PoolPartNumTrackSerialNum:bool = obj["PoolPartNumTrackSerialNum"]
      self.PoolPartNumTrackInventoryAttributes:bool = obj["PoolPartNumTrackInventoryAttributes"]
      self.PoolPartNumSalesUM:str = obj["PoolPartNumSalesUM"]
      self.PoolPartNumIUM:str = obj["PoolPartNumIUM"]
      self.PoolPartNumPricePerCode:str = obj["PoolPartNumPricePerCode"]
      self.PoolPartNumSellingFactor:int = obj["PoolPartNumSellingFactor"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlantPlanningAttributeRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.PlanningAttributeSetSeq:int = obj["PlanningAttributeSetSeq"]
      """  The unique identifier of the Dynamic Attribute Planning Set.  """  
      self.PlanningAttributeSetHash:str = obj["PlanningAttributeSetHash"]
      """  Hash key of the Company, AttrClassID, Planning Attributes and Planning Attribute Values.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """  Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.  """  
      self.MinOrderQty:int = obj["MinOrderQty"]
      """  Used to establish a suggested Order Qty when purchasing this Part for this Site. This value will be shown on the time phase report.  """  
      self.LeadTime:int = obj["LeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Number of Vendor master that this part is normally purchased from. The Purchase Order Management module uses it.  used in suggested vendor analysis.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.MinMfgLotSize:int = obj["MinMfgLotSize"]
      """  This is the minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.MaxMfgLotSize:int = obj["MaxMfgLotSize"]
      """  This is the maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.MfgLotMultiple:int = obj["MfgLotMultiple"]
      """  This is the manufacturing lot size multiple.  MRP will create jobs in multiples of this field.  Any excess amount will be sent to stock.  Zero is no lot multiple (lot-for-lot).  Example:  Required Quantity = 500, Lot Multiple = 150, Lot Maximum = 450, 2 jobs will be created with production quantities of 450, and 150.  """  
      self.DaysOfSupply:int = obj["DaysOfSupply"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ReOrderLevel:bool = obj["ReOrderLevel"]
      """  This is the flag indicating the inventory level we need to bring up to when it falls below re-order point(safety + minimum). Valid values are MAX and MIN.  """  
      self.ForecastTime:int = obj["ForecastTime"]
      """  Number of days forward to capture SugPODtl records for transfer as Forecast records.  Only for Intercompany trading partners.  """  
      self.TransferPlant:str = obj["TransferPlant"]
      """  Default Site that part is transfered from when it is obtained via Site transfer.  """  
      self.TransferLeadTime:int = obj["TransferLeadTime"]
      """  Used to record the normal order lead time for a Part from the transfer Site to this Site. This value is represented in days. It is optional.  """  
      self.ShortHorizonDays:int = obj["ShortHorizonDays"]
      """  Number of days out that the ShortHorizonMinMfgLotSize and ShortHorizonMaxMfgLotSize will be used instead of MinLotSize and MaxLotSize.  """  
      self.ShortHorizonMinMfgLotSize:int = obj["ShortHorizonMinMfgLotSize"]
      """  This is the Short Horizon minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.ShortHorizonMaxMfgLotSize:int = obj["ShortHorizonMaxMfgLotSize"]
      """  This is the Short Horizon maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.ShortHorizonDaysSupp:int = obj["ShortHorizonDaysSupp"]
      """  Used to record the short horizon order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.AutoConsumeStock:bool = obj["AutoConsumeStock"]
      """  Auto consume available stock when MRP runs and creates a job.  """  
      self.StartMinLotQty:bool = obj["StartMinLotQty"]
      """  Start the minimum lot quantity for a job when there is enough quantity to do so.  If enough quantity is available for the minimum lot quantity, the job will be split - one job for the quantity that can be started, another job for the remaining quantity.  Used when MRP creates jobs.  """  
      self.MinLotLeadTime:int = obj["MinLotLeadTime"]
      """  The lead time to consider for constrained materials when determining if a quantity can be started on a job.  Applicable when StartMinLotQty is true.  """  
      self.MinStartQty:int = obj["MinStartQty"]
      """  Indicates the minumum quantity that can be started when splitting a job.  Used when the StartMinLotQty option is selected.  """  
      self.UrgentLeadTime:int = obj["UrgentLeadTime"]
      """  This is the lead time used when generating a new suggestion within the lead time window.  If this field is 0 and the Supplier is determined from the Supplier Price List, the suggestion will use the lead time from the price list.  """  
      self.UrgentMinOrdQty:int = obj["UrgentMinOrdQty"]
      """  This is the minimum qty required when generating a new suggestion within the lead time window.  """  
      self.UrgentMultQty:int = obj["UrgentMultQty"]
      """  This is used to calculate the suggestion qty to the nearest multiple when generating a new suggestion within the lead time window.  """  
      self.UrgentPurPoint:str = obj["UrgentPurPoint"]
      """  See UrgentVendorNum  """  
      self.UrgentVendorNum:int = obj["UrgentVendorNum"]
      """  If this field is not populated then the system will use the standard Supplier from PartPlant, or the last Supplier the part was purchased from, or the Supplier from the first Price list found for the part.  """  
      self.SourceType:str = obj["SourceType"]
      """  Indicates the normal source for this part in the Site.  Values are: M = Manufactured, P = Purchased, T = Transferred.  Initial default is base on Part.TypeCode.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.ForecastDaysBefore:int = obj["ForecastDaysBefore"]
      """  Number of days before the forecast date in which any sales orders that exist should reduce the forecast quantity.  Ex: Forecast date of 3/31/98, Days before of 10, then any orders that have a date of 3/21/98 to 3/31/98 would reduce forecast.  """  
      self.ForecastDaysAfter:int = obj["ForecastDaysAfter"]
      """  Number of days after the forecast date in which any sales orders that exist should reduce the forecast quantity.  Ex: Forecast date of 3/31/98, Days after of 10, then any orders that have a date of 4/01/98 to 4/10/98 would reduce the forecast.  """  
      self.PlanningAttributeSet:str = obj["PlanningAttributeSet"]
      """  Description of the Planning Attribute Set  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  Base UOM Code from Part Master  """  
      self.UrgentVendorName:str = obj["UrgentVendorName"]
      """  Name of Urgent Supplier  """  
      self.UrgentVendorVendorID:str = obj["UrgentVendorVendorID"]
      """  ID of Supplier.  """  
      self.UseSite:bool = obj["UseSite"]
      """  Indicates no planning attribute parameters have been entered and will default from PartPlant.  """  
      self.MaximumQtyNofP:int = obj["MaximumQtyNofP"]
      """  Number of Pieces for MaximumQty  """  
      self.MinimumQtyNofP:int = obj["MinimumQtyNofP"]
      """  Number of Pieces for MinimumQty  """  
      self.QtyDisplayOption:str = obj["QtyDisplayOption"]
      self.MaxMfgLotSizeNofP:int = obj["MaxMfgLotSizeNofP"]
      """  Number of Pieces for MaxMfgLotSize  """  
      self.MfgLotMultipleNofP:int = obj["MfgLotMultipleNofP"]
      """  Number of Pieces for MfgLotMultiple  """  
      self.MinMfgLotSizeNofP:int = obj["MinMfgLotSizeNofP"]
      """  Number of Pieces for MinMfgLotSize  """  
      self.MinOrderQtyNofP:int = obj["MinOrderQtyNofP"]
      """  Number of Pieces for MinOrderQty  """  
      self.MinStartQtyNofP:int = obj["MinStartQtyNofP"]
      """  Number of Pieces for MinStartQty  """  
      self.SafetyQtyNofP:int = obj["SafetyQtyNofP"]
      """  Number of Pieces for SafetyQty  """  
      self.ShortHorizonMaxMfgLotSizeNofP:int = obj["ShortHorizonMaxMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMaxMfgLotSize  """  
      self.ShortHorizonMinMfgLotSizeNofP:int = obj["ShortHorizonMinMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMinMfgLotSize  """  
      self.UrgentMinOrdQtyNofP:int = obj["UrgentMinOrdQtyNofP"]
      """  Number of Pieces for UrgentMinOrdQty  """  
      self.UrgentMultQtyNofP:int = obj["UrgentMultQtyNofP"]
      """  Number of Pieces for UrgentMultQty  """  
      self.InvalidPlanningSet:bool = obj["InvalidPlanningSet"]
      """  If true, then the planning set is not valid for the part.  """  
      self.InvalidPlanningSetReason:str = obj["InvalidPlanningSetReason"]
      """  The reason why the planning set is invalid.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AttrClassIDDescription:str = obj["AttrClassIDDescription"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PlanningAttributeSetSeqActive:bool = obj["PlanningAttributeSetSeqActive"]
      self.PlantName:str = obj["PlantName"]
      self.TransferPlantName:str = obj["TransferPlantName"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlantRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.PrimWhse:str = obj["PrimWhse"]
      """  Defines which warehouse is to be used as the Primary Warehouse for this part in this Site. A primary warehouse is the one that this part is most commonly found in.  This warehouse is used as the default in many programs, such as entry of sales order line  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """   Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.
Note: Safety + Minimum = Reorder Point...  using this formula the  reorder point is the amount at which to reorder to maintain at least the prescribed minimum quantity.  """  
      self.MinOrderQty:int = obj["MinOrderQty"]
      """  Used to establish a suggested Order Qty when purchasing this Part for this Site. This value will be shown on the time phase report.  """  
      self.LeadTime:int = obj["LeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Number of Vendor master that this part is normally purchased from. The Purchase Order Management module uses it.  used in suggested vendor analysis.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """  Indicates if this part should be backflushed for this Site. Backflushing is the process of automatically issuing the material to jobs based on the operation quantity completed.  When completed and scrap quantities are reported to a job operation (via labo  """  
      self.MfgLotSize:int = obj["MfgLotSize"]
      """  This is the lot size that is used when performing a BOM cost rollup to distribute setup costs.  """  
      self.MinMfgLotSize:int = obj["MinMfgLotSize"]
      """  This is the minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.MaxMfgLotSize:int = obj["MaxMfgLotSize"]
      """  This is the maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.MfgLotMultiple:int = obj["MfgLotMultiple"]
      """  This is the manufacturing lot size multiple.  MRP will create jobs in multiples of this field.  Any excess amount will be sent to stock.  Zero is no lot multiple (lot-for-lot).  Example:  Required Quantity = 500, Lot Multiple = 150, Lot Maximum = 450, 2 jobs will be created with production quantities of 450, and 150.  """  
      self.DaysOfSupply:int = obj["DaysOfSupply"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ReOrderLevel:bool = obj["ReOrderLevel"]
      """  This is the flag indicating the inventory level we need to bring up to when it falls below re-order point(safety + minimum). Valid values are MAX and MIN.  """  
      self.MRPRecalcNeeded:bool = obj["MRPRecalcNeeded"]
      """  System maintained field.  Indicates that MRP needs to be recalculated for this part/Site.  """  
      self.ProcessMRP:bool = obj["ProcessMRP"]
      """  Flag indicating if MRP should process this part.  """  
      self.GenerateSugg:bool = obj["GenerateSugg"]
      """  Flag indicating if PO suggestion should be generated for this part.  """  
      self.GetFromLocalWhse:bool = obj["GetFromLocalWhse"]
      """  This flag controls if a supply is always created in this Site for a part. If it is no then the default Site that provides a supply is from a part's product group unless the Site from product group is blank, in that case the default Site should be from the  """  
      self.ForecastTime:int = obj["ForecastTime"]
      """  Number of days forward to capture SugPODtl records for transfer as Forecast records.  Only for Intercompany trading partners  """  
      self.TransferPlant:str = obj["TransferPlant"]
      """  Default Site that part is transfered from when it is obtained via Site transfer.  """  
      self.SourceType:str = obj["SourceType"]
      """   Indicates the normal source for this part in the Site.
Values are; K = Sales Kit,M = Manufactured,P = Purchased,T = Transferred.B = Planning BOM. 
Initial default is base on Part.TypeCode.  """  
      self.TransferLeadTime:int = obj["TransferLeadTime"]
      """  Used to record the normal order lead time for a Part from the transfer Site to this Site. This value is represented in days. It is optional.  """  
      self.PrepTime:int = obj["PrepTime"]
      """  Used to determine the start date  """  
      self.ReceiveTime:int = obj["ReceiveTime"]
      """  Days needed to move part to stock or next job.  Deducted from Due Date.  """  
      self.PlanTimeFence:int = obj["PlanTimeFence"]
      """  Days out from the current date when dates on jobs, PO, TO cannot be changed  """  
      self.ReschedOutDelta:int = obj["ReschedOutDelta"]
      """  MRP parameter not to reschedule if number of days change below  """  
      self.ReschedInDelta:int = obj["ReschedInDelta"]
      """  Same as ReschedOutDelta but for messages  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.BuyerID:str = obj["BuyerID"]
      """  Identifies the Buyer for the part class. Used as the default in the Automated Purchasing process.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the default Production Planner. This person is responsible for handling  the manufacturing suggestions of parts in this Product Group.
Used as the default for "new" manufacturing suggestions and on Job Header. Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this Part/Site  """  
      self.KitTime:int = obj["KitTime"]
      """  For Manufactured Parts to determine the Due date of the material  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if kit component lines can be added, deleted and modified during Sales Order and Quote entry.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kit part must be shipped complete or if kit components can be shipped in varying degrees of completeness.  If this field is set to "No", then KitPricing must be set to "P" .  """  
      self.KitAllowChangeParms:bool = obj["KitAllowChangeParms"]
      """  Indicates if changes the kit parameters is allowed during Sales Order and Quote entry.  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushed when a kit parent item is shipped.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are: P = Kit Parent Pricing (The price is obtained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  """  
      self.ShortHorizonDays:int = obj["ShortHorizonDays"]
      """  Number of days out that the ShortHorizonMinMfgLotSize and ShortHorizonMaxMfgLotSize will be used instead of MinLotSize and MaxLotSize.  """  
      self.ShortHorizonMinMfgLotSize:int = obj["ShortHorizonMinMfgLotSize"]
      """  This is the Short Horizon minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.ShortHorizonMaxMfgLotSize:int = obj["ShortHorizonMaxMfgLotSize"]
      """  This is the Short Horizon maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.LimitProdYldRecalc:bool = obj["LimitProdYldRecalc"]
      """  If set = true and the production yield is being recalculated for an assembly or any of its subassemblies, then the recalculation and quantity adjustments will stop at the assembly level and reduce the overrun quantity and if necessary adjust the PullQty rather than rolling up to its parent  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Sets the default for Part.QtyBearing. The Part.QtyBearing fields works in conjunction with the Part.Non-Stock field to enable the part master parts to be setup for expense items.  """  
      self.MRPLastRunDate:str = obj["MRPLastRunDate"]
      """  System date on which the last MRP processing was run.  """  
      self.MRPLastRunTime:int = obj["MRPLastRunTime"]
      """  System Time (hr-min-sec) when the last MRP process was run.  """  
      self.MRPLastScheduledDate:str = obj["MRPLastScheduledDate"]
      """  Scheduled Date used in last MRP run  """  
      self.MRPLastCutOffDate:str = obj["MRPLastCutOffDate"]
      """  Cut Off Date used in last MRP run  """  
      self.ShortHorizonDaysSupp:int = obj["ShortHorizonDaysSupp"]
      """  Used to record the short horizon order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """   Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer, Mask
Code/desc required:
CHARACTER`Alphanumeric
INTEGER`NumericOnly
MASK`Serial Mask
This field should be flagged as Include = true in Object Designer.  """  
      self.SNFormat:str = obj["SNFormat"]
      """   Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999 for Character or Integer, or as a Serial Mask defined in SerialMask table.
This field should be flagged as ReadOnly and Include = true in Object Designer.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """   Current setting for the prefix that will be attached to all new Serial Numbers as they are generated for Character and Integer format types.
This field should be flagged as Include = true in Object Designer.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      """  Indicates to use the value in SerialMask.SNLastUsedSeq when generating the next serial number for a Generate Mask type.  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This flag identifies those parts that will suggest a PO each time than a sales order is created. This flag will be used as a default in the sales order.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This flag identifies those parts that are commonly drop shipped. This flag will be used as a default in the sales order.  """  
      self.PcntTolerance:int = obj["PcntTolerance"]
      """  Percent Tolerance. Entered as a positive number, Used to define the default percent tolerance for parts for which no percent tolerance is set up in PartWhse. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a percentage difference between the count quantity and the frozen quantity by more than the percent tolerance figure is considered out of tolerance. Calculated as ?adjustment qty / frozen qty? expressed as a percent.  """  
      self.CalcPcnt:bool = obj["CalcPcnt"]
      """  False = there is no percent tolerance consideration and any percent variance is considered within tolerance. True = percent tolerance is active for this part/Site and the value in PcntTolerance will be used to determine if the count variance is within tol  """  
      self.CalcQty:bool = obj["CalcQty"]
      """  False = there is no quantity tolerance consideration and any quantity variance is considered within tolerance. True = quantity tolerance is active for this part/Site and the value in QtyTolerance will be used to determine if the count variance is within t  """  
      self.CalcValue:bool = obj["CalcValue"]
      """  False = there is no value tolerance consideration and any value variance is considered within tolerance. True = value tolerance is active for this part/Site and the value in ValueTolerance will be used to determine if the count variance is within toleranc  """  
      self.QtyAdjTolerance:int = obj["QtyAdjTolerance"]
      """  Used to provide a means to control whether a count quantity discrepancy should be posted as an adjustment to inventory. This value is used for parts for which no qty adj tolerance is set up in PartWhse. Zero indicates all quantity adjustments will be posted. This parameter is used to control the count discrepancy of parts that are counted by weight on a scale. Counts often vary based upon humidity. If the count of the part is within this tolerance but different from the frozen quantity then no inventory adjustment will be posted.  """  
      self.QtyTolerance:int = obj["QtyTolerance"]
      """  Quantity tolerance. Entered as a positive whole number, Used to define the default quantity tolerance for parts for which no quantity tolerance is set up in PartWhse. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a count quantity that varies from the frozen quantity by more than the quantity tolerance figure is considered out of tolerance.  """  
      self.ValueTolerance:int = obj["ValueTolerance"]
      """  Value tolerance. Entered as a positive number. Used to define the default value tolerance for parts for which no value tolerance is set up in PartWhse, PartSite, WarehseABC or SiteConfABC  An entry of zero will indicate that any value variance will be con  """  
      self.DemandQty:int = obj["DemandQty"]
      """  This is a summary of the total outstanding manufacturing allocation requirements for this Part in this Site.  It is updated from Order Release records that are being manufactured. The outstanding  Sales Order Requirements is calculated from Open ORderRel  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  This is a summary of the total outstanding manufacturing requirements for this Part in this Site.  It is updated from Order Release records that are being manufactured. The outstanding  Sales Order Requirements is calculated from Open ORderRel records as  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  This is a summary of the total outstanding job allocation requirements for this Part in this Site.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Cross Reference Part Number  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """  Cross Reference Part Type  """  
      self.NeverReuseMRPJob:bool = obj["NeverReuseMRPJob"]
      """  System flag future use  """  
      self.DeleteMRPJobs:bool = obj["DeleteMRPJobs"]
      """  Flag indicates the need to delete unfirm Jobs even if MRP is run with the recycle job option  """  
      self.TotMfgLeadTimeSys:int = obj["TotMfgLeadTimeSys"]
      """  System calculated manufacturing lead time.  This is the total lead time needed to generate the part, which includes the time on lower level parts, lead times, etc.  Not editable by the user.  """  
      self.TotMfgLeadTimeMnl:int = obj["TotMfgLeadTimeMnl"]
      """  Manually entered manufacturing lead time.  This is the total lead time needed to generate the part.  Directly maintained by the user.  """  
      self.LvlMfgLeadTimeSys:int = obj["LvlMfgLeadTimeSys"]
      """  Displays the manufacturing lead time calculated by the system. This is the lead time required to manufacture the part at the level of this part, it includes the time to manufacture the subassemblies in the same job (Pull as Assembly materials). The user cannot edit this value.  """  
      self.LvlMfgLeadTimeMnl:int = obj["LvlMfgLeadTimeMnl"]
      """  Displays the manufacturing lead time calculated by the system. This is the lead time required to manufacture the part at the level of this part, it includes the time to manufacture the subassemblies in the same job (Pull as Assembly materials). Directly maintained by the user.  """  
      self.MfgLeadTimeCalcDate:str = obj["MfgLeadTimeCalcDate"]
      """  The date the system manufacturing lead times (TotMfglLeadTimeSys and LvlMfgLeadTimeSys) were calculated.  """  
      self.MfgLeadTimeMnlDate:str = obj["MfgLeadTimeMnlDate"]
      """  The date the manual manufacturing lead times (TotMfgLeadTimeSys and LvlMfgLeadTimeSys) were entered by the user.  """  
      self.AutoConsumeStock:bool = obj["AutoConsumeStock"]
      """  Auto consume available stock when MRP runs and creates a job.  """  
      self.StartMinLotQty:bool = obj["StartMinLotQty"]
      """  Start the minimum lot quantity for a job when there is enough quantity to do so.  If enough quantity is available for the minimum lot quantity, the job will be split - one job for the quantity that can be started, another job for the remaining quantity.  Used when MRP creates jobs.  """  
      self.MinLotLeadTime:int = obj["MinLotLeadTime"]
      """  The lead time to consider for constrained materials when determining if a quantity can be started on a job.  Applicable when StartMinLotQty is true.  """  
      self.MfgLeadTimeMnl:bool = obj["MfgLeadTimeMnl"]
      """  Indicates manufacturing lead times are entered manually by the user.  """  
      self.MfgLeadTimeEnteredBy:str = obj["MfgLeadTimeEnteredBy"]
      """  Userid of user who entered manual manufacturing lead times.  """  
      self.MinStartQty:int = obj["MinStartQty"]
      """  Indicates the minumum quantity that can be started when splitting a job.  Used when the StartMinLotQty option is selected.  """  
      self.RawMaterial:bool = obj["RawMaterial"]
      """  Raw Material  """  
      self.MultiLevelCTP:bool = obj["MultiLevelCTP"]
      """  Available for stock manufactured parts.  Indicates if capable to promise considers sub-assemblies when determining the capable to promise date.  When false, capable to promise only looks at ATP for the capable to promise part - subassemblies are not considered.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required for items received from this vendor.  Inspection will also be enforced if the related PartClass, Vendor, Podetail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.ConsumeSafety:bool = obj["ConsumeSafety"]
      """  Indicates if MRP should allow consumption of safety stock within the purchase lead time  """  
      self.SLTVendorNum:int = obj["SLTVendorNum"]
      """  Number of Alternate Vendor master that this part can be purchased from with short lead times. The Purchase Order will be generated for this supplier when suggestions fall within the purchasing lead time and the projected supply drops below safely.  """  
      self.SLTPurPoint:str = obj["SLTPurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.ShortLeadTime:int = obj["ShortLeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.UrgentLeadTime:int = obj["UrgentLeadTime"]
      """  This is the lead time used when generating a new suggestion within the lead time window.  If this field is 0 and the Supplier is determined from the Supplier Price List, the suggestion will use the lead time from the price list.  """  
      self.UrgentMinOrdQty:int = obj["UrgentMinOrdQty"]
      """  This is the minimum qty required when generating a new suggestion within the lead time window.  """  
      self.UrgentMultQty:int = obj["UrgentMultQty"]
      """  This is used to calculate the suggestion qty to the nearest multiple when generating a new suggestion within the lead time window.  """  
      self.UrgentPurPoint:str = obj["UrgentPurPoint"]
      """  See UrgentVendorNum  """  
      self.UrgentVendorNum:int = obj["UrgentVendorNum"]
      """  If this field is not populated then the system will use the standard Supplier from PartPlant, or the last Supplier the part was purchased from, or the Supplier from the first Price list found for the part.  """  
      self.PartRunMRP:bool = obj["PartRunMRP"]
      """  PartRunMRP  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.MMSExclude:bool = obj["MMSExclude"]
      """  Indicates if this part will be excluded in the Inventory Min/Max/Safety calculation.  """  
      self.MMSSales:bool = obj["MMSSales"]
      """  Indicates if sales history for this part will be included in the Inventory Min/Max/Safety calculation.  """  
      self.MMSIssue:bool = obj["MMSIssue"]
      """  Indicates if job materials history for this part will be included in the Inventory Min/Max/Safety calculation.  """  
      self.MMSHistory:int = obj["MMSHistory"]
      """  User defined number in days, of how far back to look in usage history.  """  
      self.MMSSafetyFactor:int = obj["MMSSafetyFactor"]
      """  User defined, percentage of MIN to be set as Safety stock value.  """  
      self.MMSMaxFactor:int = obj["MMSMaxFactor"]
      """  User defined, used in calculation to defined MAX stock value.  """  
      self.SavedMinimumQty:int = obj["SavedMinimumQty"]
      """  WIll hold the proposed Min when the Min/Max/Safety process is ran  """  
      self.SavedMaximumQty:int = obj["SavedMaximumQty"]
      """  WIll hold the proposed Max when the Min/Max/Safety process is ran  """  
      self.SavedSafetyQty:int = obj["SavedSafetyQty"]
      """  WIll hold the proposed Safety when the Min/Max/Safety process is ran  """  
      self.SavedCalculatedUsageQty:int = obj["SavedCalculatedUsageQty"]
      """  It will hold the last TotalUsage used for the Saved Min/Max/Safety  """  
      self.SavedOnDateTime:str = obj["SavedOnDateTime"]
      """  Last Date when the Saved Min/Max/Safety were updated  """  
      self.ACWPercentage:int = obj["ACWPercentage"]
      """  Auto consume window percentage, this is a percentage to calculate the auto consume window days  that scheduling engine will take in consideration to look for available quantity to consume.  """  
      self.ACWDays:int = obj["ACWDays"]
      """  Auto consume window days, this is the number of days that scheduling engine will take in consideration to look for available quantity to consume.  """  
      self.GenNewPCIDDelaySeconds:int = obj["GenNewPCIDDelaySeconds"]
      """  GenNewPCIDDelaySeconds  """  
      self.GenNewPCIDLimitDays:int = obj["GenNewPCIDLimitDays"]
      """  GenNewPCIDLimitDays  """  
      self.TopLvlMfgLeadTimeSys:int = obj["TopLvlMfgLeadTimeSys"]
      """  System calculated manufacturing lead time.  This is the lead time needed to generate the part at the level of this part only.  Does not include the time on lower level parts.  Not editable by the user.  """  
      self.TopLvlMfgLeadTimeMnl:int = obj["TopLvlMfgLeadTimeMnl"]
      """  Manually entered manufacturing lead time.  This is the lead time needed to generate the part at the level of this part only. Does not include the time on lower level parts. Directly maintained by the user.  """  
      self.ActualCostingCategoryID:str = obj["ActualCostingCategoryID"]
      """  Actual Costing Category ID  """  
      self.IncludedIntoAllocationBase:bool = obj["IncludedIntoAllocationBase"]
      """  Included Into Allocation Base  """  
      self.ForecastDaysBefore:int = obj["ForecastDaysBefore"]
      """  Number of days before the forecast date in which any sales orders that exist should reduce the forecast quantity. Ex: Forecast date of 3/31/98, Days before of 10, then any orders that have a date of 3/21/98 to 3/31/98 would reduce forecast.  """  
      self.ForecastDaysAfter:int = obj["ForecastDaysAfter"]
      """  Number of days after the forecast date in which any sales orders that exist should reduce the forecast quantity. Ex: Forecast date of 3/31/98, Days after of 10, then any orders that have a date of 4/01/98 to 4/10/98 would reduce the forecast.  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  Base UOM Code from Part Master  """  
      self.CalculatedLeadTime:int = obj["CalculatedLeadTime"]
      """  Used to calculate the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ExtLeadTime:int = obj["ExtLeadTime"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      """  Used to designate the number of digits for an Integer or Mask type serial number format.  """  
      self.UrgentVendorName:str = obj["UrgentVendorName"]
      self.UrgentVendorVendorID:str = obj["UrgentVendorVendorID"]
      self.DisableQtyBrng:bool = obj["DisableQtyBrng"]
      self.EnableSerialNum:bool = obj["EnableSerialNum"]
      """  Used to indicate if the Serial Number format button should be enabled.  """  
      self.ICTrader:bool = obj["ICTrader"]
      self.InActive:bool = obj["InActive"]
      self.OnHandQty:int = obj["OnHandQty"]
      """  A summary of PartBin.OnHandQty for the warehouses where the bin is a nettable bin (WhseBin.NonNettable = NO).  """  
      self.PlantConfCtrlSerialTracking:int = obj["PlantConfCtrlSerialTracking"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      """  Used to designate the number of leading zeros for an Integer or Mask type serial number format.  """  
      self.HasOnHandQty:bool = obj["HasOnHandQty"]
      """  Indicates if there is any quantity on hand for this part  """  
      self.IsActCostingAllocEnabled:bool = obj["IsActCostingAllocEnabled"]
      self.MaximumQtyNofP:int = obj["MaximumQtyNofP"]
      """  Number of Pieces for MaximumQty  """  
      self.MaxMfgLotSizeNofP:int = obj["MaxMfgLotSizeNofP"]
      """  Number of Pieces for MaxMfgLotSize  """  
      self.MfgLotMultipleNofP:int = obj["MfgLotMultipleNofP"]
      """  Number of Pieces for MfgLotMultiple  """  
      self.MinimumQtyNofP:int = obj["MinimumQtyNofP"]
      """  Number of Pieces for MinimumQty  """  
      self.MinMfgLotSizeNofP:int = obj["MinMfgLotSizeNofP"]
      """  Number of Pieces for MinMfgLotSize  """  
      self.MinOrderQtyNofP:int = obj["MinOrderQtyNofP"]
      """  Number of Pieces for MinOrderQty  """  
      self.MinStartQtyNofP:int = obj["MinStartQtyNofP"]
      """  Number of Pieces for MinStartQty  """  
      self.QtyDisplayOption:str = obj["QtyDisplayOption"]
      self.SafetyQtyNofP:int = obj["SafetyQtyNofP"]
      """  Number of Pieces for SafetyQty  """  
      self.ShortHorizonMaxMfgLotSizeNofP:int = obj["ShortHorizonMaxMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMaxMfgLotSize  """  
      self.ShortHorizonMinMfgLotSizeNofP:int = obj["ShortHorizonMinMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMinMfgLotSize  """  
      self.UrgentMinOrdQtyNofP:int = obj["UrgentMinOrdQtyNofP"]
      """  Number of Pieces for UrgentMinOrdQty  """  
      self.UrgentMultQtyNofP:int = obj["UrgentMultQtyNofP"]
      """  Number of Pieces for UrgentMultQty  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PersonName:str = obj["PersonName"]
      self.PlantName:str = obj["PlantName"]
      self.PrimWhseDescription:str = obj["PrimWhseDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.TransferPlantName:str = obj["TransferPlantName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the Part Restriction Substance is inactive and the Roll-Up process will not take it in count and it won?t be copied when the part is selected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.RestrictionTypeDescription:str = obj["RestrictionTypeDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.RollupType:str = obj["RollupType"]
      """  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  """  
      self.Compliance:str = obj["Compliance"]
      """  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.ComplianceDate:str = obj["ComplianceDate"]
      """  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.LastRollUp:str = obj["LastRollUp"]
      """  Set after compliance roll-up  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the Part Restriction Type is inactive and the Roll-Up process will not take it in count and it won?t be copied when the part is selected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      self.EnableRollUpType:bool = obj["EnableRollUpType"]
      """  To enable RollUpType when manual flag is unchecked and company configuration flag for allow direct rolling-up is enabled.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.RestrictionTypeDescription:str = obj["RestrictionTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.AltMethod:str = obj["AltMethod"]
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspPlanAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.AltMethod:str = obj["AltMethod"]
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      self.SeqPlan:int = obj["SeqPlan"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspPlanRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.SeqPlan:int = obj["SeqPlan"]
      """  Part Inspection Plan Sequence  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be a valid value defined in the SpecDtl master table.  """  
      self.Plant:str = obj["Plant"]
      """  Unique identifier of this Site assigned by the user.  """  
      self.SampleSize:int = obj["SampleSize"]
      """  The default quantity to be inspected.  """  
      self.SampleSizePct:int = obj["SampleSizePct"]
      """  Percentage of quantity to be inspected  """  
      self.IsDefault:bool = obj["IsDefault"]
      """  This is used to establish the default plan to be used.  Only one record of the same company, Site, part number, and revision combination can have this flag set to true.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspVendRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.VendorID:str = obj["VendorID"]
      """  Contains the vendor ID for Skip Lot processing  """  
      self.Plant:str = obj["Plant"]
      """  Unique identifier of this Site assigned by the user.  """  
      self.SkipLotCtl:bool = obj["SkipLotCtl"]
      """  If true, this supplier / purchase point / part combination is to be included in the skip lot process.  """  
      self.SkipLotCtlCode:str = obj["SkipLotCtlCode"]
      """  Skip Lot Control Code.  Must be a valid code defined in the SkipLotCtl master file.  """  
      self.InspCnt:int = obj["InspCnt"]
      """  Counter of the receipts of this part / supplier combination. It can be maintained here in case the QA personnel want to force further inspections.  """  
      self.SkipCnt:int = obj["SkipCnt"]
      """  Counter of the number of lots that have been skipped within this cycle.  """  
      self.RptCycles:int = obj["RptCycles"]
      """  Counter of the number of cycles that this has been through.  """  
      self.RejectCnt:int = obj["RejectCnt"]
      """  Counter of the number of lots that have been rejected.  """  
      self.RejectCntBy:str = obj["RejectCntBy"]
      """   Valid options are S (Skip Lot) or Q (Quantity).
This field will control the value of what is added to the RejectCnt field. If set to S then the RejectCnt will be increased by 1 if the lot being inspected has a rejected quantity.  If set to Q then the field will be increased by the total failed quantity.  """  
      self.SampleSize:int = obj["SampleSize"]
      """  Default minimum sample size to be inspected.  """  
      self.SampleSizePct:int = obj["SampleSizePct"]
      """  Percentage of the receipt quantity to be inspected  """  
      self.ForceInsp:bool = obj["ForceInsp"]
      """  Setting to true will force all receipts to be inspected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.VendorName:str = obj["VendorName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as part of the primary key.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.RevShortDesc:str = obj["RevShortDesc"]
      """  Short description of the revision. This is NOT the Part description.  """  
      self.RevDescription:str = obj["RevDescription"]
      """  Used to enter a full description of the revision.  """  
      self.Approved:bool = obj["Approved"]
      """  Indicates if the methods of manufacturing have been approved for this revision.  Only approved methods can be pulled into jobs/quotes.  """  
      self.ApprovedDate:str = obj["ApprovedDate"]
      """  Date which this revision was approved for use by manufacturing/quoting.  This is set to the system date when the user marks the revision Approved. It is not maintainable by the user.  """  
      self.ApprovedBy:str = obj["ApprovedBy"]
      """  UserID who approved the revision.  Not maintainable by the user.  """  
      self.EffectiveDate:str = obj["EffectiveDate"]
      """  Date at which this revision is considered effective.  This date is used to control the pulling of subassembly revisions.  """  
      self.TLRLaborCost:int = obj["TLRLaborCost"]
      """  This Level Unit Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.TLRBurdenCost:int = obj["TLRBurdenCost"]
      """   This Level Unit Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.TLRMaterialCost:int = obj["TLRMaterialCost"]
      """  This Level Unit Material Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRSubcontractCost:int = obj["TLRSubcontractCost"]
      """  This Level Unit Subcontract Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRMtlBurCost:int = obj["TLRMtlBurCost"]
      """  This Level Unit Material Burden Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRSetupLaborCost:int = obj["TLRSetupLaborCost"]
      """  This Level Setup Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.TLRSetupBurdenCost:int = obj["TLRSetupBurdenCost"]
      """   This Level Setup Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.LLRLaborCost:int = obj["LLRLaborCost"]
      """  This Level Unit Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.LLRBurdenCost:int = obj["LLRBurdenCost"]
      """   This Level Unit Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.LLRMaterialCost:int = obj["LLRMaterialCost"]
      """  This Level Unit Material Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRSubcontractCost:int = obj["LLRSubcontractCost"]
      """  This Level Unit Subcontract Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRMtlBurCost:int = obj["LLRMtlBurCost"]
      """  This Level Unit Material Burden Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRSetupLaborCost:int = obj["LLRSetupLaborCost"]
      """  This Level Setup Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.LLRSetupBurdenCost:int = obj["LLRSetupBurdenCost"]
      """   This Level Setup Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.RollupDate:str = obj["RollupDate"]
      """  Date that this part cost was last rolled up.  Updated by the BOM Cost Roll up routine.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number. An optional field.  """  
      self.ECO:str = obj["ECO"]
      """  Engineering Change Order Number. An optional field for reference.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part revision contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.AutoRecOpr:int = obj["AutoRecOpr"]
      """   The operation number PartOpr.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  """  
      self.FinalOpr:int = obj["FinalOpr"]
      """   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.Configured:bool = obj["Configured"]
      """  If true then the revision has a configuration defined for it.  This will be set when a configuration is approved.  """  
      self.WebConfigured:bool = obj["WebConfigured"]
      """  If set to TRUE then the revision can be configured in StoreFront.  """  
      self.ShowInputPrice:bool = obj["ShowInputPrice"]
      """  If TRUE then the input prices will be shown in the Customer Connect Configuration Review.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.AltMethodDesc:str = obj["AltMethodDesc"]
      """  The description of the alternate method.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.ParentAltMethod:str = obj["ParentAltMethod"]
      """  The alternate method of the parent this method inherits from.  """  
      self.UseStaging:bool = obj["UseStaging"]
      """  Indicates if this revision is to use stage number or operations on materials.  If false, operation sequences are to be used.  If true, staging numbers are to be used.  """  
      self.UseAltRevForParts:bool = obj["UseAltRevForParts"]
      """  UseAltRevForParts: Flag to indicate if the Use Alternate method for parts option is selected, this flag affects directly the creation and loading of data inside EngWorkbench, because it will control the Alternate Method used.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.ExtConfig:bool = obj["ExtConfig"]
      """  External Configurator  """  
      self.ValRefDes:bool = obj["ValRefDes"]
      """  Validate Reference Designators.  """  
      self.PcGlobalPart:bool = obj["PcGlobalPart"]
      """  Is the part for this revision a global part  """  
      self.PcEntprsConf:bool = obj["PcEntprsConf"]
      """  If a configuration is created for this revision, is it marked as enterprise configurator  """  
      self.GlobalRev:bool = obj["GlobalRev"]
      """  Marks the Part Revision as a global Revision, available to be sent out to other companies  """  
      self.RoughCutCode:str = obj["RoughCutCode"]
      """  Rough Cut Code.  Rough cut parameters to use when rough cut scheduling for the revision.  """  
      self.RMAInspPlan:str = obj["RMAInspPlan"]
      """  The inspection plan part number (configurator part number) to use for RMA processing for this part.  """  
      self.RMASpecID:str = obj["RMASpecID"]
      """  The specification ID to use for RMA processing for this part.  """  
      self.RMASampleSize:int = obj["RMASampleSize"]
      """  The default sample size to use for RMA processing for this part  """  
      self.RMASampleSizePct:int = obj["RMASampleSizePct"]
      """  Percentage of quantity to be inspected for RMA processing of this part  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number that this part revision was created from  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part revision this part number was generated from.  """  
      self.ConfigID:str = obj["ConfigID"]
      """  ConfigID  """  
      self.RegenConfig:bool = obj["RegenConfig"]
      """  RegenConfig  """  
      self.SIValuesGroupSeq:int = obj["SIValuesGroupSeq"]
      """  SIValuesGroupSeq  """  
      self.SIValuesHeadNum:int = obj["SIValuesHeadNum"]
      """  SIValuesHeadNum  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMode:str = obj["ProcessMode"]
      """  Indicates the way in which parts are made for Co-Part jobs.  There are two value “S” – Sequential and “C” – Concurrent.  Sequential is the default. This field is similar to the JobHead.ProcessMode field.  """  
      self.DefaultConfigPart:bool = obj["DefaultConfigPart"]
      """  DefaultConfigPart  """  
      self.CoPartsReqQty:int = obj["CoPartsReqQty"]
      """  Number of COPart required in the Revision  """  
      self.MtlCostPct:int = obj["MtlCostPct"]
      """  Material Cost Factor  """  
      self.LaborCostPct:int = obj["LaborCostPct"]
      """  Labor Cost Factor  """  
      self.CoPartsPerOp:int = obj["CoPartsPerOp"]
      """  Number of COParts per Operation  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.CNCustomsBOM:bool = obj["CNCustomsBOM"]
      """  Customs BOM  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.ProcessMfgType:str = obj["ProcessMfgType"]
      """  Type of Process Manufacturing this revision is for: General, Site, Master.  """  
      self.ProcessMfgDescription:str = obj["ProcessMfgDescription"]
      """  Description of Process Manufacturing revision.  """  
      self.UseAdvancedStaging:bool = obj["UseAdvancedStaging"]
      """  Indicates if this revision is to use Advanced Staging.  """  
      self.ProcessMfgLastGroupID:str = obj["ProcessMfgLastGroupID"]
      """  The last Group to modify this Revision for Recipe Authoring.  """  
      self.ECPCEnabled:bool = obj["ECPCEnabled"]
      """  Only Part Revisions marked as Connected Process Control (CPC) enable will be send to CPC.  """  
      self.DisableApproved:bool = obj["DisableApproved"]
      self.ECOGroup:str = obj["ECOGroup"]
      """  Name of ECO Group that this part is checked out to  """  
      self.HasCoParts:bool = obj["HasCoParts"]
      """  This field will be set to true if two or more ECOCoParts records exist for the revision.  """  
      self.ParentAltMethodDesc:str = obj["ParentAltMethodDesc"]
      self.ParentPartNum:str = obj["ParentPartNum"]
      """  Part Number of the Parent Part  """  
      self.ParentRevisionNum:str = obj["ParentRevisionNum"]
      """  Revision number  of Parent Part.  """  
      self.ProdCode:str = obj["ProdCode"]
      self.RevStatusAsOfDate:int = obj["RevStatusAsOfDate"]
      """   Revision Status used to determina in the Revision of all the Materials are Effective As Of Date
Used to indicate the MAX MtlRevisionStatus of all its Materials/SubAssemblies.
If <= 2 the all its materials/subAssemblies's Revisions are Effective As Of Date  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.vDate:str = obj["vDate"]
      """  Last date that this Revison is effective.  (Next Rev Effective date - 1)  """  
      self.vQty:int = obj["vQty"]
      self.Class:str = obj["Class"]
      self.NonStock:bool = obj["NonStock"]
      self.IsRootNode:bool = obj["IsRootNode"]
      """  Indicates that the PartRev is the root node in the tree  """  
      self.EngineeringApproved:bool = obj["EngineeringApproved"]
      """  Holds the ECORev Approved flag for the last ProcessMfgID specified against the PartRev  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.PartDescriptionTrackDimension:bool = obj["PartDescriptionTrackDimension"]
      self.PartDescriptionSellingFactor:int = obj["PartDescriptionSellingFactor"]
      self.PartDescriptionPartDescription:str = obj["PartDescriptionPartDescription"]
      self.PartDescriptionIUM:str = obj["PartDescriptionIUM"]
      self.PartDescriptionTrackLots:bool = obj["PartDescriptionTrackLots"]
      self.PartDescriptionPricePerCode:str = obj["PartDescriptionPricePerCode"]
      self.PartDescriptionSalesUM:str = obj["PartDescriptionSalesUM"]
      self.PartDescriptionTrackSerialNum:bool = obj["PartDescriptionTrackSerialNum"]
      self.PartDescriptionTypeCode:str = obj["PartDescriptionTypeCode"]
      self.PcStatusConfigType:str = obj["PcStatusConfigType"]
      self.PlantName:str = obj["PlantName"]
      self.RoughCutParamDescription:str = obj["RoughCutParamDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. In Part maintenance the Search Word is to only be updated upon initial creation of the Part with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.ClassID:str = obj["ClassID"]
      """   The Inventory class that this Part belongs to. The Class field can be blank or must be valid in the PartClass master file.
Classes could be set up for different type of raw materials. It will primarily be used as a report selection parameter.  """  
      self.IUM:str = obj["IUM"]
      """  Primary Inventory Unit of Measure. The unit costs, are based on this uom. Used as a default for issue transactions for the part.  Part onhand and allocation quantities are tracked by this uom.  The quantities can also be tracked by other uoms (see PartUOM table) but tracking at this uom is mandatory.   Use UOMClass.DefUOMCode of the system default UOMClass  when creating new part records (see XASyst.DefUOMClassID).  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part.
K = Sales Kit Part.B = Planning BOM.
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PurchasingFactor:int = obj["PurchasingFactor"]
      """   This value is used to convert quantity when there is a difference in the vendors unit of measure and how it is stocked in inventory. Example is purchased in pounds, stocked in sheets.


Formula: Issue Qty * Conversion Factor = Purchased Qty.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Base Unit Selling Price for the Item. Maintainable only via Part Master Maintenance program. It is used as a default unit price on Sales Order line detail and on Invoice line details that are not referencing a sales order line.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E". Used as default PricePerCode in order entry and invoice entry.  """  
      self.InternalUnitPrice:int = obj["InternalUnitPrice"]
      """  Base Internal Unit Selling Price for the Item.  Maintainable only via Part Master Maintenance program.  If zero, then the external unit price (Part.UnitPrice) is used.  """  
      self.InternalPricePerCode:str = obj["InternalPricePerCode"]
      """  Indicates the internal pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand.  Maintainable only via Part Maintenance.  The initial default is "E".  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.MfgComment:str = obj["MfgComment"]
      """  Used to enter comments for manufacturing when this part is referenced on a job. These are copied to JobHead.Comment, JobAsmbl.Comment,JobMtl.MfgComment depending on the point of reference. Commens are printed on the routing report.  """  
      self.PurComment:str = obj["PurComment"]
      """   Part Comments that will be used as a default for purchasing. These will be copied into the JobMtl.PurComment which then will be used to pass along to the PO when that JobMtl is referenced. It will also be copied into the PODetail.Comment field when the PO is buying the part for stock and not referencing a Job. View as an EDITOR widget.
To be view-as EDITOR widget.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.UserChar1:str = obj["UserChar1"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar1Label
is non blank.  """  
      self.UserChar2:str = obj["UserChar2"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar2Label
is non blank.  """  
      self.UserChar3:str = obj["UserChar3"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar3Label
is non blank.  """  
      self.UserChar4:str = obj["UserChar4"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar4Label
is non blank.  """  
      self.UserDate1:str = obj["UserDate1"]
      """   User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate1Label
is non blank.  """  
      self.UserDate2:str = obj["UserDate2"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate2Label is non blank.  """  
      self.UserDate3:str = obj["UserDate3"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate3 Label is non blank.  """  
      self.UserDate4:str = obj["UserDate4"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate4 Label is non blank.  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """   User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec1Label
is non blank.  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec2Label is non blank.  """  
      self.UserDecimal3:int = obj["UserDecimal3"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec3Label is non blank.  """  
      self.UserDecimal4:int = obj["UserDecimal4"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec4Label is non blank.  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt1Label is non blank.  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt2Label is non blank.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Part. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.LowLevelCode:int = obj["LowLevelCode"]
      """  Internally assigned integer which indicates the deepest level of assembly indention that this part is used at.  This is used by the Cost Rollup routines to control the order in which parts get costed. Part at the bottom (highest levelcode) Product structure are calculated first and continues up the chain, with the final assembly parts being processed last.  This insures that when retrieving the cost of an assemblies components the components will already have had their cost rolled up.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """   Onhand quantity is always tracked in the Parts primary inventory uom (Part.IUM). Checking this box indicates that you want to allow tracking of onhand quantity by additional uoms.
The actual UOMs to be tracked for the part are indicated by PartUOM.TrackOnHand. In order to set the PartUOM.TrackOhHand = True the Part.TrackDimension must = true.
This replaces the old 8.3 Track Dimension feature  """  
      self.DefaultDim:str = obj["DefaultDim"]
      """  Default dimension code for the part.  Set by selecting a PartDim record as default.  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  Intrastat goods classification code following the Intrastat Classification Nomenclature (ICN). The Commodity Code field can be blank to indicate the value from the part class or must be valid in the ICommCode (formerly called IStatGrp) master file.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty for this part  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.SalesUM:str = obj["SalesUM"]
      """  The Selling Unit of measure for the Part. The UOM which the unit prices are based on. Defaults as the Part.IUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this part.  """  
      self.NetWeight:int = obj["NetWeight"]
      """  The Part's Unit Net Weight.  """  
      self.UsePartRev:bool = obj["UsePartRev"]
      """  if Yes then the part effective revision is used. If No then the revision of the demand source is used (OrderDtl, JobMtl...)  """  
      self.PartsPerContainer:int = obj["PartsPerContainer"]
      """  Default for label printing.  Zero indicates that only one label should be produced for the entire quantity.  """  
      self.PartLength:int = obj["PartLength"]
      """  Part's length.  """  
      self.PartWidth:int = obj["PartWidth"]
      """  Part's width.  """  
      self.PartHeight:int = obj["PartHeight"]
      """  Part's Height.  """  
      self.LotShelfLife:int = obj["LotShelfLife"]
      """  Shelf life of a lot in days.  Zero indicates unlimited shelf life.  """  
      self.WebPart:bool = obj["WebPart"]
      """  This is a Web saleable part  """  
      self.RunOut:bool = obj["RunOut"]
      """  Indicates that the onhand quantity is to be consumed and no further replenishments should be made.  Similar to Obsolete, however only warning messages will be issued to the user if they attempt new references.  """  
      self.SubPart:str = obj["SubPart"]
      """  Indicates the default Substitute part number.  This is optional. Must be one of the related PartSub records.  This field is set indirectly when the user checks the default toggle box in Part Substitution dialog.  """  
      self.Diameter:int = obj["Diameter"]
      """  Part's diameter.  """  
      self.Gravity:int = obj["Gravity"]
      """  Part's gravity.  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.OnHoldDate:str = obj["OnHoldDate"]
      """  Date that part becomes obsolete.  This can be set to a future date when the part should become obsolete.  """  
      self.OnHoldReasonCode:str = obj["OnHoldReasonCode"]
      """  The Reason.Code associate with the reason why the part has been placed on hold. Valid only when Part.OnHold = Yes.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Default analysis code to be used when this part appears as an assembly  on a quote or a job.  """  
      self.GlobalPart:bool = obj["GlobalPart"]
      """  Marks the Part as a global Part, available to be sent out to other companies  """  
      self.MtlAnalysisCode:str = obj["MtlAnalysisCode"]
      """  MtlAnalysisCode  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates  """  
      self.ISSuppUnitsFactor:int = obj["ISSuppUnitsFactor"]
      """  This value is used to calculate the Supplementary Units for the Intrastat.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.ImageFileName:str = obj["ImageFileName"]
      """  Path & filename (relative to images/prod_img directory on Web Server) of .jpg product image file.  """  
      self.ISOrigCountry:str = obj["ISOrigCountry"]
      """  This field contains the Intrastat Country of Origin Code from the Country table.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """  Current setting for the prefix that will be attached to all new Serial Numbers as they are generated.  """  
      self.SNFormat:str = obj["SNFormat"]
      """  Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """  Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer  """  
      self.Constrained:bool = obj["Constrained"]
      """  Used by the scheduling process when a part is stocked.  When TRUE,  the availability of this Part must be calculated via the TimePhase process prior to scheduling a Job.  """  
      self.UPCCode1:str = obj["UPCCode1"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode2:str = obj["UPCCode2"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode3:str = obj["UPCCode3"]
      """  UPS / UCC Code required by some industries.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.WebInStock:bool = obj["WebInStock"]
      """  For Customer Connect Only.  This field is used in Store Front to indicate if the part is available in stock.  """  
      self.ConsolidatedPurchasing:bool = obj["ConsolidatedPurchasing"]
      """  Should this Part be included in Consolidated Purchasing?  """  
      self.PurchasingFactorDirection:str = obj["PurchasingFactorDirection"]
      """  Indicates how Purchasing Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Selling Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RecDocReq:bool = obj["RecDocReq"]
      """   Receiving Documents Required.
Indicates receiving documents are required when receiving this part.  This pertains only to lot tracked parts that are received to inventory. If checked, then at the time of receiving the system will require that one or more attachments with a reference to a DocType having Receipt = yes be entered.Requires DocManagement license.  """  
      self.MDPV:int = obj["MDPV"]
      """  Maximum daily production value.  Used in demand shipping schedule.  """  
      self.ShipDocReq:bool = obj["ShipDocReq"]
      """   Shipping Documents Required.
Indicates if shipping documents are required when shipping this part. Pertains to Inventory shipments of lot tracked parts or shipments directly from the job only. If checked, then at the time of shipping the system will require that the PartLot.Ship DocsAvail, or JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  """  
      self.ReturnableContainer:str = obj["ReturnableContainer"]
      """  The returnable container for this part when the part needs to be returned.  The value is provided by the trading partner.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Indicates a Quantity Bearing part. Works in conjunction with the Non-Stock field to enable the part master parts to be setup for expense items.  Quantity Bearing will be set to Yes by default and only enable to be set to No if the Non-Stock flag is Yes.  """  
      self.NAFTAOrigCountry:str = obj["NAFTAOrigCountry"]
      """  This field contains the Country of Origin Code from the Country table.  For International shipping.  """  
      self.NAFTAProd:str = obj["NAFTAProd"]
      """  NAFTA Producer Code - For international shipping  """  
      self.NAFTAPref:str = obj["NAFTAPref"]
      """  NAFTA Preference Code  """  
      self.ExpLicType:str = obj["ExpLicType"]
      """  Export License Type  """  
      self.ExpLicNumber:str = obj["ExpLicNumber"]
      """  Export License Number  """  
      self.ECCNNumber:str = obj["ECCNNumber"]
      """  ECCN Number  """  
      self.AESExp:str = obj["AESExp"]
      """  AES Export code  """  
      self.HTS:str = obj["HTS"]
      """  Harmonized Tariff Schedule Code  """  
      self.UseHTSDesc:bool = obj["UseHTSDesc"]
      """  Use HTS description flag - for shippers shippers export declaration  """  
      self.SchedBcode:str = obj["SchedBcode"]
      """  Schedule B Code  """  
      self.HazItem:bool = obj["HazItem"]
      """  Hazardous Item  """  
      self.HazTechName:str = obj["HazTechName"]
      """  Hazardous Technical Name  """  
      self.HazClass:str = obj["HazClass"]
      """  Hazardous Class Number  """  
      self.HazSub:str = obj["HazSub"]
      """  Hazardous Subrisk Class  """  
      self.HazGvrnmtID:str = obj["HazGvrnmtID"]
      """  Hazardous Government Assigned ID  """  
      self.HazPackInstr:str = obj["HazPackInstr"]
      """  Hazardous Packing instructions  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this Part.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the invoice line for this Part.  """  
      self.RCUnderThreshold:int = obj["RCUnderThreshold"]
      """  Reverse Charge Under Threshold value. If the absolute value of an invoice line is less than the under threshold then the reverse charge tax code will be applied.  """  
      self.RCOverThreshold:int = obj["RCOverThreshold"]
      """  Reverse Charge Over Threshold value. If the absolute value of an invoice line is more than the over threshold then the reverse charge tax code will be applied.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.UOMClassID:str = obj["UOMClassID"]
      """   The UOM Class that will be used for the Part. The UOM Class establishes the list of unit of measures that can be used in reference to this part.
Must be valid in the UOMClass table.  """  
      self.SNMask:str = obj["SNMask"]
      """  This is the ID by which the user will reference a particular serial number format mask.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers currently used only by SNBaseStructure Mask types.  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types.  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence default. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It will be used when defaulting the SNLastUsedSeq field for new PartSite records.  """  
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      """  Indicates to use the value in SerialMask.SNLastUsedSeq when generating the next serial number for a Generate Mask type.  """  
      self.NetWeightUOM:str = obj["NetWeightUOM"]
      """   Qualifies the unit of measure of the NetWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a default  when creating new part records.
Having a NetWeightUOM will provides the ability to calculate total  weight.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.LotBatch:bool = obj["LotBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgLot:bool = obj["LotMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotHeat:bool = obj["LotHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotFirmware:bool = obj["LotFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgDt:bool = obj["LotMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotCureDt:bool = obj["LotCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotExpDt:bool = obj["LotExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotPrefix:str = obj["LotPrefix"]
      """  Defines a prefix to be used when a lot number is generated for the specific part.  """  
      self.LotUseGlobalSeq:bool = obj["LotUseGlobalSeq"]
      """  When generating the numeric portion of a lot number it can be either based on a next available number for the part (see Part.LotNextNum) or next available number from a Global Sequence (see LotSeq table and Part.LotSeqID)  """  
      self.LotSeqID:str = obj["LotSeqID"]
      """  The LotSeqID of the LotSeq record to use to retreive next available number when the part is using a Global Sequence  (Part.LotUseGlobalSeq = True). Must be valid in the LotSeq table if Part.LotUseGlobalSeq = True)  """  
      self.LotNxtNum:int = obj["LotNxtNum"]
      """  The next available number to use to generate new lot numbers a part when the  is configured to use "Part Specific" number sequence. (Part.LotUseGlobalSeq = false).  """  
      self.LotDigits:int = obj["LotDigits"]
      """  Number of digits of the Next Avail Lot Number controls that will be used by system Generate lot number logic.  """  
      self.LotLeadingZeros:bool = obj["LotLeadingZeros"]
      """  If leading zeros should be included in the numeric portion of the system generated lot number.  """  
      self.LotAppendDate:str = obj["LotAppendDate"]
      """   Option to append a trailing date string to the system generated lot number. The Date is the current system date.
Valid options are: None (Default), DD, MM, YYYY, MMYYYY, MM_YYYY, DDMMYYY, DD-MM-YYY, MMDDYYYY, MM-DD-YYYY,  YYYYMMDD, YYYY-MM-DD  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This flag identifies those parts that will suggest a PO each time than a sales order is created. This flag will be used as a default in the sales order.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This flag identifies those parts that are commonly drop shipped. This flag will be used as a default in the sales order.  """  
      self.IsConfigured:bool = obj["IsConfigured"]
      """  Configured Part  """  
      self.ExtConfig:bool = obj["ExtConfig"]
      """  External Configurator  """  
      self.RefCategory:str = obj["RefCategory"]
      """  The reference category that this Part belongs to.  """  
      self.CSFCJ5:bool = obj["CSFCJ5"]
      """   Malaysia Localization
The flag to indicate that the part is under CJ5 jurisdiction  """  
      self.CSFLMW:bool = obj["CSFLMW"]
      """   Malaysa Localization
The flag to indicate that the part is under LMW jurisdiction  """  
      self.GrossWeight:int = obj["GrossWeight"]
      """  The Part's Unit Gross Weight.  """  
      self.GrossWeightUOM:str = obj["GrossWeightUOM"]
      """   Qualifies the unit of measure of the GrossWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a defaul
t  when creating new part records.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number this part number was generated from.  """  
      self.FSAssetClassCode:str = obj["FSAssetClassCode"]
      """  Class Code Entry Field  """  
      self.FSSalesUnitPrice:int = obj["FSSalesUnitPrice"]
      """  Field Service Sales Unit Price  """  
      self.FSPricePerCode:str = obj["FSPricePerCode"]
      """  Indicates the field service sales pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. The initial default is "E".  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required upon receipt.  Inspection will also be enforced if the related Part Class, Vendor, PO Detail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.EstimateID:str = obj["EstimateID"]
      """  EstimateID  """  
      self.EstimateOrPlan:str = obj["EstimateOrPlan"]
      """  EstimateOrPlan  """  
      self.DiffPrc2PrchUOM:bool = obj["DiffPrc2PrchUOM"]
      """  DiffPrc2PrchUOM  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.PricingFactor:int = obj["PricingFactor"]
      """  PricingFactor  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.MobilePart:bool = obj["MobilePart"]
      """  MobilePart  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AGUseGoodMark:bool = obj["AGUseGoodMark"]
      """  AGUseGoodMark  """  
      self.AGProductMark:bool = obj["AGProductMark"]
      """  AGProductMark  """  
      self.ISRegion:str = obj["ISRegion"]
      """  ISRegion  """  
      self.INChapterID:str = obj["INChapterID"]
      """  INChapterID  """  
      self.PESUNATType:str = obj["PESUNATType"]
      """  CSF Peru -  SUNAT Type  """  
      self.PESUNATUOM:str = obj["PESUNATUOM"]
      """  PESUNATUOM  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.PartLengthWidthHeightUM:str = obj["PartLengthWidthHeightUM"]
      """  PartLengthWidthHeightUM  """  
      self.DiameterUM:str = obj["DiameterUM"]
      """  DiameterUM  """  
      self.DiameterInside:int = obj["DiameterInside"]
      """  DiameterInside  """  
      self.DiameterOutside:int = obj["DiameterOutside"]
      """  DiameterOutside  """  
      self.ThicknessUM:str = obj["ThicknessUM"]
      """  ThicknessUM  """  
      self.Thickness:int = obj["Thickness"]
      """  Thickness  """  
      self.ThicknessMax:int = obj["ThicknessMax"]
      """  ThicknessMax  """  
      self.Durometer:str = obj["Durometer"]
      """  Durometer  """  
      self.Specification:str = obj["Specification"]
      """  Specification  """  
      self.EngineeringAlert:str = obj["EngineeringAlert"]
      """  EngineeringAlert  """  
      self.Condition:str = obj["Condition"]
      """  Condition  """  
      self.IsCompliant:bool = obj["IsCompliant"]
      """  IsCompliant  """  
      self.IsRestricted:bool = obj["IsRestricted"]
      """  IsRestricted  """  
      self.IsSafetyItem:bool = obj["IsSafetyItem"]
      """  IsSafetyItem  """  
      self.CommercialBrand:str = obj["CommercialBrand"]
      """  CommercialBrand  """  
      self.CommercialSubBrand:str = obj["CommercialSubBrand"]
      """  CommercialSubBrand  """  
      self.CommercialCategory:str = obj["CommercialCategory"]
      """  CommercialCategory  """  
      self.CommercialSubCategory:str = obj["CommercialSubCategory"]
      """  CommercialSubCategory  """  
      self.CommercialStyle:str = obj["CommercialStyle"]
      """  CommercialStyle  """  
      self.CommercialSize1:str = obj["CommercialSize1"]
      """  CommercialSize1  """  
      self.CommercialSize2:str = obj["CommercialSize2"]
      """  CommercialSize2  """  
      self.CommercialColor:str = obj["CommercialColor"]
      """  CommercialColor  """  
      self.IsGiftCard:bool = obj["IsGiftCard"]
      """  IsGiftCard  """  
      self.PhotoFile:str = obj["PhotoFile"]
      """  PhotoFile  """  
      self.PartPhotoExists:bool = obj["PartPhotoExists"]
      """  PartPhotoExists  """  
      self.CommentText:str = obj["CommentText"]
      """  CommentText  """  
      self.PartSpecificPackingUOM:bool = obj["PartSpecificPackingUOM"]
      """  Indicates if the packaging information is part specific or specified at the UOM class level.  """  
      self.ImageID:str = obj["ImageID"]
      """  ImageID  """  
      self.CNSpecification:str = obj["CNSpecification"]
      """  Specification Code for China GTI purposes  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  This field defines if the part  is synchronized to an External CRM.  """  
      self.ExternalCRMPartID:str = obj["ExternalCRMPartID"]
      """  This field holds the id of this part in the External CRM  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  This field defines the last time that the  part  has been Synchronized between Epicor ERP and the External CRM. This field is maintained by the External CRM Synchronization  process.  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  This fields determines if the part needs to be synchronized to the External CRM. If there are changes in the part master file , Epicor ERP automatically turns on this field.  """  
      self.PESUNATTypeCode:str = obj["PESUNATTypeCode"]
      """  PESUNATTypeCode  """  
      self.PESUNATUOMCode:str = obj["PESUNATUOMCode"]
      """  PESUNATUOMCode  """  
      self.CNCodeVersion:str = obj["CNCodeVersion"]
      """  Code Version for China GTI purposes  """  
      self.CNTaxCategoryCode:str = obj["CNTaxCategoryCode"]
      """  Tax Category Code for China GTI purposes  """  
      self.CNHasPreferentialTreatment:bool = obj["CNHasPreferentialTreatment"]
      """  Has Preferential Treatment value for China GTI purposes  """  
      self.CNPreferentialTreatmentContent:str = obj["CNPreferentialTreatmentContent"]
      """  Preferential Treatment Content for China GTI purposes  """  
      self.CNZeroTaxRateMark:str = obj["CNZeroTaxRateMark"]
      """  Zero Tax Rate Mark for China GTI purposes  """  
      self.SubLevelCode:int = obj["SubLevelCode"]
      """  SubLevelCode  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  Date the Part was created  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  User the Part was created by  """  
      self.AttBatch:str = obj["AttBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttHeat:str = obj["AttHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.DeferManualEntry:bool = obj["DeferManualEntry"]
      """  DeferManualEntry  """  
      self.DeferPurchaseReceipt:bool = obj["DeferPurchaseReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Container Receipt, Receipt Entry.  """  
      self.DeferJobReceipt:bool = obj["DeferJobReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Job Receipt to Job, Job Receipt to Salvage, Job Receipt to Inventory, Kanban Receipts.  """  
      self.DeferInspection:bool = obj["DeferInspection"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Inspection Processing.  """  
      self.DeferQtyAdjustment:bool = obj["DeferQtyAdjustment"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Quantity Adjustment.  """  
      self.DeferInventoryMove:bool = obj["DeferInventoryMove"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Inventory Transfer.  """  
      self.DeferShipments:bool = obj["DeferShipments"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Customer Shipment Entry, Subcontractor Shipment Entry, Drop Shipment Entry, Order Entry.  """  
      self.DeferInventoryCounts:bool = obj["DeferInventoryCounts"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Count Tag Entry.  """  
      self.DeferAssetDisposal:bool = obj["DeferAssetDisposal"]
      """  DeferAssetDisposal  """  
      self.DeferReturnMaterials:bool = obj["DeferReturnMaterials"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: RMA Processing.  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date/Time when the Part record was updated  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the Part has to be synchronized with Epicor FSA application.  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.FSAItem:bool = obj["FSAItem"]
      """  When the part is marked as Item, it will create an Item Resource in Epicor FSA.  """  
      self.FSAEquipment:bool = obj["FSAEquipment"]
      """  When the part is marked as Equipment, it will create an Equipment Resource Template in Epicor FSA.  """  
      self.BOLClass:str = obj["BOLClass"]
      """  Bill of Lading Class. Additional data for the part required for LTL and International shipments.  """  
      self.FairMarketValue:int = obj["FairMarketValue"]
      """  Fair Market Value. Additional data for the part required for LTL and International shipments.  """  
      self.SAFTProdCategory:str = obj["SAFTProdCategory"]
      """  SAFTProdCategory  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.LocationIDNumReq:bool = obj["LocationIDNumReq"]
      """  Indicates if this part requires Identification Numbers shipment time.  This is disable if Track Location inventory is false.  """  
      self.LocationTrackInv:bool = obj["LocationTrackInv"]
      """  Indicates if this part tracks Location Inventory.  """  
      self.LocationMtlView:bool = obj["LocationMtlView"]
      """  Set the default value of Location View for materials added in Engineering Workbench.  """  
      self.LCNRVReporting:bool = obj["LCNRVReporting"]
      """  LCNRVReporting  """  
      self.LCNRVEstimatedUnitPrice:int = obj["LCNRVEstimatedUnitPrice"]
      """  LCNRVEstimatedUnitPrice  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.LocationFormatID:str = obj["LocationFormatID"]
      """  Default format ID used when assigning ID Numbers.  """  
      self.IsServices:bool = obj["IsServices"]
      """  IsServices  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PEDetrGoodServiceCode  """  
      self.PEProductServiceCode:str = obj["PEProductServiceCode"]
      """  PEProductServiceCode  """  
      self.DualUOMClassID:str = obj["DualUOMClassID"]
      """  Dual UOM Class ID  """  
      self.CNProductName:str = obj["CNProductName"]
      """  Product Name  """  
      self.CNWeight:int = obj["CNWeight"]
      """  Weight  """  
      self.CNWeightUOM:str = obj["CNWeightUOM"]
      """  Unit of Weight  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  Bonded  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttISOrigCountry:str = obj["AttISOrigCountry"]
      """  Indicates if entry of a County of Origin is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  ISO / IEC 6523  """  
      self.ExternalID:str = obj["ExternalID"]
      """  Part ID  """  
      self.CommoditySchemeID:str = obj["CommoditySchemeID"]
      """  UNTDID 7143  """  
      self.CommoditySchemeVersion:str = obj["CommoditySchemeVersion"]
      """  Part Commodity Scheme Version  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.PlanningByRevision:bool = obj["PlanningByRevision"]
      """  Indicates if this part performs MRP by Revision.  Requires Planning by Revision license.  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMPartType:int = obj["FSMPartType"]
      """  FSMPartType  """  
      self.CountryNumDescription:str = obj["CountryNumDescription"]
      self.EnableExpressCheckOut:bool = obj["EnableExpressCheckOut"]
      """  Should the Express Part Check Out option be enabled?  """  
      self.EnableGlobalLock:bool = obj["EnableGlobalLock"]
      self.EnableGlobalPart:bool = obj["EnableGlobalPart"]
      self.EnableInActive:bool = obj["EnableInActive"]
      """  Indicates if the InActive flag should be available for input,  """  
      self.EnableIUM:bool = obj["EnableIUM"]
      """  Flag to tell UI whether the Part.IUM field should be enabled or not.  """  
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Override Reverse Charge check box should be enabled.  """  
      self.EnableSerialNum:bool = obj["EnableSerialNum"]
      """  Indicates if the Serial Number button should be enabled.  """  
      self.EnableTrackSerialNum:bool = obj["EnableTrackSerialNum"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackSerialNum can be change.  """  
      self.EnableUOMClass:bool = obj["EnableUOMClass"]
      """  Flag to tell UI whether the UOMClassID field should be enabled or not.  """  
      self.ExtCoExist:bool = obj["ExtCoExist"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Default installation price of an equipment that requires installation in Epicor FSA.  """  
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstTypeDesc:str = obj["FSAInstTypeDesc"]
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Part is Global (master or linked)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany and GlbPartNum that is linking to this part  """  
      self.GlbTableAllowUpdTrackDim:bool = obj["GlbTableAllowUpdTrackDim"]
      """  check if TrackDimension is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackLots:bool = obj["GlbTableAllowUpdTrackLots"]
      """  check if TrackLots is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackSerial:bool = obj["GlbTableAllowUpdTrackSerial"]
      """  check if TrackSerialNum is in GlbTable and should be disabled in Part Entry  """  
      self.HasOnHandQty:bool = obj["HasOnHandQty"]
      """  Indicates if there is any quantity on hand for this part  """  
      self.IsComponent:bool = obj["IsComponent"]
      """  Indicates if part is a component (has a where used list available)  """  
      self.IsCoPart:bool = obj["IsCoPart"]
      """   This field indicates if the part is being used as a co-part anywhere.  This field will be used to prevent a Part from being marked as serial tracked or configured after being added as a co-part.

CoParts Project.  """  
      self.ISOrigCountryNum:int = obj["ISOrigCountryNum"]
      """  This is the numeric value of ISOrigCountry.  """  
      self.NextGeneratedLotNum:str = obj["NextGeneratedLotNum"]
      """  Shows what the next generated lot number for this part would look like  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      self.PEProductServiceCodeDesc:str = obj["PEProductServiceCodeDesc"]
      self.PLM:bool = obj["PLM"]
      self.PLMEnabled:bool = obj["PLMEnabled"]
      """  Indicates if the PLM toggle box is enabled.  """  
      self.Revision:bool = obj["Revision"]
      """  Revision  """  
      self.SalesUMDisp:str = obj["SalesUMDisp"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      self.SNMaskPrefixLength:int = obj["SNMaskPrefixLength"]
      self.SNMaskSuffixLength:int = obj["SNMaskSuffixLength"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      self.UpdatePartPlant:bool = obj["UpdatePartPlant"]
      """  Yes means to copy the NonStock and CostMethod from Part to all the PartPlant records.  """  
      self.UpdateSNPartPlant:bool = obj["UpdateSNPartPlant"]
      """  Indicates whether to update the Part serial number format changes to part plant  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.HasMRPPlanningAttribute:bool = obj["HasMRPPlanningAttribute"]
      """  If this Part is TrackInventoryAttributes = true, and the AttrClassID it is associated to has one or more attributes whose DynAttrClassDtl.UsedInPlanning= true.  """  
      self.UpdatePartPlantOverride:bool = obj["UpdatePartPlantOverride"]
      self.DEPayStatCodeDescr:str = obj["DEPayStatCodeDescr"]
      """  DEPayStatCode Description  """  
      self.DEDenominationDescr:str = obj["DEDenominationDescr"]
      """  DEDenomination Description  """  
      self.DefaultBuyerName:str = obj["DefaultBuyerName"]
      self.DefaultPlannerName:str = obj["DefaultPlannerName"]
      self.EnableTrackByRevision:bool = obj["EnableTrackByRevision"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackInventoryByRevision can be changed.  """  
      self.LinkedToGlbPart:bool = obj["LinkedToGlbPart"]
      """  indicated if this part has been linked to a global part  """  
      self.MXProductClass:str = obj["MXProductClass"]
      """  Value is from MXProdCls User Code  """  
      self.MXActiveIngredientName:str = obj["MXActiveIngredientName"]
      """  Active Ingredient Name  """  
      self.MXChemicalName:str = obj["MXChemicalName"]
      """  Chemical Name  """  
      self.MXGenericProductName:str = obj["MXGenericProductName"]
      """  Generic Product Name  """  
      self.MXTrademark:str = obj["MXTrademark"]
      """  Trademark  """  
      self.MXManufacturerCompany:str = obj["MXManufacturerCompany"]
      """  Manufacturer Company  """  
      self.MXExpirationDate:str = obj["MXExpirationDate"]
      """  Expiration Date  """  
      self.MXMedicationLot:str = obj["MXMedicationLot"]
      """  Medication Lot  """  
      self.MXPharmaceuticalForm:str = obj["MXPharmaceuticalForm"]
      """  Value is from MXProdForm User Code  """  
      self.MXKeepCondition:str = obj["MXKeepCondition"]
      """  Value is from MXProdKCnd User Code  """  
      self.MXSanitaryRegistration:str = obj["MXSanitaryRegistration"]
      """  Sanitary Registration Number  """  
      self.MXCASNum:str = obj["MXCASNum"]
      """  CAS Number  """  
      self.MXImportSanitaryRegistration:str = obj["MXImportSanitaryRegistration"]
      """  Import Sanitary Registration Number  """  
      self.MXManufacturerData:str = obj["MXManufacturerData"]
      """  Manufacturer Data Description  """  
      self.MXFormulatorData:str = obj["MXFormulatorData"]
      """  Formulator Data Description  """  
      self.MXPersonData:str = obj["MXPersonData"]
      """  Person Data Description  """  
      self.MXAuthorizedUse:str = obj["MXAuthorizedUse"]
      """  Authorized Use Description  """  
      self.MXMaterialType:str = obj["MXMaterialType"]
      """  Value is from MXProdMTyp User Code  """  
      self.MXMaterialTypeDescription:str = obj["MXMaterialTypeDescription"]
      """  Description of the “Other” material Type  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.ClassDescription:str = obj["ClassDescription"]
      self.CommodityCodeSuppUnitsUOM:str = obj["CommodityCodeSuppUnitsUOM"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.CompanySendToFSA:bool = obj["CompanySendToFSA"]
      self.DualUOMClassIDDescription:str = obj["DualUOMClassIDDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.FSAssetClassCodeFSAssetClassDesc:str = obj["FSAssetClassCodeFSAssetClassDesc"]
      self.Mtl_AnalysisCdDescription:str = obj["Mtl_AnalysisCdDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OnHoldReasonCodeDescription:str = obj["OnHoldReasonCodeDescription"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.RefCategoryDescription:str = obj["RefCategoryDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.UOMClassIDDescription:str = obj["UOMClassIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.XbSystELIEinvoice:bool = obj["XbSystELIEinvoice"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.SalesCatID_c:str = obj["SalesCatID_c"]
      self.CustomBuyout_c:bool = obj["CustomBuyout_c"]
      self.NonSellable_c:bool = obj["NonSellable_c"]
      self.WebSearchable_c:bool = obj["WebSearchable_c"]
      pass

class Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The Part number that this substitute Part is for.  """  
      self.SubPart:str = obj["SubPart"]
      """  Substitute Part  """  
      self.RecType:str = obj["RecType"]
      """  Indicates the record type. "S" = Substitute, "C" = Compliment  """  
      self.SubType:str = obj["SubType"]
      """  Pertains only to Substitute Parts (RecType = "S"). Values are "C" - Comparable, "D" - Downgrade, "U" - Upgrade  """  
      self.QtyPer:int = obj["QtyPer"]
      """   The quantity of the alternate part per 1 of the parent part in the parents base inventory uom. Cannot be zero.
To convert an existing OrderDtl.SellingQty to a PartSubs. It is converted to the Parents Part Base Inventory UOM  then multiply PartSubs.QtyPer, then converted to  PartSub.SalesUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit of measure used when this part is used as a substitute/compliment with the parent part (partsubs.partnum).  Defaults as Part.SUM of the PartSub.SubPart.  """  
      self.Comment:str = obj["Comment"]
      """  Optional Comment  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultSub:bool = obj["DefaultSub"]
      self.Price:int = obj["Price"]
      """  Price for the Suggested Quantity  """  
      self.SuggestedQty:int = obj["SuggestedQty"]
      """  Suggested Quantity  """  
      self.Selected:bool = obj["Selected"]
      """  Selected Row  """  
      self.SugOrderQty:int = obj["SugOrderQty"]
      """  Suggested Quantity for Order Qty in Quote Detail  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.SubPartSellingFactor:int = obj["SubPartSellingFactor"]
      self.SubPartTrackSerialNum:bool = obj["SubPartTrackSerialNum"]
      self.SubPartTrackDimension:bool = obj["SubPartTrackDimension"]
      self.SubPartPartDescription:str = obj["SubPartPartDescription"]
      self.SubPartIUM:str = obj["SubPartIUM"]
      self.SubPartSalesUM:str = obj["SubPartSalesUM"]
      self.SubPartTrackLots:bool = obj["SubPartTrackLots"]
      self.SubPartPricePerCode:str = obj["SubPartPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartUOMRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.UOMCode:str = obj["UOMCode"]
      """  User defined code which uniquely identifies the UOM within the UOMClass.  """  
      self.ConvFactor:int = obj["ConvFactor"]
      """   Value used to convert to/from base uom for the specific part. Cannot change if it's base uom of UOMClass (always 1.0) Sometimes a unit of measure conversion is relative to a specific part. These are non-standard conversions.
For example; 1 box(bx) of  Part A is 12ea. 1(bx) of Part B is 24ea. Non-standard conversions are defined in the PartUOM table. When ConvOperator = * then ConvFactor is 1 UOM expressed in Base UOM else it is 1 Base UOM expressed in UOM  """  
      self.Active:bool = obj["Active"]
      """  Indicates if the PartUOM is Active. This field is ready only and is used for internal logic purposes only.  """  
      self.TrackOnHand:bool = obj["TrackOnHand"]
      """  If true then Onhand Quantity will be tracked per this UOM for this part.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.HasBeenUsed:bool = obj["HasBeenUsed"]
      """  This indicates that this Part UOM has been used somewhere.  Therefore we do not want to allow the associated part specific conversion to change.  """  
      self.ConvOperator:str = obj["ConvOperator"]
      """   Indicates the mathmatical operator that is used for performing the UOM Conversion. Options are "*" (Multiply) or "\" (Divide).
For example for Feet to Inch where Inch is the base uom. 
You could have 1ft / 12 = 1In  """  
      self.WebUOM:bool = obj["WebUOM"]
      """  WebUOM  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ConvFromUOM:str = obj["ConvFromUOM"]
      """  Qualifies that 1 of this uom = ConvFactor in ConvToUOM. Example: 12in = 1ft or 1ft = 12in  """  
      self.ConvOverrride:bool = obj["ConvOverrride"]
      """  External field used to enable/disable the conversion factor to able to change it.  """  
      self.ConvToUOM:str = obj["ConvToUOM"]
      """  Qualifies UOM of the ConvFactor. This either the UOMClass.BaseUOM or the UOMConv.UOMCode depending on the value of ConvOperator.  """  
      self.EAN13:str = obj["EAN13"]
      """  EAN13 product code from PartPC  """  
      self.EAN14:str = obj["EAN14"]
      """  EAN14 product code from PartPC  """  
      self.EAN8:str = obj["EAN8"]
      """  EAN8 product code from PartPC  """  
      self.EnableConvFactor:bool = obj["EnableConvFactor"]
      """  Internal use. To indicate if the ConvFactor should be enabled. This field is set to true if the related UOMClass is non-standard and the UOMCode is not the BaseUOM  """  
      self.EnableTrackOnHand:bool = obj["EnableTrackOnHand"]
      """  Indicates if the TrackOnHand is enabled. True when Part.TrackMultiUOM = true and UOMCode <> Part.IUM  """  
      self.GTIN14:str = obj["GTIN14"]
      """  GTIN14 product code from PartPC  """  
      self.HIBC:str = obj["HIBC"]
      """  HIBC UPN product code from PartPC  """  
      self.PartSpecific:bool = obj["PartSpecific"]
      """  Value of UOMConv.PartSpecific for informational purposes  """  
      self.UOMDesc:str = obj["UOMDesc"]
      self.UPC12:str = obj["UPC12"]
      """  UPC12 product code from PartPC  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  BaseUOMCode from UOMClass file  """  
      self.DispPkgCode:str = obj["DispPkgCode"]
      """  Used to input/display the package code related to the part/UOM. The user will only be able to update this data if Part.UsePartSpecificPckCode = true  """  
      self.DispPkgCodeDesc:str = obj["DispPkgCodeDesc"]
      """  Description of the PkgCode  """  
      self.DispPkgDisplaySeq:int = obj["DispPkgDisplaySeq"]
      """  Indicates the display sequence of the packaging in relation to the other packaging for the part.  """  
      self.DispPkgIsDefault:bool = obj["DispPkgIsDefault"]
      """  Indicates if the PkgCode is the default.  """  
      self.PartSpecificPkgCode:bool = obj["PartSpecificPkgCode"]
      """  Indicates if the pkg code information seen in PartUOM is part specific (the data came from PackingUOM where PartNum is not blank.) If true the package code data can be updated in Part Maint, if false the PartUOM pkgcode columns will be disabled.  """  
      self.DispPkgDisplayHidden:bool = obj["DispPkgDisplayHidden"]
      """  Indicates if the package code will be displayed in the application. If false, the package codes that are not valid for the MGF process on the shop floor are hidden.  """  
      self.StandardUpdate:bool = obj["StandardUpdate"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartWhseRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Warehouse  """  
      self.DemandQty:int = obj["DemandQty"]
      """   A summary of the outstanding quantities for order open sales releases that are being filled from stock and of the open job material requirements that are to be issued from stock (JobMtl.Buyit = No) for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  A summary of the reserved quantities for order open sales releases for this Part within a specific warehouse. NOTE: This value is the TOTAL of reservations in PartAlloc.  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  A summary of the allocated quantities for order open sales releases for this Part within a specific warehouse. NOTE: This value is the TOTAL of allocation in PartAlloc.  """  
      self.PickingQty:int = obj["PickingQty"]
      """  Quantity that is in the picking process for orders. A summary of PartAlloc.PickingQty for all demand.  """  
      self.PickedQty:int = obj["PickedQty"]
      """  Stock Quantity picked for orders.  A summary of PartAlloc.PickedQty for all demand.  """  
      self.CountedDate:str = obj["CountedDate"]
      """  Date last counted.  Updated during the Inventory Posting Process.  Not directly maintainable by user.  """  
      self.OnHandQty:int = obj["OnHandQty"]
      """  A summary of PartBin.OnHandQty for the warehouse where the bin is a nettable bin (WhseBin.NonNettable = NO). Maintained via the PartBin write trigger.  """  
      self.NonNettableQty:int = obj["NonNettableQty"]
      """  A summary of PartBin.OnHandQty for the warehouse where the bin is a non nettable bin (WhseBin.NonNettable = YES). Maintained via the PartBin write trigger.  """  
      self.BuyToOrderQty:int = obj["BuyToOrderQty"]
      """  A summary of Demand that is Buy To Order and thus should not take away from Available inventory.  """  
      self.SalesDemandQty:int = obj["SalesDemandQty"]
      """   A summary of the outstanding quantities for order open sales releases that are being filled from stock for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.SalesReservedQty:int = obj["SalesReservedQty"]
      """  A total of inventory quantities that has been reserved  for sales orders.   A summary of PartAlloc.ReservedQty for sales order allocations against stock  (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.SalesAllocatedQty:int = obj["SalesAllocatedQty"]
      """  New in 9.00.  A summary of outstanding quantities for order open sales releases that are being filled from stock and have not been reserved, selected for picking or picked. Calculated as OurStockQty - ReservedQty + PickingQty + PickedQty).  Note: ReservedQty, PickingQty, PickedQty are summaries of PartAlloc records with a blank job,  related to an OrderRel.  The system tracks allocation summaries in the following sequence; AllocQty--> ReservedQty--> PickingQty--> PickedQty.  """  
      self.SalesPickingQty:int = obj["SalesPickingQty"]
      """   Quantity that is in the picking process for sales orders. A summary of PartAlloc.PickingQty where PartAlloc.OrderNum > 0
A summary of PartAlloc.PickingQty for sales order that are being picked from stock (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.SalesPickedQty:int = obj["SalesPickedQty"]
      """  Stock Quantity picked for sales orders.  A summary of PartAlloc.PickedQty for sales order picked from stock  (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.JobDemandQty:int = obj["JobDemandQty"]
      """  A summary of the outstanding quantities for job material requirements that are being filled from stock for this Part within a specific warehouse.  """  
      self.JobReservedQty:int = obj["JobReservedQty"]
      """  Summary of mfg demands on released jobs. That is, a summary of outstanding JobMtl and JobAsmbl.PullQty where JobHead.JobFirm = Yes and JobReleased = Yes  """  
      self.JobAllocatedQty:int = obj["JobAllocatedQty"]
      """  New in 9.00.  Summary of stock allocated for jobs.  """  
      self.JobPickingQty:int = obj["JobPickingQty"]
      """  Quantity that is in the picking process for jobs. A summary of PartAlloc.PickingQty where PartAlloc.JobNum <> ''.  """  
      self.JobPickedQty:int = obj["JobPickedQty"]
      """  Stock Quantity picked for jobs.  """  
      self.UnfirmJobDemandQty:int = obj["UnfirmJobDemandQty"]
      """  New in 9.00.  Summary of mfg demand requirements on unfirm jobs. That is, a summary of outstanding JobMtl.RequiredQty and JobAsmbl.PullQty where JobHead.JobFirm = No.  """  
      self.TFOrdDemandQty:int = obj["TFOrdDemandQty"]
      """   A summary of the outstanding quantities for transfer order requirements that are being filled from stock for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.TFOrdReservedQty:int = obj["TFOrdReservedQty"]
      """  Summary of Transfer Order Reserved Qty for this Part in this Warehouse.  """  
      self.TFOrdAllocatedQty:int = obj["TFOrdAllocatedQty"]
      """  Summary of Transfer Order Allocated Qty for this Part in this Warehouse.  """  
      self.TFOrdPickingQty:int = obj["TFOrdPickingQty"]
      """  Quantity that is in the picking process for transfer orders.  A summary of PartAlloc.PickingQty where PartAlloc.TFOrdNum > 0.  """  
      self.TFOrdPickedQty:int = obj["TFOrdPickedQty"]
      """  Stock Quantity picked for transfer orders.  """  
      self.KBCode:str = obj["KBCode"]
      """  Uniquely indentifies the record.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """   Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.
Note: Safety + Minimum = Reorder Point...  using this formula the  reorder point is the amount at which to reorder to maintain at least the prescribed minimum quantity.  """  
      self.KBPONUM:int = obj["KBPONUM"]
      """  Purchase order number  that the detail line item is linked to.  """  
      self.KBPOLine:int = obj["KBPOLine"]
      """  The line number of the detail record on the purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.KBWarehouseCode:str = obj["KBWarehouseCode"]
      """  Kanban Warehouse  """  
      self.KBBinNum:str = obj["KBBinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.KBPlant:str = obj["KBPlant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.KBQty:int = obj["KBQty"]
      """  Indicates the desired minimum on-hand Kanban quantity.  """  
      self.PcntTolerance:int = obj["PcntTolerance"]
      """  Percent Tolerance. Entered as a positive number, Used to define the default percent tolerance. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a percentage difference between the count quantity and the frozen quantity by more than the percent tolerance figure is considered out of tolerance. Calculated as ?adjustment qty / frozen qty? expressed as a percent.  """  
      self.CalcPcnt:bool = obj["CalcPcnt"]
      """  False = there is no percent tolerance consideration and any percent variance is considered within tolerance. True = percent tolerance is active for this part/whs and the value in PcntTolerance will be used to determine if the count variance is within tolerance.  """  
      self.CalcQty:bool = obj["CalcQty"]
      """  False = there is no quantity tolerance consideration and any quantity variance is considered within tolerance. True = quantity tolerance is active for this part/whse and the value in QtyTolerance will be used to determine if the count variance is within tolerance.  """  
      self.CalcValue:bool = obj["CalcValue"]
      """  False = there is no value tolerance consideration and any value variance is considered within tolerance. True = value tolerance is active for this part/whse and the value in ValueTolerance will be used to determine if the count variance is within tolerance.  """  
      self.QtyAdjTolerance:int = obj["QtyAdjTolerance"]
      """  Used to provide a means to control whether a count quantity discrepancy should be posted as an adjustment to inventory. Zero indicates all quantity adjustments will be posted. This parameter is used to control the count discrepancy of parts that are counted by weight on a scale. Counts often vary based upon humidity. If the count of the part is within this tolerance but different from the frozen quantity then no inventory adjustment will be posted.  """  
      self.CalcQtyAdj:bool = obj["CalcQtyAdj"]
      """  False = there is no qty adj tolerance setting at the PartWhse level (so the setting in PartSite will be used). True = qty adj tolerance is active for this part/whs and the value in QtyAdjTolerance will be used to determine if the count variance should be  """  
      self.MinAbc:str = obj["MinAbc"]
      """  Moved from PartSite. When the system sets the ABC class, it will not allow the class to be lower than this class.  """  
      self.SystemAbc:str = obj["SystemAbc"]
      """  Moved from PartSite. ABC Classification calculated by the system based on Stock Valuation Percent. This is maintainable by the user if ManualABC = true.  """  
      self.ManualABC:bool = obj["ManualABC"]
      """  This will lock the SystemABC code preventing the automatic determination by the Calculate ABC Codes process, which will not reset the ABC code on parts that have the flag set.  """  
      self.LastCCDate:str = obj["LastCCDate"]
      """  The last date this part was cycle counted. This date is used to insure that a part will be selected for cycle counting at the appropriate time. This is different than the CountedDate field, which will be updated for either a cycle count or physical inventory.  """  
      self.OvrrideCountFreq:bool = obj["OvrrideCountFreq"]
      """  This flag indicates whether the CountFreq defined in this record should over ride the count frequency in the AbcCode, SiteConfABC or WarehseABC tables.  """  
      self.CountFreq:int = obj["CountFreq"]
      """  If greater than zero this setting overrides values in AbcCode,  SiteConfABC and Warehse.  """  
      self.QtyTolerance:int = obj["QtyTolerance"]
      """  Quantity tolerance. Entered as a positive whole number, Used to define the default quantity tolerance. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a count quantity that varies from the frozen quantity by more than the quantity tolerance figure is considered out of tolerance.  """  
      self.ValueTolerance:int = obj["ValueTolerance"]
      """  Value tolerance. Entered as a positive number. Used to define the default value tolerance.  An entry of zero will indicate that any value variance will be considered out of tolerance for this part. Value variance is calculated as the difference in cost between the counted quantity and the frozen quantity.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Plant:str = obj["Plant"]
      """  Filled in by BO, not phiscally in database.  """  
      self.DefaultWhse:bool = obj["DefaultWhse"]
      self.PrimBinNum:str = obj["PrimBinNum"]
      self.TotalDemand:int = obj["TotalDemand"]
      self.PrimBinNumDescription:str = obj["PrimBinNumDescription"]
      self.KBActionCode:str = obj["KBActionCode"]
      self.KBActionDesc:str = obj["KBActionDesc"]
      self.PlantOwner:str = obj["PlantOwner"]
      self.MaxQtyUOM:str = obj["MaxQtyUOM"]
      self.MinQtyUOM:str = obj["MinQtyUOM"]
      self.SafetyQtyUOM:str = obj["SafetyQtyUOM"]
      self.IUM:str = obj["IUM"]
      """  Part Warehouse columns Unit Of Measure.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.KBBinNumDescription:str = obj["KBBinNumDescription"]
      self.KBCodeKBActionCode:str = obj["KBCodeKBActionCode"]
      self.KBCodeKBDescription:str = obj["KBCodeKBDescription"]
      self.KBPlantName:str = obj["KBPlantName"]
      self.KBWarehouseCodeDescription:str = obj["KBWarehouseCodeDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.WarehouseDescription:str = obj["WarehouseDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxExemptRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code  """  
      self.EffectiveFrom:str = obj["EffectiveFrom"]
      """  Exemption Effective Start Date  """  
      self.EffectiveTo:str = obj["EffectiveTo"]
      """  Exemption Effective End Date  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.TextCode:str = obj["TextCode"]
      """  Tax Legal Text Code  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Tax Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Tax Resolution Date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CustNum:int = obj["CustNum"]
      """  A unique Customer identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  A unique Vendor identifier.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.SalesTaxDescription:str = obj["SalesTaxDescription"]
      self.SalesTRCDescription:str = obj["SalesTRCDescription"]
      self.TaxTextDescription:str = obj["TaxTextDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass




#########################################################################
# Custom Schemas:
#########################################################################
class AllowDimensionMaintenance_output:
   def __init__(self, obj):
      pass

class AllowInventoryInfo_output:
   def __init__(self, obj):
      pass

class AllowLotMaintenance_output:
   def __init__(self, obj):
      pass

class AllowPurchasingInfo_output:
   def __init__(self, obj):
      pass

class AllowViewLotCosts_output:
   def __init__(self, obj):
      pass

class BuildPartPlantPlanningAttributeTable_input:
   """ Required : 
   tblPPPAttribute
   ttPartPlantRow
   attrClassID
   ium
   """  
   def __init__(self, obj):
      self.tblPPPAttribute:list[Erp_Tablesets_PartPlantPlanningAttributeRow] = obj["tblPPPAttribute"]
      """  Input-output PartPlantPlanningAttribute table  """  
      self.ttPartPlantRow:list[Erp_Tablesets_PartPlantRow] = obj["ttPartPlantRow"]
      self.attrClassID:str = obj["attrClassID"]
      """  Attribute ClassID  """  
      self.ium:str = obj["ium"]
      """  Inventory part UOM  """  
      pass

class BuildPartPlantPlanningAttributeTable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.tblPPPAttribute:list = obj[any]
      pass

      """  output parameters  """  

class CalcACWDays_input:
   """ Required : 
   ipMfgLeadTimeMnl
   ipLvlMfgLeadTimeMnl
   ipACWPercentage
   ds
   """  
   def __init__(self, obj):
      self.ipMfgLeadTimeMnl:bool = obj["ipMfgLeadTimeMnl"]
      """  Indicates manufacturing lead times are entered manually by the user.  """  
      self.ipLvlMfgLeadTimeMnl:int = obj["ipLvlMfgLeadTimeMnl"]
      """  Manually entered manufacturing lead time value  """  
      self.ipACWPercentage:int = obj["ipACWPercentage"]
      """  Auto Consume Window Percentage  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class CalcACWDays_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CalcWipWClause_input:
   """ Required : 
   partNum
   wipCompletedOnly
   wipExcludeProdLoc
   wipPlant
   authorizedPlants
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      self.wipCompletedOnly:bool = obj["wipCompletedOnly"]
      self.wipExcludeProdLoc:bool = obj["wipExcludeProdLoc"]
      self.wipPlant:str = obj["wipPlant"]
      self.authorizedPlants:str = obj["authorizedPlants"]
      pass

class CalcWipWClause_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class ChangeCostMethod_input:
   """ Required : 
   ds
   newCostMethod
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.newCostMethod:str = obj["newCostMethod"]
      pass

class ChangeCostMethod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDualUOMClassID_input:
   """ Required : 
   uomClassID
   ds
   """  
   def __init__(self, obj):
      self.uomClassID:str = obj["uomClassID"]
      """  proposed DualUOMClassID.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeDualUOMClassID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeLinkToContract_input:
   """ Required : 
   newLinkToContract
   ds
   """  
   def __init__(self, obj):
      self.newLinkToContract:bool = obj["newLinkToContract"]
      """  The new LinkToContract value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeLinkToContract_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMRPWarning_input:
   """ Required : 
   partNum
   plant
   processMRP
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Part number of the PartPlant record that is being updated.  """  
      self.plant:str = obj["plant"]
      """  Plant ID of the PartPlant record that is being updated .  """  
      self.processMRP:bool = obj["processMRP"]
      """  New value of the PartPlant.ProcessMRP field.  """  
      pass

class ChangeMRPWarning_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.warningMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeMXProdServCode_input:
   """ Required : 
   ipMXProdServCode
   ds
   """  
   def __init__(self, obj):
      self.ipMXProdServCode:str = obj["ipMXProdServCode"]
      """  Proposed input value of Product or Service Code  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeMXProdServCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartBinInfoKBCode_input:
   """ Required : 
   NewKBCode
   ds
   """  
   def __init__(self, obj):
      self.NewKBCode:str = obj["NewKBCode"]
      """  The new Kan Ban Type code field value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartBinInfoKBCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartBuyToOrder_input:
   """ Required : 
   ipBuyToOrder
   ds
   """  
   def __init__(self, obj):
      self.ipBuyToOrder:bool = obj["ipBuyToOrder"]
      """  The new part Buy To Order value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartBuyToOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartCommodityCode_input:
   """ Required : 
   newCommodityCode
   ds
   """  
   def __init__(self, obj):
      self.newCommodityCode:str = obj["newCommodityCode"]
      """  The new commodity code.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartCommodityCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartExternalMESSyncRequired_input:
   """ Required : 
   newExternalMESSyncRequired
   ds
   """  
   def __init__(self, obj):
      self.newExternalMESSyncRequired:bool = obj["newExternalMESSyncRequired"]
      """  The new ExternalMESSyncRequired value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartExternalMESSyncRequired_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartGlobalPart_input:
   """ Required : 
   ProposedGlobalPart
   ds
   """  
   def __init__(self, obj):
      self.ProposedGlobalPart:bool = obj["ProposedGlobalPart"]
      """  The proposed global part value  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartGlobalPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartInspectionRequired_input:
   """ Required : 
   inspectionReq
   ds
   """  
   def __init__(self, obj):
      self.inspectionReq:str = obj["inspectionReq"]
      """  The new Inspection Required part value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartInspectionRequired_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartInternalUnitPrice_input:
   """ Required : 
   internalUnitPrice
   ds
   """  
   def __init__(self, obj):
      self.internalUnitPrice:int = obj["internalUnitPrice"]
      """  The new Unit Price value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartInternalUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartIsServices_input:
   """ Required : 
   newIsServices
   ds
   """  
   def __init__(self, obj):
      self.newIsServices:bool = obj["newIsServices"]
      """  The new non-stock value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartIsServices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartLocationIDNumReq_input:
   """ Required : 
   LocationIDNumReq
   ds
   """  
   def __init__(self, obj):
      self.LocationIDNumReq:bool = obj["LocationIDNumReq"]
      """  The new part LocationIDNumReq value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartLocationIDNumReq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartNonStock_input:
   """ Required : 
   newNonStock
   ds
   """  
   def __init__(self, obj):
      self.newNonStock:bool = obj["newNonStock"]
      """  The new non-stock value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartNonStock_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartNum_input:
   """ Required : 
   ProposedPartNum
   ds
   """  
   def __init__(self, obj):
      self.ProposedPartNum:str = obj["ProposedPartNum"]
      """  The proposed product code value  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantBuyToOrder_input:
   """ Required : 
   ipBuyToOrder
   ds
   """  
   def __init__(self, obj):
      self.ipBuyToOrder:bool = obj["ipBuyToOrder"]
      """  The new part Buy To Order value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantBuyToOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantPlanningAttributeNofP_input:
   """ Required : 
   NofPColumnName
   NewQty
   ds
   """  
   def __init__(self, obj):
      self.NofPColumnName:str = obj["NofPColumnName"]
      """  The Number of Pieces column being modified.  """  
      self.NewQty:int = obj["NewQty"]
      """  The value entered in the Number of Pieces column being modified.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantPlanningAttributeNofP_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantPlanningAttributeQtyDisplayOption_input:
   """ Required : 
   NewQtyDisplayOption
   ds
   """  
   def __init__(self, obj):
      self.NewQtyDisplayOption:str = obj["NewQtyDisplayOption"]
      """  The QtyDisplayOption value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantPlanningAttributeQtyDisplayOption_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantPlanningAttributeQty_input:
   """ Required : 
   QtyColumnName
   NewQty
   ds
   """  
   def __init__(self, obj):
      self.QtyColumnName:str = obj["QtyColumnName"]
      """  The Quantity column being modified.  """  
      self.NewQty:int = obj["NewQty"]
      """  The value entered in the Quantity column being modified.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantPlanningAttributeQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantPlanningAttributeUrgentVendorID_input:
   """ Required : 
   NewVendorId
   ds
   """  
   def __init__(self, obj):
      self.NewVendorId:str = obj["NewVendorId"]
      """  The new Vendor ID value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantPlanningAttributeUrgentVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantPlanningAttributeVendorID_input:
   """ Required : 
   NewVendorId
   ds
   """  
   def __init__(self, obj):
      self.NewVendorId:str = obj["NewVendorId"]
      """  The new Vendor ID value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantPlanningAttributeVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantSourceTypePrep_input:
   """ Required : 
   PartNum
   NewSourceType
   """  
   def __init__(self, obj):
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.NewSourceType:str = obj["NewSourceType"]
      """  The new SourceType value.  """  
      pass

class ChangePartPlantSourceTypePrep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ruleMessage:str = obj["parameters"]
      self.singleLevelConfMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangePartPlantSourceType_input:
   """ Required : 
   NewSourceType
   ds
   """  
   def __init__(self, obj):
      self.NewSourceType:str = obj["NewSourceType"]
      """  The new SourceType value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantSourceType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ruleMessage:str = obj["parameters"]
      self.singleLevelConfMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantUrgentVendorID_input:
   """ Required : 
   NewVendorId
   ds
   """  
   def __init__(self, obj):
      self.NewVendorId:str = obj["NewVendorId"]
      """  The new Vendor ID value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantUrgentVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartPlantVendorID_input:
   """ Required : 
   NewVendorId
   ds
   """  
   def __init__(self, obj):
      self.NewVendorId:str = obj["NewVendorId"]
      """  The new Vendor ID value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartPlantVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartProdCode_input:
   """ Required : 
   ProposedProdCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedProdCode:str = obj["ProposedProdCode"]
      """  The proposed product code value  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartProdCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartRestrictSubstance_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartRestrictSubstance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartRestrictionManual_input:
   """ Required : 
   checkManual
   ds
   """  
   def __init__(self, obj):
      self.checkManual:bool = obj["checkManual"]
      """  Manual value  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartRestrictionManual_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartRestrictionType_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartRestrictionType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartRevApproved_input:
   """ Required : 
   ipApproved
   ipValidPassword
   ds
   """  
   def __init__(self, obj):
      self.ipApproved:bool = obj["ipApproved"]
      """  The proposed PartRev.Approved value  """  
      self.ipValidPassword:bool = obj["ipValidPassword"]
      """  Did the user supply a valid password to run this functionality?
             The value for this parameter should come from running the ValidatePassword method
             in the UserFile BO.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartRevApproved_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSNBaseDataTypePrep_input:
   """ Required : 
   ipSNBaseDataType
   ds
   ipInitNumODigits
   ipCutPrefix
   """  
   def __init__(self, obj):
      self.ipSNBaseDataType:str = obj["ipSNBaseDataType"]
      """  Part.SNBaseDataType  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.ipInitNumODigits:bool = obj["ipInitNumODigits"]
      """  Cut prefix  """  
      self.ipCutPrefix:bool = obj["ipCutPrefix"]
      """  Cut prefix  """  
      pass

class ChangePartSNBaseDataTypePrep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSNBaseDataType_input:
   """ Required : 
   ipSNBaseDataType
   ds
   """  
   def __init__(self, obj):
      self.ipSNBaseDataType:str = obj["ipSNBaseDataType"]
      """  Part.SNBaseDataType  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartSNBaseDataType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSNMaskPrefixSuffixPrep_input:
   """ Required : 
   ipSNMaskValue
   ipPreSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipSNMaskValue:str = obj["ipSNMaskValue"]
      """  Part.SNMaskPrefix  """  
      self.ipPreSuffix:bool = obj["ipPreSuffix"]
      """  Part.SNMaskPrefix  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartSNMaskPrefixSuffixPrep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSNMaskPrefixSuffix_input:
   """ Required : 
   ipSNMaskPrefix
   ipSNMaskSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipSNMaskPrefix:str = obj["ipSNMaskPrefix"]
      """  Part.SNMaskPrefix  """  
      self.ipSNMaskSuffix:str = obj["ipSNMaskSuffix"]
      """  Part.SNMaskSuffix  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartSNMaskPrefixSuffix_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSubsPartNum_input:
   """ Required : 
   proposedPartNum
   ds
   """  
   def __init__(self, obj):
      self.proposedPartNum:str = obj["proposedPartNum"]
      """  The proposed PartNum  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartSubsPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartSyncToExternalCRM_input:
   """ Required : 
   newSyncToExternalCRM
   ds
   """  
   def __init__(self, obj):
      self.newSyncToExternalCRM:bool = obj["newSyncToExternalCRM"]
      """  The new SyncToExternalCRM value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartSyncToExternalCRM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartTrackDimension_input:
   """ Required : 
   TrackDimension
   ds
   """  
   def __init__(self, obj):
      self.TrackDimension:bool = obj["TrackDimension"]
      """  The new part Track Dimension value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartTrackDimension_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartTrackLots_input:
   """ Required : 
   TrackLots
   ds
   """  
   def __init__(self, obj):
      self.TrackLots:bool = obj["TrackLots"]
      """  The new part Track Lots value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartTrackLots_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartTrackSerialNum_input:
   """ Required : 
   TrackSerialNum
   ds
   """  
   def __init__(self, obj):
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  The new part Track Serial Numbers value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartTrackSerialNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartTypeCode_input:
   """ Required : 
   TypeCode
   ds
   """  
   def __init__(self, obj):
      self.TypeCode:str = obj["TypeCode"]
      """  The new part Type Code field value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartTypeCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartUOMConvFactor_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartUOMConvFactor_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartUOMConvOverride_input:
   """ Required : 
   ipConvOverrride
   ds
   """  
   def __init__(self, obj):
      self.ipConvOverrride:bool = obj["ipConvOverrride"]
      """  The new ConvOverrride field value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartUOMConvOverride_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartUnitPrice_input:
   """ Required : 
   unitPrice
   ds
   """  
   def __init__(self, obj):
      self.unitPrice:int = obj["unitPrice"]
      """  The new Unit Price value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartWhseKBCode_input:
   """ Required : 
   NewKBCode
   ds
   """  
   def __init__(self, obj):
      self.NewKBCode:str = obj["NewKBCode"]
      """  The new Kan Ban Type code field value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePartWhseKBCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePlantSNBaseDataTypePrep_input:
   """ Required : 
   ipSNBaseDataType
   ds
   ipInitNumODigits
   ipCutPrefix
   """  
   def __init__(self, obj):
      self.ipSNBaseDataType:str = obj["ipSNBaseDataType"]
      """  Part.SNBaseDataType  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.ipInitNumODigits:bool = obj["ipInitNumODigits"]
      """  Cut prefix  """  
      self.ipCutPrefix:bool = obj["ipCutPrefix"]
      """  Cut prefix  """  
      pass

class ChangePlantSNBaseDataTypePrep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePlantSNBaseDataType_input:
   """ Required : 
   ipSNBaseDataType
   ds
   """  
   def __init__(self, obj):
      self.ipSNBaseDataType:str = obj["ipSNBaseDataType"]
      """  Part.SNBaseDataType  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePlantSNBaseDataType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePlantSNMaskPrefixSuffixPrep_input:
   """ Required : 
   ipSNMaskValue
   ipPreSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipSNMaskValue:str = obj["ipSNMaskValue"]
      """  PartPlant.SNMaskPrefix  """  
      self.ipPreSuffix:bool = obj["ipPreSuffix"]
      """  PartPlant.SNMaskPrefix  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePlantSNMaskPrefixSuffixPrep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePlantSNMaskPrefixSuffix_input:
   """ Required : 
   ipSNMaskPrefix
   ipSNMaskSuffix
   ds
   """  
   def __init__(self, obj):
      self.ipSNMaskPrefix:str = obj["ipSNMaskPrefix"]
      """  Prefix  """  
      self.ipSNMaskSuffix:str = obj["ipSNMaskSuffix"]
      """  Suffix  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangePlantSNMaskPrefixSuffix_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeQtyBearing_input:
   """ Required : 
   newQtyBearing
   ds
   """  
   def __init__(self, obj):
      self.newQtyBearing:bool = obj["newQtyBearing"]
      """  The new QtyBearing value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeQtyBearing_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeSNMask_input:
   """ Required : 
   ipSNMask
   ds
   """  
   def __init__(self, obj):
      self.ipSNMask:str = obj["ipSNMask"]
      """  Part.SNMask  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeSNMask_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTrackInventoryAttributes_input:
   """ Required : 
   trackInventoryAttributes
   ds
   """  
   def __init__(self, obj):
      self.trackInventoryAttributes:bool = obj["trackInventoryAttributes"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeTrackInventoryAttributes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeUOMClassID_input:
   """ Required : 
   uomClassID
   ds
   """  
   def __init__(self, obj):
      self.uomClassID:str = obj["uomClassID"]
      """  proposed UOMClassId.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeUOMClassID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeUOMCode_input:
   """ Required : 
   uomCode
   ds
   """  
   def __init__(self, obj):
      self.uomCode:str = obj["uomCode"]
      """  proposed uomCode.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangeUOMCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangedAttrClassIDFromPartUOMConversion_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangedAttrClassIDFromPartUOMConversion_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.msg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangedAttrClassID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChangedAttrClassID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.msg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChanginPartRestrictSubs_input:
   """ Required : 
   pSubstanceID
   ds
   """  
   def __init__(self, obj):
      self.pSubstanceID:str = obj["pSubstanceID"]
      """  Substance ID  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ChanginPartRestrictSubs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckAltMethodForDelete_input:
   """ Required : 
   ipPartNum
   ipRevisionNum
   ipAltMethod
   ipProcessMfgID
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  The current Part Number  """  
      self.ipRevisionNum:str = obj["ipRevisionNum"]
      """  The current Revision Number  """  
      self.ipAltMethod:str = obj["ipAltMethod"]
      """  The current Alt Method  """  
      self.ipProcessMfgID:str = obj["ipProcessMfgID"]
      """  The current Recipe  """  
      pass

class CheckAltMethodForDelete_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCOOPercentsExt_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class CheckCOOPercentsExt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckCOOPercents_input:
   """ Required : 
   cPartNum
   """  
   def __init__(self, obj):
      self.cPartNum:str = obj["cPartNum"]
      """  The Part Number  """  
      pass

class CheckCOOPercents_output:
   def __init__(self, obj):
      pass

class CheckColumnValue_input:
   """ Required : 
   ipValue
   ipColumnName
   ipCOASegReferences
   ipIllegalSymbsForCOASegVals
   """  
   def __init__(self, obj):
      self.ipValue:str = obj["ipValue"]
      """  Value  """  
      self.ipColumnName:str = obj["ipColumnName"]
      """  Column Name  """  
      self.ipCOASegReferences:str = obj["ipCOASegReferences"]
      """  COA References  """  
      self.ipIllegalSymbsForCOASegVals:str = obj["ipIllegalSymbsForCOASegVals"]
      """  Illegal Symbols  """  
      pass

class CheckColumnValue_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opIllegal:bool = obj["opIllegal"]
      pass

      """  output parameters  """  

class CheckConfigForDelete_input:
   """ Required : 
   ipPartNum
   ipRevisionNum
   ipAltMethod
   ipForRevision
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  The current Part Number  """  
      self.ipRevisionNum:str = obj["ipRevisionNum"]
      """  The current Revision Number  """  
      self.ipAltMethod:str = obj["ipAltMethod"]
      """  The current Alternate Method  """  
      self.ipForRevision:bool = obj["ipForRevision"]
      """  True if deleting revision record  """  
      pass

class CheckConfigForDelete_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckDuplicateCOO_input:
   """ Required : 
   ipPart
   ipOrigCountry
   """  
   def __init__(self, obj):
      self.ipPart:str = obj["ipPart"]
      """  The Part Number  """  
      self.ipOrigCountry:int = obj["ipOrigCountry"]
      """  proposed origin country  """  
      pass

class CheckDuplicateCOO_output:
   def __init__(self, obj):
      pass

class CheckPartChanges_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class CheckPartChanges_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cPartChangedMsgText:str = obj["parameters"]
      self.cPartSNChangedMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckTrackInventoryAttributeConversion_input:
   """ Required : 
   performInventoryTransfer
   defaultRevisionNum
   ds
   """  
   def __init__(self, obj):
      self.performInventoryTransfer:bool = obj["performInventoryTransfer"]
      self.defaultRevisionNum:str = obj["defaultRevisionNum"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class CheckTrackInventoryAttributeConversion_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.validationMessage:str = obj["parameters"]
      self.noConversionsToConvert:bool = obj["noConversionsToConvert"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ConfigIDChanging_input:
   """ Required : 
   configID
   partNum
   revisionNum
   """  
   def __init__(self, obj):
      self.configID:str = obj["configID"]
      """  proposed ConfigID  """  
      self.partNum:str = obj["partNum"]
      """  Part  """  
      self.revisionNum:str = obj["revisionNum"]
      """  Revision Num  """  
      pass

class ConfigIDChanging_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.configID:str = obj["parameters"]
      self.outMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CreateRevisionListValForPart_input:
   """ Required : 
   partNum
   attrClassID
   trackInventoryAttributes
   trackInventoryByRevision
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      self.attrClassID:str = obj["attrClassID"]
      self.trackInventoryAttributes:bool = obj["trackInventoryAttributes"]
      self.trackInventoryByRevision:bool = obj["trackInventoryByRevision"]
      pass

class CreateRevisionListValForPart_output:
   def __init__(self, obj):
      pass

class DeleteByID_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      pass

class DeleteByID_output:
   def __init__(self, obj):
      pass

class DeleteMRPJobs_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class DeleteMRPJobs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeleteMultiLevelRules_input:
   """ Required : 
   NewSourceType
   ds
   """  
   def __init__(self, obj):
      self.NewSourceType:str = obj["NewSourceType"]
      """  The new SourceType value.  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class DeleteMultiLevelRules_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DuplicatePart_input:
   """ Required : 
   sourcePartNum
   targetPartNum
   targetPartDescription
   configuratorMode
   configID
   configDescription
   configType
   """  
   def __init__(self, obj):
      self.sourcePartNum:str = obj["sourcePartNum"]
      """  Existing part number that will be duplicated.  """  
      self.targetPartNum:str = obj["targetPartNum"]
      """  New part number that will be created.  """  
      self.targetPartDescription:str = obj["targetPartDescription"]
      """  Description that will be used for the new part.  """  
      self.configuratorMode:str = obj["configuratorMode"]
      """  Indicates how the configurator will be handled.  """  
      self.configID:str = obj["configID"]
      """  Configurator ID  """  
      self.configDescription:str = obj["configDescription"]
      """  Configurator description.  """  
      self.configType:str = obj["configType"]
      """  Configurator type.  """  
      pass

class DuplicatePart_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class EnableTrackInventoryAttributeConversion_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class EnableTrackInventoryAttributeConversion_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.enableInventoryTransfer:bool = obj["enableInventoryTransfer"]
      self.enableConvertButton:bool = obj["enableConvertButton"]
      self.serialsExist:bool = obj["serialsExist"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class EnterpriseGetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   enterpriseBAQID
   enterpriseSearchText
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  whereClause  """  
      self.pageSize:int = obj["pageSize"]
      """  pageSize  """  
      self.absolutePage:int = obj["absolutePage"]
      """  absolutePage  """  
      self.enterpriseBAQID:str = obj["enterpriseBAQID"]
      """  Enterprise BAQ ID  """  
      self.enterpriseSearchText:str = obj["enterpriseSearchText"]
      """  Enterprise Search  """  
      pass

class EnterpriseGetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.GLControlType:str = obj["GLControlType"]
      """  Identifier of the GL Control Type.  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  GL Control Identifier.  """  
      self.BusinessEntity:str = obj["BusinessEntity"]
      """  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.GlobalEntityGLC:bool = obj["GlobalEntityGLC"]
      """  Marks this EntityGLC as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BankAcctID:str = obj["BankAcctID"]
      """  BankAcctID of the related BankAcct record.  """  
      self.BankFeeID:str = obj["BankFeeID"]
      self.CallCode:str = obj["CallCode"]
      """  CallCode of the related FSCallCd record.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      self.ClassCode:str = obj["ClassCode"]
      """  ClassCode of the related FAClass record.  """  
      self.ClassID:str = obj["ClassID"]
      """  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  """  
      self.ContractCode:str = obj["ContractCode"]
      """  ContractCode of the related FSContCd record.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode of the related Currency record.  """  
      self.CustNum:int = obj["CustNum"]
      """  CustNum of the related Customer record  """  
      self.DeductionID:str = obj["DeductionID"]
      """  DeductionID of PRClsDed or PRDeduct.  """  
      self.EmpID:str = obj["EmpID"]
      """  EmpID of the related PREmpMas record.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  ExpenseCode of PayTLbr, LabExpCd  """  
      self.ExtSystemID:str = obj["ExtSystemID"]
      """  ExtSystemID of ExtCompany table  """  
      self.FromPlant:str = obj["FromPlant"]
      """  FromPlant value of the related PlntTranDef record.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  GroupCode of the related FAGroup record.  """  
      self.GroupID:str = obj["GroupID"]
      self.HeadNum:int = obj["HeadNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.JCDept:str = obj["JCDept"]
      """  JCDept of the related JCDept record.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode of the related MiscChrg or PurMisc record.  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum of the related Part record.  """  
      self.PayTypeID:str = obj["PayTypeID"]
      """  PayTypeID of PayType  """  
      self.PerConName:str = obj["PerConName"]
      self.PIStatus:str = obj["PIStatus"]
      """  PI Status  """  
      self.Plant:str = obj["Plant"]
      """  Plant of the related PlantConfCtrl record.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  ProdCode of the related ProdGrup record.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  ProjectID of the related Project record.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  PurchCode of the related GLPurch record.  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode of the related GLRate record.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  ReasonCode of the related Reason record.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  ReasonType of the related Reason record.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  SalesCatID of the related SalesCat record.  """  
      self.Shift:int = obj["Shift"]
      """  Shift value of the related JCShift record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode of the related SalesTax record.  """  
      self.TaxTblID:str = obj["TaxTblID"]
      """  TaxTblID of PRTaxMas or PRClsTax.  """  
      self.ToPlant:str = obj["ToPlant"]
      """  ToPlant value of the related PlntTranDef record.  """  
      self.TransferMethod:str = obj["TransferMethod"]
      """  TransferMethod of ExtCompany table  """  
      self.TypeID:str = obj["TypeID"]
      """  Type ID  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum of the related Vendor record.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  WarehouseCode of the related Warehse record.  """  
      self.ExpenseTypeCode:str = obj["ExpenseTypeCode"]
      self.IsFiltered:bool = obj["IsFiltered"]
      self.OprTypeCode:str = obj["OprTypeCode"]
      self.CashDeskID:str = obj["CashDeskID"]
      self.TIN:str = obj["TIN"]
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      self.BitFlag:int = obj["BitFlag"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GlbPartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as the primary key.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. During Part maintenance a change to the Part.Description field causes this field to be updated with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  This field can not be blank.  """  
      self.ClassID:str = obj["ClassID"]
      self.IUM:str = obj["IUM"]
      """  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PurchasingFactor:int = obj["PurchasingFactor"]
      """  This value is used to convert quantity when there is a difference in the vendors unit of measure and how it is stocked in inventory. Example is purchased in pounds, stocked in sheets.
Formula: Issue Qty * Conversion Factor = Purchased Qty.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Base Unit Selling Price for the Item. Maintainable only via Part Master Maintenance program. It is used as a default unit price on Sales Order line detail and on Invoice line details that are not referencing a sales order line.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E". Used as default PricePerCode in order entry and invoice entry.  """  
      self.InternalUnitPrice:int = obj["InternalUnitPrice"]
      """  Base Internal Unit Selling Price for the Item.  Maintainable only via Part Master Maintenance program.  If zero, then the external unit price (Part.UnitPrice) is used.  """  
      self.InternalPricePerCode:str = obj["InternalPricePerCode"]
      """  Indicates the internal pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand.  Maintainable only via Part Maintenance.  The initial default is "E".  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.MfgComment:str = obj["MfgComment"]
      """  Used to enter comments for manufacturing when this part is referenced on a job. These are copied to JobHead.Comment, JobAsmbl.Comment,JobMtl.MfgComment depending on the point of reference. Commens are printed on the routing report.  """  
      self.PurComment:str = obj["PurComment"]
      """  Part Comments that will be used as a default for purchasing. These will be copied into the JobMtl.PurComment which then will be used to pass along to the PO when that JobMtl is referenced. It will also be copied into the PODetail.Comment field when the PO is buying the part for stock and not referencing a Job. View as an EDITOR widget. To be view-as EDITOR widget.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Part. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.LowLevelCode:int = obj["LowLevelCode"]
      """  Internally assigned integer which indicates the deepest level of assembly indention that this part is used at.  This is used by the Cost Rollup routines to control the order in which parts get costed. Part at the bottom (highest levelcode) Product structure are calculated first and continues up the chain, with the final assembly parts being processed last.  This insures that when retrieving the cost of an assemblies components the components will already have had their cost rolled up.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """  Indicates if this part is dimension tracked  """  
      self.DefaultDim:str = obj["DefaultDim"]
      """  Default dimension code for the part.  Set by selecting a PartDim record as default.  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  Intrastat goods classification code following the Intrastat Classification Nomenclature (ICN). The Commodity Code field can be blank to indicate the value from the part class or must be valid in the ICommCode (formerly called IStatGrp) master file.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty for this part  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.SalesUM:str = obj["SalesUM"]
      """  The Selling Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Sales Order entry as the default on line item details.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this part.  """  
      self.NetWeight:int = obj["NetWeight"]
      """  The Part's Unit Net Weight.  """  
      self.UsePartRev:bool = obj["UsePartRev"]
      """   NOTE: NOT IMPLEMENTED ON INITIAL 5.0.300 RELEASE.
if Yes then the part effective revision is used. If No then the revision of the demand source is used (OrderDtl, JobMtl...)  """  
      self.PartsPerContainer:int = obj["PartsPerContainer"]
      """  Default for label printing.  Zero indicates that only one label should be produced for the entire quantity.  """  
      self.PartLength:int = obj["PartLength"]
      """  Part's length.  """  
      self.PartWidth:int = obj["PartWidth"]
      """  Part's width.  """  
      self.PartHeight:int = obj["PartHeight"]
      """  Part's Height.  """  
      self.LotShelfLife:int = obj["LotShelfLife"]
      """  Shelf life of a lot in days.  Zero indicates unlimited shelf life.  """  
      self.WebPart:bool = obj["WebPart"]
      """  This is a Web saleable part  """  
      self.RunOut:bool = obj["RunOut"]
      """  Indicates that the onhand quantity is to be consumed and no further replenishments should be made.  Similar to Obsolete, however only warning messages will be issued to the user if they attempt new references.  """  
      self.SubPart:str = obj["SubPart"]
      """  Indicates the default Substitute part number.  This is optional. Must be one of the related PartSub records.  This field is set indirectly when the user checks the default toggle box in Part Substitution dialog.  """  
      self.Diameter:int = obj["Diameter"]
      """  Part's diameter.  """  
      self.Gravity:int = obj["Gravity"]
      """  Part's gravity.  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.OnHoldDate:str = obj["OnHoldDate"]
      """  Date that part becomes obsolete.  This can be set to a future date when the part should become obsolete.  """  
      self.OnHoldReasonCode:str = obj["OnHoldReasonCode"]
      """   The reason code that links to a Reason master record, which indicates why the part has been placed on hold.
Valid only when Part.OnHold = Yes.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      self.GlbCompany:str = obj["GlbCompany"]
      """  Owner Company Identifier.  """  
      self.GlbPartNum:str = obj["GlbPartNum"]
      """  The Owner's PartNum field identifies the Part and is used as the primary key.  """  
      self.MtlAnalysisCode:str = obj["MtlAnalysisCode"]
      """  MtlAnalysisCode  """  
      self.GlobalPart:bool = obj["GlobalPart"]
      """  Marks the Part as a global Part, available to be sent out to other companies  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disable this record from receiving global updates  """  
      self.ISSuppUnitsFactor:int = obj["ISSuppUnitsFactor"]
      """  This value is used to calculate the Supplementary Units for the Intrastat.  """  
      self.OldCompany:str = obj["OldCompany"]
      """  Original Owner Company Identifier. - NOT CURRENTLY IN USE  """  
      self.OldPartNum:str = obj["OldPartNum"]
      """  The Original Owner's PartNum field identifies the Part and is used as the primary key.   NOT CURRENTLY IN USE  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      self.ImageFileName:str = obj["ImageFileName"]
      """  Path & filename (relative to images/prod_img directory on Web Server) of .jpg product image file.  """  
      self.SNFormat:str = obj["SNFormat"]
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      self.ISOrigCountry:str = obj["ISOrigCountry"]
      """  This field contains the Intrastat Country of Origin Code from the Country table.  """  
      self.Constrained:bool = obj["Constrained"]
      self.UPCCode1:str = obj["UPCCode1"]
      self.UPCCode2:str = obj["UPCCode2"]
      self.UPCCode3:str = obj["UPCCode3"]
      self.EDICode:str = obj["EDICode"]
      self.Skipped:bool = obj["Skipped"]
      """  Indicates if the user chose to skip this record when linking global parts.  The user can come back at a later time and choose to link a skipped part if they need to.  """  
      self.ConsolidatedPurchasing:bool = obj["ConsolidatedPurchasing"]
      self.WebInStock:bool = obj["WebInStock"]
      self.PurchasingFactorDirection:str = obj["PurchasingFactorDirection"]
      """  Indicates how Purchasing Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Selling Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.MDPV:int = obj["MDPV"]
      self.ReturnableContainer:str = obj["ReturnableContainer"]
      self.NetVolume:int = obj["NetVolume"]
      self.RecDocReq:bool = obj["RecDocReq"]
      self.ShipDocReq:bool = obj["ShipDocReq"]
      self.QtyBearing:bool = obj["QtyBearing"]
      self.AESExp:str = obj["AESExp"]
      self.ECCNNumber:str = obj["ECCNNumber"]
      self.ExpLicNumber:str = obj["ExpLicNumber"]
      self.ExpLicType:str = obj["ExpLicType"]
      self.HazClass:str = obj["HazClass"]
      self.HazGvrnmtID:str = obj["HazGvrnmtID"]
      self.HazItem:bool = obj["HazItem"]
      self.HazPackInstr:str = obj["HazPackInstr"]
      self.HazSub:str = obj["HazSub"]
      self.HazTechName:str = obj["HazTechName"]
      self.HTS:str = obj["HTS"]
      self.NAFTAOrigCountry:str = obj["NAFTAOrigCountry"]
      self.NAFTAPref:str = obj["NAFTAPref"]
      self.NAFTAProd:str = obj["NAFTAProd"]
      self.SchedBcode:str = obj["SchedBcode"]
      self.UseHTSDesc:bool = obj["UseHTSDesc"]
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      self.RCOverThreshold:int = obj["RCOverThreshold"]
      self.RCUnderThreshold:int = obj["RCUnderThreshold"]
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      self.UOMClassID:str = obj["UOMClassID"]
      self.SNMask:str = obj["SNMask"]
      """  This is the ID by which the user will reference a particular serial number format mask.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers currently used only by SNBaseStructure Mask types.  """  
      self.LotAppendDate:str = obj["LotAppendDate"]
      self.LotBatch:bool = obj["LotBatch"]
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      self.LotCureDt:bool = obj["LotCureDt"]
      self.LotDigits:int = obj["LotDigits"]
      self.LotExpDt:bool = obj["LotExpDt"]
      self.LotFirmware:bool = obj["LotFirmware"]
      self.LotHeat:bool = obj["LotHeat"]
      self.LotLeadingZeros:bool = obj["LotLeadingZeros"]
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      self.LotMfgDt:bool = obj["LotMfgDt"]
      self.LotMfgLot:bool = obj["LotMfgLot"]
      self.LotNxtNum:int = obj["LotNxtNum"]
      self.LotPrefix:str = obj["LotPrefix"]
      self.LotSeqID:str = obj["LotSeqID"]
      self.LotUseGlobalSeq:bool = obj["LotUseGlobalSeq"]
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      self.NetWeightUOM:str = obj["NetWeightUOM"]
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      self.BuyToOrder:bool = obj["BuyToOrder"]
      self.DropShip:bool = obj["DropShip"]
      self.ExtConfig:bool = obj["ExtConfig"]
      self.IsConfigured:bool = obj["IsConfigured"]
      self.RefCategory:str = obj["RefCategory"]
      self.CSFCJ5:bool = obj["CSFCJ5"]
      self.CSFLMW:bool = obj["CSFLMW"]
      self.GrossWeight:int = obj["GrossWeight"]
      self.GrossWeightUOM:str = obj["GrossWeightUOM"]
      self.BasePartNum:str = obj["BasePartNum"]
      self.FSAssetClassCode:str = obj["FSAssetClassCode"]
      self.FSPricePerCode:str = obj["FSPricePerCode"]
      self.FSSalesUnitPrice:int = obj["FSSalesUnitPrice"]
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ISRegion:str = obj["ISRegion"]
      """  ISRegion  """  
      self.INChapterID:str = obj["INChapterID"]
      """  INChapterID  """  
      self.EstimateID:str = obj["EstimateID"]
      """  EstimateID  """  
      self.EstimateOrPlan:str = obj["EstimateOrPlan"]
      """  EstimateOrPlan  """  
      self.DiffPrc2PrchUOM:bool = obj["DiffPrc2PrchUOM"]
      """  DiffPrc2PrchUOM  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.PricingFactor:int = obj["PricingFactor"]
      """  PricingFactor  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.MobilePart:bool = obj["MobilePart"]
      """  MobilePart  """  
      self.AGUseGoodMark:bool = obj["AGUseGoodMark"]
      """  AGUseGoodMark  """  
      self.AGProductMark:bool = obj["AGProductMark"]
      """  AGProductMark  """  
      self.PESUNATType:str = obj["PESUNATType"]
      """  CSF Peru -  SUNAT Type  """  
      self.PESUNATUOM:str = obj["PESUNATUOM"]
      """  PESUNATUOM  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.PartLengthWidthHeightUM:str = obj["PartLengthWidthHeightUM"]
      """  PartLengthWidthHeightUM  """  
      self.DiameterUM:str = obj["DiameterUM"]
      """  DiameterUM  """  
      self.DiameterInside:int = obj["DiameterInside"]
      """  DiameterInside  """  
      self.DiameterOutside:int = obj["DiameterOutside"]
      """  DiameterOutside  """  
      self.ThicknessUM:str = obj["ThicknessUM"]
      """  ThicknessUM  """  
      self.Thickness:int = obj["Thickness"]
      """  Thickness  """  
      self.ThicknessMax:int = obj["ThicknessMax"]
      """  ThicknessMax  """  
      self.Durometer:str = obj["Durometer"]
      """  Durometer  """  
      self.Specification:str = obj["Specification"]
      """  Specification  """  
      self.EngineeringAlert:str = obj["EngineeringAlert"]
      """  EngineeringAlert  """  
      self.Condition:str = obj["Condition"]
      """  Condition  """  
      self.IsCompliant:bool = obj["IsCompliant"]
      """  IsCompliant  """  
      self.IsRestricted:bool = obj["IsRestricted"]
      """  IsRestricted  """  
      self.IsSafetyItem:bool = obj["IsSafetyItem"]
      """  IsSafetyItem  """  
      self.CommercialBrand:str = obj["CommercialBrand"]
      """  CommercialBrand  """  
      self.CommercialSubBrand:str = obj["CommercialSubBrand"]
      """  CommercialSubBrand  """  
      self.CommercialCategory:str = obj["CommercialCategory"]
      """  CommercialCategory  """  
      self.CommercialSubCategory:str = obj["CommercialSubCategory"]
      """  CommercialSubCategory  """  
      self.CommercialStyle:str = obj["CommercialStyle"]
      """  CommercialStyle  """  
      self.CommercialSize1:str = obj["CommercialSize1"]
      """  CommercialSize1  """  
      self.CommercialSize2:str = obj["CommercialSize2"]
      """  CommercialSize2  """  
      self.CommercialColor:str = obj["CommercialColor"]
      """  CommercialColor  """  
      self.IsGiftCard:bool = obj["IsGiftCard"]
      """  IsGiftCard  """  
      self.PhotoFile:str = obj["PhotoFile"]
      """  PhotoFile  """  
      self.PartPhotoExists:bool = obj["PartPhotoExists"]
      """  PartPhotoExists  """  
      self.CommentText:str = obj["CommentText"]
      """  CommentText  """  
      self.PartSpecificPackingUOM:bool = obj["PartSpecificPackingUOM"]
      """  PartSpecificPackingUOM  """  
      self.ImageID:str = obj["ImageID"]
      """  ImageID  """  
      self.CNSpecification:str = obj["CNSpecification"]
      """  CNSpecification  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  SyncToExternalCRM  """  
      self.ExternalCRMPartID:str = obj["ExternalCRMPartID"]
      """  ExternalCRMPartID  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  ExternalCRMLastSync  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  ExternalCRMSyncRequired  """  
      self.PESUNATTypeCode:str = obj["PESUNATTypeCode"]
      """  PESUNATTypeCode  """  
      self.PESUNATUOMCode:str = obj["PESUNATUOMCode"]
      """  PESUNATUOMCode  """  
      self.CNCodeVersion:str = obj["CNCodeVersion"]
      """  CNCodeVersion  """  
      self.CNTaxCategoryCode:str = obj["CNTaxCategoryCode"]
      """  CNTaxCategoryCode  """  
      self.CNHasPreferentialTreatment:bool = obj["CNHasPreferentialTreatment"]
      """  CNHasPreferentialTreatment  """  
      self.CNPreferentialTreatmentContent:str = obj["CNPreferentialTreatmentContent"]
      """  CNPreferentialTreatmentContent  """  
      self.CNZeroTaxRateMark:str = obj["CNZeroTaxRateMark"]
      """  CNZeroTaxRateMark  """  
      self.SubLevelCode:int = obj["SubLevelCode"]
      """  SubLevelCode  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  User the part was created by  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  Date the part was created on  """  
      self.AttBatch:str = obj["AttBatch"]
      """  AttBatch  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  AttMfgBatch  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  AttMfgLot  """  
      self.AttHeat:str = obj["AttHeat"]
      """  AttHeat  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  AttFirmware  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  AttBeforeDt  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  AttMfgDt  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  AttCureDt  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  AttExpDt  """  
      self.DeferManualEntry:bool = obj["DeferManualEntry"]
      """  DeferManualEntry  """  
      self.DeferPurchaseReceipt:bool = obj["DeferPurchaseReceipt"]
      """  DeferPurchaseReceipt  """  
      self.DeferJobReceipt:bool = obj["DeferJobReceipt"]
      """  DeferJobReceipt  """  
      self.DeferInspection:bool = obj["DeferInspection"]
      """  DeferInspection  """  
      self.DeferQtyAdjustment:bool = obj["DeferQtyAdjustment"]
      """  DeferQtyAdjustment  """  
      self.DeferInventoryMove:bool = obj["DeferInventoryMove"]
      """  DeferInventoryMove  """  
      self.DeferShipments:bool = obj["DeferShipments"]
      """  DeferShipments  """  
      self.DeferInventoryCounts:bool = obj["DeferInventoryCounts"]
      """  DeferInventoryCounts  """  
      self.DeferAssetDisposal:bool = obj["DeferAssetDisposal"]
      """  DeferAssetDisposal  """  
      self.DeferReturnMaterials:bool = obj["DeferReturnMaterials"]
      """  DeferReturnMaterials  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date/Time when the Part record was last updated.  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  SendToFSA  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  ExternalMESSyncRequired  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  ExternalMESLastSync  """  
      self.FSAItem:bool = obj["FSAItem"]
      """  FSAItem  """  
      self.FSAEquipment:bool = obj["FSAEquipment"]
      """  FSAEquipment  """  
      self.BOLClass:str = obj["BOLClass"]
      """  BOLClass  """  
      self.FairMarketValue:int = obj["FairMarketValue"]
      """  FairMarketValue  """  
      self.SAFTProdCategory:str = obj["SAFTProdCategory"]
      """  SAFTProdCategory  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  AttrClassID  """  
      self.LocationIDNumReq:bool = obj["LocationIDNumReq"]
      """  LocationIDNumReq  """  
      self.LocationTrackInv:bool = obj["LocationTrackInv"]
      """  LocationTrackInv  """  
      self.LocationMtlView:bool = obj["LocationMtlView"]
      """  LocationMtlView  """  
      self.LCNRVReporting:bool = obj["LCNRVReporting"]
      """  LCNRVReporting  """  
      self.LCNRVEstimatedUnitPrice:int = obj["LCNRVEstimatedUnitPrice"]
      """  LCNRVEstimatedUnitPrice  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.LocationFormatID:str = obj["LocationFormatID"]
      """  LocationFormatID  """  
      self.IsServices:bool = obj["IsServices"]
      """  IsServices  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PEDetrGoodServiceCode  """  
      self.PEProductServiceCode:str = obj["PEProductServiceCode"]
      """  PEProductServiceCode  """  
      self.DualUOMClassID:str = obj["DualUOMClassID"]
      """  DualUOMClassID  """  
      self.CNProductName:str = obj["CNProductName"]
      """  CNProductName  """  
      self.CNWeight:int = obj["CNWeight"]
      """  CNWeight  """  
      self.CNWeightUOM:str = obj["CNWeightUOM"]
      """  CNWeightUOM  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  CNBonded  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttISOrigCountry:str = obj["AttISOrigCountry"]
      """  Indicates if entry of a County of Origin is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  ExternalSchemeID  """  
      self.ExternalID:str = obj["ExternalID"]
      """  ExternalID  """  
      self.CommoditySchemeID:str = obj["CommoditySchemeID"]
      """  CommoditySchemeID  """  
      self.CommoditySchemeVersion:str = obj["CommoditySchemeVersion"]
      """  CommoditySchemeVersion  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  TrackInventoryByRevision  """  
      self.PlanningByRevision:bool = obj["PlanningByRevision"]
      """  PlanningByRevision  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMPartType:int = obj["FSMPartType"]
      """  FSMPartType  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.LinkPartNum:str = obj["LinkPartNum"]
      self.UserDecimal3:int = obj["UserDecimal3"]
      """  UserDecimal3  """  
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.UserDecimal4:int = obj["UserDecimal4"]
      """  UserDecimal4  """  
      self.StockPart:bool = obj["StockPart"]
      self.TypeCodeDescription:str = obj["TypeCodeDescription"]
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.DispPartNum:str = obj["DispPartNum"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GlbPartTableset:
   def __init__(self, obj):
      self.GlbPart:list[Erp_Tablesets_GlbPartRow] = obj["GlbPart"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartAuditRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum of the Part master to which this record is related.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  System Date when this change was made.  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  System Time (seconds since midnight) of when the changes were made.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID who made the changes.  Not maintainable by the user.  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  Used to enter a description of the changes that were made.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.DspChangeTime:str = obj["DspChangeTime"]
      """  Display ChangeTime in HH:MM AM format  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.RevisionNumRevShortDesc:str = obj["RevisionNumRevShortDesc"]
      self.RevisionNumRevDescription:str = obj["RevisionNumRevDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartBinInfoRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Identifies the Part Number. It must be valid in the Part table.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Contains the Warehouse code of where this part exists. This must be valid in the WareHouse table.  """  
      self.BinNum:str = obj["BinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """  Safety quantity is a "purchasing cushion" limit.  """  
      self.KBCode:str = obj["KBCode"]
      """  Uniquely indentifies the record.  """  
      self.KBPONUM:int = obj["KBPONUM"]
      """  Purchase order number  that the detail line item is linked to.  """  
      self.KBPOLine:int = obj["KBPOLine"]
      """  The line number of the detail record on the purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.KBWarehouseCode:str = obj["KBWarehouseCode"]
      """  Kanban Warehouse  """  
      self.KBBinNum:str = obj["KBBinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.KBPlant:str = obj["KBPlant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.OnhandQty:int = obj["OnhandQty"]
      """  Holds the Quantity onhand for this Part in the warehouse in the specific bin location.  Whenever this quantity becomes zero the record should be deleted. This quantity needs to added to or subtracted from Manufactured receipts, Purchased receipts, Physical inventories, Inventory issues, Warehouse Transfers, Shipping and Adjustments.  """  
      self.KBQty:int = obj["KBQty"]
      """  Indicates the desired minimum on-hand Kanban quantity.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.KBActionCode:str = obj["KBActionCode"]
      self.KBActionDesc:str = obj["KBActionDesc"]
      self.MaxQtyUOM:str = obj["MaxQtyUOM"]
      """  Maximum Quantity UOM  """  
      self.MinQtyUOM:str = obj["MinQtyUOM"]
      """  Minimum Quantity UOM  """  
      self.Plant:str = obj["Plant"]
      """  Filled in by BO, not phiscally in database.  """  
      self.PlantOwner:str = obj["PlantOwner"]
      self.SafetyQtyUOM:str = obj["SafetyQtyUOM"]
      """  Safety Quantity UOM  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BinNumDescription:str = obj["BinNumDescription"]
      self.BinNumNonNettable:bool = obj["BinNumNonNettable"]
      self.KBBinNumDescription:str = obj["KBBinNumDescription"]
      self.KBCodeKBDescription:str = obj["KBCodeKBDescription"]
      self.KBCodeKBActionCode:str = obj["KBCodeKBActionCode"]
      self.KBPlantName:str = obj["KBPlantName"]
      self.KBWarehouseCodeDescription:str = obj["KBWarehouseCodeDescription"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartCOORow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.OrigCountry:int = obj["OrigCountry"]
      """  CountryNum for Country of Origin  """  
      self.QtyPerc:int = obj["QtyPerc"]
      """  Qty percent of this part which is from this country of origin.  """  
      self.ValuePerc:int = obj["ValuePerc"]
      """  Value percent of this part from this country of origin.  """  
      self.Primary:bool = obj["Primary"]
      """  Is this the primary country of origin for this part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CountryDescription:str = obj["CountryDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartCOPartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as part of the primary key.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.CoPartNum:str = obj["CoPartNum"]
      """  Companion PartNum identifies the Part that is manufactured along with the main part (ex: Right and Left parts)  """  
      self.CoRevisionNum:str = obj["CoRevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the companion part, and is used as part of the primary key  """  
      self.PartsPerOp:int = obj["PartsPerOp"]
      """   Part Per Operation. Active only for Concurrent process
Jobs. Otherwise set to 1.  """  
      self.LbrCostBase:int = obj["LbrCostBase"]
      """   Defines an integer value which is used to calculate a
ratio for prorating the labor costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.MtlCostBase:int = obj["MtlCostBase"]
      """   Defines an integer value which is used to calculate a
ratio for prorating the material costs to the end part. For example a job produces parts A and B, and you want part B to have cost 2 times that of the cost of Part A.  Part A CostBase would be 1 and B would be 2.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.IUM:str = obj["IUM"]
      """  Defines the Unit of Measure used when part is issued, this is also how it is stocked.  Use the value from XaSyst.UM as a default when creating new part records.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.PreventSugg:bool = obj["PreventSugg"]
      """  If true, MRP will not generate change suggestions for the co-part  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PrimaryCost:bool = obj["PrimaryCost"]
      """  Indicates if the parent Part should be used as the primary costing method for the co-part  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.EnablePreventSugg:bool = obj["EnablePreventSugg"]
      self.PartMasterPart:bool = obj["PartMasterPart"]
      self.ProcessMode:str = obj["ProcessMode"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartDimRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part.  """  
      self.DimCode:str = obj["DimCode"]
      """  Unique dimension code for the part.  """  
      self.DimCodeDescription:str = obj["DimCodeDescription"]
      """  Description for the dimension code.  """  
      self.DUM:str = obj["DUM"]
      """  Dimension unit of measure. Cannot be blank. Defaults to part's unit of measure.  """  
      self.DimConvFactor:int = obj["DimConvFactor"]
      """   Dimension conversion factor.  This conversion factor is used to convert the qty to the base part unit of measure.
Example: A half sheet to full sheet conversion factor would be 2 and a double sheet to full sheet conversion factor would be 0.5.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultDim:bool = obj["DefaultDim"]
      """  Default Dimenision for this part.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartGetDMRListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  DMR Number to identify the DMR record.  Auto assign/increment starting at 1000.  Cannot be blank.  """  
      self.OpenDMR:bool = obj["OpenDMR"]
      """  DMR Open or Close flag.  Default value is TRUE.  User cannot close a DMR with quantity remaining on it.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Vendor Purchase Point.  Maintainable only if NOT attached to a receipt.  """  
      self.TotDiscrepantQty:int = obj["TotDiscrepantQty"]
      """  The total amount of discrepant material moved into the DMR in base inventory unit of measure(IUM).  """  
      self.TotRejectedQty:int = obj["TotRejectedQty"]
      """  The total amount of rejected material from this DMR in base inventory unit of measure(IUM).  """  
      self.TotAcceptedQty:int = obj["TotAcceptedQty"]
      """  The total amount of accepted material that was accepted from this DMR in base inventory unit of measure(IUM).  """  
      self.AvgMtlUnitCost:int = obj["AvgMtlUnitCost"]
      """  Average Material Unit Cost.  """  
      self.AvgLbrUnitCost:int = obj["AvgLbrUnitCost"]
      """  Average Labor Unit cost.  """  
      self.AvgBurUnitCost:int = obj["AvgBurUnitCost"]
      """  Average Burden unit cost.  """  
      self.AvgSubUnitCost:int = obj["AvgSubUnitCost"]
      """  Average Subcontract unit cost  """  
      self.AvgMtlBurUnitCost:int = obj["AvgMtlBurUnitCost"]
      """  Average Mtl Burden unit cost  """  
      self.PartNum:str = obj["PartNum"]
      """  Parrt Number  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  System maintained, not user modifiable.  """  
      self.DimCode:str = obj["DimCode"]
      """  Unique dimension code for the part.  Set from the receipt or must match a referenced receipt's dimension.  NOT user modifiable.  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Number for this DMR to be received into.  Set from the receipt or must match a referenced receipt's lot number.  NOT user modifiable.  """  
      self.IUM:str = obj["IUM"]
      """  Base Inventory Unit of Measure.  System maintained, not user modifiable.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  Associates the assembly record back its parent JobHead record.  Not directly maintainable.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  A sequence number that uniquely identifies the JobAsmbl record within the JobNum.  This can be user assigned or assigned by the system.  The system assigns the next available number during add mode if its left blank.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.OprSeq:int = obj["OprSeq"]
      """  A sequence number which uniquely identifies the operation record within the Job/lot/level. The sequence can be system generated or assigned by user. System generated numbers are determined by reading last JobOper for the job/lot/level and then figures out what the next number that is divisible by 10. If this number is within 3 of the last Number on file it will be bumped up another 10. This keeps a minimum of 2 available sequences between records. For example if last = 18 Next would be 30, If last = 17  next = 20.  """  
      self.ResourceID:str = obj["ResourceID"]
      """  The ID of the Resource that was used to do the work. This field will be used to run reports using LaborDtl records to show how much work has been done on a specific Resource. This ID is directly entered in labor entry and Labor collection. It is only prompted for if the JcSyst.MachinePrompt = Yes/  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Contains the Warehouse code of where this part exists. This must be valid in the WareHouse table.  """  
      self.BinNum:str = obj["BinNum"]
      """  Identifies the Bin location that contains an On hand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      """  Total Mtl Mtl unit cost to date.  """  
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      """  Total Mtl Lab unit cost to date  """  
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      """  Total Mtl Sub unit cost to date  """  
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      """  Total Material  Bur unit component cost to date  """  
      self.ReqDMR:bool = obj["ReqDMR"]
      """  Indicates this requires a Vendor RMA number  """  
      self.VendRMANum:str = obj["VendRMANum"]
      """  Vendors RMA number.  Defaults to DMR Number.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PCID:str = obj["PCID"]
      """  PCID  """  
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      """  Warehouse Description  """  
      self.PlantName:str = obj["PlantName"]
      self.QtyRemaining:int = obj["QtyRemaining"]
      self.SupplierName:str = obj["SupplierName"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartGetDMRListTableset:
   def __init__(self, obj):
      self.PartGetDMRList:list[Erp_Tablesets_PartGetDMRListRow] = obj["PartGetDMRList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartLangDescRow:
   def __init__(self, obj):
      self.LangNameID:str = obj["LangNameID"]
      """  Language ID  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as the primary key.  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.LangNameIDDescription:str = obj["LangNameIDDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. In Part maintenance the Search Word is to only be updated upon initial creation of the Part with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.ClassID:str = obj["ClassID"]
      """   The Inventory class that this Part belongs to. The Class field can be blank or must be valid in the PartClass master file.
Classes could be set up for different type of raw materials. It will primarily be used as a report selection parameter.  """  
      self.IUM:str = obj["IUM"]
      """  Primary Inventory Unit of Measure. The unit costs, are based on this uom. Used as a default for issue transactions for the part.  Part onhand and allocation quantities are tracked by this uom.  The quantities can also be tracked by other uoms (see PartUOM table) but tracking at this uom is mandatory.   Use UOMClass.DefUOMCode of the system default UOMClass  when creating new part records (see XASyst.DefUOMClassID).  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part.
K = Sales Kit Part.B = Planning BOM.
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """   Onhand quantity is always tracked in the Parts primary inventory uom (Part.IUM). Checking this box indicates that you want to allow tracking of onhand quantity by additional uoms.
The actual UOMs to be tracked for the part are indicated by PartUOM.TrackOnHand. In order to set the PartUOM.TrackOhHand = True the Part.TrackDimension must = true.
This replaces the old 8.3 Track Dimension feature  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Indicates a Quantity Bearing part. Works in conjunction with the Non-Stock field to enable the part master parts to be setup for expense items.  Quantity Bearing will be set to Yes by default and only enable to be set to No if the Non-Stock flag is Yes.  """  
      self.LotBatch:bool = obj["LotBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgLot:bool = obj["LotMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotHeat:bool = obj["LotHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotFirmware:bool = obj["LotFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgDt:bool = obj["LotMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotCureDt:bool = obj["LotCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotExpDt:bool = obj["LotExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttBatch:str = obj["AttBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttHeat:str = obj["AttHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.HasMRPPlanningAttribute:bool = obj["HasMRPPlanningAttribute"]
      """  If this Part is TrackInventoryAttributes = true, and the AttrClassID it is associated to has one or more attributes whose DynAttrClassDtl.UsedInPlanning= true.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartListTableset:
   def __init__(self, obj):
      self.PartList:list[Erp_Tablesets_PartListRow] = obj["PartList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartPCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.PCType:str = obj["PCType"]
      """   Identifies the type of product code. This value can be used to find a Product code for a specific PartNum/ Type/UOM combination.
Currentlt the following types are valid;
"UPC-12,EAN-13,EAN-14,EAN-8,GTIN-14" 
This is for reference only and performs not other function.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group code  """  
      self.UOMCode:str = obj["UOMCode"]
      """  Unit of Measure code that will be defaulted in when this Product Code is used. Must be a Unit of measure that is valid within the Parts UOMClass.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlanningPoolRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number.  """  
      self.PoolPartNum:str = obj["PoolPartNum"]
      """  Pool Part Number.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PoolPartNumPartDescription:str = obj["PoolPartNumPartDescription"]
      self.PoolPartNumAttrClassID:str = obj["PoolPartNumAttrClassID"]
      self.PoolPartNumTrackDimension:bool = obj["PoolPartNumTrackDimension"]
      self.PoolPartNumTrackLots:bool = obj["PoolPartNumTrackLots"]
      self.PoolPartNumTrackSerialNum:bool = obj["PoolPartNumTrackSerialNum"]
      self.PoolPartNumTrackInventoryAttributes:bool = obj["PoolPartNumTrackInventoryAttributes"]
      self.PoolPartNumSalesUM:str = obj["PoolPartNumSalesUM"]
      self.PoolPartNumIUM:str = obj["PoolPartNumIUM"]
      self.PoolPartNumPricePerCode:str = obj["PoolPartNumPricePerCode"]
      self.PoolPartNumSellingFactor:int = obj["PoolPartNumSellingFactor"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlantPlanningAttributeRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.PlanningAttributeSetSeq:int = obj["PlanningAttributeSetSeq"]
      """  The unique identifier of the Dynamic Attribute Planning Set.  """  
      self.PlanningAttributeSetHash:str = obj["PlanningAttributeSetHash"]
      """  Hash key of the Company, AttrClassID, Planning Attributes and Planning Attribute Values.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """  Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.  """  
      self.MinOrderQty:int = obj["MinOrderQty"]
      """  Used to establish a suggested Order Qty when purchasing this Part for this Site. This value will be shown on the time phase report.  """  
      self.LeadTime:int = obj["LeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Number of Vendor master that this part is normally purchased from. The Purchase Order Management module uses it.  used in suggested vendor analysis.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.MinMfgLotSize:int = obj["MinMfgLotSize"]
      """  This is the minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.MaxMfgLotSize:int = obj["MaxMfgLotSize"]
      """  This is the maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.MfgLotMultiple:int = obj["MfgLotMultiple"]
      """  This is the manufacturing lot size multiple.  MRP will create jobs in multiples of this field.  Any excess amount will be sent to stock.  Zero is no lot multiple (lot-for-lot).  Example:  Required Quantity = 500, Lot Multiple = 150, Lot Maximum = 450, 2 jobs will be created with production quantities of 450, and 150.  """  
      self.DaysOfSupply:int = obj["DaysOfSupply"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ReOrderLevel:bool = obj["ReOrderLevel"]
      """  This is the flag indicating the inventory level we need to bring up to when it falls below re-order point(safety + minimum). Valid values are MAX and MIN.  """  
      self.ForecastTime:int = obj["ForecastTime"]
      """  Number of days forward to capture SugPODtl records for transfer as Forecast records.  Only for Intercompany trading partners.  """  
      self.TransferPlant:str = obj["TransferPlant"]
      """  Default Site that part is transfered from when it is obtained via Site transfer.  """  
      self.TransferLeadTime:int = obj["TransferLeadTime"]
      """  Used to record the normal order lead time for a Part from the transfer Site to this Site. This value is represented in days. It is optional.  """  
      self.ShortHorizonDays:int = obj["ShortHorizonDays"]
      """  Number of days out that the ShortHorizonMinMfgLotSize and ShortHorizonMaxMfgLotSize will be used instead of MinLotSize and MaxLotSize.  """  
      self.ShortHorizonMinMfgLotSize:int = obj["ShortHorizonMinMfgLotSize"]
      """  This is the Short Horizon minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.ShortHorizonMaxMfgLotSize:int = obj["ShortHorizonMaxMfgLotSize"]
      """  This is the Short Horizon maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.ShortHorizonDaysSupp:int = obj["ShortHorizonDaysSupp"]
      """  Used to record the short horizon order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.AutoConsumeStock:bool = obj["AutoConsumeStock"]
      """  Auto consume available stock when MRP runs and creates a job.  """  
      self.StartMinLotQty:bool = obj["StartMinLotQty"]
      """  Start the minimum lot quantity for a job when there is enough quantity to do so.  If enough quantity is available for the minimum lot quantity, the job will be split - one job for the quantity that can be started, another job for the remaining quantity.  Used when MRP creates jobs.  """  
      self.MinLotLeadTime:int = obj["MinLotLeadTime"]
      """  The lead time to consider for constrained materials when determining if a quantity can be started on a job.  Applicable when StartMinLotQty is true.  """  
      self.MinStartQty:int = obj["MinStartQty"]
      """  Indicates the minumum quantity that can be started when splitting a job.  Used when the StartMinLotQty option is selected.  """  
      self.UrgentLeadTime:int = obj["UrgentLeadTime"]
      """  This is the lead time used when generating a new suggestion within the lead time window.  If this field is 0 and the Supplier is determined from the Supplier Price List, the suggestion will use the lead time from the price list.  """  
      self.UrgentMinOrdQty:int = obj["UrgentMinOrdQty"]
      """  This is the minimum qty required when generating a new suggestion within the lead time window.  """  
      self.UrgentMultQty:int = obj["UrgentMultQty"]
      """  This is used to calculate the suggestion qty to the nearest multiple when generating a new suggestion within the lead time window.  """  
      self.UrgentPurPoint:str = obj["UrgentPurPoint"]
      """  See UrgentVendorNum  """  
      self.UrgentVendorNum:int = obj["UrgentVendorNum"]
      """  If this field is not populated then the system will use the standard Supplier from PartPlant, or the last Supplier the part was purchased from, or the Supplier from the first Price list found for the part.  """  
      self.SourceType:str = obj["SourceType"]
      """  Indicates the normal source for this part in the Site.  Values are: M = Manufactured, P = Purchased, T = Transferred.  Initial default is base on Part.TypeCode.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.ForecastDaysBefore:int = obj["ForecastDaysBefore"]
      """  Number of days before the forecast date in which any sales orders that exist should reduce the forecast quantity.  Ex: Forecast date of 3/31/98, Days before of 10, then any orders that have a date of 3/21/98 to 3/31/98 would reduce forecast.  """  
      self.ForecastDaysAfter:int = obj["ForecastDaysAfter"]
      """  Number of days after the forecast date in which any sales orders that exist should reduce the forecast quantity.  Ex: Forecast date of 3/31/98, Days after of 10, then any orders that have a date of 4/01/98 to 4/10/98 would reduce the forecast.  """  
      self.PlanningAttributeSet:str = obj["PlanningAttributeSet"]
      """  Description of the Planning Attribute Set  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  Base UOM Code from Part Master  """  
      self.UrgentVendorName:str = obj["UrgentVendorName"]
      """  Name of Urgent Supplier  """  
      self.UrgentVendorVendorID:str = obj["UrgentVendorVendorID"]
      """  ID of Supplier.  """  
      self.UseSite:bool = obj["UseSite"]
      """  Indicates no planning attribute parameters have been entered and will default from PartPlant.  """  
      self.MaximumQtyNofP:int = obj["MaximumQtyNofP"]
      """  Number of Pieces for MaximumQty  """  
      self.MinimumQtyNofP:int = obj["MinimumQtyNofP"]
      """  Number of Pieces for MinimumQty  """  
      self.QtyDisplayOption:str = obj["QtyDisplayOption"]
      self.MaxMfgLotSizeNofP:int = obj["MaxMfgLotSizeNofP"]
      """  Number of Pieces for MaxMfgLotSize  """  
      self.MfgLotMultipleNofP:int = obj["MfgLotMultipleNofP"]
      """  Number of Pieces for MfgLotMultiple  """  
      self.MinMfgLotSizeNofP:int = obj["MinMfgLotSizeNofP"]
      """  Number of Pieces for MinMfgLotSize  """  
      self.MinOrderQtyNofP:int = obj["MinOrderQtyNofP"]
      """  Number of Pieces for MinOrderQty  """  
      self.MinStartQtyNofP:int = obj["MinStartQtyNofP"]
      """  Number of Pieces for MinStartQty  """  
      self.SafetyQtyNofP:int = obj["SafetyQtyNofP"]
      """  Number of Pieces for SafetyQty  """  
      self.ShortHorizonMaxMfgLotSizeNofP:int = obj["ShortHorizonMaxMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMaxMfgLotSize  """  
      self.ShortHorizonMinMfgLotSizeNofP:int = obj["ShortHorizonMinMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMinMfgLotSize  """  
      self.UrgentMinOrdQtyNofP:int = obj["UrgentMinOrdQtyNofP"]
      """  Number of Pieces for UrgentMinOrdQty  """  
      self.UrgentMultQtyNofP:int = obj["UrgentMultQtyNofP"]
      """  Number of Pieces for UrgentMultQty  """  
      self.InvalidPlanningSet:bool = obj["InvalidPlanningSet"]
      """  If true, then the planning set is not valid for the part.  """  
      self.InvalidPlanningSetReason:str = obj["InvalidPlanningSetReason"]
      """  The reason why the planning set is invalid.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AttrClassIDDescription:str = obj["AttrClassIDDescription"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PlanningAttributeSetSeqActive:bool = obj["PlanningAttributeSetSeqActive"]
      self.PlantName:str = obj["PlantName"]
      self.TransferPlantName:str = obj["TransferPlantName"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartPlantRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.PrimWhse:str = obj["PrimWhse"]
      """  Defines which warehouse is to be used as the Primary Warehouse for this part in this Site. A primary warehouse is the one that this part is most commonly found in.  This warehouse is used as the default in many programs, such as entry of sales order line  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """   Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.
Note: Safety + Minimum = Reorder Point...  using this formula the  reorder point is the amount at which to reorder to maintain at least the prescribed minimum quantity.  """  
      self.MinOrderQty:int = obj["MinOrderQty"]
      """  Used to establish a suggested Order Qty when purchasing this Part for this Site. This value will be shown on the time phase report.  """  
      self.LeadTime:int = obj["LeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Number of Vendor master that this part is normally purchased from. The Purchase Order Management module uses it.  used in suggested vendor analysis.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """  Indicates if this part should be backflushed for this Site. Backflushing is the process of automatically issuing the material to jobs based on the operation quantity completed.  When completed and scrap quantities are reported to a job operation (via labo  """  
      self.MfgLotSize:int = obj["MfgLotSize"]
      """  This is the lot size that is used when performing a BOM cost rollup to distribute setup costs.  """  
      self.MinMfgLotSize:int = obj["MinMfgLotSize"]
      """  This is the minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.MaxMfgLotSize:int = obj["MaxMfgLotSize"]
      """  This is the maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.MfgLotMultiple:int = obj["MfgLotMultiple"]
      """  This is the manufacturing lot size multiple.  MRP will create jobs in multiples of this field.  Any excess amount will be sent to stock.  Zero is no lot multiple (lot-for-lot).  Example:  Required Quantity = 500, Lot Multiple = 150, Lot Maximum = 450, 2 jobs will be created with production quantities of 450, and 150.  """  
      self.DaysOfSupply:int = obj["DaysOfSupply"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ReOrderLevel:bool = obj["ReOrderLevel"]
      """  This is the flag indicating the inventory level we need to bring up to when it falls below re-order point(safety + minimum). Valid values are MAX and MIN.  """  
      self.MRPRecalcNeeded:bool = obj["MRPRecalcNeeded"]
      """  System maintained field.  Indicates that MRP needs to be recalculated for this part/Site.  """  
      self.ProcessMRP:bool = obj["ProcessMRP"]
      """  Flag indicating if MRP should process this part.  """  
      self.GenerateSugg:bool = obj["GenerateSugg"]
      """  Flag indicating if PO suggestion should be generated for this part.  """  
      self.GetFromLocalWhse:bool = obj["GetFromLocalWhse"]
      """  This flag controls if a supply is always created in this Site for a part. If it is no then the default Site that provides a supply is from a part's product group unless the Site from product group is blank, in that case the default Site should be from the  """  
      self.ForecastTime:int = obj["ForecastTime"]
      """  Number of days forward to capture SugPODtl records for transfer as Forecast records.  Only for Intercompany trading partners  """  
      self.TransferPlant:str = obj["TransferPlant"]
      """  Default Site that part is transfered from when it is obtained via Site transfer.  """  
      self.SourceType:str = obj["SourceType"]
      """   Indicates the normal source for this part in the Site.
Values are; K = Sales Kit,M = Manufactured,P = Purchased,T = Transferred.B = Planning BOM. 
Initial default is base on Part.TypeCode.  """  
      self.TransferLeadTime:int = obj["TransferLeadTime"]
      """  Used to record the normal order lead time for a Part from the transfer Site to this Site. This value is represented in days. It is optional.  """  
      self.PrepTime:int = obj["PrepTime"]
      """  Used to determine the start date  """  
      self.ReceiveTime:int = obj["ReceiveTime"]
      """  Days needed to move part to stock or next job.  Deducted from Due Date.  """  
      self.PlanTimeFence:int = obj["PlanTimeFence"]
      """  Days out from the current date when dates on jobs, PO, TO cannot be changed  """  
      self.ReschedOutDelta:int = obj["ReschedOutDelta"]
      """  MRP parameter not to reschedule if number of days change below  """  
      self.ReschedInDelta:int = obj["ReschedInDelta"]
      """  Same as ReschedOutDelta but for messages  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.BuyerID:str = obj["BuyerID"]
      """  Identifies the Buyer for the part class. Used as the default in the Automated Purchasing process.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the default Production Planner. This person is responsible for handling  the manufacturing suggestions of parts in this Product Group.
Used as the default for "new" manufacturing suggestions and on Job Header. Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this Part/Site  """  
      self.KitTime:int = obj["KitTime"]
      """  For Manufactured Parts to determine the Due date of the material  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if kit component lines can be added, deleted and modified during Sales Order and Quote entry.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kit part must be shipped complete or if kit components can be shipped in varying degrees of completeness.  If this field is set to "No", then KitPricing must be set to "P" .  """  
      self.KitAllowChangeParms:bool = obj["KitAllowChangeParms"]
      """  Indicates if changes the kit parameters is allowed during Sales Order and Quote entry.  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushed when a kit parent item is shipped.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are: P = Kit Parent Pricing (The price is obtained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  """  
      self.ShortHorizonDays:int = obj["ShortHorizonDays"]
      """  Number of days out that the ShortHorizonMinMfgLotSize and ShortHorizonMaxMfgLotSize will be used instead of MinLotSize and MaxLotSize.  """  
      self.ShortHorizonMinMfgLotSize:int = obj["ShortHorizonMinMfgLotSize"]
      """  This is the Short Horizon minimum manufacturing lot size.  If the required quantity is less than this amount then MRP will create a job with this production quantity.  The excess amount will be sent to stock.  Zero is no minimum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  """  
      self.ShortHorizonMaxMfgLotSize:int = obj["ShortHorizonMaxMfgLotSize"]
      """  This is the Short Horizon maximum manufacturing lot size.  If the required quantity is greater than this amount then MRP will create additional job(s) to satisfy the required production quantity.  Zero is no maximum.  If nonzero, this field must be an even multiple of the MfgLotMultiple field.  Example:  Required Quantity = 500, Maximum Lot Size = 150, 4 jobs will be created with production quantities of 150, 150, 150, and 50.  """  
      self.LimitProdYldRecalc:bool = obj["LimitProdYldRecalc"]
      """  If set = true and the production yield is being recalculated for an assembly or any of its subassemblies, then the recalculation and quantity adjustments will stop at the assembly level and reduce the overrun quantity and if necessary adjust the PullQty rather than rolling up to its parent  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Sets the default for Part.QtyBearing. The Part.QtyBearing fields works in conjunction with the Part.Non-Stock field to enable the part master parts to be setup for expense items.  """  
      self.MRPLastRunDate:str = obj["MRPLastRunDate"]
      """  System date on which the last MRP processing was run.  """  
      self.MRPLastRunTime:int = obj["MRPLastRunTime"]
      """  System Time (hr-min-sec) when the last MRP process was run.  """  
      self.MRPLastScheduledDate:str = obj["MRPLastScheduledDate"]
      """  Scheduled Date used in last MRP run  """  
      self.MRPLastCutOffDate:str = obj["MRPLastCutOffDate"]
      """  Cut Off Date used in last MRP run  """  
      self.ShortHorizonDaysSupp:int = obj["ShortHorizonDaysSupp"]
      """  Used to record the short horizon order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """   Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer, Mask
Code/desc required:
CHARACTER`Alphanumeric
INTEGER`NumericOnly
MASK`Serial Mask
This field should be flagged as Include = true in Object Designer.  """  
      self.SNFormat:str = obj["SNFormat"]
      """   Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999 for Character or Integer, or as a Serial Mask defined in SerialMask table.
This field should be flagged as ReadOnly and Include = true in Object Designer.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """   Current setting for the prefix that will be attached to all new Serial Numbers as they are generated for Character and Integer format types.
This field should be flagged as Include = true in Object Designer.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      """  Indicates to use the value in SerialMask.SNLastUsedSeq when generating the next serial number for a Generate Mask type.  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This flag identifies those parts that will suggest a PO each time than a sales order is created. This flag will be used as a default in the sales order.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This flag identifies those parts that are commonly drop shipped. This flag will be used as a default in the sales order.  """  
      self.PcntTolerance:int = obj["PcntTolerance"]
      """  Percent Tolerance. Entered as a positive number, Used to define the default percent tolerance for parts for which no percent tolerance is set up in PartWhse. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a percentage difference between the count quantity and the frozen quantity by more than the percent tolerance figure is considered out of tolerance. Calculated as ?adjustment qty / frozen qty? expressed as a percent.  """  
      self.CalcPcnt:bool = obj["CalcPcnt"]
      """  False = there is no percent tolerance consideration and any percent variance is considered within tolerance. True = percent tolerance is active for this part/Site and the value in PcntTolerance will be used to determine if the count variance is within tol  """  
      self.CalcQty:bool = obj["CalcQty"]
      """  False = there is no quantity tolerance consideration and any quantity variance is considered within tolerance. True = quantity tolerance is active for this part/Site and the value in QtyTolerance will be used to determine if the count variance is within t  """  
      self.CalcValue:bool = obj["CalcValue"]
      """  False = there is no value tolerance consideration and any value variance is considered within tolerance. True = value tolerance is active for this part/Site and the value in ValueTolerance will be used to determine if the count variance is within toleranc  """  
      self.QtyAdjTolerance:int = obj["QtyAdjTolerance"]
      """  Used to provide a means to control whether a count quantity discrepancy should be posted as an adjustment to inventory. This value is used for parts for which no qty adj tolerance is set up in PartWhse. Zero indicates all quantity adjustments will be posted. This parameter is used to control the count discrepancy of parts that are counted by weight on a scale. Counts often vary based upon humidity. If the count of the part is within this tolerance but different from the frozen quantity then no inventory adjustment will be posted.  """  
      self.QtyTolerance:int = obj["QtyTolerance"]
      """  Quantity tolerance. Entered as a positive whole number, Used to define the default quantity tolerance for parts for which no quantity tolerance is set up in PartWhse. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a count quantity that varies from the frozen quantity by more than the quantity tolerance figure is considered out of tolerance.  """  
      self.ValueTolerance:int = obj["ValueTolerance"]
      """  Value tolerance. Entered as a positive number. Used to define the default value tolerance for parts for which no value tolerance is set up in PartWhse, PartSite, WarehseABC or SiteConfABC  An entry of zero will indicate that any value variance will be con  """  
      self.DemandQty:int = obj["DemandQty"]
      """  This is a summary of the total outstanding manufacturing allocation requirements for this Part in this Site.  It is updated from Order Release records that are being manufactured. The outstanding  Sales Order Requirements is calculated from Open ORderRel  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  This is a summary of the total outstanding manufacturing requirements for this Part in this Site.  It is updated from Order Release records that are being manufactured. The outstanding  Sales Order Requirements is calculated from Open ORderRel records as  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  This is a summary of the total outstanding job allocation requirements for this Part in this Site.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Cross Reference Part Number  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """  Cross Reference Part Type  """  
      self.NeverReuseMRPJob:bool = obj["NeverReuseMRPJob"]
      """  System flag future use  """  
      self.DeleteMRPJobs:bool = obj["DeleteMRPJobs"]
      """  Flag indicates the need to delete unfirm Jobs even if MRP is run with the recycle job option  """  
      self.TotMfgLeadTimeSys:int = obj["TotMfgLeadTimeSys"]
      """  System calculated manufacturing lead time.  This is the total lead time needed to generate the part, which includes the time on lower level parts, lead times, etc.  Not editable by the user.  """  
      self.TotMfgLeadTimeMnl:int = obj["TotMfgLeadTimeMnl"]
      """  Manually entered manufacturing lead time.  This is the total lead time needed to generate the part.  Directly maintained by the user.  """  
      self.LvlMfgLeadTimeSys:int = obj["LvlMfgLeadTimeSys"]
      """  Displays the manufacturing lead time calculated by the system. This is the lead time required to manufacture the part at the level of this part, it includes the time to manufacture the subassemblies in the same job (Pull as Assembly materials). The user cannot edit this value.  """  
      self.LvlMfgLeadTimeMnl:int = obj["LvlMfgLeadTimeMnl"]
      """  Displays the manufacturing lead time calculated by the system. This is the lead time required to manufacture the part at the level of this part, it includes the time to manufacture the subassemblies in the same job (Pull as Assembly materials). Directly maintained by the user.  """  
      self.MfgLeadTimeCalcDate:str = obj["MfgLeadTimeCalcDate"]
      """  The date the system manufacturing lead times (TotMfglLeadTimeSys and LvlMfgLeadTimeSys) were calculated.  """  
      self.MfgLeadTimeMnlDate:str = obj["MfgLeadTimeMnlDate"]
      """  The date the manual manufacturing lead times (TotMfgLeadTimeSys and LvlMfgLeadTimeSys) were entered by the user.  """  
      self.AutoConsumeStock:bool = obj["AutoConsumeStock"]
      """  Auto consume available stock when MRP runs and creates a job.  """  
      self.StartMinLotQty:bool = obj["StartMinLotQty"]
      """  Start the minimum lot quantity for a job when there is enough quantity to do so.  If enough quantity is available for the minimum lot quantity, the job will be split - one job for the quantity that can be started, another job for the remaining quantity.  Used when MRP creates jobs.  """  
      self.MinLotLeadTime:int = obj["MinLotLeadTime"]
      """  The lead time to consider for constrained materials when determining if a quantity can be started on a job.  Applicable when StartMinLotQty is true.  """  
      self.MfgLeadTimeMnl:bool = obj["MfgLeadTimeMnl"]
      """  Indicates manufacturing lead times are entered manually by the user.  """  
      self.MfgLeadTimeEnteredBy:str = obj["MfgLeadTimeEnteredBy"]
      """  Userid of user who entered manual manufacturing lead times.  """  
      self.MinStartQty:int = obj["MinStartQty"]
      """  Indicates the minumum quantity that can be started when splitting a job.  Used when the StartMinLotQty option is selected.  """  
      self.RawMaterial:bool = obj["RawMaterial"]
      """  Raw Material  """  
      self.MultiLevelCTP:bool = obj["MultiLevelCTP"]
      """  Available for stock manufactured parts.  Indicates if capable to promise considers sub-assemblies when determining the capable to promise date.  When false, capable to promise only looks at ATP for the capable to promise part - subassemblies are not considered.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required for items received from this vendor.  Inspection will also be enforced if the related PartClass, Vendor, Podetail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.ConsumeSafety:bool = obj["ConsumeSafety"]
      """  Indicates if MRP should allow consumption of safety stock within the purchase lead time  """  
      self.SLTVendorNum:int = obj["SLTVendorNum"]
      """  Number of Alternate Vendor master that this part can be purchased from with short lead times. The Purchase Order will be generated for this supplier when suggestions fall within the purchasing lead time and the projected supply drops below safely.  """  
      self.SLTPurPoint:str = obj["SLTPurPoint"]
      """  Default Vendor purchase point ID.  """  
      self.ShortLeadTime:int = obj["ShortLeadTime"]
      """  Used to record the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.UrgentLeadTime:int = obj["UrgentLeadTime"]
      """  This is the lead time used when generating a new suggestion within the lead time window.  If this field is 0 and the Supplier is determined from the Supplier Price List, the suggestion will use the lead time from the price list.  """  
      self.UrgentMinOrdQty:int = obj["UrgentMinOrdQty"]
      """  This is the minimum qty required when generating a new suggestion within the lead time window.  """  
      self.UrgentMultQty:int = obj["UrgentMultQty"]
      """  This is used to calculate the suggestion qty to the nearest multiple when generating a new suggestion within the lead time window.  """  
      self.UrgentPurPoint:str = obj["UrgentPurPoint"]
      """  See UrgentVendorNum  """  
      self.UrgentVendorNum:int = obj["UrgentVendorNum"]
      """  If this field is not populated then the system will use the standard Supplier from PartPlant, or the last Supplier the part was purchased from, or the Supplier from the first Price list found for the part.  """  
      self.PartRunMRP:bool = obj["PartRunMRP"]
      """  PartRunMRP  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.MMSExclude:bool = obj["MMSExclude"]
      """  Indicates if this part will be excluded in the Inventory Min/Max/Safety calculation.  """  
      self.MMSSales:bool = obj["MMSSales"]
      """  Indicates if sales history for this part will be included in the Inventory Min/Max/Safety calculation.  """  
      self.MMSIssue:bool = obj["MMSIssue"]
      """  Indicates if job materials history for this part will be included in the Inventory Min/Max/Safety calculation.  """  
      self.MMSHistory:int = obj["MMSHistory"]
      """  User defined number in days, of how far back to look in usage history.  """  
      self.MMSSafetyFactor:int = obj["MMSSafetyFactor"]
      """  User defined, percentage of MIN to be set as Safety stock value.  """  
      self.MMSMaxFactor:int = obj["MMSMaxFactor"]
      """  User defined, used in calculation to defined MAX stock value.  """  
      self.SavedMinimumQty:int = obj["SavedMinimumQty"]
      """  WIll hold the proposed Min when the Min/Max/Safety process is ran  """  
      self.SavedMaximumQty:int = obj["SavedMaximumQty"]
      """  WIll hold the proposed Max when the Min/Max/Safety process is ran  """  
      self.SavedSafetyQty:int = obj["SavedSafetyQty"]
      """  WIll hold the proposed Safety when the Min/Max/Safety process is ran  """  
      self.SavedCalculatedUsageQty:int = obj["SavedCalculatedUsageQty"]
      """  It will hold the last TotalUsage used for the Saved Min/Max/Safety  """  
      self.SavedOnDateTime:str = obj["SavedOnDateTime"]
      """  Last Date when the Saved Min/Max/Safety were updated  """  
      self.ACWPercentage:int = obj["ACWPercentage"]
      """  Auto consume window percentage, this is a percentage to calculate the auto consume window days  that scheduling engine will take in consideration to look for available quantity to consume.  """  
      self.ACWDays:int = obj["ACWDays"]
      """  Auto consume window days, this is the number of days that scheduling engine will take in consideration to look for available quantity to consume.  """  
      self.GenNewPCIDDelaySeconds:int = obj["GenNewPCIDDelaySeconds"]
      """  GenNewPCIDDelaySeconds  """  
      self.GenNewPCIDLimitDays:int = obj["GenNewPCIDLimitDays"]
      """  GenNewPCIDLimitDays  """  
      self.TopLvlMfgLeadTimeSys:int = obj["TopLvlMfgLeadTimeSys"]
      """  System calculated manufacturing lead time.  This is the lead time needed to generate the part at the level of this part only.  Does not include the time on lower level parts.  Not editable by the user.  """  
      self.TopLvlMfgLeadTimeMnl:int = obj["TopLvlMfgLeadTimeMnl"]
      """  Manually entered manufacturing lead time.  This is the lead time needed to generate the part at the level of this part only. Does not include the time on lower level parts. Directly maintained by the user.  """  
      self.ActualCostingCategoryID:str = obj["ActualCostingCategoryID"]
      """  Actual Costing Category ID  """  
      self.IncludedIntoAllocationBase:bool = obj["IncludedIntoAllocationBase"]
      """  Included Into Allocation Base  """  
      self.ForecastDaysBefore:int = obj["ForecastDaysBefore"]
      """  Number of days before the forecast date in which any sales orders that exist should reduce the forecast quantity. Ex: Forecast date of 3/31/98, Days before of 10, then any orders that have a date of 3/21/98 to 3/31/98 would reduce forecast.  """  
      self.ForecastDaysAfter:int = obj["ForecastDaysAfter"]
      """  Number of days after the forecast date in which any sales orders that exist should reduce the forecast quantity. Ex: Forecast date of 3/31/98, Days after of 10, then any orders that have a date of 4/01/98 to 4/10/98 would reduce the forecast.  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  Base UOM Code from Part Master  """  
      self.CalculatedLeadTime:int = obj["CalculatedLeadTime"]
      """  Used to calculate the normal order lead time for a Part for this Site. This value is represented in days. It is optional. Used in calculation of suggested order dates, as a default value in job material detail records.  """  
      self.ExtLeadTime:int = obj["ExtLeadTime"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      """  Used to designate the number of digits for an Integer or Mask type serial number format.  """  
      self.UrgentVendorName:str = obj["UrgentVendorName"]
      self.UrgentVendorVendorID:str = obj["UrgentVendorVendorID"]
      self.DisableQtyBrng:bool = obj["DisableQtyBrng"]
      self.EnableSerialNum:bool = obj["EnableSerialNum"]
      """  Used to indicate if the Serial Number format button should be enabled.  """  
      self.ICTrader:bool = obj["ICTrader"]
      self.InActive:bool = obj["InActive"]
      self.OnHandQty:int = obj["OnHandQty"]
      """  A summary of PartBin.OnHandQty for the warehouses where the bin is a nettable bin (WhseBin.NonNettable = NO).  """  
      self.PlantConfCtrlSerialTracking:int = obj["PlantConfCtrlSerialTracking"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      """  Used to designate the number of leading zeros for an Integer or Mask type serial number format.  """  
      self.HasOnHandQty:bool = obj["HasOnHandQty"]
      """  Indicates if there is any quantity on hand for this part  """  
      self.IsActCostingAllocEnabled:bool = obj["IsActCostingAllocEnabled"]
      self.MaximumQtyNofP:int = obj["MaximumQtyNofP"]
      """  Number of Pieces for MaximumQty  """  
      self.MaxMfgLotSizeNofP:int = obj["MaxMfgLotSizeNofP"]
      """  Number of Pieces for MaxMfgLotSize  """  
      self.MfgLotMultipleNofP:int = obj["MfgLotMultipleNofP"]
      """  Number of Pieces for MfgLotMultiple  """  
      self.MinimumQtyNofP:int = obj["MinimumQtyNofP"]
      """  Number of Pieces for MinimumQty  """  
      self.MinMfgLotSizeNofP:int = obj["MinMfgLotSizeNofP"]
      """  Number of Pieces for MinMfgLotSize  """  
      self.MinOrderQtyNofP:int = obj["MinOrderQtyNofP"]
      """  Number of Pieces for MinOrderQty  """  
      self.MinStartQtyNofP:int = obj["MinStartQtyNofP"]
      """  Number of Pieces for MinStartQty  """  
      self.QtyDisplayOption:str = obj["QtyDisplayOption"]
      self.SafetyQtyNofP:int = obj["SafetyQtyNofP"]
      """  Number of Pieces for SafetyQty  """  
      self.ShortHorizonMaxMfgLotSizeNofP:int = obj["ShortHorizonMaxMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMaxMfgLotSize  """  
      self.ShortHorizonMinMfgLotSizeNofP:int = obj["ShortHorizonMinMfgLotSizeNofP"]
      """  Number of Pieces for ShortHorizonMinMfgLotSize  """  
      self.UrgentMinOrdQtyNofP:int = obj["UrgentMinOrdQtyNofP"]
      """  Number of Pieces for UrgentMinOrdQty  """  
      self.UrgentMultQtyNofP:int = obj["UrgentMultQtyNofP"]
      """  Number of Pieces for UrgentMultQty  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PersonName:str = obj["PersonName"]
      self.PlantName:str = obj["PlantName"]
      self.PrimWhseDescription:str = obj["PrimWhseDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.TransferPlantName:str = obj["TransferPlantName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRefDesWhereUsedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.RefDes:str = obj["RefDes"]
      """  Identifier of Reference Designator  """  
      self.RefDesSeq:int = obj["RefDesSeq"]
      """  Unique identifies the reference designator with the material sequence.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.Side:str = obj["Side"]
      """  Free form side location. (Top, Bottom, Both, Level, etc)  """  
      self.XLocation:int = obj["XLocation"]
      """  X Coordinate of the reference designator  """  
      self.YLocation:int = obj["YLocation"]
      """  Y Coordinate of the reference designator  """  
      self.ZLocation:int = obj["ZLocation"]
      """  Z Coordinate of the reference designator  """  
      self.Rotation:int = obj["Rotation"]
      """  Rotation of the reference designator. Max value = 360.000  """  
      self.Description:str = obj["Description"]
      """  Designator Description  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRestrictSubstRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.SubstanceID:str = obj["SubstanceID"]
      """  Substance identification.  """  
      self.Weight:int = obj["Weight"]
      """  Default weight of the substance per primary part of UOM  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  By default the primary UOM of the part.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then weight is disregarded in compliance roll-up.  """  
      self.ExemptDate:str = obj["ExemptDate"]
      """  The date when exempt status for this substance expires.  """  
      self.ExemptCertificate:str = obj["ExemptCertificate"]
      """  Optional. Exemption certificate.  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the Part Restriction Substance is inactive and the Roll-Up process will not take it in count and it won?t be copied when the part is selected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Exempt:bool = obj["Exempt"]
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.RestrictionTypeDescription:str = obj["RestrictionTypeDescription"]
      self.SubstanceDescription:str = obj["SubstanceDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRestrictionRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RestrictionTypeID:str = obj["RestrictionTypeID"]
      """  Restriction Type identification.  """  
      self.Manual:bool = obj["Manual"]
      """  When true then no roll-up will be calculated for this Restriction type. Compliance date is set when this flag is set. D/I Roll-Up radio Button will be disabled.  """  
      self.RollupType:str = obj["RollupType"]
      """  Enabled when manual flag is unchecked and company configuration flag for allow direct roll-up is enabled. Default to Indirect Roll-Up.  """  
      self.Compliance:str = obj["Compliance"]
      """  Displays one of the compliance statuses: 1. Not applicable (Yellow) (when no substances are selected) 2. Non compliant (Red) (one or more substances are selected but roll-up has not been executed or roll-up has failed) 3. Compliant (Green) (one or more substances are selected and roll-up was successful) 4. Exempt (Yellow) (when all substances are exempt ? verify exempt date)  """  
      self.ComplianceDate:str = obj["ComplianceDate"]
      """  Set when Manual flag is checked or after compliance roll-up is successful. Cleared Manual flag is unchecked or after compliance roll-up is unsuccessful.  """  
      self.LastRollUp:str = obj["LastRollUp"]
      """  Set after compliance roll-up  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the Part Restriction Type is inactive and the Roll-Up process will not take it in count and it won?t be copied when the part is selected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Weight:bool = obj["Weight"]
      self.EnableRollUpType:bool = obj["EnableRollUpType"]
      """  To enable RollUpType when manual flag is unchecked and company configuration flag for allow direct rolling-up is enabled.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.RestrictionTypeDescription:str = obj["RestrictionTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.AltMethod:str = obj["AltMethod"]
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspPlanAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.PartNum:str = obj["PartNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.AltMethod:str = obj["AltMethod"]
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      self.SeqPlan:int = obj["SeqPlan"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspPlanRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.SeqPlan:int = obj["SeqPlan"]
      """  Part Inspection Plan Sequence  """  
      self.InspPlanPartNum:str = obj["InspPlanPartNum"]
      """  The inspection plan part number (configurator part number).  """  
      self.SpecID:str = obj["SpecID"]
      """  The specification ID.  Must be a valid value defined in the SpecDtl master table.  """  
      self.Plant:str = obj["Plant"]
      """  Unique identifier of this Site assigned by the user.  """  
      self.SampleSize:int = obj["SampleSize"]
      """  The default quantity to be inspected.  """  
      self.SampleSizePct:int = obj["SampleSizePct"]
      """  Percentage of quantity to be inspected  """  
      self.IsDefault:bool = obj["IsDefault"]
      """  This is used to establish the default plan to be used.  Only one record of the same company, Site, part number, and revision combination can have this flag set to true.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevInspVendRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.VendorID:str = obj["VendorID"]
      """  Contains the vendor ID for Skip Lot processing  """  
      self.Plant:str = obj["Plant"]
      """  Unique identifier of this Site assigned by the user.  """  
      self.SkipLotCtl:bool = obj["SkipLotCtl"]
      """  If true, this supplier / purchase point / part combination is to be included in the skip lot process.  """  
      self.SkipLotCtlCode:str = obj["SkipLotCtlCode"]
      """  Skip Lot Control Code.  Must be a valid code defined in the SkipLotCtl master file.  """  
      self.InspCnt:int = obj["InspCnt"]
      """  Counter of the receipts of this part / supplier combination. It can be maintained here in case the QA personnel want to force further inspections.  """  
      self.SkipCnt:int = obj["SkipCnt"]
      """  Counter of the number of lots that have been skipped within this cycle.  """  
      self.RptCycles:int = obj["RptCycles"]
      """  Counter of the number of cycles that this has been through.  """  
      self.RejectCnt:int = obj["RejectCnt"]
      """  Counter of the number of lots that have been rejected.  """  
      self.RejectCntBy:str = obj["RejectCntBy"]
      """   Valid options are S (Skip Lot) or Q (Quantity).
This field will control the value of what is added to the RejectCnt field. If set to S then the RejectCnt will be increased by 1 if the lot being inspected has a rejected quantity.  If set to Q then the field will be increased by the total failed quantity.  """  
      self.SampleSize:int = obj["SampleSize"]
      """  Default minimum sample size to be inspected.  """  
      self.SampleSizePct:int = obj["SampleSizePct"]
      """  Percentage of the receipt quantity to be inspected  """  
      self.ForceInsp:bool = obj["ForceInsp"]
      """  Setting to true will force all receipts to be inspected.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.VendorName:str = obj["VendorName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRevRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used as part of the primary key.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part, and is used as part of the primary key  """  
      self.RevShortDesc:str = obj["RevShortDesc"]
      """  Short description of the revision. This is NOT the Part description.  """  
      self.RevDescription:str = obj["RevDescription"]
      """  Used to enter a full description of the revision.  """  
      self.Approved:bool = obj["Approved"]
      """  Indicates if the methods of manufacturing have been approved for this revision.  Only approved methods can be pulled into jobs/quotes.  """  
      self.ApprovedDate:str = obj["ApprovedDate"]
      """  Date which this revision was approved for use by manufacturing/quoting.  This is set to the system date when the user marks the revision Approved. It is not maintainable by the user.  """  
      self.ApprovedBy:str = obj["ApprovedBy"]
      """  UserID who approved the revision.  Not maintainable by the user.  """  
      self.EffectiveDate:str = obj["EffectiveDate"]
      """  Date at which this revision is considered effective.  This date is used to control the pulling of subassembly revisions.  """  
      self.TLRLaborCost:int = obj["TLRLaborCost"]
      """  This Level Unit Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.TLRBurdenCost:int = obj["TLRBurdenCost"]
      """   This Level Unit Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.TLRMaterialCost:int = obj["TLRMaterialCost"]
      """  This Level Unit Material Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRSubcontractCost:int = obj["TLRSubcontractCost"]
      """  This Level Unit Subcontract Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRMtlBurCost:int = obj["TLRMtlBurCost"]
      """  This Level Unit Material Burden Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.TLRSetupLaborCost:int = obj["TLRSetupLaborCost"]
      """  This Level Setup Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.TLRSetupBurdenCost:int = obj["TLRSetupBurdenCost"]
      """   This Level Setup Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.LLRLaborCost:int = obj["LLRLaborCost"]
      """  This Level Unit Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.LLRBurdenCost:int = obj["LLRBurdenCost"]
      """   This Level Unit Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.LLRMaterialCost:int = obj["LLRMaterialCost"]
      """  This Level Unit Material Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRSubcontractCost:int = obj["LLRSubcontractCost"]
      """  This Level Unit Subcontract Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRMtlBurCost:int = obj["LLRMtlBurCost"]
      """  This Level Unit Material Burden Cost calculated by the BOM Cost rollup routine. "This level" cost excludes costs from sub assemblies.  """  
      self.LLRSetupLaborCost:int = obj["LLRSetupLaborCost"]
      """  This Level Setup Labor Cost calculated by the BOM Cost rollup routine. This level cost excludes costs from sub assemblies.  """  
      self.LLRSetupBurdenCost:int = obj["LLRSetupBurdenCost"]
      """   This Level Setup Burden Cost calculated by the BOM Cost rollup routine. "This level cost" excludes costs from sub assemblies.
Rolled up Burden cost. Calculated by the BOM cost rollup routine  """  
      self.RollupDate:str = obj["RollupDate"]
      """  Date that this part cost was last rolled up.  Updated by the BOM Cost Roll up routine.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number. An optional field.  """  
      self.ECO:str = obj["ECO"]
      """  Engineering Change Order Number. An optional field for reference.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part revision contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.AutoRecOpr:int = obj["AutoRecOpr"]
      """   The operation number PartOpr.OprSeq) that is marked to do the Automatic Receipt to inventory.  Note: Zero = no operation is set to perform the auto receive into inventory function.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Auto Receive" which then updates this field with the operations sequence number.  """  
      self.FinalOpr:int = obj["FinalOpr"]
      """   The sequence of the operation that is to be considered as the operation which indicates the quantity complete for the Job/Assembly.  In other words this operations completed quantity = Job/Assembly completed.   Note: Zero = no operation is set and that the system should use the last operation to determine quantity complete.
This field is not directly maintainable. Instead it is set during operation maintenance by having the user mark a check box indicating "Final Operation" which then updates this field with the operations sequence number.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.Configured:bool = obj["Configured"]
      """  If true then the revision has a configuration defined for it.  This will be set when a configuration is approved.  """  
      self.WebConfigured:bool = obj["WebConfigured"]
      """  If set to TRUE then the revision can be configured in StoreFront.  """  
      self.ShowInputPrice:bool = obj["ShowInputPrice"]
      """  If TRUE then the input prices will be shown in the Customer Connect Configuration Review.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method to be used for this revision, and is used as part of the primary key  """  
      self.AltMethodDesc:str = obj["AltMethodDesc"]
      """  The description of the alternate method.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.ParentAltMethod:str = obj["ParentAltMethod"]
      """  The alternate method of the parent this method inherits from.  """  
      self.UseStaging:bool = obj["UseStaging"]
      """  Indicates if this revision is to use stage number or operations on materials.  If false, operation sequences are to be used.  If true, staging numbers are to be used.  """  
      self.UseAltRevForParts:bool = obj["UseAltRevForParts"]
      """  UseAltRevForParts: Flag to indicate if the Use Alternate method for parts option is selected, this flag affects directly the creation and loading of data inside EngWorkbench, because it will control the Alternate Method used.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.ExtConfig:bool = obj["ExtConfig"]
      """  External Configurator  """  
      self.ValRefDes:bool = obj["ValRefDes"]
      """  Validate Reference Designators.  """  
      self.PcGlobalPart:bool = obj["PcGlobalPart"]
      """  Is the part for this revision a global part  """  
      self.PcEntprsConf:bool = obj["PcEntprsConf"]
      """  If a configuration is created for this revision, is it marked as enterprise configurator  """  
      self.GlobalRev:bool = obj["GlobalRev"]
      """  Marks the Part Revision as a global Revision, available to be sent out to other companies  """  
      self.RoughCutCode:str = obj["RoughCutCode"]
      """  Rough Cut Code.  Rough cut parameters to use when rough cut scheduling for the revision.  """  
      self.RMAInspPlan:str = obj["RMAInspPlan"]
      """  The inspection plan part number (configurator part number) to use for RMA processing for this part.  """  
      self.RMASpecID:str = obj["RMASpecID"]
      """  The specification ID to use for RMA processing for this part.  """  
      self.RMASampleSize:int = obj["RMASampleSize"]
      """  The default sample size to use for RMA processing for this part  """  
      self.RMASampleSizePct:int = obj["RMASampleSizePct"]
      """  Percentage of quantity to be inspected for RMA processing of this part  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number that this part revision was created from  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part revision this part number was generated from.  """  
      self.ConfigID:str = obj["ConfigID"]
      """  ConfigID  """  
      self.RegenConfig:bool = obj["RegenConfig"]
      """  RegenConfig  """  
      self.SIValuesGroupSeq:int = obj["SIValuesGroupSeq"]
      """  SIValuesGroupSeq  """  
      self.SIValuesHeadNum:int = obj["SIValuesHeadNum"]
      """  SIValuesHeadNum  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMode:str = obj["ProcessMode"]
      """  Indicates the way in which parts are made for Co-Part jobs.  There are two value “S” – Sequential and “C” – Concurrent.  Sequential is the default. This field is similar to the JobHead.ProcessMode field.  """  
      self.DefaultConfigPart:bool = obj["DefaultConfigPart"]
      """  DefaultConfigPart  """  
      self.CoPartsReqQty:int = obj["CoPartsReqQty"]
      """  Number of COPart required in the Revision  """  
      self.MtlCostPct:int = obj["MtlCostPct"]
      """  Material Cost Factor  """  
      self.LaborCostPct:int = obj["LaborCostPct"]
      """  Labor Cost Factor  """  
      self.CoPartsPerOp:int = obj["CoPartsPerOp"]
      """  Number of COParts per Operation  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.CNCustomsBOM:bool = obj["CNCustomsBOM"]
      """  Customs BOM  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.ProcessMfgType:str = obj["ProcessMfgType"]
      """  Type of Process Manufacturing this revision is for: General, Site, Master.  """  
      self.ProcessMfgDescription:str = obj["ProcessMfgDescription"]
      """  Description of Process Manufacturing revision.  """  
      self.UseAdvancedStaging:bool = obj["UseAdvancedStaging"]
      """  Indicates if this revision is to use Advanced Staging.  """  
      self.ProcessMfgLastGroupID:str = obj["ProcessMfgLastGroupID"]
      """  The last Group to modify this Revision for Recipe Authoring.  """  
      self.ECPCEnabled:bool = obj["ECPCEnabled"]
      """  Only Part Revisions marked as Connected Process Control (CPC) enable will be send to CPC.  """  
      self.DisableApproved:bool = obj["DisableApproved"]
      self.ECOGroup:str = obj["ECOGroup"]
      """  Name of ECO Group that this part is checked out to  """  
      self.HasCoParts:bool = obj["HasCoParts"]
      """  This field will be set to true if two or more ECOCoParts records exist for the revision.  """  
      self.ParentAltMethodDesc:str = obj["ParentAltMethodDesc"]
      self.ParentPartNum:str = obj["ParentPartNum"]
      """  Part Number of the Parent Part  """  
      self.ParentRevisionNum:str = obj["ParentRevisionNum"]
      """  Revision number  of Parent Part.  """  
      self.ProdCode:str = obj["ProdCode"]
      self.RevStatusAsOfDate:int = obj["RevStatusAsOfDate"]
      """   Revision Status used to determina in the Revision of all the Materials are Effective As Of Date
Used to indicate the MAX MtlRevisionStatus of all its Materials/SubAssemblies.
If <= 2 the all its materials/subAssemblies's Revisions are Effective As Of Date  """  
      self.SpecHedDescription:str = obj["SpecHedDescription"]
      self.vDate:str = obj["vDate"]
      """  Last date that this Revison is effective.  (Next Rev Effective date - 1)  """  
      self.vQty:int = obj["vQty"]
      self.Class:str = obj["Class"]
      self.NonStock:bool = obj["NonStock"]
      self.IsRootNode:bool = obj["IsRootNode"]
      """  Indicates that the PartRev is the root node in the tree  """  
      self.EngineeringApproved:bool = obj["EngineeringApproved"]
      """  Holds the ECORev Approved flag for the last ProcessMfgID specified against the PartRev  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InspPlanDescription:str = obj["InspPlanDescription"]
      self.PartDescriptionTrackDimension:bool = obj["PartDescriptionTrackDimension"]
      self.PartDescriptionSellingFactor:int = obj["PartDescriptionSellingFactor"]
      self.PartDescriptionPartDescription:str = obj["PartDescriptionPartDescription"]
      self.PartDescriptionIUM:str = obj["PartDescriptionIUM"]
      self.PartDescriptionTrackLots:bool = obj["PartDescriptionTrackLots"]
      self.PartDescriptionPricePerCode:str = obj["PartDescriptionPricePerCode"]
      self.PartDescriptionSalesUM:str = obj["PartDescriptionSalesUM"]
      self.PartDescriptionTrackSerialNum:bool = obj["PartDescriptionTrackSerialNum"]
      self.PartDescriptionTypeCode:str = obj["PartDescriptionTypeCode"]
      self.PcStatusConfigType:str = obj["PcStatusConfigType"]
      self.PlantName:str = obj["PlantName"]
      self.RoughCutParamDescription:str = obj["RoughCutParamDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. In Part maintenance the Search Word is to only be updated upon initial creation of the Part with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.ClassID:str = obj["ClassID"]
      """   The Inventory class that this Part belongs to. The Class field can be blank or must be valid in the PartClass master file.
Classes could be set up for different type of raw materials. It will primarily be used as a report selection parameter.  """  
      self.IUM:str = obj["IUM"]
      """  Primary Inventory Unit of Measure. The unit costs, are based on this uom. Used as a default for issue transactions for the part.  Part onhand and allocation quantities are tracked by this uom.  The quantities can also be tracked by other uoms (see PartUOM table) but tracking at this uom is mandatory.   Use UOMClass.DefUOMCode of the system default UOMClass  when creating new part records (see XASyst.DefUOMClassID).  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part.
K = Sales Kit Part.B = Planning BOM.
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PurchasingFactor:int = obj["PurchasingFactor"]
      """   This value is used to convert quantity when there is a difference in the vendors unit of measure and how it is stocked in inventory. Example is purchased in pounds, stocked in sheets.


Formula: Issue Qty * Conversion Factor = Purchased Qty.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Base Unit Selling Price for the Item. Maintainable only via Part Master Maintenance program. It is used as a default unit price on Sales Order line detail and on Invoice line details that are not referencing a sales order line.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E". Used as default PricePerCode in order entry and invoice entry.  """  
      self.InternalUnitPrice:int = obj["InternalUnitPrice"]
      """  Base Internal Unit Selling Price for the Item.  Maintainable only via Part Master Maintenance program.  If zero, then the external unit price (Part.UnitPrice) is used.  """  
      self.InternalPricePerCode:str = obj["InternalPricePerCode"]
      """  Indicates the internal pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand.  Maintainable only via Part Maintenance.  The initial default is "E".  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.MfgComment:str = obj["MfgComment"]
      """  Used to enter comments for manufacturing when this part is referenced on a job. These are copied to JobHead.Comment, JobAsmbl.Comment,JobMtl.MfgComment depending on the point of reference. Commens are printed on the routing report.  """  
      self.PurComment:str = obj["PurComment"]
      """   Part Comments that will be used as a default for purchasing. These will be copied into the JobMtl.PurComment which then will be used to pass along to the PO when that JobMtl is referenced. It will also be copied into the PODetail.Comment field when the PO is buying the part for stock and not referencing a Job. View as an EDITOR widget.
To be view-as EDITOR widget.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.UserChar1:str = obj["UserChar1"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar1Label
is non blank.  """  
      self.UserChar2:str = obj["UserChar2"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar2Label
is non blank.  """  
      self.UserChar3:str = obj["UserChar3"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar3Label
is non blank.  """  
      self.UserChar4:str = obj["UserChar4"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar4Label
is non blank.  """  
      self.UserDate1:str = obj["UserDate1"]
      """   User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate1Label
is non blank.  """  
      self.UserDate2:str = obj["UserDate2"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate2Label is non blank.  """  
      self.UserDate3:str = obj["UserDate3"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate3 Label is non blank.  """  
      self.UserDate4:str = obj["UserDate4"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate4 Label is non blank.  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """   User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec1Label
is non blank.  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec2Label is non blank.  """  
      self.UserDecimal3:int = obj["UserDecimal3"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec3Label is non blank.  """  
      self.UserDecimal4:int = obj["UserDecimal4"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec4Label is non blank.  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt1Label is non blank.  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt2Label is non blank.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Part. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.LowLevelCode:int = obj["LowLevelCode"]
      """  Internally assigned integer which indicates the deepest level of assembly indention that this part is used at.  This is used by the Cost Rollup routines to control the order in which parts get costed. Part at the bottom (highest levelcode) Product structure are calculated first and continues up the chain, with the final assembly parts being processed last.  This insures that when retrieving the cost of an assemblies components the components will already have had their cost rolled up.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """   Onhand quantity is always tracked in the Parts primary inventory uom (Part.IUM). Checking this box indicates that you want to allow tracking of onhand quantity by additional uoms.
The actual UOMs to be tracked for the part are indicated by PartUOM.TrackOnHand. In order to set the PartUOM.TrackOhHand = True the Part.TrackDimension must = true.
This replaces the old 8.3 Track Dimension feature  """  
      self.DefaultDim:str = obj["DefaultDim"]
      """  Default dimension code for the part.  Set by selecting a PartDim record as default.  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  Intrastat goods classification code following the Intrastat Classification Nomenclature (ICN). The Commodity Code field can be blank to indicate the value from the part class or must be valid in the ICommCode (formerly called IStatGrp) master file.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty for this part  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.SalesUM:str = obj["SalesUM"]
      """  The Selling Unit of measure for the Part. The UOM which the unit prices are based on. Defaults as the Part.IUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this part.  """  
      self.NetWeight:int = obj["NetWeight"]
      """  The Part's Unit Net Weight.  """  
      self.UsePartRev:bool = obj["UsePartRev"]
      """  if Yes then the part effective revision is used. If No then the revision of the demand source is used (OrderDtl, JobMtl...)  """  
      self.PartsPerContainer:int = obj["PartsPerContainer"]
      """  Default for label printing.  Zero indicates that only one label should be produced for the entire quantity.  """  
      self.PartLength:int = obj["PartLength"]
      """  Part's length.  """  
      self.PartWidth:int = obj["PartWidth"]
      """  Part's width.  """  
      self.PartHeight:int = obj["PartHeight"]
      """  Part's Height.  """  
      self.LotShelfLife:int = obj["LotShelfLife"]
      """  Shelf life of a lot in days.  Zero indicates unlimited shelf life.  """  
      self.WebPart:bool = obj["WebPart"]
      """  This is a Web saleable part  """  
      self.RunOut:bool = obj["RunOut"]
      """  Indicates that the onhand quantity is to be consumed and no further replenishments should be made.  Similar to Obsolete, however only warning messages will be issued to the user if they attempt new references.  """  
      self.SubPart:str = obj["SubPart"]
      """  Indicates the default Substitute part number.  This is optional. Must be one of the related PartSub records.  This field is set indirectly when the user checks the default toggle box in Part Substitution dialog.  """  
      self.Diameter:int = obj["Diameter"]
      """  Part's diameter.  """  
      self.Gravity:int = obj["Gravity"]
      """  Part's gravity.  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.OnHoldDate:str = obj["OnHoldDate"]
      """  Date that part becomes obsolete.  This can be set to a future date when the part should become obsolete.  """  
      self.OnHoldReasonCode:str = obj["OnHoldReasonCode"]
      """  The Reason.Code associate with the reason why the part has been placed on hold. Valid only when Part.OnHold = Yes.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Default analysis code to be used when this part appears as an assembly  on a quote or a job.  """  
      self.GlobalPart:bool = obj["GlobalPart"]
      """  Marks the Part as a global Part, available to be sent out to other companies  """  
      self.MtlAnalysisCode:str = obj["MtlAnalysisCode"]
      """  MtlAnalysisCode  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates  """  
      self.ISSuppUnitsFactor:int = obj["ISSuppUnitsFactor"]
      """  This value is used to calculate the Supplementary Units for the Intrastat.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.ImageFileName:str = obj["ImageFileName"]
      """  Path & filename (relative to images/prod_img directory on Web Server) of .jpg product image file.  """  
      self.ISOrigCountry:str = obj["ISOrigCountry"]
      """  This field contains the Intrastat Country of Origin Code from the Country table.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """  Current setting for the prefix that will be attached to all new Serial Numbers as they are generated.  """  
      self.SNFormat:str = obj["SNFormat"]
      """  Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """  Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer  """  
      self.Constrained:bool = obj["Constrained"]
      """  Used by the scheduling process when a part is stocked.  When TRUE,  the availability of this Part must be calculated via the TimePhase process prior to scheduling a Job.  """  
      self.UPCCode1:str = obj["UPCCode1"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode2:str = obj["UPCCode2"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode3:str = obj["UPCCode3"]
      """  UPS / UCC Code required by some industries.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.WebInStock:bool = obj["WebInStock"]
      """  For Customer Connect Only.  This field is used in Store Front to indicate if the part is available in stock.  """  
      self.ConsolidatedPurchasing:bool = obj["ConsolidatedPurchasing"]
      """  Should this Part be included in Consolidated Purchasing?  """  
      self.PurchasingFactorDirection:str = obj["PurchasingFactorDirection"]
      """  Indicates how Purchasing Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Selling Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RecDocReq:bool = obj["RecDocReq"]
      """   Receiving Documents Required.
Indicates receiving documents are required when receiving this part.  This pertains only to lot tracked parts that are received to inventory. If checked, then at the time of receiving the system will require that one or more attachments with a reference to a DocType having Receipt = yes be entered.Requires DocManagement license.  """  
      self.MDPV:int = obj["MDPV"]
      """  Maximum daily production value.  Used in demand shipping schedule.  """  
      self.ShipDocReq:bool = obj["ShipDocReq"]
      """   Shipping Documents Required.
Indicates if shipping documents are required when shipping this part. Pertains to Inventory shipments of lot tracked parts or shipments directly from the job only. If checked, then at the time of shipping the system will require that the PartLot.Ship DocsAvail, or JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  """  
      self.ReturnableContainer:str = obj["ReturnableContainer"]
      """  The returnable container for this part when the part needs to be returned.  The value is provided by the trading partner.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Indicates a Quantity Bearing part. Works in conjunction with the Non-Stock field to enable the part master parts to be setup for expense items.  Quantity Bearing will be set to Yes by default and only enable to be set to No if the Non-Stock flag is Yes.  """  
      self.NAFTAOrigCountry:str = obj["NAFTAOrigCountry"]
      """  This field contains the Country of Origin Code from the Country table.  For International shipping.  """  
      self.NAFTAProd:str = obj["NAFTAProd"]
      """  NAFTA Producer Code - For international shipping  """  
      self.NAFTAPref:str = obj["NAFTAPref"]
      """  NAFTA Preference Code  """  
      self.ExpLicType:str = obj["ExpLicType"]
      """  Export License Type  """  
      self.ExpLicNumber:str = obj["ExpLicNumber"]
      """  Export License Number  """  
      self.ECCNNumber:str = obj["ECCNNumber"]
      """  ECCN Number  """  
      self.AESExp:str = obj["AESExp"]
      """  AES Export code  """  
      self.HTS:str = obj["HTS"]
      """  Harmonized Tariff Schedule Code  """  
      self.UseHTSDesc:bool = obj["UseHTSDesc"]
      """  Use HTS description flag - for shippers shippers export declaration  """  
      self.SchedBcode:str = obj["SchedBcode"]
      """  Schedule B Code  """  
      self.HazItem:bool = obj["HazItem"]
      """  Hazardous Item  """  
      self.HazTechName:str = obj["HazTechName"]
      """  Hazardous Technical Name  """  
      self.HazClass:str = obj["HazClass"]
      """  Hazardous Class Number  """  
      self.HazSub:str = obj["HazSub"]
      """  Hazardous Subrisk Class  """  
      self.HazGvrnmtID:str = obj["HazGvrnmtID"]
      """  Hazardous Government Assigned ID  """  
      self.HazPackInstr:str = obj["HazPackInstr"]
      """  Hazardous Packing instructions  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this Part.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the invoice line for this Part.  """  
      self.RCUnderThreshold:int = obj["RCUnderThreshold"]
      """  Reverse Charge Under Threshold value. If the absolute value of an invoice line is less than the under threshold then the reverse charge tax code will be applied.  """  
      self.RCOverThreshold:int = obj["RCOverThreshold"]
      """  Reverse Charge Over Threshold value. If the absolute value of an invoice line is more than the over threshold then the reverse charge tax code will be applied.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.UOMClassID:str = obj["UOMClassID"]
      """   The UOM Class that will be used for the Part. The UOM Class establishes the list of unit of measures that can be used in reference to this part.
Must be valid in the UOMClass table.  """  
      self.SNMask:str = obj["SNMask"]
      """  This is the ID by which the user will reference a particular serial number format mask.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers currently used only by SNBaseStructure Mask types.  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types.  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence default. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It will be used when defaulting the SNLastUsedSeq field for new PartSite records.  """  
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      """  Indicates to use the value in SerialMask.SNLastUsedSeq when generating the next serial number for a Generate Mask type.  """  
      self.NetWeightUOM:str = obj["NetWeightUOM"]
      """   Qualifies the unit of measure of the NetWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a default  when creating new part records.
Having a NetWeightUOM will provides the ability to calculate total  weight.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.LotBatch:bool = obj["LotBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgLot:bool = obj["LotMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotHeat:bool = obj["LotHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotFirmware:bool = obj["LotFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgDt:bool = obj["LotMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotCureDt:bool = obj["LotCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotExpDt:bool = obj["LotExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotPrefix:str = obj["LotPrefix"]
      """  Defines a prefix to be used when a lot number is generated for the specific part.  """  
      self.LotUseGlobalSeq:bool = obj["LotUseGlobalSeq"]
      """  When generating the numeric portion of a lot number it can be either based on a next available number for the part (see Part.LotNextNum) or next available number from a Global Sequence (see LotSeq table and Part.LotSeqID)  """  
      self.LotSeqID:str = obj["LotSeqID"]
      """  The LotSeqID of the LotSeq record to use to retreive next available number when the part is using a Global Sequence  (Part.LotUseGlobalSeq = True). Must be valid in the LotSeq table if Part.LotUseGlobalSeq = True)  """  
      self.LotNxtNum:int = obj["LotNxtNum"]
      """  The next available number to use to generate new lot numbers a part when the  is configured to use "Part Specific" number sequence. (Part.LotUseGlobalSeq = false).  """  
      self.LotDigits:int = obj["LotDigits"]
      """  Number of digits of the Next Avail Lot Number controls that will be used by system Generate lot number logic.  """  
      self.LotLeadingZeros:bool = obj["LotLeadingZeros"]
      """  If leading zeros should be included in the numeric portion of the system generated lot number.  """  
      self.LotAppendDate:str = obj["LotAppendDate"]
      """   Option to append a trailing date string to the system generated lot number. The Date is the current system date.
Valid options are: None (Default), DD, MM, YYYY, MMYYYY, MM_YYYY, DDMMYYY, DD-MM-YYY, MMDDYYYY, MM-DD-YYYY,  YYYYMMDD, YYYY-MM-DD  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This flag identifies those parts that will suggest a PO each time than a sales order is created. This flag will be used as a default in the sales order.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This flag identifies those parts that are commonly drop shipped. This flag will be used as a default in the sales order.  """  
      self.IsConfigured:bool = obj["IsConfigured"]
      """  Configured Part  """  
      self.ExtConfig:bool = obj["ExtConfig"]
      """  External Configurator  """  
      self.RefCategory:str = obj["RefCategory"]
      """  The reference category that this Part belongs to.  """  
      self.CSFCJ5:bool = obj["CSFCJ5"]
      """   Malaysia Localization
The flag to indicate that the part is under CJ5 jurisdiction  """  
      self.CSFLMW:bool = obj["CSFLMW"]
      """   Malaysa Localization
The flag to indicate that the part is under LMW jurisdiction  """  
      self.GrossWeight:int = obj["GrossWeight"]
      """  The Part's Unit Gross Weight.  """  
      self.GrossWeightUOM:str = obj["GrossWeightUOM"]
      """   Qualifies the unit of measure of the GrossWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a defaul
t  when creating new part records.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number this part number was generated from.  """  
      self.FSAssetClassCode:str = obj["FSAssetClassCode"]
      """  Class Code Entry Field  """  
      self.FSSalesUnitPrice:int = obj["FSSalesUnitPrice"]
      """  Field Service Sales Unit Price  """  
      self.FSPricePerCode:str = obj["FSPricePerCode"]
      """  Indicates the field service sales pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. The initial default is "E".  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required upon receipt.  Inspection will also be enforced if the related Part Class, Vendor, PO Detail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.EstimateID:str = obj["EstimateID"]
      """  EstimateID  """  
      self.EstimateOrPlan:str = obj["EstimateOrPlan"]
      """  EstimateOrPlan  """  
      self.DiffPrc2PrchUOM:bool = obj["DiffPrc2PrchUOM"]
      """  DiffPrc2PrchUOM  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.PricingFactor:int = obj["PricingFactor"]
      """  PricingFactor  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.MobilePart:bool = obj["MobilePart"]
      """  MobilePart  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AGUseGoodMark:bool = obj["AGUseGoodMark"]
      """  AGUseGoodMark  """  
      self.AGProductMark:bool = obj["AGProductMark"]
      """  AGProductMark  """  
      self.ISRegion:str = obj["ISRegion"]
      """  ISRegion  """  
      self.INChapterID:str = obj["INChapterID"]
      """  INChapterID  """  
      self.PESUNATType:str = obj["PESUNATType"]
      """  CSF Peru -  SUNAT Type  """  
      self.PESUNATUOM:str = obj["PESUNATUOM"]
      """  PESUNATUOM  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.PartLengthWidthHeightUM:str = obj["PartLengthWidthHeightUM"]
      """  PartLengthWidthHeightUM  """  
      self.DiameterUM:str = obj["DiameterUM"]
      """  DiameterUM  """  
      self.DiameterInside:int = obj["DiameterInside"]
      """  DiameterInside  """  
      self.DiameterOutside:int = obj["DiameterOutside"]
      """  DiameterOutside  """  
      self.ThicknessUM:str = obj["ThicknessUM"]
      """  ThicknessUM  """  
      self.Thickness:int = obj["Thickness"]
      """  Thickness  """  
      self.ThicknessMax:int = obj["ThicknessMax"]
      """  ThicknessMax  """  
      self.Durometer:str = obj["Durometer"]
      """  Durometer  """  
      self.Specification:str = obj["Specification"]
      """  Specification  """  
      self.EngineeringAlert:str = obj["EngineeringAlert"]
      """  EngineeringAlert  """  
      self.Condition:str = obj["Condition"]
      """  Condition  """  
      self.IsCompliant:bool = obj["IsCompliant"]
      """  IsCompliant  """  
      self.IsRestricted:bool = obj["IsRestricted"]
      """  IsRestricted  """  
      self.IsSafetyItem:bool = obj["IsSafetyItem"]
      """  IsSafetyItem  """  
      self.CommercialBrand:str = obj["CommercialBrand"]
      """  CommercialBrand  """  
      self.CommercialSubBrand:str = obj["CommercialSubBrand"]
      """  CommercialSubBrand  """  
      self.CommercialCategory:str = obj["CommercialCategory"]
      """  CommercialCategory  """  
      self.CommercialSubCategory:str = obj["CommercialSubCategory"]
      """  CommercialSubCategory  """  
      self.CommercialStyle:str = obj["CommercialStyle"]
      """  CommercialStyle  """  
      self.CommercialSize1:str = obj["CommercialSize1"]
      """  CommercialSize1  """  
      self.CommercialSize2:str = obj["CommercialSize2"]
      """  CommercialSize2  """  
      self.CommercialColor:str = obj["CommercialColor"]
      """  CommercialColor  """  
      self.IsGiftCard:bool = obj["IsGiftCard"]
      """  IsGiftCard  """  
      self.PhotoFile:str = obj["PhotoFile"]
      """  PhotoFile  """  
      self.PartPhotoExists:bool = obj["PartPhotoExists"]
      """  PartPhotoExists  """  
      self.CommentText:str = obj["CommentText"]
      """  CommentText  """  
      self.PartSpecificPackingUOM:bool = obj["PartSpecificPackingUOM"]
      """  Indicates if the packaging information is part specific or specified at the UOM class level.  """  
      self.ImageID:str = obj["ImageID"]
      """  ImageID  """  
      self.CNSpecification:str = obj["CNSpecification"]
      """  Specification Code for China GTI purposes  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  This field defines if the part  is synchronized to an External CRM.  """  
      self.ExternalCRMPartID:str = obj["ExternalCRMPartID"]
      """  This field holds the id of this part in the External CRM  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  This field defines the last time that the  part  has been Synchronized between Epicor ERP and the External CRM. This field is maintained by the External CRM Synchronization  process.  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  This fields determines if the part needs to be synchronized to the External CRM. If there are changes in the part master file , Epicor ERP automatically turns on this field.  """  
      self.PESUNATTypeCode:str = obj["PESUNATTypeCode"]
      """  PESUNATTypeCode  """  
      self.PESUNATUOMCode:str = obj["PESUNATUOMCode"]
      """  PESUNATUOMCode  """  
      self.CNCodeVersion:str = obj["CNCodeVersion"]
      """  Code Version for China GTI purposes  """  
      self.CNTaxCategoryCode:str = obj["CNTaxCategoryCode"]
      """  Tax Category Code for China GTI purposes  """  
      self.CNHasPreferentialTreatment:bool = obj["CNHasPreferentialTreatment"]
      """  Has Preferential Treatment value for China GTI purposes  """  
      self.CNPreferentialTreatmentContent:str = obj["CNPreferentialTreatmentContent"]
      """  Preferential Treatment Content for China GTI purposes  """  
      self.CNZeroTaxRateMark:str = obj["CNZeroTaxRateMark"]
      """  Zero Tax Rate Mark for China GTI purposes  """  
      self.SubLevelCode:int = obj["SubLevelCode"]
      """  SubLevelCode  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  Date the Part was created  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  User the Part was created by  """  
      self.AttBatch:str = obj["AttBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttHeat:str = obj["AttHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.DeferManualEntry:bool = obj["DeferManualEntry"]
      """  DeferManualEntry  """  
      self.DeferPurchaseReceipt:bool = obj["DeferPurchaseReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Container Receipt, Receipt Entry.  """  
      self.DeferJobReceipt:bool = obj["DeferJobReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Job Receipt to Job, Job Receipt to Salvage, Job Receipt to Inventory, Kanban Receipts.  """  
      self.DeferInspection:bool = obj["DeferInspection"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Inspection Processing.  """  
      self.DeferQtyAdjustment:bool = obj["DeferQtyAdjustment"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Quantity Adjustment.  """  
      self.DeferInventoryMove:bool = obj["DeferInventoryMove"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Inventory Transfer.  """  
      self.DeferShipments:bool = obj["DeferShipments"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Customer Shipment Entry, Subcontractor Shipment Entry, Drop Shipment Entry, Order Entry.  """  
      self.DeferInventoryCounts:bool = obj["DeferInventoryCounts"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Count Tag Entry.  """  
      self.DeferAssetDisposal:bool = obj["DeferAssetDisposal"]
      """  DeferAssetDisposal  """  
      self.DeferReturnMaterials:bool = obj["DeferReturnMaterials"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: RMA Processing.  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date/Time when the Part record was updated  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the Part has to be synchronized with Epicor FSA application.  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.FSAItem:bool = obj["FSAItem"]
      """  When the part is marked as Item, it will create an Item Resource in Epicor FSA.  """  
      self.FSAEquipment:bool = obj["FSAEquipment"]
      """  When the part is marked as Equipment, it will create an Equipment Resource Template in Epicor FSA.  """  
      self.BOLClass:str = obj["BOLClass"]
      """  Bill of Lading Class. Additional data for the part required for LTL and International shipments.  """  
      self.FairMarketValue:int = obj["FairMarketValue"]
      """  Fair Market Value. Additional data for the part required for LTL and International shipments.  """  
      self.SAFTProdCategory:str = obj["SAFTProdCategory"]
      """  SAFTProdCategory  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.LocationIDNumReq:bool = obj["LocationIDNumReq"]
      """  Indicates if this part requires Identification Numbers shipment time.  This is disable if Track Location inventory is false.  """  
      self.LocationTrackInv:bool = obj["LocationTrackInv"]
      """  Indicates if this part tracks Location Inventory.  """  
      self.LocationMtlView:bool = obj["LocationMtlView"]
      """  Set the default value of Location View for materials added in Engineering Workbench.  """  
      self.LCNRVReporting:bool = obj["LCNRVReporting"]
      """  LCNRVReporting  """  
      self.LCNRVEstimatedUnitPrice:int = obj["LCNRVEstimatedUnitPrice"]
      """  LCNRVEstimatedUnitPrice  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.LocationFormatID:str = obj["LocationFormatID"]
      """  Default format ID used when assigning ID Numbers.  """  
      self.IsServices:bool = obj["IsServices"]
      """  IsServices  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PEDetrGoodServiceCode  """  
      self.PEProductServiceCode:str = obj["PEProductServiceCode"]
      """  PEProductServiceCode  """  
      self.DualUOMClassID:str = obj["DualUOMClassID"]
      """  Dual UOM Class ID  """  
      self.CNProductName:str = obj["CNProductName"]
      """  Product Name  """  
      self.CNWeight:int = obj["CNWeight"]
      """  Weight  """  
      self.CNWeightUOM:str = obj["CNWeightUOM"]
      """  Unit of Weight  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  Bonded  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttISOrigCountry:str = obj["AttISOrigCountry"]
      """  Indicates if entry of a County of Origin is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  ISO / IEC 6523  """  
      self.ExternalID:str = obj["ExternalID"]
      """  Part ID  """  
      self.CommoditySchemeID:str = obj["CommoditySchemeID"]
      """  UNTDID 7143  """  
      self.CommoditySchemeVersion:str = obj["CommoditySchemeVersion"]
      """  Part Commodity Scheme Version  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.PlanningByRevision:bool = obj["PlanningByRevision"]
      """  Indicates if this part performs MRP by Revision.  Requires Planning by Revision license.  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMPartType:int = obj["FSMPartType"]
      """  FSMPartType  """  
      self.CountryNumDescription:str = obj["CountryNumDescription"]
      self.EnableExpressCheckOut:bool = obj["EnableExpressCheckOut"]
      """  Should the Express Part Check Out option be enabled?  """  
      self.EnableGlobalLock:bool = obj["EnableGlobalLock"]
      self.EnableGlobalPart:bool = obj["EnableGlobalPart"]
      self.EnableInActive:bool = obj["EnableInActive"]
      """  Indicates if the InActive flag should be available for input,  """  
      self.EnableIUM:bool = obj["EnableIUM"]
      """  Flag to tell UI whether the Part.IUM field should be enabled or not.  """  
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Override Reverse Charge check box should be enabled.  """  
      self.EnableSerialNum:bool = obj["EnableSerialNum"]
      """  Indicates if the Serial Number button should be enabled.  """  
      self.EnableTrackSerialNum:bool = obj["EnableTrackSerialNum"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackSerialNum can be change.  """  
      self.EnableUOMClass:bool = obj["EnableUOMClass"]
      """  Flag to tell UI whether the UOMClassID field should be enabled or not.  """  
      self.ExtCoExist:bool = obj["ExtCoExist"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Default installation price of an equipment that requires installation in Epicor FSA.  """  
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstTypeDesc:str = obj["FSAInstTypeDesc"]
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Part is Global (master or linked)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany and GlbPartNum that is linking to this part  """  
      self.GlbTableAllowUpdTrackDim:bool = obj["GlbTableAllowUpdTrackDim"]
      """  check if TrackDimension is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackLots:bool = obj["GlbTableAllowUpdTrackLots"]
      """  check if TrackLots is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackSerial:bool = obj["GlbTableAllowUpdTrackSerial"]
      """  check if TrackSerialNum is in GlbTable and should be disabled in Part Entry  """  
      self.HasOnHandQty:bool = obj["HasOnHandQty"]
      """  Indicates if there is any quantity on hand for this part  """  
      self.IsComponent:bool = obj["IsComponent"]
      """  Indicates if part is a component (has a where used list available)  """  
      self.IsCoPart:bool = obj["IsCoPart"]
      """   This field indicates if the part is being used as a co-part anywhere.  This field will be used to prevent a Part from being marked as serial tracked or configured after being added as a co-part.

CoParts Project.  """  
      self.ISOrigCountryNum:int = obj["ISOrigCountryNum"]
      """  This is the numeric value of ISOrigCountry.  """  
      self.NextGeneratedLotNum:str = obj["NextGeneratedLotNum"]
      """  Shows what the next generated lot number for this part would look like  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      self.PEProductServiceCodeDesc:str = obj["PEProductServiceCodeDesc"]
      self.PLM:bool = obj["PLM"]
      self.PLMEnabled:bool = obj["PLMEnabled"]
      """  Indicates if the PLM toggle box is enabled.  """  
      self.Revision:bool = obj["Revision"]
      """  Revision  """  
      self.SalesUMDisp:str = obj["SalesUMDisp"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      self.SNMaskPrefixLength:int = obj["SNMaskPrefixLength"]
      self.SNMaskSuffixLength:int = obj["SNMaskSuffixLength"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      self.UpdatePartPlant:bool = obj["UpdatePartPlant"]
      """  Yes means to copy the NonStock and CostMethod from Part to all the PartPlant records.  """  
      self.UpdateSNPartPlant:bool = obj["UpdateSNPartPlant"]
      """  Indicates whether to update the Part serial number format changes to part plant  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.HasMRPPlanningAttribute:bool = obj["HasMRPPlanningAttribute"]
      """  If this Part is TrackInventoryAttributes = true, and the AttrClassID it is associated to has one or more attributes whose DynAttrClassDtl.UsedInPlanning= true.  """  
      self.UpdatePartPlantOverride:bool = obj["UpdatePartPlantOverride"]
      self.DEPayStatCodeDescr:str = obj["DEPayStatCodeDescr"]
      """  DEPayStatCode Description  """  
      self.DEDenominationDescr:str = obj["DEDenominationDescr"]
      """  DEDenomination Description  """  
      self.DefaultBuyerName:str = obj["DefaultBuyerName"]
      self.DefaultPlannerName:str = obj["DefaultPlannerName"]
      self.EnableTrackByRevision:bool = obj["EnableTrackByRevision"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackInventoryByRevision can be changed.  """  
      self.LinkedToGlbPart:bool = obj["LinkedToGlbPart"]
      """  indicated if this part has been linked to a global part  """  
      self.MXProductClass:str = obj["MXProductClass"]
      """  Value is from MXProdCls User Code  """  
      self.MXActiveIngredientName:str = obj["MXActiveIngredientName"]
      """  Active Ingredient Name  """  
      self.MXChemicalName:str = obj["MXChemicalName"]
      """  Chemical Name  """  
      self.MXGenericProductName:str = obj["MXGenericProductName"]
      """  Generic Product Name  """  
      self.MXTrademark:str = obj["MXTrademark"]
      """  Trademark  """  
      self.MXManufacturerCompany:str = obj["MXManufacturerCompany"]
      """  Manufacturer Company  """  
      self.MXExpirationDate:str = obj["MXExpirationDate"]
      """  Expiration Date  """  
      self.MXMedicationLot:str = obj["MXMedicationLot"]
      """  Medication Lot  """  
      self.MXPharmaceuticalForm:str = obj["MXPharmaceuticalForm"]
      """  Value is from MXProdForm User Code  """  
      self.MXKeepCondition:str = obj["MXKeepCondition"]
      """  Value is from MXProdKCnd User Code  """  
      self.MXSanitaryRegistration:str = obj["MXSanitaryRegistration"]
      """  Sanitary Registration Number  """  
      self.MXCASNum:str = obj["MXCASNum"]
      """  CAS Number  """  
      self.MXImportSanitaryRegistration:str = obj["MXImportSanitaryRegistration"]
      """  Import Sanitary Registration Number  """  
      self.MXManufacturerData:str = obj["MXManufacturerData"]
      """  Manufacturer Data Description  """  
      self.MXFormulatorData:str = obj["MXFormulatorData"]
      """  Formulator Data Description  """  
      self.MXPersonData:str = obj["MXPersonData"]
      """  Person Data Description  """  
      self.MXAuthorizedUse:str = obj["MXAuthorizedUse"]
      """  Authorized Use Description  """  
      self.MXMaterialType:str = obj["MXMaterialType"]
      """  Value is from MXProdMTyp User Code  """  
      self.MXMaterialTypeDescription:str = obj["MXMaterialTypeDescription"]
      """  Description of the “Other” material Type  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.ClassDescription:str = obj["ClassDescription"]
      self.CommodityCodeSuppUnitsUOM:str = obj["CommodityCodeSuppUnitsUOM"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.CompanySendToFSA:bool = obj["CompanySendToFSA"]
      self.DualUOMClassIDDescription:str = obj["DualUOMClassIDDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.FSAssetClassCodeFSAssetClassDesc:str = obj["FSAssetClassCodeFSAssetClassDesc"]
      self.Mtl_AnalysisCdDescription:str = obj["Mtl_AnalysisCdDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OnHoldReasonCodeDescription:str = obj["OnHoldReasonCodeDescription"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.RefCategoryDescription:str = obj["RefCategoryDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.UOMClassIDDescription:str = obj["UOMClassIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.XbSystELIEinvoice:bool = obj["XbSystELIEinvoice"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.SalesCatID_c:str = obj["SalesCatID_c"]
      self.CustomBuyout_c:bool = obj["CustomBuyout_c"]
      self.NonSellable_c:bool = obj["NonSellable_c"]
      self.WebSearchable_c:bool = obj["WebSearchable_c"]
      pass

class Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The Part number that this substitute Part is for.  """  
      self.SubPart:str = obj["SubPart"]
      """  Substitute Part  """  
      self.RecType:str = obj["RecType"]
      """  Indicates the record type. "S" = Substitute, "C" = Compliment  """  
      self.SubType:str = obj["SubType"]
      """  Pertains only to Substitute Parts (RecType = "S"). Values are "C" - Comparable, "D" - Downgrade, "U" - Upgrade  """  
      self.QtyPer:int = obj["QtyPer"]
      """   The quantity of the alternate part per 1 of the parent part in the parents base inventory uom. Cannot be zero.
To convert an existing OrderDtl.SellingQty to a PartSubs. It is converted to the Parents Part Base Inventory UOM  then multiply PartSubs.QtyPer, then converted to  PartSub.SalesUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit of measure used when this part is used as a substitute/compliment with the parent part (partsubs.partnum).  Defaults as Part.SUM of the PartSub.SubPart.  """  
      self.Comment:str = obj["Comment"]
      """  Optional Comment  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultSub:bool = obj["DefaultSub"]
      self.Price:int = obj["Price"]
      """  Price for the Suggested Quantity  """  
      self.SuggestedQty:int = obj["SuggestedQty"]
      """  Suggested Quantity  """  
      self.Selected:bool = obj["Selected"]
      """  Selected Row  """  
      self.SugOrderQty:int = obj["SugOrderQty"]
      """  Suggested Quantity for Order Qty in Quote Detail  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.SubPartSellingFactor:int = obj["SubPartSellingFactor"]
      self.SubPartTrackSerialNum:bool = obj["SubPartTrackSerialNum"]
      self.SubPartTrackDimension:bool = obj["SubPartTrackDimension"]
      self.SubPartPartDescription:str = obj["SubPartPartDescription"]
      self.SubPartIUM:str = obj["SubPartIUM"]
      self.SubPartSalesUM:str = obj["SubPartSalesUM"]
      self.SubPartTrackLots:bool = obj["SubPartTrackLots"]
      self.SubPartPricePerCode:str = obj["SubPartPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartTableset:
   def __init__(self, obj):
      self.Part:list[Erp_Tablesets_PartRow] = obj["Part"]
      self.PartAttch:list[Erp_Tablesets_PartAttchRow] = obj["PartAttch"]
      self.PartCOO:list[Erp_Tablesets_PartCOORow] = obj["PartCOO"]
      self.PartDim:list[Erp_Tablesets_PartDimRow] = obj["PartDim"]
      self.PartLangDesc:list[Erp_Tablesets_PartLangDescRow] = obj["PartLangDesc"]
      self.PartPlanningPool:list[Erp_Tablesets_PartPlanningPoolRow] = obj["PartPlanningPool"]
      self.PartPlant:list[Erp_Tablesets_PartPlantRow] = obj["PartPlant"]
      self.PartPlantPlanningAttribute:list[Erp_Tablesets_PartPlantPlanningAttributeRow] = obj["PartPlantPlanningAttribute"]
      self.PartRestriction:list[Erp_Tablesets_PartRestrictionRow] = obj["PartRestriction"]
      self.PartRestrictSubst:list[Erp_Tablesets_PartRestrictSubstRow] = obj["PartRestrictSubst"]
      self.PartRev:list[Erp_Tablesets_PartRevRow] = obj["PartRev"]
      self.PartRevAttch:list[Erp_Tablesets_PartRevAttchRow] = obj["PartRevAttch"]
      self.PartAudit:list[Erp_Tablesets_PartAuditRow] = obj["PartAudit"]
      self.PartCOPart:list[Erp_Tablesets_PartCOPartRow] = obj["PartCOPart"]
      self.PartRevInspPlan:list[Erp_Tablesets_PartRevInspPlanRow] = obj["PartRevInspPlan"]
      self.PartRevInspPlanAttch:list[Erp_Tablesets_PartRevInspPlanAttchRow] = obj["PartRevInspPlanAttch"]
      self.PartRevInspVend:list[Erp_Tablesets_PartRevInspVendRow] = obj["PartRevInspVend"]
      self.PartSubs:list[Erp_Tablesets_PartSubsRow] = obj["PartSubs"]
      self.PartPC:list[Erp_Tablesets_PartPCRow] = obj["PartPC"]
      self.PartWhse:list[Erp_Tablesets_PartWhseRow] = obj["PartWhse"]
      self.PartBinInfo:list[Erp_Tablesets_PartBinInfoRow] = obj["PartBinInfo"]
      self.PartUOM:list[Erp_Tablesets_PartUOMRow] = obj["PartUOM"]
      self.EntityGLC:list[Erp_Tablesets_EntityGLCRow] = obj["EntityGLC"]
      self.TaxExempt:list[Erp_Tablesets_TaxExemptRow] = obj["TaxExempt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartUOMPlasticTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.UOMCode:str = obj["UOMCode"]
      """  UOMCode  """  
      self.EffectiveFrom:str = obj["EffectiveFrom"]
      """  EffectiveFrom  """  
      self.Active:bool = obj["Active"]
      """  Active  """  
      self.PackagingWeight:int = obj["PackagingWeight"]
      """  PackagingWeight  """  
      self.PackagingWeightUOM:str = obj["PackagingWeightUOM"]
      """  PackagingWeightUOM  """  
      self.PerItem:int = obj["PerItem"]
      """  PerItem  """  
      self.Exempt:bool = obj["Exempt"]
      """  Exempt  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  ExemptPercent  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BaseUOMClassID:str = obj["BaseUOMClassID"]
      """  BaseUOMClassID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartUOMPlasticTaxTableset:
   def __init__(self, obj):
      self.PartUOMPlasticTax:list[Erp_Tablesets_PartUOMPlasticTaxRow] = obj["PartUOMPlasticTax"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartUOMRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.UOMCode:str = obj["UOMCode"]
      """  User defined code which uniquely identifies the UOM within the UOMClass.  """  
      self.ConvFactor:int = obj["ConvFactor"]
      """   Value used to convert to/from base uom for the specific part. Cannot change if it's base uom of UOMClass (always 1.0) Sometimes a unit of measure conversion is relative to a specific part. These are non-standard conversions.
For example; 1 box(bx) of  Part A is 12ea. 1(bx) of Part B is 24ea. Non-standard conversions are defined in the PartUOM table. When ConvOperator = * then ConvFactor is 1 UOM expressed in Base UOM else it is 1 Base UOM expressed in UOM  """  
      self.Active:bool = obj["Active"]
      """  Indicates if the PartUOM is Active. This field is ready only and is used for internal logic purposes only.  """  
      self.TrackOnHand:bool = obj["TrackOnHand"]
      """  If true then Onhand Quantity will be tracked per this UOM for this part.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.HasBeenUsed:bool = obj["HasBeenUsed"]
      """  This indicates that this Part UOM has been used somewhere.  Therefore we do not want to allow the associated part specific conversion to change.  """  
      self.ConvOperator:str = obj["ConvOperator"]
      """   Indicates the mathmatical operator that is used for performing the UOM Conversion. Options are "*" (Multiply) or "\" (Divide).
For example for Feet to Inch where Inch is the base uom. 
You could have 1ft / 12 = 1In  """  
      self.WebUOM:bool = obj["WebUOM"]
      """  WebUOM  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ConvFromUOM:str = obj["ConvFromUOM"]
      """  Qualifies that 1 of this uom = ConvFactor in ConvToUOM. Example: 12in = 1ft or 1ft = 12in  """  
      self.ConvOverrride:bool = obj["ConvOverrride"]
      """  External field used to enable/disable the conversion factor to able to change it.  """  
      self.ConvToUOM:str = obj["ConvToUOM"]
      """  Qualifies UOM of the ConvFactor. This either the UOMClass.BaseUOM or the UOMConv.UOMCode depending on the value of ConvOperator.  """  
      self.EAN13:str = obj["EAN13"]
      """  EAN13 product code from PartPC  """  
      self.EAN14:str = obj["EAN14"]
      """  EAN14 product code from PartPC  """  
      self.EAN8:str = obj["EAN8"]
      """  EAN8 product code from PartPC  """  
      self.EnableConvFactor:bool = obj["EnableConvFactor"]
      """  Internal use. To indicate if the ConvFactor should be enabled. This field is set to true if the related UOMClass is non-standard and the UOMCode is not the BaseUOM  """  
      self.EnableTrackOnHand:bool = obj["EnableTrackOnHand"]
      """  Indicates if the TrackOnHand is enabled. True when Part.TrackMultiUOM = true and UOMCode <> Part.IUM  """  
      self.GTIN14:str = obj["GTIN14"]
      """  GTIN14 product code from PartPC  """  
      self.HIBC:str = obj["HIBC"]
      """  HIBC UPN product code from PartPC  """  
      self.PartSpecific:bool = obj["PartSpecific"]
      """  Value of UOMConv.PartSpecific for informational purposes  """  
      self.UOMDesc:str = obj["UOMDesc"]
      self.UPC12:str = obj["UPC12"]
      """  UPC12 product code from PartPC  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  BaseUOMCode from UOMClass file  """  
      self.DispPkgCode:str = obj["DispPkgCode"]
      """  Used to input/display the package code related to the part/UOM. The user will only be able to update this data if Part.UsePartSpecificPckCode = true  """  
      self.DispPkgCodeDesc:str = obj["DispPkgCodeDesc"]
      """  Description of the PkgCode  """  
      self.DispPkgDisplaySeq:int = obj["DispPkgDisplaySeq"]
      """  Indicates the display sequence of the packaging in relation to the other packaging for the part.  """  
      self.DispPkgIsDefault:bool = obj["DispPkgIsDefault"]
      """  Indicates if the PkgCode is the default.  """  
      self.PartSpecificPkgCode:bool = obj["PartSpecificPkgCode"]
      """  Indicates if the pkg code information seen in PartUOM is part specific (the data came from PackingUOM where PartNum is not blank.) If true the package code data can be updated in Part Maint, if false the PartUOM pkgcode columns will be disabled.  """  
      self.DispPkgDisplayHidden:bool = obj["DispPkgDisplayHidden"]
      """  Indicates if the package code will be displayed in the application. If false, the package codes that are not valid for the MGF process on the shop floor are hidden.  """  
      self.StandardUpdate:bool = obj["StandardUpdate"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartWhereUsedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Parent Part number to which this material item is a component of  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number of the part that this material item is a component of.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material record within a specific Job/Lot/Assembly. This is system assigned. The next available # is determined by reading last JobMtl record on the Job/Lot/Assembly and then adding one to it.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The Part Number of the component material record for the related Parent Part.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Quantity per parent  """  
      self.FixedQty:bool = obj["FixedQty"]
      """  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  """  
      self.PullAsAsm:bool = obj["PullAsAsm"]
      """  This is relevant for assemblies (Part.Method = Yes). Indicates that if this assembly should be pulled from stock or manufactured as part of the job it is pulled into. If PullAsAsm = No only the assembly record will be pulled into the job/quote (as a material), the related material and operations will not be pulled over.  """  
      self.FindNum:str = obj["FindNum"]
      """  Characters used on the drawing to show where material is used.  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Routing method for the part revision.  """  
      self.BaseMethodOverridden:bool = obj["BaseMethodOverridden"]
      """  Indicates if the base revision method was overridden.  Applies only when the AltMethod field is not blank.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  The identifier of related Process Manufacturing.  """  
      self.TypeDesc:str = obj["TypeDesc"]
      """  If (PartMtl.ViewAsAsm) then xlate("Asm") else xlate("Mtl")  """  
      self.CanTrackUp:bool = obj["CanTrackUp"]
      """  Intended to be used by the UI to control "Track Up" function. Indicates if the PartNum part is a component of another part. If so the system can "Track Up" to view that part.  """  
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.OpCode:str = obj["OpCode"]
      """   Operation Master Code - Links the JobOper  record with a OpMaster record. Default is given from WrkCenter.OpCode.
Must be valid in the OpMaster file.  """  
      self.OpDesc:str = obj["OpDesc"]
      """  Operation Description.  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartWhereUsedTableset:
   def __init__(self, obj):
      self.PartRefDesWhereUsed:list[Erp_Tablesets_PartRefDesWhereUsedRow] = obj["PartRefDesWhereUsed"]
      self.PartWhereUsed:list[Erp_Tablesets_PartWhereUsedRow] = obj["PartWhereUsed"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PartWhseRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Warehouse  """  
      self.DemandQty:int = obj["DemandQty"]
      """   A summary of the outstanding quantities for order open sales releases that are being filled from stock and of the open job material requirements that are to be issued from stock (JobMtl.Buyit = No) for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.ReservedQty:int = obj["ReservedQty"]
      """  A summary of the reserved quantities for order open sales releases for this Part within a specific warehouse. NOTE: This value is the TOTAL of reservations in PartAlloc.  """  
      self.AllocatedQty:int = obj["AllocatedQty"]
      """  A summary of the allocated quantities for order open sales releases for this Part within a specific warehouse. NOTE: This value is the TOTAL of allocation in PartAlloc.  """  
      self.PickingQty:int = obj["PickingQty"]
      """  Quantity that is in the picking process for orders. A summary of PartAlloc.PickingQty for all demand.  """  
      self.PickedQty:int = obj["PickedQty"]
      """  Stock Quantity picked for orders.  A summary of PartAlloc.PickedQty for all demand.  """  
      self.CountedDate:str = obj["CountedDate"]
      """  Date last counted.  Updated during the Inventory Posting Process.  Not directly maintainable by user.  """  
      self.OnHandQty:int = obj["OnHandQty"]
      """  A summary of PartBin.OnHandQty for the warehouse where the bin is a nettable bin (WhseBin.NonNettable = NO). Maintained via the PartBin write trigger.  """  
      self.NonNettableQty:int = obj["NonNettableQty"]
      """  A summary of PartBin.OnHandQty for the warehouse where the bin is a non nettable bin (WhseBin.NonNettable = YES). Maintained via the PartBin write trigger.  """  
      self.BuyToOrderQty:int = obj["BuyToOrderQty"]
      """  A summary of Demand that is Buy To Order and thus should not take away from Available inventory.  """  
      self.SalesDemandQty:int = obj["SalesDemandQty"]
      """   A summary of the outstanding quantities for order open sales releases that are being filled from stock for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.SalesReservedQty:int = obj["SalesReservedQty"]
      """  A total of inventory quantities that has been reserved  for sales orders.   A summary of PartAlloc.ReservedQty for sales order allocations against stock  (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.SalesAllocatedQty:int = obj["SalesAllocatedQty"]
      """  New in 9.00.  A summary of outstanding quantities for order open sales releases that are being filled from stock and have not been reserved, selected for picking or picked. Calculated as OurStockQty - ReservedQty + PickingQty + PickedQty).  Note: ReservedQty, PickingQty, PickedQty are summaries of PartAlloc records with a blank job,  related to an OrderRel.  The system tracks allocation summaries in the following sequence; AllocQty--> ReservedQty--> PickingQty--> PickedQty.  """  
      self.SalesPickingQty:int = obj["SalesPickingQty"]
      """   Quantity that is in the picking process for sales orders. A summary of PartAlloc.PickingQty where PartAlloc.OrderNum > 0
A summary of PartAlloc.PickingQty for sales order that are being picked from stock (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.SalesPickedQty:int = obj["SalesPickedQty"]
      """  Stock Quantity picked for sales orders.  A summary of PartAlloc.PickedQty for sales order picked from stock  (PartAlloc.OrderNum > 0 & SupplyJobNum = blank).  """  
      self.JobDemandQty:int = obj["JobDemandQty"]
      """  A summary of the outstanding quantities for job material requirements that are being filled from stock for this Part within a specific warehouse.  """  
      self.JobReservedQty:int = obj["JobReservedQty"]
      """  Summary of mfg demands on released jobs. That is, a summary of outstanding JobMtl and JobAsmbl.PullQty where JobHead.JobFirm = Yes and JobReleased = Yes  """  
      self.JobAllocatedQty:int = obj["JobAllocatedQty"]
      """  New in 9.00.  Summary of stock allocated for jobs.  """  
      self.JobPickingQty:int = obj["JobPickingQty"]
      """  Quantity that is in the picking process for jobs. A summary of PartAlloc.PickingQty where PartAlloc.JobNum <> ''.  """  
      self.JobPickedQty:int = obj["JobPickedQty"]
      """  Stock Quantity picked for jobs.  """  
      self.UnfirmJobDemandQty:int = obj["UnfirmJobDemandQty"]
      """  New in 9.00.  Summary of mfg demand requirements on unfirm jobs. That is, a summary of outstanding JobMtl.RequiredQty and JobAsmbl.PullQty where JobHead.JobFirm = No.  """  
      self.TFOrdDemandQty:int = obj["TFOrdDemandQty"]
      """   A summary of the outstanding quantities for transfer order requirements that are being filled from stock for this Part within a specific warehouse.
The system calculates Available as OnhandQty - AllocatedQty.  """  
      self.TFOrdReservedQty:int = obj["TFOrdReservedQty"]
      """  Summary of Transfer Order Reserved Qty for this Part in this Warehouse.  """  
      self.TFOrdAllocatedQty:int = obj["TFOrdAllocatedQty"]
      """  Summary of Transfer Order Allocated Qty for this Part in this Warehouse.  """  
      self.TFOrdPickingQty:int = obj["TFOrdPickingQty"]
      """  Quantity that is in the picking process for transfer orders.  A summary of PartAlloc.PickingQty where PartAlloc.TFOrdNum > 0.  """  
      self.TFOrdPickedQty:int = obj["TFOrdPickedQty"]
      """  Stock Quantity picked for transfer orders.  """  
      self.KBCode:str = obj["KBCode"]
      """  Uniquely indentifies the record.  """  
      self.MinimumQty:int = obj["MinimumQty"]
      """  Indicates the desired minimum on-hand quantity. This is used by the time phase requirements report when user requests to show any parts that will or have fallen below this level. It is also used as a selection parameter for the inventory reorder report. This is an optional field.  """  
      self.MaximumQty:int = obj["MaximumQty"]
      """  Use to set a Maximum quantity limit that is desired to be on-hand. This field is used as a selection option by the inventory reorder report to show all parts that are over this limit. This field is optional.  """  
      self.SafetyQty:int = obj["SafetyQty"]
      """   Safety quantity is a "purchasing cushion" limit. It's the amount you would need to have to cover your requirements until a shipment arrives from the vendor. If your on-hand quantity falls below this limit it means that there is a good chance that you will run out of material before the next shipment arrives. This value is used by the inventory reorder report and the time phase report. It is an optional field.
Note: Safety + Minimum = Reorder Point...  using this formula the  reorder point is the amount at which to reorder to maintain at least the prescribed minimum quantity.  """  
      self.KBPONUM:int = obj["KBPONUM"]
      """  Purchase order number  that the detail line item is linked to.  """  
      self.KBPOLine:int = obj["KBPOLine"]
      """  The line number of the detail record on the purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.KBWarehouseCode:str = obj["KBWarehouseCode"]
      """  Kanban Warehouse  """  
      self.KBBinNum:str = obj["KBBinNum"]
      """  Identifies the Bin location that contains an Onhand quantity for this Part within a warehouse. The PartBin.BinNum can be blank (indicating bin tracking is not used for this part) or it  must be valid in the WhseBin table.  """  
      self.KBPlant:str = obj["KBPlant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.KBQty:int = obj["KBQty"]
      """  Indicates the desired minimum on-hand Kanban quantity.  """  
      self.PcntTolerance:int = obj["PcntTolerance"]
      """  Percent Tolerance. Entered as a positive number, Used to define the default percent tolerance. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a percentage difference between the count quantity and the frozen quantity by more than the percent tolerance figure is considered out of tolerance. Calculated as ?adjustment qty / frozen qty? expressed as a percent.  """  
      self.CalcPcnt:bool = obj["CalcPcnt"]
      """  False = there is no percent tolerance consideration and any percent variance is considered within tolerance. True = percent tolerance is active for this part/whs and the value in PcntTolerance will be used to determine if the count variance is within tolerance.  """  
      self.CalcQty:bool = obj["CalcQty"]
      """  False = there is no quantity tolerance consideration and any quantity variance is considered within tolerance. True = quantity tolerance is active for this part/whse and the value in QtyTolerance will be used to determine if the count variance is within tolerance.  """  
      self.CalcValue:bool = obj["CalcValue"]
      """  False = there is no value tolerance consideration and any value variance is considered within tolerance. True = value tolerance is active for this part/whse and the value in ValueTolerance will be used to determine if the count variance is within tolerance.  """  
      self.QtyAdjTolerance:int = obj["QtyAdjTolerance"]
      """  Used to provide a means to control whether a count quantity discrepancy should be posted as an adjustment to inventory. Zero indicates all quantity adjustments will be posted. This parameter is used to control the count discrepancy of parts that are counted by weight on a scale. Counts often vary based upon humidity. If the count of the part is within this tolerance but different from the frozen quantity then no inventory adjustment will be posted.  """  
      self.CalcQtyAdj:bool = obj["CalcQtyAdj"]
      """  False = there is no qty adj tolerance setting at the PartWhse level (so the setting in PartSite will be used). True = qty adj tolerance is active for this part/whs and the value in QtyAdjTolerance will be used to determine if the count variance should be  """  
      self.MinAbc:str = obj["MinAbc"]
      """  Moved from PartSite. When the system sets the ABC class, it will not allow the class to be lower than this class.  """  
      self.SystemAbc:str = obj["SystemAbc"]
      """  Moved from PartSite. ABC Classification calculated by the system based on Stock Valuation Percent. This is maintainable by the user if ManualABC = true.  """  
      self.ManualABC:bool = obj["ManualABC"]
      """  This will lock the SystemABC code preventing the automatic determination by the Calculate ABC Codes process, which will not reset the ABC code on parts that have the flag set.  """  
      self.LastCCDate:str = obj["LastCCDate"]
      """  The last date this part was cycle counted. This date is used to insure that a part will be selected for cycle counting at the appropriate time. This is different than the CountedDate field, which will be updated for either a cycle count or physical inventory.  """  
      self.OvrrideCountFreq:bool = obj["OvrrideCountFreq"]
      """  This flag indicates whether the CountFreq defined in this record should over ride the count frequency in the AbcCode, SiteConfABC or WarehseABC tables.  """  
      self.CountFreq:int = obj["CountFreq"]
      """  If greater than zero this setting overrides values in AbcCode,  SiteConfABC and Warehse.  """  
      self.QtyTolerance:int = obj["QtyTolerance"]
      """  Quantity tolerance. Entered as a positive whole number, Used to define the default quantity tolerance. Zero indicates that any quantity variance is considered out of tolerance. A number greater than zero indicates that a count quantity that varies from the frozen quantity by more than the quantity tolerance figure is considered out of tolerance.  """  
      self.ValueTolerance:int = obj["ValueTolerance"]
      """  Value tolerance. Entered as a positive number. Used to define the default value tolerance.  An entry of zero will indicate that any value variance will be considered out of tolerance for this part. Value variance is calculated as the difference in cost between the counted quantity and the frozen quantity.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Plant:str = obj["Plant"]
      """  Filled in by BO, not phiscally in database.  """  
      self.DefaultWhse:bool = obj["DefaultWhse"]
      self.PrimBinNum:str = obj["PrimBinNum"]
      self.TotalDemand:int = obj["TotalDemand"]
      self.PrimBinNumDescription:str = obj["PrimBinNumDescription"]
      self.KBActionCode:str = obj["KBActionCode"]
      self.KBActionDesc:str = obj["KBActionDesc"]
      self.PlantOwner:str = obj["PlantOwner"]
      self.MaxQtyUOM:str = obj["MaxQtyUOM"]
      self.MinQtyUOM:str = obj["MinQtyUOM"]
      self.SafetyQtyUOM:str = obj["SafetyQtyUOM"]
      self.IUM:str = obj["IUM"]
      """  Part Warehouse columns Unit Of Measure.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.KBBinNumDescription:str = obj["KBBinNumDescription"]
      self.KBCodeKBActionCode:str = obj["KBCodeKBActionCode"]
      self.KBCodeKBDescription:str = obj["KBCodeKBDescription"]
      self.KBPlantName:str = obj["KBPlantName"]
      self.KBWarehouseCodeDescription:str = obj["KBWarehouseCodeDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.WarehouseDescription:str = obj["WarehouseDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxExemptRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code  """  
      self.EffectiveFrom:str = obj["EffectiveFrom"]
      """  Exemption Effective Start Date  """  
      self.EffectiveTo:str = obj["EffectiveTo"]
      """  Exemption Effective End Date  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.TextCode:str = obj["TextCode"]
      """  Tax Legal Text Code  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Tax Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Tax Resolution Date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CustNum:int = obj["CustNum"]
      """  A unique Customer identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  A unique Vendor identifier.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.SalesTaxDescription:str = obj["SalesTaxDescription"]
      self.SalesTRCDescription:str = obj["SalesTRCDescription"]
      self.TaxTextDescription:str = obj["TaxTextDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TrackerFilterRow:
   def __init__(self, obj):
      self.DMRPlant:str = obj["DMRPlant"]
      self.EngWkb:bool = obj["EngWkb"]
      self.Inactive:bool = obj["Inactive"]
      self.InspectionPlant:str = obj["InspectionPlant"]
      self.InTransitPlant:str = obj["InTransitPlant"]
      self.OnHandLots:bool = obj["OnHandLots"]
      self.PartNum:str = obj["PartNum"]
      self.RtnStart:bool = obj["RtnStart"]
      self.SNAsset:bool = obj["SNAsset"]
      self.SNConsumed:bool = obj["SNConsumed"]
      self.SNInWIP:bool = obj["SNInWIP"]
      self.SNRejAdj:bool = obj["SNRejAdj"]
      self.SNShipped:bool = obj["SNShipped"]
      self.SNWhsePlant:str = obj["SNWhsePlant"]
      self.SNWhsePlantDesc:str = obj["SNWhsePlantDesc"]
      self.TrackDown:bool = obj["TrackDown"]
      self.TrackUp:bool = obj["TrackUp"]
      self.Warehouse:str = obj["Warehouse"]
      self.WarehouseDesc:str = obj["WarehouseDesc"]
      self.WhseBin:str = obj["WhseBin"]
      self.WhseBinDesc:str = obj["WhseBinDesc"]
      self.WhseCount:str = obj["WhseCount"]
      self.WhsePlant:str = obj["WhsePlant"]
      self.WhsePlantDesc:str = obj["WhsePlantDesc"]
      self.WipCompletedOnly:bool = obj["WipCompletedOnly"]
      self.WipExcludeProdLoc:bool = obj["WipExcludeProdLoc"]
      self.WipPlant:str = obj["WipPlant"]
      self.ActualCostingRevisionNum:str = obj["ActualCostingRevisionNum"]
      self.ActualCostingPlant:str = obj["ActualCostingPlant"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TrackerFilterTableset:
   def __init__(self, obj):
      self.TrackerFilter:list[Erp_Tablesets_TrackerFilterRow] = obj["TrackerFilter"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_UpdExtPartTableset:
   def __init__(self, obj):
      self.Part:list[Erp_Tablesets_PartRow] = obj["Part"]
      self.PartAttch:list[Erp_Tablesets_PartAttchRow] = obj["PartAttch"]
      self.PartCOO:list[Erp_Tablesets_PartCOORow] = obj["PartCOO"]
      self.PartDim:list[Erp_Tablesets_PartDimRow] = obj["PartDim"]
      self.PartLangDesc:list[Erp_Tablesets_PartLangDescRow] = obj["PartLangDesc"]
      self.PartPlanningPool:list[Erp_Tablesets_PartPlanningPoolRow] = obj["PartPlanningPool"]
      self.PartPlant:list[Erp_Tablesets_PartPlantRow] = obj["PartPlant"]
      self.PartPlantPlanningAttribute:list[Erp_Tablesets_PartPlantPlanningAttributeRow] = obj["PartPlantPlanningAttribute"]
      self.PartRestriction:list[Erp_Tablesets_PartRestrictionRow] = obj["PartRestriction"]
      self.PartRestrictSubst:list[Erp_Tablesets_PartRestrictSubstRow] = obj["PartRestrictSubst"]
      self.PartRev:list[Erp_Tablesets_PartRevRow] = obj["PartRev"]
      self.PartRevAttch:list[Erp_Tablesets_PartRevAttchRow] = obj["PartRevAttch"]
      self.PartAudit:list[Erp_Tablesets_PartAuditRow] = obj["PartAudit"]
      self.PartCOPart:list[Erp_Tablesets_PartCOPartRow] = obj["PartCOPart"]
      self.PartRevInspPlan:list[Erp_Tablesets_PartRevInspPlanRow] = obj["PartRevInspPlan"]
      self.PartRevInspPlanAttch:list[Erp_Tablesets_PartRevInspPlanAttchRow] = obj["PartRevInspPlanAttch"]
      self.PartRevInspVend:list[Erp_Tablesets_PartRevInspVendRow] = obj["PartRevInspVend"]
      self.PartSubs:list[Erp_Tablesets_PartSubsRow] = obj["PartSubs"]
      self.PartPC:list[Erp_Tablesets_PartPCRow] = obj["PartPC"]
      self.PartWhse:list[Erp_Tablesets_PartWhseRow] = obj["PartWhse"]
      self.PartBinInfo:list[Erp_Tablesets_PartBinInfoRow] = obj["PartBinInfo"]
      self.PartUOM:list[Erp_Tablesets_PartUOMRow] = obj["PartUOM"]
      self.EntityGLC:list[Erp_Tablesets_EntityGLCRow] = obj["EntityGLC"]
      self.TaxExempt:list[Erp_Tablesets_TaxExemptRow] = obj["TaxExempt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_UsedPartsRow:
   def __init__(self, obj):
      self.PartNum:str = obj["PartNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_UsedPartsTableset:
   def __init__(self, obj):
      self.UsedParts:list[Erp_Tablesets_UsedPartsRow] = obj["UsedParts"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class FindPart_input:
   """ Required : 
   ipPartNum
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      pass

class FindPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opPartNum:str = obj["parameters"]
      self.opUOM:str = obj["parameters"]
      self.opMatchType:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetByID_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      pass

class GetByID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class GetBySysRowID_input:
   """ Required : 
   id
   """  
   def __init__(self, obj):
      self.id:str = obj["id"]
      pass

class GetBySysRowID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class GetBySysRowIDs_input:
   """ Required : 
   ids
   """  
   def __init__(self, obj):
      self.ids:str = obj["ids"]
      pass

class GetBySysRowIDs_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class GetCodeDescList_input:
   """ Required : 
   tableName
   fieldName
   """  
   def __init__(self, obj):
      self.tableName:str = obj["tableName"]
      self.fieldName:str = obj["fieldName"]
      pass

class GetCodeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetConfTypeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetDMRListSearch_input:
   """ Required : 
   part
   """  
   def __init__(self, obj):
      self.part:str = obj["part"]
      """  Part  """  
      pass

class GetDMRListSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartGetDMRListTableset] = obj["returnObj"]
      pass

class GetDualUomClassList_input:
   """ Required : 
   uomClassID
   """  
   def __init__(self, obj):
      self.uomClassID:str = obj["uomClassID"]
      """  The UOM Class ID used to find compatible Dual UOM Classes.  """  
      pass

class GetDualUomClassList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetDupPartConfigID_input:
   """ Required : 
   configID
   """  
   def __init__(self, obj):
      self.configID:str = obj["configID"]
      """  ConfigID  """  
      pass

class GetDupPartConfigID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.message:str = obj["parameters"]
      self.foundConfigID:str = obj["parameters"]
      self.foundDescription:str = obj["parameters"]
      self.foundType:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetExternalCRMIntegrationIsEnabled_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class GetGlbPartList_input:
   """ Required : 
   GlbPartNumList
   """  
   def __init__(self, obj):
      self.GlbPartNumList:str = obj["GlbPartNumList"]
      """  Delimited list of GlbPartNum values  """  
      pass

class GetGlbPartList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_GlbPartTableset] = obj["returnObj"]
      pass

class GetIfCurrentRevIsSiteExternalMES_input:
   """ Required : 
   site_ex
   partnum_ex
   """  
   def __init__(self, obj):
      self.site_ex:str = obj["site_ex"]
      self.partnum_ex:str = obj["partnum_ex"]
      pass

class GetIfCurrentRevIsSiteExternalMES_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class GetIfCurrentSiteHasExternalMES_input:
   """ Required : 
   site_ex
   """  
   def __init__(self, obj):
      self.site_ex:str = obj["site_ex"]
      pass

class GetIfCurrentSiteHasExternalMES_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class GetListByConfigID_input:
   """ Required : 
   WhereClause
   PartRevWhereClause
   PageSize
   AbsolutePage
   """  
   def __init__(self, obj):
      self.WhereClause:str = obj["WhereClause"]
      """  Whereclause.  """  
      self.PartRevWhereClause:str = obj["PartRevWhereClause"]
      """  PartRevWhereClause.  """  
      self.PageSize:int = obj["PageSize"]
      """  Page size.  """  
      self.AbsolutePage:int = obj["AbsolutePage"]
      """  Absolute page.  """  
      pass

class GetListByConfigID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.MorePages:bool = obj["MorePages"]
      pass

      """  output parameters  """  

class GetListByWarehouseBin_input:
   """ Required : 
   partWhereClause
   warehouseCode
   binType
   zoneID
   fromBinNum
   toBinNum
   excludeNonNettable
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.partWhereClause:str = obj["partWhereClause"]
      """  The where clause the filters the part records.  """  
      self.warehouseCode:str = obj["warehouseCode"]
      """  Search records for this warehouse code only.  """  
      self.binType:str = obj["binType"]
      """  Search records for this specific bin type.  """  
      self.zoneID:str = obj["zoneID"]
      """  Get parts for this zone.  """  
      self.fromBinNum:str = obj["fromBinNum"]
      """  From bin range.  """  
      self.toBinNum:str = obj["toBinNum"]
      """  To bin range.  """  
      self.excludeNonNettable:bool = obj["excludeNonNettable"]
      """  Exclude non-nettable bins.  """  
      self.pageSize:int = obj["pageSize"]
      """  Page size.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Absolute page.  """  
      pass

class GetListByWarehouseBin_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetListFilterCustXPrt_input:
   """ Required : 
   custNum
   startWith
   typeCode
   partDescription
   primaryColumn
   PageSize
   AbsolutePage
   """  
   def __init__(self, obj):
      self.custNum:int = obj["custNum"]
      """  Customer Part Cross Reference Number.  """  
      self.startWith:str = obj["startWith"]
      """  Start With Part Search Filter.  """  
      self.typeCode:str = obj["typeCode"]
      """  Type Code Part Search Filter.  """  
      self.partDescription:str = obj["partDescription"]
      """  Part Description Part Search Filter.  """  
      self.primaryColumn:str = obj["primaryColumn"]
      """  Primary Column Part Search Filter.  """  
      self.PageSize:int = obj["PageSize"]
      """  Page size.  """  
      self.AbsolutePage:int = obj["AbsolutePage"]
      """  Absolute page.  """  
      pass

class GetListFilterCustXPrt_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.MorePages:bool = obj["MorePages"]
      pass

      """  output parameters  """  

class GetListFilterPlants_input:
   """ Required : 
   WhereClause
   PageSize
   AbsolutePage
   """  
   def __init__(self, obj):
      self.WhereClause:str = obj["WhereClause"]
      """  Whereclause.  """  
      self.PageSize:int = obj["PageSize"]
      """  Page size.  """  
      self.AbsolutePage:int = obj["AbsolutePage"]
      """  Absolute page.  """  
      pass

class GetListFilterPlants_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.MorePages:bool = obj["MorePages"]
      pass

      """  output parameters  """  

class GetListFromSelectedKeys_input:
   """ Required : 
   ds
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartListTableset] = obj["ds"]
      self.pageSize:int = obj["pageSize"]
      """  The page size, used only for UI adaptor  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page, used only for the UI adaptor  """  
      pass

class GetListFromSelectedKeys_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartListTableset] = obj["ds"]
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetNewEntityGLC_input:
   """ Required : 
   ds
   relatedToFile
   key1
   key2
   key3
   key4
   key5
   key6
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.relatedToFile:str = obj["relatedToFile"]
      self.key1:str = obj["key1"]
      self.key2:str = obj["key2"]
      self.key3:str = obj["key3"]
      self.key4:str = obj["key4"]
      self.key5:str = obj["key5"]
      self.key6:str = obj["key6"]
      pass

class GetNewEntityGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartAttch_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartAudit_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   changeDate
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      self.changeDate:str = obj["changeDate"]
      pass

class GetNewPartAudit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartBinInfo_input:
   """ Required : 
   ds
   partNum
   plant
   warehouseCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.plant:str = obj["plant"]
      self.warehouseCode:str = obj["warehouseCode"]
      pass

class GetNewPartBinInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartCOO_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartCOO_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartCOPart_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      pass

class GetNewPartCOPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartDim_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartDim_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartLangDesc_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartLangDesc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartPC_input:
   """ Required : 
   ds
   partNum
   pcType
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.pcType:str = obj["pcType"]
      pass

class GetNewPartPC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartPlanningPool_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartPlanningPool_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartPlantPlanningAttribute_input:
   """ Required : 
   ds
   partNum
   plant
   attrClassID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.plant:str = obj["plant"]
      self.attrClassID:str = obj["attrClassID"]
      pass

class GetNewPartPlantPlanningAttribute_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartPlant_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartPlant_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRestrictSubst_input:
   """ Required : 
   ds
   partNum
   restrictionTypeID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.restrictionTypeID:str = obj["restrictionTypeID"]
      pass

class GetNewPartRestrictSubst_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRestriction_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartRestriction_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRevAttch_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      pass

class GetNewPartRevAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRevInspPlanAttch_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   seqPlan
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      self.seqPlan:int = obj["seqPlan"]
      pass

class GetNewPartRevInspPlanAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRevInspPlan_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      pass

class GetNewPartRevInspPlan_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRevInspVend_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   processMfgID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      self.processMfgID:str = obj["processMfgID"]
      pass

class GetNewPartRevInspVend_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartRev_input:
   """ Required : 
   ds
   partNum
   revisionNum
   altMethod
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.revisionNum:str = obj["revisionNum"]
      self.altMethod:str = obj["altMethod"]
      pass

class GetNewPartRev_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartSubs_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartSubs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartUOMPlasticTax_input:
   """ Required : 
   ds
   PartNum
   UOMCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartUOMPlasticTaxTableset] = obj["ds"]
      self.PartNum:str = obj["PartNum"]
      self.UOMCode:str = obj["UOMCode"]
      pass

class GetNewPartUOMPlasticTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartUOMPlasticTaxTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartUOM_input:
   """ Required : 
   ds
   partNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      pass

class GetNewPartUOM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPartWhse_input:
   """ Required : 
   ds
   partNum
   plant
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.partNum:str = obj["partNum"]
      self.plant:str = obj["plant"]
      pass

class GetNewPartWhse_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPart_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class GetNewPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewTaxExempt_input:
   """ Required : 
   ds
   relatedToFile
   key1
   key2
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      self.relatedToFile:str = obj["relatedToFile"]
      self.key1:str = obj["key1"]
      self.key2:str = obj["key2"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewTaxExempt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetPartForLink_input:
   """ Required : 
   PartNum
   """  
   def __init__(self, obj):
      self.PartNum:str = obj["PartNum"]
      """  Global PartNum field on the GlbPart record to link  """  
      pass

class GetPartForLink_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class GetPartFromRowID_input:
   """ Required : 
   ipRowType
   ipRowID
   """  
   def __init__(self, obj):
      self.ipRowType:str = obj["ipRowType"]
      self.ipRowID:str = obj["ipRowID"]
      pass

class GetPartFromRowID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opPartNum:str = obj["parameters"]
      self.opUOM:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetPartGlobalFields_input:
   """ Required : 
   cPartNum
   GlobalLock
   """  
   def __init__(self, obj):
      self.cPartNum:str = obj["cPartNum"]
      self.GlobalLock:bool = obj["GlobalLock"]
      pass

class GetPartGlobalFields_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetPartUOMPlasticTax_input:
   """ Required : 
   part
   """  
   def __init__(self, obj):
      self.part:str = obj["part"]
      pass

class GetPartUOMPlasticTax_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartUOMPlasticTaxTableset] = obj["returnObj"]
      pass

class GetPartWhereUsed_input:
   """ Required : 
   whereUsedPartNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereUsedPartNum:str = obj["whereUsedPartNum"]
      """  Part number which you want the where used dataset for.  """  
      self.pageSize:int = obj["pageSize"]
      """  pageSize  """  
      self.absolutePage:int = obj["absolutePage"]
      """  absolutePage  """  
      pass

class GetPartWhereUsed_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartWhereUsedTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetPartXRefInfo_input:
   """ Required : 
   partNum
   SysRowID
   rowType
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Proposed PartNumber change  """  
      self.SysRowID:str = obj["SysRowID"]
      """  RowID of the selected record. Skips find part logic if this has a value.  """  
      self.rowType:str = obj["rowType"]
      """  RowType of the selected record. Only used with sysRowID.  """  
      pass

class GetPartXRefInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.partNum:str = obj["parameters"]
      self.serialWarning:str = obj["parameters"]
      self.questionString:str = obj["parameters"]
      self.multipleMatch:bool = obj["multipleMatch"]
      pass

      """  output parameters  """  

class GetPcStatusIsKinetic_input:
   """ Required : 
   configID
   """  
   def __init__(self, obj):
      self.configID:str = obj["configID"]
      """  Configurator ID  """  
      pass

class GetPcStatusIsKinetic_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class GetRestrictedMethodsInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opDenyPurchasingInfo:bool = obj["opDenyPurchasingInfo"]
      self.opDenyInventoryInfo:bool = obj["opDenyInventoryInfo"]
      self.opDenyLotMaintenance:bool = obj["opDenyLotMaintenance"]
      pass

      """  output parameters  """  

class GetRows_input:
   """ Required : 
   whereClausePart
   whereClausePartAttch
   whereClausePartCOO
   whereClausePartDim
   whereClausePartLangDesc
   whereClausePartPlanningPool
   whereClausePartPlant
   whereClausePartPlantPlanningAttribute
   whereClausePartRestriction
   whereClausePartRestrictSubst
   whereClausePartRev
   whereClausePartRevAttch
   whereClausePartAudit
   whereClausePartCOPart
   whereClausePartRevInspPlan
   whereClausePartRevInspPlanAttch
   whereClausePartRevInspVend
   whereClausePartSubs
   whereClausePartPC
   whereClausePartWhse
   whereClausePartBinInfo
   whereClausePartUOM
   whereClauseEntityGLC
   whereClauseTaxExempt
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClausePart:str = obj["whereClausePart"]
      self.whereClausePartAttch:str = obj["whereClausePartAttch"]
      self.whereClausePartCOO:str = obj["whereClausePartCOO"]
      self.whereClausePartDim:str = obj["whereClausePartDim"]
      self.whereClausePartLangDesc:str = obj["whereClausePartLangDesc"]
      self.whereClausePartPlanningPool:str = obj["whereClausePartPlanningPool"]
      self.whereClausePartPlant:str = obj["whereClausePartPlant"]
      self.whereClausePartPlantPlanningAttribute:str = obj["whereClausePartPlantPlanningAttribute"]
      self.whereClausePartRestriction:str = obj["whereClausePartRestriction"]
      self.whereClausePartRestrictSubst:str = obj["whereClausePartRestrictSubst"]
      self.whereClausePartRev:str = obj["whereClausePartRev"]
      self.whereClausePartRevAttch:str = obj["whereClausePartRevAttch"]
      self.whereClausePartAudit:str = obj["whereClausePartAudit"]
      self.whereClausePartCOPart:str = obj["whereClausePartCOPart"]
      self.whereClausePartRevInspPlan:str = obj["whereClausePartRevInspPlan"]
      self.whereClausePartRevInspPlanAttch:str = obj["whereClausePartRevInspPlanAttch"]
      self.whereClausePartRevInspVend:str = obj["whereClausePartRevInspVend"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClausePartPC:str = obj["whereClausePartPC"]
      self.whereClausePartWhse:str = obj["whereClausePartWhse"]
      self.whereClausePartBinInfo:str = obj["whereClausePartBinInfo"]
      self.whereClausePartUOM:str = obj["whereClausePartUOM"]
      self.whereClauseEntityGLC:str = obj["whereClauseEntityGLC"]
      self.whereClauseTaxExempt:str = obj["whereClauseTaxExempt"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRows_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetSNFormat_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetSendToFSAChange_input:
   """ Required : 
   sendToFSA
   partNum
   ds
   """  
   def __init__(self, obj):
      self.sendToFSA:bool = obj["sendToFSA"]
      self.partNum:str = obj["partNum"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class GetSendToFSAChange_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetSerialNumberFormatLeadingZeros_input:
   """ Required : 
   SNBaseDataType
   SNNumODigits
   SNPrefix
   SNMaskExample
   SNLeadingZeros
   """  
   def __init__(self, obj):
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      self.SNPrefix:str = obj["SNPrefix"]
      self.SNMaskExample:str = obj["SNMaskExample"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      pass

class GetSerialNumberFormatLeadingZeros_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetSerialNumberFormat_input:
   """ Required : 
   SNBaseDataType
   SNNumODigits
   SNPrefix
   SNMaskExample
   """  
   def __init__(self, obj):
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      self.SNPrefix:str = obj["SNPrefix"]
      self.SNMaskExample:str = obj["SNMaskExample"]
      pass

class GetSerialNumberFormat_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetTrackInventoryByRevision_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Part number  """  
      pass

class GetTrackInventoryByRevision_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.trackInventoryByRevision:bool = obj["trackInventoryByRevision"]
      pass

      """  output parameters  """  

class GetValidatePartWarehouseBin_input:
   """ Required : 
   partNum
   warehouseCode
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      self.warehouseCode:str = obj["warehouseCode"]
      pass

class GetValidatePartWarehouseBin_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.binNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetWhereUsedECORevClause_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartWhereUsedTableset] = obj["ds"]
      pass

class GetWhereUsedECORevClause_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartWhereUsedTableset] = obj["ds"]
      self.whereClause:str = obj["parameters"]
      pass

      """  output parameters  """  

class GlbPartsExist_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.GlbPartsExist:bool = obj["GlbPartsExist"]
      pass

      """  output parameters  """  

class HasIntrastat_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.hasIntrastat:bool = obj["hasIntrastat"]
      pass

      """  output parameters  """  

class Ice_BOUpdErrorRow:
   def __init__(self, obj):
      self.TableName:str = obj["TableName"]
      self.ErrorLevel:str = obj["ErrorLevel"]
      self.ErrorType:str = obj["ErrorType"]
      self.ErrorText:str = obj["ErrorText"]
      self.ErrorSysRowID:str = obj["ErrorSysRowID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      pass

class Ice_BOUpdErrorTableset:
   def __init__(self, obj):
      self.BOUpdError:list[Ice_BOUpdErrorRow] = obj["BOUpdError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class InitializeTracker_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_TrackerFilterTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.authorizedPlants:str = obj["parameters"]
      self.inTransitPlants:str = obj["parameters"]
      pass

      """  output parameters  """  

class IsRunOutOnHand_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  The PartNum  """  
      pass

class IsRunOutOnHand_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.IsRunOutOnHand:bool = obj["IsRunOutOnHand"]
      pass

      """  output parameters  """  

class LinkGlbPart_input:
   """ Required : 
   glbCompany
   GlbPartNum
   ds
   ds1
   """  
   def __init__(self, obj):
      self.glbCompany:str = obj["glbCompany"]
      """  Global Company field on the GlbPart record to link  """  
      self.GlbPartNum:str = obj["GlbPartNum"]
      """  Global PartNum field on the GlbPart record to link  """  
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      self.ds1:list[Erp_Tablesets_PartTableset] = obj["ds1"]
      pass

class LinkGlbPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds1:list[Erp_Tablesets_PartTableset] = obj["ds1"]
      pass

      """  output parameters  """  

class OnChangePESUNAT_input:
   """ Required : 
   codeType
   ds
   """  
   def __init__(self, obj):
      self.codeType:str = obj["codeType"]
      """  User code type  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class OnChangePESUNAT_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangePkgCode_input:
   """ Required : 
   partNum
   uomCode
   pkgCode
   ds
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Part Number.  """  
      self.uomCode:str = obj["uomCode"]
      """  UOMCode  """  
      self.pkgCode:str = obj["pkgCode"]
      """  Proposed PkgCode  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class OnChangePkgCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangePlant_input:
   """ Required : 
   plantCode
   ds
   """  
   def __init__(self, obj):
      self.plantCode:str = obj["plantCode"]
      """  Code of Plant which is changed to  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class OnChangePlant_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeSNLastUsedSeq_input:
   """ Required : 
   ipGenSeqStr
   ipLastUsedSeq
   """  
   def __init__(self, obj):
      self.ipGenSeqStr:str = obj["ipGenSeqStr"]
      self.ipLastUsedSeq:str = obj["ipLastUsedSeq"]
      pass

class OnChangeSNLastUsedSeq_output:
   def __init__(self, obj):
      pass

class OnChangedConfigID_input:
   """ Required : 
   newConfigID
   partNum
   revisionNum
   """  
   def __init__(self, obj):
      self.newConfigID:str = obj["newConfigID"]
      """  Changed ConfigID  """  
      self.partNum:str = obj["partNum"]
      """  Part Num  """  
      self.revisionNum:str = obj["revisionNum"]
      """  Revision Num  """  
      pass

class OnChangedConfigID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.msg:str = obj["parameters"]
      pass

      """  output parameters  """  

class OnChangingDefaultAttributeSet_input:
   """ Required : 
   attributeSetID
   ds
   """  
   def __init__(self, obj):
      self.attributeSetID:int = obj["attributeSetID"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class OnChangingDefaultAttributeSet_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PartExists_input:
   """ Required : 
   PartNumber
   """  
   def __init__(self, obj):
      self.PartNumber:str = obj["PartNumber"]
      pass

class PartExists_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class PartIsActive_input:
   """ Required : 
   PartNumber
   """  
   def __init__(self, obj):
      self.PartNumber:str = obj["PartNumber"]
      pass

class PartIsActive_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class PartIsSalesKit_input:
   """ Required : 
   PartNumber
   """  
   def __init__(self, obj):
      self.PartNumber:str = obj["PartNumber"]
      pass

class PartIsSalesKit_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.IsSalesKit:bool = obj["IsSalesKit"]
      self.IsPhantom:bool = obj["IsPhantom"]
      pass

      """  output parameters  """  

class PartUOMPlasticTaxDelete_input:
   """ Required : 
   sysRowID
   """  
   def __init__(self, obj):
      self.sysRowID:str = obj["sysRowID"]
      pass

class PartUOMPlasticTaxDelete_output:
   def __init__(self, obj):
      pass

class PartUOMPlasticTaxUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartUOMPlasticTaxTableset] = obj["ds"]
      pass

class PartUOMPlasticTaxUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartUOMPlasticTaxTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PerformTrackByRevisionConversion_input:
   """ Required : 
   partNum
   newTrackByRevision
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      self.newTrackByRevision:bool = obj["newTrackByRevision"]
      pass

class PerformTrackByRevisionConversion_output:
   def __init__(self, obj):
      pass

class PerformTrackInventoryAttributeConversion_input:
   """ Required : 
   performInventoryTransfer
   defaultRevisionNum
   ds
   """  
   def __init__(self, obj):
      self.performInventoryTransfer:bool = obj["performInventoryTransfer"]
      self.defaultRevisionNum:str = obj["defaultRevisionNum"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class PerformTrackInventoryAttributeConversion_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.conversionMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PreLinkGlbPart_input:
   """ Required : 
   glbCompany
   GlbPartNum
   ds
   """  
   def __init__(self, obj):
      self.glbCompany:str = obj["glbCompany"]
      """  Global Company field on the GlbPart record to link  """  
      self.GlbPartNum:str = obj["GlbPartNum"]
      """  Global VendorNum field on the GlbPart record to link  """  
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      pass

class PreLinkGlbPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      self.vMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class PromptForPassword_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opPromptForPassword:bool = obj["opPromptForPassword"]
      pass

      """  output parameters  """  

class RequestNoRevWithExternalMESForSiteValidation_input:
   """ Required : 
   company
   plant
   partNum
   """  
   def __init__(self, obj):
      self.company:str = obj["company"]
      self.plant:str = obj["plant"]
      self.partNum:str = obj["partNum"]
      pass

class RequestNoRevWithExternalMESForSiteValidation_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class SetMRPRecalcFlag_input:
   """ Required : 
   partNum
   plant
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  Part to update MRP flag for  """  
      self.plant:str = obj["plant"]
      """  Plant to update MRP flag for, blank for all plants of part  """  
      pass

class SetMRPRecalcFlag_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

class SetNextGeneratedLotNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class SetNextGeneratedLotNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SkipGlbPart_input:
   """ Required : 
   glbCompany
   glbPartNum
   ds
   """  
   def __init__(self, obj):
      self.glbCompany:str = obj["glbCompany"]
      """  Global Company field on the GlbPart record to skip  """  
      self.glbPartNum:str = obj["glbPartNum"]
      """  Global PartNum field on the GlbPart record to skip  """  
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      pass

class SkipGlbPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UnlinkGlbPart_input:
   """ Required : 
   glbCompany
   glbPartNum
   ds
   """  
   def __init__(self, obj):
      self.glbCompany:str = obj["glbCompany"]
      """  Global Company field on the GlbPart record to unlink  """  
      self.glbPartNum:str = obj["glbPartNum"]
      """  Global CustNum field on the GlbPart record to unlink  """  
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      pass

class UnlinkGlbPart_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PartTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbPartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateAfterGlbPartLink_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class UpdateAfterGlbPartLink_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtPartTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtPartTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class Update_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class Update_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateInspVendor_input:
   """ Required : 
   ipProposedVendor
   ds
   """  
   def __init__(self, obj):
      self.ipProposedVendor:str = obj["ipProposedVendor"]
      """  The new proposed Vendor value  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ValidateInspVendor_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateInspection_input:
   """ Required : 
   ipProposedInspPlan
   ipProposedSpecId
   iptable
   ds
   """  
   def __init__(self, obj):
      self.ipProposedInspPlan:str = obj["ipProposedInspPlan"]
      """  The new proposed InspPlanPartNum value  """  
      self.ipProposedSpecId:str = obj["ipProposedSpecId"]
      """  The new proposed SpecID value  """  
      self.iptable:str = obj["iptable"]
      """  table name  """  
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

class ValidateInspection_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PartTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateNewPartRevAttch_input:
   """ Required : 
   PartNum
   RevisionNum
   AltMethod
   ProcessMfgID
   """  
   def __init__(self, obj):
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision Number  """  
      self.AltMethod:str = obj["AltMethod"]
      """  Alternate Method  """  
      self.ProcessMfgID:str = obj["ProcessMfgID"]
      """  Alternate Method  """  
      pass

class ValidateNewPartRevAttch_output:
   def __init__(self, obj):
      pass

class ValidateUOMConvTrans_input:
   """ Required : 
   ipPartNum
   ipConvUOMClassID
   ipConvUOMIUM
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  Part number.  """  
      self.ipConvUOMClassID:str = obj["ipConvUOMClassID"]
      """  The new proposed UOM Class to convert to.  """  
      self.ipConvUOMIUM:str = obj["ipConvUOMIUM"]
      """  The new proposed UOM IUM to convert to.  """  
      pass

class ValidateUOMConvTrans_output:
   def __init__(self, obj):
      pass

class ValidateUOMconvChange_input:
   """ Required : 
   ipPartNum
   ipConvUOMClassID
   ipConvUOMIUM
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  Part number.  """  
      self.ipConvUOMClassID:str = obj["ipConvUOMClassID"]
      """  The new proposed UOM Class to convert to.  """  
      self.ipConvUOMIUM:str = obj["ipConvUOMIUM"]
      """  The new proposed UOM IUM to convert to.  """  
      pass

class ValidateUOMconvChange_output:
   def __init__(self, obj):
      pass

class WhereUsedRtnStart_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

class WhereUsedRtnStart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class WhereUsedTrackDown_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

class WhereUsedTrackDown_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class WhereUsedTrackUp_input:
   """ Required : 
   partNum
   ds
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

class WhereUsedTrackUp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UsedPartsTableset] = obj["ds"]
      pass

      """  output parameters  """  

