import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.ECCExtensionSvc
# Description: ECC Extension service the will allow for custom mappings for configurator processing
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def post_AltCustomListPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltCustomListPart
   OperationID: AltCustomListPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltCustomListPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltCustomListPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltCustomListPartSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltCustomListPartSubs
   OperationID: AltCustomListPartSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltCustomListPartSubs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltCustomListPartSubs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltCustomTagPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltCustomTagPart
   OperationID: AltCustomTagPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltCustomTagPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltCustomTagPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltCustomTagPartSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltCustomTagPartSubs
   OperationID: AltCustomTagPartSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltCustomTagPartSubs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltCustomTagPartSubs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltCustomXML
   OperationID: AltCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: AltPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AltFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AltFinalXml
   OperationID: AltFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AltFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AltFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCpnCustXPrtUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCpnCustXPrtUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetCpnCustXPrtUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCpnCustXPrtUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCpnCustXPrtUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCpnPartXRefIntUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCpnPartXRefIntUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetCpnPartXRefIntUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCpnPartXRefIntUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCpnPartXRefIntUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomListCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomListCustXPrt
   OperationID: CpnCustomListCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomListCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomListCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomListPartXRefInt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomListPartXRefInt
   OperationID: CpnCustomListPartXRefInt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomListPartXRefInt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomListPartXRefInt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomTagCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomTagCustXPrt
   OperationID: CpnCustomTagCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomTagCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomTagCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomTagPartXRefInt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomTagPartXRefInt
   OperationID: CpnCustomTagPartXRefInt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomTagPartXRefInt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomTagPartXRefInt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomXMLCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomXMLCustXPrt
   OperationID: CpnCustomXMLCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomXMLCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomXMLCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnCustomXMLPartXRefInt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnCustomXMLPartXRefInt
   OperationID: CpnCustomXMLPartXRefInt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnCustomXMLPartXRefInt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnCustomXMLPartXRefInt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnPayloadCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnPayloadCustXPrt
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CpnPayloadCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnPayloadCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnPayloadCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnPayloadPartXRefInt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnPayloadPartXRefInt
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CpnPayloadPartXRefInt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnPayloadPartXRefInt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnPayloadPartXRefInt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnFinalXmlCustXPrt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnFinalXmlCustXPrt
   OperationID: CpnFinalXmlCustXPrt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnFinalXmlCustXPrt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnFinalXmlCustXPrt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CpnFinalXmlPartXRefInt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CpnFinalXmlPartXRefInt
   OperationID: CpnFinalXmlPartXRefInt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CpnFinalXmlPartXRefInt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CpnFinalXmlPartXRefInt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSgpPartUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSgpPartUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetSgpPartUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSgpPartUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSgpPartUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SgpCustomListPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SgpCustomListPart
   OperationID: SgpCustomListPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SgpCustomListPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SgpCustomListPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SgpCustomTagPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SgpCustomTagPart
   OperationID: SgpCustomTagPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SgpCustomTagPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SgpCustomTagPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SgpCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SgpCustomXML
   OperationID: SgpCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SgpCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SgpCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SgpPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SgpPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: SgpPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SgpPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SgpPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SgpFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SgpFinalXml
   OperationID: SgpFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SgpFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SgpFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetStgProdGrupUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetStgProdGrupUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetStgProdGrupUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetStgProdGrupUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetStgProdGrupUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StgCustomListProdGrup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StgCustomListProdGrup
   OperationID: StgCustomListProdGrup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StgCustomListProdGrup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StgCustomListProdGrup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StgCustomTagProdGrup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StgCustomTagProdGrup
   OperationID: StgCustomTagProdGrup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StgCustomTagProdGrup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StgCustomTagProdGrup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StgCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StgCustomXML
   OperationID: StgCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StgCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StgCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StgPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StgPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: StgPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StgPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StgPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StgFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StgFinalXml
   OperationID: StgFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StgFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StgFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetStkPartUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetStkPartUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetStkPartUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetStkPartUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetStkPartUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetStkPartUomUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetStkPartUomUD
   OperationID: GetStkPartUomUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetStkPartUomUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetStkPartUomUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkCustomListPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkCustomListPart
   OperationID: StkCustomListPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkCustomListPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkCustomListPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkCustomListPartUOM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkCustomListPartUOM
   OperationID: StkCustomListPartUOM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkCustomListPartUOM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkCustomListPartUOM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkCustomTagPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkCustomTagPart
   OperationID: StkCustomTagPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkCustomTagPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkCustomTagPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkCustomTagPartUOM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkCustomTagPartUOM
   OperationID: StkCustomTagPartUOM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkCustomTagPartUOM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkCustomTagPartUOM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkAttributeSet(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkAttributeSet
   Description: ECC method used in STK upload to allow for custom coding of the attributeSet tag.
The part row will be supplied for reference to help with the updating of the attributeSet string.
   OperationID: StkAttributeSet
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkAttributeSet_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkAttributeSet_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkCustomXML
   OperationID: StkCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: StkPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_StkFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method StkFinalXml
   OperationID: StkFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/StkFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/StkFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSttPartUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSttPartUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetSttPartUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSttPartUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSttPartUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SttCustomListPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SttCustomListPart
   OperationID: SttCustomListPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SttCustomListPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SttCustomListPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SttCustomTagPart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SttCustomTagPart
   OperationID: SttCustomTagPart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SttCustomTagPart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SttCustomTagPart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SttCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SttCustomXML
   OperationID: SttCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SttCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SttCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SttPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SttPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: SttPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SttPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SttPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SttFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SttFinalXml
   OperationID: SttFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SttFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SttFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPOHeaderUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPOHeaderUD
   Description: Return purchase order header UD data
   OperationID: GetPOHeaderUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPOHeaderUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPOHeaderUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPODetailUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPODetailUD
   Description: Return purchase order Detail UD data
   OperationID: GetPODetailUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPODetailUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPODetailUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodCustomListPOHeader(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodCustomListPOHeader
   OperationID: SpodCustomListPOHeader
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodCustomListPOHeader_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodCustomListPOHeader_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodCustomListPODetail(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodCustomListPODetail
   OperationID: SpodCustomListPODetail
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodCustomListPODetail_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodCustomListPODetail_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodCustomTagPOHeader(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodCustomTagPOHeader
   OperationID: SpodCustomTagPOHeader
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodCustomTagPOHeader_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodCustomTagPOHeader_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodCustomTagPODetail(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodCustomTagPODetail
   OperationID: SpodCustomTagPODetail
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodCustomTagPODetail_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodCustomTagPODetail_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodCustomXML
   OperationID: SpodCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpodPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpodPayload
   OperationID: SpodPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpodPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpodPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignSugPOChgUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignSugPOChgUD
   Description: Assigns payload and UD columns for PO Suggestion records
   OperationID: AssignSugPOChgUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignSugPOChgUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignSugPOChgUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpouCustomListSugPOChg(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpouCustomListSugPOChg
   OperationID: SpouCustomListSugPOChg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpouCustomListSugPOChg_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpouCustomListSugPOChg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpouCustomTagSugPOChg(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpouCustomTagSugPOChg
   OperationID: SpouCustomTagSugPOChg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpouCustomTagSugPOChg_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpouCustomTagSugPOChg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SpouPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SpouPayload
   OperationID: SpouPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SpouPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SpouPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignQuoteDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignQuoteDtlUD
   Description: Assigns UD columns for order detail.
   OperationID: AssignQuoteDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignQuoteDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignQuoteDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignQuoteHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignQuoteHedUD
   Description: Assigns payload and UD columns for order head
   OperationID: AssignQuoteHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignQuoteHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignQuoteHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquCustomListQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquCustomListQuoteDtl
   OperationID: CrquCustomListQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquCustomListQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquCustomListQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquCustomListQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquCustomListQuoteHed
   OperationID: CrquCustomListQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquCustomListQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquCustomListQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquCustomTagQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquCustomTagQuoteDtl
   OperationID: CrquCustomTagQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquCustomTagQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquCustomTagQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquCustomTagQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquCustomTagQuoteHed
   OperationID: CrquCustomTagQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquCustomTagQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquCustomTagQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquCustomXML
   OperationID: CrquCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrquPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrquPayload
   OperationID: CrquPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrquPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrquPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrCustomListQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrCustomListQuoteDtl
   OperationID: GqrCustomListQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrCustomListQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrCustomListQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrCustomListQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrCustomListQuoteHed
   OperationID: GqrCustomListQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrCustomListQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrCustomListQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrCustomTagQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrCustomTagQuoteDtl
   OperationID: GqrCustomTagQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrCustomTagQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrCustomTagQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrCustomTagQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrCustomTagQuoteHed
   OperationID: GqrCustomTagQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrCustomTagQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrCustomTagQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrCustomXML
   OperationID: GqrCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GqrPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GqrPayload
   OperationID: GqrPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GqrPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GqrPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCrqdQuoteHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCrqdQuoteHedUD
   Description: Return order header UD data for order inquiry
   OperationID: GetCrqdQuoteHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCrqdQuoteHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCrqdQuoteHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCrqdQuoteDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCrqdQuoteDtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetCrqdQuoteDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCrqdQuoteDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCrqdQuoteDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdCustomListQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdCustomListQuoteDtl
   OperationID: CrqdCustomListQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdCustomListQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdCustomListQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdCustomTagQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdCustomTagQuoteDtl
   OperationID: CrqdCustomTagQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdCustomTagQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdCustomTagQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdCustomListQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdCustomListQuoteHed
   OperationID: CrqdCustomListQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdCustomListQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdCustomListQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdCustomTagQuoteHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdCustomTagQuoteHed
   OperationID: CrqdCustomTagQuoteHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdCustomTagQuoteHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdCustomTagQuoteHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdCustomXML
   OperationID: CrqdCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrqdPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrqdPayload
   OperationID: CrqdPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrqdPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrqdPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGqrQuoteHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGqrQuoteHedUD
   Description: Return order header UD data for order inquiry
   OperationID: GetGqrQuoteHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGqrQuoteHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGqrQuoteHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGqrQuoteDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGqrQuoteDtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetGqrQuoteDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGqrQuoteDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGqrQuoteDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRFQHeadUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRFQHeadUD
   Description: Return RFQ header UD data
   OperationID: GetRFQHeadUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRFQHeadUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRFQHeadUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRFQItemUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRFQItemUD
   Description: Return RFQ Line UD data
   OperationID: GetRFQItemUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRFQItemUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRFQItemUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdCustomListRFQHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdCustomListRFQHead
   OperationID: SurdCustomListRFQHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdCustomListRFQHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdCustomListRFQHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdCustomListRFQItem(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdCustomListRFQItem
   OperationID: SurdCustomListRFQItem
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdCustomListRFQItem_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdCustomListRFQItem_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdCustomTagRFQHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdCustomTagRFQHead
   OperationID: SurdCustomTagRFQHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdCustomTagRFQHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdCustomTagRFQHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdCustomTagRFQItem(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdCustomTagRFQItem
   OperationID: SurdCustomTagRFQItem
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdCustomTagRFQItem_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdCustomTagRFQItem_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdCustomXML
   OperationID: SurdCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SurdPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SurdPayload
   OperationID: SurdPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SurdPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SurdPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignRFQHeadUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignRFQHeadUD
   Description: Assigns payload and UD columns for RFQ Head records
   OperationID: AssignRFQHeadUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignRFQHeadUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignRFQHeadUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignRFQItemUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignRFQItemUD
   Description: Assigns payload and UD columns for RFQ Item records
   OperationID: AssignRFQItemUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignRFQItemUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignRFQItemUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuruCustomListRFQHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuruCustomListRFQHead
   OperationID: SuruCustomListRFQHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuruCustomListRFQHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuruCustomListRFQHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuruCustomListRFQItem(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuruCustomListRFQItem
   OperationID: SuruCustomListRFQItem
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuruCustomListRFQItem_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuruCustomListRFQItem_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuruCustomTagRFQHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuruCustomTagRFQHead
   OperationID: SuruCustomTagRFQHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuruCustomTagRFQHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuruCustomTagRFQHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuruCustomTagRFQItem(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuruCustomTagRFQItem
   OperationID: SuruCustomTagRFQItem
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuruCustomTagRFQItem_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuruCustomTagRFQItem_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuruPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuruPayload
   OperationID: SuruPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuruPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuruPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignRMADtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignRMADtlUD
   Description: Assigns UD columns for order detail.
   OperationID: AssignRMADtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignRMADtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignRMADtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignRMAHeadUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignRMAHeadUD
   Description: Assigns payload and UD columns for order head
   OperationID: AssignRMAHeadUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignRMAHeadUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignRMAHeadUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruCustomListRMADtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruCustomListRMADtl
   OperationID: CrruCustomListRMADtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruCustomListRMADtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruCustomListRMADtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruCustomListRMAHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruCustomListRMAHead
   OperationID: CrruCustomListRMAHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruCustomListRMAHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruCustomListRMAHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruCustomTagRMADtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruCustomTagRMADtl
   OperationID: CrruCustomTagRMADtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruCustomTagRMADtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruCustomTagRMADtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruCustomTagRMAHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruCustomTagRMAHead
   OperationID: CrruCustomTagRMAHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruCustomTagRMAHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruCustomTagRMAHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruCustomXML
   OperationID: CrruCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrruPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrruPayload
   OperationID: CrruPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrruPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrruPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCrrdRMAHeadUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCrrdRMAHeadUD
   Description: Return order header UD data for order inquiry
   OperationID: GetCrrdRMAHeadUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCrrdRMAHeadUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCrrdRMAHeadUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCrrdRMADtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCrrdRMADtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetCrrdRMADtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCrrdRMADtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCrrdRMADtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdCustomListRMADtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdCustomListRMADtl
   OperationID: CrrdCustomListRMADtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdCustomListRMADtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdCustomListRMADtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdCustomTagRMADtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdCustomTagRMADtl
   OperationID: CrrdCustomTagRMADtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdCustomTagRMADtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdCustomTagRMADtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdCustomListRMAHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdCustomListRMAHead
   OperationID: CrrdCustomListRMAHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdCustomListRMAHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdCustomListRMAHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdCustomTagRMAHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdCustomTagRMAHead
   OperationID: CrrdCustomTagRMAHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdCustomTagRMAHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdCustomTagRMAHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdCustomXML
   OperationID: CrrdCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrdPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrdPayload
   OperationID: CrrdPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrdPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrdPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCdmPcECCOrderDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCdmPcECCOrderDtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetCdmPcECCOrderDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCdmPcECCOrderDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCdmPcECCOrderDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCdmQuoteDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCdmQuoteDtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetCdmQuoteDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCdmQuoteDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCdmQuoteDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CdmCustomListQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CdmCustomListQuoteDtl
   OperationID: CdmCustomListQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CdmCustomListQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CdmCustomListQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CdmCustomListPcECCOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CdmCustomListPcECCOrderDtl
   OperationID: CdmCustomListPcECCOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CdmCustomListPcECCOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CdmCustomListPcECCOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CdmCustomTagQuoteDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CdmCustomTagQuoteDtl
   OperationID: CdmCustomTagQuoteDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CdmCustomTagQuoteDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CdmCustomTagQuoteDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CdmCustomTagPcECCOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CdmCustomTagPcECCOrderDtl
   OperationID: CdmCustomTagPcECCOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CdmCustomTagPcECCOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CdmCustomTagPcECCOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignHDCaseUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignHDCaseUD
   Description: Assigns payload and UD columns for Help Desk Case header
   OperationID: AssignHDCaseUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignHDCaseUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignHDCaseUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDcldHDCaseUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDcldHDCaseUD
   Description: Return Help Desk Case UD data for claims inquiry
   OperationID: GetDcldHDCaseUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDcldHDCaseUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDcldHDCaseUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignLocationInventoryUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignLocationInventoryUD
   Description: Assigns payload and UD columns for order head
   OperationID: AssignLocationInventoryUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignLocationInventoryUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignLocationInventoryUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDeidLocationInventoryUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDeidLocationInventoryUD
   Description: Return Location Inventory UD data for location inventory inquiry
   OperationID: GetDeidLocationInventoryUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDeidLocationInventoryUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDeidLocationInventoryUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignLocationWarrantyTranUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignLocationWarrantyTranUD
   Description: Assigns payload and UD columns for order head
   OperationID: AssignLocationWarrantyTranUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignLocationWarrantyTranUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignLocationWarrantyTranUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDebmLocationMtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDebmLocationMtlUD
   Description: Return location material UD data for location BOM inquiry
   OperationID: GetDebmLocationMtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDebmLocationMtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDebmLocationMtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDebmLocationWarrantyTranUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDebmLocationWarrantyTranUD
   Description: Return location material UD data for location BOM inquiry
   OperationID: GetDebmLocationWarrantyTranUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDebmLocationWarrantyTranUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDebmLocationWarrantyTranUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDebmPayloadXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDebmPayloadXml
   OperationID: GetDebmPayloadXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDebmPayloadXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDebmPayloadXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcldCustomListHDCase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcldCustomListHDCase
   OperationID: DcldCustomListHDCase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcldCustomListHDCase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcldCustomListHDCase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcldCustomTagHDCase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcldCustomTagHDCase
   OperationID: DcldCustomTagHDCase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcldCustomTagHDCase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcldCustomTagHDCase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcldPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcldPayload
   OperationID: DcldPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcldPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcldPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcldCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcldCustomXML
   OperationID: DcldCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcldCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcldCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcluCustomListHDCase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcluCustomListHDCase
   OperationID: DcluCustomListHDCase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcluCustomListHDCase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcluCustomListHDCase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcluCustomTagHDCase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcluCustomTagHDCase
   OperationID: DcluCustomTagHDCase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcluCustomTagHDCase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcluCustomTagHDCase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcluCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcluCustomXML
   OperationID: DcluCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcluCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcluCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DcluPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DcluPayload
   OperationID: DcluPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DcluPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DcluPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmCustomListLocationMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmCustomListLocationMtl
   OperationID: DebmCustomListLocationMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmCustomListLocationMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmCustomListLocationMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmCustomTagLocationMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmCustomTagLocationMtl
   OperationID: DebmCustomTagLocationMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmCustomTagLocationMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmCustomTagLocationMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmCustomListLocationWarrantyTran(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmCustomListLocationWarrantyTran
   OperationID: DebmCustomListLocationWarrantyTran
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmCustomListLocationWarrantyTran_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmCustomListLocationWarrantyTran_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmCustomTagLocationWarrantyTran(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmCustomTagLocationWarrantyTran
   OperationID: DebmCustomTagLocationWarrantyTran
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmCustomTagLocationWarrantyTran_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmCustomTagLocationWarrantyTran_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmCustomXML
   OperationID: DebmCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DebmPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DebmPayload
   OperationID: DebmPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DebmPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DebmPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DmauCustomListLocationWarrantyTran(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DmauCustomListLocationWarrantyTran
   OperationID: DmauCustomListLocationWarrantyTran
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DmauCustomListLocationWarrantyTran_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DmauCustomListLocationWarrantyTran_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DmauCustomTagLocationWarrantyTran(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DmauCustomTagLocationWarrantyTran
   OperationID: DmauCustomTagLocationWarrantyTran
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DmauCustomTagLocationWarrantyTran_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DmauCustomTagLocationWarrantyTran_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DmauPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DmauPayload
   OperationID: DmauPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DmauPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DmauPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeidCustomListLocationInventory(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeidCustomListLocationInventory
   OperationID: DeidCustomListLocationInventory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeidCustomListLocationInventory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeidCustomListLocationInventory_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeidCustomTagLocationInventory(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeidCustomTagLocationInventory
   OperationID: DeidCustomTagLocationInventory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeidCustomTagLocationInventory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeidCustomTagLocationInventory_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeidCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeidCustomXML
   OperationID: DeidCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeidCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeidCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeidPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeidPayload
   OperationID: DeidPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeidPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeidPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeiuCustomListLocationInventory(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeiuCustomListLocationInventory
   OperationID: DeiuCustomListLocationInventory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeiuCustomListLocationInventory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeiuCustomListLocationInventory_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeiuCustomTagLocationInventory(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeiuCustomTagLocationInventory
   OperationID: DeiuCustomTagLocationInventory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeiuCustomTagLocationInventory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeiuCustomTagLocationInventory_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeiuCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeiuCustomXML
   OperationID: DeiuCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeiuCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeiuCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeiuPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeiuPayload
   OperationID: DeiuPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeiuPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeiuPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ECCSvcInbound(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ECCSvcInbound
   Description: Generic method to allow for custom inbound request message processing.
   OperationID: ECCSvcInbound
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ECCSvcInbound_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ECCSvcInbound_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ExtendedInbound(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ExtendedInbound
   Description: Generic method to allow for custom inbound request message processing.
   OperationID: ExtendedInbound
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ExtendedInbound_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ExtendedInbound_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ExtendedOutbound(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ExtendedOutbound
   Description: Generic method to allow for custom outbound request message processing.
   OperationID: ExtendedOutbound
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ExtendedOutbound_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ExtendedOutbound_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UDMapIsEnabled(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UDMapIsEnabled
   OperationID: UDMapIsEnabled
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UDMapIsEnabled_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UDMapIsEnabled_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCUIDInvcHeadUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCUIDInvcHeadUD
   Description: Return Invoice header UD data for Invoice Inquiry
   OperationID: GetCUIDInvcHeadUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCUIDInvcHeadUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCUIDInvcHeadUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCuidInvcDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCuidInvcDtlUD
   Description: Return Invoice detail UD data for Invoice inquiry
   OperationID: GetCuidInvcDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCuidInvcDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCuidInvcDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidCustomListInvcDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidCustomListInvcDtl
   OperationID: CuidCustomListInvcDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidCustomListInvcDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidCustomListInvcDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidCustomTagInvcDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidCustomTagInvcDtl
   OperationID: CuidCustomTagInvcDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidCustomTagInvcDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidCustomTagInvcDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidCustomListInvcHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidCustomListInvcHead
   OperationID: CuidCustomListInvcHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidCustomListInvcHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidCustomListInvcHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidCustomTagInvcHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidCustomTagInvcHead
   OperationID: CuidCustomTagInvcHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidCustomTagInvcHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidCustomTagInvcHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidCustomXML
   OperationID: CuidCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuidPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuidPayload
   OperationID: CuidPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuidPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuidPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignCustomerUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignCustomerUD
   Description: Assigns UD columns for customer.
   OperationID: AssignCustomerUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignCustomerUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignCustomerUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCncCustomerUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCncCustomerUD
   Description: Returns all Customer UD data for CNC request.
Note intended to be used by BPM.
   OperationID: GetCncCustomerUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCncCustomerUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCncCustomerUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignShipToUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignShipToUD
   Description: Assigns UD columns for ShipTo.
   OperationID: AssignShipToUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignShipToUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignShipToUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCncShipToUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCncShipToUD
   Description: Returns all ShipTo UD data for CNC request.
Note intended to be used by BPM.
   OperationID: GetCncShipToUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCncShipToUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCncShipToUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CncCustomListCustomer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CncCustomListCustomer
   Description: Process Customer custom list for CNC request and response
   OperationID: CncCustomListCustomer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CncCustomListCustomer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CncCustomListCustomer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CncCustomListShipTo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CncCustomListShipTo
   Description: Process ShipTo custom list for CNC request and response
   OperationID: CncCustomListShipTo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CncCustomListShipTo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CncCustomListShipTo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CncCustomTagCustomer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CncCustomTagCustomer
   Description: Process Customer custom tag for CNC request and response
   OperationID: CncCustomTagCustomer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CncCustomTagCustomer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CncCustomTagCustomer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CncCustomTagShipTo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CncCustomTagShipTo
   Description: Process ShipTo custom tag for CNC request and response
   OperationID: CncCustomTagShipTo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CncCustomTagShipTo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CncCustomTagShipTo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CncPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CncPayload
   Description: Process payload for CNC request and response
   OperationID: CncPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CncPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CncPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCadShipToUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCadShipToUD
   Description: Returns all ShipTo UD data for CAD sync.
Note intended to be used by BPM.
   OperationID: GetCadShipToUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCadShipToUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCadShipToUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CadCustomList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CadCustomList
   OperationID: CadCustomList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CadCustomList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CadCustomList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CadCustomTag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CadCustomTag
   OperationID: CadCustomTag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CadCustomTag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CadCustomTag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CadCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CadCustomXML
   OperationID: CadCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CadCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CadCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CadPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CadPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CadPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CadPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CadPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CadFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CadFinalXml
   OperationID: CadFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CadFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CadFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCucoCustCntUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCucoCustCntUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetCucoCustCntUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCucoCustCntUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCucoCustCntUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CucoCustomList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CucoCustomList
   OperationID: CucoCustomList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CucoCustomList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CucoCustomList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CucoCustomTag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CucoCustomTag
   OperationID: CucoCustomTag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CucoCustomTag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CucoCustomTag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CucoCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CucoCustomXML
   OperationID: CucoCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CucoCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CucoCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CucoPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CucoPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CucoPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CucoPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CucoPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CucoFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CucoFinalXml
   OperationID: CucoFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CucoFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CucoFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCusCustomerUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCusCustomerUD
   Description: Returns all Customer UD data for CUS sync.
Note intended to be used by BPM.
   OperationID: GetCusCustomerUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCusCustomerUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCusCustomerUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CusCustomList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CusCustomList
   OperationID: CusCustomList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CusCustomList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CusCustomList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CusCustomTag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CusCustomTag
   OperationID: CusCustomTag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CusCustomTag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CusCustomTag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CusCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CusCustomXML
   OperationID: CusCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CusCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CusCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CusPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CusPayload
   Description: ECC method used in CNC to allow for custom coding of the payload.  The Customer row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CusPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CusPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CusPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CusFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CusFinalXml
   OperationID: CusFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CusFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CusFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCrrcReasonUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCrrcReasonUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetCrrcReasonUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCrrcReasonUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCrrcReasonUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrcCustomList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrcCustomList
   OperationID: CrrcCustomList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrcCustomList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrcCustomList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrcCustomTag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrcCustomTag
   OperationID: CrrcCustomTag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrcCustomTag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrcCustomTag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrcCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrcCustomXML
   OperationID: CrrcCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrcCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrcCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrcPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrcPayload
   Description: ECC method used in STK upload to allow for custom coding of the payload.  The part row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: CrrcPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrcPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrcPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CrrcFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CrrcFinalXml
   OperationID: CrrcFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CrrcFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CrrcFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSuspVendorUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSuspVendorUD
   Description: Returns all Vendor UD data for SUSP.
Note intended to be used by BPM.
   OperationID: GetSuspVendorUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSuspVendorUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSuspVendorUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuspCustomListVendor(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuspCustomListVendor
   OperationID: SuspCustomListVendor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuspCustomListVendor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuspCustomListVendor_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuspCustomTagVendor(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuspCustomTagVendor
   OperationID: SuspCustomTagVendor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuspCustomTagVendor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuspCustomTagVendor_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuspCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuspCustomXML
   OperationID: SuspCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuspCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuspCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuspPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuspPayload
   Description: ECC method used in SUSP upload to allow for custom coding of the payload.  The vendor row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: SuspPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuspPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuspPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SuspFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SuspFinalXml
   OperationID: SuspFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SuspFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SuspFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSucoVendCntUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSucoVendCntUD
   Description: Returns all VendCnt UD data for SUCO.
Note intended to be used by BPM.
   OperationID: GetSucoVendCntUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSucoVendCntUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSucoVendCntUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SucoCustomListVendCnt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SucoCustomListVendCnt
   OperationID: SucoCustomListVendCnt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SucoCustomListVendCnt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SucoCustomListVendCnt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SucoCustomTagVendCnt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SucoCustomTagVendCnt
   OperationID: SucoCustomTagVendCnt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SucoCustomTagVendCnt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SucoCustomTagVendCnt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SucoCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SucoCustomXML
   OperationID: SucoCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SucoCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SucoCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SucoPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SucoPayload
   Description: ECC method used in SUCO upload to allow for custom coding of the payload.  The vendCnt row will be supplied for reference to help
with the updating of the payLoad string.
   OperationID: SucoPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SucoPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SucoPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SucoFinalXml(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SucoFinalXml
   OperationID: SucoFinalXml
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SucoFinalXml_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SucoFinalXml_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignOrderDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignOrderDtlUD
   Description: Assigns UD columns for order detail.
   OperationID: AssignOrderDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignOrderDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignOrderDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignOrderHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignOrderHedUD
   Description: Assigns payload and UD columns for order head
   OperationID: AssignOrderHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignOrderHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignOrderHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BsvCustomListOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BsvCustomListOrderDtl
   OperationID: BsvCustomListOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BsvCustomListOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BsvCustomListOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BsvCustomListOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BsvCustomListOrderHed
   OperationID: BsvCustomListOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BsvCustomListOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BsvCustomListOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BsvCustomTagOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BsvCustomTagOrderDtl
   OperationID: BsvCustomTagOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BsvCustomTagOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BsvCustomTagOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BsvCustomTagOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BsvCustomTagOrderHed
   OperationID: BsvCustomTagOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BsvCustomTagOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BsvCustomTagOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_BsvPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method BsvPayload
   OperationID: BsvPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BsvPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BsvPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GorCustomListOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GorCustomListOrderDtl
   OperationID: GorCustomListOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GorCustomListOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GorCustomListOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GorCustomListOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GorCustomListOrderHed
   OperationID: GorCustomListOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GorCustomListOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GorCustomListOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GorCustomTagOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GorCustomTagOrderDtl
   OperationID: GorCustomTagOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GorCustomTagOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GorCustomTagOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GorCustomTagOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GorCustomTagOrderHed
   OperationID: GorCustomTagOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GorCustomTagOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GorCustomTagOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GorPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GorPayload
   OperationID: GorPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GorPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GorPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCuodOrderHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCuodOrderHedUD
   Description: Return order header UD data for order inquiry
   OperationID: GetCuodOrderHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCuodOrderHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCuodOrderHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCuodOrderDtlUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCuodOrderDtlUD
   Description: Return order detail UD data for order inquiry
   OperationID: GetCuodOrderDtlUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCuodOrderDtlUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCuodOrderDtlUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodCustomListOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodCustomListOrderDtl
   OperationID: CuodCustomListOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodCustomListOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodCustomListOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodCustomTagOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodCustomTagOrderDtl
   OperationID: CuodCustomTagOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodCustomTagOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodCustomTagOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodCustomListOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodCustomListOrderHed
   OperationID: CuodCustomListOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodCustomListOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodCustomListOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodCustomTagOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodCustomTagOrderHed
   OperationID: CuodCustomTagOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodCustomTagOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodCustomTagOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodCustomXML(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodCustomXML
   OperationID: CuodCustomXML
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodCustomXML_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodCustomXML_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuodPayload(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuodPayload
   OperationID: CuodPayload
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuodPayload_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuodPayload_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCuosOrderHedUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCuosOrderHedUD
   OperationID: GetCuosOrderHedUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCuosOrderHedUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCuosOrderHedUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuosCustomListOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuosCustomListOrderHed
   OperationID: CuosCustomListOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuosCustomListOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuosCustomListOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CuosCustomTagOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CuosCustomTagOrderHed
   OperationID: CuosCustomTagOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CuosCustomTagOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CuosCustomTagOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DdaXmlInbound(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DdaXmlInbound
   Description: DDA inbound message handler to allow for a complete override of ERP DDA message handling.
Custom code responsible for created the XML response.
BPM should not be attached to this method but rather DdaXmlOverride
   OperationID: DdaXmlInbound
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DdaXmlInbound_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DdaXmlInbound_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DdaXmlOverride(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DdaXmlOverride
   Description: Generic method to allow for complete override of ERP DDA message handling.
Custom code responsible for created the XML response.
   OperationID: DdaXmlOverride
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DdaXmlOverride_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DdaXmlOverride_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DdaLineOverride(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DdaLineOverride
   Description: Generic method to allow for override of DDA per line
   OperationID: DdaLineOverride
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DdaLineOverride_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DdaLineOverride_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MsqOverride(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MsqOverride
   Description: Generic method to allow for override of MSQ price per part and quantity
   OperationID: MsqOverride
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MsqOverride_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MsqOverride_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAltPartUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAltPartUD
   Description: Returns all Part UD data for ALT.
Note intended to be used by BPM.
   OperationID: GetAltPartUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAltPartUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAltPartUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAltPartSubsUD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAltPartSubsUD
   Description: Returns all Part UD data for STK.
Note intended to be used by BPM.
   OperationID: GetAltPartSubsUD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAltPartSubsUD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAltPartSubsUD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ECCExtensionSvc/$metadata", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################



#########################################################################
# Custom Schemas:
#########################################################################
class AltCustomListPartSubs_input:
   """ Required : 
   eccExtPartSubs
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPartSubs:list[Erp_Tablesets_ECCExtensionPartSubsTableset] = obj["eccExtPartSubs"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class AltCustomListPartSubs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class AltCustomListPart_input:
   """ Required : 
   eccExtPart
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class AltCustomListPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class AltCustomTagPartSubs_input:
   """ Required : 
   eccExtPartSubs
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPartSubs:list[Erp_Tablesets_ECCExtensionPartSubsTableset] = obj["eccExtPartSubs"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class AltCustomTagPartSubs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class AltCustomTagPart_input:
   """ Required : 
   eccExtPart
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class AltCustomTagPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class AltCustomXML_input:
   """ Required : 
   eccExtPart
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class AltCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class AltFinalXml_input:
   """ Required : 
   eccExtPart
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class AltFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class AltPayload_input:
   """ Required : 
   eccExtPart
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.payLoad:str = obj["payLoad"]
      pass

class AltPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class AssignCustomerUD_input:
   """ Required : 
   eccExtCustomerRow
   reqType
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtCustomerRow:list[Erp_Tablesets_CustomerRow] = obj["eccExtCustomerRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignCustomerUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtCustomerRow:list[Erp_Tablesets_CustomerRow] = obj["eccExtCustomerRow"]
      pass

      """  output parameters  """  

class AssignHDCaseUD_input:
   """ Required : 
   eccExtHDCaseRow
   reqType
   payload
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtHDCaseRow:list[Erp_Tablesets_HDCaseRow] = obj["eccExtHDCaseRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignHDCaseUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtHDCaseRow:list[Erp_Tablesets_HDCaseRow] = obj["eccExtHDCaseRow"]
      pass

      """  output parameters  """  

class AssignLocationInventoryUD_input:
   """ Required : 
   eccExtLocationInventoryRow
   reqType
   payload
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtLocationInventoryRow:list[Erp_Tablesets_LocationInventoryRow] = obj["eccExtLocationInventoryRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignLocationInventoryUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtLocationInventoryRow:list[Erp_Tablesets_LocationInventoryRow] = obj["eccExtLocationInventoryRow"]
      pass

      """  output parameters  """  

class AssignLocationWarrantyTranUD_input:
   """ Required : 
   eccExtLocationWarrantyTranRow
   reqType
   payload
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTranRow:list[Erp_Tablesets_LocationWarrantyTranRow] = obj["eccExtLocationWarrantyTranRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignLocationWarrantyTranUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtLocationWarrantyTranRow:list[Erp_Tablesets_LocationWarrantyTranRow] = obj["eccExtLocationWarrantyTranRow"]
      pass

      """  output parameters  """  

class AssignOrderDtlUD_input:
   """ Required : 
   eccExtOrderDtlRow
   reqType
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtOrderDtlRow:list[Erp_Tablesets_OrderDtlRow] = obj["eccExtOrderDtlRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignOrderDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtOrderDtlRow:list[Erp_Tablesets_OrderDtlRow] = obj["eccExtOrderDtlRow"]
      pass

      """  output parameters  """  

class AssignOrderHedUD_input:
   """ Required : 
   eccExtOrderHedRow
   reqType
   payload
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtOrderHedRow:list[Erp_Tablesets_OrderHedRow] = obj["eccExtOrderHedRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignOrderHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtOrderHedRow:list[Erp_Tablesets_OrderHedRow] = obj["eccExtOrderHedRow"]
      pass

      """  output parameters  """  

class AssignQuoteDtlUD_input:
   """ Required : 
   eccExtQuoteDtlRow
   reqType
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtlRow:list[Erp_Tablesets_QuoteDtlRow] = obj["eccExtQuoteDtlRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignQuoteDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtQuoteDtlRow:list[Erp_Tablesets_QuoteDtlRow] = obj["eccExtQuoteDtlRow"]
      pass

      """  output parameters  """  

class AssignQuoteHedUD_input:
   """ Required : 
   eccExtQuoteHedRow
   reqType
   payload
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtQuoteHedRow:list[Erp_Tablesets_QuoteHedRow] = obj["eccExtQuoteHedRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignQuoteHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtQuoteHedRow:list[Erp_Tablesets_QuoteHedRow] = obj["eccExtQuoteHedRow"]
      pass

      """  output parameters  """  

class AssignRFQHeadUD_input:
   """ Required : 
   eccExtRFQHeadRow
   reqType
   payload
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtRFQHeadRow:list[Erp_Tablesets_RFQHeadRow] = obj["eccExtRFQHeadRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignRFQHeadUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtRFQHeadRow:list[Erp_Tablesets_RFQHeadRow] = obj["eccExtRFQHeadRow"]
      pass

      """  output parameters  """  

class AssignRFQItemUD_input:
   """ Required : 
   eccExtRFQItemRow
   reqType
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtRFQItemRow:list[Erp_Tablesets_RFQItemRow] = obj["eccExtRFQItemRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignRFQItemUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtRFQItemRow:list[Erp_Tablesets_RFQItemRow] = obj["eccExtRFQItemRow"]
      pass

      """  output parameters  """  

class AssignRMADtlUD_input:
   """ Required : 
   eccExtRMADtlRow
   reqType
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtRMADtlRow:list[Erp_Tablesets_RMADtlRow] = obj["eccExtRMADtlRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignRMADtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtRMADtlRow:list[Erp_Tablesets_RMADtlRow] = obj["eccExtRMADtlRow"]
      pass

      """  output parameters  """  

class AssignRMAHeadUD_input:
   """ Required : 
   eccExtRMAHeadRow
   reqType
   payload
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtRMAHeadRow:list[Erp_Tablesets_RMAHeadRow] = obj["eccExtRMAHeadRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignRMAHeadUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtRMAHeadRow:list[Erp_Tablesets_RMAHeadRow] = obj["eccExtRMAHeadRow"]
      pass

      """  output parameters  """  

class AssignShipToUD_input:
   """ Required : 
   eccExtShipToRow
   reqType
   userDefinedSet
   """  
   def __init__(self, obj):
      self.eccExtShipToRow:list[Erp_Tablesets_ShipToRow] = obj["eccExtShipToRow"]
      self.reqType:str = obj["reqType"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

class AssignShipToUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtShipToRow:list[Erp_Tablesets_ShipToRow] = obj["eccExtShipToRow"]
      pass

      """  output parameters  """  

class AssignSugPOChgUD_input:
   """ Required : 
   eccExtSugPOChgRowRow
   reqType
   payload
   userDefinedSet
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtSugPOChgRowRow:list[Erp_Tablesets_SugPOChgRow] = obj["eccExtSugPOChgRowRow"]
      self.reqType:str = obj["reqType"]
      self.payload:str = obj["payload"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributeSet:list[System_Xml_Linq_XElement] = obj["attributeSet"]
      pass

class AssignSugPOChgUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.eccExtSugPOChgRowRow:list[Erp_Tablesets_SugPOChgRow] = obj["eccExtSugPOChgRowRow"]
      pass

      """  output parameters  """  

class BsvCustomListOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class BsvCustomListOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class BsvCustomListOrderHed_input:
   """ Required : 
   eccExtOrderHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class BsvCustomListOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class BsvCustomTagOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class BsvCustomTagOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class BsvCustomTagOrderHed_input:
   """ Required : 
   eccExtOrderHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class BsvCustomTagOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class BsvPayload_input:
   """ Required : 
   eccExtOrderHed
   payload
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.payload:str = obj["payload"]
      pass

class BsvPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class CadCustomList_input:
   """ Required : 
   eccExtShipTo
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CadCustomList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CadCustomTag_input:
   """ Required : 
   eccExtShipTo
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CadCustomTag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CadCustomXML_input:
   """ Required : 
   eccExtShipTo
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CadCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CadFinalXml_input:
   """ Required : 
   eccExtShipTo
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CadFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CadPayload_input:
   """ Required : 
   eccExtShipTo
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.payLoad:str = obj["payLoad"]
      pass

class CadPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CdmCustomListPcECCOrderDtl_input:
   """ Required : 
   eccExtPcECCOrderDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPcECCOrderDtl:list[Erp_Tablesets_ECCExtensionPcECCOrderDtlTableset] = obj["eccExtPcECCOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CdmCustomListPcECCOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CdmCustomListQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CdmCustomListQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CdmCustomTagPcECCOrderDtl_input:
   """ Required : 
   eccExtPcECCOrderDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPcECCOrderDtl:list[Erp_Tablesets_ECCExtensionPcECCOrderDtlTableset] = obj["eccExtPcECCOrderDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CdmCustomTagPcECCOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CdmCustomTagQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CdmCustomTagQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CncCustomListCustomer_input:
   """ Required : 
   isInboundOutbound
   eccExtCustomer
   eccExtList
   """  
   def __init__(self, obj):
      self.isInboundOutbound:str = obj["isInboundOutbound"]
      """  "I" if Inbound CNC request or "O" if Outbound CNC response  """  
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CncCustomListCustomer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CncCustomListShipTo_input:
   """ Required : 
   isInboundOutbound
   eccExtShipTo
   eccExtList
   """  
   def __init__(self, obj):
      self.isInboundOutbound:str = obj["isInboundOutbound"]
      """  "I" if Inbound CNC request or "O" if Outbound CNC response  """  
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CncCustomListShipTo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CncCustomTagCustomer_input:
   """ Required : 
   isInboundOutbound
   eccExtCustomer
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.isInboundOutbound:str = obj["isInboundOutbound"]
      """  "I" if Inbound CNC request or "O" if Outbound CNC response  """  
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CncCustomTagCustomer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CncCustomTagShipTo_input:
   """ Required : 
   isInboundOutbound
   eccExtShipTo
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.isInboundOutbound:str = obj["isInboundOutbound"]
      """  "I" if Inbound CNC request or "O" if Outbound CNC response  """  
      self.eccExtShipTo:list[Erp_Tablesets_ECCExtensionShipToTableset] = obj["eccExtShipTo"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CncCustomTagShipTo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CncPayload_input:
   """ Required : 
   isInboundOutbound
   eccExtCustomer
   payload
   """  
   def __init__(self, obj):
      self.isInboundOutbound:str = obj["isInboundOutbound"]
      """  "I" if Inbound CNC request or "O" if Outbound CNC response  """  
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.payload:str = obj["payload"]
      pass

class CncPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnCustomListCustXPrt_input:
   """ Required : 
   eccExtCustXPrt
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtCustXPrt:list[Erp_Tablesets_ECCExtensionCustXPrtTableset] = obj["eccExtCustXPrt"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CpnCustomListCustXPrt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CpnCustomListPartXRefInt_input:
   """ Required : 
   eccExtPartXRefInt
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPartXRefInt:list[Erp_Tablesets_ECCExtensionPartXRefIntTableset] = obj["eccExtPartXRefInt"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CpnCustomListPartXRefInt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CpnCustomTagCustXPrt_input:
   """ Required : 
   eccExtCustXPrt
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtCustXPrt:list[Erp_Tablesets_ECCExtensionCustXPrtTableset] = obj["eccExtCustXPrt"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CpnCustomTagCustXPrt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnCustomTagPartXRefInt_input:
   """ Required : 
   eccExtPartXRefInt
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPartXRefInt:list[Erp_Tablesets_ECCExtensionPartXRefIntTableset] = obj["eccExtPartXRefInt"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CpnCustomTagPartXRefInt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnCustomXMLCustXPrt_input:
   """ Required : 
   eccExtCustXPrt
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustXPrt:list[Erp_Tablesets_ECCExtensionCustXPrtTableset] = obj["eccExtCustXPrt"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CpnCustomXMLCustXPrt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnCustomXMLPartXRefInt_input:
   """ Required : 
   eccExtPartXRefInt
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPartXRefInt:list[Erp_Tablesets_ECCExtensionPartXRefIntTableset] = obj["eccExtPartXRefInt"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CpnCustomXMLPartXRefInt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnFinalXmlCustXPrt_input:
   """ Required : 
   eccExtCustXPrt
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustXPrt:list[Erp_Tablesets_ECCExtensionCustXPrtTableset] = obj["eccExtCustXPrt"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CpnFinalXmlCustXPrt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnFinalXmlPartXRefInt_input:
   """ Required : 
   eccExtPartXRefInt
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPartXRefInt:list[Erp_Tablesets_ECCExtensionPartXRefIntTableset] = obj["eccExtPartXRefInt"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CpnFinalXmlPartXRefInt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnPayloadCustXPrt_input:
   """ Required : 
   eccExtCustXPrt
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtCustXPrt:list[Erp_Tablesets_ECCExtensionCustXPrtTableset] = obj["eccExtCustXPrt"]
      self.payLoad:str = obj["payLoad"]
      pass

class CpnPayloadCustXPrt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CpnPayloadPartXRefInt_input:
   """ Required : 
   eccExtPartXRefInt
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPartXRefInt:list[Erp_Tablesets_ECCExtensionPartXRefIntTableset] = obj["eccExtPartXRefInt"]
      self.payLoad:str = obj["payLoad"]
      pass

class CpnPayloadPartXRefInt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrqdCustomListQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrqdCustomListQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrqdCustomListQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrqdCustomListQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrqdCustomTagQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrqdCustomTagQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrqdCustomTagQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrqdCustomTagQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrqdCustomXML_input:
   """ Required : 
   eccExtQuoteHed
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrqdCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrqdPayload_input:
   """ Required : 
   eccExtQuoteHed
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.payLoad:str = obj["payLoad"]
      pass

class CrqdPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrquCustomListQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrquCustomListQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrquCustomListQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrquCustomListQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrquCustomTagQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrquCustomTagQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrquCustomTagQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrquCustomTagQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrquCustomXML_input:
   """ Required : 
   eccExtQuoteHed
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrquCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrquPayload_input:
   """ Required : 
   eccExtQuoteHed
   payload
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.payload:str = obj["payload"]
      pass

class CrquPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrcCustomList_input:
   """ Required : 
   eccExtReason
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtReason:list[Erp_Tablesets_ECCExtensionReasonTableset] = obj["eccExtReason"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrrcCustomList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrrcCustomTag_input:
   """ Required : 
   eccExtReason
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtReason:list[Erp_Tablesets_ECCExtensionReasonTableset] = obj["eccExtReason"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrrcCustomTag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrcCustomXML_input:
   """ Required : 
   eccExtReason
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtReason:list[Erp_Tablesets_ECCExtensionReasonTableset] = obj["eccExtReason"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrrcCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrcFinalXml_input:
   """ Required : 
   eccExtReason
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtReason:list[Erp_Tablesets_ECCExtensionReasonTableset] = obj["eccExtReason"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrrcFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrcPayload_input:
   """ Required : 
   eccExtReason
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtReason:list[Erp_Tablesets_ECCExtensionReasonTableset] = obj["eccExtReason"]
      self.payLoad:str = obj["payLoad"]
      pass

class CrrcPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrdCustomListRMADtl_input:
   """ Required : 
   eccExtRMADtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrrdCustomListRMADtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrrdCustomListRMAHead_input:
   """ Required : 
   eccExtRMAHead
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrrdCustomListRMAHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrrdCustomTagRMADtl_input:
   """ Required : 
   eccExtRMADtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrrdCustomTagRMADtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrdCustomTagRMAHead_input:
   """ Required : 
   eccExtRMAHead
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrrdCustomTagRMAHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrdCustomXML_input:
   """ Required : 
   eccExtRMAHead
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrrdCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrrdPayload_input:
   """ Required : 
   eccExtRMAHead
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.payLoad:str = obj["payLoad"]
      pass

class CrrdPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrruCustomListRMADtl_input:
   """ Required : 
   eccExtRMADtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrruCustomListRMADtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrruCustomListRMAHead_input:
   """ Required : 
   eccExtRMAHead
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CrruCustomListRMAHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CrruCustomTagRMADtl_input:
   """ Required : 
   eccExtRMADtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrruCustomTagRMADtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMADtl:list[Erp_Tablesets_ECCExtensionRMADtlTableset] = obj["eccExtRMADtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrruCustomTagRMAHead_input:
   """ Required : 
   eccExtRMAHead
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CrruCustomTagRMAHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrruCustomXML_input:
   """ Required : 
   eccExtRMAHead
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CrruCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CrruPayload_input:
   """ Required : 
   eccExtRMAHead
   payload
   """  
   def __init__(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.payload:str = obj["payload"]
      pass

class CrruPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtRMAHead:list[Erp_Tablesets_ECCExtensionRMAHeadTableset] = obj["eccExtRMAHead"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class CucoCustomList_input:
   """ Required : 
   eccExtCustCnt
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtCustCnt:list[Erp_Tablesets_ECCExtensionCustCntTableset] = obj["eccExtCustCnt"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CucoCustomList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CucoCustomTag_input:
   """ Required : 
   eccExtCustCnt
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtCustCnt:list[Erp_Tablesets_ECCExtensionCustCntTableset] = obj["eccExtCustCnt"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CucoCustomTag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CucoCustomXML_input:
   """ Required : 
   eccExtCustCnt
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustCnt:list[Erp_Tablesets_ECCExtensionCustCntTableset] = obj["eccExtCustCnt"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CucoCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CucoFinalXml_input:
   """ Required : 
   eccExtCustCnt
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustCnt:list[Erp_Tablesets_ECCExtensionCustCntTableset] = obj["eccExtCustCnt"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CucoFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CucoPayload_input:
   """ Required : 
   eccExtCustCnt
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtCustCnt:list[Erp_Tablesets_ECCExtensionCustCntTableset] = obj["eccExtCustCnt"]
      self.payLoad:str = obj["payLoad"]
      pass

class CucoPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuidCustomListInvcDtl_input:
   """ Required : 
   eccExtInvcDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtInvcDtl:list[Erp_Tablesets_ECCExtensionInvcDtlTableset] = obj["eccExtInvcDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CuidCustomListInvcDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CuidCustomListInvcHead_input:
   """ Required : 
   eccExtInvcHead
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtInvcHead:list[Erp_Tablesets_ECCExtensionInvcHeadTableset] = obj["eccExtInvcHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CuidCustomListInvcHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CuidCustomTagInvcDtl_input:
   """ Required : 
   eccExtInvcDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtInvcDtl:list[Erp_Tablesets_ECCExtensionInvcDtlTableset] = obj["eccExtInvcDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CuidCustomTagInvcDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuidCustomTagInvcHead_input:
   """ Required : 
   eccExtInvcHead
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtInvcHead:list[Erp_Tablesets_ECCExtensionInvcHeadTableset] = obj["eccExtInvcHead"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CuidCustomTagInvcHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuidCustomXML_input:
   """ Required : 
   eccExtInvcHead
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtInvcHead:list[Erp_Tablesets_ECCExtensionInvcHeadTableset] = obj["eccExtInvcHead"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CuidCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuidPayload_input:
   """ Required : 
   eccExtInvcHead
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtInvcHead:list[Erp_Tablesets_ECCExtensionInvcHeadTableset] = obj["eccExtInvcHead"]
      self.payLoad:str = obj["payLoad"]
      pass

class CuidPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuodCustomListOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CuodCustomListOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CuodCustomListOrderHed_input:
   """ Required : 
   eccExtOrderHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CuodCustomListOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CuodCustomTagOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CuodCustomTagOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuodCustomTagOrderHed_input:
   """ Required : 
   eccExtOrderHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CuodCustomTagOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuodCustomXML_input:
   """ Required : 
   eccExtOrderHed
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CuodCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuodPayload_input:
   """ Required : 
   eccExtOrderHed
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.payLoad:str = obj["payLoad"]
      pass

class CuodPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class CuosCustomListOrderHed_input:
   """ Required : 
   eccExtOrderHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CuosCustomListOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CuosCustomTagOrderHed_input:
   """ Required : 
   eccExtOrderHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CuosCustomTagOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CusCustomList_input:
   """ Required : 
   eccExtCustomer
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class CusCustomList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class CusCustomTag_input:
   """ Required : 
   eccExtCustomer
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class CusCustomTag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class CusCustomXML_input:
   """ Required : 
   eccExtCustomer
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CusCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CusFinalXml_input:
   """ Required : 
   eccExtCustomer
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class CusFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class CusPayload_input:
   """ Required : 
   eccExtCustomer
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtCustomer:list[Erp_Tablesets_ECCExtensionCustomerTableset] = obj["eccExtCustomer"]
      self.payLoad:str = obj["payLoad"]
      pass

class CusPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcldCustomListHDCase_input:
   """ Required : 
   eccExtHDCase
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DcldCustomListHDCase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DcldCustomTagHDCase_input:
   """ Required : 
   eccExtHDCase
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DcldCustomTagHDCase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcldCustomXML_input:
   """ Required : 
   eccExtHDCase
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class DcldCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcldPayload_input:
   """ Required : 
   eccExtHDCase
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.payLoad:str = obj["payLoad"]
      pass

class DcldPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcluCustomListHDCase_input:
   """ Required : 
   eccExtHDCase
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DcluCustomListHDCase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DcluCustomTagHDCase_input:
   """ Required : 
   eccExtHDCase
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DcluCustomTagHDCase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcluCustomXML_input:
   """ Required : 
   eccExtHDCase
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class DcluCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DcluPayload_input:
   """ Required : 
   eccExtHDCase
   payload
   """  
   def __init__(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.payload:str = obj["payload"]
      pass

class DcluPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtHDCase:list[Erp_Tablesets_ECCExtensionHDCaseTableset] = obj["eccExtHDCase"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class DdaLineOverride_input:
   """ Required : 
   ddaLines
   ddaRounds
   ddaDates
   """  
   def __init__(self, obj):
      self.ddaLines:list[Erp_Tablesets_ECCExtensionDdaLinesTableset] = obj["ddaLines"]
      self.ddaRounds:list[Erp_Tablesets_ECCExtensionDdaRoundsTableset] = obj["ddaRounds"]
      self.ddaDates:list[Erp_Tablesets_ECCExtensionDdaDatesTableset] = obj["ddaDates"]
      pass

class DdaLineOverride_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ddaLineOrverride:bool = obj["ddaLineOrverride"]
      self.ddaRounds:list[Erp_Tablesets_ECCExtensionDdaRoundsTableset] = obj["ddaRounds"]
      self.ddaDates:list[Erp_Tablesets_ECCExtensionDdaDatesTableset] = obj["ddaDates"]
      pass

      """  output parameters  """  

class DdaXmlInbound_input:
   """ Required : 
   requestMsg
   """  
   def __init__(self, obj):
      self.requestMsg:list[System_Xml_Linq_XElement] = obj["requestMsg"]
      pass

class DdaXmlInbound_output:
   def __init__(self, obj):
      self.returnObj:list[System_Xml_Linq_XElement] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      pass

      """  output parameters  """  

class DdaXmlOverride_input:
   """ Required : 
   requestXmlDoc
   """  
   def __init__(self, obj):
      self.requestXmlDoc:str = obj["requestXmlDoc"]
      pass

class DdaXmlOverride_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.responseXmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DebmCustomListLocationMtl_input:
   """ Required : 
   eccExtLocationMtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationMtlTableset] = obj["eccExtLocationMtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DebmCustomListLocationMtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DebmCustomListLocationWarrantyTran_input:
   """ Required : 
   eccExtLocationWarrantyTran
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DebmCustomListLocationWarrantyTran_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DebmCustomTagLocationMtl_input:
   """ Required : 
   eccExtLocationMtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationMtlTableset] = obj["eccExtLocationMtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DebmCustomTagLocationMtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DebmCustomTagLocationWarrantyTran_input:
   """ Required : 
   eccExtLocationWarrantyTran
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DebmCustomTagLocationWarrantyTran_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DebmCustomXML_input:
   """ Required : 
   eccExtLocationInventory
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class DebmCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DebmPayload_input:
   """ Required : 
   eccExtLocationInventory
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.payLoad:str = obj["payLoad"]
      pass

class DebmPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeidCustomListLocationInventory_input:
   """ Required : 
   eccExtLocationInventory
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DeidCustomListLocationInventory_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DeidCustomTagLocationInventory_input:
   """ Required : 
   eccExtLocationInventory
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DeidCustomTagLocationInventory_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeidCustomXML_input:
   """ Required : 
   eccExtLocationInventory
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class DeidCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeidPayload_input:
   """ Required : 
   eccExtLocationInventory
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtLocationInventory:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationInventory"]
      self.payLoad:str = obj["payLoad"]
      pass

class DeidPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeiuCustomListLocationInventory_input:
   """ Required : 
   eccExtLocationMtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DeiuCustomListLocationInventory_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DeiuCustomTagLocationInventory_input:
   """ Required : 
   eccExtLocationMtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DeiuCustomTagLocationInventory_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeiuCustomXML_input:
   """ Required : 
   eccExtLocationMtl
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class DeiuCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeiuPayload_input:
   """ Required : 
   eccExtLocationMtl
   payload
   """  
   def __init__(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.payload:str = obj["payload"]
      pass

class DeiuPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationMtl:list[Erp_Tablesets_ECCExtensionLocationInventoryTableset] = obj["eccExtLocationMtl"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class DmauCustomListLocationWarrantyTran_input:
   """ Required : 
   eccExtLocationWarrantyTran
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class DmauCustomListLocationWarrantyTran_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class DmauCustomTagLocationWarrantyTran_input:
   """ Required : 
   eccExtLocationWarrantyTran
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class DmauCustomTagLocationWarrantyTran_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class DmauPayload_input:
   """ Required : 
   eccExtLocationWarrantyTran
   payload
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.payload:str = obj["payload"]
      pass

class DmauPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtLocationWarrantyTran:list[Erp_Tablesets_ECCExtensionLocationWarrTranTableset] = obj["eccExtLocationWarrantyTran"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class ECCSvcInbound_input:
   """ Required : 
   requestMsg
   """  
   def __init__(self, obj):
      self.requestMsg:list[System_Xml_Linq_XElement] = obj["requestMsg"]
      pass

class ECCSvcInbound_output:
   def __init__(self, obj):
      self.returnObj:list[System_Xml_Linq_XElement] = obj["returnObj"]
      pass

class Erp_Tablesets_CustCntRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CustNum:int = obj["CustNum"]
      """  The Customer.CustNum value of the customer that the contact is related to.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The ShipTo.ShipToNum of the Ship To that the customer  """  
      self.ConNum:int = obj["ConNum"]
      """  A system generated number used to uniquely identify the contact record for the related customer or ship to. When creating new contacts the system reads the last existing contact record for the customer or ship to being processed and then uses its number plus one as the number for the new contact.  """  
      self.Name:str = obj["Name"]
      """  Full name of the contact.  """  
      self.Func:str = obj["Func"]
      """  Used to enter a short description that should indicate what the contacts main function is. Ex: Shipping, Buyer, Engineer. This is an optional field.  """  
      self.FaxNum:str = obj["FaxNum"]
      """  The contact's fax number. When displaying phone numbers of contacts the system will use the phone number found in the Customer or Shipto file if the contact's number is blank.  """  
      self.PhoneNum:str = obj["PhoneNum"]
      """  The contact's business telephone number. When displaying phone numbers of contacts the system will use the phone number found in the Customer or Shipto file if the contacts number is blank.  """  
      self.SpecialAddress:bool = obj["SpecialAddress"]
      """  A logical flag that indicates if this contact has a mailing address different from the one found in the associated Customer master. This flag is only applicable to contacts related to the Customer. That is where CustCnt.ShipToNum = "". During maintenance if this flag is Yes then access is allowed to the Address, City, State, Zip and Country fields. Otherwise those fields are protected. During maintenance when SpecialAddress is toggled to Yes and the address1 field is blank the program defaults all the address fields equal to the customers, thinking that much of it will be the same, saving keying time. When it's toggled to "No", then program sets all the address field to blank.  """  
      self.Address1:str = obj["Address1"]
      """  Line 1 of the contact's mailing address if different from that of the customer. The contacts associated with a customer (not ship to) are allowed to have address, city, state, zip and country fields that are different from that of their associated customer. If not blank, these address fields are printed on the Quote form; otherwise the customer address is used.  """  
      self.Address2:str = obj["Address2"]
      """  Line 2 of the contact's mailing address if different from that of the customer. (See Address1 for additional information).  """  
      self.Address3:str = obj["Address3"]
      """  Line 3 of the contact's mailing address if different from that of the customer. (See Address1 for additional information).  """  
      self.City:str = obj["City"]
      """  The city portion of the contact's mailing address. (See Address1 for additional information).  """  
      self.State:str = obj["State"]
      """  The state or province portion of the contact's mailing address. (See Address1 for additional information).  """  
      self.Zip:str = obj["Zip"]
      """  The zip or postal code portion of the contact's mailing address. (See Address1 for additional information).  """  
      self.Country:str = obj["Country"]
      """  The Country portion of the contact's mailing address. (See Address1 for additional information).  """  
      self.CorpName:str = obj["CorpName"]
      """  The company name of the contact's mailing address. (See Address1 for additional information).  """  
      self.EMailAddress:str = obj["EMailAddress"]
      """  The contact's email address.  """  
      self.CountryNum:int = obj["CountryNum"]
      """  The Country.CountryNum value of the country selected for the contact's mailing address.  """  
      self.SFPortalPassword:str = obj["SFPortalPassword"]
      """  Customer Connect password for this contact.  """  
      self.SFUser:bool = obj["SFUser"]
      """  Indicates if able to create Orders  """  
      self.PortalUser:bool = obj["PortalUser"]
      """  Indicates if "Order History" is functional  """  
      self.RoleCode:str = obj["RoleCode"]
      """  RoleCD.RoleCode value of the role assigned to the contact.  """  
      self.CellPhoneNum:str = obj["CellPhoneNum"]
      """  The contact's cell phone number.  """  
      self.PagerNum:str = obj["PagerNum"]
      """  The contact's pager number.  """  
      self.HomeNum:str = obj["HomeNum"]
      """  The contact's Home number.  """  
      self.AltNum:str = obj["AltNum"]
      """  The contact's alternate phone number.  """  
      self.ContactTitle:str = obj["ContactTitle"]
      """  The contact's title.  """  
      self.ReportsTo:str = obj["ReportsTo"]
      """  The name of the person this contact reports to.  """  
      self.Comment:str = obj["Comment"]
      """  Comments are intended to be internal comments about a specific contact.  """  
      self.NoContact:bool = obj["NoContact"]
      """  Indicates whether or not this contact should be included in marketing lists.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  The date that the contact was entered into the database.  """  
      self.CreateDcdUserID:str = obj["CreateDcdUserID"]
      """  The UserFile.DCDUserID of the user that entered the contact into the database.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  **NOTE cannot find any code that maintains this field.  """  
      self.ChangeDcdUserID:str = obj["ChangeDcdUserID"]
      """  **NOTE cannot find any code that maintains this field.  """  
      self.Inactive:bool = obj["Inactive"]
      """  Determines whether or not this contact can be referenced on a quote, order, packing slip or invoice.  """  
      self.FirstName:str = obj["FirstName"]
      """  Contact's first name.  """  
      self.MiddleName:str = obj["MiddleName"]
      """  Contact's middle name.  """  
      self.LastName:str = obj["LastName"]
      """  Contact's last name.  """  
      self.Prefix:str = obj["Prefix"]
      """  Contact's prefix.  """  
      self.Suffix:str = obj["Suffix"]
      """  Contact's suffix.  """  
      self.Initials:str = obj["Initials"]
      """  Contact's initials.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External ID  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Determines whether or not this record receives global updates  """  
      self.ShowInputPrice:bool = obj["ShowInputPrice"]
      """  If TRUE then the input prices will be shown in the Customer Connect Configuration Review.  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.MasterCustNum:int = obj["MasterCustNum"]
      """  Pertains to Alternate Shipto. Contains the CustNum of the CustCnt record that is the "Master". Changes made to the Master, are replicated to the alternates.  """  
      self.MasterShipToNum:str = obj["MasterShipToNum"]
      """  Pertains to Alternate Shipto. Contains the ShipToNum of the CustCnt record that is the "Master". Changes made to the Master, are replicated to the alternates.  """  
      self.MasterConNum:int = obj["MasterConNum"]
      """  Pertains to Alternate Shipto. Contains the ConNum of the CustCnt record that is the "Master". Changes made to the Master, are replicated to the alternates.  """  
      self.PerConID:int = obj["PerConID"]
      """  Unique identifier for a PerCon record.  """  
      self.SyncNameToPerCon:bool = obj["SyncNameToPerCon"]
      """  Default to True. If unchecked then changes to the Name fields on PerCon won't affect this record and vice versa.  """  
      self.SyncAddressToPerCon:bool = obj["SyncAddressToPerCon"]
      """  Default to True. If unchecked then changes to the Address fields on PerCon won't affect this record and visa versa.  """  
      self.SyncPhoneToPerCon:bool = obj["SyncPhoneToPerCon"]
      """  Default to True. If unchecked then changes to the Phone fields on PerCon won't affect this record and vice versa.  """  
      self.SyncEmailToPerCon:bool = obj["SyncEmailToPerCon"]
      """  Default to True. If unchecked then changes to the email fields on PerCon won't affect this record and vice versa.  """  
      self.SyncLinksToPerCon:bool = obj["SyncLinksToPerCon"]
      """  Default to True. If unchecked then changes to the Web link fields on PerCon won't affect this record and vice versa.  """  
      self.WebSite:str = obj["WebSite"]
      """  Contact's Website.  """  
      self.IM:str = obj["IM"]
      """  Contact's IM.  """  
      self.Twitter:str = obj["Twitter"]
      """  Contact's Twitter.  """  
      self.LinkedIn:str = obj["LinkedIn"]
      """  Contact's LinkedIn.  """  
      self.FaceBook:str = obj["FaceBook"]
      """  Contact's FaceBook.  """  
      self.WebLink1:str = obj["WebLink1"]
      """  User defined Link 1.  """  
      self.WebLink2:str = obj["WebLink2"]
      """  User defined Link 2.  """  
      self.WebLink3:str = obj["WebLink3"]
      """  User defined Link 3.  """  
      self.WebLink4:str = obj["WebLink4"]
      """  User defined Link 4.  """  
      self.WebLink5:str = obj["WebLink5"]
      """  User defined Link 5.  """  
      self.PerConAddress:bool = obj["PerConAddress"]
      """  Indicates if the Person/Contact address should be used as the Special Quoting Address.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  This field defines if the customer contact  is synchronized to an External CRM.  """  
      self.ExternalCRMCustomerID:str = obj["ExternalCRMCustomerID"]
      """  This field holds the id of this customer in the External CRM  """  
      self.ExternalCRMContactID:str = obj["ExternalCRMContactID"]
      """  This field holds the id of this customer contact in the External CRM  """  
      self.RoleDescription:str = obj["RoleDescription"]
      self.PrimaryBilling:bool = obj["PrimaryBilling"]
      """   This check box indicates that this contact is the customer's main billing contact. 
When an AR invoice is created for this customer, this contact's name will automatically appear on the invoice.  """  
      self.PrimaryPurchasing:bool = obj["PrimaryPurchasing"]
      """   This check box indicates that this contact is the customer's main purchasing contact. 
When a quote or sales order is created for this customer, this contact's name will automatically appear on the order or quote.  """  
      self.PrimaryShipping:bool = obj["PrimaryShipping"]
      """   This check box indicates that this contact is the customer's main shipping contact. 
When a packing slip is created for this customer, this contact's name will automatically appear on the slip.  """  
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Contact is global (Master or Linked)  """  
      self.AttrCodeList:str = obj["AttrCodeList"]
      """  delimited list of CustCnAttr codes  """  
      self.GlbLink:str = obj["GlbLink"]
      """  GlbCustCnt fields in a linked list to find the linking record  """  
      self.ContactName:str = obj["ContactName"]
      """  Used for ContactTracker.  This is needed so the UI can relate the Contact Tracker tables together.  """  
      self.PerConName:str = obj["PerConName"]
      self.BitFlag:int = obj["BitFlag"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.MasterCustNumBTName:str = obj["MasterCustNumBTName"]
      self.MasterCustNumName:str = obj["MasterCustNumName"]
      self.MasterCustNumCustID:str = obj["MasterCustNumCustID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_CustXPrtRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  Our Part number used to identify this part.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number of this part cross reference record  """  
      self.XPartNum:str = obj["XPartNum"]
      """  Part Number that the customer uses to identify the Part.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Customers Part Revision Number.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Description Customer uses to describes the Part.  """  
      self.SourceDBRecid:str = obj["SourceDBRecid"]
      """  Recid of this record in the source database.  This is necessary because this table does not have a unique index that can be used to find the record in another database.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.SNOverride:bool = obj["SNOverride"]
      """  Override serial mask settings? SN fields are ignored unless this is true.  """  
      self.GlobalCustXPrt:bool = obj["GlobalCustXPrt"]
      """  Marks this CustXPrt as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.WIApplication:str = obj["WIApplication"]
      """  WIApplication  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EDIContainerType:str = obj["EDIContainerType"]
      """  EDIContainerType  """  
      self.ProductionPartNum:str = obj["ProductionPartNum"]
      """  ProductionPartNum  """  
      self.ProductionPartNumIsValid:bool = obj["ProductionPartNumIsValid"]
      """  ProductionPartNumIsValid  """  
      self.ServicePartNum:str = obj["ServicePartNum"]
      """  ServicePartNum  """  
      self.ServicePartNumIsValid:bool = obj["ServicePartNumIsValid"]
      """  ServicePartNumIsValid  """  
      self.SNPrefixExampleSuffix:str = obj["SNPrefixExampleSuffix"]
      """  Prefix + Example + Suffix  """  
      self.SuffixLength:int = obj["SuffixLength"]
      """  SuffixLength  """  
      self.PrefixLength:int = obj["PrefixLength"]
      """  PrefixLength  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_CustomerRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CustID:str = obj["CustID"]
      """  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to the customer by the system.  """  
      self.CustNum:int = obj["CustNum"]
      """  A  unique integer assigned by the system to new customers by the customer maintenance program.  This field is used as the foreign key to identify the customer in other files such as OrderHed or InvcHead.  The end user should never see this field in the application but can use it for reporting purposes.  """  
      self.Name:str = obj["Name"]
      """  The full name of the customer.  """  
      self.Address1:str = obj["Address1"]
      """  The first line of the customer's main address.  """  
      self.Address2:str = obj["Address2"]
      """  The second line of the customer's main address.  """  
      self.Address3:str = obj["Address3"]
      """  The third line of the customer's main address.  """  
      self.City:str = obj["City"]
      """  The city portion of the customer's main address.  """  
      self.State:str = obj["State"]
      """  The state or province portion of the customer's main address.  """  
      self.Zip:str = obj["Zip"]
      """  The zip or postal code portion of the customer's main address.  """  
      self.Country:str = obj["Country"]
      """  The country of the main customer address.  """  
      self.ResaleID:str = obj["ResaleID"]
      """  Optional field used to record the customer's State Tax Identification number, which is displayed on Sales Acknowledgments.  """  
      self.SalesRepCode:str = obj["SalesRepCode"]
      """  The SalesRep.SalesRepCode of the default salesperson for the customer. This field is used to supply defaults to Order Entry and Invoice entry for invoices that do not reference a sales orders.  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  The SalesTer.TerritoryID value of the territory assigned to the customer.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Contains the key of the default ship to for the customer. A blank value indicates that the name and address in the Customer file is considered the default ship to. This field is updated when the user marks the check box in ship to maintenance indicating that the ship to is to be designated as the default. This default will be used in areas such as Sales Order entry.  """  
      self.TermsCode:str = obj["TermsCode"]
      """   The Terms.TermsCode value of the default sales terms associated with the customer. A default may be supplied by XaSyst.TermsCode if not blank. The terms will default into quotes and orders for this customer.
For invoices not related to a sales order, these terms will also default into the invoice.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Contains the ShipVia.ShipViaCode value of the default ShipVia for the customer.  """  
      self.PrintStatements:bool = obj["PrintStatements"]
      """  Controls whether or not this customer's statement will print when   printing of customer statements.  """  
      self.PrintLabels:bool = obj["PrintLabels"]
      """  Only customers that are PrintLabels = Yes will be selected for printing of mailing labels.  """  
      self.PrintAck:bool = obj["PrintAck"]
      """   Allows the user to establish whether or not a specific customer requires Sales Order Acknowledgements.  This does not force or limit the printing of sales acknowledgments directly from within Order Entry.  Order entry displays this setting to the user so that they know if they should print the acknowledgment.
For batch mode printing, (where ranges of sales orders are selected...future release) this setting will be used to exclude orders from printing.  """  
      self.FinCharges:bool = obj["FinCharges"]
      """  Controls whether or not the customer will be included in the finance charge calculation process.  """  
      self.CreditHold:bool = obj["CreditHold"]
      """  Indicates if customer has been placed into a "Credit Hold" status. A "yes" will trigger notification of this condition in Order Entry and Shipping.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  Contains the CustGrup.GroupCode value of the customer group that the customer has been assigned to. This field is used by the application for sorting or filtering on reports and can also be associated with price lists.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  An optional field used to establish a default purchasing discount percentage for any order placed by customer. This value is supplied to order entry as a default for line item discount percent.  """  
      self.PrimPCon:int = obj["PrimPCon"]
      """  Contains the CustCnt.ConNum value of the Primary Purchasing contact for the customer. This field is not directly maintainable. Instead it is set during contact maintenance by having the user mark a check box indicating primary Purchaser.  This is the contact that is used as a default in Order Entry and Quoting.  """  
      self.PrimBCon:int = obj["PrimBCon"]
      """  The same as the PrimPCon except that this is the Primary Billing Contact and this is used as a default in invoice entry.  """  
      self.PrimSCon:int = obj["PrimSCon"]
      """  Same as PrimPCon except that this the Primary Shipping Contact and is used as a default in Packing Slip entry.  """  
      self.Comment:str = obj["Comment"]
      """   Comments are intended to be internal comments about a specific customer. These do get pulled into other programs. They are mainly intended as an online storage facility.
To be view-as EDITOR widget.  """  
      self.EstDate:str = obj["EstDate"]
      """  The date when the customer was established as a customer. Use the system date as a default when creating new customers.  """  
      self.FaxNum:str = obj["FaxNum"]
      """  The Fax Number for the customer. Optional field. Field is displayed in Order entry when no contact is specifically given or the contact has a blank fax number.  """  
      self.PhoneNum:str = obj["PhoneNum"]
      """  The general Business Phone Number for the customer. Displayed in Order entry when no contact is given or when contact has a blank phone number.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates the reason why the customer is normally exempt from sales tax. Used as a default in invoice entry.  If field is non-blank it is considered exempt.  """  
      self.MarkUpID:str = obj["MarkUpID"]
      """  The QMarkup.MarkupID value of the quote markup table which will be used to provide default markup percents in quote entry for this customer. If left blank the quote module will use the default quote markup table for the customer. (See EQSyst.MarkupID).  """  
      self.BillDay:int = obj["BillDay"]
      """   Represents the day of the week or month that this customer is invoiced on. The possible choices are determined by the Customer.Bill-Frequency field value.

When the Bill-Frequency is "W" (Weeky):
The valid values are 0-7 where 0=All Days,1=Sun,2=Mon,...,7=Sat.  

ll-frequency is 'M' (Monthly) this field contains the 1st -> 31st as possible choices to represent the day of the month to bill on.  """  
      self.OneInvPerPS:bool = obj["OneInvPerPS"]
      """  Determines whether or not packing slips for the same Sales Order and Fiscal Period will combined into a single invoice or not. If the packing slips are for different sales orders for the customer or fall in different fiscal periods, seperate invoices will be created even when this field is set to Yes.  """  
      self.DefaultFOB:str = obj["DefaultFOB"]
      """  Contains the default FOB.FOB value of the FOB policy for this  customers orders.  Default used in sales order entry for this customer.  """  
      self.CreditIncludeOrders:bool = obj["CreditIncludeOrders"]
      """  Determines whether or not Open Sales Orders are to be included in the credit limit checking process for the customer. This checkbox will also include open service contracts.  """  
      self.CreditReviewDate:str = obj["CreditReviewDate"]
      """  Date on which the next credit review should be conducted for the customer.  """  
      self.CreditHoldDate:str = obj["CreditHoldDate"]
      """  Date on which the customer was last placed on credit hold. This field is maintained by the system.  """  
      self.CreditHoldSource:str = obj["CreditHoldSource"]
      """  Indicates how the customer was placed on credit hold.  Valid values are "MANUAL", "INVOICES", "ORDERS", and "CONTRACTS".  "MANUAL" means that the user placed the customer on hold.  INVOICES means that the customer's open A/R balance exceeded the credit limit.  ORDERS means that the sum of the open A/R and the open orders exceeded the credit limit. This field is maintained by the system.  """  
      self.CreditClearUserID:str = obj["CreditClearUserID"]
      """  The UserFile.DCDUSERID value of the user that last cleared the customer's credit hold. This field is maintained by the system.  """  
      self.CreditClearDate:str = obj["CreditClearDate"]
      """  The date that the user last cleared the customer's credit hold. This field is maintained by the system.  """  
      self.CreditClearTime:str = obj["CreditClearTime"]
      """  The time that the user last cleared the customer's credit hold in HH:MM:SS format. This field is maintained by the system.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Contains the Currency.CurrencyCode value of the customer's base currency.  """  
      self.CountryNum:int = obj["CountryNum"]
      """  Contains the Country.CountryNum value of the country the customer is located in.  """  
      self.LangNameID:str = obj["LangNameID"]
      """  Contains the LangName.LangNameID value of the customer's language. This controls which language will be selected when extracting part descriptions from PartLangDesc table and report labels for customer related forms such as orders, packing slips and invoices.  """  
      self.BorderCrossing:str = obj["BorderCrossing"]
      """  Area/City code from where goods cross the border. This field is intended for Intrastat reporting. The field can be blank to indicate the value from the Country table.  This field is only visible if ISSyst.EnableHarbour is set to yes.  """  
      self.FormatStr:str = obj["FormatStr"]
      """  Optional custom address format used to format the customer's main address.  """  
      self.BTName:str = obj["BTName"]
      """  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  """  
      self.BTAddress1:str = obj["BTAddress1"]
      """  The first line of the customer's Bill To address.  """  
      self.BTAddress2:str = obj["BTAddress2"]
      """  The second line of the customer's Bill To address.  """  
      self.BTAddress3:str = obj["BTAddress3"]
      """  The second line of the customer's Bill To address.  """  
      self.BTCity:str = obj["BTCity"]
      """  The city portion of the customer's Bill To address.  """  
      self.BTState:str = obj["BTState"]
      """  The state or province portion of the customer's Bill To address.  """  
      self.BTZip:str = obj["BTZip"]
      """  The zip or postal code portion of the customer's Bill To address.  """  
      self.BTCountryNum:int = obj["BTCountryNum"]
      """  The Country.Countrynum value of the Country portion of the customer's Bill To address.  """  
      self.BTCountry:str = obj["BTCountry"]
      """  Contains the Country.Description value of the Country portion of the customer's Bill To address.  """  
      self.BTPhoneNum:str = obj["BTPhoneNum"]
      """  The phone number related to the customer's Bill To Address.  """  
      self.BTFaxNum:str = obj["BTFaxNum"]
      """  The fax number of the customer's Bill To address.  """  
      self.BTFormatStr:str = obj["BTFormatStr"]
      """  Optional custom address format used to format the customer's Bill To address.  """  
      self.ParentCustNum:int = obj["ParentCustNum"]
      """  The Customer.CustNum value of the customer's parent company.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the customer's tax region for purposes of Sales Tax calculations.  """  
      self.ICCust:bool = obj["ICCust"]
      """  Determines whether or not this customer is an inter-company customer.  """  
      self.ContBillDay:int = obj["ContBillDay"]
      """  The day of the month that service contracts for the customer marked for recurring invoicing are billed on.  If the invoice group's invoice date is greater than or equal to this date then the invoice will be generated.  """  
      self.EMailAddress:str = obj["EMailAddress"]
      """  Default email address for the customer.  """  
      self.ShippingQualifier:str = obj["ShippingQualifier"]
      """  Determines whether or not the customer will accept partial shipments at the line or order level. This functionality is only available with the Advanced Material Management module.  """  
      self.AllocPriorityCode:str = obj["AllocPriorityCode"]
      """  Contains the AllocPri.PriorityCode value of the priority that this customer's orders receive. This functionality is only available with the Advanced Material Management module.  """  
      self.ReservePriorityCode:str = obj["ReservePriorityCode"]
      """  Contains the ReservePri.PriorityCode value of the priority that this customer's orders receive. This functionality is only available with the Advanced Material Management module.  """  
      self.LinkPortNum:int = obj["LinkPortNum"]
      """  Used with Global alerts  """  
      self.WebCustomer:bool = obj["WebCustomer"]
      """  Indicates if this customer will be able to access Customer Connect.  Only Customers with this equal to YES will be synchronized between the Manufacturing System DB and Customer Connect DB.  """  
      self.CustomerType:str = obj["CustomerType"]
      """  Used to define the type of the customer record.  """  
      self.NoContact:bool = obj["NoContact"]
      """  Indicates whether or not this customer will be included in marketing lists.  """  
      self.TerritoryLock:bool = obj["TerritoryLock"]
      """  Determines whether or not the customer's territory can be changed by system processes that could potentially change the territory from its current value.  """  
      self.CustURL:str = obj["CustURL"]
      """  The Customer's website URL.  """  
      self.PendingTerritoryID:str = obj["PendingTerritoryID"]
      """  The pending sales territory that the customer will be assigned to based on changes to the territory boundaries.  This functionality is only available with the CRM module.  """  
      self.ExtID:str = obj["ExtID"]
      """  External Company  ID  """  
      self.ConsolidateSO:bool = obj["ConsolidateSO"]
      """  Determines whether or not shipments to this customer for different sales orders within the same fiscal period wil be consolidated into one invoice. (See Customer.OneInvPerPS - for the shipments from the same sales order are handled).  """  
      self.BillFrequency:str = obj["BillFrequency"]
      """  BillFrequency  """  
      self.CreditIncludePI:bool = obj["CreditIncludePI"]
      """  Indicates that Payment Instruments (bank drafts, post dated checks) are to be included in the credit limit checking.  """  
      self.GlobalCust:bool = obj["GlobalCust"]
      """  Determines whether or not this customer is shared between more than one company.  """  
      self.ICTrader:bool = obj["ICTrader"]
      """  Indicates if this customer participates in the Inter-Company Trading.  """  
      self.TaxAuthorityCode:str = obj["TaxAuthorityCode"]
      """  Establishes the tax authority for this customer.  """  
      self.ExternalDeliveryNote:bool = obj["ExternalDeliveryNote"]
      """  Determines whether or not an external delivery note is required for the customer.  This field is available only when ExtCompany.SendShip is set to Yes.  This will provide the default for the ShipHead record.  """  
      self.GlobalCredIncOrd:bool = obj["GlobalCredIncOrd"]
      """  Determines whether or not Open Orders are to be included in the global credit limit checking process. This checkbox will also include open service contracts.  """  
      self.GlobalCredIncPI:bool = obj["GlobalCredIncPI"]
      """  Indicates whether or not Payment Instruments (bank drafts, post dated checks) are to be included in the credit limit checking process.  """  
      self.GlobalCurrencyCode:str = obj["GlobalCurrencyCode"]
      """  Holds the Currency.CurrencyCode value of that the global customer will exchange data in.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  Customer ID  """  
      self.GlobalCreditHold:str = obj["GlobalCreditHold"]
      """  Determines whether or not the customer has been placed into a "Global Credit Hold" status.  Any non-blank value will trigger notification of this condition in Order Entry and Shipping.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Determines whether or not this customer record will receive global updates.  """  
      self.CheckDuplicatePO:bool = obj["CheckDuplicatePO"]
      """  Determines whether or not the system should check existing orders for this customer to insure that the same PO number is not used twice by the customer.  """  
      self.CreditLimit:int = obj["CreditLimit"]
      """  An optional field that allows user to enter a monetary value to be used as a Credit limit.  A credit limit of zero is considered as having unlimited credit.  """  
      self.CustPILimit:int = obj["CustPILimit"]
      """  An optional field that allows user to enter a monetary value to be used as a credit limit for payment instruments such as post dated checks or bank drafts.  A credit limit of zero is considered as having unlimited credit.  """  
      self.GlobalCreditLimit:int = obj["GlobalCreditLimit"]
      """  An optional field that allows user to enter a monetary value to be used as a Global Credit Limit.  A credit limit of zero is considered as having unlimited credit.  """  
      self.GlobalPILimit:int = obj["GlobalPILimit"]
      """  An optional field that allows user to enter a monetary value to be used as a credit limit for payment instruments such as post dated checks or bank drafts.  A credit limit of zero is considered as having unlimited credit.  """  
      self.DocGlobalCreditLimit:int = obj["DocGlobalCreditLimit"]
      """  An optional field that allows user to enter a monetary value to be used as a Global Credit limit.  Credit limit of zero is considered as having unlimited credit. Stored in Global Currency.  """  
      self.DocGlobalPILimit:int = obj["DocGlobalPILimit"]
      """  An optional field that allows user to enter a monetary value to be used as a Credit limit for payment instruments such as post dated checks or bank drafts.  Credit limit of zero is considered as having unlimited credit. Stored in Global currency  """  
      self.RfqAttachAllow:bool = obj["RfqAttachAllow"]
      """  Indicates whether RFQ Attachments are allowed for this Customer  """  
      self.DiscountQualifier:str = obj["DiscountQualifier"]
      """   The discount qualifier is primarily used when applying order value based discounts to the customer's sales orders.  The value of this field affects the discount percent given to the customer.  Here's the rule:
"MIN" = means that the default order discount percent is the minimum discount the customer could get as compared to the order value based discount.
"MAX" = means that the default order discount percent is the maximum discount the customer could get as compared to the order value based discount.
"ADD" = means that the customer could get the order value based discount in addition to the default order discount.  """  
      self.AllowAltBillTo:bool = obj["AllowAltBillTo"]
      """  Specifies the current customer can be an alternate bill to customer.  """  
      self.DemandDeliveryDays:int = obj["DemandDeliveryDays"]
      """  Days to use in calculating the Order Detail Ship By date from the incoming need by date.  """  
      self.DemandDateType:str = obj["DemandDateType"]
      """   Indicates incoming date type.  Values are:
S - Shipping Date
N - Need By Date  """  
      self.DemandAddLeadTime:int = obj["DemandAddLeadTime"]
      """  The number of days from today to give a warning when adding a new order release record from an incoming shipping schedule.  """  
      self.DemandAddAction:str = obj["DemandAddAction"]
      """  Indicates what type of action to take if the add lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandChangeLeadTime:int = obj["DemandChangeLeadTime"]
      """  The number of days from today to give a warning when changing an order release record from an incoming shipping schedule.  This does not include changes to quantity or dates.  """  
      self.DemandChangeAction:str = obj["DemandChangeAction"]
      """  Indicates what type of action to take if the change lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandCancelLeadTime:int = obj["DemandCancelLeadTime"]
      """  The number of days from today to give a warning when canceling an order release record from an incoming shipping schedule.  """  
      self.DemandCancelAction:str = obj["DemandCancelAction"]
      """  Indicates what type of action to take if the cancel lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandNewLineLeadTime:int = obj["DemandNewLineLeadTime"]
      """  The number of days from today to give a warning when adding a new order line record from an incoming shipping schedule.  """  
      self.DemandNewLineAction:str = obj["DemandNewLineAction"]
      """  Indicates what type of action to take if the new line lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandQtyChangeLeadTime:int = obj["DemandQtyChangeLeadTime"]
      """  The number of days from today to give a warning when changing the quantity on an order release record from an incoming shipping schedule.  """  
      self.DemandQtyChangeAction:str = obj["DemandQtyChangeAction"]
      """  Indicates what type of action to take if the quantity change lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandChangeDateLeadTime:int = obj["DemandChangeDateLeadTime"]
      """  The number of days from today to give a warning when changing the date on an order release record from an incoming shipping schedule.  """  
      self.DemandChangeDateAction:str = obj["DemandChangeDateAction"]
      """  Indicates what type of action to take if the change date lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.TradingPartnerName:str = obj["TradingPartnerName"]
      """  The trading partner name.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.PeriodicityCode:int = obj["PeriodicityCode"]
      """  Periodicity Code.  Must be a valid code in the Periodicity table.  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.EarlyBuffer:int = obj["EarlyBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.LateBuffer:int = obj["LateBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.DemandUnitPriceDiff:bool = obj["DemandUnitPriceDiff"]
      """  Indicates if the unit price between the demand and the contract should be validated.  If this flag is checked, and the prices are different, when the demand is accepted a record will be written to the DemandLog table.  """  
      self.DemandUnitPriceDiffAction:str = obj["DemandUnitPriceDiffAction"]
      """  Indicates what type of action to take if the unit price between the demand and the contract is different.  Options are B (reject the change) or W (warning - alert that the unit price is different but allow the record to be accepted).  """  
      self.ExcFromVal:bool = obj["ExcFromVal"]
      """  A flag that indicates whether this address should be validated by the tax service.  """  
      self.AddressVal:bool = obj["AddressVal"]
      """  A flag indicating that an address has already been validated. This helps improve the performance of the bulk address validation process by allowing address that have already been validated to be skipped. This flag is set anytime a successful validation is performed, either by the bulk address validation or validation from the Customer form.  """  
      self.RebateVendorNum:int = obj["RebateVendorNum"]
      """  This is the Vendor ID to be used when generating a Rebate for the customer  """  
      self.RebateForm:str = obj["RebateForm"]
      """  Indicates if the rebate should be a Check or a Credit Memo  """  
      self.CreditCardOrder:bool = obj["CreditCardOrder"]
      """  Indicates if the order should default as a credit card order.  Can be overriden at the order level.  """  
      self.DemandCheckForPart:bool = obj["DemandCheckForPart"]
      """  Check for the part in the Part master.  """  
      self.DemandCheckForPartAction:str = obj["DemandCheckForPartAction"]
      """  Indicates what type of action to take if the Check for Part options is selected and the part is not in the part master file.  Options are B (reject the change) or W (warning - alert that the part is not in the part master but allow the record to be accepted).  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ChargeCode:str = obj["ChargeCode"]
      """  Unique Identifier for the Finance Charges  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Individual Pack ID'srequired. Used in manifesting.  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  International Shipment flag. Used in manifesting.  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  Certificates of Origin required flag. Used in manifesting.  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Commercial Invoice required flag. Used in manifesting.  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Ship Export Declaration required flag. Used in manifesting.  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  Letter of Instruction required. Used in manifesting.  """  
      self.FFID:str = obj["FFID"]
      """  Freight Forwarder ID.  """  
      self.FFCompName:str = obj["FFCompName"]
      """  Freight Forwarder Company Name  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  Freight Forwarder first address line.  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  Freight Forwarder second address line.  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Freight Forwarder third address line.  """  
      self.FFCity:str = obj["FFCity"]
      """  Freight Forwarder city portion of address.  """  
      self.FFState:str = obj["FFState"]
      """  Freight Forwarder state portion of address.  """  
      self.FFZip:str = obj["FFZip"]
      """  Freight Forwarder postal code or zip code portion of address.  """  
      self.FFCountry:str = obj["FFCountry"]
      """  Freight Forwarder country portion of address.  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder country number portion of address.  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  Freight Forwarder phone Number.  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Non Standard Package flag. Used in manifesting.  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Additional Handling flag. Used in manifesting.  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantum View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View From Name  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantum View Memo  """  
      self.UPSQVEmailType:str = obj["UPSQVEmailType"]
      """  Always equal to Customer.  Used to link the customer table to the UPSQVEmail table.  """  
      self.FFContact:str = obj["FFContact"]
      """  International Shipping. Frieght Forwarder Contact  """  
      self.ETCAddrChg:bool = obj["ETCAddrChg"]
      """  Used to determine if an address changed because of the tax integration.  If true, the tax integration changed the address.  """  
      self.TaxRoundRule:int = obj["TaxRoundRule"]
      """  Define the rule how Tax amount from for sales related documents shall be rounded to the general number of decimals from the Currency:  0 - Use rounding rules from Currency; 1 - Round up; 2 - Round down; 3 - Normal rounding.  Used when Company parameter - Customer specific Tax Rounding is set.  """  
      self.TaxMethod:str = obj["TaxMethod"]
      """  Tax calculation per line or invoice.  It can be "L" = per line or "I" = per invoice.  Default is "L".  """  
      self.ValidPayer:bool = obj["ValidPayer"]
      """  Remit cash receipts in AR. No cash receipts will be accepted from customers without this authorization  """  
      self.ValidSoldTo:bool = obj["ValidSoldTo"]
      """  Sold to customer in the AR Invoice Entry. The user will not be able to enter invoices for customers without this authorization  """  
      self.ValidShipTo:bool = obj["ValidShipTo"]
      """  Receive shipments for orders entered in OE. Unless the user selects this option, the user must enter a Ship-to address in the Order Entry form.  """  
      self.OverrideRlsClass:bool = obj["OverrideRlsClass"]
      """  Children are allowed to pay for their parents  """  
      self.AcrossNatAcc:bool = obj["AcrossNatAcc"]
      """  Accept payments from any customer within the national account, regardless of parent-child status  """  
      self.NAParentCreditIsUsed:bool = obj["NAParentCreditIsUsed"]
      """  allow use Parent Credit in National Account  """  
      self.NACreditIsShare:bool = obj["NACreditIsShare"]
      """  allow/deny to a customer share his own credit with other customers within the National account  """  
      self.NACreditPreferenceList:str = obj["NACreditPreferenceList"]
      """  define what type of credit will be used first when the customer  """  
      self.NAParentCreditPrc:int = obj["NAParentCreditPrc"]
      """  Max Percent of Parent Credit to Use  """  
      self.NACreditSharedPrc:int = obj["NACreditSharedPrc"]
      """  Percentage of the customer credit shared to his Children.  """  
      self.AllowOTS:bool = obj["AllowOTS"]
      """  Indicates if One Time Shipto information can be entered for this customer.  OTS, are entered in Quote, Sales Order, RMA, Service Contract and Service Call. In Shipping and Invoicing the OTS infomation is used.  """  
      self.ThirdPLCust:bool = obj["ThirdPLCust"]
      """  Flag indicating that this is a 3PL customer.  """  
      self.ManagedVendID:str = obj["ManagedVendID"]
      """  VendID of the associated supplier.  Only populated if ManagedCust flag = true.  Entered through Supplier Entry  """  
      self.ManagedVendNum:int = obj["ManagedVendNum"]
      """  VendNum associated with VendID of associated supplier.  Only populated if ManagedCust flag = true.  """  
      self.NARlsClassCode:str = obj["NARlsClassCode"]
      """  Code of Overriden Relationship Class  """  
      self.DirectDebiting:bool = obj["DirectDebiting"]
      """  Direct Debiting flag for use with Promissory Notes.  """  
      self.ReminderCode:str = obj["ReminderCode"]
      """  Unique Identifier for the Reminder Group.  """  
      self.GlbNAParentCreditIsUsed:bool = obj["GlbNAParentCreditIsUsed"]
      """  allow use Global Parent Credit in National Account  """  
      self.GlbNACreditIsShare:bool = obj["GlbNACreditIsShare"]
      """  allow/deny to a customer share his own credit with other customers within the Global National account  """  
      self.GlbNAParentCreditPrc:int = obj["GlbNAParentCreditPrc"]
      """  Max Percent of Global Parent Credit to Use  """  
      self.GlbNACreditSharedPrc:int = obj["GlbNACreditSharedPrc"]
      """  Percentage of the customer credit shared to his Global Children.  """  
      self.AllowShipTo3:bool = obj["AllowShipTo3"]
      """  When yes, a ShipTo CustID on certain forms will be enabled. This allows a shipto of a different customer to be referenced as a 3rd party for a document.  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  The default value used on One Time Ship To panels. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.CustPartOpts:str = obj["CustPartOpts"]
      """   Determines print options for any customer parts related to this customer.

M = Main Part Reference (Default)
S = Secondary Part Reference
O = Only Part Reference Printed
N = Customer Part Not Printed  """  
      self.HasBank:bool = obj["HasBank"]
      """  If yes, indicates that Customer has at least one associated CustBank record.  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.DemandCheckForRev:bool = obj["DemandCheckForRev"]
      """  Check for Revision  """  
      self.OrderHoldForReview:bool = obj["OrderHoldForReview"]
      """  Hold for Review  """  
      self.DemandCheckForRevAction:str = obj["DemandCheckForRevAction"]
      """  Check for Revision Action  """  
      self.ShipToTerrList:str = obj["ShipToTerrList"]
      """  List of all ship to territories for the customer  """  
      self.AcctRefNumber:str = obj["AcctRefNumber"]
      """  The Banking Reference number to be used on AR Invoice sent to the customer  """  
      self.LegalName:str = obj["LegalName"]
      """  Full Legal name  """  
      self.TaxRegReason:str = obj["TaxRegReason"]
      """  Tax Payer Registration Reason Code  """  
      self.InvPerPackLine:bool = obj["InvPerPackLine"]
      """  If this flag it?s turned on then one invoice per packing line will be created when invoicing a packing slip at the ?Get Shipments? action on the AR Invoice entry.  """  
      self.OrgRegCode:str = obj["OrgRegCode"]
      """  Organization Registration Code  """  
      self.DemandCloseRejSkd:bool = obj["DemandCloseRejSkd"]
      """  Define if at the moment of processing a demand the process should also close those rejected schedules that remain at demand entry  """  
      self.OurBankCode:str = obj["OurBankCode"]
      """  Our Bank Code  """  
      self.DemandCloseNoMatch:bool = obj["DemandCloseNoMatch"]
      """  Flag that indicates if the Demand non matched will be closed.  """  
      self.DmdCheckPartialShip:bool = obj["DmdCheckPartialShip"]
      """  Flag to Check Partial Shipments  """  
      self.DmdCheckShipAction:str = obj["DmdCheckShipAction"]
      """  Flag to Check Partial Shipments Action B = Stop W = Warning  """  
      self.DemandCheckCUMM:bool = obj["DemandCheckCUMM"]
      """  Flag to check for cummulative info.  """  
      self.DemandCheckCUMMAction:str = obj["DemandCheckCUMMAction"]
      """  Flag to Check what action should the system take the options are B = Stop and  W Warning  """  
      self.DemandPricing:str = obj["DemandPricing"]
      """  Defines if Internal Pricing or Customer Pricing will be used for checking price differences  """  
      self.PriceTolerance:int = obj["PriceTolerance"]
      """  Defines the tolerance for price difference validations  """  
      self.PreferredBank:str = obj["PreferredBank"]
      """  Preferred bank for cash receipts from sale to customer.  """  
      self.CheckDateCapPromise:bool = obj["CheckDateCapPromise"]
      """  If this flags is turned on then Demand CTP will automatically be executed as a part of the demand to order process.  """  
      self.CheckConfirmCapPromise:bool = obj["CheckConfirmCapPromise"]
      """  Confirm or not the Capable to Promise jobs from Demand Entry  """  
      self.CheckUpdateCapPromise:bool = obj["CheckUpdateCapPromise"]
      """  If checked, Updates the date in Demand Entry  """  
      self.DemandCapPromiseDate:str = obj["DemandCapPromiseDate"]
      """  This field will define the dates that will be validated as a part of the demand to order process. The valid values for this combo will be:  Need By (N), Ship By (S) and Both (B)  """  
      self.DemandCapPromiseAction:str = obj["DemandCapPromiseAction"]
      """  The value on this field will define the action to be taken when validating CTP. The valid values for this combo box will be: Warning (W) and Stop (S)  """  
      self.DemandCapPromiseUpdate:str = obj["DemandCapPromiseUpdate"]
      """   This field will define the dates that will be updated as a part of the demand to order process. The valid options will be:
Need By (N), Ship By (S) and Both  (B) NOTE .-In all the cases above the update of date will only be done if the CTP dates are beyond the dates on the file.  """  
      self.PeriodicBilling:bool = obj["PeriodicBilling"]
      """  Status of the Periodic Billing  """  
      self.DueDateCriteria:str = obj["DueDateCriteria"]
      """  Criteria used for the calculation of the due date. Only enable if Periodic Billing status is active.  """  
      self.PBTerms:int = obj["PBTerms"]
      """  Periodic Billing Terms. A period between the billing or summarizing date and the due date (for example: 30 days, 45 days, 60 days).  """  
      self.ERSOrder:bool = obj["ERSOrder"]
      """  Evaluated Receipt Settlement Order. This flag will be used as a default when the user creates a Demand Entry PO or a Sales Order  """  
      self.DemandSplitSched:bool = obj["DemandSplitSched"]
      """  This checkbox indicates if the Demand schedule could be splited when there are not enough stock for a part, from the CTP.  """  
      self.OTSmartString:bool = obj["OTSmartString"]
      """  When set to TRUE the smart string functionality will only be processed when the incoming demand is new. After it has been processed and saved, if a retransmission is sent the smart string values will be ignored.  """  
      self.DeferredRev:bool = obj["DeferredRev"]
      """  Indicates if revenue is deferred for contracts assigned to this group.  """  
      self.RACode:str = obj["RACode"]
      """  Revenue Amortization Code.  """  
      self.DemandCheckConfig:bool = obj["DemandCheckConfig"]
      """  If true then demand will be rejected when one or more demand lines are not configured properly. Applies only to Configurable parts.  """  
      self.DemandCheckCfgAction:str = obj["DemandCheckCfgAction"]
      """  Indicates the action to be taken if configuration values have not been entered for one or more demand lines.  """  
      self.AllowAsAltRemitTo:bool = obj["AllowAsAltRemitTo"]
      """  AllowAsAltRemitTo  """  
      self.FederalID:str = obj["FederalID"]
      """  FederalID  """  
      self.WIApplication:str = obj["WIApplication"]
      """  WIApplication  """  
      self.WICustomer:str = obj["WICustomer"]
      """  WICustomer  """  
      self.WIShippingCosts:bool = obj["WIShippingCosts"]
      """  WIShippingCosts  """  
      self.LOQBookPCFinishing:bool = obj["LOQBookPCFinishing"]
      """  LOQBookPCFinishing  """  
      self.LOQBookPCPaper:bool = obj["LOQBookPCPaper"]
      """  LOQBookPCPaper  """  
      self.LOQBookPCPress:bool = obj["LOQBookPCPress"]
      """  LOQBookPCPress  """  
      self.LOQBookPCPlates:bool = obj["LOQBookPCPlates"]
      """  LOQBookPCPlates  """  
      self.Variations:bool = obj["Variations"]
      """  Variations  """  
      self.OversPct:int = obj["OversPct"]
      """  OversPct  """  
      self.UndersPct:int = obj["UndersPct"]
      """  UndersPct  """  
      self.DefaultLOQstyle:str = obj["DefaultLOQstyle"]
      """  DefaultLOQstyle  """  
      self.DefaultOrderAcknowledgement:str = obj["DefaultOrderAcknowledgement"]
      """  DefaultOrderAcknowledgement  """  
      self.DefaultPackSlip:str = obj["DefaultPackSlip"]
      """  DefaultPackSlip  """  
      self.DefaultOversPricing:str = obj["DefaultOversPricing"]
      """  DefaultOversPricing  """  
      self.LOQPrepressStyle:str = obj["LOQPrepressStyle"]
      """  LOQPrepressStyle  """  
      self.CSR:str = obj["CSR"]
      """  CSR  """  
      self.LOQBookCaFinishing:bool = obj["LOQBookCaFinishing"]
      """  LOQBookCaFinishing  """  
      self.LOQBookCapaper:bool = obj["LOQBookCapaper"]
      """  LOQBookCapaper  """  
      self.LOQBookCaPress:bool = obj["LOQBookCaPress"]
      """  LOQBookCaPress  """  
      self.LOQBookCatPlates:bool = obj["LOQBookCatPlates"]
      """  LOQBookCatPlates  """  
      self.LOQVariations:bool = obj["LOQVariations"]
      """  LOQVariations  """  
      self.DefaultInvoicestyle:str = obj["DefaultInvoicestyle"]
      """  DefaultInvoicestyle  """  
      self.AEPLOQType:str = obj["AEPLOQType"]
      """  AEPLOQType  """  
      self.BusinessCust:str = obj["BusinessCust"]
      """  BusinessCust  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.THBranchID:str = obj["THBranchID"]
      """  THBranchID  """  
      self.CustPricingSchema:str = obj["CustPricingSchema"]
      """  CustPricingSchema  """  
      self.ParamCode:str = obj["ParamCode"]
      """  ParamCode  """  
      self.AGAFIPResponsibilityCode:str = obj["AGAFIPResponsibilityCode"]
      """  AGAFIPResponsibilityCode  """  
      self.AGBillToProvinceCode:str = obj["AGBillToProvinceCode"]
      """  AGBillToProvinceCode  """  
      self.AGGrossIncomeTaxID:str = obj["AGGrossIncomeTaxID"]
      """  AGGrossIncomeTaxID  """  
      self.AGIDDocTypeCode:str = obj["AGIDDocTypeCode"]
      """  AGIDDocTypeCode  """  
      self.AGIDDocumentNumber:str = obj["AGIDDocumentNumber"]
      """  AGIDDocumentNumber  """  
      self.AGProvinceCode:str = obj["AGProvinceCode"]
      """  AGProvinceCode  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.Collections:bool = obj["Collections"]
      """  In Collections  """  
      self.CollectionsDate:str = obj["CollectionsDate"]
      """  CollectionsDate  """  
      self.DateCollectionPosted:str = obj["DateCollectionPosted"]
      """  Date Collection Posted  """  
      self.MXMunicipio:str = obj["MXMunicipio"]
      """  MXMunicipio  """  
      self.PEIdentityDocType:str = obj["PEIdentityDocType"]
      """  Displays list of Peru Identity Types.  """  
      self.PEDocumentID:str = obj["PEDocumentID"]
      """  Peru Document ID.  """  
      self.PEGoodsContributor:bool = obj["PEGoodsContributor"]
      """  Peru Goods Contributor withholding status.  """  
      self.PEWithholdAgent:bool = obj["PEWithholdAgent"]
      """  Peru Withholding Agent status.  """  
      self.PECollectionAgent:bool = obj["PECollectionAgent"]
      """  Peru Collection Agent withholding status.  """  
      self.PENotFound:bool = obj["PENotFound"]
      """  Peru Not Found withholding status.  """  
      self.PENoAddress:bool = obj["PENoAddress"]
      """  Peru No Address Provided withholding status.  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.InvcOrderCmpDflt:bool = obj["InvcOrderCmpDflt"]
      """  InvcOrderCmpDflt  """  
      self.EInvoice:bool = obj["EInvoice"]
      """  EInvoice  """  
      self.RegistrationCode:str = obj["RegistrationCode"]
      """  RegistrationCode  """  
      self.EAddress:str = obj["EAddress"]
      """  EAddress  """  
      self.DemandCheckForRunOutPart:bool = obj["DemandCheckForRunOutPart"]
      """  Check if the part is a run out part.  """  
      self.DemandCheckForRunOutPartAction:str = obj["DemandCheckForRunOutPartAction"]
      """  Indicates what type of action to take if the Check for Run Out Part option is selected and the part is marked as a run out part.  Options are B (reject the change) or W (warning - alert that the part is marked as run out but allow the record to be accepted).  """  
      self.EInvCompanyIDAttr:str = obj["EInvCompanyIDAttr"]
      """  E-Invoice CompanyID Attribute  """  
      self.INCSTNumber:str = obj["INCSTNumber"]
      """  INCSTNumber  """  
      self.INPANNumber:str = obj["INPANNumber"]
      """  INPANNumber  """  
      self.COOneTimeID:str = obj["COOneTimeID"]
      """  Colombia Loc Field. OneTimeCustVend new table ID  """  
      self.COIsOneTimeCust:bool = obj["COIsOneTimeCust"]
      """  Colombia Loc Field.  """  
      self.DEOrgType:str = obj["DEOrgType"]
      """  DEOrgType  """  
      self.PEGuaranteeName:str = obj["PEGuaranteeName"]
      """  PEGuaranteeName  """  
      self.PEGuaranteeAddress1:str = obj["PEGuaranteeAddress1"]
      """  PEGuaranteeAddress1  """  
      self.PEGuaranteeAddress2:str = obj["PEGuaranteeAddress2"]
      """  PEGuaranteeAddress2  """  
      self.PEGuaranteeAddress3:str = obj["PEGuaranteeAddress3"]
      """  PEGuaranteeAddress3  """  
      self.PEGuaranteeCity:str = obj["PEGuaranteeCity"]
      """  PEGuaranteeCity  """  
      self.PEGuaranteeState:str = obj["PEGuaranteeState"]
      """  PEGuaranteeState  """  
      self.PEGuaranteeZip:str = obj["PEGuaranteeZip"]
      """  PEGuaranteeZip  """  
      self.PEGuaranteeCountry:str = obj["PEGuaranteeCountry"]
      """  PEGuaranteeCountry  """  
      self.PEGuaranteePhoneNum:str = obj["PEGuaranteePhoneNum"]
      """  PEGuaranteePhoneNum  """  
      self.PEGuaranteeTaxID:str = obj["PEGuaranteeTaxID"]
      """  PEGuaranteeTaxID  """  
      self.OurSupplierCode:str = obj["OurSupplierCode"]
      """  Our Supplier Code  """  
      self.ECCType:str = obj["ECCType"]
      """  Type of customer created by ECC.  Valid values are: B=B2b, C=B2C  """  
      self.MYIndustryCode:str = obj["MYIndustryCode"]
      """  MYIndustryCode  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  This field defines if the customer is synchronized to an External CRM. Only enabled if the External CRM integration is on at the Company configuration.  """  
      self.ExternalCRMCustomerID:str = obj["ExternalCRMCustomerID"]
      """  This field holds the id of this customer in the External CRM  """  
      self.ExternalCRMCustomerType:str = obj["ExternalCRMCustomerType"]
      """  This fields holds the customer type of this customer in the External CRM.  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  This field defines the last time that the  Customer  has been Synchronized between Epicor ERP and the External CRM. This field is maintained by the External CRM Synchronization  process.  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  This fields determines if the customer needs to be synchronized to the External CRM. If there are changes in the customer master file , Epicor ERP automatically turns on this field.  """  
      self.Ownership:str = obj["Ownership"]
      """  Ownership of the customer  """  
      self.Industry:str = obj["Industry"]
      """  Industry of the customer  """  
      self.AnnualRevenue:int = obj["AnnualRevenue"]
      """  Annual revenue of the customer  """  
      self.NumberOfEmployees:int = obj["NumberOfEmployees"]
      """  Number of employees of the customer  """  
      self.TickerLocation:str = obj["TickerLocation"]
      """  Location of the ticker of this customer  """  
      self.TickerSymbol:str = obj["TickerSymbol"]
      """  Ticker for the customer  """  
      self.Rating:str = obj["Rating"]
      """  Rating for the customer  """  
      self.TWGUIRegNum:str = obj["TWGUIRegNum"]
      """  TW GUI Code  """  
      self.MXAccountNumber:str = obj["MXAccountNumber"]
      """  MXAccountNumber  """  
      self.ConsolidateLinesPerPart:bool = obj["ConsolidateLinesPerPart"]
      """  Indicates that the shipment lines will be consolidated within the invoice for the same part, the same order, and the same packing slip.  """  
      self.TWTaxPayerType:int = obj["TWTaxPayerType"]
      """  TWTaxPayerType  """  
      self.TWDeductGUIFormatCode:str = obj["TWDeductGUIFormatCode"]
      """  TWDeductGUIFormatCode  """  
      self.MXCURP:str = obj["MXCURP"]
      """  MXCURP  """  
      self.PEAddressID:str = obj["PEAddressID"]
      """  PEAddressID  """  
      self.PEPerceptionRegime:str = obj["PEPerceptionRegime"]
      """  PEPerceptionRegime  """  
      self.TaxEntityType:str = obj["TaxEntityType"]
      """  TaxEntityType  """  
      self.INGSTComplianceRate:int = obj["INGSTComplianceRate"]
      """  GST Compliance Rate field for India  """  
      self.INTaxRegistrationID:str = obj["INTaxRegistrationID"]
      """  INTaxRegistrationID  """  
      self.MXPurchaseType:str = obj["MXPurchaseType"]
      """  MXPurchaseType  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the customer has to be synchronized with Epicor FSA application.  """  
      self.MXGeneralPublic:bool = obj["MXGeneralPublic"]
      """  MXGeneralPublic  """  
      self.AgingCreditHold:bool = obj["AgingCreditHold"]
      """  Indicates if customer has been placed into an "Aging Hold" status. A "yes" will trigger notification of this condition in Order Entry and Shipping.  """  
      self.AgingCreditHoldDate:str = obj["AgingCreditHoldDate"]
      """  Date on which the customer was last placed on aging hold. This field is maintained by the system.  """  
      self.AgingCreditHoldSource:str = obj["AgingCreditHoldSource"]
      """  Indicates how the customer was placed on aging hold.  Valid values are "MANUAL" and "PROCESS".  "MANUAL" means that the user placed the customer on hold.  “PROCESS” means that the Mass Credit Information Update Process places the customer on aging hold.  This field is maintained by the system.  """  
      self.AgingCreditClearUserID:str = obj["AgingCreditClearUserID"]
      """  The UserFile.DCDUSERID value of the user that last cleared the customer's aging hold. This field is maintained by the system.  """  
      self.AgingCreditClearDate:str = obj["AgingCreditClearDate"]
      """  The date that the user last cleared the customer's aging hold. This field is maintained by the system.  """  
      self.AgingCreditCode:str = obj["AgingCreditCode"]
      """  The aging code assigned to the customer.  """  
      self.ImporterOfRecord:bool = obj["ImporterOfRecord"]
      """  Indicates whether this customer is importer of records or not. Used for Avalara Tax Connect calculation.  """  
      self.SEC:str = obj["SEC"]
      """  Standard Entry Class Code  """  
      self.EInvEndpointIDAttr:str = obj["EInvEndpointIDAttr"]
      """  E-Invoice EndpointID Attribute  """  
      self.UseBlindShipping:bool = obj["UseBlindShipping"]
      """  Indicates whether sales orders from this sold to customer should be treated as Blind Shipments by Manifest.  """  
      self.ELIEinvoice:bool = obj["ELIEinvoice"]
      """  ELIEinvoice  """  
      self.ELIDefReportID:str = obj["ELIDefReportID"]
      """  ELIDefReportID  """  
      self.ELIDefStyleNum:int = obj["ELIDefStyleNum"]
      """  ELIDefStyleNum  """  
      self.ELIDefToMail:str = obj["ELIDefToMail"]
      """  ELIDefToMail  """  
      self.ELIDefCCMail:str = obj["ELIDefCCMail"]
      """  ELIDefCCMail  """  
      self.ELIDefMailTempID:str = obj["ELIDefMailTempID"]
      """  ELIDefMailTempID  """  
      self.ELISendMail:bool = obj["ELISendMail"]
      """  ELISendMail  """  
      self.COFiscalResp1:str = obj["COFiscalResp1"]
      """  COFiscalResp1  """  
      self.COFiscalResp2:str = obj["COFiscalResp2"]
      """  COFiscalResp2  """  
      self.COFiscalResp3:str = obj["COFiscalResp3"]
      """  COFiscalResp3  """  
      self.COOperType:str = obj["COOperType"]
      """  COOperType  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Customer is for Central Collection.  """  
      self.NettingVendorNum:int = obj["NettingVendorNum"]
      """  NettingVendorNum  """  
      self.EORINumber:str = obj["EORINumber"]
      """  EORI Number  """  
      self.AGIsElectronicCreditInvEligible:bool = obj["AGIsElectronicCreditInvEligible"]
      """  AGIsElectronicCreditInvEligible  """  
      self.TaxValidationStatus:int = obj["TaxValidationStatus"]
      """  Tax ID Validation Status. Not Validated – 0, Valid – 1, Invalid – 2.  """  
      self.TaxValidationDate:str = obj["TaxValidationDate"]
      """  Tax Validation Date  """  
      self.HMRCTaxValidationLog:str = obj["HMRCTaxValidationLog"]
      """  HMRCTaxValidationLog  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the record is inactive.  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  Customer Scheme ID  """  
      self.ELIOperatorCode:str = obj["ELIOperatorCode"]
      """  EInvoice Operator Code  """  
      self.ELISendingOption:int = obj["ELISendingOption"]
      """  Sending Option  """  
      self.ELIOperatorID:str = obj["ELIOperatorID"]
      """  EInvoice Operator ID  """  
      self.EInvExternalID:str = obj["EInvExternalID"]
      """  EInvExternalID  """  
      self.MXTaxRegime:str = obj["MXTaxRegime"]
      """  Tax Regime  """  
      self.ExclusionMonth:int = obj["ExclusionMonth"]
      """  ExclusionMonth  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMRegionCode:str = obj["FSMRegionCode"]
      """  FSMRegionCode  """  
      self.FSMArea:str = obj["FSMArea"]
      """  FSMArea  """  
      self.ELIRcptDefStyleNum:int = obj["ELIRcptDefStyleNum"]
      """  Default E-invoice Report Style  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.ACATCommCare:bool = obj["ACATCommCare"]
      self.ACATRespCareType:str = obj["ACATRespCareType"]
      self.ACATRespCareTypeDesc:str = obj["ACATRespCareTypeDesc"]
      self.AddrList:str = obj["AddrList"]
      """  Customer Address in format delimited string  """  
      self.AdvancedLaborRate:bool = obj["AdvancedLaborRate"]
      """  This value is a temp field that is populated from JCSyst.AdvancedLaborRate  """  
      self.ApplyHoldToOrders:bool = obj["ApplyHoldToOrders"]
      """  Apply credit hold status to orders  """  
      self.AttrCodeList:str = obj["AttrCodeList"]
      """  delimited list of customer attributes  """  
      self.BaseCurrCode:str = obj["BaseCurrCode"]
      """  Company base currency.  """  
      self.BillDayDesc:str = obj["BillDayDesc"]
      self.BillFreqDescription:str = obj["BillFreqDescription"]
      self.BTAddrList:str = obj["BTAddrList"]
      """  Bill To Address in format delimited list  """  
      self.BusinessCatList:str = obj["BusinessCatList"]
      """  Delimited list of Business Categories  """  
      self.ChargeCodeDesc:str = obj["ChargeCodeDesc"]
      """  ChargeCode Description  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.COOperTypeDesc:str = obj["COOperTypeDesc"]
      self.CustTypeDescription:str = obj["CustTypeDescription"]
      self.DiscQualDescription:str = obj["DiscQualDescription"]
      self.DspBTFormatStr:str = obj["DspBTFormatStr"]
      self.DspFormatStr:str = obj["DspFormatStr"]
      """  Display Format String  """  
      self.DspRlsClass:str = obj["DspRlsClass"]
      self.ECCPaymentCodes:str = obj["ECCPaymentCodes"]
      """  List of available ECC Payment Method codes  """  
      self.ECCPaymentDesc:str = obj["ECCPaymentDesc"]
      """  List of available ECC Payment Method descriptions  """  
      self.ECCPaymentList:str = obj["ECCPaymentList"]
      """  List of ECC Payment Method codes selected  """  
      self.ECCPaymentXDesc:str = obj["ECCPaymentXDesc"]
      """  List of ECC Payment Method descriptions selected  """  
      self.ECCShipViaList:str = obj["ECCShipViaList"]
      """  List of ECC Ship Via codes selected  """  
      self.EnableGlobalCust:bool = obj["EnableGlobalCust"]
      self.EnableGlobalLock:bool = obj["EnableGlobalLock"]
      self.ExtCoExist:bool = obj["ExtCoExist"]
      """  Indicates if an "Multi" External Company record exists to enable GlobalCust  """  
      self.FxdGlbOrdCredit:int = obj["FxdGlbOrdCredit"]
      self.FxdGlbPICredit:int = obj["FxdGlbPICredit"]
      self.FxdOrderCredit:int = obj["FxdOrderCredit"]
      self.FxdPICredit:int = obj["FxdPICredit"]
      self.FxdTotOrders:int = obj["FxdTotOrders"]
      self.FxdTotPI:int = obj["FxdTotPI"]
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Customer is Global (master or linked)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany and GlbCustNum that is linking to this customer  """  
      self.GlbNAChildCrdAvail:int = obj["GlbNAChildCrdAvail"]
      """  Global Shared Credit Available  """  
      self.GlbNAOwnCreditAvail:int = obj["GlbNAOwnCreditAvail"]
      """  Global Own Credit Available  """  
      self.GlbNAOwnCreditUsedDsp:int = obj["GlbNAOwnCreditUsedDsp"]
      self.GlbNAParentCrdAvail:int = obj["GlbNAParentCrdAvail"]
      """  Global Parents Credit Available  """  
      self.GlbNAParentsCreditUsedDsp:int = obj["GlbNAParentsCreditUsedDsp"]
      self.GlbNAPoolCrdAvail:int = obj["GlbNAPoolCrdAvail"]
      self.GlbNAPoolCreditUsed:int = obj["GlbNAPoolCreditUsed"]
      self.GlbNASharedCreditUsedDsp:int = obj["GlbNASharedCreditUsedDsp"]
      self.IntegrationFlag:bool = obj["IntegrationFlag"]
      """  Indicates if integrated with a financial package  """  
      self.IntRunChangeCountry:bool = obj["IntRunChangeCountry"]
      """  Flag used for integrations whether to run the on change country logic.  """  
      self.ListCode:str = obj["ListCode"]
      """  Identifies the default price list for the customer.  Must be unique and present in PriceLst table.  """  
      self.LLLBAnnualHomeCap:int = obj["LLLBAnnualHomeCap"]
      self.LLLBAnnualPartPenCap:int = obj["LLLBAnnualPartPenCap"]
      self.LLLBAnnualResiCap:int = obj["LLLBAnnualResiCap"]
      self.LLLBAnnualSelfFndCap:int = obj["LLLBAnnualSelfFndCap"]
      self.LLLBAsAtDate:str = obj["LLLBAsAtDate"]
      self.LLLBAssetAssess:bool = obj["LLLBAssetAssess"]
      """  Indicates if the Clients Asset and Income Assessment has been received  """  
      self.LLLBLifeTimeCap:int = obj["LLLBLifeTimeCap"]
      self.LLLBMeansTestAmt:int = obj["LLLBMeansTestAmt"]
      self.LLLBMeansTestFeeAmt:int = obj["LLLBMeansTestFeeAmt"]
      self.LLLBPrevEntryDate:str = obj["LLLBPrevEntryDate"]
      self.NAChildCrdAvail:int = obj["NAChildCrdAvail"]
      """  Customer?s credit available to be shared with his Children in National Account  """  
      self.NACreditCust:bool = obj["NACreditCust"]
      """  If the customer in the Credit Checking National Account  """  
      self.NACreditUpdated:bool = obj["NACreditUpdated"]
      """  Customer is in Credit National Account and his Credit data have been updated, so recalculation is needed  """  
      self.NAOwnCreditAvail:int = obj["NAOwnCreditAvail"]
      """  Own Credit Available  """  
      self.NAOwnCreditUsedDsp:int = obj["NAOwnCreditUsedDsp"]
      self.NAParentCrdAvail:int = obj["NAParentCrdAvail"]
      """  Available Parent?s Credit in National Accout  """  
      self.NAParentsCreditUsedDsp:int = obj["NAParentsCreditUsedDsp"]
      self.NAPoolCrdAvail:int = obj["NAPoolCrdAvail"]
      """  Available credit from credit pools to be used by this customer in National account.  """  
      self.NAPoolCreditUsed:int = obj["NAPoolCreditUsed"]
      self.NASharedCreditUsedDsp:int = obj["NASharedCreditUsedDsp"]
      self.NATotalCreditAvail:int = obj["NATotalCreditAvail"]
      """  Total Credit Available from National Account  """  
      self.NATotalCreditUsed:int = obj["NATotalCreditUsed"]
      """  Total Credit Used from National Account  """  
      self.NettingVendorID:str = obj["NettingVendorID"]
      """  A user defined external Netting Vendor ID.  This must be existing Vendor ID within the file.  """  
      self.ParentCustID:str = obj["ParentCustID"]
      """  CustID of Parent Customer  """  
      self.ParentName:str = obj["ParentName"]
      """  Name of Parent Customer  """  
      self.PeriodicityDesc:str = obj["PeriodicityDesc"]
      self.PeriodicityList:str = obj["PeriodicityList"]
      """  List of available Periodicity values.  """  
      self.PIFlag:bool = obj["PIFlag"]
      """  Indicates whether PI fields should be enabled or not  """  
      self.ReminderGroupDesc:str = obj["ReminderGroupDesc"]
      """  Reminder Group Description  """  
      self.SalesTaxID:str = obj["SalesTaxID"]
      """  Sales Tax ID  """  
      self.SearchIDs:str = obj["SearchIDs"]
      """  Automated Bank Reconciliation: Search IDs.  """  
      self.SendShipment:bool = obj["SendShipment"]
      """  flag indicating whether packing slips are sent to integration partner  """  
      self.ServiceTaxID:str = obj["ServiceTaxID"]
      """  Service Tax ID  """  
      self.ShippingQualifierDesc:str = obj["ShippingQualifierDesc"]
      self.TotGlbInvoiceCredit:int = obj["TotGlbInvoiceCredit"]
      """  Total Global Invoice Credit (including current company)  """  
      self.TotGlbOpenCredit:int = obj["TotGlbOpenCredit"]
      """  Total Global Open Credit (based on GlbCredInc flags)  """  
      self.TotGlbOrderCredit:int = obj["TotGlbOrderCredit"]
      """  Total Global Order Credit (including current company)  """  
      self.TotGlbPICredit:int = obj["TotGlbPICredit"]
      """  Total Global Payment Instruments Credit (including current company)  """  
      self.TotInvoiceCredit:int = obj["TotInvoiceCredit"]
      self.TotLCCredit:int = obj["TotLCCredit"]
      self.TotLCCumInvoices:int = obj["TotLCCumInvoices"]
      self.TotLCInvoiceBal:int = obj["TotLCInvoiceBal"]
      self.TotLCOpenOrders:int = obj["TotLCOpenOrders"]
      self.TotLCUsed:int = obj["TotLCUsed"]
      self.TotOpenCredit:int = obj["TotOpenCredit"]
      """  Total Credit based on CredInc flags  """  
      self.TotOpenInvoices:int = obj["TotOpenInvoices"]
      """  Total number of open invoices  """  
      self.TotOpenInvoicesLC:int = obj["TotOpenInvoicesLC"]
      """  Total number of open invoices for LCs  """  
      self.TotOpenLC:int = obj["TotOpenLC"]
      """  Total number of open LCs  """  
      self.TotOpenOrderLC:int = obj["TotOpenOrderLC"]
      """  Total number of open orders for LCs  """  
      self.TotOpenOrders:int = obj["TotOpenOrders"]
      """  Total number of open orders  """  
      self.TotOpenPI:int = obj["TotOpenPI"]
      """  Total number of open Payment Instruments  """  
      self.TotOrderCredit:int = obj["TotOrderCredit"]
      self.TotPICredit:int = obj["TotPICredit"]
      self.ACATOtherCare:bool = obj["ACATOtherCare"]
      self.LanguageDescription:str = obj["LanguageDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.AGAFIPResponsibilityDescription:str = obj["AGAFIPResponsibilityDescription"]
      self.AGBillToProvinceDescription:str = obj["AGBillToProvinceDescription"]
      self.AGIDDocTypeCUITMark:bool = obj["AGIDDocTypeCUITMark"]
      self.AGIDDocTypeDescription:str = obj["AGIDDocTypeDescription"]
      self.AgingCreditDescription:str = obj["AgingCreditDescription"]
      self.AGProvinceDescription:str = obj["AGProvinceDescription"]
      self.BTCountryISOCode:str = obj["BTCountryISOCode"]
      self.BTCountryEUMember:bool = obj["BTCountryEUMember"]
      self.CompanySendToFSA:bool = obj["CompanySendToFSA"]
      self.CountryISOCode:str = obj["CountryISOCode"]
      self.CountryFormatStr:str = obj["CountryFormatStr"]
      self.CountryEUMember:bool = obj["CountryEUMember"]
      self.CurrencyCurrName:str = obj["CurrencyCurrName"]
      self.CurrencyCurrencyID:str = obj["CurrencyCurrencyID"]
      self.CurrencyCurrSymbol:str = obj["CurrencyCurrSymbol"]
      self.CurrencyCurrDesc:str = obj["CurrencyCurrDesc"]
      self.CurrencyDocumentDesc:str = obj["CurrencyDocumentDesc"]
      self.CustGrupGroupDesc:str = obj["CustGrupGroupDesc"]
      self.DeliveryTypeDescription:str = obj["DeliveryTypeDescription"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.GlobalCurrencyCurrSymbol:str = obj["GlobalCurrencyCurrSymbol"]
      self.GlobalCurrencyCurrDesc:str = obj["GlobalCurrencyCurrDesc"]
      self.GlobalCurrencyDocumentDesc:str = obj["GlobalCurrencyDocumentDesc"]
      self.GlobalCurrencyCurrencyID:str = obj["GlobalCurrencyCurrencyID"]
      self.GlobalCurrencyCurrName:str = obj["GlobalCurrencyCurrName"]
      self.MarkUpDescription:str = obj["MarkUpDescription"]
      self.MXPurchaseTypeCodeDesc:str = obj["MXPurchaseTypeCodeDesc"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.PreferredBankBankName:str = obj["PreferredBankBankName"]
      self.PreferredBankDescription:str = obj["PreferredBankDescription"]
      self.RASchedCdRADesc:str = obj["RASchedCdRADesc"]
      self.ReservePriDescription:str = obj["ReservePriDescription"]
      self.SalesRepName:str = obj["SalesRepName"]
      self.ShipViaWebDesc:str = obj["ShipViaWebDesc"]
      self.ShipViaDescription:str = obj["ShipViaDescription"]
      self.TATaxAuthorityDescription:str = obj["TATaxAuthorityDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TermsDescription:str = obj["TermsDescription"]
      self.TerritoryTerritoryDesc:str = obj["TerritoryTerritoryDesc"]
      self.XbSystELIEinvoice:bool = obj["XbSystELIEinvoice"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ECCExtensionCustCntTableset:
   def __init__(self, obj):
      self.CustCnt:list[Erp_Tablesets_CustCntRow] = obj["CustCnt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionCustXPrtTableset:
   def __init__(self, obj):
      self.CustXPrt:list[Erp_Tablesets_CustXPrtRow] = obj["CustXPrt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionCustomerTableset:
   def __init__(self, obj):
      self.Customer:list[Erp_Tablesets_CustomerRow] = obj["Customer"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionDdaDatesRow:
   def __init__(self, obj):
      self.DeliveryDate:str = obj["DeliveryDate"]
      """  Next available delivery date  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ECCExtensionDdaDatesTableset:
   def __init__(self, obj):
      self.ECCExtensionDdaDates:list[Erp_Tablesets_ECCExtensionDdaDatesRow] = obj["ECCExtensionDdaDates"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionDdaLinesRow:
   def __init__(self, obj):
      self.Address1:str = obj["Address1"]
      self.Address2:str = obj["Address2"]
      self.Address3:str = obj["Address3"]
      self.City:str = obj["City"]
      self.ContactName:str = obj["ContactName"]
      self.Country:str = obj["Country"]
      self.CustNum:int = obj["CustNum"]
      self.Name:str = obj["Name"]
      self.PartNum:str = obj["PartNum"]
      self.Plant:str = obj["Plant"]
      self.SellingQuantity:int = obj["SellingQuantity"]
      self.ShipToNum:str = obj["ShipToNum"]
      self.State:str = obj["State"]
      self.WareHouseCode:str = obj["WareHouseCode"]
      self.Zip:str = obj["Zip"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ECCExtensionDdaLinesTableset:
   def __init__(self, obj):
      self.ECCExtensionDdaLines:list[Erp_Tablesets_ECCExtensionDdaLinesRow] = obj["ECCExtensionDdaLines"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionDdaRoundsRow:
   def __init__(self, obj):
      self.DayOfWeek:int = obj["DayOfWeek"]
      """  Interger value representing Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday  """  
      self.Frequency:str = obj["Frequency"]
      """  Daily, Weekly, Fortnightly or an integer indicating the number of weeks.  """  
      self.NextDeliveryDate:str = obj["NextDeliveryDate"]
      """  Next Delivery Date  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ECCExtensionDdaRoundsTableset:
   def __init__(self, obj):
      self.ECCExtensionDdaRounds:list[Erp_Tablesets_ECCExtensionDdaRoundsRow] = obj["ECCExtensionDdaRounds"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionHDCaseTableset:
   def __init__(self, obj):
      self.HDCase:list[Erp_Tablesets_HDCaseRow] = obj["HDCase"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionInvcDtlTableset:
   def __init__(self, obj):
      self.InvcDtl:list[Erp_Tablesets_InvcDtlRow] = obj["InvcDtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionInvcHeadTableset:
   def __init__(self, obj):
      self.InvcHead:list[Erp_Tablesets_InvcHeadRow] = obj["InvcHead"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionLocationInventoryTableset:
   def __init__(self, obj):
      self.LocationInventory:list[Erp_Tablesets_LocationInventoryRow] = obj["LocationInventory"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionLocationMtlTableset:
   def __init__(self, obj):
      self.LocationMtl:list[Erp_Tablesets_LocationMtlRow] = obj["LocationMtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionLocationWarrTranTableset:
   def __init__(self, obj):
      self.LocationWarrantyTran:list[Erp_Tablesets_LocationWarrantyTranRow] = obj["LocationWarrantyTran"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionOrderDtlTableset:
   def __init__(self, obj):
      self.OrderDtl:list[Erp_Tablesets_OrderDtlRow] = obj["OrderDtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionOrderHedTableset:
   def __init__(self, obj):
      self.OrderHed:list[Erp_Tablesets_OrderHedRow] = obj["OrderHed"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPODetailTableset:
   def __init__(self, obj):
      self.PODetail:list[Erp_Tablesets_PODetailRow] = obj["PODetail"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPOHeaderTableset:
   def __init__(self, obj):
      self.POHeader:list[Erp_Tablesets_POHeaderRow] = obj["POHeader"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPartSubsTableset:
   def __init__(self, obj):
      self.PartSubs:list[Erp_Tablesets_PartSubsRow] = obj["PartSubs"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPartTableset:
   def __init__(self, obj):
      self.Part:list[Erp_Tablesets_PartRow] = obj["Part"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPartUOMTableset:
   def __init__(self, obj):
      self.PartUOM:list[Erp_Tablesets_PartUOMRow] = obj["PartUOM"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPartXRefIntTableset:
   def __init__(self, obj):
      self.PartXRefInt:list[Erp_Tablesets_PartXRefIntRow] = obj["PartXRefInt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionPcECCOrderDtlTableset:
   def __init__(self, obj):
      self.PcECCOrderDtl:list[Erp_Tablesets_PcECCOrderDtlRow] = obj["PcECCOrderDtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionProdGrupTableset:
   def __init__(self, obj):
      self.ProdGrup:list[Erp_Tablesets_ProdGrupRow] = obj["ProdGrup"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionQuoteDtlTableset:
   def __init__(self, obj):
      self.QuoteDtl:list[Erp_Tablesets_QuoteDtlRow] = obj["QuoteDtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionQuoteHedTableset:
   def __init__(self, obj):
      self.QuoteHed:list[Erp_Tablesets_QuoteHedRow] = obj["QuoteHed"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionRFQHeadTableset:
   def __init__(self, obj):
      self.RFQHead:list[Erp_Tablesets_RFQHeadRow] = obj["RFQHead"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionRFQItemTableset:
   def __init__(self, obj):
      self.RFQItem:list[Erp_Tablesets_RFQItemRow] = obj["RFQItem"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionRMADtlTableset:
   def __init__(self, obj):
      self.RMADtl:list[Erp_Tablesets_RMADtlRow] = obj["RMADtl"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionRMAHeadTableset:
   def __init__(self, obj):
      self.RMAHead:list[Erp_Tablesets_RMAHeadRow] = obj["RMAHead"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionReasonTableset:
   def __init__(self, obj):
      self.Reason:list[Erp_Tablesets_ReasonRow] = obj["Reason"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionRow:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      """  Column name of custom column.  """  
      self.ColumnValue:str = obj["ColumnValue"]
      """  Value for custom column  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ECCExtensionShipToTableset:
   def __init__(self, obj):
      self.ShipTo:list[Erp_Tablesets_ShipToRow] = obj["ShipTo"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionSugPOChgTableset:
   def __init__(self, obj):
      self.SugPOChg:list[Erp_Tablesets_SugPOChgRow] = obj["SugPOChg"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionTableset:
   def __init__(self, obj):
      self.ECCExtension:list[Erp_Tablesets_ECCExtensionRow] = obj["ECCExtension"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionVendCntTableset:
   def __init__(self, obj):
      self.VendCnt:list[Erp_Tablesets_VendCntRow] = obj["VendCnt"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ECCExtensionVendorTableset:
   def __init__(self, obj):
      self.Vendor:list[Erp_Tablesets_VendorRow] = obj["Vendor"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_HDCaseRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  A unique help desk case number.  This number is system generated when the help desk case is created.  """  
      self.CustNum:int = obj["CustNum"]
      """  The customer associated with this case.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The customer ship-to associate with the Help Desk case.  This is used with the ShpConNum to reference a contact in the CustCont table.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Customer contact number.  This is used with the ShipToNum to reference a contact in the CustCont table.  """  
      self.ParentCase:int = obj["ParentCase"]
      """  The parent Help Desk case number of this case.  """  
      self.Description:str = obj["Description"]
      """  The description of the case issue.  """  
      self.ResolutionText:str = obj["ResolutionText"]
      """  A description if the resolution for the case.  """  
      self.PublishedText:str = obj["PublishedText"]
      """  Publishable text of the issue and resolution of the case.  """  
      self.PublishedSummary:str = obj["PublishedSummary"]
      """  A summary of the issue/resolution of the help desk case.  """  
      self.KBEntry:bool = obj["KBEntry"]
      """  If true this is a Knowledge Base entry.  """  
      self.PublishedItem:bool = obj["PublishedItem"]
      """  If true this item can be published.  If false this item is for internal use only.  """  
      self.PartNum:str = obj["PartNum"]
      """  The part that is associated with this Help Desk case.  The part is in the Part table.  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  An serial number associated with the Help Desk case.  The serial number is in the SerialNo table.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  The Quote associated with the Help Desk case.  The Quote is in the QuoteHed table.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  The order associated with the Help Desk case.  The order is in the OrderHed table.  """  
      self.CallNum:int = obj["CallNum"]
      """  A Field Service call that is associated with the Help Desk case.  The field service call is in the FSCallHd table.  """  
      self.ContractNum:int = obj["ContractNum"]
      """  A Service Contract associated with the Help Desk case.  The service contract is in the FSContHd table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  The warranty associated with the Help Desk case.  The warranty is in the FSWarrCd table.  """  
      self.Priority:int = obj["Priority"]
      """  The priority of the Help Desk case  """  
      self.TaskSetID:str = obj["TaskSetID"]
      """  Unique identifier of the task set.  """  
      self.CurrentWFStageID:str = obj["CurrentWFStageID"]
      """  The identifier of the workflow stage.  """  
      self.ActiveTaskID:str = obj["ActiveTaskID"]
      """  The Currently active milestone task  """  
      self.LastTaskID:str = obj["LastTaskID"]
      """  The Last Complete Milestone task  """  
      self.CaseOwner:str = obj["CaseOwner"]
      """  The SalesRepCode of the owner of the Help Desk case.  The people are stored in the SalesRep table.  """  
      self.WFGroupID:str = obj["WFGroupID"]
      """  The identifier of the workflow group  """  
      self.WFComplete:bool = obj["WFComplete"]
      """  This indicates if the workflow for this case is complete.  """  
      self.CreatedDate:str = obj["CreatedDate"]
      """  Date which this Help Desk case was created.  Not maintainable by the user.  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  UserID who created the Help Desk case.  Not maintainable by the user.  """  
      self.CreatedTime:int = obj["CreatedTime"]
      """  The time (in milliseconds) that the Help Desk case was created.  """  
      self.LastUpdatedBy:str = obj["LastUpdatedBy"]
      """  UserID who last updated the Help Desk case.  Not maintainable by the user.  """  
      self.LastUpdatedDate:str = obj["LastUpdatedDate"]
      """  Date which this Help Desk case was last updated.  Not maintainable by the user.  """  
      self.LastUpdatedTime:int = obj["LastUpdatedTime"]
      """  The time (in milliseconds) that the Help Desk case was last updated.  Not maintainable by the user.  """  
      self.TopicID1:str = obj["TopicID1"]
      """  A unique identifier for the Help Desk Topic.  This is a top level topic (no parents).  """  
      self.TopicID2:str = obj["TopicID2"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID1.  """  
      self.TopicID3:str = obj["TopicID3"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID2.  """  
      self.TopicID4:str = obj["TopicID4"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID3.  """  
      self.TopicID5:str = obj["TopicID5"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID4.  """  
      self.TopicID6:str = obj["TopicID6"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID5.  """  
      self.TopicID7:str = obj["TopicID7"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID6.  """  
      self.TopicID8:str = obj["TopicID8"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID7.  """  
      self.TopicID9:str = obj["TopicID9"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID8.  """  
      self.TopicID10:str = obj["TopicID10"]
      """  A unique identifier for the Help Desk Topic.  This is a child to TopicID9.  """  
      self.CaseTopics:str = obj["CaseTopics"]
      """  This is the combination of TopicID1 - TopicID10.  This is system maintained and provides a single word-indexed field for searching.  """  
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  Link to the Marketing Campaign related to this Help Desk case.  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """  Link to the marketing event associated with this Help Desk case.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.Quantity:int = obj["Quantity"]
      """  A general quantity field.  """  
      self.QuantityUOM:str = obj["QuantityUOM"]
      """   Unit of Measure which qualifies the HDCase.Quantity.
Mandatory. Must be a valid UOM.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The order release number.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  The quote line number  """  
      self.CallLine:int = obj["CallLine"]
      """  Field service call line number  """  
      self.RMANum:int = obj["RMANum"]
      """  The RMA Number.  """  
      self.RMALine:int = obj["RMALine"]
      """  The RMA line number.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  The invoice line.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMPCON as the default.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Customer Name  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this Service call is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  The packing slip line that holds the warranty information for this service call  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.CompletedBy:str = obj["CompletedBy"]
      """  Case Completed By  """  
      self.CompletionDate:str = obj["CompletionDate"]
      """  Case Completion Date  """  
      self.CompletionTime:int = obj["CompletionTime"]
      """  Case Completion Time  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  The drop shipment packing slip number that this Service call is linked with  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  The drop shipment packing slip line that holds the warranty information for this service call  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Supplier number of the drop shipment and part of the primary key of a drop shipment line.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The supplier purchase point id of the drop shipment and part of the primary key of a drop shipment line.  """  
      self.EquipID:str = obj["EquipID"]
      """  Related Equip.EquipID.  """  
      self.EmpID:str = obj["EmpID"]
      """  Unique identifier of the primary Employee contact.  """  
      self.BuyerID:str = obj["BuyerID"]
      """  Unique identifier of the primary Buyer contact.  """  
      self.VendorNumCon:int = obj["VendorNumCon"]
      """  Unique identifier of the Primary Vendor contact.  """  
      self.PurPointCon:str = obj["PurPointCon"]
      """  Unique identifier of the Primary Vendor PP contact.  """  
      self.VenConNum:int = obj["VenConNum"]
      """  Unique identifier of the Primary Vendor contact num.  """  
      self.PurPointConNum:int = obj["PurPointConNum"]
      """  Contact number.  Unique identifier for the Primary Purchase Point contact record.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Unit price for the PartNum.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  Same as UnitPrice except that this field contains the unit price in the case currency.  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Unit Price in Report currency 1.  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Unit Price in Report currency 2.  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Unit Price in Report currency 3.  """  
      self.ExtPrice:int = obj["ExtPrice"]
      """  Extended price. Calculated as Quantity * (UnitPrice / PFactor).  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Same as ExtPrice except that this field contains the extended price in the case currency.  """  
      self.Rp1ExtPrice:int = obj["Rp1ExtPrice"]
      """  Extended Price in Report currency 1.  """  
      self.Rp2ExtPrice:int = obj["Rp2ExtPrice"]
      """  Extended Price in Report currency 2.  """  
      self.Rp3ExtPrice:int = obj["Rp3ExtPrice"]
      """  Extended Price in Report currency 3.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Rate Type Code  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """  Exchange rate that will be used for this role code entry.  """  
      self.CaseTypeID:str = obj["CaseTypeID"]
      """  Unique identifier of the case type.  """  
      self.PONum:int = obj["PONum"]
      """  This field will mainly be used when a part is found to be faulty and the purchase order and receipt that were used for the part need to be recorded  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  Link to the territory ID.  """  
      self.POLine:int = obj["POLine"]
      """  This field will mainly be used when a part is found to be faulty and the purchase order and receipt that were used for the part need to be recorded  """  
      self.WorkflowType:str = obj["WorkflowType"]
      """  The type of workflow.  """  
      self.POPackSlip:str = obj["POPackSlip"]
      """  This field will mainly be used when a part is found to be faulty and the purchase order and receipt that were used for the part need to be recorded  """  
      self.POPackLine:int = obj["POPackLine"]
      """  This field will mainly be used when a part is found to be faulty and the purchase order and receipt that were used for the part need to be recorded  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.HDCaseStatus:str = obj["HDCaseStatus"]
      """  HDCaseStatus  """  
      self.ReqPerConID:int = obj["ReqPerConID"]
      """  ReqPerConID  """  
      self.PerConID:int = obj["PerConID"]
      """  PerConID  """  
      self.WebCase:bool = obj["WebCase"]
      """  Case was initiated from the web  """  
      self.WebComment:str = obj["WebComment"]
      """  Comment used for discussion through web  """  
      self.IDNum:str = obj["IDNum"]
      """  Identification Number of related Location Inventory record.  """  
      self.LocationNum:int = obj["LocationNum"]
      """  Unique ID Num of related Location Inventory record.  """  
      self.ContractLine:int = obj["ContractLine"]
      """  Field service contract line number. The service contract line is in the FSContDt table.  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMCurrentStatus:str = obj["FSMCurrentStatus"]
      """  FSMCurrentStatus  """  
      self.FSMServiceReportID:str = obj["FSMServiceReportID"]
      """  FSMServiceReportID  """  
      self.FSMNumberOfFollowups:int = obj["FSMNumberOfFollowups"]
      """  FSMNumberOfFollowups  """  
      self.FSMReceivedBy:str = obj["FSMReceivedBy"]
      """  FSMReceivedBy  """  
      self.FSMOriginalScheduleDate:str = obj["FSMOriginalScheduleDate"]
      """  FSMOriginalScheduleDate  """  
      self.FSMCompletedDate:str = obj["FSMCompletedDate"]
      """  FSMCompletedDate  """  
      self.AllowMilestoneUpdate:bool = obj["AllowMilestoneUpdate"]
      """  If true the MilestoneSeq field can be modified  """  
      self.AttrCodeList:str = obj["AttrCodeList"]
      """  Case attribute code list  """  
      self.AvailablePrcConNum:str = obj["AvailablePrcConNum"]
      """  Available PrcConNum values  """  
      self.AvailablePurPointConNum:str = obj["AvailablePurPointConNum"]
      """  Available AvailablePurPointConNum values  """  
      self.AvailableShpConNum:str = obj["AvailableShpConNum"]
      """  Available ShpConNum values  """  
      self.AvailableTaskSets:str = obj["AvailableTaskSets"]
      """  a delimited list of Task Sets that can be selected in the TaskSetId field  """  
      self.AvailableVenConNum:str = obj["AvailableVenConNum"]
      """  Available AvailableVenConNum values  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CaseCode:str = obj["CaseCode"]
      """  Code of the event. Selected from predefined list of codes.  """  
      self.CaseStatus:str = obj["CaseStatus"]
      """  Indicates the current status of the case.  """  
      self.ChildCases:str = obj["ChildCases"]
      """  List of children linked to the case. Case numbers are separated by commas.  """  
      self.CurrentMilestone:int = obj["CurrentMilestone"]
      """  The current milestone in tasks  """  
      self.CurrentMilestoneDesc:str = obj["CurrentMilestoneDesc"]
      """  Description of current milestone.  """  
      self.CustCntCorpName:str = obj["CustCntCorpName"]
      self.CustCntEMail:str = obj["CustCntEMail"]
      self.CustCntFaxNum:str = obj["CustCntFaxNum"]
      self.CustCntFirstName:str = obj["CustCntFirstName"]
      self.CustCntLastName:str = obj["CustCntLastName"]
      self.CustCntMiddleName:str = obj["CustCntMiddleName"]
      self.CustCntName:str = obj["CustCntName"]
      self.CustCntPhoneNum:str = obj["CustCntPhoneNum"]
      self.CustomerRequiresPO:bool = obj["CustomerRequiresPO"]
      """  If true the customer requires a unique PO on Sales Orders  """  
      self.DispCreateTime:str = obj["DispCreateTime"]
      """  String version of the creation time  """  
      self.DispLastUpdateTime:str = obj["DispLastUpdateTime"]
      """  String version of the last update time  """  
      self.DropShip:bool = obj["DropShip"]
      self.EvaluationStatus:str = obj["EvaluationStatus"]
      """  Evaluation status of the event. Possible values are user defined.  """  
      self.EvaluationStatusDesc:str = obj["EvaluationStatusDesc"]
      """  Description of Evaluation Status  """  
      self.HDCaseNumString:str = obj["HDCaseNumString"]
      """  String version of HDCaseNum (used for relationships)  """  
      self.Inactive:bool = obj["Inactive"]
      self.IssueSummary:str = obj["IssueSummary"]
      """  Short summary if the issue  """  
      self.IssueText:str = obj["IssueText"]
      """  Long issue description  """  
      self.NextReviewDate:str = obj["NextReviewDate"]
      """  Date of the next review.  """  
      self.PartSalesUM:str = obj["PartSalesUM"]
      """  The SalesUM of the part  """  
      self.PPCntEmailAddress:str = obj["PPCntEmailAddress"]
      self.PPCntFaxNum:str = obj["PPCntFaxNum"]
      self.PPCntName:str = obj["PPCntName"]
      self.PPCntPhoneNum:str = obj["PPCntPhoneNum"]
      self.PricePerCode:str = obj["PricePerCode"]
      self.PurPointConName:str = obj["PurPointConName"]
      self.ReqContextLink:str = obj["ReqContextLink"]
      """  Requestor Context Link  """  
      self.ReqPerConLnkID1:str = obj["ReqPerConLnkID1"]
      """  Holds the first ID for the linked record.  """  
      self.ReqPerConLnkID2:str = obj["ReqPerConLnkID2"]
      """  Holds the second ID for the linked record. Used with compound key records like ShipTo or PurPoint.  """  
      self.ReqPerConLnkName:str = obj["ReqPerConLnkName"]
      """  The display name for the link.  """  
      self.ReqPerConLnkRowID:str = obj["ReqPerConLnkRowID"]
      """  The SysRowId of the linked PerConLnk.  """  
      self.ReqPerConName:str = obj["ReqPerConName"]
      """  Requestor PerCon Name  """  
      self.ReqPrimary:bool = obj["ReqPrimary"]
      """  Requestor is primary contact.  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Extended Price in Report currency 1.  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Extended Price in Report currency 2.  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Extended Price in Report currency 3.  """  
      self.ShipCntCorpName:str = obj["ShipCntCorpName"]
      self.ShipCntEMail:str = obj["ShipCntEMail"]
      self.ShipCntFaxNum:str = obj["ShipCntFaxNum"]
      self.ShipCntFirstName:str = obj["ShipCntFirstName"]
      self.ShipCntLastName:str = obj["ShipCntLastName"]
      self.ShipCntMiddleName:str = obj["ShipCntMiddleName"]
      self.ShipCntName:str = obj["ShipCntName"]
      self.ShipCntPhoneNum:str = obj["ShipCntPhoneNum"]
      self.ShipToCustID:str = obj["ShipToCustID"]
      """  Customer Id of the third-party Ship To  """  
      self.ShipToNumName:str = obj["ShipToNumName"]
      self.TargetUOM:str = obj["TargetUOM"]
      """  TargetUOM  """  
      self.TaskCompletePasswordIsValid:bool = obj["TaskCompletePasswordIsValid"]
      """  A flag to indicate the user password was validated  """  
      self.TaskCompletePasswordRequired:bool = obj["TaskCompletePasswordRequired"]
      """  Indicates if a the user password should be validated to complete a task  """  
      self.VendCntEmailAddress:str = obj["VendCntEmailAddress"]
      self.VendCntFaxNum:str = obj["VendCntFaxNum"]
      self.VendCntName:str = obj["VendCntName"]
      self.VendCntPhoneNum:str = obj["VendCntPhoneNum"]
      self.WebQuoteNum:int = obj["WebQuoteNum"]
      """  The Quote Num that created a case number from the web  """  
      self.AvailableMilestones:str = obj["AvailableMilestones"]
      """  The available next milestones for the MilestoneSeq.  """  
      self.FSMCurrentStatusDesc:str = obj["FSMCurrentStatusDesc"]
      """  Translated description of current FSM status for FSM related cases  """  
      self.BitFlag:int = obj["BitFlag"]
      self.ActiveTaskIDTaskDescription:str = obj["ActiveTaskIDTaskDescription"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.CaseOwnerName:str = obj["CaseOwnerName"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumAllowShipTo3:bool = obj["CustNumAllowShipTo3"]
      self.DropShipDtlLineDesc:str = obj["DropShipDtlLineDesc"]
      self.EmpIDName:str = obj["EmpIDName"]
      self.EquipIDDescription:str = obj["EquipIDDescription"]
      self.LastTaskIDTaskDescription:str = obj["LastTaskIDTaskDescription"]
      self.LocationInventoryLotNum:str = obj["LocationInventoryLotNum"]
      self.LocationInventorySerialNumber:str = obj["LocationInventorySerialNumber"]
      self.LocationInventoryIDNum:str = obj["LocationInventoryIDNum"]
      self.MktgCampaignIDCampDescription:str = obj["MktgCampaignIDCampDescription"]
      self.MktgEventEvntDescription:str = obj["MktgEventEvntDescription"]
      self.PackLineLineDesc:str = obj["PackLineLineDesc"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.ShipToCustNumName:str = obj["ShipToCustNumName"]
      self.ShipToCustNumCustID:str = obj["ShipToCustNumCustID"]
      self.TaskSetIDWorkflowType:str = obj["TaskSetIDWorkflowType"]
      self.TaskSetIDTaskSetDescription:str = obj["TaskSetIDTaskSetDescription"]
      self.TerritoryIDTerritoryDesc:str = obj["TerritoryIDTerritoryDesc"]
      self.VendorNumConVendorID:str = obj["VendorNumConVendorID"]
      self.VendorNumConName:str = obj["VendorNumConName"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.WFGroupIDDescription:str = obj["WFGroupIDDescription"]
      self.WFStageIDDescription:str = obj["WFStageIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT" and line for service calls  "CALL".  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different Part number than the internal part number.  This field is defaulted from the OrderDtl or ShipDtl files.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision.  Default from the ShipDtl.XRevisionNum for shipment lines or from OrderDtl.XRevisionNum, otherwise left blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number used to identify line item part.  This would be used as "Our" part number if there is a difference between us and the customers part numbering scheme.  Defaults from the OrderDtl.PartNum or the ShipDtl.PartNum.  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Description of the line item.  Defaults from ShipDtl.LineDesc, OrderDtl.LineDesc or Part.PartDescription.  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure.  Defaulted from ShipDtl.IUM, OrderRel.IUM or Part.IUM.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Our Current Revision Number for this Part.  """  
      self.POLine:str = obj["POLine"]
      """  Contains the line reference of the item on the customers PO. This is for reference and printing purposes.  Defaults from the OrderDtl.POLine.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this customer is exempt from sales tax for this line item.  If field is non-blank it is considered exempt.  This code is totally user definable and no validation is required.  This field will be printed on the Tax report if this item is reportable.  When the value is changed from blank to non-blank or vice versa tax calculation logic kicks in to calculate the sales tax info in the InvcTax file.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record.  Defaults from the OrderDtl if related to an Order or from the Part Master.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """   Indicates if this line is commissionable for the related sales rep's.
Defaults from the OrderDtl.  Note: "Deposit" invoice is always No.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """   Unit price discount percent.  User can enter a percentage and the system calculates the  discount amount.
NOT MAINTAINABLE & zero if Advance Bill.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """   Indicates the pricing per quantity.  It can be "E" = per each,
"C" = per hundred,  "M" = per thousand.  Used to calculate the extended unit price for the line item.  The logic is to divide the InvcDtl.ShipQty by the appropriate "per" value and then multiply by unit price.  Use the OrderDtl.PricePerCode as default if referenced to an order else use Part.PricePerCode as a default.  If Part record does not exist then default as "E".  """  
      self.OurOrderQty:int = obj["OurOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.OurReqQty.  """  
      self.ExtPrice:int = obj["ExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.Discount:int = obj["Discount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Contains the foreign key to the ProdGrup file.  Can be blank or must be valid.  Defaults from the OrderDtl or Part file.  """  
      self.OurShipQty:int = obj["OurShipQty"]
      """  Our Quantity Shipped/billed.  Can be defaulted from ShipDtl.OurShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this detail record is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  The packing slip line number that is being invoiced.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order number.  This is not maintainable by the user.  The system duplicates it from the InvcHead.OrderNum.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  The associated sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Contains the release number of the order line item that is being invoiced.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Customer Ship To ID for the item.  Defaults from the Customer, OrderRel or ShipDtl records.  If invoice details reference only one ship to then the ship to info is printed as heading info. otherwise a "See Below" message is printed and the Ship To info is printed as part of the invoice detail body.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  Ship date of the invoice line item.  Defaults from the ShipHead or from the invoice date when not referencing a packing slip.  When printed on the invoice it is printed as part of the heading if only one date exists else it is printed as part of the detail line.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  ShipVia for the invoice detail lines.  Contains the Foreign key to the SHIPVIA master file. Can be left blank or must be valid.  Default from the OrderRel, ShipHead, Customer or ShipTo.  If invoice contains only a single ship via then it is printed as part of the heading; otherwise, it prints as part of the line item detail.  """  
      self.AdvanceBillCredit:int = obj["AdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.DocAdvanceBillCredit:int = obj["DocAdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal number that is used to link the invoice to the Customer master file.  This is not maintainable, it is duplicated from the InvcHead.CustNum field.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to enter comments about the invoice line item.  These are printed on the invoice.  When invoice is referenced to a sales order line then this is defaulted from OrderDtl.InvoiceComment.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Contains the key value for the shipping contact in the CUSTCNT table.  Can be blank or must be valid in the CUSTCNT table.  Use the Customer.PrimSCon as a default or from OrderRel record.  """  
      self.MtlUnitCost:int = obj["MtlUnitCost"]
      """  Material Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.LbrUnitCost:int = obj["LbrUnitCost"]
      """  Labor Unit Cost. The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.BurUnitCost:int = obj["BurUnitCost"]
      """  Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.SubUnitCost:int = obj["SubUnitCost"]
      """  Subcontract Unit Cost.  If shipped from inventory then it is zero. (Subcontract cost is combined with material cost on part master) The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.MtlBurUnitCost:int = obj["MtlBurUnitCost"]
      """  Material Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.COSPostingReqd:bool = obj["COSPostingReqd"]
      """  Answers the question, "Does this InvcDtl need to have cost of sales posted to G/L?"  If the Manufacturing System is not using a A/R clearing account (XASyst.ARClearingDiv = "") then the costs were already posted to the Cost Of Sales account by the COS/WIP procedure (JCP80.W), so there are no costs to move.  """  
      self.COSPosted:bool = obj["COSPosted"]
      """   If the amount of this InvcDtl was posted to the A/R clearing account (COSPostingReq = Yes), then at sometime the amount needs to be moved to the COS account.   When the costs are moved, this flag is set to Yes.
When a product is shipped it's costs are put in A/R Clearing.  When it's invoiced the costs are ready to be moved to COS.  The Capture WIP/COS Activity procedure (JCP80.W) moves these costs.  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallCode:str = obj["CallCode"]
      """  A unique code that identifies the type of service call.  Link to GL accounts when LineType = "CALL"  """  
      self.RMANum:int = obj["RMANum"]
      """   The related RMA number. Note: This only applies to Credit Memos.
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.RMALine:int = obj["RMALine"]
      """   The related RMA Line number.  This along with the RMANum provides the foreign key to the related RMADtl record.
(See InvcDtl.RMANum)  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """   Fiscal year that clearing/cos entry was posted to in G/L.
Note: The Fiscal Year, Period, Journal Code, JournalNum pertain only to records which were used to post to the ARClearing/COS. This condition is indicated if  COSPostingReqd = Yes.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """   Fiscal period that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """   Journal Code of the related GLJrnDtl.
Note: This is set as the Inventory Journal code defined in the inventory configuration options.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal # that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.SellingOrderQty:int = obj["SellingOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.SellingReqQty.  """  
      self.SellingShipQty:int = obj["SellingShipQty"]
      """  Selling Quantity Shipped/billed.  Can be defaulted from ShipDtl.SellingShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit Of Measure.  Defaulted from ShipDtl.SUM, OrderDtl.SUM or Part.SUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project Id that links the invoice detail  to the Project table.  """  
      self.MilestoneID:str = obj["MilestoneID"]
      """  Milestone id that links the invoice detail  to the ProjectMilestone.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied.  Will default from the OrderDtl.ListPrice.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocListPrice.  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  Will default from the OrderDtl.OrdBasedPrice.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocOrdBasedPrice.  """  
      self.AdvGainLoss:int = obj["AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Sales representative commission rate.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Sales representative commission rate.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Sales representative commission rate.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Sales representative commission rate.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Sales representative commission rate.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Sales representative commission percentage.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Sales representative commission percentage.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Sales representative commission percentage.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Sales representative commission percentage.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Sales representative commission percentage.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number used for consolidated invoices  """  
      self.JCMtlUnitCost:int = obj["JCMtlUnitCost"]
      """  Job Closing Material Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCLbrUnitCost:int = obj["JCLbrUnitCost"]
      """  Job Closing Labor Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCBurUnitCost:int = obj["JCBurUnitCost"]
      """  Job Closing Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCSubUnitCost:int = obj["JCSubUnitCost"]
      """  Job Closing Subcontract Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCMtlBurUnitCost:int = obj["JCMtlBurUnitCost"]
      """  Job Closing Material Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this invoice line.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AR invoice line.  """  
      self.OverrideReverseCharge:bool = obj["OverrideReverseCharge"]
      """  Indicates if the user overrides the Reverse Charge Method.  """  
      self.RevChargeApplied:bool = obj["RevChargeApplied"]
      """  Indicates if Reverse Charge tax line has been applied.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the InvcTax records tied to this line are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the line before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.Rpt1AdvanceBillCredit:int = obj["Rpt1AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2AdvanceBillCredit:int = obj["Rpt2AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3AdvanceBillCredit:int = obj["Rpt3AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1AdvGainLoss:int = obj["Rpt1AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2AdvGainLoss:int = obj["Rpt2AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3AdvGainLoss:int = obj["Rpt3AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the One Time ShipTo tax region for purposes of Sales Tax calculations.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipping adress country Number.  """  
      self.Plant:str = obj["Plant"]
      """  Value is copied from PartTran for PE  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  value is copied from PartTran for PE  """  
      self.CallLine:int = obj["CallLine"]
      """  value is copied from PartTran for PE  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  Drop Shipment Pack Line  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Drop shipment Packing Slip.  """  
      self.FinChargeCode:str = obj["FinChargeCode"]
      """  FK to the Finance Charges table  """  
      self.ABTUID:str = obj["ABTUID"]
      """  Reference to the ABT, it is GUID, used in PostingEngine  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.InExtPrice:int = obj["InExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocInExtPrice:int = obj["DocInExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.InDiscount:int = obj["InDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.InTotalMiscChrg:int = obj["InTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.DocInTotalMiscChrg:int = obj["DocInTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InListPrice.  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocInListPrice.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InOrdBasedPrice.  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocInOrdBasedPrice.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt1InExtPrice:int = obj["Rpt1InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPrice:int = obj["Rpt2InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPrice:int = obj["Rpt3InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InTotalMiscChrg:int = obj["Rpt1InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2InTotalMiscChrg:int = obj["Rpt2InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3InTotalMiscChrg:int = obj["Rpt3InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the Invoice Detail was created by the Correction (Reversing) logic.  """  
      self.AssetNum:str = obj["AssetNum"]
      """  Asset number of the linked Asset Disposal transaction.  """  
      self.DisposalNum:int = obj["DisposalNum"]
      """  Unique number to identify the linked Asset Disposal transaction.  """  
      self.PBLineType:str = obj["PBLineType"]
      """   Project Billing transactuion type with following options:
MWA = Measured Work, 
LBD = Employee Labor (Direct Labor), 
LBC = Contract Labor, 
MTL = Material, 
SUB = Subcontract, 
MSC = Other,
RET = Retention, 
FLBR = Fee Labor
FMTL = Fee Material,
FSUB = Fee Subcontract, 
FMSC = Fee ODC,
FPRJ = Fee of total project,
FRET = Fee retention,
BDN  = Burden,
CEIL = Reduce by Ceiling,
CLFR = Close ? Fee retention,
CLPR = Close ? Project Retention (CP)
CLSR = Close Billing schedule - Reverse retention
CLSA = Close Project ? Unassigned activities  """  
      self.InvoiceLineRef:int = obj["InvoiceLineRef"]
      """  Invoice line reference  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  Invoice Number Reference  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Number.  This field should be set according to the linked Shipment Line.  """  
      self.PBInvoiceLine:int = obj["PBInvoiceLine"]
      """  Reference to the draft invoice line created in Invoice Preparation  """  
      self.RAID:int = obj["RAID"]
      """  Contains the value of the AC_RAHead.RAID client accommodation.  """  
      self.RADtlID:int = obj["RADtlID"]
      """  Contains the value of the AC_RADtl.RADtlID client detail accommodation.  """  
      self.DeferredRev:bool = obj["DeferredRev"]
      """  Indicates if revenue is deferred for contracts assigned to this group.  """  
      self.RACode:str = obj["RACode"]
      """  Revenue Amortization Code.  """  
      self.DefRevStart:str = obj["DefRevStart"]
      """  Starting date the revenue is deferred.  """  
      self.ChargeDefRev:bool = obj["ChargeDefRev"]
      """  When Yes the decision to defer revenue on an invoice line was made after the invoice was posted and the deferred revenue account has not yet been charged.  This flag is used internally to determine whether or not a journal clearing the sales and charging the deferrred revenue account needs to be created.  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefRevPosted:bool = obj["DefRevPosted"]
      """  DefRevPosted  """  
      self.LinkedInvcUnitPrice:int = obj["LinkedInvcUnitPrice"]
      """  Unit price of Invoice linked to Bill of Exchange in original currency.  """  
      self.DspWithholdAmt:int = obj["DspWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.DocDspWithholdAmt:int = obj["DocDspWithholdAmt"]
      """  Withholding Tax Amount in document currency  """  
      self.Rpt1DspWithholdAmt:int = obj["Rpt1DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt2DspWithholdAmt:int = obj["Rpt2DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt3DspWithholdAmt:int = obj["Rpt3DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.LinkedCurrencyCode:str = obj["LinkedCurrencyCode"]
      """  Currency code from linked Invoice Header  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.PEBOEHeadNum:int = obj["PEBOEHeadNum"]
      """  PEBOEHeadNum  """  
      self.MXSellingShipQty:int = obj["MXSellingShipQty"]
      """  MXSellingShipQty  """  
      self.MXUnitPrice:int = obj["MXUnitPrice"]
      """  MXUnitPrice  """  
      self.DocMXUnitPrice:int = obj["DocMXUnitPrice"]
      """  DocMXUnitPrice  """  
      self.Rpt1MXUnitPrice:int = obj["Rpt1MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2MXUnitPrice:int = obj["Rpt2MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3MXUnitPrice:int = obj["Rpt3MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CustCostCenter:str = obj["CustCostCenter"]
      """  CustCostCenter  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DefRevEndDate:str = obj["DefRevEndDate"]
      """  DefRevEndDate  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.Reclassified:bool = obj["Reclassified"]
      """  Indicates tha this invoice Line was reclassified.  """  
      self.PartiallyDefer:bool = obj["PartiallyDefer"]
      """  Enables the user the ability to override the Percent or Amount of revenue to be deferred  """  
      self.DeferredPercent:int = obj["DeferredPercent"]
      """  Percentage of revenue to be deferred for this line item  """  
      self.Reclass:bool = obj["Reclass"]
      """  Enables the user the ability tp reclassify deferred revenue and select a reclassification code and reason code.  """  
      self.DeferredOnly:bool = obj["DeferredOnly"]
      """  Defines if the reclassification posting will only reclass the deferred revenue, or if the recognized revenue will be reclassed as well  """  
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      """  Reclassification Code. This field will be required if Reclass is checked.  """  
      self.ReclassReasonCode:str = obj["ReclassReasonCode"]
      """  Reason Code for reclassification from Reason Code Maintanance that have type 'Deferred Revenue'. This field will be required if reclass is checked.  """  
      self.ReclassComments:str = obj["ReclassComments"]
      """  Internal comments for reclassification entered by the user.  """  
      self.DeferredRevAmt:int = obj["DeferredRevAmt"]
      """  Deferred Revenue Amount in base currency  """  
      self.DocDeferredRevAmt:int = obj["DocDeferredRevAmt"]
      """  Deferred Revenue Amount in document currency  """  
      self.Rpt1DeferredRevAmt:int = obj["Rpt1DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt2DeferredRevAmt:int = obj["Rpt2DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt3DeferredRevAmt:int = obj["Rpt3DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.ChargeReclass:bool = obj["ChargeReclass"]
      """  ChargeReclass  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.DropShipPONum:int = obj["DropShipPONum"]
      """  DropShipPONum  """  
      self.DocInAdvanceBillCredit:int = obj["DocInAdvanceBillCredit"]
      """  DocInAdvanceBillCredit  """  
      self.InAdvanceBillCredit:int = obj["InAdvanceBillCredit"]
      """  InAdvanceBillCredit  """  
      self.Rpt1InAdvanceBillCredit:int = obj["Rpt1InAdvanceBillCredit"]
      """  Rpt1InAdvanceBillCredit  """  
      self.Rpt2InAdvanceBillCredit:int = obj["Rpt2InAdvanceBillCredit"]
      """  Rpt2InAdvanceBillCredit  """  
      self.Rpt3InAdvanceBillCredit:int = obj["Rpt3InAdvanceBillCredit"]
      """  Rpt3InAdvanceBillCredit  """  
      self.MYIndustryCode:str = obj["MYIndustryCode"]
      """  MYIndustryCode  """  
      self.DockingStation:str = obj["DockingStation"]
      """  The dockingstation of the shipto address.  For future use.  """  
      self.ConsolidateLines:bool = obj["ConsolidateLines"]
      """  ConsolidateLines  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this invoice line was created from.  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  True if transaction is related to Epicor FSA  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PETaxExempt:str = obj["PETaxExempt"]
      """  PETaxExempt  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the Invoicing Company.  """  
      self.CColOrderLine:int = obj["CColOrderLine"]
      """  Order number line the Invoicing Company.  """  
      self.CColOrderRel:int = obj["CColOrderRel"]
      """  Order number release the Invoicing Company.  """  
      self.CColInvoiceLineRef:int = obj["CColInvoiceLineRef"]
      """  Invoice Line reference on the Invoicing Company.  """  
      self.CColPackNum:int = obj["CColPackNum"]
      """  Packing slip number on the Invoicing Company.  """  
      self.CColPackLine:int = obj["CColPackLine"]
      """  Packing slip line number on the Invoicing Company.  """  
      self.CColDropShipPackSlip:str = obj["CColDropShipPackSlip"]
      """  Drop shipment packing slip number on the Invoicing Company.  """  
      self.CColDropShipPackSlipLine:int = obj["CColDropShipPackSlipLine"]
      """  Drop shipment packing slip line number on the Invoicing Company.  """  
      self.CColShipToCustID:str = obj["CColShipToCustID"]
      """  Ship To Customer ID from the Invoice Line in the subsidiary company.  """  
      self.CColShipToNum:str = obj["CColShipToNum"]
      """  Ship To from the Invoice Line in the subsidiary company.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.ServiceSource:str = obj["ServiceSource"]
      """  Indicates where invoice detail was created from when created from a service call job. Not maintainable. “Summarized Labor”, “Summarized Material”, “Labor”, “Material”  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  AssemblySeq related to JobMtl or JobOper used to create invoice line from service call job  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  Job Mtl seq used to create invoice line from service call job  """  
      self.OprSeq:int = obj["OprSeq"]
      """  Job subcontract oper seq used to create invoice line from service call job  """  
      self.LaborType:str = obj["LaborType"]
      """  Indicates the labor type of the LaborDtl used to create invoice from service call job.  """  
      self.BillableLaborHrs:int = obj["BillableLaborHrs"]
      """  LaborDtl hours summed by labor rate. Used to create invoice line from labor related to service call job.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable rate used to create invoice line from labor related to service call job. In base currency.  """  
      self.ServiceSourceType:str = obj["ServiceSourceType"]
      """  Indicates the type of service call transaction data used to create the invoice detail from a service call job. MT (material), LB (labor), SC (subcontract), MC (misc charge), SM (summarized material), SL (summarized labor), SS (summarized subcontract) No summarization for MC.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AdvBillEnabled:bool = obj["AdvBillEnabled"]
      """  Adv bill enabled flag  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      self.AllowUpdPartDefer:bool = obj["AllowUpdPartDefer"]
      """  This flag not allow updating PartiallyDefer in 'Posted Invoice Update' if  AR Invoice Line was  marked as Partially Defer in AR Invoice Entry.  """  
      self.BillToCustID:str = obj["BillToCustID"]
      """  CustID associated with the InvcDtl.BTCustNum field.  """  
      self.BTCustName:str = obj["BTCustName"]
      """  Customer Name associated with the InvcDtl.BTCustNum field.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CheckAmortAmounts:bool = obj["CheckAmortAmounts"]
      """  Used internally to determine when the user needs to be prompted to recalculate the amortization schedules.  This is not intended for use by the customers.  """  
      self.CNGTIDescription1:str = obj["CNGTIDescription1"]
      self.CNGTIDescription2:str = obj["CNGTIDescription2"]
      self.CNGTIDescription3:str = obj["CNGTIDescription3"]
      self.CNGTIDiscountTaxAmount:int = obj["CNGTIDiscountTaxAmount"]
      """  CSF China, discount tax amount  """  
      self.CNGTIIUM:str = obj["CNGTIIUM"]
      self.CNGTINetAmount:int = obj["CNGTINetAmount"]
      self.CNGTIPartDescription:str = obj["CNGTIPartDescription"]
      self.CNGTISpecification:str = obj["CNGTISpecification"]
      self.CNGTITaxAmount:int = obj["CNGTITaxAmount"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.CNGTITaxPercent:int = obj["CNGTITaxPercent"]
      self.CNGTITotalAmount:int = obj["CNGTITotalAmount"]
      self.CNGTIUnitPrice:int = obj["CNGTIUnitPrice"]
      """  CSF China, Unit price = if InvcHead.InPrice then InvcDtl.InUnitPrice else InvcDtl.UnitPrice  """  
      self.ContractSuspended:bool = obj["ContractSuspended"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency code from InvcHead.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CustID:str = obj["CustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.CustName:str = obj["CustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Invoice Detail Customer Name  """  
      self.DeleteRASchedule:bool = obj["DeleteRASchedule"]
      """  Intended for internal use.  This is set to yes when the user answers yes to the prompt asking if they want to delete schedules after they unchecked the deferred revenue flag.  """  
      self.DispGLAcct:str = obj["DispGLAcct"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DispPONum:str = obj["DispPONum"]
      """  PO number for display.  """  
      self.DispShipToAddr:str = obj["DispShipToAddr"]
      """  Ship to display address  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol.  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  Document discount amount  """  
      self.DocLineTax:int = obj["DocLineTax"]
      """  Doc line tax  """  
      self.DocLineTotal:int = obj["DocLineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.DocPEDetAmt:int = obj["DocPEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.DropShipment:bool = obj["DropShipment"]
      """  Drop Shipment  """  
      self.DspAdvanceBillCredit:int = obj["DspAdvanceBillCredit"]
      """  Display advance bill credit  """  
      self.DspDiscount:int = obj["DspDiscount"]
      """  Display discount  """  
      self.DspDocAdvanceBillCredit:int = obj["DspDocAdvanceBillCredit"]
      """  Display documents advance bill credit  """  
      self.DspDocDiscount:int = obj["DspDocDiscount"]
      """  Display document discount  """  
      self.DspDocExtPrice:int = obj["DspDocExtPrice"]
      """  Display document ext price  """  
      self.DspDocLessDiscount:int = obj["DspDocLessDiscount"]
      """  Display document less discount  """  
      self.DspDocLineTax:int = obj["DspDocLineTax"]
      """  Display document line tax  """  
      self.DspDocLineTotal:int = obj["DspDocLineTotal"]
      """  Display document line total  """  
      self.DspDocTotalMiscChrg:int = obj["DspDocTotalMiscChrg"]
      """  Display document total misc. charge  """  
      self.DspExtPrice:int = obj["DspExtPrice"]
      """  Display ext price  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display Invoice Reference  """  
      self.DspLessDiscount:int = obj["DspLessDiscount"]
      """  Display less discount  """  
      self.DspLineTax:int = obj["DspLineTax"]
      """  Display line tax  """  
      self.DspLineTotal:int = obj["DspLineTotal"]
      """  Display line total  """  
      self.DspOurShipQty:int = obj["DspOurShipQty"]
      """  Display our ship qty  """  
      self.DspSellingShipQty:int = obj["DspSellingShipQty"]
      """  Display selling ship qty  """  
      self.DspTaxExempt:str = obj["DspTaxExempt"]
      self.DspTotalMiscChrg:int = obj["DspTotalMiscChrg"]
      """  Display total misc. charges  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      self.DueDate:str = obj["DueDate"]
      """  Invoice head due date.  """  
      self.EmpID:str = obj["EmpID"]
      """  FSA Technician  """  
      self.EnableDspWithholdAmt:bool = obj["EnableDspWithholdAmt"]
      self.EnableRMADelete:bool = obj["EnableRMADelete"]
      self.EnableRMAUpdate:bool = obj["EnableRMAUpdate"]
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEmpID:str = obj["FSAEmpID"]
      """  Employee created in ERP and processed on FSA as Service Technician, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.FSAWarrantyCode:str = obj["FSAWarrantyCode"]
      """  Warranty created in ERP and processed on FSA, stored on FSAExtData db table.  """  
      self.GLTranAmt:int = obj["GLTranAmt"]
      """  GL Journal Source Transaction Amount  """  
      self.GLTranDate:str = obj["GLTranDate"]
      """  GL Journal Source Transaction Date  """  
      self.GroupID:str = obj["GroupID"]
      """  Group associated to the invoice  """  
      self.InPrice:bool = obj["InPrice"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvLegalNum:str = obj["InvLegalNum"]
      """  Invoice Header Legal Number  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice Date from InvcHead.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice header type  """  
      self.IsCommisBtnSensitive:bool = obj["IsCommisBtnSensitive"]
      """  Is commission button sensitive  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsTaxBtnSensitive:bool = obj["IsTaxBtnSensitive"]
      """  Tax buton sensitive or not.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  display discount  """  
      self.LineTax:int = obj["LineTax"]
      """  Line tax amount  """  
      self.LineTotal:int = obj["LineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.LinkedCurrencySymbol:str = obj["LinkedCurrencySymbol"]
      self.NoShipTaxRgnInfo:bool = obj["NoShipTaxRgnInfo"]
      """  The flag based on the user responce to indicate if Ship To to be chnaged on Invoice detail record without tax information from Ship To because of the different tax pricing  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Open invoice flag from InvcHead.  """  
      self.OrderUM:str = obj["OrderUM"]
      """  OrderUM display  """  
      self.OrigTaxCat:str = obj["OrigTaxCat"]
      """  original tax category  """  
      self.PEDetAmt:int = obj["PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEVATExemptionReason:str = obj["PEVATExemptionReason"]
      """  PE VAT Exemption Reason  """  
      self.Posted:bool = obj["Posted"]
      """  Posted flag from the InvcHead.  """  
      self.RADesc:str = obj["RADesc"]
      self.RASchedExists:bool = obj["RASchedExists"]
      """  Intended for internal use.  Indicates whether or not revenue amortization schedules exist.  """  
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  The internal flag to indicate if the logic is supposed to remove manual and/or manually added tax records per User request if the Line Tax Exempt field is populated  """  
      self.Rpt1DspAdvanceBillCredit:int = obj["Rpt1DspAdvanceBillCredit"]
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      self.Rpt1DspExtPrice:int = obj["Rpt1DspExtPrice"]
      self.Rpt1DspLessDiscount:int = obj["Rpt1DspLessDiscount"]
      self.Rpt1DspLineTax:int = obj["Rpt1DspLineTax"]
      self.Rpt1DspLineTotal:int = obj["Rpt1DspLineTotal"]
      self.Rpt1DspTotalMiscChrg:int = obj["Rpt1DspTotalMiscChrg"]
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      self.Rpt1LineTax:int = obj["Rpt1LineTax"]
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt1PEDetAmt:int = obj["Rpt1PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt2DspAdvanceBillCredit:int = obj["Rpt2DspAdvanceBillCredit"]
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      self.Rpt2DspExtPrice:int = obj["Rpt2DspExtPrice"]
      self.Rpt2DspLessDiscount:int = obj["Rpt2DspLessDiscount"]
      self.Rpt2DspLineTax:int = obj["Rpt2DspLineTax"]
      self.Rpt2DspLineTotal:int = obj["Rpt2DspLineTotal"]
      self.Rpt2DspTotalMiscChrg:int = obj["Rpt2DspTotalMiscChrg"]
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      self.Rpt2LineTax:int = obj["Rpt2LineTax"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt2PEDetAmt:int = obj["Rpt2PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt3DspAdvanceBillCredit:int = obj["Rpt3DspAdvanceBillCredit"]
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      self.Rpt3DspExtPrice:int = obj["Rpt3DspExtPrice"]
      self.Rpt3DspLessDiscount:int = obj["Rpt3DspLessDiscount"]
      self.Rpt3DspLineTax:int = obj["Rpt3DspLineTax"]
      self.Rpt3DspLineTotal:int = obj["Rpt3DspLineTotal"]
      self.Rpt3DspTotalMiscChrg:int = obj["Rpt3DspTotalMiscChrg"]
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      self.Rpt3LineTax:int = obj["Rpt3LineTax"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt3PEDetAmt:int = obj["Rpt3PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st sales rep of the invoice.  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd sales rep of the invoice header.  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd sales rep code of the invoice header.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th sales rep code of the invoice header.  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th salesrep code of the invoice header.  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShpLegalNum:str = obj["ShpLegalNum"]
      """  Ship Head Legal Number  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.SoldToCustName:str = obj["SoldToCustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Terms code from InvcHead.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.AllowReclassify:bool = obj["AllowReclassify"]
      """  This flag allow updating Reclassification data.  """  
      self.LineAmtRecalcd:bool = obj["LineAmtRecalcd"]
      """  The flag to indicate if the amount  is re-calculated to doc/base/rpt currencies after entered and no need to re-calculate on save.  """  
      self.IsExtrastatSensitive:bool = obj["IsExtrastatSensitive"]
      """  Set to true if extra trade statistics is enabled.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallCodeCallDescription:str = obj["CallCodeCallDescription"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.ContractNumSuspended:bool = obj["ContractNumSuspended"]
      self.CustCntName:str = obj["CustCntName"]
      self.CustCntMiddleName:str = obj["CustCntMiddleName"]
      self.CustCntFirstName:str = obj["CustCntFirstName"]
      self.CustCntFaxNum:str = obj["CustCntFaxNum"]
      self.CustCntCorpName:str = obj["CustCntCorpName"]
      self.CustCntPhoneNum:str = obj["CustCntPhoneNum"]
      self.CustCntLastName:str = obj["CustCntLastName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumAllowShipTo3:bool = obj["CustNumAllowShipTo3"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MilestoneIDDescription:str = obj["MilestoneIDDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.PackLineLineDesc:str = obj["PackLineLineDesc"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.ReclassCodeDescription:str = obj["ReclassCodeDescription"]
      self.ReclassReasonDescription:str = obj["ReclassReasonDescription"]
      self.RMALineLineDesc:str = obj["RMALineLineDesc"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.ShipToCustCustID:str = obj["ShipToCustCustID"]
      self.ShipToCustName:str = obj["ShipToCustName"]
      self.ShipToCustBTName:str = obj["ShipToCustBTName"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipToNumName:str = obj["ShipToNumName"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Indicates if invoice is "open".  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The latest transaction date (CashDtl) which was available when the invoice was closed. This is used to improve record selection performance when selecting invoices that were open as of a certain date. (Used by the aged invoice report). This is updated during the CashReceipt posting process, Adjustment entry or Apply Credit memos programs..  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """   Indicates the type of document. Yes = Credit Memo No= Invoice. This value can't be changed after the record has been created.
Credit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign but will entered as a positive.
Credit Memos created by invoice entry also set the InvoiceSuffix field = "CM"  """  
      self.UnappliedCash:bool = obj["UnappliedCash"]
      """  An internal flag that represents Credit Memo was due to Unapplied Receipts. Created by the Cash Receipts Entry program.   This is only applicable with CreditMemo = Yes.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The Check reference number that the Unapplied Receipt Credit Memo was created from. Cash receipts entry sets this field equal to the CashHead.CheckRef when it creates the Unapplied Receipt Credit Memo.  Primarily used as a reference.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  An internally assigned field that further identifies an invoice. This field will be displayed as a suffix to the invoice number.  The possible values are "CM" = Credit memo created by invoice entry, UR = Unapplied Receipt Credit Memo,  DN = Debit Note, and FC = Finance Charge invoice.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the BatchID of the "current " batch that the user is working with.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the receivables file.    Only invoices that have been Posted (true) will be included as part of the open receivables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns the next available #. The next available # is the greater of last # on file plus one or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices:  "Shp" = Invoice for Shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments, "Mis" = Miscellaneous.  The setting of this field affects invoice entry:  "Shipments" - These are generated by the "Get Shipments function" and is not selectable directly by the user.  "Advanced"  - Must have a sales order reference. The detail lines on this type of invoice update the OrderDtl.AdvanceBillBal. Also the user indicates if this should be considered as deferred revenue. Which changes which G/L accounts are used for the line item credits.  "Deposit" - invoices are used to request a "deposit" on an order. A Sales Order is mandatory. No line items or Miscellaneous records are allowed. The user enters a flat amount on the header (InvcHead.PrePayAmt) which will be printed in the body of the invoice. This also updates the OrderHed.PrePayBal field.   "Miscellaneous" - These invoices may or may not reference a Sales Order.  If Invoice is generated in Project Billing then there are following options: "PFF" - Fixed Fee project;  "PCP" - Cost Plus project;  "PTM" - Time and Material project;  "PPP" - Progress Payment project.  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  Only used when InvoiceType = "Adv" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If "No" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order #. This is a mandatory entry for all InvoiceType except "Miscellaneous". If entered it must be valid in the OrderHed file. The OrderHed supplies the invoice with many defaults, including; CustNum, PONum, TermsCode,  FOB, RepRate, RepSplit, SalesRepList, InvoiceComments  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal # that is used to link the invoice to the Customer master file.  This field is not directly maintained by the user.  In most cases it will be duplicated from the referenced OrderHed. For "Miscellaneous" invoices the user can enter either a Sales Order Number or a Customer ID which will supply the CustNum.  """  
      self.PONum:str = obj["PONum"]
      """  Customer's PO#.   This is a reference field which will be printed on the invoice. Defaults from the OrderHed.PONum.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.FOB:str = obj["FOB"]
      """  Defaults from sales order ORderHed.FOB  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the TERMS master file.  Defaults from OrderHed if OrderNum > 0 else from the Customer master. This IS A MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related InvcGrp or based on ShipDate of Packing Slip. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the InvcBatc or during the "get shipments" function it is determined based on the ShipDate of the packing slip or when the invoice date is changed. It is overrideable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Once posted, maintenance is not allowed.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DepositCredit:int = obj["DepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.DocDepositCredit:int = obj["DocDepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the invoice. Up to five codes can be  established. This field is not directly maintainable.  Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The defaults are based on the OrderHed.SalesRepList if a valid Order is referenced or first one is defaulted from the Customer master if ship to is blank else from the ShipTo.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """   This field is maintainable/viewable only for Credit Memos. It represents the invoice # that this credit memo relates to. It can be left blank. If entered it must be a valid InvcHead record where the InvcHead.CreditMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the credit memos next to their corresponding invoice. Therefore, this field will always have a value.

For Invoices it is equal to the InvoiceNum.

For Credit memos where they are not related to an invoice it is also set equal to the credit memo's InvoiceNum. In this later case when InvcHead.Credit = Yes and InvcHead.InvoiceNum = InvcHead.InvoiceRef the InvoiceRef is reset to zero before being displayed, then when written back to the database it is set = to the InvoiceNum if the user did not enter a related invoice.  """  
      self.RefCancelled:int = obj["RefCancelled"]
      """  Value of this field is reference to invoice which has been cancelled by current invoice.  """  
      self.RefCancelledBy:int = obj["RefCancelledBy"]
      """  Value of this field is reference to invoice that cancelled this invoice.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.PayDiscDate:str = obj["PayDiscDate"]
      """  Prompt payment discount date. This is calculated based on the Invoice date + Terms.DiscountDays. Not user maintainable. This will default into the cash receipt record if the scheduled due amount is being paid in full.  """  
      self.PayDiscAmt:int = obj["PayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.DocPayDiscAmt:int = obj["DocPayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.BillConNum:int = obj["BillConNum"]
      """  Contains the key  value for the Billing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMBCON as the default.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number. If ARSyst.ARVoucherInvoices = Yes then this value will be printed on the Invoice.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between invoiced with standard lines which are for parts "PART"  and lines for service calls  "CALL" .  """  
      self.RMANum:int = obj["RMANum"]
      """   The RMA number which generated this Credit Memo.
Note: This only applies to Credit Memos. 
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.Plant:str = obj["Plant"]
      """  The Site that the invoice is relate to.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identifier  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the Debit Note invoices this field contains the detail comments for the Debit Note. For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For the Debit Note invoice this field contains A Debit Note number assigned by the customer. The Debit Note number is supposed to be unique for the customer.  """  
      self.DebitNote:bool = obj["DebitNote"]
      """   Indicates the type of documents. Yes = Debit Note. This value can't be changed (the record is created on Invoice payment posting).
Debit Notes  also have the InvoiceSuffix field = "DN".  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  This is populated from ShipHead.CustNum representing the Sold To customer.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  Default is false.  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.RepComm1:int = obj["RepComm1"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm2:int = obj["RepComm2"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm3:int = obj["RepComm3"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm4:int = obj["RepComm4"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm5:int = obj["RepComm5"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepSales1:int = obj["RepSales1"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales2:int = obj["RepSales2"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales3:int = obj["RepSales3"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales4:int = obj["RepSales4"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales5:int = obj["RepSales5"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.CMType:str = obj["CMType"]
      """  Indicates if the Credit Memo is for a Rebate  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding in Base is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding in Customer currency  """  
      self.Rpt1DepositCredit:int = obj["Rpt1DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2DepositCredit:int = obj["Rpt2DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3DepositCredit:int = obj["Rpt3DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayDiscAmt:int = obj["Rpt1PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayDiscAmt:int = obj["Rpt2PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayDiscAmt:int = obj["Rpt3PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.DocDepApplied:int = obj["DocDepApplied"]
      """  Amount of deposit applied  """  
      self.Rpt1DepGainLoss:int = obj["Rpt1DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2DepGainLoss:int = obj["Rpt2DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3DepGainLoss:int = obj["Rpt3DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.LastChrgCalcDate:str = obj["LastChrgCalcDate"]
      """  The last date finance/late charges have been calculated for this invoice.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction document type id.  """  
      self.TotFinChrg:int = obj["TotFinChrg"]
      """  Total Finance Charge amount.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  Indicates if the document has been printed.  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.BlockedFinChrg:bool = obj["BlockedFinChrg"]
      """  Blocks certain invoice from generating finance/later charge.  """  
      self.BlockedFinChrgReason:str = obj["BlockedFinChrgReason"]
      """  Reason why invoice has been blocked generating finance/later charge and only is enabled if the invoice is blocked.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.BlockedRemLetters:bool = obj["BlockedRemLetters"]
      """  Blocks certain invoice from being printed on reminder letters.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.BlockedRemLettersReason:str = obj["BlockedRemLettersReason"]
      """  Reason why invoice has been blocked from being printed on reminder letters and only is enabled if the invoice is blocked.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  The actual ship date for the packing slip. Default as system date.  """  
      self.CurrRateDate:str = obj["CurrRateDate"]
      """  Currency Rate Date  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.UseAltBillTo:bool = obj["UseAltBillTo"]
      """  If TRUE taxes will be calculated based on the Alternate Bill To, if FALSE it will proceed normally.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be se to Yes if the Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden Finland Localization field - Banking Reference  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.ReversalDocAmount:int = obj["ReversalDocAmount"]
      """  Reversal Doucment Amount  """  
      self.OrigDueDate:str = obj["OrigDueDate"]
      """  Original Due Date at posting time  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The reference to CashHead.HeadNum.Used in deposit invoices  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.ContractRef:str = obj["ContractRef"]
      """  The free text field which can contain reference (such as Contract)  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash receipts. For Shipment Invoices it comes from Packing Slip. For Deposit Invoices created based on deposit payments it is actual bank money are received to. For other  Invoice types, default comes from 1) Sales Order 2) Bill To Customer 3) System default (Company).  """  
      self.ContractDate:str = obj["ContractDate"]
      """  Addition to Contract  """  
      self.PBProjectID:str = obj["PBProjectID"]
      """  If the invoice was generated in Project Billing then it is reference to the project.  """  
      self.DepositAmt:int = obj["DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment  """  
      self.GUIExportBillNumber:str = obj["GUIExportBillNumber"]
      """   Taiwan Localization
Export Bill Number  """  
      self.DocDepositAmt:int = obj["DocDepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in document currency  """  
      self.GUIDateOfExport:str = obj["GUIDateOfExport"]
      """   Taiwan Localization
Date of Export  """  
      self.Rpt1DepositAmt:int = obj["Rpt1DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt1 currency  """  
      self.GUIExportType:str = obj["GUIExportType"]
      """   Taiwan Localization
Export Type  """  
      self.Rpt2DepositAmt:int = obj["Rpt2DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt2 currency  """  
      self.GUIExportMark:str = obj["GUIExportMark"]
      """   Taiwan Localization
Export Mark  """  
      self.Rpt3DepositAmt:int = obj["Rpt3DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt23currency  """  
      self.GUIExportBillType:str = obj["GUIExportBillType"]
      """   Taiwan Localization
Export Bill Type  """  
      self.DepUnallocatedAmt:int = obj["DepUnallocatedAmt"]
      """  Deposit unallocated amount in base currency  """  
      self.SummarizationDate:str = obj["SummarizationDate"]
      """  Day when a company sums up accounts receivables for each customer.  """  
      self.DocDepUnallocatedAmt:int = obj["DocDepUnallocatedAmt"]
      """  Deposit unallocated amount in document currency  """  
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Rpt1DepUnallocatedAmt:int = obj["Rpt1DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt1 currency  """  
      self.BillingNumber:str = obj["BillingNumber"]
      """  Billing Number to be generated from Legal Numbering upon printing of billing statement.  """  
      self.Rpt2DepUnallocatedAmt:int = obj["Rpt2DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt2 currency  """  
      self.ReadyToBill:bool = obj["ReadyToBill"]
      """  Only records ready to bill will be printed in the Billing Statement  """  
      self.Rpt3DepUnallocatedAmt:int = obj["Rpt3DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.CustAgentName:str = obj["CustAgentName"]
      """  Customer Agent Name  """  
      self.CustAgentTaxRegNo:str = obj["CustAgentTaxRegNo"]
      """  Customer Agent Tax Region Number  """  
      self.ExportType:str = obj["ExportType"]
      """  Export Type: 0-No Export, 1-Normal Export(S04), 2-Material Export(S05), 3-Service Export(S06)  """  
      self.ExportReportNo:str = obj["ExportReportNo"]
      """  Export Report Number  """  
      self.RealEstateNo:str = obj["RealEstateNo"]
      """  Real Estate Number  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.CycleCode:str = obj["CycleCode"]
      """  CycleCode  """  
      self.Duration:int = obj["Duration"]
      """  Duration  """  
      self.EndDate:str = obj["EndDate"]
      """  EndDate  """  
      self.MaxValueAmt:int = obj["MaxValueAmt"]
      """  MaxValueAmt  """  
      self.DocMaxValueAmt:int = obj["DocMaxValueAmt"]
      """  DocMaxValueAmt  """  
      self.Rpt1MaxValueAmt:int = obj["Rpt1MaxValueAmt"]
      """  Rpt1MaxValueAmt  """  
      self.Rpt2MaxValueAmt:int = obj["Rpt2MaxValueAmt"]
      """  Rpt2MaxValueAmt  """  
      self.Rpt3MaxValueAmt:int = obj["Rpt3MaxValueAmt"]
      """  Rpt3MaxValueAmt  """  
      self.HoldInvoice:bool = obj["HoldInvoice"]
      """  HoldInvoice  """  
      self.CopyLatestInvoice:bool = obj["CopyLatestInvoice"]
      """  CopyLatestInvoice  """  
      self.OverrideEndDate:bool = obj["OverrideEndDate"]
      """  OverrideEndDate  """  
      self.CycleInactive:bool = obj["CycleInactive"]
      """  CycleInactive  """  
      self.RecurSource:bool = obj["RecurSource"]
      """  RecurSource  """  
      self.InstanceNum:int = obj["InstanceNum"]
      """  InstanceNum  """  
      self.RecurBalance:int = obj["RecurBalance"]
      """  RecurBalance  """  
      self.DocRecurBalance:int = obj["DocRecurBalance"]
      """  DocRecurBalance  """  
      self.Rpt1RecurBalance:int = obj["Rpt1RecurBalance"]
      """  Rpt1RecurBalance  """  
      self.Rpt2RecurBalance:int = obj["Rpt2RecurBalance"]
      """  Rpt2RecurBalance  """  
      self.Rpt3RecurBalance:int = obj["Rpt3RecurBalance"]
      """  Rpt3RecurBalance  """  
      self.LastDate:str = obj["LastDate"]
      """  LastDate  """  
      self.RecurringState:str = obj["RecurringState"]
      """  RecurringState  """  
      self.IsRecurring:bool = obj["IsRecurring"]
      """  IsRecurring  """  
      self.InvoiceNumList:str = obj["InvoiceNumList"]
      """  InvoiceNumList  """  
      self.IsAddedToGTI:bool = obj["IsAddedToGTI"]
      """  IsAddedToGTI  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CHISRCodeLine:str = obj["CHISRCodeLine"]
      """  CHISRCodeLine  """  
      self.CMReason:str = obj["CMReason"]
      """  CMReason  """  
      self.THIsImmatAdjustment:bool = obj["THIsImmatAdjustment"]
      """  THIsImmatAdjustment  """  
      self.AGAuthorizationCode:str = obj["AGAuthorizationCode"]
      """  AGAuthorizationCode  """  
      self.AGAuthorizationDate:str = obj["AGAuthorizationDate"]
      """  AGAuthorizationDate  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGDocumentLetter:str = obj["AGDocumentLetter"]
      """  AGDocumentLetter  """  
      self.AGInvoicingPoint:str = obj["AGInvoicingPoint"]
      """  AGInvoicingPoint  """  
      self.AGLegalNumber:str = obj["AGLegalNumber"]
      """  AGLegalNumber  """  
      self.AGPrintingControlType:str = obj["AGPrintingControlType"]
      """  AGPrintingControlType  """  
      self.RevisionDate:str = obj["RevisionDate"]
      """  RevisionDate  """  
      self.RevisionNum:int = obj["RevisionNum"]
      """  RevisionNum  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  TWGenerationType  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  TWGUIGroup  """  
      self.TWPeriodPrefix:str = obj["TWPeriodPrefix"]
      """  TWPeriodPrefix  """  
      self.InvInCollections:bool = obj["InvInCollections"]
      """  Indicates if the Invoice is in Collections status  """  
      self.CollectionsCust:bool = obj["CollectionsCust"]
      """   Indicates if the Customer of the Invoice is in Collections
(Peru Localization)  """  
      self.CounterARForm:int = obj["CounterARForm"]
      """  A counter of the number of times an AR Invoice has been transmitted via EDI.  The counter is automatically incremented each time the EDIReady flag changes from False to True.  """  
      self.PostedRecog:bool = obj["PostedRecog"]
      """  flag indicates if Revenue of the invoice has been already posted  """  
      self.CNConfirmDate:str = obj["CNConfirmDate"]
      """  Confirmation Date  """  
      self.MXSATSeal:str = obj["MXSATSeal"]
      """  MXSATSeal  """  
      self.MXSerie:str = obj["MXSerie"]
      """  MXSerie  """  
      self.MXTaxRcptType:str = obj["MXTaxRcptType"]
      """  MXTaxRcptType  """  
      self.MXFiscalFolio:str = obj["MXFiscalFolio"]
      """  MXFiscalFolio  """  
      self.MXTotalPayments:int = obj["MXTotalPayments"]
      """  MXTotalPayments  """  
      self.MXFolio:str = obj["MXFolio"]
      """  MXFolio  """  
      self.MXCertifiedTimestamp:str = obj["MXCertifiedTimestamp"]
      """  MXCertifiedTimestamp  """  
      self.MXSATCertificateSN:str = obj["MXSATCertificateSN"]
      """  MXSATCertificateSN  """  
      self.MXDigitalSeal:str = obj["MXDigitalSeal"]
      """  MXDigitalSeal  """  
      self.MXPostedTimeStamp:str = obj["MXPostedTimeStamp"]
      """  MXPostedTimeStamp  """  
      self.MXCertificate:str = obj["MXCertificate"]
      """  MXCertificate  """  
      self.MXApprovalYear:int = obj["MXApprovalYear"]
      """  MXApprovalYear  """  
      self.MXCBB:str = obj["MXCBB"]
      """  MXCBB  """  
      self.MXApprovalNum:int = obj["MXApprovalNum"]
      """  MXApprovalNum  """  
      self.MXOriginalStringTFD:str = obj["MXOriginalStringTFD"]
      """  MXOriginalStringTFD  """  
      self.MXPaymentNum:int = obj["MXPaymentNum"]
      """  MXPaymentNum  """  
      self.MXPaidAs:str = obj["MXPaidAs"]
      """  MXPaidAs  """  
      self.MXCertificateSN:str = obj["MXCertificateSN"]
      """  MXCertificateSN  """  
      self.MXOriginalAmount:int = obj["MXOriginalAmount"]
      """  MXOriginalAmount  """  
      self.MXAccountNumber:str = obj["MXAccountNumber"]
      """  MXAccountNumber  """  
      self.MXOriginalDate:str = obj["MXOriginalDate"]
      """  MXOriginalDate  """  
      self.MXOriginalSeries:str = obj["MXOriginalSeries"]
      """  MXOriginalSeries  """  
      self.MXOriginalFolio:str = obj["MXOriginalFolio"]
      """  MXOriginalFolio  """  
      self.MXTaxRegime:str = obj["MXTaxRegime"]
      """  MXTaxRegime  """  
      self.MXOriginalString:str = obj["MXOriginalString"]
      """  MXOriginalString  """  
      self.MXPaymentName:str = obj["MXPaymentName"]
      """  MXPaymentName  """  
      self.EInvoice:bool = obj["EInvoice"]
      """  EInvoice  """  
      self.EInvStatus:int = obj["EInvStatus"]
      """  EInvStatus  """  
      self.EInvTimestamp:str = obj["EInvTimestamp"]
      """  EInvTimestamp  """  
      self.EInvUpdatedBy:str = obj["EInvUpdatedBy"]
      """  EInvUpdatedBy  """  
      self.EInvException:str = obj["EInvException"]
      """  EInvException  """  
      self.WithTaxConfirm:bool = obj["WithTaxConfirm"]
      """  Flagged that this invoice has taxes which were necessary or is necessary now.  """  
      self.UseAltBillToID:bool = obj["UseAltBillToID"]
      """  UseAltBillToID  """  
      self.MXCancelledDate:str = obj["MXCancelledDate"]
      """  MXCancelledDate  """  
      self.Overpaid:bool = obj["Overpaid"]
      """  Overpaid  """  
      self.OrdExchangeRate:int = obj["OrdExchangeRate"]
      """  OrdExchangeRate  """  
      self.PEAPPayNum:int = obj["PEAPPayNum"]
      """  PEAPPayNum  """  
      self.PEBankNumber:str = obj["PEBankNumber"]
      """  PEBankNumber  """  
      self.PECharges:int = obj["PECharges"]
      """  PECharges  """  
      self.PECommissions:int = obj["PECommissions"]
      """  PECommissions  """  
      self.PEDetTaxAmt:int = obj["PEDetTaxAmt"]
      """  PEDetTaxAmt  """  
      self.PEDetTaxCurrencyCode:str = obj["PEDetTaxCurrencyCode"]
      """  PEDetTaxCurrencyCode  """  
      self.PEDischargeAmt:int = obj["PEDischargeAmt"]
      """  PEDischargeAmt  """  
      self.PEDischargeDate:str = obj["PEDischargeDate"]
      """  PEDischargeDate  """  
      self.PEInterest:int = obj["PEInterest"]
      """  PEInterest  """  
      self.PENoPayPenalty:int = obj["PENoPayPenalty"]
      """  PENoPayPenalty  """  
      self.PESUNATDepAmt:int = obj["PESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.PESUNATDepDate:str = obj["PESUNATDepDate"]
      """  CSF Peru - SUNAT Deposit Date  """  
      self.PESUNATDepNum:str = obj["PESUNATDepNum"]
      """  CSF Peru -  SUNAT Deposit Number  """  
      self.PEBOEPosted:bool = obj["PEBOEPosted"]
      """  PEBOEPosted  """  
      self.DocPEInterest:int = obj["DocPEInterest"]
      """  DocPEInterest  """  
      self.DocPECommissions:int = obj["DocPECommissions"]
      """  DocPECommissions  """  
      self.DocPECharges:int = obj["DocPECharges"]
      """  DocPECharges  """  
      self.DocPENoPayPenalty:int = obj["DocPENoPayPenalty"]
      """  DocPENoPayPenalty  """  
      self.DocPEDischargeAmt:int = obj["DocPEDischargeAmt"]
      """  DocPEDischargeAmt  """  
      self.DocPEDetTaxAmt:int = obj["DocPEDetTaxAmt"]
      """  DocPEDetTaxAmt  """  
      self.Rpt1PEInterest:int = obj["Rpt1PEInterest"]
      """  Rpt1PEInterest  """  
      self.Rpt1PECommissions:int = obj["Rpt1PECommissions"]
      """  Rpt1PECommissions  """  
      self.Rpt1PECharges:int = obj["Rpt1PECharges"]
      """  Rpt1PECharges  """  
      self.Rpt1PENoPayPenalty:int = obj["Rpt1PENoPayPenalty"]
      """  Rpt1PENoPayPenalty  """  
      self.Rpt1PEDischargeAmt:int = obj["Rpt1PEDischargeAmt"]
      """  Rpt1PEDischargeAmt  """  
      self.Rpt2PEInterest:int = obj["Rpt2PEInterest"]
      """  Rpt2PEInterest  """  
      self.Rpt2PECommissions:int = obj["Rpt2PECommissions"]
      """  Rpt2PECommissions  """  
      self.Rpt2PECharges:int = obj["Rpt2PECharges"]
      """  Rpt2PECharges  """  
      self.Rpt2PENoPayPenalty:int = obj["Rpt2PENoPayPenalty"]
      """  Rpt2PENoPayPenalty  """  
      self.Rpt2PEDischargeAmt:int = obj["Rpt2PEDischargeAmt"]
      """  Rpt2PEDischargeAmt  """  
      self.Rpt3PEInterest:int = obj["Rpt3PEInterest"]
      """  Rpt3PEInterest  """  
      self.Rpt3PECommissions:int = obj["Rpt3PECommissions"]
      """  Rpt3PECommissions  """  
      self.Rpt3PECharges:int = obj["Rpt3PECharges"]
      """  Rpt3PECharges  """  
      self.Rpt3PENoPayPenalty:int = obj["Rpt3PENoPayPenalty"]
      """  Rpt3PENoPayPenalty  """  
      self.Rpt3PEDischargeAmt:int = obj["Rpt3PEDischargeAmt"]
      """  Rpt3PEDischargeAmt  """  
      self.OurSupplierCode:str = obj["OurSupplierCode"]
      """  Our Supplier Code  """  
      self.PEGuaranteeName:str = obj["PEGuaranteeName"]
      """  PEGuaranteeName  """  
      self.PEGuaranteeAddress1:str = obj["PEGuaranteeAddress1"]
      """  PEGuaranteeAddress1  """  
      self.PEGuaranteeAddress2:str = obj["PEGuaranteeAddress2"]
      """  PEGuaranteeAddress2  """  
      self.PEGuaranteeAddress3:str = obj["PEGuaranteeAddress3"]
      """  PEGuaranteeAddress3  """  
      self.PEGuaranteeCity:str = obj["PEGuaranteeCity"]
      """  PEGuaranteeCity  """  
      self.PEGuaranteeState:str = obj["PEGuaranteeState"]
      """  PEGuaranteeState  """  
      self.PEGuaranteeZip:str = obj["PEGuaranteeZip"]
      """  PEGuaranteeZip  """  
      self.PEGuaranteeCountry:str = obj["PEGuaranteeCountry"]
      """  PEGuaranteeCountry  """  
      self.PEGuaranteeTaxID:str = obj["PEGuaranteeTaxID"]
      """  PEGuaranteeTaxID  """  
      self.PEGuaranteePhoneNum:str = obj["PEGuaranteePhoneNum"]
      """  PEGuaranteePhoneNum  """  
      self.PEBOEStatus:str = obj["PEBOEStatus"]
      """  PEBOEStatus  """  
      self.PEBOEIsMultiGen:bool = obj["PEBOEIsMultiGen"]
      """  PEBOEIsMultiGen  """  
      self.PERefDocID:str = obj["PERefDocID"]
      """  PE Reference Document ID  """  
      self.PEReasonCode:str = obj["PEReasonCode"]
      """  PE Reason Code  """  
      self.PEReasonDesc:str = obj["PEReasonDesc"]
      """  PE Reason Description  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  TW GUI Code Seller  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  TW GUI Code Buyer  """  
      self.TWGUIExportDocumentName:str = obj["TWGUIExportDocumentName"]
      """  Document Name  """  
      self.TWGUIExportRemarks:str = obj["TWGUIExportRemarks"]
      """  Remarks  """  
      self.TWGUIExportVerification:str = obj["TWGUIExportVerification"]
      """  Verification  """  
      self.PEDebitNoteReasonCode:str = obj["PEDebitNoteReasonCode"]
      """  PEDebitNoteReasonCode  """  
      self.PEDebitNote:bool = obj["PEDebitNote"]
      """  PEDebitNote  """  
      self.MXPartPmt:bool = obj["MXPartPmt"]
      """  MXPartPmt  """  
      self.CNTaxInvoiceType:int = obj["CNTaxInvoiceType"]
      """  Tax Invoice Type  """  
      self.MXExportOperationType:str = obj["MXExportOperationType"]
      """  MXExportOperationType  """  
      self.MXExportCustDocCode:str = obj["MXExportCustDocCode"]
      """  MXExportCustDocCode  """  
      self.MXExportCertOriginNum:str = obj["MXExportCertOriginNum"]
      """  MXExportCertOriginNum  """  
      self.MXExportConfNum:str = obj["MXExportConfNum"]
      """  MXExportConfNum  """  
      self.MXExportCertOrigin:bool = obj["MXExportCertOrigin"]
      """  MXExportCertOrigin  """  
      self.MXIncoterm:str = obj["MXIncoterm"]
      """  MXIncoterm  """  
      self.AGDocConcept:int = obj["AGDocConcept"]
      """  AGDocConcept  """  
      self.EInvRefNum:str = obj["EInvRefNum"]
      """  Electronic Invoice reference number  """  
      self.ExportDocRefNum:str = obj["ExportDocRefNum"]
      """  Export document reference number  """  
      self.ExportDocDate:str = obj["ExportDocDate"]
      """  Export document date  """  
      self.INTaxTransactionID:str = obj["INTaxTransactionID"]
      """  Tax Transaction ID  """  
      self.MXMovingReasonFlag:bool = obj["MXMovingReasonFlag"]
      """  MXMovingReasonFlag  """  
      self.MXMovingReason:str = obj["MXMovingReason"]
      """  MXMovingReason  """  
      self.MXNumRegIdTrib:str = obj["MXNumRegIdTrib"]
      """  MXNumRegIdTrib  """  
      self.MXResidenCountryNum:int = obj["MXResidenCountryNum"]
      """  MXResidenCountryNum  """  
      self.MXPurchaseType:str = obj["MXPurchaseType"]
      """  MXPurchaseType  """  
      self.MXConfirmationCode:str = obj["MXConfirmationCode"]
      """  MXConfirmationCode  """  
      self.MXExternalCode:str = obj["MXExternalCode"]
      """  MXExternalCode  """  
      self.ServiceInvoice:bool = obj["ServiceInvoice"]
      """  This invoice was created via an integration with a third-party field service.  """  
      self.MXDomesticTransfer:bool = obj["MXDomesticTransfer"]
      """  MXDomesticTransfer  """  
      self.MXCancellationMode:str = obj["MXCancellationMode"]
      """  MXCancellationMode  """  
      self.INShippingPortCode:str = obj["INShippingPortCode"]
      """  Shipping Port Code  """  
      self.INExportProcedure:str = obj["INExportProcedure"]
      """  Export Procedure  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.DigitalSignature:str = obj["DigitalSignature"]
      """  DigitalSignature  """  
      self.SignedOn:str = obj["SignedOn"]
      """  SignedOn  """  
      self.SignedBy:str = obj["SignedBy"]
      """  SignedBy  """  
      self.FirstPrintDate:str = obj["FirstPrintDate"]
      """  FirstPrintDate  """  
      self.DocCopyNum:int = obj["DocCopyNum"]
      """  DocCopyNum  """  
      self.DepositBalance:int = obj["DepositBalance"]
      """  DepositBalance  """  
      self.DocDepositBalance:int = obj["DocDepositBalance"]
      """  DocDepositBalance  """  
      self.Rpt1DepositBalance:int = obj["Rpt1DepositBalance"]
      """  Rpt1DepositBalance  """  
      self.Rpt2DepositBalance:int = obj["Rpt2DepositBalance"]
      """  Rpt2DepositBalance  """  
      self.Rpt3DepositBalance:int = obj["Rpt3DepositBalance"]
      """  Rpt3DepositBalance  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this invoice record is associated with.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case related to this invoice.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this invoice.  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  Description	Indicates that the credit hold was overridden for this invoice.	The date and time the user override the invoice credit hold.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The user id that override the invoice credit hold.  """  
      self.CreditHold:bool = obj["CreditHold"]
      """  Indicates the invoice is on credit hold.  Applicable to miscellaneous invoices only.  """  
      self.PEXMLType:int = obj["PEXMLType"]
      """  Peru Electronic Invoice XML Type  """  
      self.COCreditMemoReasonCode:str = obj["COCreditMemoReasonCode"]
      """  COCreditMemoReasonCode  """  
      self.CODebitMemoReasonCode:str = obj["CODebitMemoReasonCode"]
      """  CODebitMemoReasonCode  """  
      self.COReasonDesc:str = obj["COReasonDesc"]
      """  COReasonDesc  """  
      self.CODebitNote:bool = obj["CODebitNote"]
      """  CODebitNote  """  
      self.PEDetractionTranNum:int = obj["PEDetractionTranNum"]
      """  PEDetractionTranNum  """  
      self.PEProductCode:str = obj["PEProductCode"]
      """  PEProductCode  """  
      self.PECollectionGroupID:str = obj["PECollectionGroupID"]
      """  PECollectionGroupID  """  
      self.PECaptionCode:str = obj["PECaptionCode"]
      """  PE Caption Code  """  
      self.PECaption:str = obj["PECaption"]
      """  PE Caption Code Description  """  
      self.PERefDocumentType:str = obj["PERefDocumentType"]
      """  PE Reference DocumentType 1  """  
      self.PERefDocumentNumber:str = obj["PERefDocumentNumber"]
      """  PE Reference Document Number 1  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PERefDocumentType2:str = obj["PERefDocumentType2"]
      """  PE Reference DocumentType 2  """  
      self.PERefDocumentType3:str = obj["PERefDocumentType3"]
      """  PE Reference DocumentType 3  """  
      self.PERefDocumentType4:str = obj["PERefDocumentType4"]
      """  PE Reference DocumentType 4  """  
      self.PERefDocumentType5:str = obj["PERefDocumentType5"]
      """  PE Reference DocumentType 5  """  
      self.PERefDocumentNumber2:str = obj["PERefDocumentNumber2"]
      """  PE Reference Document Number 2  """  
      self.PERefDocumentNumber3:str = obj["PERefDocumentNumber3"]
      """  PE Reference Document Number 3  """  
      self.PERefDocumentNumber4:str = obj["PERefDocumentNumber4"]
      """  PE Reference Document Number 4  """  
      self.PERefDocumentNumber5:str = obj["PERefDocumentNumber5"]
      """  PE Reference Document Number 5  """  
      self.ELIEInvoice:bool = obj["ELIEInvoice"]
      """  E-invoice  """  
      self.ELIEInvStatus:int = obj["ELIEInvStatus"]
      """  Status of E-invoice (1 - Open, 2 - Generated, 3 - Sent, 4 - Error).  """  
      self.ELIEInvUpdatedBy:str = obj["ELIEInvUpdatedBy"]
      """  User Id of the person generated E-invoice.  """  
      self.ELIEInvException:str = obj["ELIEInvException"]
      """  E-invoice error description.  """  
      self.ELIEInvUpdatedOn:str = obj["ELIEInvUpdatedOn"]
      """  Date and Time of E-invoice generation.  """  
      self.COOperType:str = obj["COOperType"]
      """  COOperType  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Invoice is for Central Collection.  """  
      self.CColChildCompany:str = obj["CColChildCompany"]
      """  Company that created this invoice.  """  
      self.CColParentCompany:str = obj["CColParentCompany"]
      """  Central Collection company.  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the invoicing company.  """  
      self.CColChildInvoiceNum:int = obj["CColChildInvoiceNum"]
      """  Invoice number on the invoicing company.  """  
      self.CColInvoiceNum:int = obj["CColInvoiceNum"]
      """  Invoice number on central collection company  """  
      self.CColChildLegalNumber:str = obj["CColChildLegalNumber"]
      """  Legal number on the invoicing company invoice.  """  
      self.CColLegalNumber:str = obj["CColLegalNumber"]
      """  Legal number on central collection company.  """  
      self.CColInvoiceRef:int = obj["CColInvoiceRef"]
      """  Invoice reference on the Invoicing Company.  """  
      self.CColInvBal:int = obj["CColInvBal"]
      """  Invoice Balance in the Central Collection company.  """  
      self.DocCColInvBal:int = obj["DocCColInvBal"]
      """  Central Collection Doc Invoice Balance.  """  
      self.CColInvAmt:int = obj["CColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.DocCColInvAmt:int = obj["DocCColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.Rpt1CColInvBal:int = obj["Rpt1CColInvBal"]
      """  Rpt 1 Parent Invoice Balance  """  
      self.Rpt2CColInvBal:int = obj["Rpt2CColInvBal"]
      """  Rpt 2 Parent Invoice Balance  """  
      self.Rpt3CColInvBal:int = obj["Rpt3CColInvBal"]
      """  Rpt 3 Parent Invoice Balance  """  
      self.Rpt1CColInvAmt:int = obj["Rpt1CColInvAmt"]
      """  Rpt 1 Child Invoice Amount  """  
      self.Rpt2CColInvAmt:int = obj["Rpt2CColInvAmt"]
      """  Rpt 2 Child Invoice Amount  """  
      self.Rpt3CColInvAmt:int = obj["Rpt3CColInvAmt"]
      """  Rpt 3 Child Invoice Amount  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.ELIEInvTerminalName:str = obj["ELIEInvTerminalName"]
      """  User terminal name  """  
      self.ELIEInvTerminalIP:str = obj["ELIEInvTerminalIP"]
      """  User terminal IP  """  
      self.Description:str = obj["Description"]
      """  GL Description  """  
      self.WithholdAcctToInterim:bool = obj["WithholdAcctToInterim"]
      """  WithholdAcctToInterim  """  
      self.CColOpenInvoice:bool = obj["CColOpenInvoice"]
      """  Indicates if the Central Collection parent invoice is open.  """  
      self.AGQRCodeData:str = obj["AGQRCodeData"]
      """  AGQRCodeData  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.ELIEInvID:str = obj["ELIEInvID"]
      """  EInvoice ID  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallLine:int = obj["CallLine"]
      """  this is a link to the service call line that this invoice is for.  Linetype = "CALL"  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.MXCancelReasonCode:str = obj["MXCancelReasonCode"]
      """  MXCancelReasonCode  """  
      self.MXSubstInvoiceNum:int = obj["MXSubstInvoiceNum"]
      """  MXSubstInvoiceNum  """  
      self.MXExportType:str = obj["MXExportType"]
      """  MXExportType  """  
      self.MXGlobalInvoicePeriod:str = obj["MXGlobalInvoicePeriod"]
      """  MXGlobalInvoicePeriod  """  
      self.MXGlobalInvoiceMonth:str = obj["MXGlobalInvoiceMonth"]
      """  MXGlobalInvoiceMonth  """  
      self.ELIEInvServiceProviderStatus:int = obj["ELIEInvServiceProviderStatus"]
      """  ELIEInvServiceProviderStatus  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.ABAmt:int = obj["ABAmt"]
      """  Total advanced billing amount.  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      """  Indicates if changes can occur after the document has been printed  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.ARPNHeadNum:int = obj["ARPNHeadNum"]
      """  ARPNHead's HeadNum  """  
      self.ARPromNoteID:str = obj["ARPromNoteID"]
      """  when InvcHead.PIPayment = O then populate ARPaymentInstrumentID with a value of PI.  """  
      self.AutoGenPN:bool = obj["AutoGenPN"]
      """  Auto generate payment instruments  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BankForPI:str = obj["BankForPI"]
      """  Used for Bill of Exchange.  Indicates the bank to use when a payment instrument for the invoice is created.  """  
      self.BankForPIName:str = obj["BankForPIName"]
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID for the bill to customer (InvcHead.CustNum).  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CNGTIAction:str = obj["CNGTIAction"]
      self.CNGTIAddress:str = obj["CNGTIAddress"]
      self.CNGTIBankAccount:str = obj["CNGTIBankAccount"]
      self.CNGTIComment:str = obj["CNGTIComment"]
      self.CNGTICustomerName:str = obj["CNGTICustomerName"]
      self.CNGTIExportAddress:str = obj["CNGTIExportAddress"]
      self.CNGTIGrossInvcAmt:int = obj["CNGTIGrossInvcAmt"]
      """  CSF China, Gross Invoice Amount  """  
      self.CNGTIInvoiceAmt:int = obj["CNGTIInvoiceAmt"]
      """  CSF China, Total invoice amount = InvcHead.InvoiceAmt - InvcHead.WithholdAmt  """  
      self.CNGTINote:str = obj["CNGTINote"]
      self.CNGTIShipToNum:str = obj["CNGTIShipToNum"]
      self.CNGTIStatus1:str = obj["CNGTIStatus1"]
      self.CNGTIStatus2:bool = obj["CNGTIStatus2"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.COIFRSCalculation:bool = obj["COIFRSCalculation"]
      """  IFRS Calculation. If the checkbox is not checked then all the elements below are disabled. If the checkbox is checked, then some elements below become enabled showing default values so that the NPV can be calculated  """  
      self.COIFRSEnabled:bool = obj["COIFRSEnabled"]
      """  If true then Colombia IFRS Net Present Value calculation is enabled  """  
      self.COIFRSFinancialCharge:int = obj["COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.COIFRSInterestRate:int = obj["COIFRSInterestRate"]
      self.COIFRSNumberOfPeriods:int = obj["COIFRSNumberOfPeriods"]
      """  Number of Periods for payment  """  
      self.COIFRSPresentValue:int = obj["COIFRSPresentValue"]
      """  Present Value  """  
      self.CollectionsInv:bool = obj["CollectionsInv"]
      """  Indicates if Invoice is in Collections (Peru localization)  """  
      self.ContactEmailAddr:str = obj["ContactEmailAddr"]
      """  Contact email address.  """  
      self.ContactFaxNum:str = obj["ContactFaxNum"]
      """  Contact fax number  """  
      self.ContactName:str = obj["ContactName"]
      """  Contact name  """  
      self.ContactPhoneNum:str = obj["ContactPhoneNum"]
      """  Contact phone number  """  
      self.ConvertedFromDep:bool = obj["ConvertedFromDep"]
      """  record converted from deposit  """  
      self.COOperTypeDesc:str = obj["COOperTypeDesc"]
      self.CountryIntrastat:bool = obj["CountryIntrastat"]
      """  True if the Country set for the current company contains an Intrastat code.  """  
      self.CumulativeBalance:int = obj["CumulativeBalance"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CurrentInstanceNum:int = obj["CurrentInstanceNum"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DepBal:int = obj["DepBal"]
      """  Deposit balance from CashHed  """  
      self.DepositCreditEnabled:bool = obj["DepositCreditEnabled"]
      """  Deposit credit enabled flag.  """  
      self.DirectDebiting:bool = obj["DirectDebiting"]
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """  The flag to indicate if Invoice Header Apply Date is supposed to be Read Only  """  
      self.DispBalDN:int = obj["DispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DisplayBillAddr:str = obj["DisplayBillAddr"]
      """  Bill to address in list format.  """  
      self.DisplayCreditCardNum:str = obj["DisplayCreditCardNum"]
      """  Display field for the masked credit card number  """  
      self.DisplayCurrencyID:str = obj["DisplayCurrencyID"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DNPmtAmt:int = obj["DNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocABAmt:int = obj["DocABAmt"]
      """  Document Total advanced billing amount.  """  
      self.DocCOIFRSFinancialCharge:int = obj["DocCOIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.DocCOIFRSPresentValue:int = obj["DocCOIFRSPresentValue"]
      """  Present Value  """  
      self.DocCumulativeBalance:int = obj["DocCumulativeBalance"]
      self.DocDepBal:int = obj["DocDepBal"]
      """  Document deposit amount from cashhead.  """  
      self.DocDispBalDN:int = obj["DocDispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocDNPmtAmt:int = obj["DocDNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocDspPrepDeposit:int = obj["DocDspPrepDeposit"]
      self.DocDspTaxAmt:int = obj["DocDspTaxAmt"]
      self.DocPESUNATDepAmt:int = obj["DocPESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.DocRemainTaxAmt:int = obj["DocRemainTaxAmt"]
      self.DocReverseTaxAmt:int = obj["DocReverseTaxAmt"]
      self.DocSATaxAmt:int = obj["DocSATaxAmt"]
      self.DocSourceRecurBalance:int = obj["DocSourceRecurBalance"]
      self.DocSubTotal:int = obj["DocSubTotal"]
      """  Document sub total  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document Total tax amount from InvcTax for Collection type 'Invoice'  """  
      self.DocVr:int = obj["DocVr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in document currency.  """  
      self.DocWHTaxAmt:int = obj["DocWHTaxAmt"]
      self.DspABAmt:int = obj["DspABAmt"]
      """  Display advance billing amount  """  
      self.DspDepBal:int = obj["DspDepBal"]
      """  Display deposit balance.  """  
      self.DspDepCr:int = obj["DspDepCr"]
      """  Display deposit credit.  """  
      self.DspDigitalSignature:str = obj["DspDigitalSignature"]
      self.DspDocABAmt:int = obj["DspDocABAmt"]
      """  Display document advance billing amount  """  
      self.DspDocDepBal:int = obj["DspDocDepBal"]
      """  Display document deposit balance  """  
      self.DspDocDepCr:int = obj["DspDocDepCr"]
      """  Display document deposit credit.  """  
      self.DspDocInvoiceAmt:int = obj["DspDocInvoiceAmt"]
      """  Display document invoice amount  """  
      self.DspDocInvoiceBal:int = obj["DspDocInvoiceBal"]
      """  Display document invoice balance  """  
      self.DspDocRounding:int = obj["DspDocRounding"]
      """  Display Invoice Doc Rounding  """  
      self.DspDocSubTotal:int = obj["DspDocSubTotal"]
      """  display document sub total  """  
      self.DspInvoiceAmt:int = obj["DspInvoiceAmt"]
      """  Display invoice amount  """  
      self.DspInvoiceBal:int = obj["DspInvoiceBal"]
      """  Display Invoice Balance.  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display invoice reference  """  
      self.DspPayDiscDays:str = obj["DspPayDiscDays"]
      self.DspPrepDeposit:int = obj["DspPrepDeposit"]
      self.DspRounding:int = obj["DspRounding"]
      """  Display Rounding in Base  """  
      self.dspSoldToCustID:str = obj["dspSoldToCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.DspSubTotal:int = obj["DspSubTotal"]
      """  Display sub total  """  
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      """  Indicates if assign legal number option is available.  """  
      self.EnableCentralCollection:bool = obj["EnableCentralCollection"]
      self.EnableSOCCDefaults:bool = obj["EnableSOCCDefaults"]
      """  Flag to determine if UseSOCCDefaults should be enabled.  """  
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Indicates if TranDocTypeID is available for input.  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      """  Indicates if the void legal number option is available  """  
      self.ERSInvoice:bool = obj["ERSInvoice"]
      """  It will be displayed to identify invoices automatically generated due ERS shipments.  """  
      self.ExchangeRateDate:str = obj["ExchangeRateDate"]
      """  Indicates which date to be used to calculate the exchange rate, I for Invoice Date, A for Apply Date.  """  
      self.GenedFromRMA:bool = obj["GenedFromRMA"]
      """  Flag for update of InvcHead to allow when group id is "RMACRREQ"  """  
      self.HasBank:bool = obj["HasBank"]
      """  CustBank record exists for customer  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      """  Indicates if a legal number configuration exists for ar invoices/credit memos  """  
      self.InPriceLn:bool = obj["InPriceLn"]
      """  In case if Invoice Header Tax Liability is not assigned this flag indicates if any of Invoice lines has Tax inclusive Tax Liability assinged  """  
      self.IntInvoiceType:str = obj["IntInvoiceType"]
      """  Integration invoice type.  Used for setting of InvoiceType.  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  InvoiceType description  """  
      self.IsDK:bool = obj["IsDK"]
      """  Denmark localization external field  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsLatestRecurrence:bool = obj["IsLatestRecurrence"]
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.IsPIUnappliedReceipt:bool = obj["IsPIUnappliedReceipt"]
      """  Indicates if the UR Invoice was created from an On Account PI instead of an on account cash receipt.  """  
      self.IsPMForGenPIType:bool = obj["IsPMForGenPIType"]
      self.LatestInvoice:int = obj["LatestInvoice"]
      self.LegalNumberMessage:str = obj["LegalNumberMessage"]
      """  Stores the message when a legal number is generated.  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.MXCancellationID:str = obj["MXCancellationID"]
      """  MXCancellationID  """  
      self.MXCancellationStatus:str = obj["MXCancellationStatus"]
      """  MXCancellationStatus  """  
      self.NeedConfirmTaxes:bool = obj["NeedConfirmTaxes"]
      """  It indicates that this Invoice has taxes, for which the confirmation is required.  """  
      self.NextDiscDate:str = obj["NextDiscDate"]
      """  This field is to display in Cash Receipt Entry the Discount Date that the payment will take.  """  
      self.NextInvoiceDate:str = obj["NextInvoiceDate"]
      """  NextInvoiceDate = InvcRecurringCycle.LastDate + RecurringCycle.Interval in RecurringCycle.Modifier units  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number from the 1st line item.  """  
      self.PaySchedEnabled:bool = obj["PaySchedEnabled"]
      """  Pay schedule enabled flag  """  
      self.PEBOEChangeStatusTo:str = obj["PEBOEChangeStatusTo"]
      """  Indicates what the user will change the status to  """  
      self.PEBOEStatusDesc:str = obj["PEBOEStatusDesc"]
      self.PECollectionsDate:str = obj["PECollectionsDate"]
      """  Peru CSF: Collections date  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEInCollections:bool = obj["PEInCollections"]
      """  Peru CSF: No if the invoice is moved out of collections, Yes if the invoice is moved into colletions.  """  
      self.PERefDocumentTypeDesc:str = obj["PERefDocumentTypeDesc"]
      """  PE Document Type Description  """  
      self.PERefDocumentTypeDesc2:str = obj["PERefDocumentTypeDesc2"]
      """  PE Document Type Description 2  """  
      self.PERefDocumentTypeDesc3:str = obj["PERefDocumentTypeDesc3"]
      """  PE Document Type Description 3  """  
      self.PERefDocumentTypeDesc4:str = obj["PERefDocumentTypeDesc4"]
      """  PE Document Type Description 4  """  
      self.PERefDocumentTypeDesc5:str = obj["PERefDocumentTypeDesc5"]
      """  PE Document Type Description 5  """  
      self.PIBankAcctID:str = obj["PIBankAcctID"]
      """  PI - Bank account  """  
      self.PICustBankDtl:bool = obj["PICustBankDtl"]
      """  PI Customer bank required  """  
      self.PIInitiation:str = obj["PIInitiation"]
      """  PI Initiation - generated or received  """  
      self.PrepDepositEnabled:bool = obj["PrepDepositEnabled"]
      """  Prep Deposit enabled flag.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      """  The description of the proposed Tax Region  """  
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.Recurring:bool = obj["Recurring"]
      """  Recurring flag  """  
      self.RemainTaxAmt:int = obj["RemainTaxAmt"]
      self.ReminderSeq:int = obj["ReminderSeq"]
      self.ReversalDocAmt:int = obj["ReversalDocAmt"]
      """  Accumulate all reversal amounts of Credit Memos with the reference to the invoice  """  
      self.ReverseTaxAmt:int = obj["ReverseTaxAmt"]
      self.Rpt1ABAmt:int = obj["Rpt1ABAmt"]
      self.Rpt1COIFRSFinancialCharge:int = obj["Rpt1COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt1COIFRSPresentValue:int = obj["Rpt1COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt1CumulativeBalance:int = obj["Rpt1CumulativeBalance"]
      self.Rpt1DepBal:int = obj["Rpt1DepBal"]
      self.Rpt1DspABAmt:int = obj["Rpt1DspABAmt"]
      self.Rpt1DspDepBal:int = obj["Rpt1DspDepBal"]
      self.Rpt1DspDepCr:int = obj["Rpt1DspDepCr"]
      self.Rpt1DspInvoiceAmt:int = obj["Rpt1DspInvoiceAmt"]
      self.Rpt1DspInvoiceBal:int = obj["Rpt1DspInvoiceBal"]
      self.Rpt1DspPrepDeposit:int = obj["Rpt1DspPrepDeposit"]
      self.Rpt1DspRounding:int = obj["Rpt1DspRounding"]
      self.Rpt1DspSubTotal:int = obj["Rpt1DspSubTotal"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt1RemainTaxAmt:int = obj["Rpt1RemainTaxAmt"]
      self.Rpt1ReverseTaxAmt:int = obj["Rpt1ReverseTaxAmt"]
      self.Rpt1SATaxAmt:int = obj["Rpt1SATaxAmt"]
      self.Rpt1SourceRecurBalance:int = obj["Rpt1SourceRecurBalance"]
      self.Rpt1SubTotal:int = obj["Rpt1SubTotal"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt1Vr:int = obj["Rpt1Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt1 currency.  """  
      self.Rpt1WHTaxAmt:int = obj["Rpt1WHTaxAmt"]
      self.Rpt2ABAmt:int = obj["Rpt2ABAmt"]
      self.Rpt2COIFRSFinancialCharge:int = obj["Rpt2COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt2COIFRSPresentValue:int = obj["Rpt2COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt2CumulativeBalance:int = obj["Rpt2CumulativeBalance"]
      self.Rpt2DepBal:int = obj["Rpt2DepBal"]
      self.Rpt2DspABAmt:int = obj["Rpt2DspABAmt"]
      self.Rpt2DspDepBal:int = obj["Rpt2DspDepBal"]
      self.Rpt2DspDepCr:int = obj["Rpt2DspDepCr"]
      self.Rpt2DspInvoiceAmt:int = obj["Rpt2DspInvoiceAmt"]
      self.Rpt2DspInvoiceBal:int = obj["Rpt2DspInvoiceBal"]
      self.Rpt2DspPrepDeposit:int = obj["Rpt2DspPrepDeposit"]
      self.Rpt2DspRounding:int = obj["Rpt2DspRounding"]
      self.Rpt2DspSubTotal:int = obj["Rpt2DspSubTotal"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt2RemainTaxAmt:int = obj["Rpt2RemainTaxAmt"]
      self.Rpt2ReverseTaxAmt:int = obj["Rpt2ReverseTaxAmt"]
      self.Rpt2SATaxAmt:int = obj["Rpt2SATaxAmt"]
      self.Rpt2SourceRecurBalance:int = obj["Rpt2SourceRecurBalance"]
      self.Rpt2SubTotal:int = obj["Rpt2SubTotal"]
      self.Rpt2Taxamt:int = obj["Rpt2Taxamt"]
      self.Rpt2Vr:int = obj["Rpt2Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt2 currency.  """  
      self.Rpt2WHTaxAmt:int = obj["Rpt2WHTaxAmt"]
      self.Rpt3ABAmt:int = obj["Rpt3ABAmt"]
      self.Rpt3COIFRSFinancialCharge:int = obj["Rpt3COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt3COIFRSPresentValue:int = obj["Rpt3COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt3CumulativeBalance:int = obj["Rpt3CumulativeBalance"]
      self.Rpt3DepBal:int = obj["Rpt3DepBal"]
      self.Rpt3DspABAmt:int = obj["Rpt3DspABAmt"]
      self.Rpt3DspDepBal:int = obj["Rpt3DspDepBal"]
      self.Rpt3DspDepCr:int = obj["Rpt3DspDepCr"]
      self.Rpt3DspInvoiceAmt:int = obj["Rpt3DspInvoiceAmt"]
      self.Rpt3DspInvoiceBal:int = obj["Rpt3DspInvoiceBal"]
      self.Rpt3DspPrepDeposit:int = obj["Rpt3DspPrepDeposit"]
      self.Rpt3DspRounding:int = obj["Rpt3DspRounding"]
      self.Rpt3DspSubTotal:int = obj["Rpt3DspSubTotal"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.Rpt3RemainTaxAmt:int = obj["Rpt3RemainTaxAmt"]
      self.Rpt3ReverseTaxAmt:int = obj["Rpt3ReverseTaxAmt"]
      self.Rpt3SATaxAmt:int = obj["Rpt3SATaxAmt"]
      self.Rpt3SourceRecurBalance:int = obj["Rpt3SourceRecurBalance"]
      self.Rpt3SubTotal:int = obj["Rpt3SubTotal"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt3Vr:int = obj["Rpt3Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt3 currency.  """  
      self.Rpt3WHTaxAmt:int = obj["Rpt3WHTaxAmt"]
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st entry in SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd entry in SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd entry in SalesRepList.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th entry in SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th entry in SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.SATaxAmt:int = obj["SATaxAmt"]
      self.Selected:bool = obj["Selected"]
      """  Boolean for selection of invoices in grid  """  
      self.SkipRecurring:bool = obj["SkipRecurring"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SourceInvoiceNum:int = obj["SourceInvoiceNum"]
      self.SourceLastDate:str = obj["SourceLastDate"]
      self.SourceRecurBalance:int = obj["SourceRecurBalance"]
      self.SubTotal:int = obj["SubTotal"]
      """  Sub total for invoice  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  The system transaction type - ARInvoice or CreditMemo.  Used to filter combo list for TranDocTypeID.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax amount from InvcTax  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.TaxRgnLineChange:bool = obj["TaxRgnLineChange"]
      """  The flag to indicate if the user is supposed to be asked about Tax Liability change  """  
      self.TotalInstanceNum:int = obj["TotalInstanceNum"]
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.UseSOCCDefaults:bool = obj["UseSOCCDefaults"]
      """  If true, the credit card info will come from the sales order.  """  
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.VNInvDescription:str = obj["VNInvDescription"]
      self.VNInvoiceType:str = obj["VNInvoiceType"]
      self.Vr:int = obj["Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in base currency.  """  
      self.WHTaxAmt:int = obj["WHTaxAmt"]
      self.XRateLabel:str = obj["XRateLabel"]
      """  Currency label  """  
      self.zEnableCreditHold:bool = obj["zEnableCreditHold"]
      self.AgingDays:int = obj["AgingDays"]
      """  The number of days the invoice is past due.  """  
      self.ELIEInvProhibitedStatuses:str = obj["ELIEInvProhibitedStatuses"]
      """   The list of prohibited statuses.for the Invoice
For examle, if contains 2 (EINVOICE_STATUS_GENERATED) then Generate E-invoice is not allowed.
if contains 2 (EINVOICE_STATUS_SENT) then Sending Invoice via Service provider is not allowed  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AGInvoicingPointDescription:str = obj["AGInvoicingPointDescription"]
      self.ARSystLNReqForInvc:bool = obj["ARSystLNReqForInvc"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrRateGrpDescription:str = obj["CurrRateGrpDescription"]
      self.CustomerInactive:bool = obj["CustomerInactive"]
      self.CustomerMXGeneralPublic:bool = obj["CustomerMXGeneralPublic"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerELISendingOption:int = obj["CustomerELISendingOption"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MXPurchaseTypeCodeDesc:str = obj["MXPurchaseTypeCodeDesc"]
      self.MXSubstInvoiceMXFiscalFolio:str = obj["MXSubstInvoiceMXFiscalFolio"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OurBankPayerRef:str = obj["OurBankPayerRef"]
      self.OurBankBankIdentifier:str = obj["OurBankBankIdentifier"]
      self.OurBankTypeCode:str = obj["OurBankTypeCode"]
      self.OurBankBankAcctID:str = obj["OurBankBankAcctID"]
      self.OurBankCheckingAccount:str = obj["OurBankCheckingAccount"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.OurBankIBANCode:str = obj["OurBankIBANCode"]
      self.OurBankLocalBIC:str = obj["OurBankLocalBIC"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PlantName:str = obj["PlantName"]
      self.ProjectDescription:str = obj["ProjectDescription"]
      self.RecurringCycleMaximumValue:bool = obj["RecurringCycleMaximumValue"]
      self.SoldToCustNumInactive:bool = obj["SoldToCustNumInactive"]
      self.SoldToCustNumCustID:str = obj["SoldToCustNumCustID"]
      self.SoldToCustNumName:str = obj["SoldToCustNumName"]
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.XbSystOCRCalcType:bool = obj["XbSystOCRCalcType"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LocationInventoryRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.LocationNum:int = obj["LocationNum"]
      """  Unique ID for Location Inventory record  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number of item actually shipped. Duplicated from OrderDtl.PartNum at time of creation.  """  
      self.Plant:str = obj["Plant"]
      """  Site that the shipment is from.  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this detail record is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  An integer that uniquely identifies a detail record within a Packing slip.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  The sales order number that this detail shipment line is linked to.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  The sales order line that this shipment detail line is linked to.  M  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The sales order release number that this shipment detail is linked to.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number that supplied the quantity that was shipped.  """  
      self.CurrentOwner:str = obj["CurrentOwner"]
      """  This is the current owner.  Valid values are (D)istributor, (C)ustomer  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Order Comment  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Description  """  
      self.Listing:str = obj["Listing"]
      """  The type of listing the location inventory item is: L=Leaser, S=Sale  """  
      self.ListingStartDate:str = obj["ListingStartDate"]
      """  Date when the location inventory was listed.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty that ties this record to a type of warranty.  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  Warranty Comment  """  
      self.WarrantyStartDate:str = obj["WarrantyStartDate"]
      """  Date the warrany started.  """  
      self.WarrantyExpirationDate:str = obj["WarrantyExpirationDate"]
      """  Date the warranty will expired.  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Num  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  Serial number of part.  """  
      self.IDNum:str = obj["IDNum"]
      """  Identification Number (example HIN, VIN).  """  
      self.WarrantyTransfer:str = obj["WarrantyTransfer"]
      """  What kind of warranty transfer this is: (F)ull/(L)imited/(N)o  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different Part number.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.InventoryAttributeSetID:int = obj["InventoryAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AddrList:str = obj["AddrList"]
      """  Shipping Address  """  
      self.BillAddr:str = obj["BillAddr"]
      """  Billing Address  """  
      self.ExtAddress1:str = obj["ExtAddress1"]
      self.ExtAddress2:str = obj["ExtAddress2"]
      self.ExtAddress3:str = obj["ExtAddress3"]
      self.ExtCity:str = obj["ExtCity"]
      self.ExtContact:str = obj["ExtContact"]
      self.ExtCountryNum:int = obj["ExtCountryNum"]
      self.ExtEmailAddress:str = obj["ExtEmailAddress"]
      self.ExtFaxNum:str = obj["ExtFaxNum"]
      self.ExtName:str = obj["ExtName"]
      self.ExtPhoneNum:str = obj["ExtPhoneNum"]
      self.ExtState:str = obj["ExtState"]
      self.ExtZIP:str = obj["ExtZIP"]
      self.NewAddrList:str = obj["NewAddrList"]
      self.NewCustID:str = obj["NewCustID"]
      self.NewCustNum:int = obj["NewCustNum"]
      self.NewShipToNum:str = obj["NewShipToNum"]
      self.NewUseOTMF:bool = obj["NewUseOTMF"]
      self.TrackIDNum:bool = obj["TrackIDNum"]
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      self.TranComment:str = obj["TranComment"]
      """  Transaction Comment  """  
      self.UseOTMF:bool = obj["UseOTMF"]
      """  Use OTS  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.ShipToNum:str = obj["ShipToNum"]
      self.SoldToAddrList:str = obj["SoldToAddrList"]
      """  Sold to address  """  
      self.OwnerAddrList:str = obj["OwnerAddrList"]
      """  Owner address.  """  
      self.LocationAddrList:str = obj["LocationAddrList"]
      """  Location Address.  """  
      self.TransferAddrType:str = obj["TransferAddrType"]
      """  Where is the transfer going to: (N)o Address Change,  (L)ocation, (O)wner, (B)oth.  Blank will be for a warranty change only.  """  
      self.OwnerBusinessModel:str = obj["OwnerBusinessModel"]
      """  Owner Busines Model  """  
      self.LocationBusinessModel:str = obj["LocationBusinessModel"]
      """  Location Business Model  """  
      self.OwnerCustID:str = obj["OwnerCustID"]
      """  Owner Customer ID  """  
      self.OwnerShipToNum:str = obj["OwnerShipToNum"]
      """  Owner Ship To.  """  
      self.OwnerUseOTMF:bool = obj["OwnerUseOTMF"]
      """  Owner Use One Time Mark For.  """  
      self.LocationCustID:str = obj["LocationCustID"]
      """  Location Customer ID.  """  
      self.LocationShipToNum:str = obj["LocationShipToNum"]
      """  Location Ship To.  """  
      self.LocationUseOTMF:bool = obj["LocationUseOTMF"]
      """  Location Use One Time Mark For.  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold To Customer ID.  """  
      self.SoldToShipToNum:str = obj["SoldToShipToNum"]
      """  Sold To Ship To.  """  
      self.SoldToUseOTMF:bool = obj["SoldToUseOTMF"]
      """  Sold To Use Ont Time Mark For.  """  
      self.SoldToBusinessModel:str = obj["SoldToBusinessModel"]
      """  Sold To Business Model  """  
      self.OwnerAddrType:str = obj["OwnerAddrType"]
      """  Addres type of owner : L=Locatoin, O=Owner, S=Sold To  """  
      self.EffectiveDate:str = obj["EffectiveDate"]
      """  Date when transfer occured - writes to LocationTran.EffectiveDate  """  
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      self.NewConNum:int = obj["NewConNum"]
      """  Establishes the contact to be used for the Location Inventory Address records. The contact will be specific for the address type (Lease, Owner, Sold To).  Contains the key value for the contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table.  """  
      self.LocationAttn:str = obj["LocationAttn"]
      """  External field to hold the name of the selected customer contact for the Location record  """  
      self.NewConName:str = obj["NewConName"]
      """  External field to hold the name of the selected customer contact for the selected record  """  
      self.OwnerAttn:str = obj["OwnerAttn"]
      """  External field to hold the name of the selected customer contact for the Owner record  """  
      self.BitFlag:int = obj["BitFlag"]
      self.FSWarrCdWarrDescription:str = obj["FSWarrCdWarrDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LocationMtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobComplete:bool = obj["JobComplete"]
      """  Indicates if  "Job"  is complete.  This is a mirror image of JobHead.Complete.  Not directly maintainable.  When the Job is completed, then all JobMtl records are also marked.  This is used to make database access to open material records more efficient.  """  
      self.IssuedComplete:bool = obj["IssuedComplete"]
      """  Indicates if this material requirement has been issued complete.  If "yes" then this record is NOT part of the Part.AllocQty total even if it had been issued less than the original required quantity.  The user may toggle the setting if the JobHead.Complete is "NO".  When it is toggled the allocation logic will be triggered if necessary.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  This is system assigned.  The next available number is determined by reading last JobMtl record on the Job/Assembly and then adding ten to it.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number.  If the material is being purchased (JobMtl.BuyIt = yes) this does need to be a valid part in the Part file.  """  
      self.Description:str = obj["Description"]
      """  A description of the material.  """  
      self.QtyPer:int = obj["QtyPer"]
      """  Quantity per parent.  Field Service was EstQty in FSCallMt.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required Quantity per END ITEM.  This is a calculated field.  Calculated as (Parent Required Qty X QtyPer) + calculated Scrap.  The parent quantity is either the JobHead.ProdQty if  JobMtl.AssemblySeq = 0 or (JobAsmbl.RequireQty - JobAsmbl.PullQty) if JobMtl.AssemblySeq > 0.  """  
      self.IUM:str = obj["IUM"]
      """  Internal unit of measure.  The unit used to measure the material.  """  
      self.LeadTime:int = obj["LeadTime"]
      """  Expected purchasing lead time (in days).  This field is only valid if JobMtl.BuyIt = yes.  This can be used to calculate a suggested "Order By Date" based off the Required Date field.  When scheduling the job, purchased material can push a schedule out if the material lead time prevents the material from being available when the operation could start.  """  
      self.RelatedOperation:int = obj["RelatedOperation"]
      """  A material record can be related to a specific operation.  This field contains the JobOper.OprSeq of the operation that it is related to.  It can be left as zero meaning that this material is required at the very beginning of the production job.  The related operation is also used to calculate the JobMtl.ReqDate based on the operations scheduled start date and materials lead time.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this Job Material.  """  
      self.EstMtlBurUnitCost:int = obj["EstMtlBurUnitCost"]
      """  Estimated Material Burden Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.EstUnitCost:int = obj["EstUnitCost"]
      """  Estimated Unit Cost of the material.  Defaults from the Part table if valid PartNum.  """  
      self.IssuedQty:int = obj["IssuedQty"]
      """  This quantity is a summary of all Issue Transactions.  For FS this was FSCallMt.ActQty  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Total cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  FS - was UnitCost in FSCallMt  """  
      self.MtlBurCost:int = obj["MtlBurCost"]
      """  Total Material Burden cost to date.  A summary of issue transactions.  This DOES NOT include the salvageable scrap credit amounts.  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  The warehouse that the material is allocated against.  """  
      self.SalvagePartNum:str = obj["SalvagePartNum"]
      """  Part number for salvageable scrap from this material record.  An optional field.  This does not have to be valid in the Part master. Salvage info is mainly to allow the credit back to a job for this type of scrap via salvage receipt process.  """  
      self.SalvageDescription:str = obj["SalvageDescription"]
      """  Description of Salvageable material.  Use Part.Description for a default.  """  
      self.SalvageQtyPer:int = obj["SalvageQtyPer"]
      """  A factor that multiplied by the JobMtl.RequiredQty results in the expected total salvage quantity.  """  
      self.SalvageUM:str = obj["SalvageUM"]
      """  Default unit of measure for the Salvaged Part.  Default from the Part.IUM.  """  
      self.SalvageMtlBurRate:int = obj["SalvageMtlBurRate"]
      """  The salvage material burden rate for this Job Material.  """  
      self.SalvageUnitCredit:int = obj["SalvageUnitCredit"]
      """  Estimated Salvage Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageEstMtlBurUnitCredit:int = obj["SalvageEstMtlBurUnitCredit"]
      """  Estimated Salvage Mtl burden Unit Credit.  Use the appropriate cost from the Part master as a default.  """  
      self.SalvageQtyToDate:int = obj["SalvageQtyToDate"]
      """  This quantity is a summary of all transactions for receipt of salvage to inventory.  This is not directly maintainable.  """  
      self.SalvageCredit:int = obj["SalvageCredit"]
      """  Total salvage credit to date.  A summary of salvage receipt transactions.  """  
      self.SalvageMtlBurCredit:int = obj["SalvageMtlBurCredit"]
      """  Total salvage Mtl Burden credit to date.  A summary of salvage receipt transactions.  """  
      self.MfgComment:str = obj["MfgComment"]
      """  Comments for manufacturing about this material record.  These comments are printed on manufacturing reports, such as the router.  For valid Parts use the Part.MfgComment as a default.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Used to identify a default vendor.  Use the Part.VendorNum as a default.  This will be used as a default for purchasing and miscellaneous receipts.  This field is not directly maintainable, instead its assigned by having the user either entering the "VendorID" and then finding the VendorNum in the Vendor file or by selection list processing.  An optional field, but if entered must be valid.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors Purchase Point ID.  Along with the VendorNum is used to tie back to the VendorPP master file.  Use the default purchase point defined in the Vendor file.  """  
      self.BuyIt:bool = obj["BuyIt"]
      """  Indicates if this material is to be purchased for the Job.  If this is a non inventory part then this is "Yes" and cannot be changed.  If this is a valid Part then set it to "NO" but the user can override it. Material that is marked to be purchased (BuyIt = Yes) are NOT included in the PartWhse.AllocatedQty.  """  
      self.Ordered:bool = obj["Ordered"]
      """  FUTURE IMPLEMENTATION.  This logical relates to material that is flagged to be purchased (BuyIt = Yes).  When purchase orders are created for this job material requirement this flag is set to Yes indicating that a purchase order has been placed.  The idea would be to use this within purchasing to quickly see the "direct job requirements" where no purchase orders have been placed.  """  
      self.PurComment:str = obj["PurComment"]
      """  Comments for purchasing about this material record on this job. These comments will be used as defaults to the PODetail.Comment field when the purchase order references this JobMtl record.  """  
      self.BackFlush:bool = obj["BackFlush"]
      """  Indicates if this material will be backflushed.  Note: this field is defaulted from Part.BackFlush Backflushing occurs via the write trigger on LaborDtl.  The basic idea is to issue material based on the labor quantities reported. The formula for the issue quantity is: (JobMtl.RequiredQty/JobOper.RunQty) * (LaborDtl.LaborQty + LaborDtl.SrapQty).  """  
      self.EstScrap:int = obj["EstScrap"]
      """  Estimated Scrap.  """  
      self.EstScrapType:str = obj["EstScrapType"]
      """  Qualifies the EstScrapQty entry as being a fixed quantity or a percentage of required quantity.  """  
      self.FixedQty:bool = obj["FixedQty"]
      """  Indicates if the QtyPer field represents a "Fixed Quantity".  If Yes, then the required quantity = QtyPer.  That is, the quantity does not change as the number of pieces being produced changes.  This can be used to enter Tooling or Fixture type of requirements.  """  
      self.FindNum:str = obj["FindNum"]
      """  Characters used on the drawing to show where material is used.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision number for the material.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.SndAlrtCmpl:bool = obj["SndAlrtCmpl"]
      """  Controls if an alert is to be sent when this JobMtl is completed.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if inspection is required when items are received to this JobMtl.  Inspection may also be enforced if the related PartClass, Vendor, PODetail have their "RcvInspectionReq" fields set to Yes.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.Direct:bool = obj["Direct"]
      """  Indicates if this material requirement is going to be satisfied by another job (possibly in another Site), as opposed to a warehouse.  If "yes" a WarehouseCode will not be specified.  """  
      self.MaterialMtlCost:int = obj["MaterialMtlCost"]
      """  Total Mtl cost to date.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  MaterialMtlCost +  MaterialLabCost +  MaterialSubCost + MaterialBurCost = TotalCost  """  
      self.MaterialLabCost:int = obj["MaterialLabCost"]
      """  Total Lab cost to date from parts issued from inventory.  A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialSubCost:int = obj["MaterialSubCost"]
      """  Total  Sub cost to date from part issued from inventory.  A summary of issue transactions used track all costs for manufacured parts that were received into inventory then issued as material..  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.MaterialBurCost:int = obj["MaterialBurCost"]
      """  Total Bur cost to date from part issued from inventory.   A summary of issue transactions - used track all costs for manufacured parts that were received into inventory then issued as material.  IssuedMtlCost + IssuedLabCost + IssuedSubCost + IssuedBurCost = TotalCost  """  
      self.SalvageMtlCredit:int = obj["SalvageMtlCredit"]
      """  Total salvage Mtl credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageLbrCredit:int = obj["SalvageLbrCredit"]
      """  Total salvage Lbr credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageBurCredit:int = obj["SalvageBurCredit"]
      """  Total salvage Burden credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.SalvageSubCredit:int = obj["SalvageSubCredit"]
      """  Total salvage Subcontract credit to date.  A summary of salvage receipt transactions.  SalvageCredit = SalvageMtlCredit + SalvageLbrCredit + SalvageBurCredit + SalvageSubCredit  """  
      self.APSAddResType:str = obj["APSAddResType"]
      """  Advanced Planning and Scheduling Additional Resource Type.  Indicates whether the Part should be treated as an AdditionalResourceType by eScheduler: 'I' to ignore in eScheduler.  """  
      self.CallNum:int = obj["CallNum"]
      """  The service call that this Material belongs to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this material relates to.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  FS - Unit Price for the Material in base currency.  """  
      self.BillableUnitPrice:int = obj["BillableUnitPrice"]
      """  FS - Billable Unit Price for the Material in base currency.  """  
      self.DocBillableUnitPrice:int = obj["DocBillableUnitPrice"]
      """  FS - Billable Price per unit for the material in customers currency.  """  
      self.ResReasonCode:str = obj["ResReasonCode"]
      """  Problem reason code from the reason master table. type Service call.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each,"C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E".  """  
      self.Billable:bool = obj["Billable"]
      """  Is this a billable material item.  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """  Holds the quantity of the item that has been shipped through misc.  shipments  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  FS - Unit Price for the Material in Customer currency.  """  
      self.QtyStagedToDate:int = obj["QtyStagedToDate"]
      """  The todate quantity that has been moved to the work centers input Warehouse/Bin.  This is NOT A balance.  It is a todate value. It is not reduced as it is consumed. Used in calculation of "Outstanding" material in the Request Material program (ame30-dg.w). Only updated if the Advanced Material Mgmt module is installed and only by transactions which "move" the material in/out of the staging area(Issues,Returns).  """  
      self.AddedMtl:bool = obj["AddedMtl"]
      """  This material was added after initial setup of the job  """  
      self.MiscCharge:bool = obj["MiscCharge"]
      """  This indicates that this JobMtl record is for a Misc charge related to this job/assembly.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.   It must be a AP Misc. charge.  """  
      self.SCMiscCode:str = obj["SCMiscCode"]
      """  The Miscellaneous Charge Code for Service Call billing. This must be valid in the MiscChrg master file.   It must be a AR Misc. charge.  """  
      self.RFQNeeded:bool = obj["RFQNeeded"]
      """  A flag to indicate that this job material requires an RFQ.  If it does require an RFQ, the user must enter the number of vendor quotes that are required.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this job material.  Can be zero if RFQ(s) are not required.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.RFQStat:str = obj["RFQStat"]
      """  RFQ SRFQ Status: W= Waiting, A = Accepted, R = Requested, C = Receivedtatus.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.GlbRFQ:bool = obj["GlbRFQ"]
      """  Global RFQ flag.  Used in Consolidated Purchasing.  """  
      self.WhseAllocFlag:bool = obj["WhseAllocFlag"]
      """  Indicates if the PartWhse allocation needs to be/has been updated by the new time delated process.  """  
      self.WIReqDate:str = obj["WIReqDate"]
      """  Mirror image of related operation (JobOper) or assembly (JobAsmbl) Start Date. (system maintained)  """  
      self.Rpt1BillableUnitPrice:int = obj["Rpt1BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2BillableUnitPrice:int = obj["Rpt2BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3BillableUnitPrice:int = obj["Rpt3BillableUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.BaseRequiredQty:int = obj["BaseRequiredQty"]
      """  Required Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the JobMtl.RequiredQty which is in the UOM of the requirement to the JobMtl.BaseUOM which is the UOM of the Part and it's unit costs.  """  
      self.BaseUOM:str = obj["BaseUOM"]
      """  Unit of Measure of the JobMtl.BaseRequiredQty.  If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as JobMtl.IUM  """  
      self.Weight:int = obj["Weight"]
      """  Material Weight defaulted from Part Master.  """  
      self.WeightUOM:str = obj["WeightUOM"]
      """  Material Weight UOM defaulted from Part Master.  """  
      self.ReqRefDes:int = obj["ReqRefDes"]
      """  Required number of designators  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  Base Part Number. Used in the configurator to identify the configurator part Number.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  Base Revision Number. Used in the configurator to identify the configurator part revision Number.  """  
      self.SelectForPicking:bool = obj["SelectForPicking"]
      """  Indicates if the job material is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  """  
      self.StagingWarehouseCode:str = obj["StagingWarehouseCode"]
      """  The job pick "Staging" warehouse for the job material.  Defaults from the system default warehouse (PlantConfCtrl.DefJobPickWhse).  """  
      self.StagingBinNum:str = obj["StagingBinNum"]
      """  The job pick "Staging" bin for the job material.  Defaults from the system default bin (PlantConfCtrl.DefJobPickBin).  """  
      self.PickError:str = obj["PickError"]
      """  A non blank character indicates that the release could not be picked by the Auto Pick process. The possible values are: "L" - Order Line can't be shipped complete. "O" - Order can't be shipped complete. "I" - Insufficient quantity reserved"Z" - Zero quantity reserved.  """  
      self.EstMtlUnitCost:int = obj["EstMtlUnitCost"]
      """  Estimated Material Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where: EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstLbrUnitCost:int = obj["EstLbrUnitCost"]
      """  Estimated Labor Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where: EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstBurUnitCost:int = obj["EstBurUnitCost"]
      """  Estimated Burden Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where: EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.EstSubUnitCost:int = obj["EstSubUnitCost"]
      """  Estimated Subcontract Unit Cost component of the EstUnitCost.  Defaults from the Part table if valid PartNum.  This field will only have value if the part is a manufactured stock part. This is a subcomponent of the EstUnitCost where: EstUnitCost = EstMtlUnitCost + EstLbrUnitCost + EstBurUnitCost + EstSubUnitCost.  """  
      self.SalvageEstMtlUnitCredit:int = obj["SalvageEstMtlUnitCredit"]
      """  Estimated Salvage Material Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where: SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstLbrUnitCredit:int = obj["SalvageEstLbrUnitCredit"]
      """  Estimated Salvage Labor Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where: SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstBurUnitCredit:int = obj["SalvageEstBurUnitCredit"]
      """  Estimated Salvage Burden Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where: SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.SalvageEstSubUnitCredit:int = obj["SalvageEstSubUnitCredit"]
      """  Estimated Salvage Subcontract Unit Credit.  Use the appropriate cost from the Part master as a default.  This is a subcomponent of the field SalvageUnitCredit where: SalvageUnitCredit = SalvageEstMtlUnitCredit + SalvageEstLbrUnitCredit + SalvageEstBurUnitCredit + SalvageEstSubUnitCredit.  """  
      self.LoanedQty:int = obj["LoanedQty"]
      """  The material quantity that has been loaned out to another job.  """  
      self.BorrowedQty:int = obj["BorrowedQty"]
      """  The material quantity that has been borrowed from another job.  """  
      self.ReassignSNAsm:bool = obj["ReassignSNAsm"]
      """  flag used to designate if the serial numbers from the job material/subassembly can be reassigned as the serial number of the parent assembly (top assembly or n deep subassembly) being reworked using a job.  """  
      self.GeneralPlanInfo:str = obj["GeneralPlanInfo"]
      """  GeneralPlanInfo  """  
      self.EstStdDescription:str = obj["EstStdDescription"]
      """  EstStdDescription  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.RemovedFromPlan:bool = obj["RemovedFromPlan"]
      """  RemovedFromPlan  """  
      self.IsPOCostingMaintained:bool = obj["IsPOCostingMaintained"]
      """  IsPOCostingMaintained  """  
      self.EstStdType:int = obj["EstStdType"]
      """  EstStdType  """  
      self.POCostingFactor:int = obj["POCostingFactor"]
      """  POCostingFactor  """  
      self.PlannedQtyPerUnit:int = obj["PlannedQtyPerUnit"]
      """  PlannedQtyPerUnit  """  
      self.POCostingDirection:int = obj["POCostingDirection"]
      """  POCostingDirection  """  
      self.POCostingUnitVal:int = obj["POCostingUnitVal"]
      """  POCostingUnitVal  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.OrigStructTag:str = obj["OrigStructTag"]
      """  When getting details on a multi-level configuration, the StructTag is used to load the configuration at each level so that method rules can be applied at that level.  By storing the original StructTag of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.OrigGroupSeq:int = obj["OrigGroupSeq"]
      """  By storing the original Group Sequence of the configuration as it was defined under its parent, it speeds up the process of determining where the lower level configured was originally configured.  If this field is populated, the lower level was originally configured as a child of another configured part.  """  
      self.ShowStatusIcon:str = obj["ShowStatusIcon"]
      """  ShowStatusIcon  """  
      self.ContractID:str = obj["ContractID"]
      """  Contract ID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the Planning Contract.  """  
      self.StagingLotNum:str = obj["StagingLotNum"]
      """  Stores the lot number of the material in the Staging Warehouse/Bin.  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.LocationView:bool = obj["LocationView"]
      """  Controls if this material record is viewable in Location Management or the web.  """  
      self.LotNum:str = obj["LotNum"]
      """  LotNum  """  
      self.SerialNum:str = obj["SerialNum"]
      """  SerialNum  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  WarrantyCode  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  WarrantyComment  """  
      self.WarrantyStartDate:str = obj["WarrantyStartDate"]
      """  WarrantyStartDate  """  
      self.WarrantyExpirationDate:str = obj["WarrantyExpirationDate"]
      """  WarrantyExpirationDate  """  
      self.LocationNum:int = obj["LocationNum"]
      """  LocationNum  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.SalvageAttributeSetID:int = obj["SalvageAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.SalvagePlanningNumberOfPieces:int = obj["SalvagePlanningNumberOfPieces"]
      """  Salvage planning number of pieces for this attribute set.  """  
      self.SalvagePlanningAttributeSetID:int = obj["SalvagePlanningAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.DealerWarranty:str = obj["DealerWarranty"]
      """  Dealer specific warranty code.  This is a non ERP warranty code.  """  
      self.DealerWarrantyDesc:str = obj["DealerWarrantyDesc"]
      """  Dealer specific warranty description  """  
      self.DealerWarrantyExpiration:str = obj["DealerWarrantyExpiration"]
      """  Dealer specifc warranty expiration date.  """  
      self.DealerWarrantyStart:str = obj["DealerWarrantyStart"]
      """  Dealer specific warranty start date.  """  
      self.OriginalSerialNum:str = obj["OriginalSerialNum"]
      """  Original Serial Number  """  
      self.OriginalPartNum:str = obj["OriginalPartNum"]
      self.BitFlag:int = obj["BitFlag"]
      self.FSWarrCdWarrDescription:str = obj["FSWarrCdWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LocationWarrantyTranRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.LocationNum:int = obj["LocationNum"]
      """  LocationNum  """  
      self.WarrantySeqNum:int = obj["WarrantySeqNum"]
      """  Sequence number.  This is system generated and is not maintainable.  """  
      self.IDNum:str = obj["IDNum"]
      """  Finished good Identificaton Number  """  
      self.SerialNum:str = obj["SerialNum"]
      """  SerialNum  """  
      self.Comment:str = obj["Comment"]
      """  Comment about the warranty transfer transaction.  """  
      self.EffectiveDate:str = obj["EffectiveDate"]
      """  Effective Date  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  HDCaseNum  """  
      self.ParentPartNum:str = obj["ParentPartNum"]
      """  ParentPartNum  """  
      self.OriginalPartNum:str = obj["OriginalPartNum"]
      """  OriginalPartNum  """  
      self.OriginalPartSerialNum:str = obj["OriginalPartSerialNum"]
      """  OriginalPartSerialNum  """  
      self.NewPartNum:str = obj["NewPartNum"]
      """  NewPartNum  """  
      self.NewPartSerialNum:str = obj["NewPartSerialNum"]
      """  NewPartSerialNum  """  
      self.PartDescription:str = obj["PartDescription"]
      """  PartDescription  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  WarrantyCode  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  WarrantyComment  """  
      self.WarrantyStartDate:str = obj["WarrantyStartDate"]
      """  Date when warranty started.  """  
      self.WarrantyExpirationDate:str = obj["WarrantyExpirationDate"]
      """  Date when warranty expires  """  
      self.DealerWarranty:str = obj["DealerWarranty"]
      """  Dealer Warranty, this is for a non Erp warranty.  """  
      self.DealerWarrantyDesc:str = obj["DealerWarrantyDesc"]
      """  Dealer warranty description, this is for a non Erp warranty  """  
      self.DealerWarrantyStart:str = obj["DealerWarrantyStart"]
      """  Date dealer warranty started, this is for a non Erp warranty  """  
      self.DealerWarrantyExpiration:str = obj["DealerWarrantyExpiration"]
      """  Date dealer warranty expires, this is for a non Erp warranty.  """  
      self.WarrantyUsage:str = obj["WarrantyUsage"]
      """  WarrantyUsage  """  
      self.LotNum:str = obj["LotNum"]
      """  LotNum  """  
      self.SystemCreated:bool = obj["SystemCreated"]
      """  SystemCreated  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  Created On  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  Created By  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.FSWarrCdWarrDescription:str = obj["FSWarrCdWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderDtlRow:
   def __init__(self, obj):
      self.VoidLine:bool = obj["VoidLine"]
      """   Indicates that the line item was closed before any shipments were made against it. Normally line items are closed as part of the Shipping process. By using the "Close Line" menu option the user can close the line manually, to provide the function to close the line when the customer cancels there request.  If the line item had no shipments made it is then marked as "voided". Regardless of shipment activity the line is also marked as closed (OpenLine = No).
When an OrderDtl record is 'voided/closed' all of it's related OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.OpenLine:bool = obj["OpenLine"]
      """  Indicates if the OrderDtl record is in a "open or closed" status.  This field is not directly maintainable. It can be set to "closed" via the "Close-Line" menu option,  the "Close-Order" menu option, or when all the related OrderRel records are closed, OrderRel records are closed via shipping or by the "Close Release" button within Order Entry. (See VoidLine also).  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Contains the Order Number that ties this detail record back to an OrderHed record.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.PartNum:str = obj["PartNum"]
      """   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the OrderDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Item description. The Part.Description can be used as a default.  """  
      self.Reference:str = obj["Reference"]
      """  EDI Reference  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.POLine:str = obj["POLine"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """  Controls if line is commissionable. Note if all the OrderHed.SalesRep are blank then this should be "No", also the user should not even see this field when there are no sales reps for the order.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  The line item discount percent. It has nothing to do with price break discounts. It is a flat discount percent that defaults from the OrderHed.DiscountPercent, which was originally defaulted from the Customer.DiscountPercent.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Total Order Quantity for the line item. This quantity must always be kept in sync with the scheduled ship quantities stored in the OrderRel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line ( more than one OrderRel record) the OrderQty is not maintainable. As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This ensures that Order quantity and scheduled ship quantity are always in sync.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """   Date that the first release needs be shipped by in order to meet the customers due date for the first delivery. Defaulted as OrderHed.RequestDate.
Not directly maintainable when more than one delivery record exists, in which case it gets refreshed as the earliest ReqDate of the related OrderRel records.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Used to calculate the extended unit price for the line item. The logic is to divide the OrderDtl.OrderQty by the appropriate "per" value and then multiply by unit price.  Use the  Part.PricePerCode as a default. If Part record does not exist then default as "E".  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the detail order line item. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the order line item. These will copied into the packing slip detail  file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the order line item. These will copied into the Invoice detail  file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains comments for pick list or job about the order line item. These will be printed on the picking lists or copied to the job during the link process.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record. Defaults from the the or from the Part Master.  """  
      self.AdvanceBillBal:int = obj["AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs. This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering amount in the InvcDetl.  """  
      self.DocAdvanceBillBal:int = obj["DocAdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with. This is part of the foreign key to QuoteHed file. This field is updated via the "get quote" function within Order Entry.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this order line was created. Updated via the Get Quote function within Order Entry. This field along with Company and QuoteNum make up the link to the QuoteDtl file.  """  
      self.TMBilling:bool = obj["TMBilling"]
      """  Indicates if the Order line item is billed based on Time & Material. This flag is copied into the ShipDtl record during the Shipping Entry process. See ShipDtl.TMBilling description for further details.  """  
      self.OrigWhyNoTax:str = obj["OrigWhyNoTax"]
      """  This field is no longer active. It has been replaced by OrderRel.Exempt. The contents were copied into OrderRel.Exempt during the release conversion process. This will be removed in the next release.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """   Date the customer needs the first release to be delivered.
Defaulted as OrderHed.NeedByDate. Not directly maintainable when more than one delivery record exists. In which case it is kept in sync with the OrderRel record which has the earliest ReqDate which are maintained in the shipping release dialog boxes.  """  
      self.CustNum:int = obj["CustNum"]
      """  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the OrderDtl records for a specific customer.  """  
      self.Rework:bool = obj["Rework"]
      """   Used to indicate that line item is to be "Reworked" instead of manufactured.  It is shown in the Job Entry Order Activity screens.
When Yes then all related OrderRel records are Make=Yes.  """  
      self.RMANum:int = obj["RMANum"]
      """   Return Authorization Number that OrderDtl is fulfilling.
If entered, must be valid in RMAHead.  """  
      self.RMALine:int = obj["RMALine"]
      """  The line item of the RMA detail that this order line item is fulfilling.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID of the Project table record that this OrderDtl record. Can be blank.  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.Warranty:bool = obj["Warranty"]
      """  Indicate that the item or the product group has a warranty.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty that ties this record to a type of warranty.  Found on either the Part or ProdGrup table.  """  
      self.MaterialDuration:int = obj["MaterialDuration"]
      """  The # of days, months, years the material is covered by warranty  """  
      self.LaborDuration:int = obj["LaborDuration"]
      """  The # of days, months, years the Labor is covered by warranty  """  
      self.MiscDuration:int = obj["MiscDuration"]
      """  The # of days, months, years the Misc. Charges are covered by warranty  """  
      self.MaterialMod:str = obj["MaterialMod"]
      """  Whether the duration of warranty  is for "Days"," Months", "Years".  """  
      self.LaborMod:str = obj["LaborMod"]
      """  Whether the duration of warranty  is "Days"," Months"," years".  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  Editor widget for Warranty comments.  """  
      self.Onsite:bool = obj["Onsite"]
      """  This warranty covers On site visits  """  
      self.MatCovered:bool = obj["MatCovered"]
      """  Are Material cost covered  """  
      self.LabCovered:bool = obj["LabCovered"]
      """  Is Labor Cost Covered  """  
      self.MiscCovered:bool = obj["MiscCovered"]
      """  Are misc. Costs Covered  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Unit of measure (how it is sold/issued).  Use the default Part.SUM if its a valid Part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  Represents one of the requested Order Quantities for the line item using OrderDtl.SUM.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.ShipLineComplete:bool = obj["ShipLineComplete"]
      """  Indicates if the order line must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases of the line with a ship date <= the given cutoff date also have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "L" (Ship Order line 100% complete) and OrderHed.ShipOrderComplete = No. This field is disabled and set to No if the OrderHed.ShipOrderComplete = Yes.  """  
      self.CumeQty:int = obj["CumeQty"]
      """  Quantity from last EDI update.  """  
      self.CumeDate:str = obj["CumeDate"]
      """  Date of last update  """  
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  The related Marketing Campaign ID. Mirror image of the QuoteHed.MkthCampaignID. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """   Link to the marketing event associated with this record.
The related Marketing Event Sequence. Mirror image of the QuoteHed.MktgEventSeq. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order line is linked to an inter-company PO line.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.ConfigUnitPrice:int = obj["ConfigUnitPrice"]
      """   Same as Unit price except that this field contains the unit price computed from the input based pricing in a configuration.
If price breaks exist this price should be used as the base price instead of the one found in the part table.  """  
      self.ConfigBaseUnitPrice:int = obj["ConfigBaseUnitPrice"]
      """  This is the base price for inputs based pricing of a configuration.  The price of inputs are added to this price to get the ConfigUnitPrice.  """  
      self.PriceListCode:str = obj["PriceListCode"]
      """  This is the Price List used to determine the starting base price.  """  
      self.BreakListCode:str = obj["BreakListCode"]
      """  This is the Price List used to determine the break % or amount.  """  
      self.PricingQty:int = obj["PricingQty"]
      """  The Order Quantity (total qty of related order lines) used to find price when quantity based discounting is applied.  """  
      self.LockPrice:bool = obj["LockPrice"]
      """  Indicates if the price of the order line can be changed.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency (converted using the exchange rate on OrderHed).  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency (converted using the exchange rate on OrderHed).  """  
      self.PriceGroupCode:str = obj["PriceGroupCode"]
      """  This is the Price Group ID used to price the order line with.  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  Indicates if the user selected a price list different from the default.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.PricingValue:int = obj["PricingValue"]
      """  The Order Value (total extended price of related order lines) used to find order value break when value based discounting is applied.  """  
      self.DisplaySeq:int = obj["DisplaySeq"]
      """  This field controls the order in which Sales Order lines are displayed.  Display Seq is a decimal number where the whole number portion is used to sequence normal sales order lines and the decimal portion is used to sequence kit components under their associated kit parent.  """  
      self.KitParentLine:int = obj["KitParentLine"]
      """  The sales order line number of the parent kit item.  This is only relevent for sales order lines which are kit parent or component lines.  If the KitParentLine equals the OrderLine then this is a kit parent line.  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if component lines can be added, deleted and modified during Sales Order entry.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kit part must be shipped complete of if kit components can be shippped in varying degrees of completeness.  This field is only relevant for sales order lines which are kit parents. If this field is set to "No" then KitPricing must be set to "P".  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushed when a kit parent part is shipped.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes", then this field must be set to "YES" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are P = Parent Pricing (The price is obtained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitQtyPer:int = obj["KitQtyPer"]
      """  Component quantity required to fulfill one kit parent.  This field is only relevant on a sales order line which is a kit component.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.DemandContractLine:int = obj["DemandContractLine"]
      """  The Demand Contract Detail record this OrderDtl is related to.  """  
      self.CreateNewJob:bool = obj["CreateNewJob"]
      """  Create New Job flag  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.GetDtls:bool = obj["GetDtls"]
      """  Get Details flag  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SchedJob:bool = obj["SchedJob"]
      """  Schedule Job flag  """  
      self.RelJob:bool = obj["RelJob"]
      """  Release Job flag  """  
      self.EnableCreateNewJob:bool = obj["EnableCreateNewJob"]
      """  Enable New Job flag  """  
      self.EnableGetDtls:bool = obj["EnableGetDtls"]
      """  Enable Get Details flag  """  
      self.EnableSchedJob:bool = obj["EnableSchedJob"]
      """  Enable Schedule Job flag  """  
      self.EnableRelJob:bool = obj["EnableRelJob"]
      """  Enable Release Job flag  """  
      self.CounterSaleWarehouse:str = obj["CounterSaleWarehouse"]
      """  Indicates the warehouse selected for a counter sale order line.  """  
      self.CounterSaleBinNum:str = obj["CounterSaleBinNum"]
      """  Identifies the Bin selected for a counter sale order line.  """  
      self.CounterSaleLotNum:str = obj["CounterSaleLotNum"]
      """  Indicates the lot number selected for a counter sale order line.  """  
      self.CounterSaleDimCode:str = obj["CounterSaleDimCode"]
      """  Indicates the dimension code selected for a counter sales order line.  """  
      self.DemandDtlRejected:bool = obj["DemandDtlRejected"]
      """  Indicates if the demand detail that created/updated this order line has been rejected.  """  
      self.KitFlag:str = obj["KitFlag"]
      """   A character flag field used to differentiate between regular sales order line, Sales Kit parent order line and Sales Kit component order line.
P = Sales Kit Parent line
C = Sales Kit Component Line
Null = regular line  """  
      self.KitsLoaded:bool = obj["KitsLoaded"]
      """  Indicates if the kit components have been automatically loaded.  If set to false the user interface will attempt to load the kit components after the user saves a new order line.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  This field along with Company, DemandContractNum and DemandHeadSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandDetail record for the DemandHead and the adding 1 to it.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases for the line  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1AdvanceBillBal:int = obj["Rpt1AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt2AdvanceBillBal:int = obj["Rpt2AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt3AdvanceBillBal:int = obj["Rpt3AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.ExtPriceDtl:int = obj["ExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule  """  
      self.DocExtPriceDtl:int = obj["DocExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.Rpt1ExtPriceDtl:int = obj["Rpt1ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPriceDtl:int = obj["Rpt2ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPriceDtl:int = obj["Rpt3ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.LineStatus:str = obj["LineStatus"]
      """  Status of Order Line  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table. Assumed to include taxes  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Same as DocUnit price except that this field contains the unit price including taxes  """  
      self.InDiscount:int = obj["InDiscount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed.  - includes taxes  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed. - includes taxes  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied. including taxes  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency -including taxes.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied. including taxes  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency - including taxes.  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.InExtPriceDtl:int = obj["InExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule - Taxes are Included  """  
      self.DocInExtPriceDtl:int = obj["DocInExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule - Taxes Included  """  
      self.Rpt1InExtPriceDtl:int = obj["Rpt1InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPriceDtl:int = obj["Rpt2InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPriceDtl:int = obj["Rpt3InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.OldOurOpenQty:int = obj["OldOurOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldSellingOpenQty:int = obj["OldSellingOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldOpenValue:int = obj["OldOpenValue"]
      """  Used to store open value setting assigned in product configuration programs  """  
      self.OldProdCode:str = obj["OldProdCode"]
      """  Used to store prod code value assigned in product configuration programs  """  
      self.PrevSellQty:int = obj["PrevSellQty"]
      """  Previous Selling Quantity  """  
      self.PrevPartNum:str = obj["PrevPartNum"]
      """  Previous Part Number  """  
      self.PrevXPartNum:str = obj["PrevXPartNum"]
      """  Previous Customer Part Number  """  
      self.KitCompOrigSeq:int = obj["KitCompOrigSeq"]
      """  The original material sequence of this kit component under the kit parent part.  """  
      self.KitCompOrigPart:str = obj["KitCompOrigPart"]
      """  The original kit component part number prior to processing any configurator rule programs  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.DiscBreakListCode:str = obj["DiscBreakListCode"]
      self.DiscListPrice:int = obj["DiscListPrice"]
      self.LockDisc:bool = obj["LockDisc"]
      self.OverrideDiscPriceList:bool = obj["OverrideDiscPriceList"]
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCOrderLine:int = obj["ECCOrderLine"]
      """  ECCOrderLine  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.UndersPct:int = obj["UndersPct"]
      """  UndersPct  """  
      self.Overs:int = obj["Overs"]
      """  Overs  """  
      self.Unders:int = obj["Unders"]
      """  Unders  """  
      self.OversUnitPrice:int = obj["OversUnitPrice"]
      """  OversUnitPrice  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanGUID:str = obj["PlanGUID"]
      """  PlanGUID  """  
      self.MOMsourceType:str = obj["MOMsourceType"]
      """  MOMsourceType  """  
      self.MOMsourceEst:str = obj["MOMsourceEst"]
      """  MOMsourceEst  """  
      self.DefaultOversPricing:str = obj["DefaultOversPricing"]
      """  DefaultOversPricing  """  
      self.ECCPlant:str = obj["ECCPlant"]
      """  ECCPlant  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECCQuoteNum  """  
      self.ECCQuoteLine:int = obj["ECCQuoteLine"]
      """  ECCQuoteLine  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MfgJobType:str = obj["MfgJobType"]
      """  MfgJobType  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.CreateJob:bool = obj["CreateJob"]
      """  CreateJob  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.DocInAdvanceBillBal:int = obj["DocInAdvanceBillBal"]
      """  DocInAdvanceBillBal  """  
      self.InAdvanceBillBal:int = obj["InAdvanceBillBal"]
      """  InAdvanceBillBal  """  
      self.Rpt1InAdvanceBillBal:int = obj["Rpt1InAdvanceBillBal"]
      """  Rpt1InAdvanceBillBal  """  
      self.Rpt2InAdvanceBillBal:int = obj["Rpt2InAdvanceBillBal"]
      """  Rpt2InAdvanceBillBal  """  
      self.Rpt3InAdvanceBillBal:int = obj["Rpt3InAdvanceBillBal"]
      """  Rpt3InAdvanceBillBal  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MSRP:int = obj["MSRP"]
      """  Base price before any price breaks and discounts  """  
      self.DocMSRP:int = obj["DocMSRP"]
      """  Same as MSRP except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1MSRP:int = obj["Rpt1MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt2MSRP:int = obj["Rpt2MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt3MSRP:int = obj["Rpt3MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.EndCustomerPrice:int = obj["EndCustomerPrice"]
      """  Distributor end customer price.  """  
      self.DocEndCustomerPrice:int = obj["DocEndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1EndCustomerPrice:int = obj["Rpt1EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt2EndCustomerPrice:int = obj["Rpt2EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt3EndCustomerPrice:int = obj["Rpt3EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.PromotionalPrice:int = obj["PromotionalPrice"]
      """  Promotional Price offered to Dealer and Distributors.  """  
      self.DocPromotionalPrice:int = obj["DocPromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1PromotionalPrice:int = obj["Rpt1PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt2PromotionalPrice:int = obj["Rpt2PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt3PromotionalPrice:int = obj["Rpt3PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.OrderLineStatusCode:str = obj["OrderLineStatusCode"]
      """  Current status of line.  This is a maintainable status through Order Line Status maintenance.  Depending on the setting can control is line is updatable from the web.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  Used specifically for Deal Portal and Location Inventory, not for Inventory Tracked Attributes.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.KBOriginalConfigProdID:int = obj["KBOriginalConfigProdID"]
      """  The unique identifier of the related original CPQ Configured Quote Product.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AvailableQuantity:int = obj["AvailableQuantity"]
      self.AvailPriceLists:str = obj["AvailPriceLists"]
      """  Available Price Lists  """  
      self.AvailUMFromQuote:str = obj["AvailUMFromQuote"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CalcUnitPrice:int = obj["CalcUnitPrice"]
      """  Default calculated unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.ConfigType:str = obj["ConfigType"]
      self.Configured:str = obj["Configured"]
      self.CounterSale:bool = obj["CounterSale"]
      self.CreditLimitMessage:str = obj["CreditLimitMessage"]
      """  The message text returned by the credit check process.  """  
      self.CreditLimitSource:str = obj["CreditLimitSource"]
      """  The source that put the customer on credit hold.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencyID:str = obj["CurrencyID"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DemandQuantity:int = obj["DemandQuantity"]
      self.DimCode:str = obj["DimCode"]
      self.DimConvFactor:int = obj["DimConvFactor"]
      self.DocDspDiscount:int = obj["DocDspDiscount"]
      """  Document currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      """  Document currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.DocInMiscCharges:int = obj["DocInMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in document currency  """  
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  The amount of discount for display in document currency which does not include taxes  """  
      self.DocMiscCharges:int = obj["DocMiscCharges"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total tax in Doc currency. The sum of all the tax details for the line (OrderRelTax).  """  
      self.DocTotalPrice:int = obj["DocTotalPrice"]
      self.DspDiscount:int = obj["DspDiscount"]
      """  Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DspJobType:str = obj["DspJobType"]
      """  To display the type of job this is: MFG = Manufacturing, PRJ = Project  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      """  Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DUM:str = obj["DUM"]
      self.ECCConfigSysRowId:str = obj["ECCConfigSysRowId"]
      """  Web basket configuration related SysRowID  """  
      self.ECCDiscount:int = obj["ECCDiscount"]
      """  Additional discount calculated by ECC  """  
      self.ECCPreventRepricing:bool = obj["ECCPreventRepricing"]
      """  Prevents Epicor repricing the unit price coming from ECC.  This usually would be a result of Epicor going off-line and order pricing was performed by ECC.  """  
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the button Attibutes in Order Line  """  
      self.EnableKitUnitPrice:bool = obj["EnableKitUnitPrice"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableRenewalNbr:bool = obj["EnableRenewalNbr"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableSellingQty:bool = obj["EnableSellingQty"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ExtPrice:int = obj["ExtPrice"]
      self.FromQuoteLineFlag:bool = obj["FromQuoteLineFlag"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Installation price of an equipment that requires installation in Epicor FSA. This value by default is inherited from the part but it could be overridden for another value if it's necessary.  """  
      self.FSAInstallationOrderLine:int = obj["FSAInstallationOrderLine"]
      self.FSAInstallationOrderNum:int = obj["FSAInstallationOrderNum"]
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstallationTypeDescription:str = obj["FSAInstallationTypeDescription"]
      self.HasComplement:bool = obj["HasComplement"]
      """  Indicates whether the part has at least one Complement  """  
      self.HasDowngrade:bool = obj["HasDowngrade"]
      """  Indicates whether the part has at least one Downgrade  """  
      self.HasSubstitute:bool = obj["HasSubstitute"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.HasUpgrade:bool = obj["HasUpgrade"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.InMiscCharges:int = obj["InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line  """  
      self.InPrice:bool = obj["InPrice"]
      """  The flag to indicate if the Order Header Tax Liability is Tax Inclusive Pricing.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvtyUOM:str = obj["InvtyUOM"]
      """  Inventory UOM that the Order Detail is allocated against.  """  
      self.JobTypeDesc:str = obj["JobTypeDesc"]
      self.JobWasCreated:bool = obj["JobWasCreated"]
      """  If the Job has been already created against this line.  """  
      self.KitChangeParms:bool = obj["KitChangeParms"]
      """  If Kit Flag = P then sets this field to the value of the related PartPlant.KitAllowChangeParms. If KitFlag <> P then this will be FALSE.  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.KitFlagDescription:str = obj["KitFlagDescription"]
      """  Kit Flag Description. "P" = Parent, "C" = Component.  """  
      self.KitOrderQtyUOM:str = obj["KitOrderQtyUOM"]
      self.KitStandard:bool = obj["KitStandard"]
      """  If KitFlag = "C" and the parent kit line is configured OR if KitFlag = "P" and Configured = "On" then this field will be TRUE, otherwise it will be false.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  The amount of discount for display which does not include taxes  """  
      self.LotNum:str = obj["LotNum"]
      self.MiscCharges:int = obj["MiscCharges"]
      self.MultipleReleases:bool = obj["MultipleReleases"]
      self.OnHandQuantity:int = obj["OnHandQuantity"]
      self.PartExists:bool = obj["PartExists"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.POLineRef:str = obj["POLineRef"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.PriceListCodeDesc:str = obj["PriceListCodeDesc"]
      self.ProcessCounterSale:bool = obj["ProcessCounterSale"]
      self.ProcessQuickEntry:bool = obj["ProcessQuickEntry"]
      self.QuoteQtyNum:int = obj["QuoteQtyNum"]
      self.RelWasRecInvoiced:bool = obj["RelWasRecInvoiced"]
      """  For this Detail line there is Release line that has Project and Phase and these Project or Phase was invoiced or used in revenue recognition.  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Extended Price for the Order Line in Rpt1 currency  """  
      self.Rpt1InMiscCharges:int = obj["Rpt1InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt1LessDiscount:int = obj["Rpt1LessDiscount"]
      """  The amount of discount for display which does not include taxes (report currency)  """  
      self.Rpt1MiscCharges:int = obj["Rpt1MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt1TotalPrice:int = obj["Rpt1TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Extended Price for the orderLine in Rpt2 currency.  """  
      self.Rpt2InMiscCharges:int = obj["Rpt2InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt2LessDiscount:int = obj["Rpt2LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt2MiscCharges:int = obj["Rpt2MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt2TotalPrice:int = obj["Rpt2TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Extended price for the order line in Rpt3 currency  """  
      self.Rpt3InMiscCharges:int = obj["Rpt3InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt3LessDiscount:int = obj["Rpt3LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt3MiscCharges:int = obj["Rpt3MiscCharges"]
      """  Report Currency misc charges  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt3TotalPrice:int = obj["Rpt3TotalPrice"]
      """  Report currency line total price  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax in base currency. The sum of all the tax details for the line.  """  
      self.ThisOrderInvtyQty:int = obj["ThisOrderInvtyQty"]
      """  The Sales Order Quantity expressed in the Inventory Unit of Measure  """  
      self.TotalPrice:int = obj["TotalPrice"]
      self.TotalShipped:int = obj["TotalShipped"]
      self.WarehouseCode:str = obj["WarehouseCode"]
      self.WarehouseDesc:str = obj["WarehouseDesc"]
      self.BinNum:str = obj["BinNum"]
      self.AttributeMismatch:bool = obj["AttributeMismatch"]
      """  Attribute class is MRP Planned but AttributeSetID has not been set on releases.  """  
      self.JobManagerString:str = obj["JobManagerString"]
      """  A string containing the parameters needed to run Job Manager  """  
      self.CalcOrdBasedPrice:int = obj["CalcOrdBasedPrice"]
      """  Default calculated order value based discounts unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.SalesOrderLinked:bool = obj["SalesOrderLinked"]
      """  At least 1 OrderRel for OrderDtl has a PONum assigned.  """  
      self.InventoryAttributeSetID:int = obj["InventoryAttributeSetID"]
      """  This external column is to be used for the purpose of adding an OrderDtl for a part that has Track Inventory Attributes, allowing the AttributeSetID to be passed in with the line to be included on the OrderRel within the same update method call.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.CustNumSendToFSA:bool = obj["CustNumSendToFSA"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.DiscBreakListCodeListDescription:str = obj["DiscBreakListCodeListDescription"]
      self.DiscBreakListCodeEndDate:str = obj["DiscBreakListCodeEndDate"]
      self.DiscBreakListCodeStartDate:str = obj["DiscBreakListCodeStartDate"]
      self.MktgCampaignIDCampDescription:str = obj["MktgCampaignIDCampDescription"]
      self.MktgEvntEvntDescription:str = obj["MktgEvntEvntDescription"]
      self.OrderNumBTCustNum:int = obj["OrderNumBTCustNum"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartNumSendToFSA:bool = obj["PartNumSendToFSA"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumDefaultAttributeSetID:int = obj["PartNumDefaultAttributeSetID"]
      self.PartNumFSAEquipment:bool = obj["PartNumFSAEquipment"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PriceBreakListDescription:str = obj["PriceBreakListDescription"]
      self.PriceBreakStartDate:str = obj["PriceBreakStartDate"]
      self.PriceBreakEndDate:str = obj["PriceBreakEndDate"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHedRow:
   def __init__(self, obj):
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """   Indicates that the Order item was closed before any shipments were made against it. Normally the Orders are closed as part of the Shipping process when all the releases have been closed.  By using the "Close Order" menu option the user can close the Order manually, to provide the function to "Cancel"  the order when the customer cancels there request.  If the Order item had no shipments made it is then marked as "voided". Regardless of shipment activity the Order is always marked as closed (OpenOrder = No).
When an OrderHed record is 'voided/closed' all of it's related OrderDtl and OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in shipping entry. It does not prevent shipments from being entered for this order.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """   This is used as one of the selection parameters on the Order entry edit reports. The intent is for users to be able to select orders that they have entered for hard copy edit.

On new orders use the users login ID as the default. They can override this if they wish to enter something more meaningful.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Indicates which customer ship to is to be used as the default for the Order release records for this order. It  can be blank or it must be valid in the SHIPTO table. Use the CUSTOMER.SHIPTONUM as the default on new orders or when the ORDERHED.CUSTNUM is changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """  Date that the items need to be shipped by to meet the customers NeedByDate.  This can be left blank, it is only used to supply a default for OrderDtl.RequestDate.  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Mandatory entry and must be valid. Default as the system date.  """  
      self.FOB:str = obj["FOB"]
      """  An optional field that describes the FOB policy.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Contains the key value of the record in the "SHIPVIA" table. It can be left blank or must be valid in the 'SHIPTO"  table.
Use the CUSTOMER.SHIPVIA as the default when the ORDER.CUSTNUM field is changed and the ORDERHED.SHIPTO is blank. Use SHIPTO.SHIPVIA when ORDER.CUSTNUM or ORDERHED.SHIPTO fields are changed and the ORDERHED.SHIPTO is not blank.  """  
      self.TermsCode:str = obj["TermsCode"]
      """   Contains the key value of the record in the TERMS table which indicates the sales terms established for this order. On change of ORDERHED.CUSTNUM use the CUSTOMER.TERMS

field as the default.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  Used to establish a discount percent value which will be used as a default during order detail line entry. It can be left as zero.  Use the CUSTOMER.DISCOUNTPERCENT field as a default. Refreshed whenever ORDERHED.CUSTOMER field changes.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMPCON as the default.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Establishes the Shipping Contact to be used as default on the Order release records. Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Use the Customer.PrimScon as a default.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the order. Up to five codes can be  established. This field is not directly maintainable. Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The first one is defaulted from the Customer master if ship to is blank; otherwise, from the Ship To.  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the overall order. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the overall order. These will copied into the packing slip header file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains picking  comments about the overall order. These will be printed on the picking lists.  """  
      self.DepositBal:int = obj["DepositBal"]
      """  Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocDepositBal:int = obj["DocDepositBal"]
      """  Display value contains the deposit balance in the customer's currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on this order to arrive.  This is used only as the default value for the NeedByDate when creating order detail line items.  This can be left blank.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this order.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The USERID of the user that overrode an order credit hold (system set).  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  The date that the user last overrode the customer credit hold (system set).  """  
      self.CreditOverrideTime:str = obj["CreditOverrideTime"]
      """  The time that the user last overrode the customer credit hold in HH:MM:SS format (system set).  """  
      self.CreditOverrideLimit:int = obj["CreditOverrideLimit"]
      """  The authorized maximum dollar limit that an order for a credit held customer is approved for.  Initially defaulted to the current order amount when the order is credit hold overridden.  The order amount is calculated by using line information only (i.e. extended amount and discounts) - deposits, advance billings, shipments and miscellaneous charges are NOT considered.  """  
      self.SndAlrtShp:bool = obj["SndAlrtShp"]
      """  Controls if an alert is to be sent when shipments are made for this order.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this order.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.AllocPriorityCode:str = obj["AllocPriorityCode"]
      """  Code used to relate a AllocPri record to the order.  Defaulted from Customer.AllocPriorityCode.  """  
      self.ReservePriorityCode:str = obj["ReservePriorityCode"]
      """  Code used to relate a ReservePri record to the order.  Defaulted from Customer.ReservePriorityCode.  """  
      self.ShipOrderComplete:bool = obj["ShipOrderComplete"]
      """  Indicates if the order must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases with a ship date <= the given cutoff date alos have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "O" (Ship Order 100% complete)  """  
      self.WebOrder:bool = obj["WebOrder"]
      """  Not editable, When SF Synch creates orders, this flag is set to YES.  """  
      self.CCApprovalNum:str = obj["CCApprovalNum"]
      """  Updated Via SF Synch.  This is the authorization number from a third party credit card validation service.  """  
      self.EDIOrder:bool = obj["EDIOrder"]
      """  Order created from EDI interfaced module.  """  
      self.EDIAck:bool = obj["EDIAck"]
      """  Updated from EDI module if 855 or 865 created.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order header is linked to an inter-company PO header.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number that uniquely identifies the purchase order.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.WebEntryPerson:str = obj["WebEntryPerson"]
      """  This is the web-login-id (email address) of the person that placed the order.  """  
      self.AckEmailSent:bool = obj["AckEmailSent"]
      """  Indicates whether the email acknowledgement of the order has been sent.  (For web orders)  """  
      self.ApplyOrderBasedDisc:bool = obj["ApplyOrderBasedDisc"]
      """  Indicates if order based discounting needs to be applied to the order.  """  
      self.AutoOrderBasedDisc:bool = obj["AutoOrderBasedDisc"]
      """  Indicates if order based discounting should be applied automatically or manually triggered by user as menu option.  """  
      self.EntryMethod:str = obj["EntryMethod"]
      """   Indicates Entry method program that used to create the order.
S = Standard, Q = Quick Entry,  C = Counter Sales, D = Demand/EDI  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this order.  """  
      self.CounterSale:bool = obj["CounterSale"]
      """  Flag used in sales order entry for counter sales orders.  """  
      self.CreateInvoice:bool = obj["CreateInvoice"]
      """  Create AR Invoice for counter sales order.  """  
      self.CreatePackingSlip:bool = obj["CreatePackingSlip"]
      """  Create Packing Slip for counter sale.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.CCAmount:int = obj["CCAmount"]
      """  Credit Transaction Amount, makes up part of CCTotal  """  
      self.CCFreight:int = obj["CCFreight"]
      """  Credit Card transaction freight amount, part of CCTotal  """  
      self.CCTax:int = obj["CCTax"]
      """  Credit Card Transaction Tax amount, part of CCTotal  """  
      self.CCTotal:int = obj["CCTotal"]
      """  Total amount being sent to the credit card processor  """  
      self.CCDocAmount:int = obj["CCDocAmount"]
      """  See CCAmount  """  
      self.CCDocFreight:int = obj["CCDocFreight"]
      """  See CCFreight  """  
      self.CCDocTax:int = obj["CCDocTax"]
      """  See CCTax  """  
      self.CCDocTotal:int = obj["CCDocTotal"]
      """  See CCTotal  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.BTConNum:int = obj["BTConNum"]
      """  New database field as it can be changed by user.  Default is set to BTCustNum?s primary billing contact.  If a primary billing contact is not set, default is ?None Selected?.  Keep in mind the BTCustNum field may be the same as CustNum (SoldTo) but the default would still be this customer?s primary billing contact where the ConNum field (Contact for sold to) is defaulting the primary purchasing contact.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.OutboundSalesDocCtr:int = obj["OutboundSalesDocCtr"]
      """  Incremented whenever an outbound sales document is generated from the order, i.e. Sales Order Acknowledgement, Response to Change, etc.  """  
      self.OutboundShipDocsCtr:int = obj["OutboundShipDocsCtr"]
      """  Incremented whenever an outbound shipping document is generated from the order, i.e. ASN.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this OrderHed is related to.  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.CancelAfterDate:str = obj["CancelAfterDate"]
      """  The date after which the sales order should be canceled.  """  
      self.DemandRejected:bool = obj["DemandRejected"]
      """  Indicates if the demand that created/updated this order has been rejected.  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.CreditCardOrder:bool = obj["CreditCardOrder"]
      """  Indicates if the Order is a credit card order  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.PayFlag:str = obj["PayFlag"]
      """  For Shipping; Bill Shipper, Bill Recipient, Bill Third Party, Bill Consignee  """  
      self.PayAccount:str = obj["PayAccount"]
      """  Shipping Pay Flag Account Number. Required when Pag Flag is collect or Third party  """  
      self.PayBTAddress1:str = obj["PayBTAddress1"]
      """  Shipping Bill To. The first line of the Payers main address. Required when Pay Flag is Third party.  """  
      self.PayBTAddress2:str = obj["PayBTAddress2"]
      """  Shipping Bill To.  The second line of the Payers main address. An address is required when Pay Flag is Third party  """  
      self.PayBTCity:str = obj["PayBTCity"]
      """  Shipping, The city portion of the Payer main address.  """  
      self.PayBTState:str = obj["PayBTState"]
      """  The state or province portion of the shipment payer main address.  """  
      self.PayBTZip:str = obj["PayBTZip"]
      """  The zip or postal code portion of the shipping payers main address.  """  
      self.PayBTCountry:str = obj["PayBTCountry"]
      """  The country of the main shipping payers address.  """  
      self.DropShip:bool = obj["DropShip"]
      """  Freight charges will not be returned if 'yes'  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Added for international shipping  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Added for international shipping. Shipper's Export Declaration  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  For International shipping.  Certificate of Orgin.  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  For International shipping.  Shipper's Letter of Instruction.  """  
      self.FFID:str = obj["FFID"]
      """  International Shipping. Frieght Forwarder ID  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  International Shipping. The first line of the Frieght Forwarder main address.  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  International Shipping. The second line of the Frieght Forwarder main address.  """  
      self.FFCity:str = obj["FFCity"]
      """  Shipping, The city portion of the Frieght Forwarder main address.  """  
      self.FFState:str = obj["FFState"]
      """  International Shipping. The state or province portion of the shipment Frieght Forwarder main address.  """  
      self.FFZip:str = obj["FFZip"]
      """  International Shipping. The zip or postal code portion of the shipping Frieght Forwarder main address.  """  
      self.FFCountry:str = obj["FFCountry"]
      """  International shipping. The country of the Frieght Forwarder .  """  
      self.FFContact:str = obj["FFContact"]
      """  International Shipping. Frieght Forwarder Contact  """  
      self.FFCompName:str = obj["FFCompName"]
      """  International Shipping. Frieght Forwarder company name  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  International Shipping. Frieght Forwarder Phone number  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  Is this an International shipment  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Indicates whether or not all freight charges sent or received are for individual pack DIs or the master pack.  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Freight Forwarder third address line.  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Additional Handling Required flag  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Non Standard Package flag.  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder country portion of the address  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.PayBTAddress3:str = obj["PayBTAddress3"]
      """  Payer Bill To  third address line  """  
      self.PayBTCountryNum:int = obj["PayBTCountryNum"]
      """  Payer Bill To country portion of the address  """  
      self.PayBTPhone:str = obj["PayBTPhone"]
      """  Payer Bill To phone number  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantity View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View Ship from Nam  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantity View Memo  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the order is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the order which could affect taxes (OrderDtl, OrderHed, OrderMisc, etc). It defaults from XASyst.SOReadyToCalcDflt field when an order is created.  """  
      self.TotalCharges:int = obj["TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalMisc:int = obj["TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalDiscount:int = obj["TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalComm:int = obj["TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalAdvBill:int = obj["TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalLines:int = obj["TotalLines"]
      """  Total number of lines on the order  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases on order  """  
      self.TotalRelDates:int = obj["TotalRelDates"]
      """  Total number of distinct release dates on order  """  
      self.DocTotalCharges:int = obj["DocTotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalMisc:int = obj["DocTotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalDiscount:int = obj["DocTotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalComm:int = obj["DocTotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalTax:int = obj["TotalTax"]
      """   Order Total Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalAdvBill:int = obj["DocTotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalShipped:int = obj["TotalShipped"]
      """  Total Shipped amount  """  
      self.TotalInvoiced:int = obj["TotalInvoiced"]
      """  Total amount of order that has been invoiced  """  
      self.TotalCommLines:int = obj["TotalCommLines"]
      """  Total number of lines that were commissionable  """  
      self.SRCommAmt1:int = obj["SRCommAmt1"]
      """  Commission earned for first sales rep  """  
      self.SRCommAmt2:int = obj["SRCommAmt2"]
      """  Commission earned for second sales rep  """  
      self.SRCommAmt3:int = obj["SRCommAmt3"]
      """  Commission earned for third sales rep  """  
      self.SRCommAmt4:int = obj["SRCommAmt4"]
      """  Commission earned for fourth sales rep  """  
      self.SRCommAmt5:int = obj["SRCommAmt5"]
      """  Commission earned for fifth sales rep  """  
      self.SRCommableAmt1:int = obj["SRCommableAmt1"]
      """  Total Commissionable Amount for first salesrep  """  
      self.SRCommableAmt2:int = obj["SRCommableAmt2"]
      """  Total Commissionable Amount for second salesrep  """  
      self.SRCommableAmt3:int = obj["SRCommableAmt3"]
      """  Total Commissionable Amount for third salesrep  """  
      self.SRCommableAmt4:int = obj["SRCommableAmt4"]
      """  Total Commissionable Amount for fourth salesrep  """  
      self.SRCommableAmt5:int = obj["SRCommableAmt5"]
      """  Total Commissionable Amount for fifth salesrep  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt1DepositBal:int = obj["Rpt1DepositBal"]
      """  Display value contains the deposit balance in a reporting currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt2DepositBal:int = obj["Rpt2DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt3DepositBal:int = obj["Rpt3DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt1TotalCharges:int = obj["Rpt1TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalCharges:int = obj["Rpt2TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalCharges:int = obj["Rpt3TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalAdvBill:int = obj["Rpt1TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt2TotalAdvBill:int = obj["Rpt2TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt3TotalAdvBill:int = obj["Rpt3TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt1TotalMisc:int = obj["Rpt1TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalMisc:int = obj["Rpt2TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalMisc:int = obj["Rpt3TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalDiscount:int = obj["Rpt1TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalDiscount:int = obj["Rpt2TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalDiscount:int = obj["Rpt3TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalComm:int = obj["Rpt1TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalComm:int = obj["Rpt2TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalComm:int = obj["Rpt3TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax +TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1CCAmount:int = obj["Rpt1CCAmount"]
      """  See CCAmount  """  
      self.Rpt2CCAmount:int = obj["Rpt2CCAmount"]
      """  See CCAmount  """  
      self.Rpt3CCAmount:int = obj["Rpt3CCAmount"]
      """  See CCAmount  """  
      self.Rpt1CCFreight:int = obj["Rpt1CCFreight"]
      """  See CCFreight  """  
      self.Rpt2CCFreight:int = obj["Rpt2CCFreight"]
      """  See CCFreight  """  
      self.Rpt3CCFreight:int = obj["Rpt3CCFreight"]
      """  See CCFreight  """  
      self.Rpt1CCTax:int = obj["Rpt1CCTax"]
      """  See CCTax  """  
      self.Rpt2CCTax:int = obj["Rpt2CCTax"]
      """  See CCTax  """  
      self.Rpt3CCTax:int = obj["Rpt3CCTax"]
      """  See CCTax  """  
      self.Rpt1CCTotal:int = obj["Rpt1CCTotal"]
      """  See CCTotal  """  
      self.Rpt2CCTotal:int = obj["Rpt2CCTotal"]
      """  See CCTotal  """  
      self.Rpt3CCTotal:int = obj["Rpt3CCTotal"]
      """  See CCTotal  """  
      self.OrderAmt:int = obj["OrderAmt"]
      """  Total order Amount. This field is an accumulation of the extended net amounts of the detail line items  """  
      self.DocOrderAmt:int = obj["DocOrderAmt"]
      """  Total order Amount in customer currency. This field is an accumulation of the extended net amounts of the detail line items and rounded according to the Doc currency Round rule  """  
      self.Rpt1OrderAmt:int = obj["Rpt1OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrderAmt:int = obj["Rpt2OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrderAmt:int = obj["Rpt3OrderAmt"]
      """  Reporting currency value of this field  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipment country  """  
      self.TotalWHTax:int = obj["TotalWHTax"]
      """   Order Total Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalWHTax:int = obj["DocTotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalWHTax:int = obj["Rpt1TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalWHTax:int = obj["Rpt2TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalWHTax:int = obj["Rpt3TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """   Order Total Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS is saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the  OTS info.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.OrderStatus:str = obj["OrderStatus"]
      """  Status of Order  """  
      self.HoldSetByDemand:bool = obj["HoldSetByDemand"]
      """  Hold Set by Demand  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.InTotalCharges:int = obj["InTotalCharges"]
      """  Reserved for future use  """  
      self.InTotalMisc:int = obj["InTotalMisc"]
      """  Reserved for future use  """  
      self.InTotalDiscount:int = obj["InTotalDiscount"]
      """  Reserved for future use  """  
      self.DocInTotalCharges:int = obj["DocInTotalCharges"]
      """  Reserved for future use  """  
      self.DocInTotalMisc:int = obj["DocInTotalMisc"]
      """  Reserved for future use  """  
      self.DocInTotalDiscount:int = obj["DocInTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt1InTotalCharges:int = obj["Rpt1InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt2InTotalCharges:int = obj["Rpt2InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt3InTotalCharges:int = obj["Rpt3InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt1InTotalMisc:int = obj["Rpt1InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt2InTotalMisc:int = obj["Rpt2InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt3InTotalMisc:int = obj["Rpt3InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt1InTotalDiscount:int = obj["Rpt1InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt2InTotalDiscount:int = obj["Rpt2InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt3InTotalDiscount:int = obj["Rpt3InTotalDiscount"]
      """  Reserved for future use  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash Receipts. Default is from Customer(Bill To).  """  
      self.ERSOrder:bool = obj["ERSOrder"]
      """  It will be used to identify SO that will generate an invoice at the shipment.  If the order is created manually the default for this order will be taken from the customer master file. If the order is created via DM, the default will be taken from the value in the DM records.  """  
      self.LOCHold:bool = obj["LOCHold"]
      """  Indicates that order is on hold due to amount exceeding value on Letter of Credit.  """  
      self.PSCurrCode:str = obj["PSCurrCode"]
      """  Currency code used in further packing slips.  """  
      self.InvCurrCode:str = obj["InvCurrCode"]
      """  Currency code used in further AR invoices.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  Legal Number for the record.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document for the record.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.DemandProcessDate:str = obj["DemandProcessDate"]
      """  Date in which the related demand was last processed.  """  
      self.DemandProcessTime:int = obj["DemandProcessTime"]
      """  System Time when demand was last processed.  """  
      self.LastScheduleNumber:str = obj["LastScheduleNumber"]
      """  Last Schedule Number in which the demand was processed.  """  
      self.LastTCtrlNum:str = obj["LastTCtrlNum"]
      """  EDI Transaction Control Number  """  
      self.LastBatchNum:str = obj["LastBatchNum"]
      """  EDI Batch Control Number  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCPONum:str = obj["ECCPONum"]
      """  ECCPONum  """  
      self.WIOrder:str = obj["WIOrder"]
      """  WIOrder  """  
      self.WIApplication:str = obj["WIApplication"]
      """  WIApplication  """  
      self.WIUsername:str = obj["WIUsername"]
      """  WIUsername  """  
      self.WIUserID:str = obj["WIUserID"]
      """  WIUserID  """  
      self.WICreditCardorder:bool = obj["WICreditCardorder"]
      """  WICreditCardorder  """  
      self.OrderCSR:str = obj["OrderCSR"]
      """  OrderCSR  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.IsCSRSet:bool = obj["IsCSRSet"]
      """  IsCSRSet  """  
      self.ECCPaymentMethod:str = obj["ECCPaymentMethod"]
      """  ECCPaymentMethod  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      """  OTSShipToNum  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.ccToken:str = obj["ccToken"]
      """  ccToken  """  
      self.InvcOrderCmp:bool = obj["InvcOrderCmp"]
      """  InvcOrderCmp  """  
      self.ReprintSOAck:bool = obj["ReprintSOAck"]
      """  ReprintSOAck  """  
      self.CounterSOAck:int = obj["CounterSOAck"]
      """  CounterSOAck  """  
      self.DispatchReason:str = obj["DispatchReason"]
      """  DispatchReason  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag will be used to indicate if the sales order is ready to be fulfilled.  """  
      self.ShipByTime:int = obj["ShipByTime"]
      """  Ship the good by this time  """  
      self.TWFiscalYear:int = obj["TWFiscalYear"]
      """  Taiwan GUI Calendar Fiscal Year  """  
      self.TWFiscalYearSuffix:str = obj["TWFiscalYearSuffix"]
      """  Taiwan GUI Calendar Fiscal Year Suffix  """  
      self.TWFiscalPeriod:int = obj["TWFiscalPeriod"]
      """  Taiwan GUI Calendar Fiscal Period  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  GUI Group of Legal Numbers  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  Seller GUI Code  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  Buyer GUI Code  """  
      self.OrderOpenCredit:int = obj["OrderOpenCredit"]
      """  OrderOpenCredit  """  
      self.ClosedNotShipped:int = obj["ClosedNotShipped"]
      """  ClosedNotShipped  """  
      self.InvCurrDepositBal:int = obj["InvCurrDepositBal"]
      """  InvCurrDepositBal  """  
      self.PLArticle106c:bool = obj["PLArticle106c"]
      """  Article. 106c  """  
      self.PLInvIssuedByTaxpayer:bool = obj["PLInvIssuedByTaxpayer"]
      """  Invoices are issued by a taxpayer's representative  """  
      self.PLInvIssuedBySecondTaxpayer:bool = obj["PLInvIssuedBySecondTaxpayer"]
      """  Invoices issued by the second taxpayer  """  
      self.PLTouristService:bool = obj["PLTouristService"]
      """  Tourist Services  """  
      self.PLSecondHandOrArts:bool = obj["PLSecondHandOrArts"]
      """  Second hand goods, works of art, collectibles or antiques  """  
      self.PLLegalArticleAct:str = obj["PLLegalArticleAct"]
      """  Appropriate Legal Article of the Act  """  
      self.PLLegalArticleWEDirective:str = obj["PLLegalArticleWEDirective"]
      """  Appropriate Legal Article of 2006/112/WE Directive  """  
      self.PLLegalArticleOther:str = obj["PLLegalArticleOther"]
      """  Other Legal Article  """  
      self.PLEnforcementAuthName:str = obj["PLEnforcementAuthName"]
      """  Name of the Enforcement Authority or the Name of the Judicial Officer  """  
      self.PLEnforcementAuthAddr:str = obj["PLEnforcementAuthAddr"]
      """  Address of the Enforcement Authority or Judicial Officer  """  
      self.PLTaxRepresentativeName:str = obj["PLTaxRepresentativeName"]
      """  Tax Representative Name  """  
      self.PLTaxRepresentativeAddr:str = obj["PLTaxRepresentativeAddr"]
      """  Tax Representative Address  """  
      self.PLTaxRepresentativeTaxID:str = obj["PLTaxRepresentativeTaxID"]
      """  Tax ID of the Tax Representative  """  
      self.PLMarginScheme:int = obj["PLMarginScheme"]
      """  Margin Scheme  """  
      self.PLGoodsOrServiceVATExempt:bool = obj["PLGoodsOrServiceVATExempt"]
      """  Goods or Service VAT exempt  """  
      self.CCCity:str = obj["CCCity"]
      """  Credit Card Holder City  """  
      self.CCState:str = obj["CCState"]
      """  Credit Card Holder State  """  
      self.ExtAOEUserID:str = obj["ExtAOEUserID"]
      """  ExtAOEUserID  """  
      self.ExtAOE:str = obj["ExtAOE"]
      """  ExtAOE  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers (CustID`CustomerName~CustID`CustomerName)  """  
      self.AVSAddr:str = obj["AVSAddr"]
      """  AVSADDR returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) address test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AVSZip:str = obj["AVSZip"]
      """  AVSZIP returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) zip code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.BillToCustomerName:str = obj["BillToCustomerName"]
      """  Bill to customer name.  """  
      self.BTAddressList:str = obj["BTAddressList"]
      """  Bill To Address List.  """  
      self.BTContactEMailAddress:str = obj["BTContactEMailAddress"]
      self.BTContactFaxNum:str = obj["BTContactFaxNum"]
      """  Bill to contact fax number.  """  
      self.BTContactName:str = obj["BTContactName"]
      """  Bill to contact name.  """  
      self.BTContactPhoneNum:str = obj["BTContactPhoneNum"]
      """  Bill to contact phone number.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Bill To Customer ID  """  
      self.CanChangeTaxLiab:bool = obj["CanChangeTaxLiab"]
      """  The flag to indicate if the user can change Tax Liability on the header level after adding a detail line.  """  
      self.CardStore:str = obj["CardStore"]
      """  Stored Credit Card Number  """  
      self.CCCSCID:str = obj["CCCSCID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention  """  
      self.CCCSCIDToken:str = obj["CCCSCIDToken"]
      """  Tokenized value of CSCID  """  
      self.CCIsTraining:bool = obj["CCIsTraining"]
      """   Indicates if the credit card setup will be using a testing Paygate instance for transactions.
Force requests to use Paygate test url: paygate-test1.eaglesoa.com  """  
      self.CCResponse:str = obj["CCResponse"]
      """  RESPMSG returned by  a 3rd party credit card processing company for a credit card transaction. This is a brief description of the status of the credit card transaction.  """  
      self.CCRounding:int = obj["CCRounding"]
      self.CCTranID:str = obj["CCTranID"]
      """  PNREF returned by a 3rd party credit card processing company for a credit card transaction. This is a unique number that identifies the transaction and is often referenced we performing related transactions.  """  
      self.CCTranType:str = obj["CCTranType"]
      """  Credit Card Transaction Type  """  
      self.CSCResult:str = obj["CSCResult"]
      """  CVV2MATCH returned by a 3rd party credit card processing company for a credit card transaction. This value represents the results of the Card Security Code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustomerPrintAck:bool = obj["CustomerPrintAck"]
      self.CustomerRequiresPO:bool = obj["CustomerRequiresPO"]
      """  If true the customer requires a unique PO on Sales Orders  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      """  When set to true, indicates that this customer does not have credit available from your company.  """  
      self.CustTradePartnerName:str = obj["CustTradePartnerName"]
      self.DemandContract:str = obj["DemandContract"]
      """  DemandContract  """  
      self.DocCCRounding:int = obj["DocCCRounding"]
      self.DocTotalNet:int = obj["DocTotalNet"]
      self.DocTotalOrder:int = obj["DocTotalOrder"]
      self.dspBTCustID:str = obj["dspBTCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.ECCEmail:str = obj["ECCEmail"]
      """  ECC Contact Email - Contains the email address of the ECC login that placed the sales order. This only applies for B2C Orders.  """  
      self.ECCPaymentDesc:str = obj["ECCPaymentDesc"]
      """  ECC Payment Description  """  
      self.EnableCreditCard:bool = obj["EnableCreditCard"]
      """  True when Credit Card Procesing module is enabled  """  
      self.EnableJobWizard:bool = obj["EnableJobWizard"]
      """  True when Job Wizard must be enabled  """  
      self.EnableSoldToID:bool = obj["EnableSoldToID"]
      """  True when SoldTo ID must be enabled  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ERSOverride:bool = obj["ERSOverride"]
      """  It will be displayed when the value of the ERS flag at the sales order is different from the value in the customer master file.  """  
      self.HasMiscCharges:bool = obj["HasMiscCharges"]
      """  Used by UI to disable CurrencyCode  """  
      self.HasOrderLines:bool = obj["HasOrderLines"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.LinkMsg:str = obj["LinkMsg"]
      self.NoTaxRgnChange:bool = obj["NoTaxRgnChange"]
      """  Internal field which indicates if Order Tax Liability is not going to be changed even though Ship To is changed.  Related to Tax inclusive pricing. Depends on user response.  """  
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  OTS Tax Liability Code (Header)  """  
      self.ParentCustNum:int = obj["ParentCustNum"]
      """  Contains the Parent Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      self.ReferencePNRef:str = obj["ReferencePNRef"]
      """  PNRef number referred to in the transaction.  If Deposit transaction must referenece prior Authorization using the PNRef  """  
      self.ResetBTCustAddr:bool = obj["ResetBTCustAddr"]
      """  Internal field toindicate if the system should reset Bill to Customer address.  Based on the  user reply for LOC.  """  
      self.ResetRelTaxRgn:bool = obj["ResetRelTaxRgn"]
      """  Internal field which indicates if existing Release Tax Region should be se-set to the new Order Header Tax Liability.  Depends on the user reply.  """  
      self.Rpt1CCRounding:int = obj["Rpt1CCRounding"]
      self.Rpt1TotalNet:int = obj["Rpt1TotalNet"]
      self.Rpt2CCRounding:int = obj["Rpt2CCRounding"]
      self.Rpt2TotalNet:int = obj["Rpt2TotalNet"]
      self.Rpt3CCRounding:int = obj["Rpt3CCRounding"]
      self.Rpt3TotalNet:int = obj["Rpt3TotalNet"]
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  Element 1 of SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  Element 2 of SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  Element 3 of SalesRepList  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  Element 4 of SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  Element 5 of SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.ShipToAddressList:str = obj["ShipToAddressList"]
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShipToCustId:str = obj["ShipToCustId"]
      """  Customer Id of the third-party Ship To  """  
      self.ShowApplyOrderDiscountsControl:bool = obj["ShowApplyOrderDiscountsControl"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      self.SoldToContactEMailAddress:str = obj["SoldToContactEMailAddress"]
      self.SoldToContactFaxNum:str = obj["SoldToContactFaxNum"]
      self.SoldToContactName:str = obj["SoldToContactName"]
      self.SoldToContactPhoneNum:str = obj["SoldToContactPhoneNum"]
      self.TermsType:str = obj["TermsType"]
      """  This field defines the type of the term  """  
      self.TotalNet:int = obj["TotalNet"]
      self.TotalOrder:int = obj["TotalOrder"]
      self.TranDocTypeDescr:str = obj["TranDocTypeDescr"]
      self.TrueDiscountPercent:int = obj["TrueDiscountPercent"]
      """  the true discount percent from the order total  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  Taiwan GUI Legal Number Generation Type  """  
      self.UpdateDtlAndRelRecords:bool = obj["UpdateDtlAndRelRecords"]
      self.InvoicesExist:bool = obj["InvoicesExist"]
      """  Indicates if one or more invoices exist for this order  """  
      self.BTAddressFormatted:str = obj["BTAddressFormatted"]
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  The formatted ship to address  """  
      self.SoldToAddressFormatted:str = obj["SoldToAddressFormatted"]
      """  The formatted Sold To Address  """  
      self.TranDate:str = obj["TranDate"]
      self.TranNum:int = obj["TranNum"]
      self.TranTime:int = obj["TranTime"]
      self.OrderRelNeedByDateNotNull:bool = obj["OrderRelNeedByDateNotNull"]
      """  Indicates there is an OrderRel record that has a non-null NeedByDate  """  
      self.InactiveCustomer:bool = obj["InactiveCustomer"]
      """  Indicates a customer referenced on the order is inactive.  """  
      self.EnableAllocationQueueActions:bool = obj["EnableAllocationQueueActions"]
      """  Enable Fulfillment Queue Actions  """  
      self.CREProcessor:bool = obj["CREProcessor"]
      """  CREProcessor is true when Credit Card Configuration is CRE Server.  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BTCustNumCustID:str = obj["BTCustNumCustID"]
      self.BTCustNumName:str = obj["BTCustNumName"]
      self.BTCustNumBTName:str = obj["BTCustNumBTName"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.InvCurrCurrDesc:str = obj["InvCurrCurrDesc"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.PlantName:str = obj["PlantName"]
      self.PSCurrCurrDesc:str = obj["PSCurrCurrDesc"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.ReservePriDescription:str = obj["ReservePriDescription"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaCodeInactive:bool = obj["ShipViaCodeInactive"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PODetailRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenLine:bool = obj["OpenLine"]
      """  Indicates if this line item is Open/Closed. This is not directly maintainable by the user. Normally it gets set to "Closed" as a result of the receiving process. When there are no longer any open PORel records then the PODetail record is closed. This can also be closed when the user Voids the Order or PODetail record.  """  
      self.VoidLine:bool = obj["VoidLine"]
      """   Indicates if the Line was voided. Voided line items are not maintainable, can't "unvoid".  This field is not directly maintainable.  Instead the void function will be performed via a "Void Line" button.  Which then presents a verification dialog box.
When an PODetail record is 'voided',  all current open  PORel records are also closed and voided.  If no other open PoDetail records exist then set the PoHeader.OperOrder = No.
This can also be set when the related PoHeader is voided.  """  
      self.PONUM:int = obj["PONUM"]
      """  Purchase order number that the detail line item is linked to.  """  
      self.POLine:int = obj["POLine"]
      """  The line number of the detail record on the purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Defaults from JobOper, JobMtl or Part depending on the reference to the job records.  If no job reference then uses the Part.PartDescription if it is a valid PartNum.  """  
      self.IUM:str = obj["IUM"]
      """  (Our) Unit Of Measure.  """  
      self.UnitCost:int = obj["UnitCost"]
      """   The unit price in the vendors unit of measure.  Unfortunately the Field Name is UnitCost instead of UnitPrice which is a little
misleading  """  
      self.DocUnitCost:int = obj["DocUnitCost"]
      """  The unit price in the vendors unit of measure and currency.  Unfortunately the Field Name is UnitCost instead of UnitPrice which is a little misleading.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Total Order Quantity for the line item.  This is stored in the Vendors Unit of Measure. This quantity must always be kept in sync with the scheduled release quantities stored in the PORel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line (more than one PORel record) the OrderQty is not maintainable.  As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This insures that Order quantity and scheduled  quantities are always in sync.  """  
      self.XOrderQty:int = obj["XOrderQty"]
      """  Total Order Quantity for the line item.  This is stored in Our Unit of Measure. This quantity must always be kept in sync with the scheduled release quantities stored in the PORel table.  Normally this field is directly maintainable. However when multiple shipping releases have been established for this line (more than one PORel record) the XOrderQty is not maintainable.  As the user modifies the quantities in the individual release lines the XOrderQty field will get adjusted.  This ensures that Order quantity and scheduled quantities are always in sync.  """  
      self.Taxable:bool = obj["Taxable"]
      """  Taxable  """  
      self.PUM:str = obj["PUM"]
      """  Purchasing UOM  """  
      self.CostPerCode:str = obj["CostPerCode"]
      """   Indicates the costing per quantity. It can be "E" = per each,
"C" = per hundred,  "M" = per thousand.  Used to calculate the extended unit cost for the line item.  The logic is to divide the PODetail.OrderQty by the appropriate "per" value and then multiply by unit cost.  Use the  Part.PricePerCode as a default.  If Part record does not exist then default as "E".  """  
      self.PartNum:str = obj["PartNum"]
      """  OUR internal Part number for this item.  """  
      self.VenPartNum:str = obj["VenPartNum"]
      """  Supplier Part Number  """  
      self.CommentText:str = obj["CommentText"]
      """  Contains comments about the detail order line item. These will be printed on the purchase order.  Defaults from the related JobOper, JobMtl or Part file.  """  
      self.ClassID:str = obj["ClassID"]
      """  The foreign key to the PartClass Master. May be blank, if entered must be valid in PartClass file.  Defaulted from Part.ClassID. The PartClass is used in determining a default G/L expense account.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  OUR revision number of the OUR part.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required when this PO line item is received. Inspection may also be enforced if the related PartClass, Vendor, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The VendorNum that ties back to the Vendor master file.  This field is a duplicate of the field in POHeader and is maintained  in the write triggers of POHeader and PODetail.  """  
      self.AdvancePayBal:int = obj["AdvancePayBal"]
      """  Tracks the "Balance" of Advance Payments which are to be used to reduce the invoice when actual order is received. This value is increased via the "Advance Pay" invoice type. It is reduced when the receipt invoice is created by entering amount in the APInvDtl.  """  
      self.DocAdvancePayBal:int = obj["DocAdvancePayBal"]
      """  Tracks the "Balance" of Advance Payments which are to be used to reduce the invoice when actual order is received. This value is increased via the "Advance Pay" invoice type. It is reduced when the receipt invoice is created by entering amount in the APInvDtl.  """  
      self.Confirmed:bool = obj["Confirmed"]
      """  Indicated Supplier Confirmed the PO.  Will default from the PO header.  Also used when the supplier or  """  
      self.DateChgReq:bool = obj["DateChgReq"]
      """  Indicates this line has a pending date change  """  
      self.QtyChgReq:bool = obj["QtyChgReq"]
      """  Indicates this line has a pending qty change  """  
      self.PartNumChgReq:str = obj["PartNumChgReq"]
      """  Requested pending partnumber change  """  
      self.RevisionNumChgReq:str = obj["RevisionNumChgReq"]
      """  Requested pending revision change  """  
      self.ConfirmDate:str = obj["ConfirmDate"]
      """  Date Supplier Confirmed the PO  """  
      self.ConfirmVia:str = obj["ConfirmVia"]
      """  Can be "web" or "client"  """  
      self.PrcChgReq:int = obj["PrcChgReq"]
      """  Requested Price change.  SRM  """  
      self.PurchCode:str = obj["PurchCode"]
      """  If the ExtCompany.APPurchType field is yes, then this field cannot be blank (EuroFin)  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Order number created for this PO for the Inter-Company Trading.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order Line created for this PO Line for the Inter-Company Trading.  """  
      self.Linked:bool = obj["Linked"]
      """  Linked to sales order line.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.ContractActive:bool = obj["ContractActive"]
      """  Is this line active on the Contract Purchase Order?  """  
      self.ContractQty:int = obj["ContractQty"]
      """  Quantity for this Contract Purchase Order Line.  """  
      self.ContractUnitCost:int = obj["ContractUnitCost"]
      """  Unit Price for this Contract Purchase Order Line.  """  
      self.ContractDocUnitCost:int = obj["ContractDocUnitCost"]
      """  Document Unit Price for this Contract Purchase Order Line.  """  
      self.Rpt1AdvancePayBal:int = obj["Rpt1AdvancePayBal"]
      """  Advanced Payments Balance in Rpt1 currency.  """  
      self.Rpt2AdvancePayBal:int = obj["Rpt2AdvancePayBal"]
      """  Advanced Payments Balance in Rpt2 currency.  """  
      self.Rpt3AdvancePayBal:int = obj["Rpt3AdvancePayBal"]
      """  Advanced Payments Balance in Rpt3 currency.  """  
      self.Rpt1UnitCost:int = obj["Rpt1UnitCost"]
      """  Unit price in the vendors unit of measure and Rpt1 currency.  """  
      self.Rpt2UnitCost:int = obj["Rpt2UnitCost"]
      """  Unit price in the vendors unit of measure and Rpt2 currency.  """  
      self.Rpt3UnitCost:int = obj["Rpt3UnitCost"]
      """  Unit price in the vendors unit of measure and Rpt3 currency.  """  
      self.ContractQtyUOM:str = obj["ContractQtyUOM"]
      """  Unit Of Measure of the ContractQty.  """  
      self.Rpt1ContractUnitCost:int = obj["Rpt1ContractUnitCost"]
      """  Unit Price for this Contract Purchase Order Line in Rpt1 currency.  """  
      self.Rpt2ContractUnitCost:int = obj["Rpt2ContractUnitCost"]
      """  Unit Price for this Contract Purchase Order Line in Rpt2 currency.  """  
      self.Rpt3ContractUnitCost:int = obj["Rpt3ContractUnitCost"]
      """  Unit Price for this Contract Purchase Order Line in Rpt3 currency.  """  
      self.BaseQty:int = obj["BaseQty"]
      """  Quantity in the Parts Base UOM.  Set by the system by doing a UOM conversion of the PODeltail.XOrderQty to the PODetail.BaseUOM .  """  
      self.BaseUOM:str = obj["BaseUOM"]
      """   Unit of Measure of the PODetail.BaseXOrderQty.
If valid part, then it is the Parts Primary Inventory UOM otherwise it is the same as PODetail.IUM  """  
      self.BTOOrderNum:int = obj["BTOOrderNum"]
      """  Order Num related to this purchase order. Used only for Buy To Order POs.  """  
      self.BTOOrderLine:int = obj["BTOOrderLine"]
      """  The line number of the sales order related to this purchase order. Used only for Buy To Order POs.  """  
      self.VendorPartOpts:str = obj["VendorPartOpts"]
      """   Vendor Part Print Options. Determines what is printed.
M = Main Part Reference (Default)
S = Secondary Part Reference
O = Only Part Reference
A = All Supplier Parts Referenced
N = No Supplier Parts Referenced  """  
      self.MfgPartOpts:str = obj["MfgPartOpts"]
      """   Mfg Part Print Options. Determines what is printed.
O = Only Part Reference (Default)
A = All Supplier Parts Referenced
N = No Supplier Parts Referenced  """  
      self.SubPartOpts:str = obj["SubPartOpts"]
      """   Substitute Part Print Options. Determines what is printed.
O = Only Part Reference (Default)
M = Main Part Reference
S = Secondary Part Reference  """  
      self.MfgNum:int = obj["MfgNum"]
      """  Manufacturer Unique ID  """  
      self.MfgPartNum:str = obj["MfgPartNum"]
      """  Manufacturer's Part Number.  """  
      self.SubPartNum:str = obj["SubPartNum"]
      """  Substitute Part Number  """  
      self.SubPartType:str = obj["SubPartType"]
      """   Substitute Part Type
O = Original
S = Substitute  """  
      self.ConfigUnitCost:int = obj["ConfigUnitCost"]
      """   Same as Unit cost except that this field contains the unit price computed from the input based pricing in a configuration.
If price breaks exist this price should be used as the base price instead of the one found in the part table.  """  
      self.ConfigBaseUnitCost:int = obj["ConfigBaseUnitCost"]
      """  This is the base cost for inputs based pricing of a configuration.  The price of inputs are added to this price to get the ConfigUnitPrice.  """  
      self.ConvOverRide:bool = obj["ConvOverRide"]
      """  When True, the Supplier Quantity field is entered directly instead of being calculated from Our Quantity with a UOM conversion  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.Direction:str = obj["Direction"]
      """  Direction  """  
      self.Per:str = obj["Per"]
      """  Per  """  
      self.MaintainPricingUnits:bool = obj["MaintainPricingUnits"]
      """  MaintainPricingUnits  """  
      self.OverrideConversion:bool = obj["OverrideConversion"]
      """  OverrideConversion  """  
      self.RowsManualFactor:bool = obj["RowsManualFactor"]
      """  RowsManualFactor  """  
      self.KeepRowsManualFactorTmp:bool = obj["KeepRowsManualFactorTmp"]
      """  KeepRowsManualFactorTmp  """  
      self.ShipToSupplierDate:str = obj["ShipToSupplierDate"]
      """  ShipToSupplierDate  """  
      self.Factor:int = obj["Factor"]
      """  Factor  """  
      self.PricingQty:int = obj["PricingQty"]
      """  PricingQty  """  
      self.PricingUnitPrice:int = obj["PricingUnitPrice"]
      """  PricingUnitPrice  """  
      self.UOM:str = obj["UOM"]
      """  UOM  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.DocPricingUnitPrice:int = obj["DocPricingUnitPrice"]
      """  DocPricingUnitPrice  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  Indicates if the supplier price list has been overriden which will in turn prevent the unit price from being updated when taking into account quantity / price breaks.  """  
      self.QtyOption:str = obj["QtyOption"]
      """  It indicates the option of what type of quantity will be able to be changed in the POLine. The actual options are "Our" and "Supplier"  """  
      self.OrigComment:str = obj["OrigComment"]
      """  Contains old comments about the detail order line item. This field saves old comments about the detail line that are going to be replaced by new comments.  """  
      self.SmartString:str = obj["SmartString"]
      """  SmartString  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  SmartStringProcessed  """  
      self.DueDate:str = obj["DueDate"]
      """  Specifies the date by which you need to receive the part. If you set the Due Date before create releases, it will act as default value when adding new releases. If you're adding lines from:  - BTO or Drop Shipments, PODetail.DueDate will take the value from OrderRel.NeedByDate. - Job Material , PODetail.DueDate  will take the value from JobMtl.ReqDate. - Subcontract Operations, PODetail.DueDate  wil take the value from JobOper.DueDate  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.SelCurrPricingUnitPrice:int = obj["SelCurrPricingUnitPrice"]
      """  SelCurrPricingUnitPrice  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of the user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date and time that the record was last changed  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this PO line. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  This flag determines whether any manual taxes were created for a line miscellaneous charge, if this is set to True the tax engine will not calculate any miscellaneous charge tax information  """  
      self.InUnitCost:int = obj["InUnitCost"]
      """  Unit price in the vendors unit of measure inclusive of tax in base currency.  """  
      self.DocInUnitCost:int = obj["DocInUnitCost"]
      """  Unit price in the vendors unit of measure inclusive of tax in document currency.  """  
      self.Rpt1InUnitCost:int = obj["Rpt1InUnitCost"]
      """  Unit price in the vendors unit of measure inclusive of tax in Rpt1 currency.  """  
      self.Rpt2InUnitCost:int = obj["Rpt2InUnitCost"]
      """  Unit price in the vendors unit of measure inclusive of tax in Rpt1 currency.  """  
      self.Rpt3InUnitCost:int = obj["Rpt3InUnitCost"]
      """  Unit price in the vendors unit of measure inclusive of tax in Rpt1 currency.  """  
      self.InAdvancePayBal:int = obj["InAdvancePayBal"]
      """  Advanced Payments Balance inclusive of tax in base currency.  """  
      self.DocInAdvancePayBal:int = obj["DocInAdvancePayBal"]
      """  Advanced Payments Balance inclusive of tax in document currency.  """  
      self.Rpt1InAdvancePayBal:int = obj["Rpt1InAdvancePayBal"]
      """  Advanced Payments Balance inclusive of tax in Rpt1 currency.  """  
      self.Rpt2InAdvancePayBal:int = obj["Rpt2InAdvancePayBal"]
      """  Advanced Payments Balance inclusive of tax in Rpt2 currency.  """  
      self.Rpt3InAdvancePayBal:int = obj["Rpt3InAdvancePayBal"]
      """  Advanced Payments Balance inclusive of tax in Rpt3 currency.  """  
      self.InContractUnitCost:int = obj["InContractUnitCost"]
      """  Contract unit cost inclusive of tax in base currency.  """  
      self.DocInContractUnitCost:int = obj["DocInContractUnitCost"]
      """  Contract unit cost inclusive of tax in document currency.  """  
      self.Rpt1InContractUnitCost:int = obj["Rpt1InContractUnitCost"]
      """  Contract unit cost inclusive of tax in Rpt1 currency.  """  
      self.Rpt2InContractUnitCost:int = obj["Rpt2InContractUnitCost"]
      """  Contract unit cost inclusive of tax in Rpt2 currency.  """  
      self.Rpt3InContractUnitCost:int = obj["Rpt3InContractUnitCost"]
      """  Contract unit cost inclusive of tax in Rpt3 currency.  """  
      self.DocExtCost:int = obj["DocExtCost"]
      """  Extended cost of the PO Line in document currency. This is PODetail.OrderQty / PODetail.CostPerCode * PODetail.DocUnitCost.  """  
      self.ExtCost:int = obj["ExtCost"]
      """  Extended cost of the PO Line in base currency. This is PODetail.OrderQty / PODetail.CostPerCode * PODetail.UnitCost.  """  
      self.Rpt1ExtCost:int = obj["Rpt1ExtCost"]
      """  Extended cost of the PO Line in Rpt1 currency. This is PODetail.OrderQty / PODetail.CostPerCode * PODetail.Rpt1UnitCost.  """  
      self.Rpt2ExtCost:int = obj["Rpt2ExtCost"]
      """  Extended cost of the PO Line in Rpt2 currency. This is PODetail.OrderQty / PODetail.CostPerCode * PODetail.Rpt2UnitCost.  """  
      self.Rpt3ExtCost:int = obj["Rpt3ExtCost"]
      """  Extended cost of the PO Line in Rpt3 currency. This is PODetail.OrderQty / PODetail.CostPerCode * PODetail.Rpt3UnitCost.  """  
      self.DocMiscCost:int = obj["DocMiscCost"]
      """  Total amount for all miscellaneous charges associated to this PO Line in document currency.  This is the sum of POMisc.DocMiscAmt for all line charges.  """  
      self.MiscCost:int = obj["MiscCost"]
      """  Total amount for all miscellaneous charges associated to this PO Line in base currency.  This is the sum of POMisc.MiscAmt for all line charges.  """  
      self.Rpt1MiscCost:int = obj["Rpt1MiscCost"]
      """  Total amount for all miscellaneous charges associated to this PO Line in Rpt1 currency.  This is the sum of POMisc.Rpt1MiscAmt for all line charges.  """  
      self.Rpt2MiscCost:int = obj["Rpt2MiscCost"]
      """  Total amount for all miscellaneous charges associated to this PO Line in Rpt2 currency.  This is the sum of POMisc.Rpt2MiscAmt for all line charges.  """  
      self.Rpt3MiscCost:int = obj["Rpt3MiscCost"]
      """  Total amount for all miscellaneous charges associated to this PO Line in Rpt3 currency.  This is the sum of POMisc.Rpt3MiscAmt for all line charges.  """  
      self.TotalTax:int = obj["TotalTax"]
      """  Total Tax amount for this PO Line in base currency,  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """  Total Tax amount for this PO Line in document currency.  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """  Total Tax amount for this PO Line in Rpt1 currency,  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """  Total Tax amount for this PO Line in Rpt2 currency,  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """  Total Tax amount for this PO Line in Rpt3 currency,  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """  Total Order Self Assessed Taxes for this PO Line in base currency.  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """  Total Order Self Assessed Taxes for this PO Line in document currency.  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """  Total Self AssessedTax amount for this PO Line in Rpt1 currency.  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """  Total Self AssessedTax amount for this PO Line in Rpt2 currency.  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """  Total Self AssessedTax amount for this PO Line in Rpt3 currency.  """  
      self.TotalDedTax:int = obj["TotalDedTax"]
      """  Total deductable tax amount for this PO Line in base currency.  """  
      self.DocTotalDedTax:int = obj["DocTotalDedTax"]
      """  Total deductable tax amount for this PO Line in document currency.  """  
      self.Rpt1TotalDedTax:int = obj["Rpt1TotalDedTax"]
      """  Total deductable tax amount for this PO Line in Rpt1 currency.  """  
      self.Rpt2TotalDedTax:int = obj["Rpt2TotalDedTax"]
      """  Total Deductable tax amount for this PO Line in Rpt2 currency.  """  
      self.Rpt3TotalDedTax:int = obj["Rpt3TotalDedTax"]
      """  Total Deductable tax amount for this PO Line in Rpt3 currency.  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  CNBonded  """  
      self.EDIAckCode:str = obj["EDIAckCode"]
      """  Acknowledge code received from EDI  """  
      self.EDIAckComment:str = obj["EDIAckComment"]
      """  Additional comments to send with Acknowledge  """  
      self.AskRefCode:bool = obj["AskRefCode"]
      """  The flag to indicate if the user is supposed to be asked to enter a Reference code before saving a new PoDetail record .  """  
      self.CalcAssemblySeq:int = obj["CalcAssemblySeq"]
      self.CalcDocTotalCost:int = obj["CalcDocTotalCost"]
      self.CalcDueDate:str = obj["CalcDueDate"]
      self.CalcJobNum:str = obj["CalcJobNum"]
      self.CalcJobSeq:int = obj["CalcJobSeq"]
      self.CalcJobSeqType:str = obj["CalcJobSeqType"]
      self.calcLeadTime:int = obj["calcLeadTime"]
      self.CalcMangCustID:str = obj["CalcMangCustID"]
      self.CalcMangCustName:str = obj["CalcMangCustName"]
      self.CalcMangCustNum:int = obj["CalcMangCustNum"]
      self.CalcMfg:str = obj["CalcMfg"]
      self.CalcMfgPart:str = obj["CalcMfgPart"]
      self.calcMinOrderQty:int = obj["calcMinOrderQty"]
      self.CalcOurQty:int = obj["CalcOurQty"]
      self.calcPartPUM:str = obj["calcPartPUM"]
      self.CalcPurchasingFactor:int = obj["CalcPurchasingFactor"]
      """  purchasing factor  """  
      self.CalcPurchasingFactorDirection:str = obj["CalcPurchasingFactorDirection"]
      self.CalcTotalCost:int = obj["CalcTotalCost"]
      self.CalcTranType:str = obj["CalcTranType"]
      self.CalcVendQty:int = obj["CalcVendQty"]
      self.Configured:str = obj["Configured"]
      self.ConsolidatedPO:bool = obj["ConsolidatedPO"]
      self.ContractOrder:bool = obj["ContractOrder"]
      self.CostPerCodeContract:str = obj["CostPerCodeContract"]
      """  Indicates the costing per quantity (When Contract PO). It can be "E" = per each, "C" = per hundred,  "M" = per thousand.  Used to calculate the extended unit cost for the line item.  The logic is to divide the PODetail.OrderQty by the appropriate "per" value and then multiply by unit cost.  Use the  Part.PricePerCode as a default.  If Part record does not exist then default as "E".  """  
      self.CPFactor:int = obj["CPFactor"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DelPoSug:bool = obj["DelPoSug"]
      self.DisablePartRevBtn:bool = obj["DisablePartRevBtn"]
      self.DispAcctDescription:str = obj["DispAcctDescription"]
      """  Display Account Description.  """  
      self.DispExpAccount:str = obj["DispExpAccount"]
      """  A character string made up of Div, Dept, Chart and Segment values and their related separators concatenated into the full GL account number.  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      self.DocScrUnitCost:int = obj["DocScrUnitCost"]
      self.EnableRcvInspectionReq:bool = obj["EnableRcvInspectionReq"]
      """  False if vendor or class requires inspection, otherwise true.  """  
      self.ExpChart:str = obj["ExpChart"]
      """  The Chart ID component of the default G/L account.  """  
      self.ExpDivision:str = obj["ExpDivision"]
      """  The Division Component of the default expence G/L account.  """  
      self.ExpGLDept:str = obj["ExpGLDept"]
      """  The Department component of the default G/L account.  """  
      self.FromPOSugChg:bool = obj["FromPOSugChg"]
      self.LinkedSOConfig:bool = obj["LinkedSOConfig"]
      self.MultiRel:bool = obj["MultiRel"]
      self.NonMasterPart:bool = obj["NonMasterPart"]
      self.OpCode:str = obj["OpCode"]
      self.PartQtyBearing:bool = obj["PartQtyBearing"]
      self.POHeaderApprove:bool = obj["POHeaderApprove"]
      self.PORelOneOpenRelease:bool = obj["PORelOneOpenRelease"]
      """  True if there is only one release and it's open.  """  
      self.PriceBrkBTNSensitive:bool = obj["PriceBrkBTNSensitive"]
      self.RefCodeDesc:str = obj["RefCodeDesc"]
      """  Reference Code Description  """  
      self.RefCodeStatus:str = obj["RefCodeStatus"]
      """  Reference Code Status  """  
      self.ReferenceCode:str = obj["ReferenceCode"]
      """  Link to the related code in GlRefCod.RefCode  """  
      self.Rpt1CalcTotalCost:int = obj["Rpt1CalcTotalCost"]
      self.Rpt1ScrUnitCost:int = obj["Rpt1ScrUnitCost"]
      self.Rpt2CalcTotalCost:int = obj["Rpt2CalcTotalCost"]
      self.Rpt2ScrUnitCost:int = obj["Rpt2ScrUnitCost"]
      self.Rpt3CalcTotalCost:int = obj["Rpt3CalcTotalCost"]
      self.Rpt3ScrUnitCost:int = obj["Rpt3ScrUnitCost"]
      self.ScrUnitCost:int = obj["ScrUnitCost"]
      """   The unit price in the vendors unit of measure.  Unfortunately the Field Name is UnitCost instead of UnitPrice which is a little
misleading  """  
      self.SetCheveron:bool = obj["SetCheveron"]
      self.SubAvail:bool = obj["SubAvail"]
      self.UpdateRelRecords:bool = obj["UpdateRelRecords"]
      self.UpdateRelTaxable:bool = obj["UpdateRelTaxable"]
      """  Update PO Release Taxable Flag on Change of PO Detail Taxable Flag  """  
      self.VendPurPoint:str = obj["VendPurPoint"]
      """  Purchase Point used in the Supplier Tracker.  """  
      self.AllowPORecon:bool = obj["AllowPORecon"]
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Internal flag used for the row rules to control whether the inventory attributes should be enabled or not.  """  
      self.AttributeQtyMismatch:bool = obj["AttributeQtyMismatch"]
      """  True if there is a remaining qty difference between the attribute quantity and the receipt line quantity.  """  
      self.CalcJobMtlSeq:int = obj["CalcJobMtlSeq"]
      self.CalcJobOprSeq:int = obj["CalcJobOprSeq"]
      self.HasBuyToOrderRelease:bool = obj["HasBuyToOrderRelease"]
      """  Flag to indicate the current PO Line has at least one Buy To Order Release  """  
      self.LineAmtCalcd:bool = obj["LineAmtCalcd"]
      """  The flag to indicate if PO  doc/base/rpt line amounts are recalculated  whne entered and no need to recalculate on save.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.ClassInactive:bool = obj["ClassInactive"]
      self.ClassDescription:str = obj["ClassDescription"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.GlPurchPurchDesc:str = obj["GlPurchPurchDesc"]
      self.MfgNumMfgID:str = obj["MfgNumMfgID"]
      self.MfgNumName:str = obj["MfgNumName"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PONUMCurrencyCode:str = obj["PONUMCurrencyCode"]
      self.PONUMOrderDate:str = obj["PONUMOrderDate"]
      self.PONUMInPrice:bool = obj["PONUMInPrice"]
      self.PONUMShipName:str = obj["PONUMShipName"]
      self.PONUMShipToConName:str = obj["PONUMShipToConName"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_POHeaderRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if the order is open or closed. This is set automatically when all the PODetail records have been closed or can be set if the user Voids the Order. This field is not directly maintainable.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """  Indicates if the entire remaining Purchase Order is Voided. When an order is voided the POHeader.OpenOrder is set to No and all remaining PODetail and PORel records for the related order are closed and voided.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that uniquely identifies the purchase order.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  Entry Person  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Order Date for this purchase order. Initially defaults as "today", then defaults as last date entered in this session.  """  
      self.FOB:str = obj["FOB"]
      """  Incoterms  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Ship Via Code  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Terms  """  
      self.ShipName:str = obj["ShipName"]
      """  defaults from the company file.  """  
      self.ShipAddress1:str = obj["ShipAddress1"]
      """  First adress line  """  
      self.ShipAddress2:str = obj["ShipAddress2"]
      """  Second address line  """  
      self.ShipAddress3:str = obj["ShipAddress3"]
      """  Third address line  """  
      self.ShipCity:str = obj["ShipCity"]
      """  City portion of the address  """  
      self.ShipState:str = obj["ShipState"]
      """  Statee portion of the address  """  
      self.ShipZIP:str = obj["ShipZIP"]
      """  Postal code or Zip code portion of the address  """  
      self.ShipCountry:str = obj["ShipCountry"]
      """  Country is used as part of the Ship to  address. It can be left blank.  """  
      self.BuyerID:str = obj["BuyerID"]
      """  The ID that links to the Purchasing Agent master file.  """  
      self.FreightPP:bool = obj["FreightPP"]
      """  The freight charge is to be paid by the vendor.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the VendCnt  table. Use the Vendor.PRIMPCON as the default. or the VendorPP.PrimPCon if a vendor purchase point is referenced.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead its assigned via selection list processing.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Ties the PO header back to the VendPP master file. This can be blank indicating No purchase point.  """  
      self.CommentText:str = obj["CommentText"]
      """  Contains comments about over all  purchase order. These will be printed on the purchase order.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in receipt entry. It does not prevent receipts from being entered for this order.  """  
      self.ShipToConName:str = obj["ShipToConName"]
      """  Ship to contact name. Prints on Purchase order form. Defaults from the CustCnt or VendCnt.  """  
      self.ReadyToPrint:bool = obj["ReadyToPrint"]
      """  Indicates if the PO can be printed. Print functions are not available if this is = No.  """  
      self.PrintAs:str = obj["PrintAs"]
      """  N = New, C = Change Order  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this order.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.ShipCountryNum:int = obj["ShipCountryNum"]
      """  Country part of address. This field is in sync with the Country field. Must be a valid entry in the Country table.  """  
      self.LogChanges:bool = obj["LogChanges"]
      """  This field indicates if the system should generate purchase order booking records. Booking tables are used to track changes to POheader.  """  
      self.ApprovedDate:str = obj["ApprovedDate"]
      """  System date that the PO was approved.  This only pertains to PO which exceeded the buyers limit and have been approved.  """  
      self.ApprovedBy:str = obj["ApprovedBy"]
      """  The BuyerID  that approved the PO. (See ApprovedDate for related info)  """  
      self.Approve:bool = obj["Approve"]
      """   Inidicates if the PO is "ready" to be approved.  This is checked  when all the information is complete and is ready to be processed. When checked the system will test if PO has exceeded the buyers or system purchasing limit.  (See ApprovalStatus for related info)
When Approve = yes the PO cannot be maintained.  """  
      self.ApprovalStatus:str = obj["ApprovalStatus"]
      """   Indicates the approval status of the PO.
Valid values are; U - Unsubmitted for Approval,  P - Pending Approval, A - Approved, R - Rejected.  Before a PO can be printed it must be approved.  A PO is consider  approved if it doesn't exceed the buyers limit or it has been approved by the approver.  """  
      self.ApprovedAmount:int = obj["ApprovedAmount"]
      """   An internally used field that represents the total amount of the PO (in base currency) captured the last time the po was approved/rejected.  Note: this only pertains to PO that required approval in the first place otherwise it's zero.  The limit checking process will compare PO amounts to the greater of the buyers limit or this amount. Basically, if the PO was already approved once for a specific amount then it should not require subsequent approval until that amount is exceeded.
Note: This also contains the PO amount if it was rejected. In this case, the PO remains as rejected until they reduce the PO amount.  """  
      self.PostToWeb:bool = obj["PostToWeb"]
      """  Indicates the Supplier will respond via Suppliers workbench  """  
      self.PostDate:str = obj["PostDate"]
      """  Date Buyer posted the PO  """  
      self.VendorRefNum:str = obj["VendorRefNum"]
      """  Vendor reference number.  """  
      self.ConfirmReq:bool = obj["ConfirmReq"]
      """  Indicated this PO requires a confirmation.  This would default yes for any Web Vendor  """  
      self.Confirmed:bool = obj["Confirmed"]
      """  Indicated Supplier Confirmed the PO  """  
      self.ConfirmVia:str = obj["ConfirmVia"]
      """   Indicates if the Supplier has confirmed that they intend to fill the Order, and that it will be done through Supplier Connect("web"), 
phoned in a confirmation and clicked on the Confirmed checkbox in Epicor ("client"), or they clicked on the "Reject" checkbox in Supplier Connect("rejected").  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Order number created for this PO for the Inter-Company Trading.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.Linked:bool = obj["Linked"]
      """  Linked to sales order.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.XRefPONum:str = obj["XRefPONum"]
      """  Cross reference PO number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.ConsolidatedPO:bool = obj["ConsolidatedPO"]
      """  Consolidated PO flag.  Used in Consolidated Purchasing.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.ContractOrder:bool = obj["ContractOrder"]
      """  Is this Purchase Order a Contract Purchase Order?  """  
      self.ContractStartDate:str = obj["ContractStartDate"]
      """  The date the Contract Purchase Order is active.  """  
      self.ContractEndDate:str = obj["ContractEndDate"]
      """  The date the Contract Purchase Order expires.  """  
      self.PrintHeaderAddress:bool = obj["PrintHeaderAddress"]
      """  Print Header Address flag  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.POType:str = obj["POType"]
      """  PO Type Identifier ('STD' - standard PO, 'CMI' - Customer managed inventory PO, or 'SMI' - Supplier managed inventory PO)  """  
      self.APLOCID:str = obj["APLOCID"]
      """  Letter of Credit ID.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document for the record.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.ICPOLocked:bool = obj["ICPOLocked"]
      """  ICPOLocked  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DueDate:str = obj["DueDate"]
      """  Specifies the date by which you need to receive the whole Purchase Order. If you set the Due Date before create lines and releases, it will act as a default value when adding new lines/releases.  """  
      self.PromiseDate:str = obj["PromiseDate"]
      """  Specifies the date on which the supplier has promised to ship the whole Purchase Order. If you set the Promise Date before create lines and releases, it will act as a default value when adding releases.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of the user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date and time that the record was last changed.  """  
      self.POTaxReadyToProcess:bool = obj["POTaxReadyToProcess"]
      """  Flag to determine whether PO taxes will be automatically calculated each time a PO line is updated.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  The Tax Liability for this Purchase Order  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TotalTax:int = obj["TotalTax"]
      """  Total Tax amount for this PO in base currency, Totals the TaxAmt from the POTax records of this purchase order  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """  Total Tax amount for this PO in document currency, Totals the DocTaxAmt from the POTax records of this purchase order  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """  Total Tax amount for this PO in Rpt1 currency, Totals the Rpt1TaxAmt from the POTax records of this purchase order  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """  Total Tax amount for this PO in Rpt2 currency, Totals the Rpt2TaxAmt from the POTax records of this purchase order  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """  Total Tax amount for this PO in Rpt3 currency, Totals the Rpt3TaxAmt from the POTax records of this purchase order  """  
      self.TotalWhTax:int = obj["TotalWhTax"]
      """  Total Order Withholding Taxes in base currency  """  
      self.DocTotalWhTax:int = obj["DocTotalWhTax"]
      """  Total Order Withholding Taxes in document currency  """  
      self.Rpt1TotalWhTax:int = obj["Rpt1TotalWhTax"]
      """  Total Order Withholding Taxes in Rpt1 currency  """  
      self.Rpt2TotalWhTax:int = obj["Rpt2TotalWhTax"]
      """  Total Order Withholding Taxes in Rpt2 currency  """  
      self.Rpt3TotalWhTax:int = obj["Rpt3TotalWhTax"]
      """  Total Order Withholding Taxes in Rpt3 currency  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """  Total Order Self Assessed Taxes in base currency.  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """  Total Order Self Assessed Taxes in document currency.  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """  Total Order Self Assessed Taxes in Rpt1 currency.  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """  Total Order Self Assessed Taxes in Rpt2 currency.  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """  Total Order Self Assessed Taxes in Rpt3 currency.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.HdrTaxNoUpdt:bool = obj["HdrTaxNoUpdt"]
      """  This flag determines whether any manual taxes were created for a header miscellaneous charge, if this is set to True then the tax engine will not calculate any miscellaneous charge tax information.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code - FUTUREUSE  """  
      self.TotalDedTax:int = obj["TotalDedTax"]
      """  Total deductable tax amount in base currency.  """  
      self.DocTotalDedTax:int = obj["DocTotalDedTax"]
      """  Total deductable tax amount in document currency.  """  
      self.Rpt1TotalDedTax:int = obj["Rpt1TotalDedTax"]
      """  Total deductable tax amount in Rpt1 currency.  """  
      self.Rpt2TotalDedTax:int = obj["Rpt2TotalDedTax"]
      """  Total deductable tax amount in Rpt2 currency.  """  
      self.Rpt3TotalDedTax:int = obj["Rpt3TotalDedTax"]
      """  Total deductable tax amount in Rpt3 currency.  """  
      self.TotalCharges:int = obj["TotalCharges"]
      """  Total charge amount for the PO in base currency,  This is the sum of PODetail.ExtCost for non voided lines.  """  
      self.TotalMiscCharges:int = obj["TotalMiscCharges"]
      """  Total amount for all miscellaneous charges associated to this PO in base currency.  This is the sum of POMisc.MiscAmt.  """  
      self.TotalOrder:int = obj["TotalOrder"]
      """  Total amount for the PO in base currency.  This is the sum of POMisc.MiscAmt + PODetail.ExtCost + POHeader.TotalTax.  """  
      self.DocTotalCharges:int = obj["DocTotalCharges"]
      """  Total charge amount for the PO in document currency,  This is the sum of PODetail.DocExtCost for non voided lines.  """  
      self.DocTotalMisc:int = obj["DocTotalMisc"]
      """  Total amount for all miscellaneous charges associated to this PO in document currency.  This is the sum of POMisc.DocMiscAmt.  """  
      self.DocTotalOrder:int = obj["DocTotalOrder"]
      """  Total amount for the PO in document currency.  This is the sum of POMisc.DocMiscAmt + PODetail.DocExtCost + POHeader.DocTotalTax.  """  
      self.Rpt1TotalCharges:int = obj["Rpt1TotalCharges"]
      """  Total charge amount for the PO in Rpt1 currency,  This is the sum of PODetail.Rpt1ExtCost for non voided lines.  """  
      self.Rpt2TotalCharges:int = obj["Rpt2TotalCharges"]
      """  Total charge amount for the PO in Rpt2 currency,  This is the sum of PODetail.Rpt2ExtCost for non voided lines.  """  
      self.Rpt3TotalCharges:int = obj["Rpt3TotalCharges"]
      """  Total charge amount for the PO in Rpt3 currency,  This is the sum of PODetail.Rpt3ExtCost for non voided lines.  """  
      self.Rpt1TotalMiscCharges:int = obj["Rpt1TotalMiscCharges"]
      """  Total amount for all miscellaneous charges associated to this PO in Rpt1 currency.  This is the sum of POMisc.Rpt1MiscAmt.  """  
      self.Rpt2TotalMiscCharges:int = obj["Rpt2TotalMiscCharges"]
      """  Total amount for all miscellaneous charges associated to this PO in Rpt2 currency.  This is the sum of POMisc.Rpt2MiscAmt.  """  
      self.Rpt3TotalMiscCharges:int = obj["Rpt3TotalMiscCharges"]
      """  Total amount for all miscellaneous charges associated to this PO in Rpt3 currency.  This is the sum of POMisc.Rpt3MiscAmt.  """  
      self.Rpt1TotalOrder:int = obj["Rpt1TotalOrder"]
      """  Total amount for the PO in Rpt1 currency.  This is the sum of POMisc.Rpt1MiscAmt + PODetail.Rpt1ExtCost + POHeader.Rpt1TotalTax.  """  
      self.Rpt2TotalOrder:int = obj["Rpt2TotalOrder"]
      """  Total amount for the PO in Rpt2 currency.  This is the sum of POMisc.Rpt2MiscAmt + PODetail.Rpt2ExtCost + POHeader.Rpt2TotalTax.  """  
      self.Rpt3TotalOrder:int = obj["Rpt3TotalOrder"]
      """  Total amount for the PO in Rpt3 currency.  This is the sum of POMisc.Rpt3MiscAmt + PODetail.Rpt3ExtCost + POHeader.Rpt3TotalTax.  """  
      self.APTaxRoundOption:int = obj["APTaxRoundOption"]
      """  APTaxRoundOption  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  CNBonded  """  
      self.EDIRevNum:int = obj["EDIRevNum"]
      """  EDI Revision number that marks changes in the purchase order since the last time the purchase order was sent.  """  
      self.EDIPosted:bool = obj["EDIPosted"]
      """  Flag used to mark the Purchase Order as posted to EDI  """  
      self.EDIPostedDate:str = obj["EDIPostedDate"]
      """  Date when the PO was last acknowledge from EDI Portal  """  
      self.EDIAckDate:str = obj["EDIAckDate"]
      """  Date when the PO was last acknowledge from EDI Portal  """  
      self.ApproveMessage:str = obj["ApproveMessage"]
      """  Temporarily stores the return message from the PO approval process  """  
      self.RecalcUnitCosts:bool = obj["RecalcUnitCosts"]
      """  Used when switching the Vendor and need to prompt if the user wants to recalculate unit costs.  """  
      self.RuleCode:int = obj["RuleCode"]
      self.UpdateDtlAndRelRecords:bool = obj["UpdateDtlAndRelRecords"]
      self.VendCntFaxNum:str = obj["VendCntFaxNum"]
      self.VendCntPhoneNumber:str = obj["VendCntPhoneNumber"]
      self.ApproveChkBxSensitive:bool = obj["ApproveChkBxSensitive"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.ConfirmChkBxSensitive:bool = obj["ConfirmChkBxSensitive"]
      self.EnableSupplierID:bool = obj["EnableSupplierID"]
      """  Flag for UI to know when to Enable/Disable the SupplierID field in POEntry  """  
      self.HasLines:bool = obj["HasLines"]
      """  True is there are lines for this PO  """  
      self.HoldChkBxSensitive:bool = obj["HoldChkBxSensitive"]
      self.MassPrntChkBxSensitive:bool = obj["MassPrntChkBxSensitive"]
      self.RefCodeCurrSymbol:str = obj["RefCodeCurrSymbol"]
      self.VendAddrFormat:str = obj["VendAddrFormat"]
      """  The formatted vendor address  """  
      self.EDIEnable:bool = obj["EDIEnable"]
      self.BitFlag:int = obj["BitFlag"]
      self.APLOCDescription:str = obj["APLOCDescription"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.ShipCountryNumDescription:str = obj["ShipCountryNumDescription"]
      self.ShipViaCodeInactive:bool = obj["ShipViaCodeInactive"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.VendorVendorID:str = obj["VendorVendorID"]
      self.VendorZIP:str = obj["VendorZIP"]
      self.VendorDefaultFOB:str = obj["VendorDefaultFOB"]
      self.VendorCity:str = obj["VendorCity"]
      self.VendorName:str = obj["VendorName"]
      self.VendorCountry:str = obj["VendorCountry"]
      self.VendorAddress3:str = obj["VendorAddress3"]
      self.VendorTermsCode:str = obj["VendorTermsCode"]
      self.VendorAddress1:str = obj["VendorAddress1"]
      self.VendorAddress2:str = obj["VendorAddress2"]
      self.VendorCurrencyCode:str = obj["VendorCurrencyCode"]
      self.VendorState:str = obj["VendorState"]
      self.VendorEDISupplier:bool = obj["VendorEDISupplier"]
      self.VendorCntName:str = obj["VendorCntName"]
      self.VendorCntEmailAddress:str = obj["VendorCntEmailAddress"]
      self.VendorCntPhoneNum:str = obj["VendorCntPhoneNum"]
      self.VendorCntFaxNum:str = obj["VendorCntFaxNum"]
      self.VendorPPAddress3:str = obj["VendorPPAddress3"]
      self.VendorPPCountry:str = obj["VendorPPCountry"]
      self.VendorPPZip:str = obj["VendorPPZip"]
      self.VendorPPState:str = obj["VendorPPState"]
      self.VendorPPAddress1:str = obj["VendorPPAddress1"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.VendorPPPrimPCon:int = obj["VendorPPPrimPCon"]
      self.VendorPPAddress2:str = obj["VendorPPAddress2"]
      self.VendorPPCity:str = obj["VendorPPCity"]
      self.XbSystAllowLinkedPOChg:bool = obj["XbSystAllowLinkedPOChg"]
      self.XbSystPOUserInt2Label:str = obj["XbSystPOUserInt2Label"]
      self.XbSystPOUserDate3Label:str = obj["XbSystPOUserDate3Label"]
      self.XbSystPOUserChar3Label:str = obj["XbSystPOUserChar3Label"]
      self.XbSystPOUserChar4Label:str = obj["XbSystPOUserChar4Label"]
      self.XbSystPOUserChar2Label:str = obj["XbSystPOUserChar2Label"]
      self.XbSystPOUserDate2Label:str = obj["XbSystPOUserDate2Label"]
      self.XbSystPOUserInt1Label:str = obj["XbSystPOUserInt1Label"]
      self.XbSystPOUserDec1Label:str = obj["XbSystPOUserDec1Label"]
      self.XbSystPOUserDec2Label:str = obj["XbSystPOUserDec2Label"]
      self.XbSystPOUserDate4Label:str = obj["XbSystPOUserDate4Label"]
      self.XbSystPOUserDate1Label:str = obj["XbSystPOUserDate1Label"]
      self.XbSystPOUserChar1Label:str = obj["XbSystPOUserChar1Label"]
      self.XbSystDisableOverridePriceListOption:bool = obj["XbSystDisableOverridePriceListOption"]
      self.XbSystPOTaxCalculate:bool = obj["XbSystPOTaxCalculate"]
      self.XbSystAPTaxLnLevel:bool = obj["XbSystAPTaxLnLevel"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.SearchWord:str = obj["SearchWord"]
      """  An abbreviated part description field by which the user can search the Part file. In Part maintenance the Search Word is to only be updated upon initial creation of the Part with the first 8 bytes of the Part.Description.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part.  """  
      self.ClassID:str = obj["ClassID"]
      """   The Inventory class that this Part belongs to. The Class field can be blank or must be valid in the PartClass master file.
Classes could be set up for different type of raw materials. It will primarily be used as a report selection parameter.  """  
      self.IUM:str = obj["IUM"]
      """  Primary Inventory Unit of Measure. The unit costs, are based on this uom. Used as a default for issue transactions for the part.  Part onhand and allocation quantities are tracked by this uom.  The quantities can also be tracked by other uoms (see PartUOM table) but tracking at this uom is mandatory.   Use UOMClass.DefUOMCode of the system default UOMClass  when creating new part records (see XASyst.DefUOMClassID).  """  
      self.PUM:str = obj["PUM"]
      """  The Purchasing Unit of measure for the Part.  During Part Maintenance the XaSyst.UM is used as a default for this field. This is used in Purchase Order entry as the default on line item details.  """  
      self.TypeCode:str = obj["TypeCode"]
      """   Classifies Parts into the following...
M = Manufactured Part.
P = Purchased Part.
K = Sales Kit Part.B = Planning BOM.
This type code does limit referencing any part in any way. For example a type "P" can be entered on a sales order, or a type "M" can be referenced in a Purchase Order.
This field will also be used as a selection parameter in certain reports, such as Time Phase Requirements.  """  
      self.NonStock:bool = obj["NonStock"]
      """  A flag which indicates if this Part is not a stocked inventory item. This can be used so that "custom" built items which only exist per the customers order can be established as a valid part in order to provide default descriptions etc.... This can also be used for parts that are only purchased for direct use on jobs, but would normally never exist in inventory. This value will be used in report selection criteria.  It also controls the default setting of the "Make" flag in order entry line items  and the "Purchase" flag in Job material records. If a NoStock part is referenced in order entry then it defaults as "Make".  If it is referenced on a job material requirement it will default as "Purchase"  """  
      self.PurchasingFactor:int = obj["PurchasingFactor"]
      """   This value is used to convert quantity when there is a difference in the vendors unit of measure and how it is stocked in inventory. Example is purchased in pounds, stocked in sheets.


Formula: Issue Qty * Conversion Factor = Purchased Qty.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Base Unit Selling Price for the Item. Maintainable only via Part Master Maintenance program. It is used as a default unit price on Sales Order line detail and on Invoice line details that are not referencing a sales order line.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Maintainable only via Part Maintenance. The initial default is "E". Used as default PricePerCode in order entry and invoice entry.  """  
      self.InternalUnitPrice:int = obj["InternalUnitPrice"]
      """  Base Internal Unit Selling Price for the Item.  Maintainable only via Part Master Maintenance program.  If zero, then the external unit price (Part.UnitPrice) is used.  """  
      self.InternalPricePerCode:str = obj["InternalPricePerCode"]
      """  Indicates the internal pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand.  Maintainable only via Part Maintenance.  The initial default is "E".  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group ID for the Part. This can be blank or must be valid in the ProdGrup file.  This will be used for report sorting and selection. Also as a default in order entry, invoice entry and job entry.  """  
      self.MfgComment:str = obj["MfgComment"]
      """  Used to enter comments for manufacturing when this part is referenced on a job. These are copied to JobHead.Comment, JobAsmbl.Comment,JobMtl.MfgComment depending on the point of reference. Commens are printed on the routing report.  """  
      self.PurComment:str = obj["PurComment"]
      """   Part Comments that will be used as a default for purchasing. These will be copied into the JobMtl.PurComment which then will be used to pass along to the PO when that JobMtl is referenced. It will also be copied into the PODetail.Comment field when the PO is buying the part for stock and not referencing a Job. View as an EDITOR widget.
To be view-as EDITOR widget.  """  
      self.CostMethod:str = obj["CostMethod"]
      """  Defines the Costing method to be associated with this Part. Use the XaSyst.CostMethod as a default.  When a unit cost is retrieved from the Part file the programs will use this field to determine which one of the Four sets of cost fields should be used.  A = Use Average L= Use Last S = Use Standard T = Use Avg by lot(not found in XaSyst).  """  
      self.UserChar1:str = obj["UserChar1"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar1Label
is non blank.  """  
      self.UserChar2:str = obj["UserChar2"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar2Label
is non blank.  """  
      self.UserChar3:str = obj["UserChar3"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar3Label
is non blank.  """  
      self.UserChar4:str = obj["UserChar4"]
      """   User Defined character field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserChar4Label
is non blank.  """  
      self.UserDate1:str = obj["UserDate1"]
      """   User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate1Label
is non blank.  """  
      self.UserDate2:str = obj["UserDate2"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate2Label is non blank.  """  
      self.UserDate3:str = obj["UserDate3"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate3 Label is non blank.  """  
      self.UserDate4:str = obj["UserDate4"]
      """  User Defined Date field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDate4 Label is non blank.  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """   User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec1Label
is non blank.  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec2Label is non blank.  """  
      self.UserDecimal3:int = obj["UserDecimal3"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec3Label is non blank.  """  
      self.UserDecimal4:int = obj["UserDecimal4"]
      """  User Defined Decimal field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserDec4Label is non blank.  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt1Label is non blank.  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  User Defined Integer field. Actual label used is defined in the XaSyst record. This Field is only accessible if XaSyst.PartUserInt2Label is non blank.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Part. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.InActive:bool = obj["InActive"]
      """   Flag which indicates if the Part Master is considered as "Inactive".
This flag will be used to exclude parts from certain searches and reports.  """  
      self.LowLevelCode:int = obj["LowLevelCode"]
      """  Internally assigned integer which indicates the deepest level of assembly indention that this part is used at.  This is used by the Cost Rollup routines to control the order in which parts get costed. Part at the bottom (highest levelcode) Product structure are calculated first and continues up the chain, with the final assembly parts being processed last.  This insures that when retrieving the cost of an assemblies components the components will already have had their cost rolled up.  """  
      self.Method:bool = obj["Method"]
      """  An internal flag which indicates that this part contains Method of Manufacture details (PartMtl/PartOpr records).  We use this to avoid processing raw material part records during processes such as BOM Cost roll up, Indented BOM lists, etc...  """  
      self.TrackLots:bool = obj["TrackLots"]
      """  Indicates if Lot numbers are prompted for in transactions for this part.  Backflushing and AutoReceiving functions are ignored when TrackLots = Yes.  """  
      self.TrackDimension:bool = obj["TrackDimension"]
      """   Onhand quantity is always tracked in the Parts primary inventory uom (Part.IUM). Checking this box indicates that you want to allow tracking of onhand quantity by additional uoms.
The actual UOMs to be tracked for the part are indicated by PartUOM.TrackOnHand. In order to set the PartUOM.TrackOhHand = True the Part.TrackDimension must = true.
This replaces the old 8.3 Track Dimension feature  """  
      self.DefaultDim:str = obj["DefaultDim"]
      """  Default dimension code for the part.  Set by selecting a PartDim record as default.  """  
      self.TrackSerialNum:bool = obj["TrackSerialNum"]
      """  Indicates if this part is serial number tracked  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  Intrastat goods classification code following the Intrastat Classification Nomenclature (ICN). The Commodity Code field can be blank to indicate the value from the part class or must be valid in the ICommCode (formerly called IStatGrp) master file.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty for this part  """  
      self.PhantomBOM:bool = obj["PhantomBOM"]
      """  A flag which indicates if this Part is a "Phantom BOM".  """  
      self.SalesUM:str = obj["SalesUM"]
      """  The Selling Unit of measure for the Part. The UOM which the unit prices are based on. Defaults as the Part.IUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.MtlBurRate:int = obj["MtlBurRate"]
      """  The material burden rate for this part.  """  
      self.NetWeight:int = obj["NetWeight"]
      """  The Part's Unit Net Weight.  """  
      self.UsePartRev:bool = obj["UsePartRev"]
      """  if Yes then the part effective revision is used. If No then the revision of the demand source is used (OrderDtl, JobMtl...)  """  
      self.PartsPerContainer:int = obj["PartsPerContainer"]
      """  Default for label printing.  Zero indicates that only one label should be produced for the entire quantity.  """  
      self.PartLength:int = obj["PartLength"]
      """  Part's length.  """  
      self.PartWidth:int = obj["PartWidth"]
      """  Part's width.  """  
      self.PartHeight:int = obj["PartHeight"]
      """  Part's Height.  """  
      self.LotShelfLife:int = obj["LotShelfLife"]
      """  Shelf life of a lot in days.  Zero indicates unlimited shelf life.  """  
      self.WebPart:bool = obj["WebPart"]
      """  This is a Web saleable part  """  
      self.RunOut:bool = obj["RunOut"]
      """  Indicates that the onhand quantity is to be consumed and no further replenishments should be made.  Similar to Obsolete, however only warning messages will be issued to the user if they attempt new references.  """  
      self.SubPart:str = obj["SubPart"]
      """  Indicates the default Substitute part number.  This is optional. Must be one of the related PartSub records.  This field is set indirectly when the user checks the default toggle box in Part Substitution dialog.  """  
      self.Diameter:int = obj["Diameter"]
      """  Part's diameter.  """  
      self.Gravity:int = obj["Gravity"]
      """  Part's gravity.  """  
      self.OnHold:bool = obj["OnHold"]
      """  Indicates that the part is on hold.  This feature can be used to indicate that a new part is not yet approved, that it is being phased out, has a quality issue, etc.  Further demands/supplies of this part should not be made. Similar to an "Inactive" part. However at the moment it still may have an onhand balance, supply and demands and will be reflected in stock status reporting.  """  
      self.OnHoldDate:str = obj["OnHoldDate"]
      """  Date that part becomes obsolete.  This can be set to a future date when the part should become obsolete.  """  
      self.OnHoldReasonCode:str = obj["OnHoldReasonCode"]
      """  The Reason.Code associate with the reason why the part has been placed on hold. Valid only when Part.OnHold = Yes.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Default analysis code to be used when this part appears as an assembly  on a quote or a job.  """  
      self.GlobalPart:bool = obj["GlobalPart"]
      """  Marks the Part as a global Part, available to be sent out to other companies  """  
      self.MtlAnalysisCode:str = obj["MtlAnalysisCode"]
      """  MtlAnalysisCode  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates  """  
      self.ISSuppUnitsFactor:int = obj["ISSuppUnitsFactor"]
      """  This value is used to calculate the Supplementary Units for the Intrastat.  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.ImageFileName:str = obj["ImageFileName"]
      """  Path & filename (relative to images/prod_img directory on Web Server) of .jpg product image file.  """  
      self.ISOrigCountry:str = obj["ISOrigCountry"]
      """  This field contains the Intrastat Country of Origin Code from the Country table.  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """  Current setting for the prefix that will be attached to all new Serial Numbers as they are generated.  """  
      self.SNFormat:str = obj["SNFormat"]
      """  Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """  Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer  """  
      self.Constrained:bool = obj["Constrained"]
      """  Used by the scheduling process when a part is stocked.  When TRUE,  the availability of this Part must be calculated via the TimePhase process prior to scheduling a Job.  """  
      self.UPCCode1:str = obj["UPCCode1"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode2:str = obj["UPCCode2"]
      """  UPS / UCC Code required by some industries.  """  
      self.UPCCode3:str = obj["UPCCode3"]
      """  UPS / UCC Code required by some industries.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.WebInStock:bool = obj["WebInStock"]
      """  For Customer Connect Only.  This field is used in Store Front to indicate if the part is available in stock.  """  
      self.ConsolidatedPurchasing:bool = obj["ConsolidatedPurchasing"]
      """  Should this Part be included in Consolidated Purchasing?  """  
      self.PurchasingFactorDirection:str = obj["PurchasingFactorDirection"]
      """  Indicates how Purchasing Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Selling Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RecDocReq:bool = obj["RecDocReq"]
      """   Receiving Documents Required.
Indicates receiving documents are required when receiving this part.  This pertains only to lot tracked parts that are received to inventory. If checked, then at the time of receiving the system will require that one or more attachments with a reference to a DocType having Receipt = yes be entered.Requires DocManagement license.  """  
      self.MDPV:int = obj["MDPV"]
      """  Maximum daily production value.  Used in demand shipping schedule.  """  
      self.ShipDocReq:bool = obj["ShipDocReq"]
      """   Shipping Documents Required.
Indicates if shipping documents are required when shipping this part. Pertains to Inventory shipments of lot tracked parts or shipments directly from the job only. If checked, then at the time of shipping the system will require that the PartLot.Ship DocsAvail, or JobPart.ShipDocsAvail flag is true before allowing the shipment.Requires DocManagement license.  """  
      self.ReturnableContainer:str = obj["ReturnableContainer"]
      """  The returnable container for this part when the part needs to be returned.  The value is provided by the trading partner.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      """  Indicates a Quantity Bearing part. Works in conjunction with the Non-Stock field to enable the part master parts to be setup for expense items.  Quantity Bearing will be set to Yes by default and only enable to be set to No if the Non-Stock flag is Yes.  """  
      self.NAFTAOrigCountry:str = obj["NAFTAOrigCountry"]
      """  This field contains the Country of Origin Code from the Country table.  For International shipping.  """  
      self.NAFTAProd:str = obj["NAFTAProd"]
      """  NAFTA Producer Code - For international shipping  """  
      self.NAFTAPref:str = obj["NAFTAPref"]
      """  NAFTA Preference Code  """  
      self.ExpLicType:str = obj["ExpLicType"]
      """  Export License Type  """  
      self.ExpLicNumber:str = obj["ExpLicNumber"]
      """  Export License Number  """  
      self.ECCNNumber:str = obj["ECCNNumber"]
      """  ECCN Number  """  
      self.AESExp:str = obj["AESExp"]
      """  AES Export code  """  
      self.HTS:str = obj["HTS"]
      """  Harmonized Tariff Schedule Code  """  
      self.UseHTSDesc:bool = obj["UseHTSDesc"]
      """  Use HTS description flag - for shippers shippers export declaration  """  
      self.SchedBcode:str = obj["SchedBcode"]
      """  Schedule B Code  """  
      self.HazItem:bool = obj["HazItem"]
      """  Hazardous Item  """  
      self.HazTechName:str = obj["HazTechName"]
      """  Hazardous Technical Name  """  
      self.HazClass:str = obj["HazClass"]
      """  Hazardous Class Number  """  
      self.HazSub:str = obj["HazSub"]
      """  Hazardous Subrisk Class  """  
      self.HazGvrnmtID:str = obj["HazGvrnmtID"]
      """  Hazardous Government Assigned ID  """  
      self.HazPackInstr:str = obj["HazPackInstr"]
      """  Hazardous Packing instructions  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this Part.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the invoice line for this Part.  """  
      self.RCUnderThreshold:int = obj["RCUnderThreshold"]
      """  Reverse Charge Under Threshold value. If the absolute value of an invoice line is less than the under threshold then the reverse charge tax code will be applied.  """  
      self.RCOverThreshold:int = obj["RCOverThreshold"]
      """  Reverse Charge Over Threshold value. If the absolute value of an invoice line is more than the over threshold then the reverse charge tax code will be applied.  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.UOMClassID:str = obj["UOMClassID"]
      """   The UOM Class that will be used for the Part. The UOM Class establishes the list of unit of measures that can be used in reference to this part.
Must be valid in the UOMClass table.  """  
      self.SNMask:str = obj["SNMask"]
      """  This is the ID by which the user will reference a particular serial number format mask.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers currently used only by SNBaseStructure Mask types.  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types.  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence default. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It will be used when defaulting the SNLastUsedSeq field for new PartSite records.  """  
      self.UseMaskSeq:bool = obj["UseMaskSeq"]
      """  Indicates to use the value in SerialMask.SNLastUsedSeq when generating the next serial number for a Generate Mask type.  """  
      self.NetWeightUOM:str = obj["NetWeightUOM"]
      """   Qualifies the unit of measure of the NetWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a default  when creating new part records.
Having a NetWeightUOM will provides the ability to calculate total  weight.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.LotBatch:bool = obj["LotBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgBatch:bool = obj["LotMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgLot:bool = obj["LotMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotHeat:bool = obj["LotHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotFirmware:bool = obj["LotFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotBeforeDt:bool = obj["LotBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotMfgDt:bool = obj["LotMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotCureDt:bool = obj["LotCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotExpDt:bool = obj["LotExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts.  """  
      self.LotPrefix:str = obj["LotPrefix"]
      """  Defines a prefix to be used when a lot number is generated for the specific part.  """  
      self.LotUseGlobalSeq:bool = obj["LotUseGlobalSeq"]
      """  When generating the numeric portion of a lot number it can be either based on a next available number for the part (see Part.LotNextNum) or next available number from a Global Sequence (see LotSeq table and Part.LotSeqID)  """  
      self.LotSeqID:str = obj["LotSeqID"]
      """  The LotSeqID of the LotSeq record to use to retreive next available number when the part is using a Global Sequence  (Part.LotUseGlobalSeq = True). Must be valid in the LotSeq table if Part.LotUseGlobalSeq = True)  """  
      self.LotNxtNum:int = obj["LotNxtNum"]
      """  The next available number to use to generate new lot numbers a part when the  is configured to use "Part Specific" number sequence. (Part.LotUseGlobalSeq = false).  """  
      self.LotDigits:int = obj["LotDigits"]
      """  Number of digits of the Next Avail Lot Number controls that will be used by system Generate lot number logic.  """  
      self.LotLeadingZeros:bool = obj["LotLeadingZeros"]
      """  If leading zeros should be included in the numeric portion of the system generated lot number.  """  
      self.LotAppendDate:str = obj["LotAppendDate"]
      """   Option to append a trailing date string to the system generated lot number. The Date is the current system date.
Valid options are: None (Default), DD, MM, YYYY, MMYYYY, MM_YYYY, DDMMYYY, DD-MM-YYY, MMDDYYYY, MM-DD-YYYY,  YYYYMMDD, YYYY-MM-DD  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This flag identifies those parts that will suggest a PO each time than a sales order is created. This flag will be used as a default in the sales order.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This flag identifies those parts that are commonly drop shipped. This flag will be used as a default in the sales order.  """  
      self.IsConfigured:bool = obj["IsConfigured"]
      """  Configured Part  """  
      self.ExtConfig:bool = obj["ExtConfig"]
      """  External Configurator  """  
      self.RefCategory:str = obj["RefCategory"]
      """  The reference category that this Part belongs to.  """  
      self.CSFCJ5:bool = obj["CSFCJ5"]
      """   Malaysia Localization
The flag to indicate that the part is under CJ5 jurisdiction  """  
      self.CSFLMW:bool = obj["CSFLMW"]
      """   Malaysa Localization
The flag to indicate that the part is under LMW jurisdiction  """  
      self.GrossWeight:int = obj["GrossWeight"]
      """  The Part's Unit Gross Weight.  """  
      self.GrossWeightUOM:str = obj["GrossWeightUOM"]
      """   Qualifies the unit of measure of the GrossWeight field.
Must be a UOMConv of the UOMClass with ClassType of "weight".   Use UOMClass.DefUOMCode of the "weight" UOMClass as a defaul
t  when creating new part records.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number this part number was generated from.  """  
      self.FSAssetClassCode:str = obj["FSAssetClassCode"]
      """  Class Code Entry Field  """  
      self.FSSalesUnitPrice:int = obj["FSSalesUnitPrice"]
      """  Field Service Sales Unit Price  """  
      self.FSPricePerCode:str = obj["FSPricePerCode"]
      """  Indicates the field service sales pricing per quantity for this part. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. The initial default is "E".  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required upon receipt.  Inspection will also be enforced if the related Part Class, Vendor, PO Detail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.EstimateID:str = obj["EstimateID"]
      """  EstimateID  """  
      self.EstimateOrPlan:str = obj["EstimateOrPlan"]
      """  EstimateOrPlan  """  
      self.DiffPrc2PrchUOM:bool = obj["DiffPrc2PrchUOM"]
      """  DiffPrc2PrchUOM  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.PricingFactor:int = obj["PricingFactor"]
      """  PricingFactor  """  
      self.PricingUOM:str = obj["PricingUOM"]
      """  PricingUOM  """  
      self.MobilePart:bool = obj["MobilePart"]
      """  MobilePart  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AGUseGoodMark:bool = obj["AGUseGoodMark"]
      """  AGUseGoodMark  """  
      self.AGProductMark:bool = obj["AGProductMark"]
      """  AGProductMark  """  
      self.ISRegion:str = obj["ISRegion"]
      """  ISRegion  """  
      self.INChapterID:str = obj["INChapterID"]
      """  INChapterID  """  
      self.PESUNATType:str = obj["PESUNATType"]
      """  CSF Peru -  SUNAT Type  """  
      self.PESUNATUOM:str = obj["PESUNATUOM"]
      """  PESUNATUOM  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  LinkToContract  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.PartLengthWidthHeightUM:str = obj["PartLengthWidthHeightUM"]
      """  PartLengthWidthHeightUM  """  
      self.DiameterUM:str = obj["DiameterUM"]
      """  DiameterUM  """  
      self.DiameterInside:int = obj["DiameterInside"]
      """  DiameterInside  """  
      self.DiameterOutside:int = obj["DiameterOutside"]
      """  DiameterOutside  """  
      self.ThicknessUM:str = obj["ThicknessUM"]
      """  ThicknessUM  """  
      self.Thickness:int = obj["Thickness"]
      """  Thickness  """  
      self.ThicknessMax:int = obj["ThicknessMax"]
      """  ThicknessMax  """  
      self.Durometer:str = obj["Durometer"]
      """  Durometer  """  
      self.Specification:str = obj["Specification"]
      """  Specification  """  
      self.EngineeringAlert:str = obj["EngineeringAlert"]
      """  EngineeringAlert  """  
      self.Condition:str = obj["Condition"]
      """  Condition  """  
      self.IsCompliant:bool = obj["IsCompliant"]
      """  IsCompliant  """  
      self.IsRestricted:bool = obj["IsRestricted"]
      """  IsRestricted  """  
      self.IsSafetyItem:bool = obj["IsSafetyItem"]
      """  IsSafetyItem  """  
      self.CommercialBrand:str = obj["CommercialBrand"]
      """  CommercialBrand  """  
      self.CommercialSubBrand:str = obj["CommercialSubBrand"]
      """  CommercialSubBrand  """  
      self.CommercialCategory:str = obj["CommercialCategory"]
      """  CommercialCategory  """  
      self.CommercialSubCategory:str = obj["CommercialSubCategory"]
      """  CommercialSubCategory  """  
      self.CommercialStyle:str = obj["CommercialStyle"]
      """  CommercialStyle  """  
      self.CommercialSize1:str = obj["CommercialSize1"]
      """  CommercialSize1  """  
      self.CommercialSize2:str = obj["CommercialSize2"]
      """  CommercialSize2  """  
      self.CommercialColor:str = obj["CommercialColor"]
      """  CommercialColor  """  
      self.IsGiftCard:bool = obj["IsGiftCard"]
      """  IsGiftCard  """  
      self.PhotoFile:str = obj["PhotoFile"]
      """  PhotoFile  """  
      self.PartPhotoExists:bool = obj["PartPhotoExists"]
      """  PartPhotoExists  """  
      self.CommentText:str = obj["CommentText"]
      """  CommentText  """  
      self.PartSpecificPackingUOM:bool = obj["PartSpecificPackingUOM"]
      """  Indicates if the packaging information is part specific or specified at the UOM class level.  """  
      self.ImageID:str = obj["ImageID"]
      """  ImageID  """  
      self.CNSpecification:str = obj["CNSpecification"]
      """  Specification Code for China GTI purposes  """  
      self.SyncToExternalCRM:bool = obj["SyncToExternalCRM"]
      """  This field defines if the part  is synchronized to an External CRM.  """  
      self.ExternalCRMPartID:str = obj["ExternalCRMPartID"]
      """  This field holds the id of this part in the External CRM  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  This field defines the last time that the  part  has been Synchronized between Epicor ERP and the External CRM. This field is maintained by the External CRM Synchronization  process.  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  This fields determines if the part needs to be synchronized to the External CRM. If there are changes in the part master file , Epicor ERP automatically turns on this field.  """  
      self.PESUNATTypeCode:str = obj["PESUNATTypeCode"]
      """  PESUNATTypeCode  """  
      self.PESUNATUOMCode:str = obj["PESUNATUOMCode"]
      """  PESUNATUOMCode  """  
      self.CNCodeVersion:str = obj["CNCodeVersion"]
      """  Code Version for China GTI purposes  """  
      self.CNTaxCategoryCode:str = obj["CNTaxCategoryCode"]
      """  Tax Category Code for China GTI purposes  """  
      self.CNHasPreferentialTreatment:bool = obj["CNHasPreferentialTreatment"]
      """  Has Preferential Treatment value for China GTI purposes  """  
      self.CNPreferentialTreatmentContent:str = obj["CNPreferentialTreatmentContent"]
      """  Preferential Treatment Content for China GTI purposes  """  
      self.CNZeroTaxRateMark:str = obj["CNZeroTaxRateMark"]
      """  Zero Tax Rate Mark for China GTI purposes  """  
      self.SubLevelCode:int = obj["SubLevelCode"]
      """  SubLevelCode  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  Date the Part was created  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  User the Part was created by  """  
      self.AttBatch:str = obj["AttBatch"]
      """  Indicates if entry of a BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgBatch:str = obj["AttMfgBatch"]
      """  Indicates if entry of a MFG BATCH is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgLot:str = obj["AttMfgLot"]
      """  Indicates if entry of a MFG Lot is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttHeat:str = obj["AttHeat"]
      """  Indicates if entry of a Heat Number  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttFirmware:str = obj["AttFirmware"]
      """  Indicates if entry of FIRMWARE is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttBeforeDt:str = obj["AttBeforeDt"]
      """  Indicates if entry of a Best Before Date is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttMfgDt:str = obj["AttMfgDt"]
      """  Indicates if entry of a Original Manufacture Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttCureDt:str = obj["AttCureDt"]
      """  Indicates if entry of a CURE DATE  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.AttExpDt:str = obj["AttExpDt"]
      """  Indicates if entry of an Expiration Date  is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.DeferManualEntry:bool = obj["DeferManualEntry"]
      """  DeferManualEntry  """  
      self.DeferPurchaseReceipt:bool = obj["DeferPurchaseReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Container Receipt, Receipt Entry.  """  
      self.DeferJobReceipt:bool = obj["DeferJobReceipt"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Job Receipt to Job, Job Receipt to Salvage, Job Receipt to Inventory, Kanban Receipts.  """  
      self.DeferInspection:bool = obj["DeferInspection"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Inspection Processing.  """  
      self.DeferQtyAdjustment:bool = obj["DeferQtyAdjustment"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: Quantity Adjustment.  """  
      self.DeferInventoryMove:bool = obj["DeferInventoryMove"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Inventory Transfer.  """  
      self.DeferShipments:bool = obj["DeferShipments"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Customer Shipment Entry, Subcontractor Shipment Entry, Drop Shipment Entry, Order Entry.  """  
      self.DeferInventoryCounts:bool = obj["DeferInventoryCounts"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later. This flag is used for following screens: Count Tag Entry.  """  
      self.DeferAssetDisposal:bool = obj["DeferAssetDisposal"]
      """  DeferAssetDisposal  """  
      self.DeferReturnMaterials:bool = obj["DeferReturnMaterials"]
      """  This flag indicates if the Lots attributes are necessary to be entered in the creation of the lot or could be entered later.  This flag is used for following screens: RMA Processing.  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date/Time when the Part record was updated  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.SendToFSA:bool = obj["SendToFSA"]
      """  Determines if the Part has to be synchronized with Epicor FSA application.  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.FSAItem:bool = obj["FSAItem"]
      """  When the part is marked as Item, it will create an Item Resource in Epicor FSA.  """  
      self.FSAEquipment:bool = obj["FSAEquipment"]
      """  When the part is marked as Equipment, it will create an Equipment Resource Template in Epicor FSA.  """  
      self.BOLClass:str = obj["BOLClass"]
      """  Bill of Lading Class. Additional data for the part required for LTL and International shipments.  """  
      self.FairMarketValue:int = obj["FairMarketValue"]
      """  Fair Market Value. Additional data for the part required for LTL and International shipments.  """  
      self.SAFTProdCategory:str = obj["SAFTProdCategory"]
      """  SAFTProdCategory  """  
      self.AttrClassID:str = obj["AttrClassID"]
      """  ID of related Attribute Class.  """  
      self.LocationIDNumReq:bool = obj["LocationIDNumReq"]
      """  Indicates if this part requires Identification Numbers shipment time.  This is disable if Track Location inventory is false.  """  
      self.LocationTrackInv:bool = obj["LocationTrackInv"]
      """  Indicates if this part tracks Location Inventory.  """  
      self.LocationMtlView:bool = obj["LocationMtlView"]
      """  Set the default value of Location View for materials added in Engineering Workbench.  """  
      self.LCNRVReporting:bool = obj["LCNRVReporting"]
      """  LCNRVReporting  """  
      self.LCNRVEstimatedUnitPrice:int = obj["LCNRVEstimatedUnitPrice"]
      """  LCNRVEstimatedUnitPrice  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.LocationFormatID:str = obj["LocationFormatID"]
      """  Default format ID used when assigning ID Numbers.  """  
      self.IsServices:bool = obj["IsServices"]
      """  IsServices  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PEDetrGoodServiceCode  """  
      self.PEProductServiceCode:str = obj["PEProductServiceCode"]
      """  PEProductServiceCode  """  
      self.DualUOMClassID:str = obj["DualUOMClassID"]
      """  Dual UOM Class ID  """  
      self.CNProductName:str = obj["CNProductName"]
      """  Product Name  """  
      self.CNWeight:int = obj["CNWeight"]
      """  Weight  """  
      self.CNWeightUOM:str = obj["CNWeightUOM"]
      """  Unit of Weight  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  Bonded  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DefaultAttributeSetID:int = obj["DefaultAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttISOrigCountry:str = obj["AttISOrigCountry"]
      """  Indicates if entry of a County of Origin is required for Lots of this Part. Pertinent only for lot tracked parts. Accepted values are N="Not Tracked", T = "Tracked" and M = "Mandatory".  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  ISO / IEC 6523  """  
      self.ExternalID:str = obj["ExternalID"]
      """  Part ID  """  
      self.CommoditySchemeID:str = obj["CommoditySchemeID"]
      """  UNTDID 7143  """  
      self.CommoditySchemeVersion:str = obj["CommoditySchemeVersion"]
      """  Part Commodity Scheme Version  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.PlanningByRevision:bool = obj["PlanningByRevision"]
      """  Indicates if this part performs MRP by Revision.  Requires Planning by Revision license.  """  
      self.RcvInspectionReqPart:str = obj["RcvInspectionReqPart"]
      """  RcvInspectionReqPart  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.FSMPartType:int = obj["FSMPartType"]
      """  FSMPartType  """  
      self.CountryNumDescription:str = obj["CountryNumDescription"]
      self.EnableExpressCheckOut:bool = obj["EnableExpressCheckOut"]
      """  Should the Express Part Check Out option be enabled?  """  
      self.EnableGlobalLock:bool = obj["EnableGlobalLock"]
      self.EnableGlobalPart:bool = obj["EnableGlobalPart"]
      self.EnableInActive:bool = obj["EnableInActive"]
      """  Indicates if the InActive flag should be available for input,  """  
      self.EnableIUM:bool = obj["EnableIUM"]
      """  Flag to tell UI whether the Part.IUM field should be enabled or not.  """  
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Override Reverse Charge check box should be enabled.  """  
      self.EnableSerialNum:bool = obj["EnableSerialNum"]
      """  Indicates if the Serial Number button should be enabled.  """  
      self.EnableTrackSerialNum:bool = obj["EnableTrackSerialNum"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackSerialNum can be change.  """  
      self.EnableUOMClass:bool = obj["EnableUOMClass"]
      """  Flag to tell UI whether the UOMClassID field should be enabled or not.  """  
      self.ExtCoExist:bool = obj["ExtCoExist"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Default installation price of an equipment that requires installation in Epicor FSA.  """  
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstTypeDesc:str = obj["FSAInstTypeDesc"]
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Part is Global (master or linked)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany and GlbPartNum that is linking to this part  """  
      self.GlbTableAllowUpdTrackDim:bool = obj["GlbTableAllowUpdTrackDim"]
      """  check if TrackDimension is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackLots:bool = obj["GlbTableAllowUpdTrackLots"]
      """  check if TrackLots is in GlbTable and should be disabled in Part Entry  """  
      self.GlbTableAllowUpdTrackSerial:bool = obj["GlbTableAllowUpdTrackSerial"]
      """  check if TrackSerialNum is in GlbTable and should be disabled in Part Entry  """  
      self.HasOnHandQty:bool = obj["HasOnHandQty"]
      """  Indicates if there is any quantity on hand for this part  """  
      self.IsComponent:bool = obj["IsComponent"]
      """  Indicates if part is a component (has a where used list available)  """  
      self.IsCoPart:bool = obj["IsCoPart"]
      """   This field indicates if the part is being used as a co-part anywhere.  This field will be used to prevent a Part from being marked as serial tracked or configured after being added as a co-part.

CoParts Project.  """  
      self.ISOrigCountryNum:int = obj["ISOrigCountryNum"]
      """  This is the numeric value of ISOrigCountry.  """  
      self.NextGeneratedLotNum:str = obj["NextGeneratedLotNum"]
      """  Shows what the next generated lot number for this part would look like  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      self.PEProductServiceCodeDesc:str = obj["PEProductServiceCodeDesc"]
      self.PLM:bool = obj["PLM"]
      self.PLMEnabled:bool = obj["PLMEnabled"]
      """  Indicates if the PLM toggle box is enabled.  """  
      self.Revision:bool = obj["Revision"]
      """  Revision  """  
      self.SalesUMDisp:str = obj["SalesUMDisp"]
      self.SNLeadingZeros:bool = obj["SNLeadingZeros"]
      self.SNMaskPrefixLength:int = obj["SNMaskPrefixLength"]
      self.SNMaskSuffixLength:int = obj["SNMaskSuffixLength"]
      self.SNNumODigits:int = obj["SNNumODigits"]
      self.UpdatePartPlant:bool = obj["UpdatePartPlant"]
      """  Yes means to copy the NonStock and CostMethod from Part to all the PartPlant records.  """  
      self.UpdateSNPartPlant:bool = obj["UpdateSNPartPlant"]
      """  Indicates whether to update the Part serial number format changes to part plant  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.HasMRPPlanningAttribute:bool = obj["HasMRPPlanningAttribute"]
      """  If this Part is TrackInventoryAttributes = true, and the AttrClassID it is associated to has one or more attributes whose DynAttrClassDtl.UsedInPlanning= true.  """  
      self.UpdatePartPlantOverride:bool = obj["UpdatePartPlantOverride"]
      self.DEPayStatCodeDescr:str = obj["DEPayStatCodeDescr"]
      """  DEPayStatCode Description  """  
      self.DEDenominationDescr:str = obj["DEDenominationDescr"]
      """  DEDenomination Description  """  
      self.DefaultBuyerName:str = obj["DefaultBuyerName"]
      self.DefaultPlannerName:str = obj["DefaultPlannerName"]
      self.EnableTrackByRevision:bool = obj["EnableTrackByRevision"]
      """  This field is used only as a flag to determine in UI, if the Part.TrackInventoryByRevision can be changed.  """  
      self.LinkedToGlbPart:bool = obj["LinkedToGlbPart"]
      """  indicated if this part has been linked to a global part  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.ClassDescription:str = obj["ClassDescription"]
      self.CommodityCodeSuppUnitsUOM:str = obj["CommodityCodeSuppUnitsUOM"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.CompanySendToFSA:bool = obj["CompanySendToFSA"]
      self.DualUOMClassIDDescription:str = obj["DualUOMClassIDDescription"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.FSAssetClassCodeFSAssetClassDesc:str = obj["FSAssetClassCodeFSAssetClassDesc"]
      self.Mtl_AnalysisCdDescription:str = obj["Mtl_AnalysisCdDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OnHoldReasonCodeDescription:str = obj["OnHoldReasonCodeDescription"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.RefCategoryDescription:str = obj["RefCategoryDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.UOMClassIDDescription:str = obj["UOMClassIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.XbSystELIEinvoice:bool = obj["XbSystELIEinvoice"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The Part number that this substitute Part is for.  """  
      self.SubPart:str = obj["SubPart"]
      """  Substitute Part  """  
      self.RecType:str = obj["RecType"]
      """  Indicates the record type. "S" = Substitute, "C" = Compliment  """  
      self.SubType:str = obj["SubType"]
      """  Pertains only to Substitute Parts (RecType = "S"). Values are "C" - Comparable, "D" - Downgrade, "U" - Upgrade  """  
      self.QtyPer:int = obj["QtyPer"]
      """   The quantity of the alternate part per 1 of the parent part in the parents base inventory uom. Cannot be zero.
To convert an existing OrderDtl.SellingQty to a PartSubs. It is converted to the Parents Part Base Inventory UOM  then multiply PartSubs.QtyPer, then converted to  PartSub.SalesUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit of measure used when this part is used as a substitute/compliment with the parent part (partsubs.partnum).  Defaults as Part.SUM of the PartSub.SubPart.  """  
      self.Comment:str = obj["Comment"]
      """  Optional Comment  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultSub:bool = obj["DefaultSub"]
      self.Price:int = obj["Price"]
      """  Price for the Suggested Quantity  """  
      self.SuggestedQty:int = obj["SuggestedQty"]
      """  Suggested Quantity  """  
      self.Selected:bool = obj["Selected"]
      """  Selected Row  """  
      self.SugOrderQty:int = obj["SugOrderQty"]
      """  Suggested Quantity for Order Qty in Quote Detail  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.SubPartSellingFactor:int = obj["SubPartSellingFactor"]
      self.SubPartTrackSerialNum:bool = obj["SubPartTrackSerialNum"]
      self.SubPartTrackDimension:bool = obj["SubPartTrackDimension"]
      self.SubPartPartDescription:str = obj["SubPartPartDescription"]
      self.SubPartIUM:str = obj["SubPartIUM"]
      self.SubPartSalesUM:str = obj["SubPartSalesUM"]
      self.SubPartTrackLots:bool = obj["SubPartTrackLots"]
      self.SubPartPricePerCode:str = obj["SubPartPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartUOMRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  A unique part number that identifies this part.  """  
      self.UOMCode:str = obj["UOMCode"]
      """  User defined code which uniquely identifies the UOM within the UOMClass.  """  
      self.ConvFactor:int = obj["ConvFactor"]
      """   Value used to convert to/from base uom for the specific part. Cannot change if it's base uom of UOMClass (always 1.0) Sometimes a unit of measure conversion is relative to a specific part. These are non-standard conversions.
For example; 1 box(bx) of  Part A is 12ea. 1(bx) of Part B is 24ea. Non-standard conversions are defined in the PartUOM table. When ConvOperator = * then ConvFactor is 1 UOM expressed in Base UOM else it is 1 Base UOM expressed in UOM  """  
      self.Active:bool = obj["Active"]
      """  Indicates if the PartUOM is Active. This field is ready only and is used for internal logic purposes only.  """  
      self.TrackOnHand:bool = obj["TrackOnHand"]
      """  If true then Onhand Quantity will be tracked per this UOM for this part.  """  
      self.NetVolume:int = obj["NetVolume"]
      """  The Part's Net Volume.  """  
      self.NetVolumeUOM:str = obj["NetVolumeUOM"]
      """   Qualifies the unit of measure of the NewVolume field.
Must be a UOMConv of the UOMClass with ClassType of "volume".   Use UOMClass.DefUOMCode of the "volume" UOMClass as a default  when creating new part records.
Having a Net Volume UOM will provides the ability to calculate total volume  """  
      self.HasBeenUsed:bool = obj["HasBeenUsed"]
      """  This indicates that this Part UOM has been used somewhere.  Therefore we do not want to allow the associated part specific conversion to change.  """  
      self.ConvOperator:str = obj["ConvOperator"]
      """   Indicates the mathmatical operator that is used for performing the UOM Conversion. Options are "*" (Multiply) or "\" (Divide).
For example for Feet to Inch where Inch is the base uom. 
You could have 1ft / 12 = 1In  """  
      self.WebUOM:bool = obj["WebUOM"]
      """  WebUOM  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ConvFromUOM:str = obj["ConvFromUOM"]
      """  Qualifies that 1 of this uom = ConvFactor in ConvToUOM. Example: 12in = 1ft or 1ft = 12in  """  
      self.ConvOverrride:bool = obj["ConvOverrride"]
      """  External field used to enable/disable the conversion factor to able to change it.  """  
      self.ConvToUOM:str = obj["ConvToUOM"]
      """  Qualifies UOM of the ConvFactor. This either the UOMClass.BaseUOM or the UOMConv.UOMCode depending on the value of ConvOperator.  """  
      self.EAN13:str = obj["EAN13"]
      """  EAN13 product code from PartPC  """  
      self.EAN14:str = obj["EAN14"]
      """  EAN14 product code from PartPC  """  
      self.EAN8:str = obj["EAN8"]
      """  EAN8 product code from PartPC  """  
      self.EnableConvFactor:bool = obj["EnableConvFactor"]
      """  Internal use. To indicate if the ConvFactor should be enabled. This field is set to true if the related UOMClass is non-standard and the UOMCode is not the BaseUOM  """  
      self.EnableTrackOnHand:bool = obj["EnableTrackOnHand"]
      """  Indicates if the TrackOnHand is enabled. True when Part.TrackMultiUOM = true and UOMCode <> Part.IUM  """  
      self.GTIN14:str = obj["GTIN14"]
      """  GTIN14 product code from PartPC  """  
      self.HIBC:str = obj["HIBC"]
      """  HIBC UPN product code from PartPC  """  
      self.PartSpecific:bool = obj["PartSpecific"]
      """  Value of UOMConv.PartSpecific for informational purposes  """  
      self.UOMDesc:str = obj["UOMDesc"]
      self.UPC12:str = obj["UPC12"]
      """  UPC12 product code from PartPC  """  
      self.BaseUOMCode:str = obj["BaseUOMCode"]
      """  BaseUOMCode from UOMClass file  """  
      self.DispPkgCode:str = obj["DispPkgCode"]
      """  Used to input/display the package code related to the part/UOM. The user will only be able to update this data if Part.UsePartSpecificPckCode = true  """  
      self.DispPkgCodeDesc:str = obj["DispPkgCodeDesc"]
      """  Description of the PkgCode  """  
      self.DispPkgDisplaySeq:int = obj["DispPkgDisplaySeq"]
      """  Indicates the display sequence of the packaging in relation to the other packaging for the part.  """  
      self.DispPkgIsDefault:bool = obj["DispPkgIsDefault"]
      """  Indicates if the PkgCode is the default.  """  
      self.PartSpecificPkgCode:bool = obj["PartSpecificPkgCode"]
      """  Indicates if the pkg code information seen in PartUOM is part specific (the data came from PackingUOM where PartNum is not blank.) If true the package code data can be updated in Part Maint, if false the PartUOM pkgcode columns will be disabled.  """  
      self.DispPkgDisplayHidden:bool = obj["DispPkgDisplayHidden"]
      """  Indicates if the package code will be displayed in the application. If false, the package codes that are not valid for the MGF process on the shop floor are hidden.  """  
      self.StandardUpdate:bool = obj["StandardUpdate"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartXRefIntRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Code  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Cross Reference PartNum  """  
      self.XRefPartDesc:str = obj["XRefPartDesc"]
      """  XRefPartDesc  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNMaskExample:str = obj["SNMaskExample"]
      """  BL-generated example of the serial number mask if SNBaseDataType = Mask.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.SNOverride:bool = obj["SNOverride"]
      """  SNOverride - Determines whether SN field values on PartXRefInt are used instead of the Part values. If this is true, they are used. If this is false, those values are ignored.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PcECCOrderDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ECCBSVID:str = obj["ECCBSVID"]
      """  ECCBSVID  """  
      self.CustNum:int = obj["CustNum"]
      """  CustNum  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  BasePartNum  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  BaseRevisionNum  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.LineDesc:str = obj["LineDesc"]
      """  LineDesc  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode  """  
      self.BreakListCode:str = obj["BreakListCode"]
      """  BreakListCode  """  
      self.Commissionable:bool = obj["Commissionable"]
      """  Commissionable  """  
      self.DiscBreakListCode:str = obj["DiscBreakListCode"]
      """  DiscBreakListCode  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  UnitPrice  """  
      self.LockPrice:bool = obj["LockPrice"]
      """  LockPrice  """  
      self.LockQty:bool = obj["LockQty"]
      """  LockQty  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  NeedByDate  """  
      self.OrderComment:str = obj["OrderComment"]
      """  OrderComment  """  
      self.OverrideDiscPriceList:bool = obj["OverrideDiscPriceList"]
      """  OverrideDiscPriceList  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  OverridePriceList  """  
      self.PickListComment:str = obj["PickListComment"]
      """  PickListComment  """  
      self.POLine:str = obj["POLine"]
      """  POLine  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  PricePerCode  """  
      self.ProdCode:str = obj["ProdCode"]
      """  ProdCode  """  
      self.ProjectID:str = obj["ProjectID"]
      """  ProjectID  """  
      self.Reference:str = obj["Reference"]
      """  Reference  """  
      self.RequestDate:str = obj["RequestDate"]
      """  RequestDate  """  
      self.Rework:bool = obj["Rework"]
      """  Rework  """  
      self.RMALine:int = obj["RMALine"]
      """  RMALine  """  
      self.RMANum:int = obj["RMANum"]
      """  RMANum  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  SalesCatID  """  
      self.SalesUM:str = obj["SalesUM"]
      """  SalesUM  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  SellingQuantity  """  
      self.ShipComment:str = obj["ShipComment"]
      """  ShipComment  """  
      self.ShipLineComplete:bool = obj["ShipLineComplete"]
      """  ShipLineComplete  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  TaxCatID  """  
      self.TMBilling:bool = obj["TMBilling"]
      """  TMBilling  """  
      self.XPartNum:str = obj["XPartNum"]
      """  XPartNum  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  XRevisionNum  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  DocUnitPrice  """  
      self.ConfigBaseUnitPrice:int = obj["ConfigBaseUnitPrice"]
      """  ConfigBaseUnitPrice  """  
      self.ConfigUnitPrice:int = obj["ConfigUnitPrice"]
      """  ConfigUnitPrice  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECCQuoteNum  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  RevisionNum  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  ShipToNum  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.CreateDate:str = obj["CreateDate"]
      """  CreateDate  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  AnalysisCode  """  
      self.BestCsPct:int = obj["BestCsPct"]
      """  BestCsPct  """  
      self.Discount:int = obj["Discount"]
      """  Discount  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  DiscountPercent  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  DocDiscount  """  
      self.Engineer:bool = obj["Engineer"]
      """  Engineer  """  
      self.JobComment:str = obj["JobComment"]
      """  JobComment  """  
      self.KitQtyPer:int = obj["KitQtyPer"]
      """  KitQtyPer  """  
      self.LeadTime:str = obj["LeadTime"]
      """  LeadTime  """  
      self.MultiRel:bool = obj["MultiRel"]
      """  MultiRel  """  
      self.PhaseID:str = obj["PhaseID"]
      """  PhaseID  """  
      self.QuoteComment:str = obj["QuoteComment"]
      """  QuoteComment  """  
      self.ReqShipDate:str = obj["ReqShipDate"]
      """  ReqShipDate  """  
      self.SellingExpectedQty:int = obj["SellingExpectedQty"]
      """  SellingExpectedQty  """  
      self.SellingExpectedUM:str = obj["SellingExpectedUM"]
      """  SellingExpectedUM  """  
      self.Template:bool = obj["Template"]
      """  Template  """  
      self.WorstCsPct:int = obj["WorstCsPct"]
      """  WorstCsPct  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.MSRP:int = obj["MSRP"]
      """  MSRP  """  
      self.EndCustomerPrice:int = obj["EndCustomerPrice"]
      """  EndCustomerPrice  """  
      self.PromotionalPrice:int = obj["PromotionalPrice"]
      """  Promotional Price offered to Dealer and Distributors  """  
      self.DocPromotionalPrice:int = obj["DocPromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in the customer currency converted using the exchange rate.  """  
      self.DocEndCustomerPrice:int = obj["DocEndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in the customer currency converted using the exchange rate.  """  
      self.DocMSRP:int = obj["DocMSRP"]
      """  Same as MSRP except that this field contains the price in the customer currency converted using the exchange rate.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.ConfigID:str = obj["ConfigID"]
      self.ConfigVersion:int = obj["ConfigVersion"]
      self.BitFlag:int = obj["BitFlag"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ProdGrupRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Descriptive code assigned by the user to uniquely identify a Product Group master. Can't be blank. Used as a foreign key in other files and may be used in displays/reports where space for the full description is not available.  """  
      self.Description:str = obj["Description"]
      """  Full description of Product Group.  """  
      self.PersonID:str = obj["PersonID"]
      """   Identifies the Person to be used as the default Production Planner. This person is responsible for handling  the manufacturing suggestions of parts in this Product Group.
Used as the default for "new" manufacturing suggestions and on Job Header. Manufacturing suggestions can be filtered by Planner.
Relates to the Person table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty for this Product group  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax category master record.  Cannot be blank.  This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  Examples: SERV = Service, FRT = Freight, etc.  """  
      self.JobCompletionCode:str = obj["JobCompletionCode"]
      """  The default job completion code for this product group. This code is used in the auto-job completion process.  """  
      self.JobClosingCode:str = obj["JobClosingCode"]
      """  The default job closing code for this product group. This code is used in the auto-job closing process.  """  
      self.RoughCutCode:str = obj["RoughCutCode"]
      """  Rough Cut Code.  Rough cut parameters to use when rough cut scheduling for a part using this product code.  """  
      self.PriceGroupCode:str = obj["PriceGroupCode"]
      """  Specifies the Price Group Code where the current Product Group belongs  """  
      self.DeferredRev:bool = obj["DeferredRev"]
      """  Indicates if revenue is deferred for contracts assigned to this group.  """  
      self.RACode:str = obj["RACode"]
      """  Revenue Amortization Code.  """  
      self.GlobalProdGrup:bool = obj["GlobalProdGrup"]
      """  Marks this ProdGrup as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.ProdFamilyID:str = obj["ProdFamilyID"]
      """  Descriptive code assigned by the user to uniquely identify a Product Family master.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  Territory ID selected for the Product Group.  """  
      self.TerritoryDesc:str = obj["TerritoryDesc"]
      self.BitFlag:int = obj["BitFlag"]
      self.JobClosingCodeDescription:str = obj["JobClosingCodeDescription"]
      self.JobCompletionCodeDescription:str = obj["JobCompletionCodeDescription"]
      self.PersonIDName:str = obj["PersonIDName"]
      self.PlantName:str = obj["PlantName"]
      self.RASchedCdRADesc:str = obj["RASchedCdRADesc"]
      self.RoughCutParamDescription:str = obj["RoughCutParamDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_QuoteDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with. This is part of the foreign key to OrderHed file.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  This field along with Company and QuoteNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the QuoteDtl record for the Quote and the adding 1 to it.  """  
      self.Ordered:bool = obj["Ordered"]
      """  Indicates if this Quote item has been ordered. This is not directly set by the user. It is updated via Order Entry when the QuoteDtl is referenced.  """  
      self.PartNum:str = obj["PartNum"]
      """   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the QuoteDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Item description. The Part.Description can be used as a default.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the Part.RevisionNum field.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the CustXPrt table.. The XPartNum can be blank, does not have to exist in the CustXPrt table.  THIS FIELD WILL BE USED TO PASS THE VALUE ALONG TO ORDER ENTRY.  """  
      self.QuoteComment:str = obj["QuoteComment"]
      """  Contains comments about the detail line item. These will be printed on the Quote form.  """  
      self.LeadTime:str = obj["LeadTime"]
      """  A field to describe lead time. For example "Allow 4-5 weeks". This is printed on the Quote form.  """  
      self.Template:bool = obj["Template"]
      """  Indicates if this quote detail is considered a "Template".  Template lines appear in the browse of quotes that can be copied.  """  
      self.DrawNum:str = obj["DrawNum"]
      """  Engineering Drawing Number. An optional field.  """  
      self.JobComment:str = obj["JobComment"]
      """  Production Job comments. These will be copied to the JobHead.CommentText when the quote is pulled into a job during a get detail function.  It is also copied to the OrderDtl.PickListComment which may then be copied to JobHead.CommentText when linked.  """  
      self.MfgDetail:bool = obj["MfgDetail"]
      """  An internally used flag field which indicates if Manufacturing Details exist for this quote line item. It is set to "Yes" if any QuoteOpr or QuoteMtl records exist for the quote line. This is controlled via write/delete triggers on the QuoteOpr and QuoteMtl files. Used by the "Get Detail" function in job entry so that only QuoteDtl record that MfgDetail = Yes are shown in the browser.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record. Defaults from the Part Master.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  """  
      self.CustNum:int = obj["CustNum"]
      """  Number that relates to the Customer master. Duplicated from QuoteHed.CustNum.  Used to allow efficient browsing of the QuoteDtl records for a specific customer.  """  
      self.Quoted:bool = obj["Quoted"]
      """  Mirror image of QuoteHed.Quoted.  Duplicated to provide efficient browsing of QuoteDtl records.  """  
      self.Expired:bool = obj["Expired"]
      """  Mirror image of QuoteHed.Expired.  Duplicated to provide efficient browsing of QuoteDtl records.  """  
      self.WIStartDate:str = obj["WIStartDate"]
      """  Used for scheduling a quote.  This date is only valid for the quantity and date the user entered for Quote Scheduling.  """  
      self.WIStartHour:int = obj["WIStartHour"]
      """  This field is established by scheduling, and it only valid for the Date/Quantity the user entered in quote scheduling.  """  
      self.WIDueDate:str = obj["WIDueDate"]
      """  Used for scheduling.  Only valid for the Date and Quantity the user entered in quote scheduling.  """  
      self.WIDueHour:int = obj["WIDueHour"]
      """  Used for scheduling.  Only valid for the Date and Quantity the user entered in quote scheduling.  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.SellingExpectedQty:int = obj["SellingExpectedQty"]
      """  The quantity expected to be ordered. (In selling unit of measure)  """  
      self.SellingExpectedUM:str = obj["SellingExpectedUM"]
      """  Unit of measure (how it is sold/issued) for the SellingExpectedQty.  Use the default Part.SUM if its a valid Part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.ConfidencePct:int = obj["ConfidencePct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential for the quote line  """  
      self.LastUpdate:str = obj["LastUpdate"]
      """  The date this line was last updated  """  
      self.LastDcdUserID:str = obj["LastDcdUserID"]
      """  The last User Is that updated this Quote  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  The line item discount percent. It has nothing to do with price break discounts. It is a flat discount percent that defaults from the QuoteHed.DiscountPercent, which was originally defaulted from the Customer.DiscountPercent.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or QuoteQty fields are changed.  """  
      self.ExpectedRevenue:int = obj["ExpectedRevenue"]
      """  Expected revenue for this line.  Calculated from SellingExpectedQty and Unit Price, discount and SalesRepFactor  """  
      self.DocExpectedRevenue:int = obj["DocExpectedRevenue"]
      """  Expected revenue for this line  in customer currency.  Calculated from SellingExpectedQty and Unit Price, discount and SalesRepFactor  """  
      self.ReqShipDate:str = obj["ReqShipDate"]
      """  The requested ship date for the sales order  """  
      self.OrderQty:int = obj["OrderQty"]
      """  The quantity to be used when a Sales order is created. (In selling unit of measure)  """  
      self.SellingExpFactor:int = obj["SellingExpFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.MultiRel:bool = obj["MultiRel"]
      """  Indicates that the order line made from this quote line should have multiple releases.  Informational only.  """  
      self.POLine:str = obj["POLine"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Code which uniquely identifies a SalesCat record.  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  Replicated from QuoteHed to easier sorting  """  
      self.CurrentStage:str = obj["CurrentStage"]
      """   Duplicated from QuoteHed for Query's.  Describe the type of Quote this is.
LEAD = Lead
OPPO = Opportunity
QUOT = Quote  """  
      self.CreatedFrom:str = obj["CreatedFrom"]
      """  Indicates if the Quote line was created from opportunity entry "QUOTE" or from Order Entry "ORDER".  Used to determine if the Quote can be deleted when the Order gets deleted.  """  
      self.AnalysisCode:str = obj["AnalysisCode"]
      """  Analysis Code  """  
      self.PDMObjID:str = obj["PDMObjID"]
      """  Holds the internal object id of pdm parts.  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.ConfigUnitPrice:int = obj["ConfigUnitPrice"]
      """   Same as Unit price except that this field contains the unit price computed from the input based pricing in a configuration.
If price breaks exist this price should be used as the base price instead of the one found in the part table.  """  
      self.ConfigBaseUnitPrice:int = obj["ConfigBaseUnitPrice"]
      """  This is the base price for inputs based pricing of a configuration.  The price of inputs are added to this price to get the ConfigUnitPrice.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.PriceListCode:str = obj["PriceListCode"]
      """  This is the Price List used to determine the starting base price.  """  
      self.BreakListCode:str = obj["BreakListCode"]
      """  This is the Price List used to determine the break % or amount.  """  
      self.PricingQty:int = obj["PricingQty"]
      """  The Expected Quantity (total qty of related quote lines) used to find price when quantity based discounting is applied.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """   Same as List price except that this field contains the list price in
QuoteHed).  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency (converted using the exchange rate on QuoteHed).  """  
      self.PriceGroupCode:str = obj["PriceGroupCode"]
      """  This is the Price Group ID used to price the quote line with.  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  Indicates if the user selected a price list different from the default.  """  
      self.PricingValue:int = obj["PricingValue"]
      """  The Expected Order Value (total extended price of related quote lines) used to find order value break when value based discounting is applied.  """  
      self.ExpUnitPrice:int = obj["ExpUnitPrice"]
      """  This is the unit price based on the expected quantity.  """  
      self.DocExpUnitPrice:int = obj["DocExpUnitPrice"]
      """  This is the unit price (in customer currency) based on the expected quantity.  """  
      self.ExpPricePerCode:str = obj["ExpPricePerCode"]
      """   Indicates the pricing per quantity. It can be "E" = per each,
"C" = per hundred,  "M" = per thousand. Used to calculate the extended unit price for the line item. The logic is to divide the QuoteDtl.SellingExpectedQty by the appropriate "per" value and then multiply by expected unit price.  Use the  Part.PricePerCode as a default. If Part record does not exist then default as "E"  """  
      self.MiscQtyNum:int = obj["MiscQtyNum"]
      """  An internally used integer assigned by the system to provide a unique key to the QuoteQty file.  This indicate what QuoteQty break should be used to get the related miscellaneous charges.  """  
      self.Engineer:bool = obj["Engineer"]
      """  The Quote Line has been Engineered.  """  
      self.ReadyToQuote:bool = obj["ReadyToQuote"]
      """  Indicates if Engineering details are complete/valid if the EngineerReq field is marked as Yes.  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if component lines can be added, deleted and modified during quote entry.  This field is only relevant for quote lines which are kit parents.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kitted part must be shipped complete or if kit components can be shipped in varying degrees of completeness.  This field is only relevant for quote lines which are kit parents.  If this field is set to "No", then KitPricing must be set to "C".  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushd when a kit parent item is shipped.  This field is only relevant for quote lines which are kit parents.  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes",then this field must be set to "Yes" as well.  This field is only relevant for quote lines which are kit parents.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  This field is only relevant for quote lines which are kit parents.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are: P = Parent Pricing (The price is otained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  This field is only relevant for quote lines which are kit parents.  """  
      self.KitParentLine:int = obj["KitParentLine"]
      """  The quote line number of the parent kit item.  This is only relevent for quote lines which are kit parent or component lines.  If the KitParentLine equals the QuoteLine then this is a kit parent line.  """  
      self.KitQtyPer:int = obj["KitQtyPer"]
      """  Component quantity required to fulfill one kit parent.  This field is only relevant on a quote line which is a kit component.  """  
      self.DisplaySeq:int = obj["DisplaySeq"]
      """  This field controls the order in which quote lines are displayed.  DisplaySeq is a decimal number where the whole number portion is used to sequence normal quote lines and the decimal portion is ued to sequence kit components under their associated kit parent.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID of linked project.  Must exist on the Project table. Can be blank.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.MakeDirect:bool = obj["MakeDirect"]
      """  To indicate whether or not the line is make direct  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Must exist on ProjPhase table if entered  """  
      self.KitFlag:str = obj["KitFlag"]
      """   A character flag field used to differentiate between regular quote line, Sales Kit parent quote line and Sales Kit component quote line.
P = Sales Kit Parent line
C = Sales Kit Component Line
Null = regular line  """  
      self.KitsLoaded:bool = obj["KitsLoaded"]
      """  Indicates if the kit components have been automatically loaded.  If set to false the user interface will attempt to load the kit components after the user saves a new quote line.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Non-blank value prevents taxes from being calculated for this line item  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.OwnershipStatus:str = obj["OwnershipStatus"]
      """  This field can be used with external system integrations to identify which system currently has ownership of the record.  This field can hold either the name of the external system (example: PDM), ERP (Epicor) or null.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExpectedRevenue:int = obj["Rpt1ExpectedRevenue"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExpectedRevenue:int = obj["Rpt2ExpectedRevenue"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExpectedRevenue:int = obj["Rpt3ExpectedRevenue"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExpUnitPrice:int = obj["Rpt1ExpUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExpUnitPrice:int = obj["Rpt2ExpUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExpUnitPrice:int = obj["Rpt3ExpUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.ExtPriceDtl:int = obj["ExtPriceDtl"]
      """  Extended Price for the quote line, rounded according to the Base currency Round rule  """  
      self.DocExtPriceDtl:int = obj["DocExtPriceDtl"]
      """  Extended Price for the quote line in Customer currency, rounded according to the Doc currency Round rule  """  
      self.Rpt1ExtPriceDtl:int = obj["Rpt1ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPriceDtl:int = obj["Rpt2ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPriceDtl:int = obj["Rpt3ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.InDiscount:int = obj["InDiscount"]
      """  Reserved for future use  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """  Reserved for future use  """  
      self.InExpectedRevenue:int = obj["InExpectedRevenue"]
      """  Reserved for future use  """  
      self.DocInExpectedRevenue:int = obj["DocInExpectedRevenue"]
      """  Reserved for future use  """  
      self.InListPrice:int = obj["InListPrice"]
      """  Reserved for future use  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """  Reserved for future use  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  Reserved for future use  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  Reserved for future use  """  
      self.InExpUnitPrice:int = obj["InExpUnitPrice"]
      """  Reserved for future use  """  
      self.DocInExpUnitPrice:int = obj["DocInExpUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  Reserved for future use  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  Reserved for future use  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  Reserved for future use  """  
      self.Rpt1InExpectedRevenue:int = obj["Rpt1InExpectedRevenue"]
      """  Reserved for future use  """  
      self.Rpt2InExpectedRevenue:int = obj["Rpt2InExpectedRevenue"]
      """  Reserved for future use  """  
      self.Rpt3InExpectedRevenue:int = obj["Rpt3InExpectedRevenue"]
      """  Reserved for future use  """  
      self.Rpt1InExpUnitPrice:int = obj["Rpt1InExpUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt2InExpUnitPrice:int = obj["Rpt2InExpUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt3InExpUnitPrice:int = obj["Rpt3InExpUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """  Reserved for future use  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """  Reserved for future use  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """  Reserved for future use  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Reserved for future use  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Reserved for future use  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Reserved for future use  """  
      self.InExtPriceDtl:int = obj["InExtPriceDtl"]
      """  Reserved for future use  """  
      self.DocInExtPriceDtl:int = obj["DocInExtPriceDtl"]
      """  Reserved for future use  """  
      self.Rpt1InExtPriceDtl:int = obj["Rpt1InExtPriceDtl"]
      """  Reserved for future use  """  
      self.Rpt2InExtPriceDtl:int = obj["Rpt2InExtPriceDtl"]
      """  Reserved for future use  """  
      self.Rpt3InExtPriceDtl:int = obj["Rpt3InExtPriceDtl"]
      """  Reserved for future use  """  
      self.WorstCsPct:int = obj["WorstCsPct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential (worst case) for the quote line.  """  
      self.BestCsPct:int = obj["BestCsPct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential (best case) for the quote line.  """  
      self.WorstCsRevenue:int = obj["WorstCsRevenue"]
      """  Worst case revenue for this line.  Calculated from SellingExpectedQty and Unit Price, discount and WorstCsPct.  """  
      self.DocWorstCsRevenue:int = obj["DocWorstCsRevenue"]
      """  Worst case revenue for this line in customer currency.  Calculated from SellingExpectedQty and Unit Price, discount and WorstCsPct.  """  
      self.Rpt1WorstCsRevenue:int = obj["Rpt1WorstCsRevenue"]
      self.Rpt2WorstCsRevenue:int = obj["Rpt2WorstCsRevenue"]
      self.Rpt3WorstCsRevenue:int = obj["Rpt3WorstCsRevenue"]
      self.BestCsRevenue:int = obj["BestCsRevenue"]
      """  Best case revenue for this line.  Calculated from SellingExpectedQty and Unit Price, discount and BestCsPct.  """  
      self.DocBestCsRevenue:int = obj["DocBestCsRevenue"]
      """  Best case revenue for this line in customer currency.  Calculated from SellingExpectedQty and Unit Price, discount and BestCsPct.  """  
      self.Rpt1BestCsRevenue:int = obj["Rpt1BestCsRevenue"]
      self.Rpt2BestCsRevenue:int = obj["Rpt2BestCsRevenue"]
      self.Rpt3BestCsRevenue:int = obj["Rpt3BestCsRevenue"]
      self.KitCompOrigSeq:int = obj["KitCompOrigSeq"]
      """  The original material sequence of this kit component under the kit parent part.  """  
      self.KitCompOrigPart:str = obj["KitCompOrigPart"]
      """  The original kit component part number prior to processing any configurator rule programs  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.DiscBreakListCode:str = obj["DiscBreakListCode"]
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.DiscListPrice:int = obj["DiscListPrice"]
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand is for.  """  
      self.OverrideDiscPriceList:bool = obj["OverrideDiscPriceList"]
      self.DemandContractLine:int = obj["DemandContractLine"]
      """  Demand Contract Line  """  
      self.DemandHedSeq:int = obj["DemandHedSeq"]
      """  Demand Header sequence number to which this record is related.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  Demand Detail Sequence number to which this record is related.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this quote line is linked to an inter-company PO line.  """  
      self.LockPrice:bool = obj["LockPrice"]
      """  Indicates if the price of the quote line can be changed.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the quote quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.VoidLine:bool = obj["VoidLine"]
      """  Indicates that the line item was closed before any shipments were made against it.  """  
      self.Warranty:bool = obj["Warranty"]
      """  Indicate that the item or the product group has a warranty.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty that ties this record to a type of warranty.  Found on either the Part or ProdGrup table.  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  Editor widget for Warranty comments.  """  
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.EstimateGUID:str = obj["EstimateGUID"]
      """  EstimateGUID  """  
      self.RFQCurrBaseEst:str = obj["RFQCurrBaseEst"]
      """  RFQCurrBaseEst  """  
      self.RFQTemplate:str = obj["RFQTemplate"]
      """  RFQTemplate  """  
      self.CreateEstimate:bool = obj["CreateEstimate"]
      """  CreateEstimate  """  
      self.Rating:str = obj["Rating"]
      """  Rating  """  
      self.EstimateUserID:str = obj["EstimateUserID"]
      """  EstimateUserID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ExternalMES:bool = obj["ExternalMES"]
      """  Indicates the record is used with Machine MES  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  NeedByDate  """  
      self.ProcessMode:str = obj["ProcessMode"]
      """  Indicates the way in which parts are made for Co-Part jobs.  There are two value “S” – Sequential and “C” – Concurrent.  Sequential is the default. This field is similar to the JobHead.ProcessMode field.  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECC Quote Number  """  
      self.ECCQuoteLine:int = obj["ECCQuoteLine"]
      """  ECC Quote Line  """  
      self.ECCCmmtRef:str = obj["ECCCmmtRef"]
      """  ECC Comment Ref  """  
      self.ECCComment:str = obj["ECCComment"]
      """  ECCComment  """  
      self.ContractID:str = obj["ContractID"]
      """  ContractID  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.Tax:int = obj["Tax"]
      """  Total tax in base currency. Tax detail for the line.  """  
      self.DocTax:int = obj["DocTax"]
      """  Total tax in base currency. Tax detail for the line.  """  
      self.Rpt1Tax:int = obj["Rpt1Tax"]
      """  Total tax in base currency. Tax detail for the line.  """  
      self.Rpt2Tax:int = obj["Rpt2Tax"]
      """  Total tax in base currency. Tax detail for the line.  """  
      self.Rpt3Tax:int = obj["Rpt3Tax"]
      """  Total tax in base currency. Tax detail for the line.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the QuoteDtlTax records tied to this release are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  Indicates if no tax recalculation by the system is supposed to be done.  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """  Total Quote Self Assessed Taxes for the Quote Line  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """  Total Quote Self Assessed Taxes for the Quote Line  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """  Total Quote Self Assessed Taxes for the Quote Line  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """  Total Quote Self Assessed Taxes for the Quote Line  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """  Total Quote Self Assessed Taxes for the Quote Line  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.ExternalCRMQuoteLineID:str = obj["ExternalCRMQuoteLineID"]
      """  This field holds the id of this quote line in the External CRM  """  
      self.ReturnLineType:str = obj["ReturnLineType"]
      """  Type for returns: Blank, (C)redit or (S)tandard  """  
      self.MSRP:int = obj["MSRP"]
      """  Base price before any price breaks and discounts  """  
      self.DocMSRP:int = obj["DocMSRP"]
      """  Same as MSRP except that this field contains the price in the customer currency converted using the exchange rate on QuoteHed.  """  
      self.Rpt1MSRP:int = obj["Rpt1MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency converted..  """  
      self.Rpt2MSRP:int = obj["Rpt2MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency converted..  """  
      self.Rpt3MSRP:int = obj["Rpt3MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency converted..  """  
      self.EndCustomerPrice:int = obj["EndCustomerPrice"]
      """  Distributor end customer price.  """  
      self.DocEndCustomerPrice:int = obj["DocEndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in the customer currency converted using the exchange rate on QuoteHed.  """  
      self.Rpt1EndCustomerPrice:int = obj["Rpt1EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency converted.  """  
      self.Rpt2EndCustomerPrice:int = obj["Rpt2EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency converted.  """  
      self.Rpt3EndCustomerPrice:int = obj["Rpt3EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency converted.  """  
      self.MFCustNum:int = obj["MFCustNum"]
      """  Mark For Customer Number. This along with Mark For ShipToNum provides the foreign key field to a given ShipTo.  """  
      self.MFShipToNum:str = obj["MFShipToNum"]
      """  Mark For ShipToNum  """  
      self.UseOTMF:bool = obj["UseOTMF"]
      """  Indicates that the One Time Mark For information defined for this record should be used.  """  
      self.OTMFName:str = obj["OTMFName"]
      """  One Time Mark For Contact Name  """  
      self.OTMFAddress1:str = obj["OTMFAddress1"]
      """  One Time Mark For first line of the ShipTo address.  """  
      self.OTMFAddress2:str = obj["OTMFAddress2"]
      """  One Time Mark For second line of the ShipTo address.  """  
      self.OTMFAddress3:str = obj["OTMFAddress3"]
      """  One Time Mark For third line of the ShipTo address.  """  
      self.OTMFCity:str = obj["OTMFCity"]
      """  City portion of the One Time Mark For address.  """  
      self.OTMFState:str = obj["OTMFState"]
      """  The state or province portion of the One Time Mark For address.  """  
      self.OTMFZIP:str = obj["OTMFZIP"]
      """  The zip or postal code portion of the One Time Mark For address.  """  
      self.OTMFContact:str = obj["OTMFContact"]
      """  One Time Mark For Contact Name  """  
      self.OTMFFaxNum:str = obj["OTMFFaxNum"]
      """  Fax number for the One Time Mark For.  """  
      self.OTMFPhoneNum:str = obj["OTMFPhoneNum"]
      """  Phone number for the One Time Mark For  """  
      self.OTMFCountryNum:int = obj["OTMFCountryNum"]
      """  Country number for the One Time Mark For  """  
      self.PromotionalPrice:int = obj["PromotionalPrice"]
      """  Promotional Price offered to Dealer and Distributors  """  
      self.DocPromotionalPrice:int = obj["DocPromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in the customer currency converted using the exchange rate on QuoteHed.  """  
      self.Rpt1PromotionalPrice:int = obj["Rpt1PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on QuoteHed.  """  
      self.Rpt2PromotionalPrice:int = obj["Rpt2PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on QuoteHed.  """  
      self.Rpt3PromotionalPrice:int = obj["Rpt3PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on QuoteHed.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  Used specifically for Deal Portal and Location Inventory, not for Inventory Tracked Attributes.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.KBOriginalConfigProdID:int = obj["KBOriginalConfigProdID"]
      """  The unique identifier of the related original CPQ Configured Quote Product.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Currency.CurrSymbol for BASE  """  
      self.BaseExtPrice:int = obj["BaseExtPrice"]
      self.BaseMiscAmt:int = obj["BaseMiscAmt"]
      self.BasePotential:int = obj["BasePotential"]
      self.CheckPartDescription:bool = obj["CheckPartDescription"]
      """  If yes, then a new non-standard part was added with no description and validation needs to be run again  """  
      self.CodePLM:bool = obj["CodePLM"]
      """  PLM Flag  """  
      self.Conclusion:str = obj["Conclusion"]
      """  Valid values are "win" "lose" "next" "next" is the default  """  
      self.ConfigType:str = obj["ConfigType"]
      self.Configured:str = obj["Configured"]
      """  Indicates whether the part is/can be configured  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  Currency.CurrSymbol from QuoteHed  """  
      self.DateQuoted:str = obj["DateQuoted"]
      """  Date that the quoter considered the quoting process for this quote complete.  """  
      self.DisableDiscounts:bool = obj["DisableDiscounts"]
      """  Indicates if the discount fields should be disabled for the current quote line detail.  """  
      self.DocDspDiscount:int = obj["DocDspDiscount"]
      """  Display a Document  flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DocDspExpUnitPrice:int = obj["DocDspExpUnitPrice"]
      """  Display Document unit price based on the expected quantity.  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      self.DocOrderUnitPrice:int = obj["DocOrderUnitPrice"]
      self.DocPotential:int = obj["DocPotential"]
      self.DocTotalPrice:int = obj["DocTotalPrice"]
      self.DocTotalQuote:int = obj["DocTotalQuote"]
      """   Total Quote which includes the total sum of potential, misc charges and taxas.
TotalQuote = Potential + Misc Charges + Tax  """  
      self.DocTotalWHTax:int = obj["DocTotalWHTax"]
      """  Total Withholding Tax amount for the Quote Line  """  
      self.DspDiscount:int = obj["DspDiscount"]
      """  Display a  flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DspExpectedUM:str = obj["DspExpectedUM"]
      """  Used to displayed UOM for expected quantity for detail line  """  
      self.EnableRenewalNbr:bool = obj["EnableRenewalNbr"]
      self.ExpirationDate:str = obj["ExpirationDate"]
      """  The date when this quote expires.  """  
      self.HasComplement:bool = obj["HasComplement"]
      """  Indicates whether the part has at least one Complement  """  
      self.HasCoParts:bool = obj["HasCoParts"]
      self.HasCreditMemo:bool = obj["HasCreditMemo"]
      """  Indicates if this Quote line has an associated credit memo (only for dealer portal)  """  
      self.HasDowngrade:bool = obj["HasDowngrade"]
      """  Indicates whether the part has at least one Downgrade  """  
      self.HasSubstitute:bool = obj["HasSubstitute"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.HasUpgrade:bool = obj["HasUpgrade"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.KitChangeParms:bool = obj["KitChangeParms"]
      """  If Kit Flag = P then sets this field to the value of the related PartPlant.KitAllowChangeParms. If KitFlag <> P then this will be FALSE.  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.KitFlagDescription:str = obj["KitFlagDescription"]
      """  The description for Kit Flag. "P" = Parent, "C" = Component.  """  
      self.KitOrderQtyUOM:str = obj["KitOrderQtyUOM"]
      self.LineStatus:str = obj["LineStatus"]
      self.MarkForAddrList:str = obj["MarkForAddrList"]
      """  Contains the Mark For Address  """  
      self.MFCustID:str = obj["MFCustID"]
      self.OrderUM:str = obj["OrderUM"]
      self.OrderUnitPrice:int = obj["OrderUnitPrice"]
      self.OrderWorthy:bool = obj["OrderWorthy"]
      """  If yes, the line will be copied to the Order  """  
      self.PartExists:bool = obj["PartExists"]
      """  Internal flag to identify if the Part is an Inventory Part.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  """  
      self.QtyBearing:bool = obj["QtyBearing"]
      self.QuantityToOrder:int = obj["QuantityToOrder"]
      self.RefreshQty:bool = obj["RefreshQty"]
      """  Indicates whether to Refresh the QuoteQty table  """  
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  The flag to indicate if the logic should delete quote line related manually added and manual taxes if the user populates Tax Exempt field previously blank  """  
      self.Rpt1BaseExtPrice:int = obj["Rpt1BaseExtPrice"]
      self.Rpt1BaseMiscAmt:int = obj["Rpt1BaseMiscAmt"]
      self.Rpt1BasePotential:int = obj["Rpt1BasePotential"]
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      """  Display a  flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1DspExpUnitPrice:int = obj["Rpt1DspExpUnitPrice"]
      """  Display unit price based on the expected quantity.  """  
      self.Rpt1OrderUnitPrice:int = obj["Rpt1OrderUnitPrice"]
      self.Rpt1TotalPrice:int = obj["Rpt1TotalPrice"]
      self.Rpt1TotalQuote:int = obj["Rpt1TotalQuote"]
      """   Total Quote which includes the total sum of potential, misc charges and taxas.
TotalQuote = Potential + Misc Charges + Tax  """  
      self.Rpt1TotalWHTax:int = obj["Rpt1TotalWHTax"]
      """  Total Withholding Tax Amount for the Quote Line  """  
      self.Rpt2BaseExtPrice:int = obj["Rpt2BaseExtPrice"]
      self.Rpt2BaseMiscAmt:int = obj["Rpt2BaseMiscAmt"]
      self.Rpt2BasePotential:int = obj["Rpt2BasePotential"]
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      """  Display a  flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2DspExpUnitPrice:int = obj["Rpt2DspExpUnitPrice"]
      """  Display unit price based on the expected quantity.  """  
      self.Rpt2OrderUnitPrice:int = obj["Rpt2OrderUnitPrice"]
      self.Rpt2TotalPrice:int = obj["Rpt2TotalPrice"]
      self.Rpt2TotalQuote:int = obj["Rpt2TotalQuote"]
      """   Total Quote which includes the total sum of potential, misc charges and taxas.
TotalQuote = Potential + Misc Charges + Tax  """  
      self.Rpt2TotalWHTax:int = obj["Rpt2TotalWHTax"]
      """  Total Withholding Tax Amount for the Quote Line  """  
      self.Rpt3BaseExtPrice:int = obj["Rpt3BaseExtPrice"]
      self.Rpt3BaseMiscAmt:int = obj["Rpt3BaseMiscAmt"]
      self.Rpt3BasePotential:int = obj["Rpt3BasePotential"]
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      """  Display a  flat discount amount for the line item. It can be left zero. This is calculated using the QuoteDtl.DiscountPercent * (QuoteQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3DspExpUnitPrice:int = obj["Rpt3DspExpUnitPrice"]
      """  Display unit price based on the expected quantity.  """  
      self.Rpt3OrderUnitPrice:int = obj["Rpt3OrderUnitPrice"]
      self.Rpt3TotalPrice:int = obj["Rpt3TotalPrice"]
      self.Rpt3TotalQuote:int = obj["Rpt3TotalQuote"]
      """   Total Quote which includes the total sum of potential, misc charges and taxas.
TotalQuote = Potential + Misc Charges + Tax  """  
      self.Rpt3TotalWHTax:int = obj["Rpt3TotalWHTax"]
      """  Total Withholding Tax Amount for the Quote Line  """  
      self.Selected:bool = obj["Selected"]
      """  Selected row  """  
      self.ShipByDate:str = obj["ShipByDate"]
      self.TotalPrice:int = obj["TotalPrice"]
      self.TotalQuote:int = obj["TotalQuote"]
      """   Total Quote which includes the total sum of potential, misc charges and taxas.
TotalQuote = Potential + Misc Charges + Tax  """  
      self.TotalWHTax:int = obj["TotalWHTax"]
      """  Total Withholding Tax amount for the Quote Line  """  
      self.UpdateReq:bool = obj["UpdateReq"]
      """   Indicates that a QuoteAsm.QtyPer field was updated with out updating the RequiredQty field on the sub tables.
*** FUTURE USE  """  
      self.UseQuoteBOM:bool = obj["UseQuoteBOM"]
      """  Indicates that the Quote should be used as the BOM when creating a job for the linked order  """  
      self.AvailPriceLists:str = obj["AvailPriceLists"]
      """  Delimited list of Available Price Lists  """  
      self.DspExpUnitPrice:int = obj["DspExpUnitPrice"]
      """  Display unit price based on the expected quantity.  """  
      self.ECCLineCRQ:int = obj["ECCLineCRQ"]
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the Dynamic Attributes button on a Quote Line  """  
      self.EnablePLM:bool = obj["EnablePLM"]
      """  Flag indicating whether to enable CodePLM or not  """  
      self.MarkForAddressFormatted:str = obj["MarkForAddressFormatted"]
      self.InventoryAttributeSetID:int = obj["InventoryAttributeSetID"]
      self.LessDiscount:int = obj["LessDiscount"]
      """  The amount of discount for display  """  
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  The amount of discount for display in Doc currency  """  
      self.Rpt1LessDiscount:int = obj["Rpt1LessDiscount"]
      """  The amount of discount for display in reporting currency  """  
      self.Rpt2LessDiscount:int = obj["Rpt2LessDiscount"]
      """  The amount of discount for display in reporting currency  """  
      self.Rpt3LessDiscount:int = obj["Rpt3LessDiscount"]
      """  The amount of discount for display in reporting currency  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      """   This flag indicates if taxes can be modified by user:
True: Taxes are from Tax Engine (Vantage). They can be adjusted/deleted.
False: Taxes are from TaxConnect. They cannot be adjusted/deleted.
AllowTaxCodeUpd depends on TaxConnectCalc value. If TaxConnectCalc is True, AllowTaxCodeUpd will be False. Otherwise, it will be True.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AnalysisCdDescription:str = obj["AnalysisCdDescription"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.DiscBreakListCodeListDescription:str = obj["DiscBreakListCodeListDescription"]
      self.DiscBreakListCodeEndDate:str = obj["DiscBreakListCodeEndDate"]
      self.DiscBreakListCodeStartDate:str = obj["DiscBreakListCodeStartDate"]
      self.MFShipToNumInactive:bool = obj["MFShipToNumInactive"]
      self.OTMFCountryDescription:str = obj["OTMFCountryDescription"]
      self.PartNumDefaultAttributeSetID:int = obj["PartNumDefaultAttributeSetID"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PriceBreakListDescription:str = obj["PriceBreakListDescription"]
      self.PriceGroupDescription:str = obj["PriceGroupDescription"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.QuoteNumInPrice:bool = obj["QuoteNumInPrice"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TaxRegionTaxConnectCalc:bool = obj["TaxRegionTaxConnectCalc"]
      self.TerritoryIDTerritoryDesc:str = obj["TerritoryIDTerritoryDesc"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_QuoteHedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number is an integer which is used to uniquely identify a quote within the system.  This is automatically assigned by the system when the user requests to create a new quote. To create a new quote the user either takes an "add" option or leaves the Quote Number fill-in zero. The system generates a number by finding the quote number of the last record on file and then a 1 to it. It then uses the greater of Last quote number + 1 or the EQSyst.StartQuoteNum.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the internal Customer number that the links the quote to the customer master. This is not directly entered by the user. Instead the CustID is entered which provides the CustNum from the customer master. The quote must reference a valid Customer master.  """  
      self.EntryDate:str = obj["EntryDate"]
      """  Date that quote was created in the system. Not user maintainable. Set equal to the system date when record was created.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMPCON as the default.  """  
      self.QuoteComment:str = obj["QuoteComment"]
      """  Contains comments about the overall Quote. These will be printed on the Quote form.  """  
      self.DueDate:str = obj["DueDate"]
      """  Date that quoted needs to be quoted by.  Defaulted as Today + EQSyst.DueDays. This will be used to browse unquoted quotes in order by when they need to get quoted. Like a work queue for the quoters.  """  
      self.Quoted:bool = obj["Quoted"]
      """  Indicates if the quote has been quoted.  That is, the details have been entered, prices have been determined and is ready to be sent to the customer.  The quoter considers this quote complete.  Toggling this field also sets the DateQuoted equal to the current system date.  """  
      self.DateQuoted:str = obj["DateQuoted"]
      """  Date that the quoter considered the quoting process for this quote complete. This field is not accessible until Quoted = Yes. At which time this gets defaulted to system date. It is overrideable. A change to this field triggers a refresh to ExpirationDate.  """  
      self.ExpirationDate:str = obj["ExpirationDate"]
      """   The date when this quote expires. This field is not maintainable until the quote is marked as Quoted = Yes. At which time the DateQuoted is generated and then the ExpirationDate is set to DateQuoted + EQSyst.ExpirationDays.

This date is also used as part of the quote purging criteria testing.  """  
      self.FollowUpDate:str = obj["FollowUpDate"]
      """  Date that this quote should be followed up with the prospect by. This can be left blank.  When the quote is completed (i.e. Quoted = TRUE) this field is defaulted to DateQuoted + EQSyst.FollowUpDays and is user overrideable.  If EQSyst.FollowUpDays = Zero(0) then no default is generated.  """  
      self.Reference:str = obj["Reference"]
      """  A reference field that could be used to enter the customer RFQ # or any other piece of useful information.  """  
      self.CheckOff1:bool = obj["CheckOff1"]
      """   Optional Quote check off # 1. The label for this field is found in EQSyst. If the label field is blank then field should be invisible.
These "check offs" could be used for selecting quotes. An example would be a "Engineering" or "Purchasing" check off.  """  
      self.CheckOff2:bool = obj["CheckOff2"]
      """  Optional check off # 2.  """  
      self.CheckOff3:bool = obj["CheckOff3"]
      """  Optional check off # 3.  """  
      self.CheckOff4:bool = obj["CheckOff4"]
      """  Optional check off # 4.  """  
      self.CheckOff5:bool = obj["CheckOff5"]
      """  Optional check off # 5.  """  
      self.Expired:bool = obj["Expired"]
      """  Indicates if the Quote has expired.  A quote is expired when QuoteHed.ExpirationDate < Today.  Each time a user logs on the system does a quick check for any unexpired quotes that have an expiration date < Today and sets them as expired. This field is also set during the QuoteHed write trigger.  """  
      self.FlwAlrtSnt:bool = obj["FlwAlrtSnt"]
      """  System maintained flag - set to yes when the quote follow up alert has been sent.  """  
      self.DueAlrtSnt:bool = obj["DueAlrtSnt"]
      """  System maintained flag - set to yes when the quote due date alert has been sent.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this order.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LeadRating:str = obj["LeadRating"]
      """  A = High, Z = Low  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  Link to the territory Id for this LOQ  """  
      self.TaskSetID:str = obj["TaskSetID"]
      """  Link to Task set  """  
      self.CurrentStage:str = obj["CurrentStage"]
      """   Describe the type of Quote this is.
LEAD = Lead
OPPO = Opportunity
QUOT = Quote  """  
      self.ParentQuoteNum:int = obj["ParentQuoteNum"]
      """  Link to the parent Quote.  This Quote is a for the same job as the parent but for a different customer.  This quotes revenues estimates won't be included in the sales managers figures.  """  
      self.ActiveTaskID:str = obj["ActiveTaskID"]
      """  The Currently active Stage changing task  """  
      self.LastTaskID:str = obj["LastTaskID"]
      """  The Last Complete Milestone task  """  
      self.ExpectedClose:str = obj["ExpectedClose"]
      """  The date this quote is expected to close.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  Indicates the Type of reason for closing this quote.   "W" Win CRM "L" - Loss CRM, "T" Task CRM.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  Select from list of Win or loss reason codes depending on the setting if the conclusion field  """  
      self.ConfidencePct:int = obj["ConfidencePct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  Used to establish a discount percent value which will be used as a default during Quote line entry. It can be left as zero.  Use the CUSTOMER.DISCOUNTPERCENT field as a default. Refreshed whenever QUOTEHED.CUSTOMER field changes.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Indicates which customer ship to is to be used as the default for the Order release record created from this Quote. It  can be blank or it must be valid in the SHIPTO table. Use the CUSTOMER.SHIPTONUM as the default on new Quotes or when the QuoteHED.CUSTNUM is changed.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Establishes the Shipping Contact to be used as default on the Order release record created from this Quote. Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Use the Customer.PrimScon as a default.  """  
      self.QuoteClosed:bool = obj["QuoteClosed"]
      """  This quote is no longer updatable.  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The date that the Quote was closed.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Contains the key value of the record in the "SHIPVIA" table. It can be left blank or must be valid in the 'SHIPTO"  table. Use the CUSTOMER.SHIPVIA as the default when the CUSTNUM field is changed and the SHIPTO is blank. Use SHIPTO.SHIPVIA when CUSTNUM or SHIPTO fields are changed and the SHIPTO is not blank.  """  
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  Link to the Marketing Campaign related to this Quote.  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """  Link to the marketing event associated with this record.  """  
      self.CallTypeCode:str = obj["CallTypeCode"]
      """  CallType code from the CallType table.  Identifies what type of communication this is. For example email, phone, visit, etc.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  """  
      self.TermsCode:str = obj["TermsCode"]
      """   Contains the key value of the record in the TERMS table which indicates the sales terms established for this Opportunity/Quote. On change of QutoeHED.CUSTNUM use the CUSTOMER.TERMS
field as the default.  """  
      self.Ordered:bool = obj["Ordered"]
      """  Indicates that the one or more detail line items have been ordered on this quote. Note: This can be set via 3 methods. 1 - When the task is marked as a win and order is created, 2 - Via the Order Entry Get function, 2 - Via the Order Entry Add from Quote Line function.  """  
      self.ApplyOrderBasedDisc:bool = obj["ApplyOrderBasedDisc"]
      """  Indicates if order based discounting needs to be applied to the quote.  """  
      self.AutoOrderBasedDisc:bool = obj["AutoOrderBasedDisc"]
      """  Indicates if order based discounting should be applied automatically or manually triggered by user as menu option.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this quote.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.LockRate:bool = obj["LockRate"]
      """  When checked the exchange rate defaults the currency's exchanged reate, but the user can change it. When not checked the exchange rate defaults the currecy's exchange rate, and the field is disabled  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the Quote is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the quote which could affect taxes (QuoteDtl, QuoteHed, QuoteMsc, etc). It defaults from EQSyst.QuoReadyToCalcDflt field when an order is created.  """  
      self.ExportRequested:str = obj["ExportRequested"]
      """  This field is used to store a code that represents the external system that the Quote is being exported to (ex. PDM).  This field is short lived, it is used to instruct the write trigger logic to create IM records for certain types of external systems.  After creating the IM records, the trigger logic should immediately clear the field.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.QuoteAmt:int = obj["QuoteAmt"]
      """  Total quote Amount. This field is an accumulation of the extended net amounts of the detail line items.  """  
      self.DocQuoteAmt:int = obj["DocQuoteAmt"]
      """  Total quote Amount in customer currency. This field is an accumulation of the extended net amounts of the detail line items and rounded according to the Doc currency Round rule  """  
      self.Rpt1QuoteAmt:int = obj["Rpt1QuoteAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2QuoteAmt:int = obj["Rpt2QuoteAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3QuoteAmt:int = obj["Rpt3QuoteAmt"]
      """  Reporting currency value of this field  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the One Time ShipTo tax region for purposes of Sales Tax calculations.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipping Country Number  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.WorstCsPct:int = obj["WorstCsPct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential (worst case) for the quote line.  """  
      self.BestCsPct:int = obj["BestCsPct"]
      """  Allows Sales Rep to enter a percentage to factor the calculated revenue potential (best case) for the quote line.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  Demand Header sequence number to which this record is related.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready.  """  
      self.EDIQuote:bool = obj["EDIQuote"]
      """  Quote created from EDI interfaced module.  """  
      self.EDIAck:bool = obj["EDIAck"]
      """  Updated from EDI module this type of document is created.  """  
      self.OutboundQuoteDocCtr:int = obj["OutboundQuoteDocCtr"]
      """  Incremented whenever an outbound quote document is generated from the quote i.e. Response to Request For Quotes, etc.  """  
      self.DemandProcessDate:str = obj["DemandProcessDate"]
      """  Date in which the related demand was last processed.  """  
      self.DemandProcessTime:int = obj["DemandProcessTime"]
      """  System Time when demand was last processed.  """  
      self.LastTCtrlNum:str = obj["LastTCtrlNum"]
      """  EDI Transaction Control Number  """  
      self.LastBatchNum:str = obj["LastBatchNum"]
      """  EDI Batch Control Number  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """   Total Quote Self Assessed Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """   Total Quote Invoice Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.DocTotalWHTax:int = obj["DocTotalWHTax"]
      """   Total Quote Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """   Total Quote Self Assessed Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """   Total Quote Invoice Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax +TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt1TotalWHTax:int = obj["Rpt1TotalWHTax"]
      """   Total Quote Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """   Total Quote Self Assessed Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """   Total Quote Invoice TaxesQuote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt2TotalWHTax:int = obj["Rpt2TotalWHTax"]
      """   Total Order Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """   Total Quote Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """   Total Quote Invoice Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.Rpt3TotalWHTax:int = obj["Rpt3TotalWHTax"]
      """   Total Quote Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.DropShip:bool = obj["DropShip"]
      """  Freight charges will not be returned if 'yes'  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """   Quote Total Self Assessed Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.TotalTax:int = obj["TotalTax"]
      """   Quote Total Invoice Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.TotalWHTax:int = obj["TotalWHTax"]
      """   Quote Total Withholding Taxes
Quote Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Quote Total - TotalComm  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number that uniquely identifies the purchase order.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this quote header is linked to an inter-company PO header.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the quote quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on the order to arrive. This is used only as the default value for the NeedByDate when creating quote detail line items. This can be left blank.  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the  OTS info.  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS is saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.RequestDate:str = obj["RequestDate"]
      """  Date that the items need to be shipped by to meet the customers NeedByDate.  This can be left blank, it is only used to supply a default for QuoteDtl.RequestDate.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.VoidQuote:bool = obj["VoidQuote"]
      """  Indicates that the Quote item was closed before any shipments were made against it.  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.TotalDiscPct:int = obj["TotalDiscPct"]
      """  Total discount percent.  """  
      self.TotalExpected:int = obj["TotalExpected"]
      """  The expected revenue, calculated with the confidence factor.  """  
      self.TotalGrossValue:int = obj["TotalGrossValue"]
      self.TotalMiscAmt:int = obj["TotalMiscAmt"]
      self.TotalPotential:int = obj["TotalPotential"]
      self.TotalWorstCs:int = obj["TotalWorstCs"]
      """  Worst case revenue, calculated with the worst case confidence factor.  """  
      self.DocTotalBestCs:int = obj["DocTotalBestCs"]
      """  Total best case revenue, calculated with the best case confidence factor.  """  
      self.DocTotalDiscount:int = obj["DocTotalDiscount"]
      self.DocTotalDiscPct:int = obj["DocTotalDiscPct"]
      """  Total discount percent.  """  
      self.DocTotalExpected:int = obj["DocTotalExpected"]
      """  The expected revenue, calculated with the confidence factor.  """  
      self.DocTotalGrossValue:int = obj["DocTotalGrossValue"]
      self.DocTotalMiscAmt:int = obj["DocTotalMiscAmt"]
      self.DocTotalPotential:int = obj["DocTotalPotential"]
      self.DocTotalWorstCs:int = obj["DocTotalWorstCs"]
      """  Worst case revenue, calculated with the worst case confidence factor.  """  
      self.Rpt1TotalBestCs:int = obj["Rpt1TotalBestCs"]
      """  Total best case revenue, calculated with the best case confidence factor.  """  
      self.Rpt1TotalDiscount:int = obj["Rpt1TotalDiscount"]
      self.Rpt1TotalDiscPct:int = obj["Rpt1TotalDiscPct"]
      """  Total discount percent.  """  
      self.Rpt1TotalExpected:int = obj["Rpt1TotalExpected"]
      """  The expected revenue, calculated with the confidence factor.  """  
      self.Rpt1TotalGrossValue:int = obj["Rpt1TotalGrossValue"]
      self.Rpt1TotalMiscAmt:int = obj["Rpt1TotalMiscAmt"]
      self.Rpt1TotalPotential:int = obj["Rpt1TotalPotential"]
      self.Rpt1TotalWorstCs:int = obj["Rpt1TotalWorstCs"]
      """  Worst case revenue, calculated with the worst case confidence factor.  """  
      self.Rpt2TotalBestCs:int = obj["Rpt2TotalBestCs"]
      """  Total best case revenue, calculated with the best case confidence factor.  """  
      self.Rpt2TotalDiscount:int = obj["Rpt2TotalDiscount"]
      self.Rpt2TotalDiscPct:int = obj["Rpt2TotalDiscPct"]
      """  Total discount percent.  """  
      self.Rpt2TotalExpected:int = obj["Rpt2TotalExpected"]
      """  The expected revenue, calculated with the confidence factor.  """  
      self.Rpt2TotalGrossValue:int = obj["Rpt2TotalGrossValue"]
      self.Rpt2TotalMiscAmt:int = obj["Rpt2TotalMiscAmt"]
      self.Rpt2TotalPotential:int = obj["Rpt2TotalPotential"]
      self.Rpt2TotalWorstCs:int = obj["Rpt2TotalWorstCs"]
      """  Worst case revenue, calculated with the worst case confidence factor.  """  
      self.Rpt3TotalBestCs:int = obj["Rpt3TotalBestCs"]
      """  Total best case revenue, calculated with the best case confidence factor.  """  
      self.Rpt3TotalDiscount:int = obj["Rpt3TotalDiscount"]
      self.Rpt3TotalDiscPct:int = obj["Rpt3TotalDiscPct"]
      """  Total discount percent.  """  
      self.Rpt3TotalExpected:int = obj["Rpt3TotalExpected"]
      """  The expected revenue, calculated with the confidence factor.  """  
      self.Rpt3TotalGrossValue:int = obj["Rpt3TotalGrossValue"]
      self.Rpt3TotalMiscAmt:int = obj["Rpt3TotalMiscAmt"]
      self.Rpt3TotalPotential:int = obj["Rpt3TotalPotential"]
      self.Rpt3TotalWorstCs:int = obj["Rpt3TotalWorstCs"]
      """  Worst case revenue, calculated with the worst case confidence factor.  """  
      self.TotalBestCs:int = obj["TotalBestCs"]
      """  Total best case revenue, calculated with the best case confidence factor.  """  
      self.TotalDiscount:int = obj["TotalDiscount"]
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.LOQPrepressText:str = obj["LOQPrepressText"]
      """  LOQPrepressText  """  
      self.LOQNewPageOnQuoteLine:bool = obj["LOQNewPageOnQuoteLine"]
      """  LOQNewPageOnQuoteLine  """  
      self.LOQBookPCFinishing:bool = obj["LOQBookPCFinishing"]
      """  LOQBookPCFinishing  """  
      self.LOQBookPCPaper:bool = obj["LOQBookPCPaper"]
      """  LOQBookPCPaper  """  
      self.LOQBookPCPress:bool = obj["LOQBookPCPress"]
      """  LOQBookPCPress  """  
      self.LOQBookPCPlates:bool = obj["LOQBookPCPlates"]
      """  LOQBookPCPlates  """  
      self.LOQVariations:bool = obj["LOQVariations"]
      """  LOQVariations  """  
      self.AEPLOQType:str = obj["AEPLOQType"]
      """  AEPLOQType  """  
      self.LOQPrepressStyle:str = obj["LOQPrepressStyle"]
      """  LOQPrepressStyle  """  
      self.QuoteCSR:str = obj["QuoteCSR"]
      """  QuoteCSR  """  
      self.DueHour:str = obj["DueHour"]
      """  DueHour  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ECCConfirmed:bool = obj["ECCConfirmed"]
      """  Quote was confirmed/rejected by ECC Web  """  
      self.ECCConfirmedBy:str = obj["ECCConfirmedBy"]
      """  Quote was confirmed/rejected by this ECC user  """  
      self.ECCMsgType:str = obj["ECCMsgType"]
      """  ECC quote message: RFQ or GQR  """  
      self.ECCWebReady:bool = obj["ECCWebReady"]
      """  Quote is ready to be approved by user via ECC web site.  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECC Quote Number  """  
      self.ECCCmmtRef:str = obj["ECCCmmtRef"]
      """  ECC Comment Reference Number  """  
      self.ECCComment:str = obj["ECCComment"]
      """  ECCComment  """  
      self.ECCStatus:str = obj["ECCStatus"]
      """  ECC Quote Status  """  
      self.ECCExpirationDate:str = obj["ECCExpirationDate"]
      """  ECC Expiration Date  """  
      self.ECCCmmtRefSK:str = obj["ECCCmmtRefSK"]
      """  ECCCmmtRefSK  """  
      self.ExternalCRMQuote:bool = obj["ExternalCRMQuote"]
      """  This field defines if the Quote  is synchronized to an External CRM.  """  
      self.ExternalCRMQuoteID:str = obj["ExternalCRMQuoteID"]
      """  This field holds the  id of this quote in the External CRM  """  
      self.ExternalCRMOrderID:str = obj["ExternalCRMOrderID"]
      """  This field holds the sales order created in the External CRM. This id might not match an Epicor ERP Order id.  """  
      self.ECCSalesRepID:str = obj["ECCSalesRepID"]
      """  Web Sales Rep ID  """  
      self.Tax:int = obj["Tax"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.DocTax:int = obj["DocTax"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.Rpt1Tax:int = obj["Rpt1Tax"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.Rpt2Tax:int = obj["Rpt2Tax"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.Rpt3Tax:int = obj["Rpt3Tax"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.HdrTaxNoUpdt:bool = obj["HdrTaxNoUpdt"]
      """  HdrTaxNoUpdt  """  
      self.ExternalCRMLastSync:str = obj["ExternalCRMLastSync"]
      """  This field defines the last time that the Quote has been Synchronized between Epicor ERP and the External CRM. This field is maintained by the External CRM Synchronization  process.  """  
      self.ExternalCRMSyncRequired:bool = obj["ExternalCRMSyncRequired"]
      """  This fields determines if the quotes needs to be synchronized to the External CRM. If there are changes in the quote or quote detail file, Epicor ERP automatically turns on this field.  """  
      self.TotalClaimsCredit:int = obj["TotalClaimsCredit"]
      """  Total of claims credit lines  """  
      self.DocTotalClaimsCredit:int = obj["DocTotalClaimsCredit"]
      """  Total of claims credit lines in customer currency  """  
      self.Rpt1TotalClaimsCredit:int = obj["Rpt1TotalClaimsCredit"]
      """  Total of claims credit lines in report currency  """  
      self.Rpt2TotalClaimsCredit:int = obj["Rpt2TotalClaimsCredit"]
      """  Total of claims credit lines in report currency  """  
      self.Rpt3TotalClaimsCredit:int = obj["Rpt3TotalClaimsCredit"]
      """  Total of claims credit lines in report currency  """  
      self.TotalClaimsTax:int = obj["TotalClaimsTax"]
      """  Total Quote claims credit Invoice Taxes.  """  
      self.DocTotalClaimsTax:int = obj["DocTotalClaimsTax"]
      """  Total Quote claims credit Invoice Taxes in customer currency.  """  
      self.Rpt1TotalClaimsTax:int = obj["Rpt1TotalClaimsTax"]
      """  Total Quote claims credit Invoice Taxes in report currency.  """  
      self.Rpt2TotalClaimsTax:int = obj["Rpt2TotalClaimsTax"]
      """  Total Quote claims credit Invoice Taxes in report currency.  """  
      self.Rpt3TotalClaimsTax:int = obj["Rpt3TotalClaimsTax"]
      """  Total Quote claims credit Invoice Taxes in report currency.  """  
      self.TotalClaimsSATax:int = obj["TotalClaimsSATax"]
      """  Total Quote claims credit Self Assessed Taxes.  """  
      self.DocTotalClaimsSATax:int = obj["DocTotalClaimsSATax"]
      """  Total Quote claims credit Self Assessed Taxes in customer currency.  """  
      self.Rpt1TotalClaimsSATax:int = obj["Rpt1TotalClaimsSATax"]
      """  Total Quote claims credit Self Assessed Taxes in customer currency.  """  
      self.Rpt2TotalClaimsSATax:int = obj["Rpt2TotalClaimsSATax"]
      """  Total Quote claims credit Self Assessed Taxes in customer currency.  """  
      self.Rpt3TotalClaimsSATax:int = obj["Rpt3TotalClaimsSATax"]
      """  Total Quote claims credit Self Assessed Taxes in customer currency.  """  
      self.TotalClaimsWHTax:int = obj["TotalClaimsWHTax"]
      """  Total Quote claims credit Withholding Taxes.  """  
      self.DocTotalClaimsWHTax:int = obj["DocTotalClaimsWHTax"]
      """  Total Quote claims credit Withholding Taxes in customer currency.  """  
      self.Rpt1TotalClaimsWHTax:int = obj["Rpt1TotalClaimsWHTax"]
      """  Total Quote claims credit Withholding Taxes in report currency.  """  
      self.Rpt2TotalClaimsWHTax:int = obj["Rpt2TotalClaimsWHTax"]
      """  Total Quote claims credit Withholding Taxes in report currency.  """  
      self.Rpt3TotalClaimsWHTax:int = obj["Rpt3TotalClaimsWHTax"]
      """  Total Quote claims credit Withholding Taxes in report currency.  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.AddrList:str = obj["AddrList"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill To Customer Name.  """  
      self.ChangeDescription:str = obj["ChangeDescription"]
      """  Audit Log change description  """  
      self.CheckOffLabel1:str = obj["CheckOffLabel1"]
      self.CheckOffLabel2:str = obj["CheckOffLabel2"]
      self.CheckOffLabel3:str = obj["CheckOffLabel3"]
      self.CheckOffLabel4:str = obj["CheckOffLabel4"]
      self.CheckOffLabel5:str = obj["CheckOffLabel5"]
      self.Conclusion:str = obj["Conclusion"]
      self.ConName:str = obj["ConName"]
      """  Primary Contact Name  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrentStageDesc:str = obj["CurrentStageDesc"]
      """  Full Description of the CurrentStage field  """  
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      """  Value of the Customer.AllowOTS (customer allows one time shipment)  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DaysOpen:int = obj["DaysOpen"]
      """  Number of days Quote has been open  """  
      self.DiscountPercentCalc:int = obj["DiscountPercentCalc"]
      """   Display the true discount percent of the quote. It's calculated by dividing the sum Discount Percent over Gross Value.
DiscountPercentCalc = (DocTotalDiscount / TotalGrossValue) *100  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total tax in Doc currency. The sum of all the tax details for the quote.  """  
      self.DocTotalQuote:int = obj["DocTotalQuote"]
      """   Quote total after including taxes.
TotalQuote = TotalPotential +  TotalMiscAmt + TaxAmt  """  
      self.dspBTCustID:str = obj["dspBTCustID"]
      """  Used for screen display. If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.EmailAddress:str = obj["EmailAddress"]
      self.EnableOrderBasedDisc:bool = obj["EnableOrderBasedDisc"]
      """  Indicates if it's okay to enable OrderBased Pricing  """  
      self.ExpectedCsPct:int = obj["ExpectedCsPct"]
      """   The expected revenue potential percentage of all lines.
ExpectedCsPct = (TotalExpected / TotalPotential) * 100  """  
      self.FaxNum:str = obj["FaxNum"]
      self.FOB:str = obj["FOB"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.HasQuoteLines:bool = obj["HasQuoteLines"]
      """  Used by IU to disabled Currency Code  """  
      self.LogChanges:bool = obj["LogChanges"]
      """  EqSyst.LogChanges  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Order Date  """  
      self.OrderDiscount:int = obj["OrderDiscount"]
      self.OrderPONum:str = obj["OrderPONum"]
      self.OrderShipVia:str = obj["OrderShipVia"]
      self.OrderTerms:str = obj["OrderTerms"]
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      self.PhoneNum:str = obj["PhoneNum"]
      self.PreventQQChange:bool = obj["PreventQQChange"]
      self.RateLabel:str = obj["RateLabel"]
      """  Label for ExchangeRate  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt1TotalQuote:int = obj["Rpt1TotalQuote"]
      """   Quote total after including taxes.
TotalQuote = TotalPotential +  TotalMiscAmt + TaxAmt  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt2TotalQuote:int = obj["Rpt2TotalQuote"]
      """   Quote total after including taxes.
TotalQuote = TotalPotential +  TotalMiscAmt + TaxAmt  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt3TotalQuote:int = obj["Rpt3TotalQuote"]
      """   Quote total after including taxes.
TotalQuote = TotalPotential +  TotalMiscAmt + TaxAmt  """  
      self.SalesRepCode:str = obj["SalesRepCode"]
      self.SalesRepName:str = obj["SalesRepName"]
      self.ShipByDate:str = obj["ShipByDate"]
      self.ShipToAddrList:str = obj["ShipToAddrList"]
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax in base currency. The sum of all the tax details for the quote.  """  
      self.TotalQuote:int = obj["TotalQuote"]
      """   Quote total after including taxes.
TotalQuote = TotalPotential +  TotalMiscAmt + TaxAmt  """  
      self.WorseCsPctCalc:int = obj["WorseCsPctCalc"]
      """   Displays the calculated revenue potential percentage (worst case) for the quote line.
WorseCsPctCalc = (TotalWorstCs / TotalPotential) * 100  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers (CustID`CustomerName~CustID`CustomerName)  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Currency.CurrSymbol for currency "BASE"  """  
      self.BestCsPctCalc:int = obj["BestCsPctCalc"]
      """   Displays the calculated revenue potential percentage (best case) for the quote line.
BestCsPctCalc = (TotalBestCs / TotalPotential) * 100  """  
      self.BTAddressList:str = obj["BTAddressList"]
      """  Bill To Address List.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID of the bill to customer.  """  
      self.HasCreditLines:bool = obj["HasCreditLines"]
      """  Indicates if the order contains any credit type line  """  
      self.IsValidECC:bool = obj["IsValidECC"]
      """  Returns true if Customer.ECCType is B2C OR Dealer OR Distributor AND Customer.WebCustomer  """  
      self.EnableHDCaseNum:bool = obj["EnableHDCaseNum"]
      """  Flag indicating whether to enable CaseNum or not  """  
      self.UpdateAllowed:bool = obj["UpdateAllowed"]
      """  Indicates if the quote can be updated  """  
      self.AddressFormatted:str = obj["AddressFormatted"]
      """  Formatted address  """  
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  Ship To Address formatted  """  
      self.PromptTaxRegionCode:bool = obj["PromptTaxRegionCode"]
      """  Indicates if tax region is one of the field changes the user is asked about for propogating changes to lines  """  
      self.InactiveCustomer:bool = obj["InactiveCustomer"]
      """  Indicates a customer referenced on the quote is inactive.  """  
      self.UpdatePrimContact:bool = obj["UpdatePrimContact"]
      """  Update primary contact on save of the quote header  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.ActiveTaskTaskDescription:str = obj["ActiveTaskTaskDescription"]
      self.CurrencyDocumentDesc:str = obj["CurrencyDocumentDesc"]
      self.CurrencyCurrencyID:str = obj["CurrencyCurrencyID"]
      self.CurrencyCurrName:str = obj["CurrencyCurrName"]
      self.CurrencyCurrDesc:str = obj["CurrencyCurrDesc"]
      self.CurrencyCurrSymbol:str = obj["CurrencyCurrSymbol"]
      self.CurrencyBaseCurr:bool = obj["CurrencyBaseCurr"]
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerCheckDuplicatePO:bool = obj["CustomerCheckDuplicatePO"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.LastTaskTaskDescription:str = obj["LastTaskTaskDescription"]
      self.MktgCpgnCampDescription:str = obj["MktgCpgnCampDescription"]
      self.MktgEventEvntDescription:str = obj["MktgEventEvntDescription"]
      self.OTSCountryNumISOCode:str = obj["OTSCountryNumISOCode"]
      self.OTSCountryNumDescription:str = obj["OTSCountryNumDescription"]
      self.OTSCountryNumEUMember:bool = obj["OTSCountryNumEUMember"]
      self.OTSTaxRegionCodeDescription:str = obj["OTSTaxRegionCodeDescription"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.ReasonDescription:str = obj["ReasonDescription"]
      self.ResponseCallTypeDesc:str = obj["ResponseCallTypeDesc"]
      self.ShipToBTName:str = obj["ShipToBTName"]
      self.ShipToCustID:str = obj["ShipToCustID"]
      self.ShipToName:str = obj["ShipToName"]
      self.ShipToNumName:str = obj["ShipToNumName"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaWebDesc:str = obj["ShipViaWebDesc"]
      self.ShipViaDescription:str = obj["ShipViaDescription"]
      self.ShipViaInactive:bool = obj["ShipViaInactive"]
      self.TaskSetTaskSetDescription:str = obj["TaskSetTaskSetDescription"]
      self.TaskSetWorkflowType:str = obj["TaskSetWorkflowType"]
      self.TaxRegionTaxConnectCalc:bool = obj["TaxRegionTaxConnectCalc"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TermsDescription:str = obj["TermsDescription"]
      self.TerritoryTerritoryDesc:str = obj["TerritoryTerritoryDesc"]
      self.XbSystCalcQuoteTax:bool = obj["XbSystCalcQuoteTax"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RFQHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenRFQ:bool = obj["OpenRFQ"]
      """  Indicates if the RFQ is open or closed. This is set automatically when all the RFQItem records have been closed or can be set if the user voids the RFQ.  This field is not directly maintainable.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  Number that uniquely identifies the RFQ document.  """  
      self.RFQDate:str = obj["RFQDate"]
      """  Date that this RFQ was entered.  """  
      self.RFQDueDate:str = obj["RFQDueDate"]
      """  The date the vendor responses are due.  """  
      self.BuyerID:str = obj["BuyerID"]
      """  The ID that links to the Purchasing Agent master file.  """  
      self.CommentText:str = obj["CommentText"]
      """  Contains comments about the RFQ. These will be printed on the RFQ document.  """  
      self.ReadyToPrint:bool = obj["ReadyToPrint"]
      """  Indicates if the RFQ is to selected for printing during the Mass Print process.  """  
      self.RespondDate:str = obj["RespondDate"]
      """  Date the supplier is to respond by  """  
      self.DecisionDate:str = obj["DecisionDate"]
      """  Date the PO is planned to be awarded  """  
      self.PostToWeb:bool = obj["PostToWeb"]
      """  Indicates the Supplier will respond via Suppliers workbench  """  
      self.PostDate:str = obj["PostDate"]
      """  Date Buyer posted the RFQ  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbRFQNum:int = obj["GlbRFQNum"]
      """  Global RFQ identifier.  Used in Consolidated Purchasing.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.UOMClassID:str = obj["UOMClassID"]
      """  UOM Class ID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.WebVendorExists:bool = obj["WebVendorExists"]
      self.BitFlag:int = obj["BitFlag"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RFQItemRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenItem:bool = obj["OpenItem"]
      """  Indicates if this line item is Open/Closed.  Set to "Closed" as when there are no longer any open RFQDtl records. This can also be closed when the user voids the RFQItem.  """  
      self.RFQNum:int = obj["RFQNum"]
      """  RFQ number  that the item is linked to.  """  
      self.RFQLine:int = obj["RFQLine"]
      """  The line number of this detail record on the RFQ. This number uniquely identifies the record within the RFQ. The number is not directly maintainable, it's assigned by the system when records are created.  """  
      self.LineDesc:str = obj["LineDesc"]
      """   Description of line item.
Defaults from JobOper, JobMtl or Part depending on the reference.  """  
      self.IUM:str = obj["IUM"]
      """  Issue (our) unit of measure.  """  
      self.PartNum:str = obj["PartNum"]
      """  OUR internal part number for this item.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  OUR revision number of the OUR part.  An optional field. Defaults from the most current  PartRev.RevisionNum.  """  
      self.CommentText:str = obj["CommentText"]
      """  Contains comments about the item. These will be printed on the RFQ. Defaults from the Job’s Material Purchasing comments.  """  
      self.ClassID:str = obj["ClassID"]
      """  The foreign key to the PartClass file.  May be blank, if entered must be valid in PartClass file.  Defaulted from Part.ClassID. The PartClass is used in determining a default G/L expense account.  """  
      self.JobNum:str = obj["JobNum"]
      """  Related job number.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Related Customer QuoteNum.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  The QuoteLine that record is related to.  """  
      self.ItemType:str = obj["ItemType"]
      """  Mtl = Material, Sub = Subcontract  """  
      self.OpCode:str = obj["OpCode"]
      """   Operation Code - used to identify specific subcontracting operation that is needs to be quoted.
This field can be blank (raw materials) or must be valid in the OpMaster (subcontracts service).  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this rfq is associated with.  """  
      self.JobSeq:int = obj["JobSeq"]
      """  Job Seq of the requirement. Not maintainable.  """  
      self.RFQVendQuotes:int = obj["RFQVendQuotes"]
      """  The number of vendor quotes that are required for this rfq line.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbRFQNum:str = obj["GlbRFQNum"]
      """  Global RFQ identifier.  Used in Consolidated Purchasing.  """  
      self.GlbRFQLine:int = obj["GlbRFQLine"]
      """  Global RFQ Line identifier.  Used in Consolidated Purchasing.  """  
      self.RequiredQty:int = obj["RequiredQty"]
      """  Required Quantity from the source record (JobMtl/JobOper/QuoteMtl/QuoteOpr) used to create PORel.  Not user updatable.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if inspection is required when items are received.  Used when create PODetail records  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  The warehouse that the material is allocated against.  """  
      self.SrcVendQuotes:int = obj["SrcVendQuotes"]
      """  Number of quotes required as indicated by the source file  """  
      self.ValidSrc:bool = obj["ValidSrc"]
      """  Indicates if the Source file (JobMtl,QuoteMtl,...) is a valid source record  """  
      self.PUM:str = obj["PUM"]
      """  The Purchase Unit of Measure  """  
      self.PurchasingFactor:int = obj["PurchasingFactor"]
      """  Used to capture the purchasing factor.  """  
      self.PurchasingFactorDirection:str = obj["PurchasingFactorDirection"]
      """  Indicates how Purchasing Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.ComplianceMsg:str = obj["ComplianceMsg"]
      """  Displays the cause why the item is not compliant.  """  
      self.UOMClassID:str = obj["UOMClassID"]
      """  UOM Class ID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ReqNum:int = obj["ReqNum"]
      """  Requisition number that the detail line is linked to.  """  
      self.ReqLine:int = obj["ReqLine"]
      """  The line number of detail record on the requisition.  This number uniquely identifies the record within the Requisition number.  The number is not directly maintainable; it's assigned by the system when records are created.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.NotCompliant:bool = obj["NotCompliant"]
      """  Indicates if the item on the line is not compliant on its source.  """  
      self.Source:str = obj["Source"]
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.AttributeSetIDShortDescription:str = obj["AttributeSetIDShortDescription"]
      self.AttributeSetIDDescription:str = obj["AttributeSetIDDescription"]
      self.ClassDescription:str = obj["ClassDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OpCodeOpDesc:str = obj["OpCodeOpDesc"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.QuoteLineLineDesc:str = obj["QuoteLineLineDesc"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RMADtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenRMA:bool = obj["OpenRMA"]
      """  Mirror image of RMAHead.OpenRMA.  """  
      self.OpenDtl:bool = obj["OpenDtl"]
      """  Indicates the Open/Closed status of the RMADtl.  This gets set to closed when there are no pending actions to be taken on related receipts.  """  
      self.RMANum:int = obj["RMANum"]
      """  Return Authorization Number. Used to relate RMADtl to RMAHead.  """  
      self.RMALine:int = obj["RMALine"]
      """  An integer that uniquely identifies a detail record within a Return Authorization document. Assigned by the system. Generated by reading last related RMADtl record and use its RALine 1.  """  
      self.OrderNum:int = obj["OrderNum"]
      """   The sales order number that the Return detail is related to.
Must be an order of the customer identified in the RMAHead.  When entered the OrderLine is then mandatory.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Sales order line that the Return detail is related to.  If entered it must be valid in the OrderDtl file. If entered the OrderDtl supplies the Part Number, LineDesc, IUM . . .  """  
      self.ReturnReasonCode:str = obj["ReturnReasonCode"]
      """  Reason code that links this return detail  to a Reason master record, which indicates why the item is being returned  and allows the system the ability to recap scrap by a code for analysis purposes. Uses Reason.ReasonType = "C" (customer returns) to find Reason master.  """  
      self.Note:str = obj["Note"]
      """   Notes the about the RMA detail.
Used to key in customer comments, explanation of why item is returned, inspection results, Order/Mfg instructions, and perhaps information concerning Billing.  """  
      self.PartNum:str = obj["PartNum"]
      """  The user's Internal Part number used to identify line item part. It cannot  be blank. It does NOT have to valid in the Part master.  Defaulted from the OrderDtl if available.  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Item description. Defaults for OrderDtl if available, else from  Part master if available.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision.  Default OrderDtl if available, else from finding the PartRev that is most current as of entry date.  """  
      self.ReturnQty:int = obj["ReturnQty"]
      """  Quantity that is to be returned  """  
      self.ReturnQtyUOM:str = obj["ReturnQtyUOM"]
      """  Unit Of Measure of the  ReturnQty.  """  
      self.RefInvoiceNum:int = obj["RefInvoiceNum"]
      """  Reference Invoice number used for finding Tax Category  """  
      self.RefInvoiceLine:int = obj["RefInvoiceLine"]
      """  Reference invoice line - Used to obtain the correct tax category  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The Ship to number of the related header contact.  """  
      self.ConNum:int = obj["ConNum"]
      """  The Contact Number of the related header contact  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the system internal customer number used to relate this record to the customer master.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The order release number that the RMA line was created from.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Reference AR Invoice Number  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Reference AR Invoice Line Number  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this material is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  A sequence number that uniquely defines the Material (JobMtl) record within a specific Job/Assembly.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ECCComment:str = obj["ECCComment"]
      """  ECC RMA Comment  """  
      self.ECCRMANum:str = obj["ECCRMANum"]
      """  ECC RMA Num  """  
      self.ECCRMALine:int = obj["ECCRMALine"]
      """  ECC RMA Line  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.NumberOfPieces:int = obj["NumberOfPieces"]
      """  Number of pieces for this attribute set.  """  
      self.CNDeclarationBillLine:int = obj["CNDeclarationBillLine"]
      """  CNDeclarationBillLine  """  
      self.ConsolidateLines:bool = obj["ConsolidateLines"]
      """  Indicates that the line of the invoice has multiple packs consolidated. Details of the pack should be reviewied in InvcDtlPack table  """  
      self.ConsolidateOneRelease:bool = obj["ConsolidateOneRelease"]
      """  Indicates that the invoice line has consolidated shipment lines that are related to the same release of the sales order  """  
      self.CustomerContactEMailAddress:str = obj["CustomerContactEMailAddress"]
      self.CustomerName:str = obj["CustomerName"]
      """  The full customer's name.  """  
      self.CustomerShipToName:str = obj["CustomerShipToName"]
      """  The name for the ship to location.  """  
      self.DebitMemoRef:str = obj["DebitMemoRef"]
      """  From RMAHead.DebitMemoRef, used by Customer Tracker  """  
      self.EnableAddCreditMemo:bool = obj["EnableAddCreditMemo"]
      """  If company parameter 'Allow Multiple Credit Invoices' is off and there is a least one credit memo then another credit memo adding is not allowed.  """  
      self.EnableDelete:bool = obj["EnableDelete"]
      self.EnableSN:bool = obj["EnableSN"]
      """  Flag to determine if Serial Numbers are required for this transaction.  """  
      self.EnableUpdate:bool = obj["EnableUpdate"]
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  Determines if the RMA is synchronized with Epicor FSA application.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceType:str = obj["FSAServiceType"]
      """  Serivce Type  """  
      self.FSATechnician:str = obj["FSATechnician"]
      """  Technician  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  From RMAHead.HDCaseNum, used by Customer Tracker  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      self.LocalizationFlag:str = obj["LocalizationFlag"]
      self.RMADate:str = obj["RMADate"]
      """  Set from RMAHead.RMADate, used by Customer Tracker  """  
      self.RMARcptExists:bool = obj["RMARcptExists"]
      self.ShipToCustID:str = obj["ShipToCustID"]
      """  Customer Id of the third-party Ship To  """  
      self.ShipToName:str = obj["ShipToName"]
      """  The name for the ship to location.  """  
      self.CustomerContactName:str = obj["CustomerContactName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      """  The customer ID.  """  
      self.CNDeclarationBill:str = obj["CNDeclarationBill"]
      self.BitFlag:int = obj["BitFlag"]
      self.AttrValueSetDescription:str = obj["AttrValueSetDescription"]
      self.AttrValueSetShortDescription:str = obj["AttrValueSetShortDescription"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.ReasonDescription:str = obj["ReasonDescription"]
      self.ReturnReasonCodeDescription:str = obj["ReturnReasonCodeDescription"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RMAHeadRow:
   def __init__(self, obj):
      self.OpenRMA:bool = obj["OpenRMA"]
      """  Indicates if this RA is in an "open" status.  The user can toggle the setting of this field in header maintenance. It is also set automatically as the details are "Closed/Opened".  If there are no RMADtl records, then it is still considered as "open".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RMANum:int = obj["RMANum"]
      """  When creating a new Return Authorization the user is prompted for a Return number. If the field is zero , the next available # is assigned by the system. The system generates a number by finding the last CRAHead on file and uses its RANum + 1.  """  
      self.RMADate:str = obj["RMADate"]
      """  Date of the Return Material Authorization.  Default as System date.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the system internal customer number used to relate this record to the customer master.  """  
      self.DebitMemoRef:str = obj["DebitMemoRef"]
      """  Reference to a customers accounts payable debit memo.  """  
      self.CLCallNum:str = obj["CLCallNum"]
      """  The Clientele call number that is related to this RMA.  """  
      self.XRefRMANumber:str = obj["XRefRMANumber"]
      """  Cross reference RMA number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this RMA.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The Ship to number of the related header contact.  """  
      self.ConNum:int = obj["ConNum"]
      """  The Contact Number of the related header contact  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Ship To info is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the One Time ShipTo tax region for purposes of Sales Tax calculations.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipping Country Number  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Reference AR Invoice Number  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document Type  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number of the record.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.RetInvoiceNum:str = obj["RetInvoiceNum"]
      """  The Return Invoice Number for the RMA (CSF - Turkey)  """  
      self.ECCRMANum:str = obj["ECCRMANum"]
      """  ECC RMA Number  """  
      self.ECCCustRef:str = obj["ECCCustRef"]
      """  Customer Web Reference to RMA.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  DocumentPrinted  """  
      self.RMAComment:str = obj["RMAComment"]
      """  Comments about the RMA overall  """  
      self.WebComment:str = obj["WebComment"]
      """  Web Comments about the RMA overall  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  EpicorFSA  """  
      self.CNDeclarationBill:str = obj["CNDeclarationBill"]
      """  Declaration Bill  """  
      self.CNBonded:bool = obj["CNBonded"]
      """  CNBonded  """  
      self.BillToCustomerName:str = obj["BillToCustomerName"]
      """  Bil to customer name  """  
      self.BTCustName:str = obj["BTCustName"]
      """  Bill To Customer Name  """  
      self.CustomerContactEMailAddress:str = obj["CustomerContactEMailAddress"]
      self.CustomerContactName:str = obj["CustomerContactName"]
      self.CustomerFSA:bool = obj["CustomerFSA"]
      """  Column to indicate if the customer set for the RMA is sync'd to FSA.  """  
      self.EnableDelete:bool = obj["EnableDelete"]
      self.EnableUpdate:bool = obj["EnableUpdate"]
      self.FromFSA:bool = obj["FromFSA"]
      """  Column to indicate if the RMA was created on FSA.  """  
      self.WebAddressList:str = obj["WebAddressList"]
      """  Web address list for the contact who initiated the RMA.  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BTCustNumInactive:bool = obj["BTCustNumInactive"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerInactive:bool = obj["CustomerInactive"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ReasonRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  Indicates the Type of reason. Can be "S" - Scrap, "R" - Rework, "M" - Inventory Adjustments, "A" - RMA, "D" - DMR, "Q" - Quality Assurance "C" - Service Calls "W" Win CRM "L" - Loss CRM, "T" Task CRM, "H" - Part On Hold, "E" ECO Task, "H" HelpDesk, "C" Service Call, "U" Course Result, ""F" Field Service Contract.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  Descriptive code assigned by user which uniquely identifies a reason code master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.Description:str = obj["Description"]
      """  Full description of Reason... used on displays/reports.  """  
      self.DMRRejOpr:bool = obj["DMRRejOpr"]
      """  A flag which indicates if this is a valid reason to be used when rejecting an operaion when processing DMRs.  """  
      self.DMRRejMtl:bool = obj["DMRRejMtl"]
      """  A flag which indicates if this is a valid reason to be used when rejecting material when processing DMRs.  """  
      self.DMRRejSub:bool = obj["DMRRejSub"]
      """  A flag which indicates if this is a valid reason to be used when rejecting a subcontract operation when processing DMRs.  """  
      self.DMRRejInv:bool = obj["DMRRejInv"]
      """  A flag which indicates if this is a valid reason to be used when rejecting inventory when processing DMRs.  """  
      self.DMRAcceptOpr:bool = obj["DMRAcceptOpr"]
      """  A flag which indicates if this is a valid reason to be used when accepting an operaion when processing DMRs.  """  
      self.DMRAcceptMtl:bool = obj["DMRAcceptMtl"]
      """  A flag which indicates if this is a valid reason to be used when accepting material when processing DMRs.  """  
      self.DMRAcceptSub:bool = obj["DMRAcceptSub"]
      """  A flag which indicates if this is a valid reason to be used when accepting a subcontract operation when processing DMRs.  """  
      self.DMRAcceptInv:bool = obj["DMRAcceptInv"]
      """  A flag which indicates if this is a valid reason to be used when accepting inventory when processing DMRs.  """  
      self.InspFailOpr:bool = obj["InspFailOpr"]
      """  A flag which indicates if this is a valid reason to be used when failing an operaion during inspection processing.  """  
      self.InspFailMtl:bool = obj["InspFailMtl"]
      """  A flag which indicates if this is a valid reason to be used when failing a material during inspection processing.  """  
      self.InspFailSub:bool = obj["InspFailSub"]
      """  A flag which indicates if this is a valid reason to be used when failing a subcontract operation during inspection processing.  """  
      self.InspFailInv:bool = obj["InspFailInv"]
      """  A flag which indicates if this is a valid reason to be used when failing an inventory item during inspection processing.  """  
      self.Scrap:bool = obj["Scrap"]
      """  A flag which indicates if this is a valid reason to be used for scrap.  """  
      self.NonConfOpr:bool = obj["NonConfOpr"]
      """  A flag which indicates if this is a valid reason to be used for Nonconformance processing of an operaion.  """  
      self.NonConfMtl:bool = obj["NonConfMtl"]
      """  A flag which indicates if this is a valid reason to be used for Nonconformance processing of a material.  """  
      self.NonConfSub:bool = obj["NonConfSub"]
      """  A flag which indicates if this is a valid reason to be used for Nonconformance processing of a subcontract operation.  """  
      self.NonConfOther:bool = obj["NonConfOther"]
      """  A flag which indicates if this is a valid reason to be used for Nonconformance processing of something other than an Operation, Material or Subcontract Operation.  """  
      self.QACause:bool = obj["QACause"]
      """  A flag which indicates if this is a valid reason for Quality Assurance cause.  """  
      self.QACorrectiveAct:bool = obj["QACorrectiveAct"]
      """  A flag which indicates if this is a valid reason for Quality Assurance corrective action.  """  
      self.InvAdjCountDiscrepancy:bool = obj["InvAdjCountDiscrepancy"]
      """  A flag which indicates if this is a valid reason for cycle counting and physical inventory count discrepancy reason. Only valid for Inventory Adjustment reason type.  """  
      self.Passed:bool = obj["Passed"]
      """  Only valid for Course Result reason type.  """  
      self.GlobalReason:bool = obj["GlobalReason"]
      """  Marks this Reason as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.JDFWorkType:str = obj["JDFWorkType"]
      """  JDFWorkType  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.NonConfInv:bool = obj["NonConfInv"]
      """  NonConfInv  """  
      self.ExternalMESSyncRequired:bool = obj["ExternalMESSyncRequired"]
      """  This field determines if the record needs to be synchronized to the Machine MES. Changes to the record will automatically set the value to true.  """  
      self.ExternalMESLastSync:str = obj["ExternalMESLastSync"]
      """  The date and time the record was last synched to Machine MES.  The field is maintained by the Export Mattec process.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ShipToRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CustNum:int = obj["CustNum"]
      """  The Customer.CustNum value of the customer that the record is related to.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The ID assigned by the user which makes this record unique for the customer.  When a customer is created a ShipTo record is automatically created by the system for that customer with a ShipToNum equal to NULL.  """  
      self.Name:str = obj["Name"]
      """  Name of the ShipTo. When creating new records the Customer.Name is used as a default.  """  
      self.Address1:str = obj["Address1"]
      """  The first line of the ShipTo address.  """  
      self.Address2:str = obj["Address2"]
      """  The second line of the ShipTo address.  """  
      self.Address3:str = obj["Address3"]
      """  The third line of the ShipTo address.  """  
      self.City:str = obj["City"]
      """  The city portion of the ShipTo address.  """  
      self.State:str = obj["State"]
      """  The state or province portion of the ShipTo address.  """  
      self.ZIP:str = obj["ZIP"]
      """  The zip or postal code portion of the ShipTo address.  """  
      self.Country:str = obj["Country"]
      """  The country portion of the ShipTo address.  """  
      self.ResaleID:str = obj["ResaleID"]
      """  The State Tax Identification Number. Used in Order Entry and prints on Sales Acknowledgements.  """  
      self.SalesRepCode:str = obj["SalesRepCode"]
      """  The SalesRep.SalesRepCode value of the default salesperson for the customer. Used as a default in Order Entry and Invoice entry. The SalesRep from the customer master is used as an initial default when creating new ship to.  """  
      self.TerritoryID:str = obj["TerritoryID"]
      """  The SalesTer.TerritoryID value of the territory the customer is assigned to.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  The ShipVia.ShipViaCode value of the default ShipVia assigned to the customer. Used as a default in Order Entry, Shipping and Invoicing.  The shipvia from the customer record for this shipto is used as the initial default when creating new ShipTo records.  """  
      self.PrimSCon:int = obj["PrimSCon"]
      """  The CustCnt.ConNum of the default shipping contact for the ShipTo location. The primary shipping contact is used as a default in the shipping process.  """  
      self.FaxNum:str = obj["FaxNum"]
      """  The fax number for the ShipTo location. isplayed in Order entry when no shipping contact is given for or when contact has a blank phone number.  """  
      self.PhoneNum:str = obj["PhoneNum"]
      """  The business phone number for the ShipTo location. Displayed in Order entry when no shipping contact is given for or when contact has a blank phone number.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Determines whether or not the ShipTo location is normally exempt from sales tax. Used as a default in invoice entry.  If the field is non-blank it is considered exempt.   This code is totally user definable and no validation is required.  """  
      self.EDIShipNum:str = obj["EDIShipNum"]
      """  A mutually agreed upon value that links a customer's EDI shipto record (an N1 / ST) to the Manufacturing System DB ShipTo record.  """  
      self.CountryNum:int = obj["CountryNum"]
      """  The Country.CountryNum value of the country selected in the ShipTo.Country field.  """  
      self.LangNameID:str = obj["LangNameID"]
      """  The LangName.LangNameID value of the default Language assigned to the ShipTo location. This controls which language will be selected when extracting part descriptions from PartLangDesc table.  """  
      self.BorderCrossing:str = obj["BorderCrossing"]
      """  Area/city code from where goods cross the border. This field is intended for Intrastat reporting. The field can be blank to indicate the value from the Customer table. This field is only visible if ISSyst.EnableHarbour is set.  """  
      self.FormatStr:str = obj["FormatStr"]
      """  Optional custom address format for the ShipTo location.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the customer's tax region for purposes of Sales Tax calculations.  """  
      self.EMailAddress:str = obj["EMailAddress"]
      """  The email address of the ShipTo location.  """  
      self.TerritorySelect:str = obj["TerritorySelect"]
      """   Determines how the ShipTo location should be assigned to a territory. There are 3 methods for Territory assignment in Ship-to:

Sync - Keep the ShipTo territory synchronized with the territory on the
       main customer record. (ShipTo.TerritoryID = Customer.TerritoryID)
Syst - Let the system (Get Territory) determine the territory to assign         to the ShipTo based on territory boundaries.
Lock - Check this method after assigning the territory manually to 
       prevent the system from attempting to reassign the territory.  """  
      self.PendingTerritoryID:str = obj["PendingTerritoryID"]
      """  The pending sales territory that the customer will be assigned to based on changes to the territory boundaries.  This functionality is only available with the CRM module.  """  
      self.CreatedByEDI:bool = obj["CreatedByEDI"]
      """  Determines whether or not the ShipTo record was created by an EDI transaction.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  Unique identifier of the ShipTo from an external General Ledger interface such as the EuroFinancial integration.  """  
      self.TaxAuthorityCode:str = obj["TaxAuthorityCode"]
      """  The TaxAuthorityCd.TaxAuthorityCode value of the Tax Authority assigned to this ShipTo location.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disable this record from receiving global updates.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.DemandDeliveryDays:int = obj["DemandDeliveryDays"]
      """  Days to use in calculating the Order Detail Ship By date from the incoming need by date.  """  
      self.DemandDateType:str = obj["DemandDateType"]
      """   Indicates incoming date type.  Values are:
S - Shipping Date
N - Need By Date  """  
      self.DemandAddLeadTime:int = obj["DemandAddLeadTime"]
      """  The number of days from today to give a warning when adding a new order release record from an incoming shipping schedule.  """  
      self.DemandAddAction:str = obj["DemandAddAction"]
      """  Indicates what type of action to take if the add lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandChangeLeadTime:int = obj["DemandChangeLeadTime"]
      """  The number of days from today to give a warning when changing an order release record from an incoming shipping schedule.  This does not include changes to quantity or dates.  """  
      self.DemandChangeAction:str = obj["DemandChangeAction"]
      """  Indicates what type of action to take if the change lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandCancelLeadTime:int = obj["DemandCancelLeadTime"]
      """  The number of days from today to give a warning when canceling an order release record from an incoming shipping schedule.  """  
      self.DemandCancelAction:str = obj["DemandCancelAction"]
      """  Indicates what type of action to take if the cancel lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandNewLineLeadTime:int = obj["DemandNewLineLeadTime"]
      """  The number of days from today to give a warning when adding a new order line record from an incoming shipping schedule.  """  
      self.DemandNewLineAction:str = obj["DemandNewLineAction"]
      """  Indicates what type of action to take if the new line lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandQtyChangeLeadTime:int = obj["DemandQtyChangeLeadTime"]
      """  The number of days from today to give a warning when changing the quantity on an order release record from an incoming shipping schedule.  """  
      self.DemandQtyChangeAction:str = obj["DemandQtyChangeAction"]
      """  Indicates what type of action to take if the quantity change lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.DemandChangeDateLeadTime:int = obj["DemandChangeDateLeadTime"]
      """  The number of days from today to give a warning when changing the date on an order release record from an incoming shipping schedule.  """  
      self.DemandChangeDateAction:str = obj["DemandChangeDateAction"]
      """  Indicates what type of action to take if the change date lead time is breeched.  Options are B (reject the change) or W (warning - alert that the lead time has been breeched but allow the record to be accepted).  """  
      self.TradingPartnerName:str = obj["TradingPartnerName"]
      """  The trading partner name.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.PeriodicityCode:int = obj["PeriodicityCode"]
      """  Periodicity Code.  Must be a valid code in the Periodicity table.  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Added for international shipping, Is a commercial invoice required  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Added for international shipping. Shipper's Export Declaration required  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  For International shipping.  Certificate of Orgin required.  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  For International shipping.  Shipper's Letter of Instruction.  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.HazardousShipment:bool = obj["HazardousShipment"]
      """  International Shipping - HazardousShipment  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the customer values will be used if overriden else the Site values  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  Is this an International shipment  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the customer values will be used if overriden else the Site values  """  
      self.DemandUseCustomerValues:bool = obj["DemandUseCustomerValues"]
      """  Indicates if the demand fields from the customer should be used.  """  
      self.TaxRegReason:str = obj["TaxRegReason"]
      """  Tax Payer Registration Reason Code  """  
      self.EarlyBuffer:int = obj["EarlyBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.OrgRegCode:str = obj["OrgRegCode"]
      """  Organization Registration Code  """  
      self.LateBuffer:int = obj["LateBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.DemandUnitPriceDiff:bool = obj["DemandUnitPriceDiff"]
      """  Indicates if the unit price between the demand and the contract should be validated.  If this flag is checked, and the prices are different, when the demand is accepted a record will be written to the DemandLog table.  """  
      self.DemandUnitPriceDiffAction:str = obj["DemandUnitPriceDiffAction"]
      """  Indicates what type of action to take if the unit price between the demand and the contract is different.  Options are B (reject the change) or W (warning - alert that the unit price is different but allow the record to be accepted).  """  
      self.ExcFromVal:bool = obj["ExcFromVal"]
      """  A flag that indicates whether this address should be validated by the tax service.  """  
      self.AddressVal:bool = obj["AddressVal"]
      """  A flag indicating that an address has already been validated. This helps improve the performance of the bulk address validation process by allowing address that have already been validated to be skipped. This flag is set anytime a successful validation is performed, either by the bulk address validation or validation from the Customer form.  """  
      self.DemandCheckForPart:bool = obj["DemandCheckForPart"]
      """  Check for the part in the Part master.  """  
      self.DemandCheckForPartAction:str = obj["DemandCheckForPartAction"]
      """  Indicates what type of action to take if the Check for Part options is selected and the part is not in the part master file.  Options are B (reject the change) or W (warning - alert that the part is not in the part master but allow the record to be accepted).  """  
      self.FFID:str = obj["FFID"]
      """  International Shipping. Frieght Forwarder ID  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  International Shipping. The first line of the Frieght Forwarder main address.  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  International Shipping. The second line of the Frieght Forwarder main address.  """  
      self.FFCity:str = obj["FFCity"]
      """  Shipping, The city portion of the Frieght Forwarder main address.  """  
      self.FFState:str = obj["FFState"]
      """  International Shipping. The state or province portion of the shipment Frieght Forwarder main address.  """  
      self.FFZip:str = obj["FFZip"]
      """  International Shipping. The zip or postal code portion of the shipping Frieght Forwarder main address.  """  
      self.FFCountry:str = obj["FFCountry"]
      """  International shipping. The country of the Frieght Forwarder .  """  
      self.FFContact:str = obj["FFContact"]
      """  International Shipping. Frieght Forwarder Contact  """  
      self.FFCompName:str = obj["FFCompName"]
      """  International Shipping. Frieght Forwarder company name  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  International Shipping. Frieght Forwarder Phone number  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Individual Pack IDs  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder Third address line  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Additional Handling flag  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Non Standard Packaging  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantum View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View From Name  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantum View Memo  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Freight Forwarder Country portion of the address  """  
      self.ETCAddrChg:bool = obj["ETCAddrChg"]
      """  Used to determine if an address changed because of the tax integration.  If true, the tax integration changed the address.  """  
      self.IsAlternate:bool = obj["IsAlternate"]
      """  Indicates if this is a alternate ShipTo. An alternate is a Shipto that is valid for this customer, but is defined/maintained by the "master" customer. See ShipTo.MasterCustNum/MasterShiptoNum.  """  
      self.MasterCustNum:int = obj["MasterCustNum"]
      """  Pertains to Alternate Shipto (IsAlternate). Contains the CustNum of the Shipto record that is the "Master". Changes made to the Master, are replicated to the alternates.  """  
      self.MasterShipToNum:str = obj["MasterShipToNum"]
      """  Pertains to Alternate Shipto (IsAlternate). Contains the ShipToNum of the Shipto record that is the "Master". Changes made to the Master, are replicated to the alternates.  """  
      self.DemandCheckForRev:bool = obj["DemandCheckForRev"]
      """  Check for Revision  """  
      self.DemandCheckForRevAction:str = obj["DemandCheckForRevAction"]
      """  Check for Revision Action  """  
      self.DemandCheckPartialShip:bool = obj["DemandCheckPartialShip"]
      """  Flag for checking partial Shipment for Demand Entry.  """  
      self.DemandCheckShipAction:str = obj["DemandCheckShipAction"]
      """  Check Partial Shipments Action: B =Stop  and W = Warning  """  
      self.DemandCloseRejSkd:bool = obj["DemandCloseRejSkd"]
      """  Define if at the moment of processing a demand the process should also close those rejected schedules that remain at demand entry  """  
      self.DemandPricing:str = obj["DemandPricing"]
      """  Defines if Internal Pricing or Customer Pricing will be used for checking price differences  """  
      self.PriceTolerance:int = obj["PriceTolerance"]
      """  Defines the tolerance for price difference validations  """  
      self.CheckDateCapPromise:bool = obj["CheckDateCapPromise"]
      """  If this flags is turned on then Demand CTP will automatically be executed as a part of the demand to order process.  """  
      self.CheckConfirmCapPromise:bool = obj["CheckConfirmCapPromise"]
      """  Confirm or not the Capable to Promise jobs from Demand Entry  """  
      self.CheckUpdateCapPromise:bool = obj["CheckUpdateCapPromise"]
      """  If checked, Updates the date in Demand Entry  """  
      self.DemandCapPromiseDate:str = obj["DemandCapPromiseDate"]
      """  This field will define the dates that will be validated as a part of the demand to order process. The valid values for this combo will be:  Need By (N), Ship By (S) and Both (B)  """  
      self.DemandCapPromiseAction:str = obj["DemandCapPromiseAction"]
      """  The value on this field will define the action to be taken when validating CTP. The valid values for this combo box will be: Warning (W) and Stop (S)  """  
      self.DemandCapPromiseUpdate:str = obj["DemandCapPromiseUpdate"]
      """   This field will define the dates that will be updated as a part of the demand to order process. The valid options will be:
Need By (N), Ship By (S) and Both  (B) NOTE .-In all the cases above the update of date will only be done if the CTP dates are beyond the dates on the file.  """  
      self.OTSmartString:bool = obj["OTSmartString"]
      """  When set to TRUE the smart string functionality will only be processed when the incoming demand is new. After it has been processed and saved, if a retransmission is sent the smart string values will be ignored.  """  
      self.LegalName:str = obj["LegalName"]
      """  Full Legal name  """  
      self.DemandCheckConfig:bool = obj["DemandCheckConfig"]
      """  If true then demand will be rejected when one or more demand lines are not configured properly. Applies only to Configurable parts.  """  
      self.DemandCheckCfgAction:str = obj["DemandCheckCfgAction"]
      """  Indicates the action to be taken if configuration values have not been entered for one or more demand lines.  """  
      self.WIWebShipTo:bool = obj["WIWebShipTo"]
      """  WIWebShipTo  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.AGApartment:str = obj["AGApartment"]
      """  AGApartment  """  
      self.AGExtraStreetNumber:str = obj["AGExtraStreetNumber"]
      """  AGExtraStreetNumber  """  
      self.AGFloor:str = obj["AGFloor"]
      """  AGFloor  """  
      self.AGGrossIncomeTaxID:str = obj["AGGrossIncomeTaxID"]
      """  AGGrossIncomeTaxID  """  
      self.AGLocationCode:str = obj["AGLocationCode"]
      """  AGLocationCode  """  
      self.AGNeighborhood:str = obj["AGNeighborhood"]
      """  AGNeighborhood  """  
      self.AGProvinceCode:str = obj["AGProvinceCode"]
      """  AGProvinceCode  """  
      self.AGStreet:str = obj["AGStreet"]
      """  AGStreet  """  
      self.AGStreetNumber:str = obj["AGStreetNumber"]
      """  AGStreetNumber  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.DemandCheckForRunOutPart:bool = obj["DemandCheckForRunOutPart"]
      """  Check if the part is a run out part.  """  
      self.DemandCheckForRunOutPartAction:str = obj["DemandCheckForRunOutPartAction"]
      """  Indicates what type of action to take if the Check for Run Out Part option is selected and the part is marked as a run out part.  Options are B (reject the change) or W (warning - alert that the part is marked as run out but allow the record to be accepted).  """  
      self.INExciseRegNumber:str = obj["INExciseRegNumber"]
      """  INExciseRegNumber  """  
      self.INVATNumber:str = obj["INVATNumber"]
      """  INVATNumber  """  
      self.INSTRegistration:str = obj["INSTRegistration"]
      """  INSTRegistration  """  
      self.MXCURP:str = obj["MXCURP"]
      """  MXCURP  """  
      self.MXMunicipio:str = obj["MXMunicipio"]
      """  MXMunicipio  """  
      self.MXFederalID:str = obj["MXFederalID"]
      """  MXFederalID  """  
      self.INTaxRegistrationID:str = obj["INTaxRegistrationID"]
      """  INTaxRegistrationID  """  
      self.PEUBIGEOCode:str = obj["PEUBIGEOCode"]
      """  Geographical Location Code  """  
      self.EORINumber:str = obj["EORINumber"]
      """  EORI Number  """  
      self.TaxValidationStatus:int = obj["TaxValidationStatus"]
      """  Tax ID Validation Status: Not Validated – 0, Valid – 1, Invalid – 2.  """  
      self.TaxValidationDate:str = obj["TaxValidationDate"]
      """  Tax Validation Date  """  
      self.HMRCTaxValidationLog:str = obj["HMRCTaxValidationLog"]
      """  HMRCTaxValidationLog  """  
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if the record is inactive.  """  
      self.FSMRegionCode:str = obj["FSMRegionCode"]
      """  FSMRegionCode  """  
      self.FSMArea:str = obj["FSMArea"]
      """  FSMArea  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.ContactName:str = obj["ContactName"]
      """  Used for ContactTracker.  This is needed so the UI can relate the Contact Tracker tables together.  """  
      self.DspFormatStr:str = obj["DspFormatStr"]
      """  Display Format String  """  
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if ShipTo is Global (Master or Linked)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany, GlbCustNum and GlbShipto that is linking to this shipto  """  
      self.IntegrationFlag:bool = obj["IntegrationFlag"]
      """  Indicates Integration with financial package (like EuroFin)  """  
      self.IntRunChangeCountry:bool = obj["IntRunChangeCountry"]
      """  Flag used for integrations whether to run the on change country logic.  """  
      self.PeriodicityDesc:str = obj["PeriodicityDesc"]
      self.PeriodicityList:str = obj["PeriodicityList"]
      """  List of available Periodicity values  """  
      self.PrimaryShipTo:bool = obj["PrimaryShipTo"]
      """  Used to indicate if primary shipto.  Updates Customer.ShipToNum field  """  
      self.SalesTaxID:str = obj["SalesTaxID"]
      """  Sales Tax ID  """  
      self.ServiceTaxID:str = obj["ServiceTaxID"]
      """  Service Tax ID  """  
      self.TerritorySelectDescription:str = obj["TerritorySelectDescription"]
      self.TerrSelectFlag:str = obj["TerrSelectFlag"]
      """  Use this field to display/update; replaces TerritorySelect  """  
      self.AddrList:str = obj["AddrList"]
      """  Address in formatted delimited list  """  
      self.LanguageDescription:str = obj["LanguageDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.AGLocationDescription:str = obj["AGLocationDescription"]
      self.AGProvinceDescription:str = obj["AGProvinceDescription"]
      self.CountryISOCode:str = obj["CountryISOCode"]
      self.CountryEUMember:bool = obj["CountryEUMember"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.DeliveryTypeDescription:str = obj["DeliveryTypeDescription"]
      self.MasterCustIDBTName:str = obj["MasterCustIDBTName"]
      self.MasterCustIDCustID:str = obj["MasterCustIDCustID"]
      self.MasterCustIDName:str = obj["MasterCustIDName"]
      self.SalesRepName:str = obj["SalesRepName"]
      self.ShipViaWebDesc:str = obj["ShipViaWebDesc"]
      self.ShipViaDescription:str = obj["ShipViaDescription"]
      self.TATaxAuthorityDescription:str = obj["TATaxAuthorityDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TerritoryTerritoryDesc:str = obj["TerritoryTerritoryDesc"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SugPOChgRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order that this release record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  The line # of  PoDetail record that the PORel record is related to.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  """  
      self.SuggestionCode:str = obj["SuggestionCode"]
      """   Suggested action to be taken for this Purchase Order release.
"X" = Expedite, "P" = Postpone,  "C" = Cancel, "I"= increase qty, "R" = Reduce Qty, "S" for below safety and "Z" for below zero. This field is a 8 char. field it could contain "IP" increase and postpone.  """  
      self.BuyerID:str = obj["BuyerID"]
      """   The Buyer Id that is on the related PO.
Duplicate of POHeader.BuyerID  """  
      self.RequireDate:str = obj["RequireDate"]
      """  Requirement Due Date.  For suggested Cancels or Reduce Quantity this is set to Today.  """  
      self.SourceName:str = obj["SourceName"]
      """  Human formatted string that contains the original source document of this entry.  """  
      self.SurplusQty:int = obj["SurplusQty"]
      """  New Suggested qty (in our UOM). This is the true amount suggested, not the difference between actual and suggested.  This only pertains to increase and reduce qty suggestions.  """  
      self.CancelReason:str = obj["CancelReason"]
      """   Reason for "Cancel" suggestion.  Purchase for stock which
1. OverMax - Stock purchase which surpasses the maximum.
2. No Requirement - Job purchase no open job record.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field can not be blank.  """  
      self.ConNum:int = obj["ConNum"]
      """  Supplier contact linked to this record.  """  
      self.Comment:str = obj["Comment"]
      """  Comment  """  
      self.VendorChange:bool = obj["VendorChange"]
      """  Indicates that this suggestion was initiated from the supplier Wb.  It is a reference field on time phase and does not add or subtract from the balance.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Linked Inter-Company sales order.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Linked Inter-Company Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The linked Inter-Company sale order release.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.ABCCode:str = obj["ABCCode"]
      """  ABC Code.  Valid values are "A" through "Z".  """  
      self.SuggestionStatus:str = obj["SuggestionStatus"]
      """  SuggestionStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Review:bool = obj["Review"]
      """  A flag that is set by the user to indicate the suggestion has been reviewed.  This is only used to help filter suggestions.  """  
      self.ReqPromiseDate:str = obj["ReqPromiseDate"]
      """  For suggested changes to Promise Date.  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  Date and time when this record was created.  """  
      self.LockDate:bool = obj["LockDate"]
      """  LockDate  """  
      self.LockQty:bool = obj["LockQty"]
      """  LockQty  """  
      self.ArrivedQty:int = obj["ArrivedQty"]
      """  PO Release Arrived Qty (note cannot be a linked field as need to set UOM Properties)  """  
      self.Brw_Exception:str = obj["Brw_Exception"]
      self.brwPartNum:str = obj["brwPartNum"]
      self.brwPurPoint:str = obj["brwPurPoint"]
      self.brwVendorID:str = obj["brwVendorID"]
      self.CancelToggle:bool = obj["CancelToggle"]
      self.ContainerAllowAccept:bool = obj["ContainerAllowAccept"]
      """  Logical indicating whether or not the suggested update is valid for PO releases tied to a Container.  """  
      self.DueDate:str = obj["DueDate"]
      self.ExpediteToggle:bool = obj["ExpediteToggle"]
      self.IncreaseToggle:bool = obj["IncreaseToggle"]
      self.IUM:str = obj["IUM"]
      self.JobSeqType:str = obj["JobSeqType"]
      self.PostponeToggle:bool = obj["PostponeToggle"]
      self.PUM:str = obj["PUM"]
      self.ReduceToggle:bool = obj["ReduceToggle"]
      self.Rels_OnOrderQty:int = obj["Rels_OnOrderQty"]
      self.SupplierQty:int = obj["SupplierQty"]
      self.SurplusQtyUOM:str = obj["SurplusQtyUOM"]
      """  UOM for SurplusQty  """  
      self.VendorName:str = obj["VendorName"]
      self.XRelQty:int = obj["XRelQty"]
      """  PO Release 'Our Quantity'  """  
      self.BrwPartDesc:str = obj["BrwPartDesc"]
      self.PromiseDate:str = obj["PromiseDate"]
      """  The Promise date set on the PO Release  """  
      self.brwAttributeSetID:int = obj["brwAttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.brwAttributeSetShortDescription:str = obj["brwAttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.brwAttributeSetDescription:str = obj["brwAttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.brwAttrClassID:str = obj["brwAttrClassID"]
      """  ID of parent Attribute Class  """  
      self.DispNumberOfPieces:int = obj["DispNumberOfPieces"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.brwPartTrackInventoryByRevision:bool = obj["brwPartTrackInventoryByRevision"]
      self.brwRevisionNum:str = obj["brwRevisionNum"]
      self.PartClassID:str = obj["PartClassID"]
      self.PartClassDescription:str = obj["PartClassDescription"]
      self.Selected:bool = obj["Selected"]
      self.BitFlag:int = obj["BitFlag"]
      self.BuyerIDName:str = obj["BuyerIDName"]
      self.PlantName:str = obj["PlantName"]
      self.POLineVenPartNum:str = obj["POLineVenPartNum"]
      self.POLineLineDesc:str = obj["POLineLineDesc"]
      self.POLinePartNum:str = obj["POLinePartNum"]
      self.POLineRevisionNum:str = obj["POLineRevisionNum"]
      self.PORelContractID:str = obj["PORelContractID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_VendCntRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  This key links the record to the Vendor file.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Purchase point from Vendor.  """  
      self.ConNum:int = obj["ConNum"]
      """  Contact number.  Unique identifier for the contact record.  """  
      self.Name:str = obj["Name"]
      """  Contact name.  """  
      self.Func:str = obj["Func"]
      """  Used to enter a short description that should indicate what the contacts main function is. Ex: Shipping, Buyer, Engineer. This is an optional field.  """  
      self.FaxNum:str = obj["FaxNum"]
      """  Specific Fax telephone number for the contact. Optional field.  The user should only enter a Fax number for the contact if it is different than the fax number for the vendor. When displaying phone numbers of contacts the system will use the phone number found in the Vendor or Purchase Point file if the contacts number is blank.  """  
      self.PhoneNum:str = obj["PhoneNum"]
      """  Specific Business telephone number for the contact. Optional field.  The user should only enter this when the contact has a phone number different than the Vendor.  When displaying phone numbers of contacts the system will use the phone number found in the Vendor or Purchase Point  file if the contacts number is blank.  """  
      self.EmailAddress:str = obj["EmailAddress"]
      """  Contact email address.  """  
      self.WebPassword:str = obj["WebPassword"]
      """  Password for SF/Portal, should not be easily editable from the Manufacturing System.  """  
      self.WebUser:bool = obj["WebUser"]
      """  Indicates if able to access the Supplier Workbench  """  
      self.RoleCode:str = obj["RoleCode"]
      """  Code that identifies the role of this person. Link to the RoleCD table.  """  
      self.CellPhoneNum:str = obj["CellPhoneNum"]
      """  The contacts Cell phone number.  """  
      self.PagerNum:str = obj["PagerNum"]
      """  The contacts Pager number.  """  
      self.HomeNum:str = obj["HomeNum"]
      """  The contacts Home number.  """  
      self.AltNum:str = obj["AltNum"]
      """  The contacts Alternate number.  """  
      self.ContactTitle:str = obj["ContactTitle"]
      """  The Contacts Title  """  
      self.ReportsTo:str = obj["ReportsTo"]
      """  The name if the person this contact reports to.  """  
      self.Comment:str = obj["Comment"]
      """  Comments are intended to be internal comments about a specific contact.  """  
      self.NoContact:bool = obj["NoContact"]
      """  Indicates that this contact is no longer contacted.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  The date the task was created.  """  
      self.CreateDcdUserID:str = obj["CreateDcdUserID"]
      """  The UserID that created the task  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date the task was last changed.  """  
      self.ChangeDcdUserID:str = obj["ChangeDcdUserID"]
      """  The UserID that last changed the task  """  
      self.Inactive:bool = obj["Inactive"]
      """  This contact does not get used on new LOQs  """  
      self.FirstName:str = obj["FirstName"]
      """  First Name  """  
      self.MiddleName:str = obj["MiddleName"]
      """  Middle Name  """  
      self.LastName:str = obj["LastName"]
      """  Last Name  """  
      self.Prefix:str = obj["Prefix"]
      """  Prefix  """  
      self.Suffix:str = obj["Suffix"]
      """  Suffix  """  
      self.Initials:str = obj["Initials"]
      """  Initials  """  
      self.ExternalId:str = obj["ExternalId"]
      """  Unique identifier from an external G/L interface  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disable this record from receiving global updates  """  
      self.PerConID:int = obj["PerConID"]
      """  Unique identifier for a PerCon record.  """  
      self.SyncEmailToPerCon:bool = obj["SyncEmailToPerCon"]
      """  Default to True. If unchecked then changes to the email fields on PerCon won't affect this record and vice versa.  """  
      self.SyncLinksToPerCon:bool = obj["SyncLinksToPerCon"]
      """  Default to True. If unchecked then changes to the Web link fields on PerCon won't affect this record and vice versa.  """  
      self.SyncNameToPerCon:bool = obj["SyncNameToPerCon"]
      """  Default to True. If unchecked then changes to the Name fields on PerCon won't affect this record and vice versa.  """  
      self.SyncPhoneToPerCon:bool = obj["SyncPhoneToPerCon"]
      """  Default to True. If unchecked then changes to the Phone fields on PerCon won't affect this record and vice versa.  """  
      self.WebSite:str = obj["WebSite"]
      """  Contact's website.  """  
      self.IM:str = obj["IM"]
      """  Contact's IM.  """  
      self.Twitter:str = obj["Twitter"]
      """  Contact's Twitter.  """  
      self.LinkedIn:str = obj["LinkedIn"]
      """  Contact's LinkedIn.  """  
      self.FaceBook:str = obj["FaceBook"]
      """  Contact's FaceBook.  """  
      self.WebLink1:str = obj["WebLink1"]
      """  User defined Link 1.  """  
      self.WebLink2:str = obj["WebLink2"]
      """  User defined Link 2.  """  
      self.WebLink3:str = obj["WebLink3"]
      """  User defined Link 3.  """  
      self.WebLink4:str = obj["WebLink4"]
      """  User defined Link 4.  """  
      self.WebLink5:str = obj["WebLink5"]
      """  User defined Link 5.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.PrimaryContact:bool = obj["PrimaryContact"]
      self.GlbFlag:bool = obj["GlbFlag"]
      self.VendCntAttrStrng:str = obj["VendCntAttrStrng"]
      self.GlbLink:str = obj["GlbLink"]
      """  GlbVendCnt fields in a linked list to find the linking record  """  
      self.PerConName:str = obj["PerConName"]
      """  The name of the person contact.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PurPointZip:str = obj["PurPointZip"]
      self.PurPointAddress2:str = obj["PurPointAddress2"]
      self.PurPointState:str = obj["PurPointState"]
      self.PurPointName:str = obj["PurPointName"]
      self.PurPointPrimPCon:int = obj["PurPointPrimPCon"]
      self.PurPointCity:str = obj["PurPointCity"]
      self.PurPointAddress1:str = obj["PurPointAddress1"]
      self.PurPointCountry:str = obj["PurPointCountry"]
      self.PurPointAddress3:str = obj["PurPointAddress3"]
      self.RoleCodeRoleDescription:str = obj["RoleCodeRoleDescription"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_VendorRow:
   def __init__(self, obj):
      self.Inactive:bool = obj["Inactive"]
      """  Indicates if vendor is inactive.  Inactive vendors are suppressed from data entry browses/selection lists and reports.  No new POs may be entered for the vendor, but the vendor may still be appear on existing POs.  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorID:str = obj["VendorID"]
      """  A descriptive code assigned by the user to uniquely identify the vendor record.  This code must be unique within the file.  This ID may be used on displays/reports where space for full name is not available or may be inappropriate. This master key is a little different in that the user can change it.  This change is allowed because the system is not using the VendID as a foreign key in any other file. Instead it uses an internal value, VendNum, which cannot be changed, and is assigned by the system, for linking other records to the Vendor.  """  
      self.Name:str = obj["Name"]
      """  Vendor's name.  This field has a format length of 50. Normally the maintenance will be done in a left/right scrollable field of 30. Printing may not always print all 50. This also applies to the address lines.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  A  unique integer assigned by the system to new vendors by the  maintenance program. This field is used as the foreign key to identify the vendor in other files such as CheckHed, or POHeader. The end user should never need to know about the value of this field.  """  
      self.Address1:str = obj["Address1"]
      """  First address line of the Supplier  """  
      self.Address2:str = obj["Address2"]
      """  Second address line of the Supplier  """  
      self.Address3:str = obj["Address3"]
      """  Third address line of the Supplier  """  
      self.City:str = obj["City"]
      """  City portion of the address of the Supplier  """  
      self.State:str = obj["State"]
      """  Can be blank.  """  
      self.ZIP:str = obj["ZIP"]
      """  Postal Code or Zip code portion of the address of the Supplier  """  
      self.Country:str = obj["Country"]
      """  Country Name. Printed as last line of mailing address. Can be blank.  """  
      self.TaxPayerID:str = obj["TaxPayerID"]
      """  The Tax Payer ID. Used in 1099 processing.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Contains the key of the Purchase Point (VendorPP) record that should be used as a default for the vendor. Purchase points are used in Purchase Orders like Customer Shipto are used in Sales Orders. A blank value signifies that the default should be the vendor itself. This field is updated via a toggle box in purchase point maintenance. When the user checks this box the key of the Purchase Point record (PurPoint) is placed into this field. This method insures that only one Purchase point can exist as the default. Also if the toggle box is cleared then this field should be updated to blanks.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Establishes the default Purchasing terms for this vendor. This can be blank or must be valid in the Terms file. It supplies Purchase Order and A/P Invoice entry with defaults.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  Vendors Group Code. Can be blank or must be valid in the VendGrup master file.  """  
      self.Print1099:bool = obj["Print1099"]
      """  Only vendors where Print 1099 = Yes will be selected in the 1099 processing.  """  
      self.OneCheck:bool = obj["OneCheck"]
      """  Indicates that for this vendor all invoices must be paid on separate checks.  """  
      self.PrintLabels:bool = obj["PrintLabels"]
      """  Only vendors that are PrintLabel = Yes will be selected for printing of mailing labels.  """  
      self.FaxNum:str = obj["FaxNum"]
      """  Fax telephone number for the vendor. Optional field. This field is used as the general Fax # for the vendor.  It will be displayed as PO entry/Inquiry when no specific contact is given for the purchase order or the contact record has a blank Fax #.  """  
      self.PhoneNum:str = obj["PhoneNum"]
      """  The general Business Phone Number for the vendor. Displayed in PO  entry and inquires when no contact is given or when contact has a blank phone number.  """  
      self.Comment:str = obj["Comment"]
      """   Comments are intended to be internal comments about a specific vendor. These do get pulled into other programs. They are mainly intended as an online storage facility.
To be view-as EDITOR widget.  """  
      self.PayHold:bool = obj["PayHold"]
      """  Indicates if payments to vendor should be held. If "yes" then vendor can't be selected in check processing. Also individual invoices can be put on hold.  """  
      self.PrimPCon:int = obj["PrimPCon"]
      """  Contains the key of the Primary Purchasing contact for the customer. This field is not directly maintainable. Instead it is set during contact maintenance by having the user mark a check box indicating primary Purchaser.  This is the contact that is used as a default in Purchase Order Entry when no purchase point is referenced  """  
      self.AccountRef:str = obj["AccountRef"]
      """  Identifies your account with the specific vendor. This is an optional field which is printed on any checks the system generates to this vendor.  """  
      self.DefaultFOB:str = obj["DefaultFOB"]
      """  Default FOB policy for Purchase Orders to this vendor.  Used as a default to POHeader.FOB.  """  
      self.RcvInspectionReq:bool = obj["RcvInspectionReq"]
      """  Indicates if  Inspection is required for items received from this vendor.  Inspection will also be enforced if the related PartClass, Podetail, JobMtl or JobOper have their "RcvInspectionReq" fields set to Yes.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Tax Liability of the Supplier  """  
      self.CountryNum:int = obj["CountryNum"]
      """  Country part of address. This field is in sync with the Country field. It must be a valid entry in the Country table.  """  
      self.LangNameID:str = obj["LangNameID"]
      """  Indicates the language to be used.  This controls which language will be selected when extracting part descriptions from PartLangDesc table.  """  
      self.BorderCrossing:str = obj["BorderCrossing"]
      """  Area/city code from where goods cross the border. This field is intended for Intrastat reporting. The field can be blank to indicate the value from the Country table.  This field is only visible if ISSyst.EnableHarbour is set.  """  
      self.FormatStr:str = obj["FormatStr"]
      """  Optional Custom address format.  Controls the address format used on crystal forms.  """  
      self.ElecPayment:bool = obj["ElecPayment"]
      """  Payments to this vendors are made via electronic transfer.  """  
      self.PrimaryBankID:str = obj["PrimaryBankID"]
      """  ID of the vendor's primary bank.  Relates to the VendBank record, NOT the BankAcct record.  """  
      self.Approved:bool = obj["Approved"]
      """   Indicates if the Vendor is approved for Purchasing.
Purchases can only be made from vendors that are approved.  """  
      self.ICVend:bool = obj["ICVend"]
      """  This is an inter-company vendor.  """  
      self.EMailAddress:str = obj["EMailAddress"]
      """  Email address of the vendor.  """  
      self.WebVendor:bool = obj["WebVendor"]
      """  This vendor is web enabled  """  
      self.VendURL:str = obj["VendURL"]
      """  Vendor URL.  """  
      self.EarlyBuffer:int = obj["EarlyBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.LateBuffer:int = obj["LateBuffer"]
      """  Used to calculate on-time delivery performance rating  """  
      self.OnTimeRating:str = obj["OnTimeRating"]
      """  Freeform field for rating On-time delivery performance.  This field is used as a criteria in selecting vendors in RFQ responses  """  
      self.QualityRating:str = obj["QualityRating"]
      """  Freeform field for rating QA performance.  This field is used as a criteria in selecting vendors in RFQ responses.  """  
      self.PriceRating:str = obj["PriceRating"]
      """  Freeform field for rating Price Accuracy.  This field is used as a criteria in selecting vendors in RFQ responses  """  
      self.ServiceRating:str = obj["ServiceRating"]
      """  Freeform field for rating this vendors service.  This field is used as a criteria in selecting vendors in RFQ responses  """  
      self.ExternalId:str = obj["ExternalId"]
      """  Unique identifier from an external G/L interface  """  
      self.VendPILimit:int = obj["VendPILimit"]
      """  An optional field that allows user to enter a monetary value to be used as a Credit limit for payment instruments such as post dated checks or bank drafts.  Credit limit of zero is considered as having unlimited credit.  """  
      self.GlobalVendor:bool = obj["GlobalVendor"]
      """  Marks the vendor as a global vendor, available to be sent out to other companies  """  
      self.ICTrader:bool = obj["ICTrader"]
      """  Indicates if this vendor participates in the Inter-Company Trading.  """  
      self.TaxAuthorityCode:str = obj["TaxAuthorityCode"]
      """  Establishes the tax authority for this vendor.  This field can be blank, but if entered, it must be valid in the TaxAuthorityCd file.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disable this record from receiving global updates  """  
      self.MinOrderValue:int = obj["MinOrderValue"]
      """  MinOrderValue  """  
      self.CalendarID:str = obj["CalendarID"]
      """  Identifies the production calendar for this Vendor.   If this equals "", then the ProdCal record is the Company Level production calendar.  """  
      self.EDICode:str = obj["EDICode"]
      """  The Trading Partner ID that is used for incoming and outgoing EDI transactions.  """  
      self.ConsolidatedPurchasing:bool = obj["ConsolidatedPurchasing"]
      """  Should this Supplier be included in Consolidated Purchasing?  """  
      self.LocalPurchasing:bool = obj["LocalPurchasing"]
      """  If the Part Class being purchased is included in Consolidated Purchasing, should purchasing it from this Supplier override that so it will be purchased in this company?  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.CPay:bool = obj["CPay"]
      """  Flag to indicate if the Vendor participates in the Centralized Payment process.  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Indicates whether or not all freight charges sent or received are for individual pack DIs or the master pack.  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  Indicates if the shipment is international.  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  Certificate of Origin flag  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Commercial Invoice flag.  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Ship Export Declaration flag  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  Letter of Instruction flag  """  
      self.FFID:str = obj["FFID"]
      """  Freight Forwarder ID  """  
      self.FFCompName:str = obj["FFCompName"]
      """  Freight Forwarder Company Name  """  
      self.FFContact:str = obj["FFContact"]
      """  Freight Forwarder contact person  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  First address line of the Freight Forwarder  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  Second address line of the Freight Forwarder  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Third address line of the Freight Forwarder  """  
      self.FFCity:str = obj["FFCity"]
      """  Freight Forwarder city portion of address.  """  
      self.FFState:str = obj["FFState"]
      """  Freight Forwarder state portion of address.  """  
      self.FFZip:str = obj["FFZip"]
      """  Freight Forwarder Zip code portion of the address  """  
      self.FFCountry:str = obj["FFCountry"]
      """  Freight Forwarder Country portion of the address  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Non Standard Packaging  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Additional Handling flag  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantum View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View Ship from Name  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantum View Memo  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  Freight Forwarder Phone Number  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder Country Number  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this Supplier.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AP invoice line for this Supplier.  """  
      self.ManagedCust:bool = obj["ManagedCust"]
      """  Flag indicating whether this vendor is associated with a 3PL customer.  """  
      self.ManagedCustID:str = obj["ManagedCustID"]
      """  CustID of the associated managed customer.  Only populated if ManagedCust flag = true.  """  
      self.ManagedCustNum:int = obj["ManagedCustNum"]
      """  CustNum associated with CustID of managed customer.  Only populated if ManagedCust flag = true.  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.HasBank:bool = obj["HasBank"]
      """  If yes, indicates that Vendor has at least one assoicated VendBank record.  """  
      self.PmtAcctRef:str = obj["PmtAcctRef"]
      """  The Payment Banking Reference assigned by the supplier  """  
      self.LegalName:str = obj["LegalName"]
      """  Full Legal Name  """  
      self.TaxRegReason:str = obj["TaxRegReason"]
      """  Tax Payer Registration Reason Code  """  
      self.OrgRegCode:str = obj["OrgRegCode"]
      """  Organization Registration Code  """  
      self.AdvTaxInv:bool = obj["AdvTaxInv"]
      """   Indicates Advanced Tax invoice is expected from supplier
after prepayment is done. If this field is set to yes, prepayment
invoice is not crated automatically.  """  
      self.AllowAsAltRemitTo:bool = obj["AllowAsAltRemitTo"]
      """  AllowAsAltRemitTo  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.THBranchID:str = obj["THBranchID"]
      """  THBranchID  """  
      self.ParamCode:str = obj["ParamCode"]
      """  ParamCode  """  
      self.AGAFIPResponsibilityCode:str = obj["AGAFIPResponsibilityCode"]
      """  AGAFIPResponsibilityCode  """  
      self.AGGrossIncomeTaxID:str = obj["AGGrossIncomeTaxID"]
      """  AGGrossIncomeTaxID  """  
      self.AGIDDocumentTypeCode:str = obj["AGIDDocumentTypeCode"]
      """  AGIDDocumentTypeCode  """  
      self.AGProvinceCode:str = obj["AGProvinceCode"]
      """  AGProvinceCode  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGApartment:str = obj["AGApartment"]
      """  AGApartment  """  
      self.AGExtraStreetNumber:str = obj["AGExtraStreetNumber"]
      """  AGExtraStreetNumber  """  
      self.AGFloor:str = obj["AGFloor"]
      """  AGFloor  """  
      self.AGLocationCode:str = obj["AGLocationCode"]
      """  AGLocationCode  """  
      self.AGNeighborhood:str = obj["AGNeighborhood"]
      """  AGNeighborhood  """  
      self.AGStreet:str = obj["AGStreet"]
      """  AGStreet  """  
      self.AGStreetNumber:str = obj["AGStreetNumber"]
      """  AGStreetNumber  """  
      self.COOneTimeID:str = obj["COOneTimeID"]
      """  Colombia Loc Field. OneTimeCustVend new table ID  """  
      self.NoBankingReference:bool = obj["NoBankingReference"]
      """  No Banking Reference  """  
      self.PEGoodsContributor:bool = obj["PEGoodsContributor"]
      """  Peru Goods Contributor withholding status.  """  
      self.PEWithholdAgent:bool = obj["PEWithholdAgent"]
      """  Indicates the status of Peru Withholding Agent  """  
      self.PECollectionAgent:bool = obj["PECollectionAgent"]
      """  Indicates the status of Peru Collection Agent  """  
      self.PENotFound:bool = obj["PENotFound"]
      """  Peru Not Found withholding status.  """  
      self.PENoAddress:bool = obj["PENoAddress"]
      """  Peru No Address Provided withholding status.  """  
      self.PEIdentityDocType:str = obj["PEIdentityDocType"]
      """  Displays the Peru Identity Document Type.  """  
      self.COIsOneTimeVend:bool = obj["COIsOneTimeVend"]
      """  Colombia Loc Field.  """  
      self.PEDocumentID:str = obj["PEDocumentID"]
      """  Peru Document ID.  """  
      self.MaxLateDaysPORel:int = obj["MaxLateDaysPORel"]
      """  Defines the Number of Days from the PO release date the schedule engine considers a late PO Release or discard it. If the PO release date plus the supplier due date horizon is before today then the PO Release is discarded. If the PO release date plus the supplier due date horizon is today or later then the PO Release is considered late.  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  1099 Code  """  
      self.TIN:str = obj["TIN"]
      """  Taxpayer Identification Number  """  
      self.TINType:str = obj["TINType"]
      """  TIN Type. Values are 1 for EIN, 2 for SSNs, ITINs, and ATINs and 0 if type of TIN is not terminable.  """  
      self.SecondTINNotice:bool = obj["SecondTINNotice"]
      """  Second TIN Notice  """  
      self.NameControl:str = obj["NameControl"]
      """  Name Control. Optional and used for electronic export.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Specifies the method of shipment. The Ship Via associated with this supplier appears by default, but you can select a different option from the list.  """  
      self.NonUS:bool = obj["NonUS"]
      """  Non US Supplier  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  Form Type ID for the 1099 Code  """  
      self.INSupplierType:str = obj["INSupplierType"]
      """  INSupplierType  """  
      self.INCSTNumber:str = obj["INCSTNumber"]
      """  INCSTNumber  """  
      self.INPANNumber:str = obj["INPANNumber"]
      """  INPANNumber  """  
      self.DEOrgType:str = obj["DEOrgType"]
      """  DEOrgType  """  
      self.PaymentReporting:bool = obj["PaymentReporting"]
      """  PaymentReporting  """  
      self.ExternalPurchasing:bool = obj["ExternalPurchasing"]
      """  This field indicates that this record should be sent over to an external system whenever it is changed/created/deleted, etc.  """  
      self.MXRetentionCode:str = obj["MXRetentionCode"]
      """  MXRetentionCode  """  
      self.Reporting1099Name:str = obj["Reporting1099Name"]
      """  Recipient's name for US 1099 reporting  """  
      self.Reporting1099Name2:str = obj["Reporting1099Name2"]
      """  Reporting1099Name2  """  
      self.FATCA:bool = obj["FATCA"]
      """  FATCA  """  
      self.AccountNum:str = obj["AccountNum"]
      """  AccountNum  """  
      self.TWGUIRegNum:str = obj["TWGUIRegNum"]
      """  TW GUI Code  """  
      self.MXTARCode:str = obj["MXTARCode"]
      """  MXTARCode  """  
      self.PEAddressID:str = obj["PEAddressID"]
      """  PEAddressID  """  
      self.PERetentionRegime:str = obj["PERetentionRegime"]
      """  PERetentionRegime  """  
      self.TaxEntityType:str = obj["TaxEntityType"]
      """  TaxEntityType  """  
      self.INGSTComplianceRate:int = obj["INGSTComplianceRate"]
      """  GST Compliance Rate for India  """  
      self.INTaxRegistrationID:str = obj["INTaxRegistrationID"]
      """  INTaxRegistrationID  """  
      self.TINValidationStatus:int = obj["TINValidationStatus"]
      """  Validation Status of Taxpayer Identification Number  """  
      self.ImporterOfRecord:bool = obj["ImporterOfRecord"]
      """  Indicates whether this supplier is importer of records or not. Used for Avalara Tax Connect calculation.  """  
      self.PLAutomaticAPInvoiceNum:bool = obj["PLAutomaticAPInvoiceNum"]
      """  PLAutomaticAPInvoiceNum  """  
      self.SEC:str = obj["SEC"]
      """  Standard Entry Class Code  """  
      self.MXDIOTTranType:str = obj["MXDIOTTranType"]
      """  CSF Mexico DIOT Transaction Type  """  
      self.US1099KMerchCatCode:str = obj["US1099KMerchCatCode"]
      """  Form 1099-K Merchant Category Code  """  
      self.MXTaxpayerType:str = obj["MXTaxpayerType"]
      """  CSF Mexico Taxpayer Type  """  
      self.MXLegalRepRFC:str = obj["MXLegalRepRFC"]
      """  CSF Mexico Legal Representative RFC  """  
      self.MXLegalRepCURP:str = obj["MXLegalRepCURP"]
      """  CSF Mexico Legal Representative CURP  """  
      self.MXLegalRepName:str = obj["MXLegalRepName"]
      """  CSF Mexico Legal Representative Name  """  
      self.MXLegalRepTaxpayerType:str = obj["MXLegalRepTaxpayerType"]
      """  CSF Mexico Legal Representative Taxpayer Type  """  
      self.US1099State:str = obj["US1099State"]
      """  US 1099 State  """  
      self.TaxValidationStatus:int = obj["TaxValidationStatus"]
      """  Tax ID Validation Status: Not Validated – 0, Valid – 1, Invalid – 2.  """  
      self.TaxValidationDate:str = obj["TaxValidationDate"]
      """  Tax Validation Date  """  
      self.HMRCTaxValidationLog:str = obj["HMRCTaxValidationLog"]
      """  HMRCTaxValidationLog  """  
      self.ExternalSchemeID:str = obj["ExternalSchemeID"]
      """  Supplier Scheme ID  """  
      self.MXMunicipio:str = obj["MXMunicipio"]
      """  Municipio Code  """  
      self.EInvoice:bool = obj["EInvoice"]
      """  EInvoice  """  
      self.EDISupplier:bool = obj["EDISupplier"]
      """  Flag used to mark a Supplier as EDI.  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.BusinessCatList:str = obj["BusinessCatList"]
      """  Delimited list of Business Categories  """  
      self.COASegReferences:str = obj["COASegReferences"]
      """  List of fields which are referenced by COA segments.  """  
      self.CountryDescription:str = obj["CountryDescription"]
      self.CurrDesc:str = obj["CurrDesc"]
      """  Currency Description.  """  
      self.DocumentMaskID:str = obj["DocumentMaskID"]
      self.EnableGlobalLock:bool = obj["EnableGlobalLock"]
      self.EnableGlobalVendor:bool = obj["EnableGlobalVendor"]
      self.EnableMultiCompany:bool = obj["EnableMultiCompany"]
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Reverse Charge Method should be enabled.  """  
      self.FOBDescription:str = obj["FOBDescription"]
      self.GlbFlag:bool = obj["GlbFlag"]
      """  Indicates if the Vendor is a global vendor (either master or child)  """  
      self.GlbLink:str = obj["GlbLink"]
      """  Delimited list of GlbCompany and GlbVendorNum that is linking to this vendor  """  
      self.Integrationflag:bool = obj["Integrationflag"]
      self.NettingCustID:str = obj["NettingCustID"]
      """  A user defined external Netting Customer ID.  This must be existing Customer ID within the file  """  
      self.NettingCustNum:int = obj["NettingCustNum"]
      """  A user defined external Netting Customer Number.  This must be existing Customer Number within the file  """  
      self.RevChargeMethodDesc:str = obj["RevChargeMethodDesc"]
      """  Reverse Charge Method description  """  
      self.SalesTaxID:str = obj["SalesTaxID"]
      """  Sales Tax ID  """  
      self.SearchIDs:str = obj["SearchIDs"]
      """  Automated Bank reconciliation.  """  
      self.ServiceTaxID:str = obj["ServiceTaxID"]
      """  Service Tax ID  """  
      self.ShipViaDescription:str = obj["ShipViaDescription"]
      self.VendAttrString:str = obj["VendAttrString"]
      """  Delimited string of vendor attributes  """  
      self.LangNameIDDescription:str = obj["LangNameIDDescription"]
      self.BitFlag:int = obj["BitFlag"]
      self.AGAFIPResponsibilityDescription:str = obj["AGAFIPResponsibilityDescription"]
      self.AGIDDocTypeDescription:str = obj["AGIDDocTypeDescription"]
      self.AGLocationDescription:str = obj["AGLocationDescription"]
      self.AGProvinceCodeDescription:str = obj["AGProvinceCodeDescription"]
      self.CalendarIDDescription:str = obj["CalendarIDDescription"]
      self.Code1099Description:str = obj["Code1099Description"]
      self.CountryNumEUMember:bool = obj["CountryNumEUMember"]
      self.CountryNumISOCode:str = obj["CountryNumISOCode"]
      self.CountryNumDescription:str = obj["CountryNumDescription"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.DeliveryTypeDescription:str = obj["DeliveryTypeDescription"]
      self.FormTypeDescription:str = obj["FormTypeDescription"]
      self.GroupCodeGroupDesc:str = obj["GroupCodeGroupDesc"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PurPointAddress3:str = obj["PurPointAddress3"]
      self.PurPointAddress1:str = obj["PurPointAddress1"]
      self.PurPointPrimPCon:int = obj["PurPointPrimPCon"]
      self.PurPointName:str = obj["PurPointName"]
      self.PurPointZip:str = obj["PurPointZip"]
      self.PurPointCountry:str = obj["PurPointCountry"]
      self.PurPointCity:str = obj["PurPointCity"]
      self.PurPointState:str = obj["PurPointState"]
      self.PurPointAddress2:str = obj["PurPointAddress2"]
      self.TaxAuthCdTaxAuthorityDescription:str = obj["TaxAuthCdTaxAuthorityDescription"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class ExtendedInbound_input:
   """ Required : 
   requestXmlDoc
   responseXmlDoc
   """  
   def __init__(self, obj):
      self.requestXmlDoc:str = obj["requestXmlDoc"]
      self.responseXmlDoc:str = obj["responseXmlDoc"]
      pass

class ExtendedInbound_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.requestXmlDoc:str = obj["parameters"]
      self.responseXmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class ExtendedOutbound_input:
   """ Required : 
   requestXmlDoc
   """  
   def __init__(self, obj):
      self.requestXmlDoc:str = obj["requestXmlDoc"]
      pass

class ExtendedOutbound_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.requestXmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetAltPartSubsUD_input:
   """ Required : 
   eccExtPartSubsRow
   """  
   def __init__(self, obj):
      self.eccExtPartSubsRow:list[Erp_Tablesets_PartSubsRow] = obj["eccExtPartSubsRow"]
      pass

class GetAltPartSubsUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

      """  output parameters  """  

class GetAltPartUD_input:
   """ Required : 
   eccExtPartRow
   """  
   def __init__(self, obj):
      self.eccExtPartRow:list[Erp_Tablesets_PartRow] = obj["eccExtPartRow"]
      pass

class GetAltPartUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCUIDInvcHeadUD_input:
   """ Required : 
   eccExtInvcHeadRow
   """  
   def __init__(self, obj):
      self.eccExtInvcHeadRow:list[Erp_Tablesets_InvcHeadRow] = obj["eccExtInvcHeadRow"]
      pass

class GetCUIDInvcHeadUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCadShipToUD_input:
   """ Required : 
   eccExtShipToRow
   """  
   def __init__(self, obj):
      self.eccExtShipToRow:list[Erp_Tablesets_ShipToRow] = obj["eccExtShipToRow"]
      pass

class GetCadShipToUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCdmPcECCOrderDtlUD_input:
   """ Required : 
   eccExtPcECCOrderDtlRow
   """  
   def __init__(self, obj):
      self.eccExtPcECCOrderDtlRow:list[Erp_Tablesets_PcECCOrderDtlRow] = obj["eccExtPcECCOrderDtlRow"]
      pass

class GetCdmPcECCOrderDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCdmQuoteDtlUD_input:
   """ Required : 
   eccExtQuoteDtlRow
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtlRow:list[Erp_Tablesets_QuoteDtlRow] = obj["eccExtQuoteDtlRow"]
      pass

class GetCdmQuoteDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCncCustomerUD_input:
   """ Required : 
   eccExtCustomerRow
   """  
   def __init__(self, obj):
      self.eccExtCustomerRow:list[Erp_Tablesets_CustomerRow] = obj["eccExtCustomerRow"]
      pass

class GetCncCustomerUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCncShipToUD_input:
   """ Required : 
   eccExtShipToRow
   """  
   def __init__(self, obj):
      self.eccExtShipToRow:list[Erp_Tablesets_ShipToRow] = obj["eccExtShipToRow"]
      pass

class GetCncShipToUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

      """  output parameters  """  

class GetCpnCustXPrtUD_input:
   """ Required : 
   eccExtCustXPrtRow
   """  
   def __init__(self, obj):
      self.eccExtCustXPrtRow:list[Erp_Tablesets_CustXPrtRow] = obj["eccExtCustXPrtRow"]
      pass

class GetCpnCustXPrtUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCpnPartXRefIntUD_input:
   """ Required : 
   eccExtPartXRefIntRow
   """  
   def __init__(self, obj):
      self.eccExtPartXRefIntRow:list[Erp_Tablesets_PartXRefIntRow] = obj["eccExtPartXRefIntRow"]
      pass

class GetCpnPartXRefIntUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCrqdQuoteDtlUD_input:
   """ Required : 
   eccExtQuoteDtlRow
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtlRow:list[Erp_Tablesets_QuoteDtlRow] = obj["eccExtQuoteDtlRow"]
      pass

class GetCrqdQuoteDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCrqdQuoteHedUD_input:
   """ Required : 
   eccExtQuoteHedRow
   """  
   def __init__(self, obj):
      self.eccExtQuoteHedRow:list[Erp_Tablesets_QuoteHedRow] = obj["eccExtQuoteHedRow"]
      pass

class GetCrqdQuoteHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCrrcReasonUD_input:
   """ Required : 
   eccExtReasonRow
   """  
   def __init__(self, obj):
      self.eccExtReasonRow:list[Erp_Tablesets_ReasonRow] = obj["eccExtReasonRow"]
      pass

class GetCrrcReasonUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCrrdRMADtlUD_input:
   """ Required : 
   eccExtRMADtlRow
   """  
   def __init__(self, obj):
      self.eccExtRMADtlRow:list[Erp_Tablesets_RMADtlRow] = obj["eccExtRMADtlRow"]
      pass

class GetCrrdRMADtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCrrdRMAHeadUD_input:
   """ Required : 
   eccExtRMAHeadRow
   """  
   def __init__(self, obj):
      self.eccExtRMAHeadRow:list[Erp_Tablesets_RMAHeadRow] = obj["eccExtRMAHeadRow"]
      pass

class GetCrrdRMAHeadUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCucoCustCntUD_input:
   """ Required : 
   eccExtCustCntRow
   """  
   def __init__(self, obj):
      self.eccExtCustCntRow:list[Erp_Tablesets_CustCntRow] = obj["eccExtCustCntRow"]
      pass

class GetCucoCustCntUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCuidInvcDtlUD_input:
   """ Required : 
   eccExtInvcDtlRow
   """  
   def __init__(self, obj):
      self.eccExtInvcDtlRow:list[Erp_Tablesets_InvcDtlRow] = obj["eccExtInvcDtlRow"]
      pass

class GetCuidInvcDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCuodOrderDtlUD_input:
   """ Required : 
   eccExtOrderDtlRow
   """  
   def __init__(self, obj):
      self.eccExtOrderDtlRow:list[Erp_Tablesets_OrderDtlRow] = obj["eccExtOrderDtlRow"]
      pass

class GetCuodOrderDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetCuodOrderHedUD_input:
   """ Required : 
   eccExtOrderHedRow
   """  
   def __init__(self, obj):
      self.eccExtOrderHedRow:list[Erp_Tablesets_OrderHedRow] = obj["eccExtOrderHedRow"]
      pass

class GetCuodOrderHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetCuosOrderHedUD_input:
   """ Required : 
   eccExtOrderHedRow
   """  
   def __init__(self, obj):
      self.eccExtOrderHedRow:list[Erp_Tablesets_OrderHedRow] = obj["eccExtOrderHedRow"]
      pass

class GetCuosOrderHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      pass

      """  output parameters  """  

class GetCusCustomerUD_input:
   """ Required : 
   eccExtCustomerRow
   """  
   def __init__(self, obj):
      self.eccExtCustomerRow:list[Erp_Tablesets_CustomerRow] = obj["eccExtCustomerRow"]
      pass

class GetCusCustomerUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetDcldHDCaseUD_input:
   """ Required : 
   eccExtHDCaseRow
   """  
   def __init__(self, obj):
      self.eccExtHDCaseRow:list[Erp_Tablesets_HDCaseRow] = obj["eccExtHDCaseRow"]
      pass

class GetDcldHDCaseUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetDebmLocationMtlUD_input:
   """ Required : 
   eccExtLocationMtlRow
   """  
   def __init__(self, obj):
      self.eccExtLocationMtlRow:list[Erp_Tablesets_LocationMtlRow] = obj["eccExtLocationMtlRow"]
      pass

class GetDebmLocationMtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetDebmLocationWarrantyTranUD_input:
   """ Required : 
   eccExtLocationWarrantyTranRow
   """  
   def __init__(self, obj):
      self.eccExtLocationWarrantyTranRow:list[Erp_Tablesets_LocationWarrantyTranRow] = obj["eccExtLocationWarrantyTranRow"]
      pass

class GetDebmLocationWarrantyTranUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetDebmPayloadXml_input:
   """ Required : 
   eccExtLocationInventoryRow
   """  
   def __init__(self, obj):
      self.eccExtLocationInventoryRow:list[Erp_Tablesets_LocationInventoryRow] = obj["eccExtLocationInventoryRow"]
      pass

class GetDebmPayloadXml_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetDeidLocationInventoryUD_input:
   """ Required : 
   eccExtLocationInventoryRow
   """  
   def __init__(self, obj):
      self.eccExtLocationInventoryRow:list[Erp_Tablesets_LocationInventoryRow] = obj["eccExtLocationInventoryRow"]
      pass

class GetDeidLocationInventoryUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetGqrQuoteDtlUD_input:
   """ Required : 
   eccExtQuoteDtlRow
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtlRow:list[Erp_Tablesets_QuoteDtlRow] = obj["eccExtQuoteDtlRow"]
      pass

class GetGqrQuoteDtlUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetGqrQuoteHedUD_input:
   """ Required : 
   eccExtQuoteHedRow
   """  
   def __init__(self, obj):
      self.eccExtQuoteHedRow:list[Erp_Tablesets_QuoteHedRow] = obj["eccExtQuoteHedRow"]
      pass

class GetGqrQuoteHedUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetPODetailUD_input:
   """ Required : 
   eccExtPODetailRow
   """  
   def __init__(self, obj):
      self.eccExtPODetailRow:list[Erp_Tablesets_PODetailRow] = obj["eccExtPODetailRow"]
      pass

class GetPODetailUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetPOHeaderUD_input:
   """ Required : 
   eccExtPOHeaderRow
   """  
   def __init__(self, obj):
      self.eccExtPOHeaderRow:list[Erp_Tablesets_POHeaderRow] = obj["eccExtPOHeaderRow"]
      pass

class GetPOHeaderUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetRFQHeadUD_input:
   """ Required : 
   eccExtRFQHeadRow
   """  
   def __init__(self, obj):
      self.eccExtRFQHeadRow:list[Erp_Tablesets_RFQHeadRow] = obj["eccExtRFQHeadRow"]
      pass

class GetRFQHeadUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetRFQItemUD_input:
   """ Required : 
   eccExtRFQItemRow
   """  
   def __init__(self, obj):
      self.eccExtRFQItemRow:list[Erp_Tablesets_RFQItemRow] = obj["eccExtRFQItemRow"]
      pass

class GetRFQItemUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetSgpPartUD_input:
   """ Required : 
   eccExtPartRow
   """  
   def __init__(self, obj):
      self.eccExtPartRow:list[Erp_Tablesets_PartRow] = obj["eccExtPartRow"]
      pass

class GetSgpPartUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetStgProdGrupUD_input:
   """ Required : 
   eccExtProdGrupRow
   """  
   def __init__(self, obj):
      self.eccExtProdGrupRow:list[Erp_Tablesets_ProdGrupRow] = obj["eccExtProdGrupRow"]
      pass

class GetStgProdGrupUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetStkPartUD_input:
   """ Required : 
   eccExtPartRow
   """  
   def __init__(self, obj):
      self.eccExtPartRow:list[Erp_Tablesets_PartRow] = obj["eccExtPartRow"]
      pass

class GetStkPartUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.attributeSetTagValue:str = obj["parameters"]
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetStkPartUomUD_input:
   """ Required : 
   partUOMRow
   """  
   def __init__(self, obj):
      self.partUOMRow:list[Erp_Tablesets_PartUOMRow] = obj["partUOMRow"]
      pass

class GetStkPartUomUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetSttPartUD_input:
   """ Required : 
   eccExtPartRow
   """  
   def __init__(self, obj):
      self.eccExtPartRow:list[Erp_Tablesets_PartRow] = obj["eccExtPartRow"]
      pass

class GetSttPartUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      pass

      """  output parameters  """  

class GetSucoVendCntUD_input:
   """ Required : 
   eccExtVendCntRow
   """  
   def __init__(self, obj):
      self.eccExtVendCntRow:list[Erp_Tablesets_VendCntRow] = obj["eccExtVendCntRow"]
      pass

class GetSucoVendCntUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GetSuspVendorUD_input:
   """ Required : 
   eccExtVendorRow
   """  
   def __init__(self, obj):
      self.eccExtVendorRow:list[Erp_Tablesets_VendorRow] = obj["eccExtVendorRow"]
      pass

class GetSuspVendorUD_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.userDefinedSet:list[System_Xml_Linq_XElement] = obj["userDefinedSet"]
      self.payload:list[System_Xml_Linq_XElement] = obj["payload"]
      self.xmlAnything:list[System_Xml_Linq_XElement] = obj["xmlAnything"]
      self.attributesSet:list[System_Xml_Linq_XElement] = obj["attributesSet"]
      pass

      """  output parameters  """  

class GorCustomListOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class GorCustomListOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class GorCustomListOrderHed_input:
   """ Required : 
   eccExtOrderHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class GorCustomListOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class GorCustomTagOrderDtl_input:
   """ Required : 
   eccExtOrderDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class GorCustomTagOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderDtl:list[Erp_Tablesets_ECCExtensionOrderDtlTableset] = obj["eccExtOrderDtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class GorCustomTagOrderHed_input:
   """ Required : 
   eccExtOrderHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class GorCustomTagOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class GorPayload_input:
   """ Required : 
   eccExtOrderHed
   payload
   """  
   def __init__(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.payload:str = obj["payload"]
      pass

class GorPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtOrderHed:list[Erp_Tablesets_ECCExtensionOrderHedTableset] = obj["eccExtOrderHed"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class GqrCustomListQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class GqrCustomListQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class GqrCustomListQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class GqrCustomListQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class GqrCustomTagQuoteDtl_input:
   """ Required : 
   eccExtQuoteDtl
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class GqrCustomTagQuoteDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteDtl:list[Erp_Tablesets_ECCExtensionQuoteDtlTableset] = obj["eccExtQuoteDtl"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class GqrCustomTagQuoteHed_input:
   """ Required : 
   eccExtQuoteHed
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class GqrCustomTagQuoteHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class GqrCustomXML_input:
   """ Required : 
   eccExtQuoteHed
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class GqrCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class GqrPayload_input:
   """ Required : 
   eccExtQuoteHed
   payload
   """  
   def __init__(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.payload:str = obj["payload"]
      pass

class GqrPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtQuoteHed:list[Erp_Tablesets_ECCExtensionQuoteHedTableset] = obj["eccExtQuoteHed"]
      self.payload:str = obj["parameters"]
      pass

      """  output parameters  """  

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class MsqOverride_input:
   """ Required : 
   custNum
   shipToID
   currencyCode
   partNum
   sellingUOM
   sellingQty
   custBasePrice
   custQtyPrice
   """  
   def __init__(self, obj):
      self.custNum:int = obj["custNum"]
      self.shipToID:str = obj["shipToID"]
      self.currencyCode:str = obj["currencyCode"]
      self.partNum:str = obj["partNum"]
      self.sellingUOM:str = obj["sellingUOM"]
      self.sellingQty:int = obj["sellingQty"]
      self.custBasePrice:int = obj["custBasePrice"]
      self.custQtyPrice:int = obj["custQtyPrice"]
      pass

class MsqOverride_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.custBasePrice:int = obj["parameters"]
      self.custQtyPrice:int = obj["parameters"]
      pass

      """  output parameters  """  

class SgpCustomListPart_input:
   """ Required : 
   eccExtPart
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SgpCustomListPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SgpCustomTagPart_input:
   """ Required : 
   eccExtPart
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SgpCustomTagPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SgpCustomXML_input:
   """ Required : 
   eccExtPart
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SgpCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SgpFinalXml_input:
   """ Required : 
   eccExtPart
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SgpFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SgpPayload_input:
   """ Required : 
   eccExtPart
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.payLoad:str = obj["payLoad"]
      pass

class SgpPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpodCustomListPODetail_input:
   """ Required : 
   eccExtPODetail
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPODetail:list[Erp_Tablesets_ECCExtensionPODetailTableset] = obj["eccExtPODetail"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SpodCustomListPODetail_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SpodCustomListPOHeader_input:
   """ Required : 
   eccExtPOHeader
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPOHeader:list[Erp_Tablesets_ECCExtensionPOHeaderTableset] = obj["eccExtPOHeader"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SpodCustomListPOHeader_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SpodCustomTagPODetail_input:
   """ Required : 
   eccExtPODetail
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPODetail:list[Erp_Tablesets_ECCExtensionPODetailTableset] = obj["eccExtPODetail"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SpodCustomTagPODetail_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpodCustomTagPOHeader_input:
   """ Required : 
   eccExtPOHeader
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPOHeader:list[Erp_Tablesets_ECCExtensionPOHeaderTableset] = obj["eccExtPOHeader"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SpodCustomTagPOHeader_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpodCustomXML_input:
   """ Required : 
   eccExtPOHeader
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPOHeader:list[Erp_Tablesets_ECCExtensionPOHeaderTableset] = obj["eccExtPOHeader"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SpodCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpodPayload_input:
   """ Required : 
   eccExtPOHeader
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPOHeader:list[Erp_Tablesets_ECCExtensionPOHeaderTableset] = obj["eccExtPOHeader"]
      self.payLoad:str = obj["payLoad"]
      pass

class SpodPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpouCustomListSugPOChg_input:
   """ Required : 
   eccExtSugPOChg
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtSugPOChg:list[Erp_Tablesets_ECCExtensionSugPOChgTableset] = obj["eccExtSugPOChg"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SpouCustomListSugPOChg_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SpouCustomTagSugPOChg_input:
   """ Required : 
   eccExtSugPOChg
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtSugPOChg:list[Erp_Tablesets_ECCExtensionSugPOChgTableset] = obj["eccExtSugPOChg"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SpouCustomTagSugPOChg_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SpouPayload_input:
   """ Required : 
   eccExtSugPOChg
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtSugPOChg:list[Erp_Tablesets_ECCExtensionSugPOChgTableset] = obj["eccExtSugPOChg"]
      self.payLoad:str = obj["payLoad"]
      pass

class SpouPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class StgCustomListProdGrup_input:
   """ Required : 
   eccExtProdGrup
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtProdGrup:list[Erp_Tablesets_ECCExtensionProdGrupTableset] = obj["eccExtProdGrup"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class StgCustomListProdGrup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class StgCustomTagProdGrup_input:
   """ Required : 
   eccExtProdGrup
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtProdGrup:list[Erp_Tablesets_ECCExtensionProdGrupTableset] = obj["eccExtProdGrup"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class StgCustomTagProdGrup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class StgCustomXML_input:
   """ Required : 
   eccExtProdGrup
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtProdGrup:list[Erp_Tablesets_ECCExtensionProdGrupTableset] = obj["eccExtProdGrup"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class StgCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class StgFinalXml_input:
   """ Required : 
   eccExtProdGrup
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtProdGrup:list[Erp_Tablesets_ECCExtensionProdGrupTableset] = obj["eccExtProdGrup"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class StgFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class StgPayload_input:
   """ Required : 
   eccExtProdGrup
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtProdGrup:list[Erp_Tablesets_ECCExtensionProdGrupTableset] = obj["eccExtProdGrup"]
      self.payLoad:str = obj["payLoad"]
      pass

class StgPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkAttributeSet_input:
   """ Required : 
   eccExtPart
   attributeSet
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.attributeSet:str = obj["attributeSet"]
      pass

class StkAttributeSet_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.attributeSet:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkCustomListPartUOM_input:
   """ Required : 
   eccExtPartUOM
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPartUOM:list[Erp_Tablesets_ECCExtensionPartUOMTableset] = obj["eccExtPartUOM"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class StkCustomListPartUOM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class StkCustomListPart_input:
   """ Required : 
   eccExtPart
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class StkCustomListPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class StkCustomTagPartUOM_input:
   """ Required : 
   eccExtPartUOM
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPartUOM:list[Erp_Tablesets_ECCExtensionPartUOMTableset] = obj["eccExtPartUOM"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class StkCustomTagPartUOM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkCustomTagPart_input:
   """ Required : 
   eccExtPart
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class StkCustomTagPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkCustomXML_input:
   """ Required : 
   eccExtPart
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class StkCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkFinalXml_input:
   """ Required : 
   eccExtPart
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class StkFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class StkPayload_input:
   """ Required : 
   eccExtPart
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.payLoad:str = obj["payLoad"]
      pass

class StkPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SttCustomListPart_input:
   """ Required : 
   eccExtPart
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SttCustomListPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SttCustomTagPart_input:
   """ Required : 
   eccExtPart
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SttCustomTagPart_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SttCustomXML_input:
   """ Required : 
   eccExtPart
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SttCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SttFinalXml_input:
   """ Required : 
   eccExtPart
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SttFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SttPayload_input:
   """ Required : 
   eccExtPart
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtPart:list[Erp_Tablesets_ECCExtensionPartTableset] = obj["eccExtPart"]
      self.payLoad:str = obj["payLoad"]
      pass

class SttPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SucoCustomListVendCnt_input:
   """ Required : 
   eccExtVendCnt
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtVendCnt:list[Erp_Tablesets_ECCExtensionVendCntTableset] = obj["eccExtVendCnt"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SucoCustomListVendCnt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SucoCustomTagVendCnt_input:
   """ Required : 
   eccExtVendCnt
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtVendCnt:list[Erp_Tablesets_ECCExtensionVendCntTableset] = obj["eccExtVendCnt"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SucoCustomTagVendCnt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SucoCustomXML_input:
   """ Required : 
   eccExtVendCnt
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtVendCnt:list[Erp_Tablesets_ECCExtensionVendCntTableset] = obj["eccExtVendCnt"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SucoCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SucoFinalXml_input:
   """ Required : 
   eccExtVendCnt
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtVendCnt:list[Erp_Tablesets_ECCExtensionVendCntTableset] = obj["eccExtVendCnt"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SucoFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SucoPayload_input:
   """ Required : 
   eccExtVendCnt
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtVendCnt:list[Erp_Tablesets_ECCExtensionVendCntTableset] = obj["eccExtVendCnt"]
      self.payLoad:str = obj["payLoad"]
      pass

class SucoPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SurdCustomListRFQHead_input:
   """ Required : 
   eccExtRFQHead
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SurdCustomListRFQHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SurdCustomListRFQItem_input:
   """ Required : 
   eccExtRFQItem
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRFQItem:list[Erp_Tablesets_ECCExtensionRFQItemTableset] = obj["eccExtRFQItem"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SurdCustomListRFQItem_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SurdCustomTagRFQHead_input:
   """ Required : 
   eccExtRFQHead
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SurdCustomTagRFQHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SurdCustomTagRFQItem_input:
   """ Required : 
   eccExtRFQItem
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRFQItem:list[Erp_Tablesets_ECCExtensionRFQItemTableset] = obj["eccExtRFQItem"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SurdCustomTagRFQItem_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SurdCustomXML_input:
   """ Required : 
   eccExtRFQHead
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SurdCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SurdPayload_input:
   """ Required : 
   eccExtRFQHead
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.payLoad:str = obj["payLoad"]
      pass

class SurdPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuruCustomListRFQHead_input:
   """ Required : 
   eccExtRFQHead
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SuruCustomListRFQHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SuruCustomListRFQItem_input:
   """ Required : 
   eccExtRFQItem
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtRFQItem:list[Erp_Tablesets_ECCExtensionRFQItemTableset] = obj["eccExtRFQItem"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SuruCustomListRFQItem_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SuruCustomTagRFQHead_input:
   """ Required : 
   eccExtRFQHead
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SuruCustomTagRFQHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuruCustomTagRFQItem_input:
   """ Required : 
   eccExtRFQItem
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtRFQItem:list[Erp_Tablesets_ECCExtensionRFQItemTableset] = obj["eccExtRFQItem"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SuruCustomTagRFQItem_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuruPayload_input:
   """ Required : 
   eccExtRFQHead
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtRFQHead:list[Erp_Tablesets_ECCExtensionRFQHeadTableset] = obj["eccExtRFQHead"]
      self.payLoad:str = obj["payLoad"]
      pass

class SuruPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuspCustomListVendor_input:
   """ Required : 
   eccExtVendor
   eccExtList
   """  
   def __init__(self, obj):
      self.eccExtVendor:list[Erp_Tablesets_ECCExtensionVendorTableset] = obj["eccExtVendor"]
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

class SuspCustomListVendor_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.eccExtList:list[Erp_Tablesets_ECCExtensionTableset] = obj["eccExtList"]
      pass

      """  output parameters  """  

class SuspCustomTagVendor_input:
   """ Required : 
   eccExtVendor
   columnName
   customValue
   """  
   def __init__(self, obj):
      self.eccExtVendor:list[Erp_Tablesets_ECCExtensionVendorTableset] = obj["eccExtVendor"]
      self.columnName:str = obj["columnName"]
      self.customValue:str = obj["customValue"]
      pass

class SuspCustomTagVendor_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.customValue:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuspCustomXML_input:
   """ Required : 
   eccExtVendor
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtVendor:list[Erp_Tablesets_ECCExtensionVendorTableset] = obj["eccExtVendor"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SuspCustomXML_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuspFinalXml_input:
   """ Required : 
   eccExtVendor
   xmlOverride
   xmlDoc
   """  
   def __init__(self, obj):
      self.eccExtVendor:list[Erp_Tablesets_ECCExtensionVendorTableset] = obj["eccExtVendor"]
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class SuspFinalXml_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.xmlOverride:bool = obj["xmlOverride"]
      self.xmlDoc:str = obj["parameters"]
      pass

      """  output parameters  """  

class SuspPayload_input:
   """ Required : 
   eccExtVendor
   payLoad
   """  
   def __init__(self, obj):
      self.eccExtVendor:list[Erp_Tablesets_ECCExtensionVendorTableset] = obj["eccExtVendor"]
      self.payLoad:str = obj["payLoad"]
      pass

class SuspPayload_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.payLoad:str = obj["parameters"]
      pass

      """  output parameters  """  

class System_Xml_Linq_XAttribute:
   def __init__(self, obj):
      self.IsNamespaceDeclaration:bool = obj["IsNamespaceDeclaration"]
      self.Name:list[System_Xml_Linq_XName] = obj["Name"]
      self.NextAttribute:list[System_Xml_Linq_XAttribute] = obj["NextAttribute"]
      self.NodeType:int = obj["NodeType"]
      self.PreviousAttribute:list[System_Xml_Linq_XAttribute] = obj["PreviousAttribute"]
      self.Value:str = obj["Value"]
      self.BaseUri:str = obj["BaseUri"]
      self.Document:list[System_Xml_Linq_XDocument] = obj["Document"]
      self.Parent:list[System_Xml_Linq_XElement] = obj["Parent"]
      pass

class System_Xml_Linq_XDeclaration:
   def __init__(self, obj):
      self.Encoding:str = obj["Encoding"]
      self.Standalone:str = obj["Standalone"]
      self.Version:str = obj["Version"]
      pass

class System_Xml_Linq_XDocument:
   def __init__(self, obj):
      self.Declaration:list[System_Xml_Linq_XDeclaration] = obj["Declaration"]
      self.DocumentType:list[System_Xml_Linq_XDocumentType] = obj["DocumentType"]
      self.NodeType:int = obj["NodeType"]
      self.Root:list[System_Xml_Linq_XElement] = obj["Root"]
      self.FirstNode:list[System_Xml_Linq_XNode] = obj["FirstNode"]
      self.LastNode:list[System_Xml_Linq_XNode] = obj["LastNode"]
      self.NextNode:list[System_Xml_Linq_XNode] = obj["NextNode"]
      self.PreviousNode:list[System_Xml_Linq_XNode] = obj["PreviousNode"]
      self.BaseUri:str = obj["BaseUri"]
      self.Document:list[System_Xml_Linq_XDocument] = obj["Document"]
      self.Parent:list[System_Xml_Linq_XElement] = obj["Parent"]
      pass

class System_Xml_Linq_XDocumentType:
   def __init__(self, obj):
      self.InternalSubset:str = obj["InternalSubset"]
      self.Name:str = obj["Name"]
      self.NodeType:int = obj["NodeType"]
      self.PublicId:str = obj["PublicId"]
      self.SystemId:str = obj["SystemId"]
      self.NextNode:list[System_Xml_Linq_XNode] = obj["NextNode"]
      self.PreviousNode:list[System_Xml_Linq_XNode] = obj["PreviousNode"]
      self.BaseUri:str = obj["BaseUri"]
      self.Document:list[System_Xml_Linq_XDocument] = obj["Document"]
      self.Parent:list[System_Xml_Linq_XElement] = obj["Parent"]
      pass

class System_Xml_Linq_XElement:
   def __init__(self, obj):
      self.FirstAttribute:list[System_Xml_Linq_XAttribute] = obj["FirstAttribute"]
      self.HasAttributes:bool = obj["HasAttributes"]
      self.HasElements:bool = obj["HasElements"]
      self.IsEmpty:bool = obj["IsEmpty"]
      self.LastAttribute:list[System_Xml_Linq_XAttribute] = obj["LastAttribute"]
      self.Name:list[System_Xml_Linq_XName] = obj["Name"]
      self.NodeType:int = obj["NodeType"]
      self.Value:str = obj["Value"]
      self.FirstNode:list[System_Xml_Linq_XNode] = obj["FirstNode"]
      self.LastNode:list[System_Xml_Linq_XNode] = obj["LastNode"]
      self.NextNode:list[System_Xml_Linq_XNode] = obj["NextNode"]
      self.PreviousNode:list[System_Xml_Linq_XNode] = obj["PreviousNode"]
      self.BaseUri:str = obj["BaseUri"]
      self.Document:list[System_Xml_Linq_XDocument] = obj["Document"]
      self.Parent:list[System_Xml_Linq_XElement] = obj["Parent"]
      pass

class System_Xml_Linq_XName:
   def __init__(self, obj):
      self.LocalName:str = obj["LocalName"]
      self.Namespace:list[System_Xml_Linq_XNamespace] = obj["Namespace"]
      self.NamespaceName:str = obj["NamespaceName"]
      pass

class System_Xml_Linq_XNamespace:
   def __init__(self, obj):
      self.NamespaceName:str = obj["NamespaceName"]
      pass

class System_Xml_Linq_XNode:
   def __init__(self, obj):
      self.NextNode:list[System_Xml_Linq_XNode] = obj["NextNode"]
      self.PreviousNode:list[System_Xml_Linq_XNode] = obj["PreviousNode"]
      self.BaseUri:str = obj["BaseUri"]
      self.Document:list[System_Xml_Linq_XDocument] = obj["Document"]
      self.NodeType:int = obj["NodeType"]
      self.Parent:list[System_Xml_Linq_XElement] = obj["Parent"]
      pass

class UDMapIsEnabled_input:
   """ Required : 
   mapID
   msgType
   tableName
   """  
   def __init__(self, obj):
      self.mapID:str = obj["mapID"]
      self.msgType:str = obj["msgType"]
      self.tableName:str = obj["tableName"]
      pass

class UDMapIsEnabled_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

