import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.SalesOrderSvc
# Description: The Sales order main object
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/$metadata",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get SalesOrders items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_SalesOrders
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders",headers=creds) as resp:
           return await resp.json()

async def post_SalesOrders(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_SalesOrders
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderHedRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderHedRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum(Company, OrderNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the SalesOrder item
   Description: Calls GetByID to retrieve the SalesOrder item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_SalesOrder
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_SalesOrders_Company_OrderNum(Company, OrderNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update SalesOrder for the service
   Description: Calls UpdateExt to update SalesOrder. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_SalesOrder
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderHedRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_SalesOrders_Company_OrderNum(Company, OrderNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete SalesOrder item
   Description: Call UpdateExt to delete SalesOrder item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_SalesOrder
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OHOrderMscs(Company, OrderNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OHOrderMscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OHOrderMscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OHOrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OHOrderMscs",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OHOrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OHOrderMsc item
   Description: Calls GetByID to retrieve the OHOrderMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OHOrderMsc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OHOrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OHOrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderDtls(Company, OrderNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderDtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderDtls",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderDtls_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderDtl item
   Description: Calls GetByID to retrieve the OrderDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderDtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderHedUPS(Company, OrderNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderHedUPS items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderHedUPS1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedUPSRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderHedUPS",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderHedUPS_Company_OrderNum_UPSQVSeq(Company, OrderNum, UPSQVSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderHedUP item
   Description: Calls GetByID to retrieve the OrderHedUP item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderHedUP1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param UPSQVSeq: Desc: UPSQVSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHedUPSRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderHedUPS(" + Company + "," + OrderNum + "," + UPSQVSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderRepComms(Company, OrderNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderRepComms items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderRepComms1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRepCommRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderRepComms",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderRepComms_Company_OrderNum_SalesRepCode_Seq(Company, OrderNum, SalesRepCode, Seq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRepComm item
   Description: Calls GetByID to retrieve the OrderRepComm item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRepComm1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param SalesRepCode: Desc: SalesRepCode   Required: True   Allow empty value : True
      :param Seq: Desc: Seq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRepCommRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderRepComms(" + Company + "," + OrderNum + "," + SalesRepCode + "," + Seq + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderScheds(Company, OrderNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderScheds items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderScheds1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderScheds",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderScheds_Company_OrderNum_PaySeq(Company, OrderNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderSched item
   Description: Calls GetByID to retrieve the OrderSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderSched1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderScheds(" + Company + "," + OrderNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderHedAttches(Company, OrderNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderHedAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderHedAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderHedAttches",headers=creds) as resp:
           return await resp.json()

async def get_SalesOrders_Company_OrderNum_OrderHedAttches_Company_OrderNum_DrawingSeq(Company, OrderNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderHedAttch item
   Description: Calls GetByID to retrieve the OrderHedAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderHedAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SalesOrders(" + Company + "," + OrderNum + ")/OrderHedAttches(" + Company + "," + OrderNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OHOrderMscs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OHOrderMscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OHOrderMscs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OHOrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OHOrderMscs",headers=creds) as resp:
           return await resp.json()

async def post_OHOrderMscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OHOrderMscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OHOrderMscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OHOrderMscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OHOrderMscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OHOrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OHOrderMsc item
   Description: Calls GetByID to retrieve the OHOrderMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OHOrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OHOrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OHOrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OHOrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OHOrderMsc for the service
   Description: Calls UpdateExt to update OHOrderMsc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OHOrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OHOrderMscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OHOrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OHOrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OHOrderMsc item
   Description: Call UpdateExt to delete OHOrderMsc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OHOrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OHOrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderDtls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls",headers=creds) as resp:
           return await resp.json()

async def post_OrderDtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderDtl item
   Description: Calls GetByID to retrieve the OrderDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderDtls_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderDtl for the service
   Description: Calls UpdateExt to update OrderDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderDtls_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderDtl item
   Description: Call UpdateExt to delete OrderDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderMscs(Company, OrderNum, OrderLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderMscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderMscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderMscs",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderMsc item
   Description: Calls GetByID to retrieve the OrderMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderMsc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderRels(Company, OrderNum, OrderLine, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderRels items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderRels1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRelRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderRels",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company, OrderNum, OrderLine, OrderRelNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRel item
   Description: Calls GetByID to retrieve the OrderRel item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRel1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRelRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderDtlAttches(Company, OrderNum, OrderLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderDtlAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderDtlAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderDtlAttches",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtls_Company_OrderNum_OrderLine_OrderDtlAttches_Company_OrderNum_OrderLine_DrawingSeq(Company, OrderNum, OrderLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderDtlAttch item
   Description: Calls GetByID to retrieve the OrderDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderDtlAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtls(" + Company + "," + OrderNum + "," + OrderLine + ")/OrderDtlAttches(" + Company + "," + OrderNum + "," + OrderLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderMscs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderMscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderMscs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderMscs",headers=creds) as resp:
           return await resp.json()

async def post_OrderMscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderMscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderMscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderMscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderMscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderMsc item
   Description: Calls GetByID to retrieve the OrderMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderMsc for the service
   Description: Calls UpdateExt to update OrderMsc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderMscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderMscs_Company_OrderNum_OrderLine_SeqNum(Company, OrderNum, OrderLine, SeqNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderMsc item
   Description: Call UpdateExt to delete OrderMsc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderMscs(" + Company + "," + OrderNum + "," + OrderLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderRels(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderRels items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderRels
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRelRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels",headers=creds) as resp:
           return await resp.json()

async def post_OrderRels(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderRels
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderRelRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderRelRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company, OrderNum, OrderLine, OrderRelNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRel item
   Description: Calls GetByID to retrieve the OrderRel item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRel
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRelRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company, OrderNum, OrderLine, OrderRelNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderRel for the service
   Description: Calls UpdateExt to update OrderRel. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderRel
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderRelRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company, OrderNum, OrderLine, OrderRelNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderRel item
   Description: Call UpdateExt to delete OrderRel item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderRel
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderRels_Company_OrderNum_OrderLine_OrderRelNum_OrderRelTaxes(Company, OrderNum, OrderLine, OrderRelNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get OrderRelTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_OrderRelTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRelTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")/OrderRelTaxes",headers=creds) as resp:
           return await resp.json()

async def get_OrderRels_Company_OrderNum_OrderLine_OrderRelNum_OrderRelTaxes_Company_OrderNum_OrderLine_OrderRelNum_TaxCode_RateCode_ECAcquisitionSeq(Company, OrderNum, OrderLine, OrderRelNum, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRelTax item
   Description: Calls GetByID to retrieve the OrderRelTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRelTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRelTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")/OrderRelTaxes(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderRelTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderRelTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderRelTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRelTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRelTaxes",headers=creds) as resp:
           return await resp.json()

async def post_OrderRelTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderRelTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderRelTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderRelTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRelTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderRelTaxes_Company_OrderNum_OrderLine_OrderRelNum_TaxCode_RateCode_ECAcquisitionSeq(Company, OrderNum, OrderLine, OrderRelNum, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRelTax item
   Description: Calls GetByID to retrieve the OrderRelTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRelTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRelTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRelTaxes(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderRelTaxes_Company_OrderNum_OrderLine_OrderRelNum_TaxCode_RateCode_ECAcquisitionSeq(Company, OrderNum, OrderLine, OrderRelNum, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderRelTax for the service
   Description: Calls UpdateExt to update OrderRelTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderRelTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderRelTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRelTaxes(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderRelTaxes_Company_OrderNum_OrderLine_OrderRelNum_TaxCode_RateCode_ECAcquisitionSeq(Company, OrderNum, OrderLine, OrderRelNum, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderRelTax item
   Description: Call UpdateExt to delete OrderRelTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderRelTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param OrderRelNum: Desc: OrderRelNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRelTaxes(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderDtlAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderDtlAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderDtlAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtlAttches",headers=creds) as resp:
           return await resp.json()

async def post_OrderDtlAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderDtlAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderDtlAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderDtlAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtlAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderDtlAttches_Company_OrderNum_OrderLine_DrawingSeq(Company, OrderNum, OrderLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderDtlAttch item
   Description: Calls GetByID to retrieve the OrderDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtlAttches(" + Company + "," + OrderNum + "," + OrderLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderDtlAttches_Company_OrderNum_OrderLine_DrawingSeq(Company, OrderNum, OrderLine, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderDtlAttch for the service
   Description: Calls UpdateExt to update OrderDtlAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderDtlAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtlAttches(" + Company + "," + OrderNum + "," + OrderLine + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderDtlAttches_Company_OrderNum_OrderLine_DrawingSeq(Company, OrderNum, OrderLine, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderDtlAttch item
   Description: Call UpdateExt to delete OrderDtlAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderDtlAttches(" + Company + "," + OrderNum + "," + OrderLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderHedUPS(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderHedUPS items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderHedUPS
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedUPSRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedUPS",headers=creds) as resp:
           return await resp.json()

async def post_OrderHedUPS(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderHedUPS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderHedUPSRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderHedUPSRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedUPS", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderHedUPS_Company_OrderNum_UPSQVSeq(Company, OrderNum, UPSQVSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderHedUP item
   Description: Calls GetByID to retrieve the OrderHedUP item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderHedUP
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param UPSQVSeq: Desc: UPSQVSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHedUPSRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedUPS(" + Company + "," + OrderNum + "," + UPSQVSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderHedUPS_Company_OrderNum_UPSQVSeq(Company, OrderNum, UPSQVSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderHedUP for the service
   Description: Calls UpdateExt to update OrderHedUP. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderHedUP
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param UPSQVSeq: Desc: UPSQVSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderHedUPSRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedUPS(" + Company + "," + OrderNum + "," + UPSQVSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderHedUPS_Company_OrderNum_UPSQVSeq(Company, OrderNum, UPSQVSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderHedUP item
   Description: Call UpdateExt to delete OrderHedUP item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderHedUP
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param UPSQVSeq: Desc: UPSQVSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedUPS(" + Company + "," + OrderNum + "," + UPSQVSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderRepComms(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderRepComms items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderRepComms
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderRepCommRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRepComms",headers=creds) as resp:
           return await resp.json()

async def post_OrderRepComms(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderRepComms
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderRepCommRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderRepCommRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRepComms", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderRepComms_Company_OrderNum_SalesRepCode_Seq(Company, OrderNum, SalesRepCode, Seq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderRepComm item
   Description: Calls GetByID to retrieve the OrderRepComm item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderRepComm
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param SalesRepCode: Desc: SalesRepCode   Required: True   Allow empty value : True
      :param Seq: Desc: Seq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderRepCommRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRepComms(" + Company + "," + OrderNum + "," + SalesRepCode + "," + Seq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderRepComms_Company_OrderNum_SalesRepCode_Seq(Company, OrderNum, SalesRepCode, Seq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderRepComm for the service
   Description: Calls UpdateExt to update OrderRepComm. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderRepComm
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param SalesRepCode: Desc: SalesRepCode   Required: True   Allow empty value : True
      :param Seq: Desc: Seq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderRepCommRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRepComms(" + Company + "," + OrderNum + "," + SalesRepCode + "," + Seq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderRepComms_Company_OrderNum_SalesRepCode_Seq(Company, OrderNum, SalesRepCode, Seq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderRepComm item
   Description: Call UpdateExt to delete OrderRepComm item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderRepComm
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param SalesRepCode: Desc: SalesRepCode   Required: True   Allow empty value : True
      :param Seq: Desc: Seq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderRepComms(" + Company + "," + OrderNum + "," + SalesRepCode + "," + Seq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderScheds(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderScheds items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderScheds
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderScheds",headers=creds) as resp:
           return await resp.json()

async def post_OrderScheds(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderScheds
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderSchedRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderSchedRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderScheds", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderScheds_Company_OrderNum_PaySeq(Company, OrderNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderSched item
   Description: Calls GetByID to retrieve the OrderSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderScheds(" + Company + "," + OrderNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderScheds_Company_OrderNum_PaySeq(Company, OrderNum, PaySeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderSched for the service
   Description: Calls UpdateExt to update OrderSched. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderSchedRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderScheds(" + Company + "," + OrderNum + "," + PaySeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderScheds_Company_OrderNum_PaySeq(Company, OrderNum, PaySeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderSched item
   Description: Call UpdateExt to delete OrderSched item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderScheds(" + Company + "," + OrderNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderHedAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderHedAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderHedAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedAttches",headers=creds) as resp:
           return await resp.json()

async def post_OrderHedAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderHedAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderHedAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderHedAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderHedAttches_Company_OrderNum_DrawingSeq(Company, OrderNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderHedAttch item
   Description: Calls GetByID to retrieve the OrderHedAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedAttches(" + Company + "," + OrderNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderHedAttches_Company_OrderNum_DrawingSeq(Company, OrderNum, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderHedAttch for the service
   Description: Calls UpdateExt to update OrderHedAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderHedAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedAttches(" + Company + "," + OrderNum + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderHedAttches_Company_OrderNum_DrawingSeq(Company, OrderNum, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderHedAttch item
   Description: Call UpdateExt to delete OrderHedAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHedAttches(" + Company + "," + OrderNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_HedTaxSums(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get HedTaxSums items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_HedTaxSums
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.HedTaxSumRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/HedTaxSums",headers=creds) as resp:
           return await resp.json()

async def post_HedTaxSums(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_HedTaxSums
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/HedTaxSums", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the HedTaxSum item
   Description: Calls GetByID to retrieve the HedTaxSum item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update HedTaxSum for the service
   Description: Calls UpdateExt to update HedTaxSum. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete HedTaxSum item
   Description: Call UpdateExt to delete HedTaxSum item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_OrderHists(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get OrderHists items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_OrderHists
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHistRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHists",headers=creds) as resp:
           return await resp.json()

async def post_OrderHists(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_OrderHists
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.OrderHistRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.OrderHistRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHists", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_OrderHists_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the OrderHist item
   Description: Calls GetByID to retrieve the OrderHist item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_OrderHist
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.OrderHistRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHists(" + Company + "," + OrderNum + "," + OrderLine + ")",headers=creds) as resp:
           return await resp.json()

async def patch_OrderHists_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update OrderHist for the service
   Description: Calls UpdateExt to update OrderHist. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_OrderHist
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.OrderHistRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHists(" + Company + "," + OrderNum + "," + OrderLine + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_OrderHists_Company_OrderNum_OrderLine(Company, OrderNum, OrderLine, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete OrderHist item
   Description: Call UpdateExt to delete OrderHist item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_OrderHist
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param OrderNum: Desc: OrderNum   Required: True
      :param OrderLine: Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/OrderHists(" + Company + "," + OrderNum + "," + OrderLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_PartSubs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PartSubs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PartSubs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/PartSubs",headers=creds) as resp:
           return await resp.json()

async def post_PartSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PartSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/PartSubs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PartSub item
   Description: Calls GetByID to retrieve the PartSub item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PartSub for the service
   Description: Calls UpdateExt to update PartSub. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PartSubsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PartSubs_Company_PartNum_SubPart(Company, PartNum, SubPart, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PartSub item
   Description: Call UpdateExt to delete PartSub item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PartSub
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SubPart: Desc: SubPart   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/PartSubs(" + Company + "," + PartNum + "," + SubPart + ")",headers=creds) as resp:
           return await resp.json()

async def get_SelectedSerialNumbers(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get SelectedSerialNumbers items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_SelectedSerialNumbers
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.SelectedSerialNumbersRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SelectedSerialNumbers",headers=creds) as resp:
           return await resp.json()

async def post_SelectedSerialNumbers(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_SelectedSerialNumbers
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.SelectedSerialNumbersRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.SelectedSerialNumbersRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SelectedSerialNumbers", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_SelectedSerialNumbers_Company_PartNum_SerialNumber(Company, PartNum, SerialNumber, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the SelectedSerialNumber item
   Description: Calls GetByID to retrieve the SelectedSerialNumber item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_SelectedSerialNumber
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SerialNumber: Desc: SerialNumber   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.SelectedSerialNumbersRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SelectedSerialNumbers(" + Company + "," + PartNum + "," + SerialNumber + ")",headers=creds) as resp:
           return await resp.json()

async def patch_SelectedSerialNumbers_Company_PartNum_SerialNumber(Company, PartNum, SerialNumber, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update SelectedSerialNumber for the service
   Description: Calls UpdateExt to update SelectedSerialNumber. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_SelectedSerialNumber
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SerialNumber: Desc: SerialNumber   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.SelectedSerialNumbersRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SelectedSerialNumbers(" + Company + "," + PartNum + "," + SerialNumber + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_SelectedSerialNumbers_Company_PartNum_SerialNumber(Company, PartNum, SerialNumber, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete SelectedSerialNumber item
   Description: Call UpdateExt to delete SelectedSerialNumber item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_SelectedSerialNumber
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param SerialNumber: Desc: SerialNumber   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SelectedSerialNumbers(" + Company + "," + PartNum + "," + SerialNumber + ")",headers=creds) as resp:
           return await resp.json()

async def get_SNFormats(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get SNFormats items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_SNFormats
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.SNFormatRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SNFormats",headers=creds) as resp:
           return await resp.json()

async def post_SNFormats(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_SNFormats
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.SNFormatRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.SNFormatRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SNFormats", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_SNFormats_Company_PartNum_Plant(Company, PartNum, Plant, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the SNFormat item
   Description: Calls GetByID to retrieve the SNFormat item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_SNFormat
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.SNFormatRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SNFormats(" + Company + "," + PartNum + "," + Plant + ")",headers=creds) as resp:
           return await resp.json()

async def patch_SNFormats_Company_PartNum_Plant(Company, PartNum, Plant, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update SNFormat for the service
   Description: Calls UpdateExt to update SNFormat. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_SNFormat
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.SNFormatRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SNFormats(" + Company + "," + PartNum + "," + Plant + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_SNFormats_Company_PartNum_Plant(Company, PartNum, Plant, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete SNFormat item
   Description: Call UpdateExt to delete SNFormat item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_SNFormat
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param Plant: Desc: Plant   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/SNFormats(" + Company + "," + PartNum + "," + Plant + ")",headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get TaxConnectStatus items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_TaxConnectStatus
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/TaxConnectStatus",headers=creds) as resp:
           return await resp.json()

async def post_TaxConnectStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_TaxConnectStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/TaxConnectStatus", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus_Company(Company, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the TaxConnectStatu item
   Description: Calls GetByID to retrieve the TaxConnectStatu item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def patch_TaxConnectStatus_Company(Company, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update TaxConnectStatu for the service
   Description: Calls UpdateExt to update TaxConnectStatu. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/TaxConnectStatus(" + Company + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_TaxConnectStatus_Company(Company, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete TaxConnectStatu item
   Description: Call UpdateExt to delete TaxConnectStatu item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def get_List(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.OrderHedListRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def get_GetRows(whereClauseOrderHed, whereClauseOrderHedAttch, whereClauseOHOrderMsc, whereClauseOrderDtl, whereClauseOrderDtlAttch, whereClauseOrderMsc, whereClauseOrderRel, whereClauseOrderRelTax, whereClauseOrderHedUPS, whereClauseOrderRepComm, whereClauseOrderSched, whereClauseHedTaxSum, whereClauseOrderHist, whereClausePartSubs, whereClauseSelectedSerialNumbers, whereClauseSNFormat, whereClauseTaxConnectStatus, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderHed=" + whereClauseOrderHed
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderHedAttch=" + whereClauseOrderHedAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOHOrderMsc=" + whereClauseOHOrderMsc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderDtl=" + whereClauseOrderDtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderDtlAttch=" + whereClauseOrderDtlAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderMsc=" + whereClauseOrderMsc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderRel=" + whereClauseOrderRel
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderRelTax=" + whereClauseOrderRelTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderHedUPS=" + whereClauseOrderHedUPS
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderRepComm=" + whereClauseOrderRepComm
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderSched=" + whereClauseOrderSched
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseHedTaxSum=" + whereClauseHedTaxSum
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseOrderHist=" + whereClauseOrderHist
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePartSubs=" + whereClausePartSubs
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseSelectedSerialNumbers=" + whereClauseSelectedSerialNumbers
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseSNFormat=" + whereClauseSNFormat
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseTaxConnectStatus=" + whereClauseTaxConnectStatus
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetByID(orderNum, epicorHeaders = None):
   """  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "orderNum=" + orderNum

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetList(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_CheckCreditCardTranForOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCreditCardTranForOrder
   Description: It checks if a sales order already has a Sales Credit Card transaction
   OperationID: CheckCreditCardTranForOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCreditCardTranForOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCreditCardTranForOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CounterSaleValidateInvQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CounterSaleValidateInvQty
   Description: Validates inventory quantity for lines on a counter sale
   OperationID: CounterSaleValidateInvQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CounterSaleValidateInvQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CounterSaleValidateInvQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ProcessCounterSaleUsingOrderLinesInDatabase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ProcessCounterSaleUsingOrderLinesInDatabase
   Description: Process the counter sale by generating the packing slip and/or the invoice.  This method does not require order lines to be
in the reference dataset.  This method will use the lines that exist in the database for processing.
for the order.
   OperationID: ProcessCounterSaleUsingOrderLinesInDatabase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessCounterSaleUsingOrderLinesInDatabase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessCounterSaleUsingOrderLinesInDatabase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateCounterSaleSN(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateCounterSaleSN
   Description: Validate serial numbers are entered for each part.  This method uses OrderRel records from the
database for the validations.
   OperationID: ValidateCounterSaleSN
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateCounterSaleSN_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateCounterSaleSN_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ProcessPayGateCreditCardStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ProcessPayGateCreditCardStatus
   Description: Process the pay gate credit card status
   OperationID: ProcessPayGateCreditCardStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessPayGateCreditCardStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessPayGateCreditCardStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateOTSTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateOTSTaxID
   Description: Supplier Tax Id validation
   OperationID: ValidateOTSTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateOTSTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateOTSTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConsolidateOrdersToCounterSale(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConsolidateOrdersToCounterSale
   Description: Consolidates a list of order numbers into a single counter sale order
   OperationID: ConsolidateOrdersToCounterSale
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConsolidateOrdersToCounterSale_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConsolidateOrdersToCounterSale_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderHed
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderHedAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderHedAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderHedAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderHedAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderHedAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOHOrderMsc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOHOrderMsc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOHOrderMsc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOHOrderMsc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOHOrderMsc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderDtlAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderDtlAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderDtlAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderDtlAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderDtlAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderMsc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderMsc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderMsc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderMsc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderMsc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderRel(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderRel
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderRel
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderRel_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderRel_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderRelTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderRelTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderRelTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderRelTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderRelTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderHedUPS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderHedUPS
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderHedUPS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderHedUPS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderHedUPS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewOrderSched(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewOrderSched
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewOrderSched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewOrderSched_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewOrderSched_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteByID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowID(id, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "id=" + id

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowIDs(ids, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "ids=" + ids

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_Update(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateLineMiscChargesFromQuote(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateLineMiscChargesFromQuote
   Description: Method to call to create Line Misc Charges when adding a new OrderDtl record from a quote
   OperationID: CreateLineMiscChargesFromQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateLineMiscChargesFromQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateLineMiscChargesFromQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateLinesFromHistory(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateLinesFromHistory
   Description: Create new lines for every Order Lines selected from History,
   OperationID: CreateLinesFromHistory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateLinesFromHistory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateLinesFromHistory_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateOrderDtlComplements(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateOrderDtlComplements
   Description: Create new lines for every complement selected for a given Line,
   OperationID: CreateOrderDtlComplements
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateOrderDtlComplements_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateOrderDtlComplements_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateOrderFromQuote(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateOrderFromQuote
   Description: Creates an order from a quote.
   OperationID: CreateOrderFromQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateOrderFromQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateOrderFromQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateOrderFromQuoteSaveOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateOrderFromQuoteSaveOTS
   Description: Creates an order from a quote and saves the OTS.
   OperationID: CreateOrderFromQuoteSaveOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateOrderFromQuoteSaveOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateOrderFromQuoteSaveOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ETCValidateAddress(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ETCValidateAddress
   Description: Call tax integration and loads temp tables from the results.
   OperationID: ETCValidateAddress
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ETCValidateAddress_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ETCValidateAddress_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ETCAfterAddressValidationOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ETCAfterAddressValidationOTS
   Description: After the tax integration has been called, update the Sales Order on one time shipment address if it
was changed.
   OperationID: ETCAfterAddressValidationOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ETCAfterAddressValidationOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ETCAfterAddressValidationOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ETCAfterRelAddressValidationOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ETCAfterRelAddressValidationOTS
   Description: After the tax integration has been called, update the Sales Order Release on one time shipment address if it
was changed.
   OperationID: ETCAfterRelAddressValidationOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ETCAfterRelAddressValidationOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ETCAfterRelAddressValidationOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetByIDLinkedOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetByIDLinkedOrder
   Description: Update Order Header information with values from the Ship To when the Ship To is changed.
   OperationID: GetByIDLinkedOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetByIDLinkedOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByIDLinkedOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCalcQtyPref(epicorHeaders = None):
   """  
   Summary: Invoke method GetCalcQtyPref
   OperationID: GetCalcQtyPref
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCalcQtyPref_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetGlbSugPOChg(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGlbSugPOChg
   Description: Get the GlbSugPOChg records for an Order Release.
   OperationID: GetGlbSugPOChg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGlbSugPOChg_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGlbSugPOChg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGlbSugPOChgForOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGlbSugPOChgForOrder
   Description: Get all GlbSugPOChg records for an order
   OperationID: GetGlbSugPOChgForOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGlbSugPOChgForOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGlbSugPOChgForOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetInventoryQuantities(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetInventoryQuantities
   Description: Deprecated Method that updates the Available and On Hand Quantity on OrderDtl and/or OrderRel.
   OperationID: GetInventoryQuantities
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetInventoryQuantities_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetInventoryQuantities_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetJobProd(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJobProd
   Description: Get the JobProd records for an Order Release.
   OperationID: GetJobProd
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJobProd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobProd_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetJobProdForRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetJobProdForRelease
   Description: Get the JobProd records for an Order Release - overload method with release number.
   OperationID: GetJobProdForRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetJobProdForRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetJobProdForRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetKitComponents(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetKitComponents
   Description: Calls GetKitComponents from SalesKitting.p, which creates a list of OrderDtl records
that will be treated as kit components of the given OrderLine.
   OperationID: GetKitComponents
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetKitComponents_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetKitComponents_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsAuthorizedTerritories(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsAuthorizedTerritories
   Description: This method returns rows with territory authorization considerations
   OperationID: GetRowsAuthorizedTerritories
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsAuthorizedTerritories_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsAuthorizedTerritories_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSalesOrderRelationshipMap(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSalesOrderRelationshipMap
   Description: Returns a serialized json string to show a Relationship Map for Sales Order
   OperationID: GetSalesOrderRelationshipMap
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSalesOrderRelationshipMap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSalesOrderRelationshipMap_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListCustom(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListCustom
   Description: This overload of GetList adds Sales Orders which ShipTo's fall within authorized territories.
   OperationID: GetListCustom
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListCustom_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListCustom_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewSalesKit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewSalesKit
   Description: Creates a new OrderDtl and sets it as a kit component for the given OrderLine
   OperationID: GetNewSalesKit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewSalesKit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewSalesKit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPayBTFlagDefaults(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPayBTFlagDefaults
   OperationID: GetPayBTFlagDefaults
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPayBTFlagDefaults_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPayBTFlagDefaults_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPlantConfCtrlInfo(epicorHeaders = None):
   """  
   Summary: Invoke method GetPlantConfCtrlInfo
   Description: Retrieves specific data from PlantConfCtrl for sale order form
   OperationID: GetPlantConfCtrlInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPlantConfCtrlInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetQuoteQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetQuoteQty
   Description: Get the QuoteQty records for an Order Release.
   OperationID: GetQuoteQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetQuoteQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetQuoteQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsCustomerTracker(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsCustomerTracker
   Description: Calls the normal GetRows method and then constructs a custom data set combining Hed/Dtl fields for the customer tracker.
   OperationID: GetRowsCustomerTracker
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsCustomerTracker_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsCustomerTracker_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForCashReceipt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForCashReceipt
   Description: Invokes GetRows filtering on orders for the specified Cash Receipt
   OperationID: GetRowsForCashReceipt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForCashReceipt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForCashReceipt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForInvoice
   Description: Invokes GetRows filtering on orders for the specified Invoice
   OperationID: GetRowsForInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForQuote(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForQuote
   Description: Invokes GetRows filtering on orders for the specified Quote
   OperationID: GetRowsForQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForShipment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForShipment
   Description: Invokes GetRows filtering on orders for the specified Customer Shipment
   OperationID: GetRowsForShipment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForShipment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForShipment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSelectSerialNumbersParams(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSelectSerialNumbersParams
   OperationID: GetSelectSerialNumbersParams
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSelectSerialNumbersParams_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSelectSerialNumbersParams_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSmartString(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSmartString
   Description: Generates the SmartString for kit component configured part
   OperationID: GetSmartString
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSmartString_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSmartString_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetUIParams(epicorHeaders = None):
   """  
   Summary: Invoke method GetUIParams
   Description: Get the parameters needed for the UI on startup.
   OperationID: GetUIParams
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetUIParams_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GlbSugPOChgDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GlbSugPOChgDelete
   Description: Delete a new GlbSugPOChg record.
   OperationID: GlbSugPOChgDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GlbSugPOChgDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GlbSugPOChgDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GlbSugPOChgUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GlbSugPOChgUpdate
   Description: Update/Add a new GlbSugPOChg record.
   OperationID: GlbSugPOChgUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GlbSugPOChgUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GlbSugPOChgUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_JobProdDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method JobProdDelete
   Description: Delete JobProd records.
   OperationID: JobProdDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/JobProdDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/JobProdDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_KitCompPartCreate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method KitCompPartCreate
   Description: Configured kit component part creation
   OperationID: KitCompPartCreate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/KitCompPartCreate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/KitCompPartCreate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MasterUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MasterUpdate
   Description: Perform all validations associated with the Update.  We have combined all method calls that were being called
at update into this one method.  Making multiple BL calls is a performance issue and this increases performance.
   OperationID: MasterUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MasterUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MasterUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeARLOCID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeARLOCID
   Description: Validate ARLOCID value
   OperationID: OnChangeARLOCID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeARLOCID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeARLOCID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCreditCardOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCreditCardOrder
   Description: This method validates field CreditCardOrder
   OperationID: OnChangeCreditCardOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCreditCardOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCreditCardOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateCurrencyCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateCurrencyCode
   Description: This method is used to validate the proposed Currency Code for a Sales Order.
   OperationID: ValidateCurrencyCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateCurrencyCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateCurrencyCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInvCurrCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInvCurrCode
   Description: This method is used to validate the proposed Invoice Currency Code for a Sales Order.
   OperationID: ValidateInvCurrCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInvCurrCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInvCurrCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeHeaderShipTo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeHeaderShipTo
   Description: Validate changed ShipTo on Order Header
   OperationID: OnChangeHeaderShipTo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeHeaderShipTo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeHeaderShipTo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofBTConNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofBTConNum
   Description: This method returns the Bill To Contact info.
   OperationID: OnChangeofBTConNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofBTConNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofBTConNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofBTCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofBTCustID
   Description: This method returns the Bill To customer info.
   OperationID: OnChangeofBTCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofBTCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofBTCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfFixedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfFixedAmount
   Description: This method should be called when the taxable amount on the invoice tax
record is changed.
   OperationID: OnChangeOfFixedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfFixedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfFixedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfMktgCampaign(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfMktgCampaign
   Description: This method should be called when MktgCampaign changes. It will validate to select an Active
MktgCampaign. This method defaults the Marketing Event field
   OperationID: OnChangeOfMktgCampaign
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfMktgCampaign_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfMktgCampaign_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfMktgEvnt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfMktgEvnt
   Description: This method should be called when MktgEvent changes. It will validate to select an Active MktgEvent.
   OperationID: OnChangeOfMktgEvnt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfMktgEvnt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfMktgEvnt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfQuoteLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfQuoteLine
   Description: This method should be called when QuoteLine changes.
   OperationID: OnChangeOfQuoteLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfQuoteLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfQuoteLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPhaseID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPhaseID
   Description: Check new phase and return phase info.
   OperationID: OnChangeofPhaseID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPhaseID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPhaseID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeRelShipToNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeRelShipToNum
   Description: Check new phase and return phase info.
   OperationID: OnChangeRelShipToNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeRelShipToNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeRelShipToNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateBAQShippingDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateBAQShippingDate
   Description: Validate the date is a working day as set in the Shipping Calendar. Called from a BAQ.
   OperationID: ValidateBAQShippingDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateBAQShippingDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateBAQShippingDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateShippingDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateShippingDate
   Description: Validate the date is a working day as set in the Shipping Calendar.
   OperationID: ValidateShippingDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateShippingDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateShippingDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofSoldToCreditCheck(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofSoldToCreditCheck
   Description: This method should be called when the sold to customer changes. It will validate the default
bill to customer credit.
The method returns a character string if the customer will go over their credit limit
and the user is given the choice of continuing or not.
   OperationID: OnChangeofSoldToCreditCheck
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofSoldToCreditCheck_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofSoldToCreditCheck_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfTaxAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfTaxAmt
   Description: This method should be called when the taxable amount on the invoice tax
record is changed.
   OperationID: OnChangeOfTaxAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfTaxAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfTaxAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfTaxPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfTaxPercent
   Description: This method should be called when the taxable amount on the invoice tax record is changed.
   OperationID: OnChangeOfTaxPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfTaxPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfTaxPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRgn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRgn
   Description: Validate Tax Region Code entered by the user.
   OperationID: OnChangeofTaxRgn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRgn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRgn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeRateCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeRateCode
   OperationID: OnChangeRateCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeRateCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeRateCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeTaxableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeTaxableAmt
   Description: This method should be called when the taxable amount on the invoice tax
record is changed.
   OperationID: OnChangeTaxableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTaxableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTaxableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeTaxCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeTaxCode
   OperationID: OnChangeTaxCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTaxCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTaxCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCardType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCardType
   Description: OrderDtl after get new logic.
   OperationID: OnChangeCardType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCardType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCardType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateOrderLinesTaxCategoryTypes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateOrderLinesTaxCategoryTypes
   Description: Method to validate that all Order lines have Tax Categories with the same Tax Category Type
   OperationID: ValidateOrderLinesTaxCategoryTypes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateOrderLinesTaxCategoryTypes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateOrderLinesTaxCategoryTypes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OrderDtlGetNewContracts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OrderDtlGetNewContracts
   Description: Method to call when adding a new OrderDtl record for a Contract or a Service Contract
   OperationID: OrderDtlGetNewContracts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OrderDtlGetNewContracts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OrderDtlGetNewContracts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OrderDtlGetNewCounterSale(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OrderDtlGetNewCounterSale
   Description: Method to call when adding a new OrderDtl record for a counter sale
   OperationID: OrderDtlGetNewCounterSale
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OrderDtlGetNewCounterSale_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OrderDtlGetNewCounterSale_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OrderDtlGetNewFromQuote(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OrderDtlGetNewFromQuote
   Description: Method to call when adding a new OrderDtl record from a quote
   OperationID: OrderDtlGetNewFromQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OrderDtlGetNewFromQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OrderDtlGetNewFromQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingOrderSchedPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingOrderSchedPercent
   Description: When the PayPercent field is modified this method makes sure the proposed value is valid.
If the proposed value is valid then the PayAmount of the modified payment is recalculated to match the new PayPercent.
After the PayAmount is recalculated it checks for a difference between the summation of the PayPercent and 100%.
If there's a difference it is adjusted on the last payment.
   OperationID: OnChangingOrderSchedPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingOrderSchedPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingOrderSchedPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangingOrderSchedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangingOrderSchedAmount
   Description: When the PayAmount field is modified this method makes sure the proposed value is valid.
If the proposed value is valid then the PayPercent of the modified payment is recalculated to match the new PayAmount.
After the PayAmount is recalculated it checks for a difference between the summation of the PayPercent and 100%.
If there's a difference it is adjusted on the last payment.
   OperationID: OnChangingOrderSchedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangingOrderSchedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangingOrderSchedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OverCreditLimitUpdateAllowed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OverCreditLimitUpdateAllowed
   Description: This should be called whenever the user selects an order either by typing the
order number on the screen or picking it via a lookup.  This method checks to
see if the order is over the credit limit, and if it is it then checks a system
setting to see if orders over the credit limit can be updated.  If they cannot,
it returns a value of false and updates cannot occur.
   OperationID: OverCreditLimitUpdateAllowed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OverCreditLimitUpdateAllowed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OverCreditLimitUpdateAllowed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PhantomComponents(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PhantomComponents
   Description: This procedure will explode the BOM of a part set as Phantom
   OperationID: PhantomComponents
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PhantomComponents_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PhantomComponents_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ProcessCounterSale(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ProcessCounterSale
   Description: Process the counter sale by generating the packing slip and/or the invoice
for the order.
   OperationID: ProcessCounterSale
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessCounterSale_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessCounterSale_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ProcessQuickEntry(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ProcessQuickEntry
   Description: Process the Quick Entry job options on the order detail lines.
   OperationID: ProcessQuickEntry
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessQuickEntry_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessQuickEntry_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RebuildShipUPS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RebuildShipUPS
   OperationID: RebuildShipUPS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RebuildShipUPS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RebuildShipUPS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcKitPriceAfterConfig(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcKitPriceAfterConfig
   Description: When configuring a part, the OrderDtl unit price may change during the configuration
process.  This method is to be called after running product configurator to recalculate
the kit pricing.
   OperationID: RecalcKitPriceAfterConfig
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcKitPriceAfterConfig_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcKitPriceAfterConfig_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RemoveICPOLink(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RemoveICPOLink
   Description: Removes a PO Link from this order.
   OperationID: RemoveICPOLink
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RemoveICPOLink_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RemoveICPOLink_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ReopenOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ReopenOrder
   Description: Reopens an order.
   OperationID: ReopenOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ReopenOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ReopenOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ReopenOrderLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ReopenOrderLine
   Description: Reopens an order line.
   OperationID: ReopenOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ReopenOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ReopenOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_VerifyReopenRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method VerifyReopenRelease
   Description: Precheck before reopening an order release.
   OperationID: VerifyReopenRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/VerifyReopenRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/VerifyReopenRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ReopenReleaseSetAttributeSetID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ReopenReleaseSetAttributeSetID
   Description: Reopens an order release.
   OperationID: ReopenReleaseSetAttributeSetID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ReopenReleaseSetAttributeSetID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ReopenReleaseSetAttributeSetID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ReopenRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ReopenRelease
   Description: Reopens an order release.
   OperationID: ReopenRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ReopenRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ReopenRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_REVISIONHISTORY06(epicorHeaders = None):
   """  
   Summary: Invoke method REVISIONHISTORY06
   OperationID: REVISIONHISTORY06
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/REVISIONHISTORY06_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_SendLinkedICPOSuggestion(epicorHeaders = None):
   """  
   Summary: Invoke method SendLinkedICPOSuggestion
   Description: Send a linked IC PO Suggestion.
   OperationID: SendLinkedICPOSuggestion
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/SendLinkedICPOSuggestion_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_SetCalcQtysPref(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetCalcQtysPref
   OperationID: SetCalcQtysPref
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetCalcQtysPref_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetCalcQtysPref_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetReadyToCalc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetReadyToCalc
   Description: CALCULATE VANTAGE\TAX CONNECT TAX CALCULATIONS
UI NEEDS TO CALL A SAVE BEFORE CALLING THIS PROCEDURE
   OperationID: SetReadyToCalc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetReadyToCalc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetReadyToCalc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetUPSQVEnable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetUPSQVEnable
   OperationID: SetUPSQVEnable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetUPSQVEnable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetUPSQVEnable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeIncotermCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeIncotermCode
   Description: This method checks incoterm
   OperationID: ChangeIncotermCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeIncotermCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeIncotermCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInvQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInvQty
   Description: Validate that the order detail line transaction does not cause the part
to result in negative on hand quantity.
   OperationID: ValidateInvQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInvQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInvQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateSN(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateSN
   OperationID: ValidateSN
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateSN_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateSN_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateSNs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateSNs
   Description: Validate serial numbers are entered for each part before calling generatepackslip.
   OperationID: ValidateSNs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateSNs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateSNs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_VerifySendICPOSugg(epicorHeaders = None):
   """  
   Summary: Invoke method VerifySendICPOSugg
   Description: Returns the text of the message to be presented to the user asking if they
are sure they want to continue with the SendICPOSuggestions process or not.
This method should be called after CheckICPOReadyToSend if the user chose to continue
and before the SendICPOSuggestions method.
   OperationID: VerifySendICPOSugg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/VerifySendICPOSugg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_HasMultipleSubs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method HasMultipleSubs
   OperationID: HasMultipleSubs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/HasMultipleSubs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/HasMultipleSubs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_IsRunOutOnHand(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method IsRunOutOnHand
   OperationID: IsRunOutOnHand
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/IsRunOutOnHand_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/IsRunOutOnHand_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SubmitNewOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SubmitNewOrder
   OperationID: SubmitNewOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SubmitNewOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SubmitNewOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExistingOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExistingOrder
   OperationID: UpdateExistingOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExistingOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExistingOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateOrderDtlDiscountPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateOrderDtlDiscountPercent
   Description: This method updates the DiscountPercent for existing Order Detail Lines in a Sales Order
   OperationID: UpdateOrderDtlDiscountPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateOrderDtlDiscountPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateOrderDtlDiscountPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetBasePartForConfig(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetBasePartForConfig
   Description: This method will retrieve the base configured part number to be passed
to configuration entry
   OperationID: GetBasePartForConfig
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetBasePartForConfig_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBasePartForConfig_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetBasePartAndConfigType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetBasePartAndConfigType
   Description: Retrieve the base configured part and config type
   OperationID: GetBasePartAndConfigType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetBasePartAndConfigType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBasePartAndConfigType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvoiceExists(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvoiceExists
   Description: Check if any invoice exists related to a specific sales order, except for misc and credit memo invoices.
   OperationID: InvoiceExists
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvoiceExists_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvoiceExists_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeTranDocTypeID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeTranDocTypeID
   Description: CSF Taiwan. This method should be called when the transaction document type changes.
   OperationID: OnChangeTranDocTypeID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTranDocTypeID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTranDocTypeID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateProjectID
   Description: This method validate if the project has selected an invoicing method different of Customer Shipment to allow add a sales order into the project.
   OperationID: ValidateProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateCustomer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateCustomer
   Description: This method validate if the project has selected an invoicing method different of Customer Shipment to allow add a sales order into the project.
   OperationID: ValidateCustomer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateCustomer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateCustomer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EccCalcKitValue(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method EccCalcKitValue
   Description: For web basket valuation (BSV) inquiry purpose.
Calculates kit component pricing because not written to db.
Not intended to be executed from UI
   OperationID: EccCalcKitValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/EccCalcKitValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/EccCalcKitValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EccProcessPayment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method EccProcessPayment
   Description: Processing of ECC payments.
Not intended to be executed from UI
   OperationID: EccProcessPayment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/EccProcessPayment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/EccProcessPayment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ECCUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ECCUpdate
   Description: Method specific to ECC.
This method is used by basket valuation (BSV) as a way to add BPM processing because
it is never posted to database and the standard Update will not be fired.
   OperationID: ECCUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ECCUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ECCUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ECCUpdateFinal(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ECCUpdateFinal
   Description: Method specific to ECC.
This is used as a final process using the XML that was sent from the Web.
   OperationID: ECCUpdateFinal
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ECCUpdateFinal_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ECCUpdateFinal_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdatePartAllocQueue(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdatePartAllocQueue
   Description: Update the fulfillment queue with the releases on this sales order.
   OperationID: UpdatePartAllocQueue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdatePartAllocQueue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdatePartAllocQueue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConfigurationChangePart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConfigurationChangePart
   Description: Update Order details information when the Part Number is changed by Configuration Part Creation.
   OperationID: ConfigurationChangePart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConfigurationChangePart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigurationChangePart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConfigurationRefreshQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConfigurationRefreshQty
   Description: Update PriceList Qty breaks and set new unit price on those
when the product code is changed by Document Rule.
   OperationID: ConfigurationRefreshQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConfigurationRefreshQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigurationRefreshQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ConfigurationChangeUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ConfigurationChangeUnitPrice
   Description: Update Price fields when the UnitPrice or DocUnitPRice is changed by a Document Rule.
   OperationID: ConfigurationChangeUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ConfigurationChangeUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ConfigurationChangeUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreOrder
   Description: Pre-check for UpdateExt to validate and return pricing
   OperationID: PreOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedCustomerCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedCustomerCustID
   Description: Method to call when the Order Header CustomerCustID value changes.  This method consolidates the column changing/changed methods for
this field into one method call.
   OperationID: ChangeOrderHedCustomerCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedCustomerCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedCustomerCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedCurrencyCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedCurrencyCode
   Description: Method to call when the Order Header CurrencyCode value changes.  This method consolidates the column changing/changed methods for
this field into one method call.
   OperationID: ChangeOrderHedCurrencyCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedCurrencyCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedCurrencyCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedIntrntlShip(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedIntrntlShip
   Description: Method to call when the Order Header International Shipment flag changes.
   OperationID: ChangeOrderHedIntrntlShip
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedIntrntlShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedIntrntlShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedOTSSaveAs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedOTSSaveAs
   Description: Method to call when the Order Header OTSSaveAs value changes.
   OperationID: ChangeOrderHedOTSSaveAs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedOTSSaveAs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedOTSSaveAs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelOTSSaveAs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelOTSSaveAs
   Description: Method to call when the Order Release OTSSaveAs value changes.
   OperationID: ChangeOrderRelOTSSaveAs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelOTSSaveAs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelOTSSaveAs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedSalesRepCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedSalesRepCode
   Description: Called when a sales rep code is changing.  Updates sales rep information in the passed in dataset.
   OperationID: ChangeOrderHedSalesRepCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedSalesRepCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedSalesRepCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderHedShipToNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderHedShipToNum
   Description: Method to call when the Order Header ShipToNum value changes.  This method consolidates the column changing/changed methods for
this field into one method call.
   OperationID: ChangeOrderHedShipToNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderHedShipToNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderHedShipToNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderDtlProdCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderDtlProdCode
   Description: Update Order Detail information when the order line product group is changed.
   OperationID: ChangeOrderDtlProdCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderDtlProdCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderDtlProdCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OrderDtlQuoteLineChanging(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OrderDtlQuoteLineChanging
   Description: This method should be called when OrderDtl QuoteLine is changing.
   OperationID: OrderDtlQuoteLineChanging
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OrderDtlQuoteLineChanging_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OrderDtlQuoteLineChanging_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderDtlProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderDtlProjectID
   Description: Method to call when the Order Detail Project value changes.  This method consolidates the ValidateProjectID and CheckProjectID methods.
   OperationID: ChangeOrderDtlProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderDtlProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderDtlProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AfterChangedOrderDtlProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AfterChangedOrderDtlProjectID
   Description: Update Order Rel information after the ProjectID has been changed.
   OperationID: AfterChangedOrderDtlProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AfterChangedOrderDtlProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AfterChangedOrderDtlProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRgnWithColumnName(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRgnWithColumnName
   Description: Validate Tax Region Code entered by the user.
   OperationID: OnChangeofTaxRgnWithColumnName
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRgnWithColumnName_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRgnWithColumnName_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxBaseTaxAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxBaseTaxAmt
   Description: This method should be called when the base taxable amount on the OrderRelTax
record is changed.
   OperationID: ChangeOrderRelTaxBaseTaxAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxBaseTaxAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxBaseTaxAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxDocTaxAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxDocTaxAmt
   Description: This method should be called when the doc taxable amount on the OrderRelTax
record is changed.
   OperationID: ChangeOrderRelTaxDocTaxAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxDocTaxAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxDocTaxAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxBaseTaxableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxBaseTaxableAmt
   Description: This method should be called when the base taxable amount on the OrderRelTax tax
record is changed.
   OperationID: ChangeOrderRelTaxBaseTaxableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxBaseTaxableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxBaseTaxableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxDocTaxableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxDocTaxableAmt
   Description: This method should be called when the doc taxable amount on the OrderRelTax tax
record is changed.
   OperationID: ChangeOrderRelTaxDocTaxableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxDocTaxableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxDocTaxableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxBaseFixedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxBaseFixedAmount
   Description: This method should be called when the base taxable amount on the OrderRelTax
record is changed.
   OperationID: ChangeOrderRelTaxBaseFixedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxBaseFixedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxBaseFixedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelTaxDocFixedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelTaxDocFixedAmount
   Description: This method should be called when the doc taxable amount on the OrderRelTax
record is changed.
   OperationID: ChangeOrderRelTaxDocFixedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelTaxDocFixedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelTaxDocFixedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ApplyOrderHedDiscountToLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ApplyOrderHedDiscountToLines
   Description: Apply Order Discount to order lines
   OperationID: ApplyOrderHedDiscountToLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ApplyOrderHedDiscountToLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ApplyOrderHedDiscountToLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CopyOrderCreditLimitAndHoldCheck(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CopyOrderCreditLimitAndHoldCheck
   Description: Checks credit limit and hold status prior to copying an order
   OperationID: CopyOrderCreditLimitAndHoldCheck
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CopyOrderCreditLimitAndHoldCheck_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CopyOrderCreditLimitAndHoldCheck_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeUOMConfirm(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeUOMConfirm
   OperationID: ChangeUOMConfirm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeUOMConfirm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeUOMConfirm_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_getBreakListCodeDesc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method getBreakListCodeDesc
   OperationID: getBreakListCodeDesc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/getBreakListCodeDesc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/getBreakListCodeDesc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetReprintSOAckFlag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetReprintSOAckFlag
   OperationID: SetReprintSOAckFlag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetReprintSOAckFlag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetReprintSOAckFlag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ApplyOrderBasedDiscounts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ApplyOrderBasedDiscounts
   Description: Apply order based discounts to an order.
   OperationID: ApplyOrderBasedDiscounts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ApplyOrderBasedDiscounts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ApplyOrderBasedDiscounts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCodeDescList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCodeDescList
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_NegativeInventoryTest(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method NegativeInventoryTest
   OperationID: NegativeInventoryTest
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/NegativeInventoryTest_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/NegativeInventoryTest_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CCClear(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CCClear
   Description: Procedure to Clear the Credit Card Information
   OperationID: CCClear
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CCClear_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CCClear_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CCLoadTranData(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CCLoadTranData
   Description: Procedure to be called when selecting a record in the Transaction
            history grid, the data selected is loaded in the OrderHed table
   OperationID: CCLoadTranData
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CCLoadTranData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CCLoadTranData_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CCLoadCardNumbers(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CCLoadCardNumbers
   Description: Procedure to be called when selecting a record in the Credit Card Number grid
            the data selected is loaded in the OrderHed table
   OperationID: CCLoadCardNumbers
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CCLoadCardNumbers_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CCLoadCardNumbers_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCreditTran(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCreditTran
   Description: It checks if a sales order already has a Sales Credit Card transaction
   OperationID: CheckCreditTran
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCreditTran_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCreditTran_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CCProcessCard(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CCProcessCard
   Description: Procedure to attempt to process transaction for the amount specified in
            the "Total" field.
   OperationID: CCProcessCard
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CCProcessCard_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CCProcessCard_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeBTCustIDMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeBTCustIDMaster
   Description: This method returns the Bill To customer info.
   OperationID: ChangeBTCustIDMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeBTCustIDMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeBTCustIDMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCardNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCardNumber
   Description: Procedure to validate the Credit Card Number. Validations to be performed:
MOD10, Length and Prefix (according to the credit card type)
   OperationID: ChangeCardNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCardNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCardNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCCAmounts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCCAmounts
   Description: This procedure should be called when any of the Credit Card
            amounts change (from the Column Changed event in the UI) to calculate the
            total to be charged to the credit card
   OperationID: ChangeCCAmounts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCCAmounts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCCAmounts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCommissionable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCommissionable
   Description: Update Order Detail commission information when the Commissionable
flag is changed.
   OperationID: ChangeCommissionable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCommissionable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCommissionable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCommodityCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCommodityCode
   Description: Validate entered Commodity Code
   OperationID: ChangeCommodityCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCommodityCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCommodityCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeContractNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeContractNum
   Description: Update Order Detail information when the contract is changed.
   OperationID: ChangeContractNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeContractNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeContractNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeContractNumMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeContractNumMaster
   OperationID: ChangeContractNumMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeContractNumMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeContractNumMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCounterSale(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCounterSale
   Description: Update Order Header information when the counter sale flag changes.
   OperationID: ChangeCounterSale
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCounterSale_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCounterSale_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCreditExp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCreditExp
   Description: Procedure to validate Credit Card Expiration Date
   OperationID: ChangeCreditExp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCreditExp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCreditExp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCurrencyCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCurrencyCode
   Description: Update Order Header Exchange Rate when the currency code changes.
   OperationID: ChangeCurrencyCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCurrencyCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCurrencyCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCustomer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCustomer
   Description: Update Order Header Credit Card Customer information when the Customer is changed.
   OperationID: ChangeCustomer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCustomer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCustomer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangedCardNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangedCardNumber
   Description: Procedure to encrypt and mask the Credit Card Number. This method should be
called in the Column Changed event, assuming that the validation
performed in ChangeCardNumber was successful.
   OperationID: ChangedCardNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangedCardNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangedCardNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ProcessPayGateMessage(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ProcessPayGateMessage
   Description: Mask CRE Credit Card
   OperationID: ProcessPayGateMessage
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessPayGateMessage_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessPayGateMessage_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDiscBreakListCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDiscBreakListCode
   Description: Change the DiscBreakListCode
   OperationID: ChangeDiscBreakListCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDiscBreakListCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDiscBreakListCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDiscountAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDiscountAmount
   Description: Update Order Detail information when the price discount percent is changed.
   OperationID: ChangeDiscountAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDiscountAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDiscountAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDiscountPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDiscountPercent
   Description: Update Order Detail information when the price discount percent is changed.
   OperationID: ChangeDiscountPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDiscountPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDiscountPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeERSOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeERSOrder
   Description: Update Order Header information when the ERS Order changes.
   OperationID: ChangeERSOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeERSOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeERSOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeGroup
   Description: Update Order Detail information when the Group is changed.
   OperationID: ChangeGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeHedOTSCountryNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeHedOTSCountryNum
   Description: Method to call when changing the OrderHed.OTSCountryNum field.
Update Tax Region Code
   OperationID: ChangeHedOTSCountryNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeHedOTSCountryNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeHedOTSCountryNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeHedUseOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeHedUseOTS
   Description: Method to call when changing the OrderHed.UseOTS field.
Refreshes the address list and contact info
   OperationID: ChangeHedUseOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeHedUseOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeHedUseOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeKitPricing(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeKitPricing
   Description: Recalculates the parent line's unit price when the kit pricing is set to "P", if the kit pricing is set to "C"
the price will be calculated on the AfterUpdate procedure.
   OperationID: ChangeKitPricing
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeKitPricing_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeKitPricing_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeKitQtyPer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeKitQtyPer
   Description: Used to recalculate the SellingQty of the component kit line using the parent's SellingQuantity
   OperationID: ChangeKitQtyPer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeKitQtyPer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeKitQtyPer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMake(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMake
   Description: Update Order Release information when the Make value is changed.
   OperationID: ChangeMake
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMake_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMake_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeManualTaxCalc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeManualTaxCalc
   OperationID: ChangeManualTaxCalc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeManualTaxCalc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeManualTaxCalc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscAmount
   Description: Update Order Miscellaneous information when the amount changes.
   OperationID: ChangeMiscAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscCode
   Description: This method returns default information for the MiscChrg.  Method must use
parameters instead of the dataset due to the problem with changing the primary key field.
Also allows OrderMsc and OHOrderMsc to use the same code
   OperationID: ChangeMiscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscPercent
   Description: Update Order Miscellaneous information when the percentage changes.
   OperationID: ChangeMiscPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscType
   Description: Update Order Miscellaneous information when the type changes.
   OperationID: ChangeMiscType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeNeedByDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeNeedByDate
   Description: Update Order Header information based on the NeedByDate changing.https://localhost/erp10cc/api/help/
   OperationID: ChangeNeedByDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeNeedByDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeNeedByDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeNewNeedByDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeNewNeedByDate
   Description: Update Global PO information based on the New Need By Date changing.
   OperationID: ChangeNewNeedByDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeNewNeedByDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeNewNeedByDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeNewSellingQuantity(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeNewSellingQuantity
   Description: Update Global PO information based on the New Selling Quantity changing.
   OperationID: ChangeNewSellingQuantity
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeNewSellingQuantity_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeNewSellingQuantity_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderDtlPWContract(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderDtlPWContract
   OperationID: ChangeOrderDtlPWContract
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderDtlPWContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderDtlPWContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeODtlWarehouse(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeODtlWarehouse
   Description: Update Order Detail information when the Warehouse changes.  This needs to be
called only for Counter Sales.
   OperationID: ChangeODtlWarehouse
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeODtlWarehouse_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeODtlWarehouse_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelBuyToOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelBuyToOrder
   Description: Update Order Release information when the Buy To Order value is changed.
   OperationID: ChangeOrderRelBuyToOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelBuyToOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelBuyToOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelDropShip(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelDropShip
   Description: Update Order Release information when the Buy To Order value is changed.
   OperationID: ChangeOrderRelDropShip
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelDropShip_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelDropShip_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelFirmRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelFirmRelease
   Description: Update Order Release information when the FirmRelease value is changed.
   OperationID: ChangeOrderRelFirmRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelFirmRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelFirmRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelMarkForNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelMarkForNum
   Description: Update OrderRel information with values from the Mark For when the Mark For is changed.
   OperationID: ChangeOrderRelMarkForNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelMarkForNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelMarkForNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelMFCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelMFCustID
   Description: Method to call when changing the Mark For Customer ID on the OrderRel record.
Validates the Mark For Customer ID and resets the ShipToNum to the Customer default.
   OperationID: ChangeOrderRelMFCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelMFCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelMFCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelOTSCountryNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelOTSCountryNum
   Description: Method to call when changing the OrderRel.OTSCountryNum field.
Update Order Release Tax Region Code
   OperationID: ChangeOrderRelOTSCountryNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelOTSCountryNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelOTSCountryNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelPWContract(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelPWContract
   Description: Update Order Release information with values from the Ship To when the Ship To is changed.
   OperationID: ChangeOrderRelPWContract
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelPWContract_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelPWContract_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelShipTo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelShipTo
   Description: Update Order Release information with values from the Ship To when the Ship To is changed.
   OperationID: ChangeOrderRelShipTo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelShipTo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelShipTo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelShipToContact(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelShipToContact
   Description: Update Order Release ship to contact information when the Release Ship To Contact is changed.
   OperationID: ChangeOrderRelShipToContact
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelShipToContact_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelShipToContact_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelShipToCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelShipToCustID
   Description: Update Order Rel information with values from the Third Party Ship To when the Ship To is changed.
   OperationID: ChangeOrderRelShipToCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelShipToCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelShipToCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelUseOTMF(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelUseOTMF
   Description: Method to call when changing the UseOTMF field the OrderRel record.
Refreshes the address list and contact info
   OperationID: ChangeOrderRelUseOTMF
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelUseOTMF_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelUseOTMF_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOrderRelVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOrderRelVendorID
   Description: Update Order Release information when the Vendor ID is changed.
   OperationID: ChangeOrderRelVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOrderRelVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOrderRelVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeORelWarehouse(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeORelWarehouse
   Description: Update Order Release information when the Warehouse changes.  This needs to be
called only for Counter Sales.
   OperationID: ChangeORelWarehouse
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeORelWarehouse_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeORelWarehouse_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOverrideDiscPriceList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOverrideDiscPriceList
   Description: Rerun the price break calculation if the override price list flag is changed from
true to false.
   OperationID: ChangeOverrideDiscPriceList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOverrideDiscPriceList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOverrideDiscPriceList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOverridePriceList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOverridePriceList
   Description: Rerun the price break calculation if the override price list flag is changed from
true to false.
   OperationID: ChangeOverridePriceList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOverridePriceList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOverridePriceList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartNum
   Description: Update Order Detail information when the Part Number is changed.
This method is not currently used in Sales Order UI
   OperationID: ChangePartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartNumMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartNumMaster
   Description: Perform all validations associated with the Change of the PartNum field.  This method consolidates all the separate methods that were being
called when a partNum changes.  a flag for 'suppressUserPrompts' allows the user to suppress returning to the client for user input.  This
may be useful for webservices etc.  The following 3 bools are used to determine which validations should be run (getPartXRefInfo,
checkPartRevisionChange, and checkChangeKitParent).  From the UI, these are originally defaulted to true but if control is returned to the
UI from this method, the UI changes the setting of these fields when it calls it a subsequent time to only run the necessary code.  From
webservices, this allows more control over which validations are run.
   OperationID: ChangePartNumMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartNumMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartNumMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePlant(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePlant
   Description: Update Order Release information when the Plant is changed.
   OperationID: ChangePlant
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePriceList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePriceList
   Description: Update Order Detail information when the price list is changed.
   OperationID: ChangePriceList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePriceList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePriceList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePricePerCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePricePerCode
   Description: Update Order Detail information when the price per code is changed.
   OperationID: ChangePricePerCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeQuickEntryOption(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeQuickEntryOption
   Description: Update Order Detail Quick Entry options.  This method is called whenever the
CreateNewJob, GetDtls, or SchedJob option is changed.
   OperationID: ChangeQuickEntryOption
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeQuickEntryOption_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeQuickEntryOption_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeQuoteLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeQuoteLine
   Description: Update Order Detail information when selecting a quote line.
   OperationID: ChangeQuoteLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeQuoteLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeQuoteLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeQuoteQtyNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeQuoteQtyNum
   Description: Update the Order Detail line with values from the selected QuoteQty record.
This method should be called whenever the action to select a quote quantity
occurs.
   OperationID: ChangeQuoteQtyNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeQuoteQtyNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeQuoteQtyNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineRelExemptTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineRelExemptTax
   Description: This method should be called when the user populates order release Tax Exempt field previously being blank
record is changed.
   OperationID: OnChangeofLineRelExemptTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineRelExemptTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineRelExemptTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRelUseOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRelUseOTS
   Description: Method to call when changing the OrderRel.UseOTS field.
Refreshes the address list and contact info
   OperationID: ChangeRelUseOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRelUseOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRelUseOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRenewalNbr(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRenewalNbr
   Description: Update Order Detail information when the renewalnbr is changed.
   OperationID: ChangeRenewalNbr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRenewalNbr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRenewalNbr_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRenewalNbrMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRenewalNbrMaster
   OperationID: ChangeRenewalNbrMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRenewalNbrMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRenewalNbrMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRevisionNum
   Description: Update Order Detail information when the Part Revision Number is changed.
This method is not currently used in Sales Order UI
   OperationID: ChangeRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRevNumMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRevNumMaster
   Description: Update Order Detail information when the Part Revision Number is changed.
   OperationID: ChangeRevNumMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRevNumMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRevNumMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRMANum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRMANum
   Description: Update Order Detail RMALine field when the RMA Number is changed.  This method
needs to be called only if the RMA Number was not selected via a lookup.
   OperationID: ChangeRMANum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRMANum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRMANum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSalesRep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSalesRep
   Description: Update rep rate and rep split when the salesrep changes.
   OperationID: ChangeSalesRep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSalesRep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSalesRep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSalesUOM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSalesUOM
   Description: Update Order Detail information when the SalesUM changes
   OperationID: ChangeSalesUOM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSalesUOM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSalesUOM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSellingQtyMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSellingQtyMaster
   Description: Update Order Detail information when the selling quantity is changed.
   OperationID: ChangeSellingQtyMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSellingQtyMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSellingQtyMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSellingQuantity(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSellingQuantity
   Description: Update Order Detail information when the selling quantity is changed.
   OperationID: ChangeSellingQuantity
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSellingQuantity_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSellingQuantity_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSellingReqQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSellingReqQty
   Description: Update Order Release information when the selling quantity is changed.
   OperationID: ChangeSellingReqQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSellingReqQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSellingReqQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeShipToContact(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeShipToContact
   Description: Update Order Header ship to contact information when the Ship To Contact is changed.
   OperationID: ChangeShipToContact
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeShipToContact_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeShipToContact_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeShipToCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeShipToCustID
   Description: Update Order Header information with values from the Third Party Ship To when the Ship To is changed.
   OperationID: ChangeShipToCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeShipToCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeShipToCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeShipToID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeShipToID
   Description: Update Order Header information with values from the Ship To when the Ship To is changed.
   OperationID: ChangeShipToID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeShipToID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeShipToID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSoldToContact(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSoldToContact
   Description: Update Order Header sold to contact information when the Sold To Contact is changed.
   OperationID: ChangeSoldToContact
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSoldToContact_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSoldToContact_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeSoldToID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeSoldToID
   Description: Update Order Header information with values from the Sold To when the Sold To is changed.
   OperationID: ChangeSoldToID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeSoldToID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeSoldToID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxRegionCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxRegionCode
   OperationID: ChangeTaxRegionCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxRegionCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxRegionCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePromotionalPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePromotionalPrice
   Description: This method recalculates PromotionalPrice when PromotionalPrice was changed.
   OperationID: ChangePromotionalPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePromotionalPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePromotionalPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeUnitPrice
   Description: Update Order Detail information when the unit price changes.
   OperationID: ChangeUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeVendorChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeVendorChange
   Description: Update the suggestion status when the "Ready to Send" box is checked or unchecked.
In the GlbSugPOChg dataset, this is field VendorChange.
   OperationID: ChangeVendorChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeVendorChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeVendorChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeWhseCodeMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeWhseCodeMaster
   Description: Update Order Detail information when the selling quantity is changed.
   OperationID: ChangeWhseCodeMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeWhseCodeMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeWhseCodeMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeProjectID
   Description: Update Order Rel information when the ProjectID is changed.
   OperationID: ChangeProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeXPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeXPartNum
   Description: Update Order Detail information when the xpart changes.
   OperationID: ChangeXPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeXPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeXPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckComplianceFail(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckComplianceFail
   Description: Check for every line of the Pack if it requires if it is compliant.
   OperationID: CheckComplianceFail
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckComplianceFail_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckComplianceFail_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckComplianceOrderFail(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckComplianceOrderFail
   Description: Check for every line of the Order if it is compliant.
   OperationID: CheckComplianceOrderFail
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckComplianceOrderFail_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckComplianceOrderFail_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckConfiguration(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckConfiguration
   Description: Checks is part should be configured on a given OrderLine
   OperationID: CheckConfiguration
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckConfiguration_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckConfiguration_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateKBMaxConfigurator(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateKBMaxConfigurator
   Description: Update the KBMax Configurator on the given Order Line.
   OperationID: UpdateKBMaxConfigurator
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateKBMaxConfigurator_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateKBMaxConfigurator_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetKBMaxConfigProdID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetKBMaxConfigProdID
   Description: Set the CPQ Quote Product ID on the Order Line.
This will trigger the loading of the method from CPQ onto the Order Assembly.
   OperationID: SetKBMaxConfigProdID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetKBMaxConfigProdID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetKBMaxConfigProdID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PopulateCallContext(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PopulateCallContext
   Description: Allows for assigning of a generic CallContext for integrations.
   OperationID: PopulateCallContext
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PopulateCallContext_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PopulateCallContext_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckContractNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckContractNum
   OperationID: CheckContractNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckContractNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckContractNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCustomerCreditLimit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCustomerCreditLimit
   Description: This method should be called before the Update method is called for a detail record.
The method returns a character string if the customer will go over their credit limit
and the user is given the choice of continuing or not.
   OperationID: CheckCustomerCreditLimit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCustomerCreditLimit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCustomerCreditLimit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCustomerCreditRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCustomerCreditRelease
   Description: This method should be called before the Update method is called for a release record.
The method returns a character string if the customer will go over their credit limit
and the user is given the choice of continuing or not.
   OperationID: CheckCustomerCreditRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCustomerCreditRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCustomerCreditRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCustOnCreditHold(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCustOnCreditHold
   Description: On selection of an order or customer, checks to see if the customer is on credit hold
and returns a message string if they are.  iOrderNum and cCustID are optional, but
one or the other should be passed.
   OperationID: CheckCustOnCreditHold
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCustOnCreditHold_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCustOnCreditHold_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckICPO(epicorHeaders = None):
   """  
   Summary: Invoke method CheckICPO
   Description: Method to call when trying to determine whether there are any incoming ICPO entries.
This method will return true or false.  .
   OperationID: CheckICPO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckICPO_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CheckICPOReadyToSend(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckICPOReadyToSend
   Description: Checks to see if there are any Intercompany PO's not ready to send for the order.  If
there are, returns message text that should be presented to the user asking if they
would like to continue or not.  This method should be called before
calling the VerifySendICPOSugg and SendICPOSuggestions methods.
   OperationID: CheckICPOReadyToSend
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckICPOReadyToSend_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckICPOReadyToSend_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckKitRevision(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckKitRevision
   Description: Checks the current selected revision of a kit parent line to see if it has any components
to be generated. If no revision is selected, or there are no mfg details then a return message
will be returned to notify the user about it.
   OperationID: CheckKitRevision
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckKitRevision_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckKitRevision_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLtrOfCrdt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLtrOfCrdt
   OperationID: CheckLtrOfCrdt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLtrOfCrdt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLtrOfCrdt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckMakeDirectReleases(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckMakeDirectReleases
   Description: Validate whether all make direct releases have jobs if and OrderDtl is checked.
   OperationID: CheckMakeDirectReleases
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckMakeDirectReleases_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckMakeDirectReleases_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckOrderHedChanges(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckOrderHedChanges
   Description: Checks to see if certain fields changed on the order header.  If they did,
a question is presented to the user asking if these changes should carry over
to the order lines and order releases.  This method returns the text of the message
to ask.  When adding a header it is not necessary to call this method because there
won't be any lines or releases to propagate the changes to.  The user can answer yes
or no, but processing doesn't stop based on the answer.  The answer should be stored
in the dataset in field OrderHed.UpdateDtlAndRelRecords.
   OperationID: CheckOrderHedChanges
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckOrderHedChanges_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckOrderHedChanges_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckOrderLinkToInterCompanyPO(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckOrderLinkToInterCompanyPO
   Description: Checks to see if the order is linked to a PO.  If it is, an informational message is presented
alerting the user of this.
   OperationID: CheckOrderLinkToInterCompanyPO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckOrderLinkToInterCompanyPO_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckOrderLinkToInterCompanyPO_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckPartRevisionChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckPartRevisionChange
   Description: The method is to be run on leave of the PartNum and Revision fields
before the ChangePart, ChangeRevision, or Update methods are run.
When run before CreateOrderFromQuote, the Part Number expected is the part number
from the quote.
This returns all the questions that need to be asked before a part can be changed.
   OperationID: CheckPartRevisionChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckPartRevisionChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPartRevisionChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckProjectID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckProjectID
   Description: Validate Project ID value
   OperationID: CheckProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckQuoteLinesNoQuantity(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckQuoteLinesNoQuantity
   Description: The method is to be run after a Quote Number is obtained for creating an order
from a quote, but before the CreateOrderFromQuote method is executed.  This
method returns the text of the question to be asked to the user if quote lines are found
without an order quantity.
   OperationID: CheckQuoteLinesNoQuantity
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckQuoteLinesNoQuantity_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckQuoteLinesNoQuantity_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckRateGrpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckRateGrpCode
   Description: Update Check if Rate Group Code entered is valid.
   OperationID: CheckRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckRenewalNbr(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckRenewalNbr
   OperationID: CheckRenewalNbr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckRenewalNbr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckRenewalNbr_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckSellingFactorDirection(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckSellingFactorDirection
   Description: OBSOLETE METHOD..... Validate Selling Factor Direction value
   OperationID: CheckSellingFactorDirection
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckSellingFactorDirection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckSellingFactorDirection_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckSellingQuantityChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckSellingQuantityChange
   Description: The method is to be run on leave of the SellingQuantity field before the
ChangeSellingQuantity or Update methods are run.  If the unit price will be different
based on the new quantity, this returns the question asking if user would like to
use the new unit price or keep the current one.
Calling this method is necessary only if the Quote Number on the detail
record is not zero.
   OperationID: CheckSellingQuantityChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckSellingQuantityChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckSellingQuantityChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckSONum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckSONum
   Description: Method to call when entering proposed Sales Order Number.  This method will return
two output variables.  One is a logical field to indicate if the SO number
entered is existing or not.  The other variable is for the error message
in case the proposed SO number is invalid.
   OperationID: CheckSONum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckSONum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckSONum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckQuoteForCreditLimit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckQuoteForCreditLimit
   Description: This method should be called before the Update method is called for a detail record.
The method returns a character string if the customer will go over their credit limit
and the user is given the choice of continuing or not.
   OperationID: CheckQuoteForCreditLimit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckQuoteForCreditLimit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckQuoteForCreditLimit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_chkCustomerCreditLimitForCopyOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method chkCustomerCreditLimitForCopyOrder
   Description: This method validates the Customer Credit Limit when we are performing a Copy Order operation
   OperationID: chkCustomerCreditLimitForCopyOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/chkCustomerCreditLimitForCopyOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/chkCustomerCreditLimitForCopyOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLetterOfCredit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLetterOfCredit
   Description: Before copying an order, check if the new order will cause the LOC value to be exceeded.
   OperationID: CheckLetterOfCredit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLetterOfCredit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLetterOfCredit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_chkLtrOfCrdt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method chkLtrOfCrdt
   OperationID: chkLtrOfCrdt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/chkLtrOfCrdt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/chkLtrOfCrdt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CloseOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CloseOrder
   Description: Checks to see if the order can be closed and closes it if it is allowed.
   OperationID: CloseOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CloseOrderLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CloseOrderLine
   Description: Checks to see if the order can be closed and closes it if it is allowed.
   OperationID: CloseOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CloseRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CloseRelease
   Description: Checks to see if the order release can be closed and closes it if it is allowed.
   OperationID: CloseRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreCopyOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreCopyOrder
   Description: Before copying an order, check if any parts are on hold and present user with prompt.
   OperationID: PreCopyOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreCopyOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreCopyOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CopyOrder(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CopyOrder
   Description: Copy an order.
   OperationID: CopyOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CopyOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CopyOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateGlbSugPOChg(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateGlbSugPOChg
   Description: Create a new ttGlbSugPOChg record for processing.
   OperationID: CreateGlbSugPOChg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateGlbSugPOChg_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateGlbSugPOChg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.SalesOrderSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################
class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_HedTaxSumRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OHOrderMscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OHOrderMscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderDtlAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderDtlAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderDtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderDtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderHedAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderHedAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderHedListRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderHedListRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderHedRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderHedRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderHedUPSRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderHedUPSRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderHistRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderHistRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderMscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderMscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderRelRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderRelRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderRelTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderRelTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderRepCommRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderRepCommRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_OrderSchedRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_OrderSchedRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PartSubsRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_SNFormatRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_SNFormatRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_SelectedSerialNumbersRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_SelectedSerialNumbersRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_TaxConnectStatusRow] = obj["value"]
      pass

class Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency display switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Document reportable amount.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Document taxable amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document tax amount.  """  
      self.HedNum:int = obj["HedNum"]
      """  Order or Quote number this tax summary relates to.  """  
      self.Percent:int = obj["Percent"]
      """  Tax percent  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax amount  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax code  """  
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales Tax description  """  
      self.GroupID:str = obj["GroupID"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.RateCode:str = obj["RateCode"]
      """  Rate Code on the Header Tax Summary  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  Invoice Number of allocated Deposits  """  
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      """  Rate Code Description on the Header Tax Summary  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OHOrderMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number that this miscellaneous record is related to. If related to the Order then this field is zero. This number is not directly entered by the user; rather it is carried through from the header or detail line that user was on when miscellaneous maintenance was requested.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the MiscChrg master file.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. This will be printed on the acknowledgment and transferred over to invoice processing. The default is provided by MiscChrg.Description, but it's overridable by the user. This can't be blank.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.FreqCode:str = obj["FreqCode"]
      """  Sets the frequency of when this miscellaneous charge should be applied. The options are F - First shipment, L = Last shipment, E = every shipment. This defaults from the MiscChrg.FreqCode.  """  
      self.Quoting:str = obj["Quoting"]
      """  An internally used flag which indicates that this record was created from a Quote via the "Get Quote" function. "Q" = related to the QuoteQty record, "L" = related to the overall QuoteDtl record. This flag is used so that the OrderMsc file can be refreshed from the QuoteMsc when Quantity or Quote/Line # changes occur. The logic is that if a change in order quantity of a order line that is linked to a quote causes a different price break to be selected then all the existing all OrderMsc records where Quoting = "Q" are deleted and then re-pulled in based on the new qty. If the Quote # or QuoteLine are changed then all OrderMsc records where Quoting is either a "Q" or "L" are deleted then re-pulled in from the newly referenced quote.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order miscellaneous charge is linked to an inter-company PO misc charge.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  Inter Company PO Sequence Number  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default. - Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default. - includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.ChangeTrackApproved:bool = obj["ChangeTrackApproved"]
      """  ChangeTrackApproved  """  
      self.ChangeTrackAmount:int = obj["ChangeTrackAmount"]
      """  ChangeTrackAmount  """  
      self.ChangeTrackMemoDesc:str = obj["ChangeTrackMemoDesc"]
      """  ChangeTrackMemoDesc  """  
      self.ChangeTrackMemoText:str = obj["ChangeTrackMemoText"]
      """  ChangeTrackMemoText  """  
      self.ChangeTrackStatus:str = obj["ChangeTrackStatus"]
      """  ChangeTrackStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DocDspMiscAmt:int = obj["DocDspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Misc charge amount on display (may or may not include taxes)  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      """  Misc charge amount on display in report currency (may or may not include taxes)  """  
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      """  Misc charge amount on display in report currency (may or may not include taxes)  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.BitFlag:int = obj["BitFlag"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.OrderNum:int = obj["OrderNum"]
      self.OrderLine:int = obj["OrderLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderDtlRow:
   def __init__(self, obj):
      self.VoidLine:bool = obj["VoidLine"]
      """   Indicates that the line item was closed before any shipments were made against it. Normally line items are closed as part of the Shipping process. By using the "Close Line" menu option the user can close the line manually, to provide the function to close the line when the customer cancels there request.  If the line item had no shipments made it is then marked as "voided". Regardless of shipment activity the line is also marked as closed (OpenLine = No).
When an OrderDtl record is 'voided/closed' all of it's related OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.OpenLine:bool = obj["OpenLine"]
      """  Indicates if the OrderDtl record is in a "open or closed" status.  This field is not directly maintainable. It can be set to "closed" via the "Close-Line" menu option,  the "Close-Order" menu option, or when all the related OrderRel records are closed, OrderRel records are closed via shipping or by the "Close Release" button within Order Entry. (See VoidLine also).  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Contains the Order Number that ties this detail record back to an OrderHed record.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.PartNum:str = obj["PartNum"]
      """   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the OrderDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Item description. The Part.Description can be used as a default.  """  
      self.Reference:str = obj["Reference"]
      """  EDI Reference  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.POLine:str = obj["POLine"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """  Controls if line is commissionable. Note if all the OrderHed.SalesRep are blank then this should be "No", also the user should not even see this field when there are no sales reps for the order.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  The line item discount percent. It has nothing to do with price break discounts. It is a flat discount percent that defaults from the OrderHed.DiscountPercent, which was originally defaulted from the Customer.DiscountPercent.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Total Order Quantity for the line item. This quantity must always be kept in sync with the scheduled ship quantities stored in the OrderRel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line ( more than one OrderRel record) the OrderQty is not maintainable. As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This ensures that Order quantity and scheduled ship quantity are always in sync.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """   Date that the first release needs be shipped by in order to meet the customers due date for the first delivery. Defaulted as OrderHed.RequestDate.
Not directly maintainable when more than one delivery record exists, in which case it gets refreshed as the earliest ReqDate of the related OrderRel records.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Used to calculate the extended unit price for the line item. The logic is to divide the OrderDtl.OrderQty by the appropriate "per" value and then multiply by unit price.  Use the  Part.PricePerCode as a default. If Part record does not exist then default as "E".  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the detail order line item. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the order line item. These will copied into the packing slip detail  file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the order line item. These will copied into the Invoice detail  file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains comments for pick list or job about the order line item. These will be printed on the picking lists or copied to the job during the link process.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record. Defaults from the the or from the Part Master.  """  
      self.AdvanceBillBal:int = obj["AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs. This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering amount in the InvcDetl.  """  
      self.DocAdvanceBillBal:int = obj["DocAdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with. This is part of the foreign key to QuoteHed file. This field is updated via the "get quote" function within Order Entry.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this order line was created. Updated via the Get Quote function within Order Entry. This field along with Company and QuoteNum make up the link to the QuoteDtl file.  """  
      self.TMBilling:bool = obj["TMBilling"]
      """  Indicates if the Order line item is billed based on Time & Material. This flag is copied into the ShipDtl record during the Shipping Entry process. See ShipDtl.TMBilling description for further details.  """  
      self.OrigWhyNoTax:str = obj["OrigWhyNoTax"]
      """  This field is no longer active. It has been replaced by OrderRel.Exempt. The contents were copied into OrderRel.Exempt during the release conversion process. This will be removed in the next release.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """   Date the customer needs the first release to be delivered.
Defaulted as OrderHed.NeedByDate. Not directly maintainable when more than one delivery record exists. In which case it is kept in sync with the OrderRel record which has the earliest ReqDate which are maintained in the shipping release dialog boxes.  """  
      self.CustNum:int = obj["CustNum"]
      """  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the OrderDtl records for a specific customer.  """  
      self.Rework:bool = obj["Rework"]
      """   Used to indicate that line item is to be "Reworked" instead of manufactured.  It is shown in the Job Entry Order Activity screens.
When Yes then all related OrderRel records are Make=Yes.  """  
      self.RMANum:int = obj["RMANum"]
      """   Return Authorization Number that OrderDtl is fulfilling.
If entered, must be valid in RMAHead.  """  
      self.RMALine:int = obj["RMALine"]
      """  The line item of the RMA detail that this order line item is fulfilling.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID of the Project table record that this OrderDtl record. Can be blank.  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.Warranty:bool = obj["Warranty"]
      """  Indicate that the item or the product group has a warranty.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty that ties this record to a type of warranty.  Found on either the Part or ProdGrup table.  """  
      self.MaterialDuration:int = obj["MaterialDuration"]
      """  The # of days, months, years the material is covered by warranty  """  
      self.LaborDuration:int = obj["LaborDuration"]
      """  The # of days, months, years the Labor is covered by warranty  """  
      self.MiscDuration:int = obj["MiscDuration"]
      """  The # of days, months, years the Misc. Charges are covered by warranty  """  
      self.MaterialMod:str = obj["MaterialMod"]
      """  Whether the duration of warranty  is for "Days"," Months", "Years".  """  
      self.LaborMod:str = obj["LaborMod"]
      """  Whether the duration of warranty  is "Days"," Months"," years".  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  Editor widget for Warranty comments.  """  
      self.Onsite:bool = obj["Onsite"]
      """  This warranty covers On site visits  """  
      self.MatCovered:bool = obj["MatCovered"]
      """  Are Material cost covered  """  
      self.LabCovered:bool = obj["LabCovered"]
      """  Is Labor Cost Covered  """  
      self.MiscCovered:bool = obj["MiscCovered"]
      """  Are misc. Costs Covered  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Unit of measure (how it is sold/issued).  Use the default Part.SUM if its a valid Part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  Represents one of the requested Order Quantities for the line item using OrderDtl.SUM.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.ShipLineComplete:bool = obj["ShipLineComplete"]
      """  Indicates if the order line must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases of the line with a ship date <= the given cutoff date also have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "L" (Ship Order line 100% complete) and OrderHed.ShipOrderComplete = No. This field is disabled and set to No if the OrderHed.ShipOrderComplete = Yes.  """  
      self.CumeQty:int = obj["CumeQty"]
      """  Quantity from last EDI update.  """  
      self.CumeDate:str = obj["CumeDate"]
      """  Date of last update  """  
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  The related Marketing Campaign ID. Mirror image of the QuoteHed.MkthCampaignID. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """   Link to the marketing event associated with this record.
The related Marketing Event Sequence. Mirror image of the QuoteHed.MktgEventSeq. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order line is linked to an inter-company PO line.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.ConfigUnitPrice:int = obj["ConfigUnitPrice"]
      """   Same as Unit price except that this field contains the unit price computed from the input based pricing in a configuration.
If price breaks exist this price should be used as the base price instead of the one found in the part table.  """  
      self.ConfigBaseUnitPrice:int = obj["ConfigBaseUnitPrice"]
      """  This is the base price for inputs based pricing of a configuration.  The price of inputs are added to this price to get the ConfigUnitPrice.  """  
      self.PriceListCode:str = obj["PriceListCode"]
      """  This is the Price List used to determine the starting base price.  """  
      self.BreakListCode:str = obj["BreakListCode"]
      """  This is the Price List used to determine the break % or amount.  """  
      self.PricingQty:int = obj["PricingQty"]
      """  The Order Quantity (total qty of related order lines) used to find price when quantity based discounting is applied.  """  
      self.LockPrice:bool = obj["LockPrice"]
      """  Indicates if the price of the order line can be changed.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency (converted using the exchange rate on OrderHed).  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency (converted using the exchange rate on OrderHed).  """  
      self.PriceGroupCode:str = obj["PriceGroupCode"]
      """  This is the Price Group ID used to price the order line with.  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  Indicates if the user selected a price list different from the default.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.PricingValue:int = obj["PricingValue"]
      """  The Order Value (total extended price of related order lines) used to find order value break when value based discounting is applied.  """  
      self.DisplaySeq:int = obj["DisplaySeq"]
      """  This field controls the order in which Sales Order lines are displayed.  Display Seq is a decimal number where the whole number portion is used to sequence normal sales order lines and the decimal portion is used to sequence kit components under their associated kit parent.  """  
      self.KitParentLine:int = obj["KitParentLine"]
      """  The sales order line number of the parent kit item.  This is only relevent for sales order lines which are kit parent or component lines.  If the KitParentLine equals the OrderLine then this is a kit parent line.  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if component lines can be added, deleted and modified during Sales Order entry.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kit part must be shipped complete of if kit components can be shippped in varying degrees of completeness.  This field is only relevant for sales order lines which are kit parents. If this field is set to "No" then KitPricing must be set to "P".  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushed when a kit parent part is shipped.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes", then this field must be set to "YES" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are P = Parent Pricing (The price is obtained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitQtyPer:int = obj["KitQtyPer"]
      """  Component quantity required to fulfill one kit parent.  This field is only relevant on a sales order line which is a kit component.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.DemandContractLine:int = obj["DemandContractLine"]
      """  The Demand Contract Detail record this OrderDtl is related to.  """  
      self.CreateNewJob:bool = obj["CreateNewJob"]
      """  Create New Job flag  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.GetDtls:bool = obj["GetDtls"]
      """  Get Details flag  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SchedJob:bool = obj["SchedJob"]
      """  Schedule Job flag  """  
      self.RelJob:bool = obj["RelJob"]
      """  Release Job flag  """  
      self.EnableCreateNewJob:bool = obj["EnableCreateNewJob"]
      """  Enable New Job flag  """  
      self.EnableGetDtls:bool = obj["EnableGetDtls"]
      """  Enable Get Details flag  """  
      self.EnableSchedJob:bool = obj["EnableSchedJob"]
      """  Enable Schedule Job flag  """  
      self.EnableRelJob:bool = obj["EnableRelJob"]
      """  Enable Release Job flag  """  
      self.CounterSaleWarehouse:str = obj["CounterSaleWarehouse"]
      """  Indicates the warehouse selected for a counter sale order line.  """  
      self.CounterSaleBinNum:str = obj["CounterSaleBinNum"]
      """  Identifies the Bin selected for a counter sale order line.  """  
      self.CounterSaleLotNum:str = obj["CounterSaleLotNum"]
      """  Indicates the lot number selected for a counter sale order line.  """  
      self.CounterSaleDimCode:str = obj["CounterSaleDimCode"]
      """  Indicates the dimension code selected for a counter sales order line.  """  
      self.DemandDtlRejected:bool = obj["DemandDtlRejected"]
      """  Indicates if the demand detail that created/updated this order line has been rejected.  """  
      self.KitFlag:str = obj["KitFlag"]
      """   A character flag field used to differentiate between regular sales order line, Sales Kit parent order line and Sales Kit component order line.
P = Sales Kit Parent line
C = Sales Kit Component Line
Null = regular line  """  
      self.KitsLoaded:bool = obj["KitsLoaded"]
      """  Indicates if the kit components have been automatically loaded.  If set to false the user interface will attempt to load the kit components after the user saves a new order line.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  This field along with Company, DemandContractNum and DemandHeadSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandDetail record for the DemandHead and the adding 1 to it.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases for the line  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1AdvanceBillBal:int = obj["Rpt1AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt2AdvanceBillBal:int = obj["Rpt2AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt3AdvanceBillBal:int = obj["Rpt3AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.ExtPriceDtl:int = obj["ExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule  """  
      self.DocExtPriceDtl:int = obj["DocExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.Rpt1ExtPriceDtl:int = obj["Rpt1ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPriceDtl:int = obj["Rpt2ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPriceDtl:int = obj["Rpt3ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.LineStatus:str = obj["LineStatus"]
      """  Status of Order Line  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table. Assumed to include taxes  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Same as DocUnit price except that this field contains the unit price including taxes  """  
      self.InDiscount:int = obj["InDiscount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed.  - includes taxes  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed. - includes taxes  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied. including taxes  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency -including taxes.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied. including taxes  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency - including taxes.  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.InExtPriceDtl:int = obj["InExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule - Taxes are Included  """  
      self.DocInExtPriceDtl:int = obj["DocInExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule - Taxes Included  """  
      self.Rpt1InExtPriceDtl:int = obj["Rpt1InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPriceDtl:int = obj["Rpt2InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPriceDtl:int = obj["Rpt3InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.OldOurOpenQty:int = obj["OldOurOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldSellingOpenQty:int = obj["OldSellingOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldOpenValue:int = obj["OldOpenValue"]
      """  Used to store open value setting assigned in product configuration programs  """  
      self.OldProdCode:str = obj["OldProdCode"]
      """  Used to store prod code value assigned in product configuration programs  """  
      self.PrevSellQty:int = obj["PrevSellQty"]
      """  Previous Selling Quantity  """  
      self.PrevPartNum:str = obj["PrevPartNum"]
      """  Previous Part Number  """  
      self.PrevXPartNum:str = obj["PrevXPartNum"]
      """  Previous Customer Part Number  """  
      self.KitCompOrigSeq:int = obj["KitCompOrigSeq"]
      """  The original material sequence of this kit component under the kit parent part.  """  
      self.KitCompOrigPart:str = obj["KitCompOrigPart"]
      """  The original kit component part number prior to processing any configurator rule programs  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.DiscBreakListCode:str = obj["DiscBreakListCode"]
      self.DiscListPrice:int = obj["DiscListPrice"]
      self.LockDisc:bool = obj["LockDisc"]
      self.OverrideDiscPriceList:bool = obj["OverrideDiscPriceList"]
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCOrderLine:int = obj["ECCOrderLine"]
      """  ECCOrderLine  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.UndersPct:int = obj["UndersPct"]
      """  UndersPct  """  
      self.Overs:int = obj["Overs"]
      """  Overs  """  
      self.Unders:int = obj["Unders"]
      """  Unders  """  
      self.OversUnitPrice:int = obj["OversUnitPrice"]
      """  OversUnitPrice  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanGUID:str = obj["PlanGUID"]
      """  PlanGUID  """  
      self.MOMsourceType:str = obj["MOMsourceType"]
      """  MOMsourceType  """  
      self.MOMsourceEst:str = obj["MOMsourceEst"]
      """  MOMsourceEst  """  
      self.DefaultOversPricing:str = obj["DefaultOversPricing"]
      """  DefaultOversPricing  """  
      self.ECCPlant:str = obj["ECCPlant"]
      """  ECCPlant  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECCQuoteNum  """  
      self.ECCQuoteLine:int = obj["ECCQuoteLine"]
      """  ECCQuoteLine  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MfgJobType:str = obj["MfgJobType"]
      """  MfgJobType  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.CreateJob:bool = obj["CreateJob"]
      """  CreateJob  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.DocInAdvanceBillBal:int = obj["DocInAdvanceBillBal"]
      """  DocInAdvanceBillBal  """  
      self.InAdvanceBillBal:int = obj["InAdvanceBillBal"]
      """  InAdvanceBillBal  """  
      self.Rpt1InAdvanceBillBal:int = obj["Rpt1InAdvanceBillBal"]
      """  Rpt1InAdvanceBillBal  """  
      self.Rpt2InAdvanceBillBal:int = obj["Rpt2InAdvanceBillBal"]
      """  Rpt2InAdvanceBillBal  """  
      self.Rpt3InAdvanceBillBal:int = obj["Rpt3InAdvanceBillBal"]
      """  Rpt3InAdvanceBillBal  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MSRP:int = obj["MSRP"]
      """  Base price before any price breaks and discounts  """  
      self.DocMSRP:int = obj["DocMSRP"]
      """  Same as MSRP except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1MSRP:int = obj["Rpt1MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt2MSRP:int = obj["Rpt2MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt3MSRP:int = obj["Rpt3MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.EndCustomerPrice:int = obj["EndCustomerPrice"]
      """  Distributor end customer price.  """  
      self.DocEndCustomerPrice:int = obj["DocEndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1EndCustomerPrice:int = obj["Rpt1EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt2EndCustomerPrice:int = obj["Rpt2EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt3EndCustomerPrice:int = obj["Rpt3EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.PromotionalPrice:int = obj["PromotionalPrice"]
      """  Promotional Price offered to Dealer and Distributors.  """  
      self.DocPromotionalPrice:int = obj["DocPromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1PromotionalPrice:int = obj["Rpt1PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt2PromotionalPrice:int = obj["Rpt2PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt3PromotionalPrice:int = obj["Rpt3PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.OrderLineStatusCode:str = obj["OrderLineStatusCode"]
      """  Current status of line.  This is a maintainable status through Order Line Status maintenance.  Depending on the setting can control is line is updatable from the web.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  Used specifically for Deal Portal and Location Inventory, not for Inventory Tracked Attributes.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.KBOriginalConfigProdID:int = obj["KBOriginalConfigProdID"]
      """  The unique identifier of the related original CPQ Configured Quote Product.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AvailableQuantity:int = obj["AvailableQuantity"]
      self.AvailPriceLists:str = obj["AvailPriceLists"]
      """  Available Price Lists  """  
      self.AvailUMFromQuote:str = obj["AvailUMFromQuote"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CalcUnitPrice:int = obj["CalcUnitPrice"]
      """  Default calculated unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.ConfigType:str = obj["ConfigType"]
      self.Configured:str = obj["Configured"]
      self.CounterSale:bool = obj["CounterSale"]
      self.CreditLimitMessage:str = obj["CreditLimitMessage"]
      """  The message text returned by the credit check process.  """  
      self.CreditLimitSource:str = obj["CreditLimitSource"]
      """  The source that put the customer on credit hold.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencyID:str = obj["CurrencyID"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DemandQuantity:int = obj["DemandQuantity"]
      self.DimCode:str = obj["DimCode"]
      self.DimConvFactor:int = obj["DimConvFactor"]
      self.DocDspDiscount:int = obj["DocDspDiscount"]
      """  Document currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      """  Document currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.DocInMiscCharges:int = obj["DocInMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in document currency  """  
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  The amount of discount for display in document currency which does not include taxes  """  
      self.DocMiscCharges:int = obj["DocMiscCharges"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total tax in Doc currency. The sum of all the tax details for the line (OrderRelTax).  """  
      self.DocTotalPrice:int = obj["DocTotalPrice"]
      self.DspDiscount:int = obj["DspDiscount"]
      """  Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DspJobType:str = obj["DspJobType"]
      """  To display the type of job this is: MFG = Manufacturing, PRJ = Project  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      """  Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DUM:str = obj["DUM"]
      self.ECCConfigSysRowId:str = obj["ECCConfigSysRowId"]
      """  Web basket configuration related SysRowID  """  
      self.ECCDiscount:int = obj["ECCDiscount"]
      """  Additional discount calculated by ECC  """  
      self.ECCPreventRepricing:bool = obj["ECCPreventRepricing"]
      """  Prevents Epicor repricing the unit price coming from ECC.  This usually would be a result of Epicor going off-line and order pricing was performed by ECC.  """  
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the button Attibutes in Order Line  """  
      self.EnableKitUnitPrice:bool = obj["EnableKitUnitPrice"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableRenewalNbr:bool = obj["EnableRenewalNbr"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableSellingQty:bool = obj["EnableSellingQty"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ExtPrice:int = obj["ExtPrice"]
      self.FromQuoteLineFlag:bool = obj["FromQuoteLineFlag"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Installation price of an equipment that requires installation in Epicor FSA. This value by default is inherited from the part but it could be overridden for another value if it's necessary.  """  
      self.FSAInstallationOrderLine:int = obj["FSAInstallationOrderLine"]
      self.FSAInstallationOrderNum:int = obj["FSAInstallationOrderNum"]
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstallationTypeDescription:str = obj["FSAInstallationTypeDescription"]
      self.HasComplement:bool = obj["HasComplement"]
      """  Indicates whether the part has at least one Complement  """  
      self.HasDowngrade:bool = obj["HasDowngrade"]
      """  Indicates whether the part has at least one Downgrade  """  
      self.HasSubstitute:bool = obj["HasSubstitute"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.HasUpgrade:bool = obj["HasUpgrade"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.InMiscCharges:int = obj["InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line  """  
      self.InPrice:bool = obj["InPrice"]
      """  The flag to indicate if the Order Header Tax Liability is Tax Inclusive Pricing.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvtyUOM:str = obj["InvtyUOM"]
      """  Inventory UOM that the Order Detail is allocated against.  """  
      self.JobTypeDesc:str = obj["JobTypeDesc"]
      self.JobWasCreated:bool = obj["JobWasCreated"]
      """  If the Job has been already created against this line.  """  
      self.KitChangeParms:bool = obj["KitChangeParms"]
      """  If Kit Flag = P then sets this field to the value of the related PartPlant.KitAllowChangeParms. If KitFlag <> P then this will be FALSE.  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.KitFlagDescription:str = obj["KitFlagDescription"]
      """  Kit Flag Description. "P" = Parent, "C" = Component.  """  
      self.KitOrderQtyUOM:str = obj["KitOrderQtyUOM"]
      self.KitStandard:bool = obj["KitStandard"]
      """  If KitFlag = "C" and the parent kit line is configured OR if KitFlag = "P" and Configured = "On" then this field will be TRUE, otherwise it will be false.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  The amount of discount for display which does not include taxes  """  
      self.LotNum:str = obj["LotNum"]
      self.MiscCharges:int = obj["MiscCharges"]
      self.MultipleReleases:bool = obj["MultipleReleases"]
      self.OnHandQuantity:int = obj["OnHandQuantity"]
      self.PartExists:bool = obj["PartExists"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.POLineRef:str = obj["POLineRef"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.PriceListCodeDesc:str = obj["PriceListCodeDesc"]
      self.ProcessCounterSale:bool = obj["ProcessCounterSale"]
      self.ProcessQuickEntry:bool = obj["ProcessQuickEntry"]
      self.QuoteQtyNum:int = obj["QuoteQtyNum"]
      self.RelWasRecInvoiced:bool = obj["RelWasRecInvoiced"]
      """  For this Detail line there is Release line that has Project and Phase and these Project or Phase was invoiced or used in revenue recognition.  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Extended Price for the Order Line in Rpt1 currency  """  
      self.Rpt1InMiscCharges:int = obj["Rpt1InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt1LessDiscount:int = obj["Rpt1LessDiscount"]
      """  The amount of discount for display which does not include taxes (report currency)  """  
      self.Rpt1MiscCharges:int = obj["Rpt1MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt1TotalPrice:int = obj["Rpt1TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Extended Price for the orderLine in Rpt2 currency.  """  
      self.Rpt2InMiscCharges:int = obj["Rpt2InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt2LessDiscount:int = obj["Rpt2LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt2MiscCharges:int = obj["Rpt2MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt2TotalPrice:int = obj["Rpt2TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Extended price for the order line in Rpt3 currency  """  
      self.Rpt3InMiscCharges:int = obj["Rpt3InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt3LessDiscount:int = obj["Rpt3LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt3MiscCharges:int = obj["Rpt3MiscCharges"]
      """  Report Currency misc charges  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt3TotalPrice:int = obj["Rpt3TotalPrice"]
      """  Report currency line total price  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax in base currency. The sum of all the tax details for the line.  """  
      self.ThisOrderInvtyQty:int = obj["ThisOrderInvtyQty"]
      """  The Sales Order Quantity expressed in the Inventory Unit of Measure  """  
      self.TotalPrice:int = obj["TotalPrice"]
      self.TotalShipped:int = obj["TotalShipped"]
      self.WarehouseCode:str = obj["WarehouseCode"]
      self.WarehouseDesc:str = obj["WarehouseDesc"]
      self.BinNum:str = obj["BinNum"]
      self.AttributeMismatch:bool = obj["AttributeMismatch"]
      """  Attribute class is MRP Planned but AttributeSetID has not been set on releases.  """  
      self.JobManagerString:str = obj["JobManagerString"]
      """  A string containing the parameters needed to run Job Manager  """  
      self.CalcOrdBasedPrice:int = obj["CalcOrdBasedPrice"]
      """  Default calculated order value based discounts unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.SalesOrderLinked:bool = obj["SalesOrderLinked"]
      """  At least 1 OrderRel for OrderDtl has a PONum assigned.  """  
      self.InventoryAttributeSetID:int = obj["InventoryAttributeSetID"]
      """  This external column is to be used for the purpose of adding an OrderDtl for a part that has Track Inventory Attributes, allowing the AttributeSetID to be passed in with the line to be included on the OrderRel within the same update method call.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.CustNumSendToFSA:bool = obj["CustNumSendToFSA"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.DiscBreakListCodeListDescription:str = obj["DiscBreakListCodeListDescription"]
      self.DiscBreakListCodeEndDate:str = obj["DiscBreakListCodeEndDate"]
      self.DiscBreakListCodeStartDate:str = obj["DiscBreakListCodeStartDate"]
      self.MktgCampaignIDCampDescription:str = obj["MktgCampaignIDCampDescription"]
      self.MktgEvntEvntDescription:str = obj["MktgEvntEvntDescription"]
      self.OrderNumBTCustNum:int = obj["OrderNumBTCustNum"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartNumSendToFSA:bool = obj["PartNumSendToFSA"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumDefaultAttributeSetID:int = obj["PartNumDefaultAttributeSetID"]
      self.PartNumFSAEquipment:bool = obj["PartNumFSAEquipment"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PriceBreakListDescription:str = obj["PriceBreakListDescription"]
      self.PriceBreakStartDate:str = obj["PriceBreakStartDate"]
      self.PriceBreakEndDate:str = obj["PriceBreakEndDate"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.Phase_c:str = obj["Phase_c"]
      self.ItemID_c:str = obj["ItemID_c"]
      self.TypeCode_c:str = obj["TypeCode_c"]
      self.OrigTypeCode_c:str = obj["OrigTypeCode_c"]
      self.PhaseID_c:str = obj["PhaseID_c"]
      self.SalesCatID_c:str = obj["SalesCatID_c"]
      self.IndustryShipDate_c:str = obj["IndustryShipDate_c"]
      self.CreateDate_c:str = obj["CreateDate_c"]
      self.PriceUpdateDate_c:str = obj["PriceUpdateDate_c"]
      self.CreatedBy_c:str = obj["CreatedBy_c"]
      self.UpdatedBy_c:str = obj["UpdatedBy_c"]
      pass

class Erp_Tablesets_OrderHedAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.OrderNum:int = obj["OrderNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHedListRow:
   def __init__(self, obj):
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """   Indicates that the Order item was closed before any shipments were made against it. Normally the Orders are closed as part of the Shipping process when all the releases have been closed.  By using the "Close Order" menu option the user can close the Order manually, to provide the function to "Cancel"  the order when the customer cancels there request.  If the Order item had no shipments made it is then marked as "voided". Regardless of shipment activity the Order is always marked as closed (OpenOrder = No).
When an OrderHed record is 'voided/closed' all of it's related OrderDtl and OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in shipping entry. It does not prevent shipments from being entered for this order.  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Mandatory entry and must be valid. Default as the system date.  """  
      self.DepositBal:int = obj["DepositBal"]
      """  Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocDepositBal:int = obj["DocDepositBal"]
      """  Display value contains the deposit balance in the customer's currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on this order to arrive.  This is used only as the default value for the NeedByDate when creating order detail line items.  This can be left blank.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.BTCustNumCustID:str = obj["BTCustNumCustID"]
      """  BTCustNumCustID  """  
      self.BTCustNumName:str = obj["BTCustNumName"]
      """  BTCustNumName  """  
      self.DemandContract:str = obj["DemandContract"]
      """  DemandContract  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHedRow:
   def __init__(self, obj):
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """   Indicates that the Order item was closed before any shipments were made against it. Normally the Orders are closed as part of the Shipping process when all the releases have been closed.  By using the "Close Order" menu option the user can close the Order manually, to provide the function to "Cancel"  the order when the customer cancels there request.  If the Order item had no shipments made it is then marked as "voided". Regardless of shipment activity the Order is always marked as closed (OpenOrder = No).
When an OrderHed record is 'voided/closed' all of it's related OrderDtl and OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in shipping entry. It does not prevent shipments from being entered for this order.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """   This is used as one of the selection parameters on the Order entry edit reports. The intent is for users to be able to select orders that they have entered for hard copy edit.

On new orders use the users login ID as the default. They can override this if they wish to enter something more meaningful.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Indicates which customer ship to is to be used as the default for the Order release records for this order. It  can be blank or it must be valid in the SHIPTO table. Use the CUSTOMER.SHIPTONUM as the default on new orders or when the ORDERHED.CUSTNUM is changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """  Date that the items need to be shipped by to meet the customers NeedByDate.  This can be left blank, it is only used to supply a default for OrderDtl.RequestDate.  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Mandatory entry and must be valid. Default as the system date.  """  
      self.FOB:str = obj["FOB"]
      """  An optional field that describes the FOB policy.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Contains the key value of the record in the "SHIPVIA" table. It can be left blank or must be valid in the 'SHIPTO"  table.
Use the CUSTOMER.SHIPVIA as the default when the ORDER.CUSTNUM field is changed and the ORDERHED.SHIPTO is blank. Use SHIPTO.SHIPVIA when ORDER.CUSTNUM or ORDERHED.SHIPTO fields are changed and the ORDERHED.SHIPTO is not blank.  """  
      self.TermsCode:str = obj["TermsCode"]
      """   Contains the key value of the record in the TERMS table which indicates the sales terms established for this order. On change of ORDERHED.CUSTNUM use the CUSTOMER.TERMS

field as the default.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  Used to establish a discount percent value which will be used as a default during order detail line entry. It can be left as zero.  Use the CUSTOMER.DISCOUNTPERCENT field as a default. Refreshed whenever ORDERHED.CUSTOMER field changes.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMPCON as the default.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Establishes the Shipping Contact to be used as default on the Order release records. Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Use the Customer.PrimScon as a default.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the order. Up to five codes can be  established. This field is not directly maintainable. Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The first one is defaulted from the Customer master if ship to is blank; otherwise, from the Ship To.  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the overall order. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the overall order. These will copied into the packing slip header file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains picking  comments about the overall order. These will be printed on the picking lists.  """  
      self.DepositBal:int = obj["DepositBal"]
      """  Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocDepositBal:int = obj["DocDepositBal"]
      """  Display value contains the deposit balance in the customer's currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on this order to arrive.  This is used only as the default value for the NeedByDate when creating order detail line items.  This can be left blank.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this order.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The USERID of the user that overrode an order credit hold (system set).  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  The date that the user last overrode the customer credit hold (system set).  """  
      self.CreditOverrideTime:str = obj["CreditOverrideTime"]
      """  The time that the user last overrode the customer credit hold in HH:MM:SS format (system set).  """  
      self.CreditOverrideLimit:int = obj["CreditOverrideLimit"]
      """  The authorized maximum dollar limit that an order for a credit held customer is approved for.  Initially defaulted to the current order amount when the order is credit hold overridden.  The order amount is calculated by using line information only (i.e. extended amount and discounts) - deposits, advance billings, shipments and miscellaneous charges are NOT considered.  """  
      self.SndAlrtShp:bool = obj["SndAlrtShp"]
      """  Controls if an alert is to be sent when shipments are made for this order.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this order.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.AllocPriorityCode:str = obj["AllocPriorityCode"]
      """  Code used to relate a AllocPri record to the order.  Defaulted from Customer.AllocPriorityCode.  """  
      self.ReservePriorityCode:str = obj["ReservePriorityCode"]
      """  Code used to relate a ReservePri record to the order.  Defaulted from Customer.ReservePriorityCode.  """  
      self.ShipOrderComplete:bool = obj["ShipOrderComplete"]
      """  Indicates if the order must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases with a ship date <= the given cutoff date alos have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "O" (Ship Order 100% complete)  """  
      self.WebOrder:bool = obj["WebOrder"]
      """  Not editable, When SF Synch creates orders, this flag is set to YES.  """  
      self.CCApprovalNum:str = obj["CCApprovalNum"]
      """  Updated Via SF Synch.  This is the authorization number from a third party credit card validation service.  """  
      self.EDIOrder:bool = obj["EDIOrder"]
      """  Order created from EDI interfaced module.  """  
      self.EDIAck:bool = obj["EDIAck"]
      """  Updated from EDI module if 855 or 865 created.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order header is linked to an inter-company PO header.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number that uniquely identifies the purchase order.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.WebEntryPerson:str = obj["WebEntryPerson"]
      """  This is the web-login-id (email address) of the person that placed the order.  """  
      self.AckEmailSent:bool = obj["AckEmailSent"]
      """  Indicates whether the email acknowledgement of the order has been sent.  (For web orders)  """  
      self.ApplyOrderBasedDisc:bool = obj["ApplyOrderBasedDisc"]
      """  Indicates if order based discounting needs to be applied to the order.  """  
      self.AutoOrderBasedDisc:bool = obj["AutoOrderBasedDisc"]
      """  Indicates if order based discounting should be applied automatically or manually triggered by user as menu option.  """  
      self.EntryMethod:str = obj["EntryMethod"]
      """   Indicates Entry method program that used to create the order.
S = Standard, Q = Quick Entry,  C = Counter Sales, D = Demand/EDI  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this order.  """  
      self.CounterSale:bool = obj["CounterSale"]
      """  Flag used in sales order entry for counter sales orders.  """  
      self.CreateInvoice:bool = obj["CreateInvoice"]
      """  Create AR Invoice for counter sales order.  """  
      self.CreatePackingSlip:bool = obj["CreatePackingSlip"]
      """  Create Packing Slip for counter sale.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.CCAmount:int = obj["CCAmount"]
      """  Credit Transaction Amount, makes up part of CCTotal  """  
      self.CCFreight:int = obj["CCFreight"]
      """  Credit Card transaction freight amount, part of CCTotal  """  
      self.CCTax:int = obj["CCTax"]
      """  Credit Card Transaction Tax amount, part of CCTotal  """  
      self.CCTotal:int = obj["CCTotal"]
      """  Total amount being sent to the credit card processor  """  
      self.CCDocAmount:int = obj["CCDocAmount"]
      """  See CCAmount  """  
      self.CCDocFreight:int = obj["CCDocFreight"]
      """  See CCFreight  """  
      self.CCDocTax:int = obj["CCDocTax"]
      """  See CCTax  """  
      self.CCDocTotal:int = obj["CCDocTotal"]
      """  See CCTotal  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.BTConNum:int = obj["BTConNum"]
      """  New database field as it can be changed by user.  Default is set to BTCustNum?s primary billing contact.  If a primary billing contact is not set, default is ?None Selected?.  Keep in mind the BTCustNum field may be the same as CustNum (SoldTo) but the default would still be this customer?s primary billing contact where the ConNum field (Contact for sold to) is defaulting the primary purchasing contact.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.OutboundSalesDocCtr:int = obj["OutboundSalesDocCtr"]
      """  Incremented whenever an outbound sales document is generated from the order, i.e. Sales Order Acknowledgement, Response to Change, etc.  """  
      self.OutboundShipDocsCtr:int = obj["OutboundShipDocsCtr"]
      """  Incremented whenever an outbound shipping document is generated from the order, i.e. ASN.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this OrderHed is related to.  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.CancelAfterDate:str = obj["CancelAfterDate"]
      """  The date after which the sales order should be canceled.  """  
      self.DemandRejected:bool = obj["DemandRejected"]
      """  Indicates if the demand that created/updated this order has been rejected.  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.CreditCardOrder:bool = obj["CreditCardOrder"]
      """  Indicates if the Order is a credit card order  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.PayFlag:str = obj["PayFlag"]
      """  For Shipping; Bill Shipper, Bill Recipient, Bill Third Party, Bill Consignee  """  
      self.PayAccount:str = obj["PayAccount"]
      """  Shipping Pay Flag Account Number. Required when Pag Flag is collect or Third party  """  
      self.PayBTAddress1:str = obj["PayBTAddress1"]
      """  Shipping Bill To. The first line of the Payers main address. Required when Pay Flag is Third party.  """  
      self.PayBTAddress2:str = obj["PayBTAddress2"]
      """  Shipping Bill To.  The second line of the Payers main address. An address is required when Pay Flag is Third party  """  
      self.PayBTCity:str = obj["PayBTCity"]
      """  Shipping, The city portion of the Payer main address.  """  
      self.PayBTState:str = obj["PayBTState"]
      """  The state or province portion of the shipment payer main address.  """  
      self.PayBTZip:str = obj["PayBTZip"]
      """  The zip or postal code portion of the shipping payers main address.  """  
      self.PayBTCountry:str = obj["PayBTCountry"]
      """  The country of the main shipping payers address.  """  
      self.DropShip:bool = obj["DropShip"]
      """  Freight charges will not be returned if 'yes'  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Added for international shipping  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Added for international shipping. Shipper's Export Declaration  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  For International shipping.  Certificate of Orgin.  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  For International shipping.  Shipper's Letter of Instruction.  """  
      self.FFID:str = obj["FFID"]
      """  International Shipping. Frieght Forwarder ID  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  International Shipping. The first line of the Frieght Forwarder main address.  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  International Shipping. The second line of the Frieght Forwarder main address.  """  
      self.FFCity:str = obj["FFCity"]
      """  Shipping, The city portion of the Frieght Forwarder main address.  """  
      self.FFState:str = obj["FFState"]
      """  International Shipping. The state or province portion of the shipment Frieght Forwarder main address.  """  
      self.FFZip:str = obj["FFZip"]
      """  International Shipping. The zip or postal code portion of the shipping Frieght Forwarder main address.  """  
      self.FFCountry:str = obj["FFCountry"]
      """  International shipping. The country of the Frieght Forwarder .  """  
      self.FFContact:str = obj["FFContact"]
      """  International Shipping. Frieght Forwarder Contact  """  
      self.FFCompName:str = obj["FFCompName"]
      """  International Shipping. Frieght Forwarder company name  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  International Shipping. Frieght Forwarder Phone number  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  Is this an International shipment  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Indicates whether or not all freight charges sent or received are for individual pack DIs or the master pack.  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Freight Forwarder third address line.  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Additional Handling Required flag  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Non Standard Package flag.  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder country portion of the address  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.PayBTAddress3:str = obj["PayBTAddress3"]
      """  Payer Bill To  third address line  """  
      self.PayBTCountryNum:int = obj["PayBTCountryNum"]
      """  Payer Bill To country portion of the address  """  
      self.PayBTPhone:str = obj["PayBTPhone"]
      """  Payer Bill To phone number  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantity View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View Ship from Nam  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantity View Memo  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the order is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the order which could affect taxes (OrderDtl, OrderHed, OrderMisc, etc). It defaults from XASyst.SOReadyToCalcDflt field when an order is created.  """  
      self.TotalCharges:int = obj["TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalMisc:int = obj["TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalDiscount:int = obj["TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalComm:int = obj["TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalAdvBill:int = obj["TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalLines:int = obj["TotalLines"]
      """  Total number of lines on the order  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases on order  """  
      self.TotalRelDates:int = obj["TotalRelDates"]
      """  Total number of distinct release dates on order  """  
      self.DocTotalCharges:int = obj["DocTotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalMisc:int = obj["DocTotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalDiscount:int = obj["DocTotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalComm:int = obj["DocTotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalTax:int = obj["TotalTax"]
      """   Order Total Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalAdvBill:int = obj["DocTotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalShipped:int = obj["TotalShipped"]
      """  Total Shipped amount  """  
      self.TotalInvoiced:int = obj["TotalInvoiced"]
      """  Total amount of order that has been invoiced  """  
      self.TotalCommLines:int = obj["TotalCommLines"]
      """  Total number of lines that were commissionable  """  
      self.SRCommAmt1:int = obj["SRCommAmt1"]
      """  Commission earned for first sales rep  """  
      self.SRCommAmt2:int = obj["SRCommAmt2"]
      """  Commission earned for second sales rep  """  
      self.SRCommAmt3:int = obj["SRCommAmt3"]
      """  Commission earned for third sales rep  """  
      self.SRCommAmt4:int = obj["SRCommAmt4"]
      """  Commission earned for fourth sales rep  """  
      self.SRCommAmt5:int = obj["SRCommAmt5"]
      """  Commission earned for fifth sales rep  """  
      self.SRCommableAmt1:int = obj["SRCommableAmt1"]
      """  Total Commissionable Amount for first salesrep  """  
      self.SRCommableAmt2:int = obj["SRCommableAmt2"]
      """  Total Commissionable Amount for second salesrep  """  
      self.SRCommableAmt3:int = obj["SRCommableAmt3"]
      """  Total Commissionable Amount for third salesrep  """  
      self.SRCommableAmt4:int = obj["SRCommableAmt4"]
      """  Total Commissionable Amount for fourth salesrep  """  
      self.SRCommableAmt5:int = obj["SRCommableAmt5"]
      """  Total Commissionable Amount for fifth salesrep  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt1DepositBal:int = obj["Rpt1DepositBal"]
      """  Display value contains the deposit balance in a reporting currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt2DepositBal:int = obj["Rpt2DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt3DepositBal:int = obj["Rpt3DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt1TotalCharges:int = obj["Rpt1TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalCharges:int = obj["Rpt2TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalCharges:int = obj["Rpt3TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalAdvBill:int = obj["Rpt1TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt2TotalAdvBill:int = obj["Rpt2TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt3TotalAdvBill:int = obj["Rpt3TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt1TotalMisc:int = obj["Rpt1TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalMisc:int = obj["Rpt2TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalMisc:int = obj["Rpt3TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalDiscount:int = obj["Rpt1TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalDiscount:int = obj["Rpt2TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalDiscount:int = obj["Rpt3TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalComm:int = obj["Rpt1TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalComm:int = obj["Rpt2TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalComm:int = obj["Rpt3TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax +TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1CCAmount:int = obj["Rpt1CCAmount"]
      """  See CCAmount  """  
      self.Rpt2CCAmount:int = obj["Rpt2CCAmount"]
      """  See CCAmount  """  
      self.Rpt3CCAmount:int = obj["Rpt3CCAmount"]
      """  See CCAmount  """  
      self.Rpt1CCFreight:int = obj["Rpt1CCFreight"]
      """  See CCFreight  """  
      self.Rpt2CCFreight:int = obj["Rpt2CCFreight"]
      """  See CCFreight  """  
      self.Rpt3CCFreight:int = obj["Rpt3CCFreight"]
      """  See CCFreight  """  
      self.Rpt1CCTax:int = obj["Rpt1CCTax"]
      """  See CCTax  """  
      self.Rpt2CCTax:int = obj["Rpt2CCTax"]
      """  See CCTax  """  
      self.Rpt3CCTax:int = obj["Rpt3CCTax"]
      """  See CCTax  """  
      self.Rpt1CCTotal:int = obj["Rpt1CCTotal"]
      """  See CCTotal  """  
      self.Rpt2CCTotal:int = obj["Rpt2CCTotal"]
      """  See CCTotal  """  
      self.Rpt3CCTotal:int = obj["Rpt3CCTotal"]
      """  See CCTotal  """  
      self.OrderAmt:int = obj["OrderAmt"]
      """  Total order Amount. This field is an accumulation of the extended net amounts of the detail line items  """  
      self.DocOrderAmt:int = obj["DocOrderAmt"]
      """  Total order Amount in customer currency. This field is an accumulation of the extended net amounts of the detail line items and rounded according to the Doc currency Round rule  """  
      self.Rpt1OrderAmt:int = obj["Rpt1OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrderAmt:int = obj["Rpt2OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrderAmt:int = obj["Rpt3OrderAmt"]
      """  Reporting currency value of this field  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipment country  """  
      self.TotalWHTax:int = obj["TotalWHTax"]
      """   Order Total Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalWHTax:int = obj["DocTotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalWHTax:int = obj["Rpt1TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalWHTax:int = obj["Rpt2TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalWHTax:int = obj["Rpt3TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """   Order Total Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS is saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the  OTS info.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.OrderStatus:str = obj["OrderStatus"]
      """  Status of Order  """  
      self.HoldSetByDemand:bool = obj["HoldSetByDemand"]
      """  Hold Set by Demand  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.InTotalCharges:int = obj["InTotalCharges"]
      """  Reserved for future use  """  
      self.InTotalMisc:int = obj["InTotalMisc"]
      """  Reserved for future use  """  
      self.InTotalDiscount:int = obj["InTotalDiscount"]
      """  Reserved for future use  """  
      self.DocInTotalCharges:int = obj["DocInTotalCharges"]
      """  Reserved for future use  """  
      self.DocInTotalMisc:int = obj["DocInTotalMisc"]
      """  Reserved for future use  """  
      self.DocInTotalDiscount:int = obj["DocInTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt1InTotalCharges:int = obj["Rpt1InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt2InTotalCharges:int = obj["Rpt2InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt3InTotalCharges:int = obj["Rpt3InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt1InTotalMisc:int = obj["Rpt1InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt2InTotalMisc:int = obj["Rpt2InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt3InTotalMisc:int = obj["Rpt3InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt1InTotalDiscount:int = obj["Rpt1InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt2InTotalDiscount:int = obj["Rpt2InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt3InTotalDiscount:int = obj["Rpt3InTotalDiscount"]
      """  Reserved for future use  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash Receipts. Default is from Customer(Bill To).  """  
      self.ERSOrder:bool = obj["ERSOrder"]
      """  It will be used to identify SO that will generate an invoice at the shipment.  If the order is created manually the default for this order will be taken from the customer master file. If the order is created via DM, the default will be taken from the value in the DM records.  """  
      self.LOCHold:bool = obj["LOCHold"]
      """  Indicates that order is on hold due to amount exceeding value on Letter of Credit.  """  
      self.PSCurrCode:str = obj["PSCurrCode"]
      """  Currency code used in further packing slips.  """  
      self.InvCurrCode:str = obj["InvCurrCode"]
      """  Currency code used in further AR invoices.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  Legal Number for the record.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document for the record.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.DemandProcessDate:str = obj["DemandProcessDate"]
      """  Date in which the related demand was last processed.  """  
      self.DemandProcessTime:int = obj["DemandProcessTime"]
      """  System Time when demand was last processed.  """  
      self.LastScheduleNumber:str = obj["LastScheduleNumber"]
      """  Last Schedule Number in which the demand was processed.  """  
      self.LastTCtrlNum:str = obj["LastTCtrlNum"]
      """  EDI Transaction Control Number  """  
      self.LastBatchNum:str = obj["LastBatchNum"]
      """  EDI Batch Control Number  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCPONum:str = obj["ECCPONum"]
      """  ECCPONum  """  
      self.WIOrder:str = obj["WIOrder"]
      """  WIOrder  """  
      self.WIApplication:str = obj["WIApplication"]
      """  WIApplication  """  
      self.WIUsername:str = obj["WIUsername"]
      """  WIUsername  """  
      self.WIUserID:str = obj["WIUserID"]
      """  WIUserID  """  
      self.WICreditCardorder:bool = obj["WICreditCardorder"]
      """  WICreditCardorder  """  
      self.OrderCSR:str = obj["OrderCSR"]
      """  OrderCSR  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.IsCSRSet:bool = obj["IsCSRSet"]
      """  IsCSRSet  """  
      self.ECCPaymentMethod:str = obj["ECCPaymentMethod"]
      """  ECCPaymentMethod  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      """  OTSShipToNum  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.ccToken:str = obj["ccToken"]
      """  ccToken  """  
      self.InvcOrderCmp:bool = obj["InvcOrderCmp"]
      """  InvcOrderCmp  """  
      self.ReprintSOAck:bool = obj["ReprintSOAck"]
      """  ReprintSOAck  """  
      self.CounterSOAck:int = obj["CounterSOAck"]
      """  CounterSOAck  """  
      self.DispatchReason:str = obj["DispatchReason"]
      """  DispatchReason  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag will be used to indicate if the sales order is ready to be fulfilled.  """  
      self.ShipByTime:int = obj["ShipByTime"]
      """  Ship the good by this time  """  
      self.TWFiscalYear:int = obj["TWFiscalYear"]
      """  Taiwan GUI Calendar Fiscal Year  """  
      self.TWFiscalYearSuffix:str = obj["TWFiscalYearSuffix"]
      """  Taiwan GUI Calendar Fiscal Year Suffix  """  
      self.TWFiscalPeriod:int = obj["TWFiscalPeriod"]
      """  Taiwan GUI Calendar Fiscal Period  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  GUI Group of Legal Numbers  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  Seller GUI Code  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  Buyer GUI Code  """  
      self.OrderOpenCredit:int = obj["OrderOpenCredit"]
      """  OrderOpenCredit  """  
      self.ClosedNotShipped:int = obj["ClosedNotShipped"]
      """  ClosedNotShipped  """  
      self.InvCurrDepositBal:int = obj["InvCurrDepositBal"]
      """  InvCurrDepositBal  """  
      self.PLArticle106c:bool = obj["PLArticle106c"]
      """  Article. 106c  """  
      self.PLInvIssuedByTaxpayer:bool = obj["PLInvIssuedByTaxpayer"]
      """  Invoices are issued by a taxpayer's representative  """  
      self.PLInvIssuedBySecondTaxpayer:bool = obj["PLInvIssuedBySecondTaxpayer"]
      """  Invoices issued by the second taxpayer  """  
      self.PLTouristService:bool = obj["PLTouristService"]
      """  Tourist Services  """  
      self.PLSecondHandOrArts:bool = obj["PLSecondHandOrArts"]
      """  Second hand goods, works of art, collectibles or antiques  """  
      self.PLLegalArticleAct:str = obj["PLLegalArticleAct"]
      """  Appropriate Legal Article of the Act  """  
      self.PLLegalArticleWEDirective:str = obj["PLLegalArticleWEDirective"]
      """  Appropriate Legal Article of 2006/112/WE Directive  """  
      self.PLLegalArticleOther:str = obj["PLLegalArticleOther"]
      """  Other Legal Article  """  
      self.PLEnforcementAuthName:str = obj["PLEnforcementAuthName"]
      """  Name of the Enforcement Authority or the Name of the Judicial Officer  """  
      self.PLEnforcementAuthAddr:str = obj["PLEnforcementAuthAddr"]
      """  Address of the Enforcement Authority or Judicial Officer  """  
      self.PLTaxRepresentativeName:str = obj["PLTaxRepresentativeName"]
      """  Tax Representative Name  """  
      self.PLTaxRepresentativeAddr:str = obj["PLTaxRepresentativeAddr"]
      """  Tax Representative Address  """  
      self.PLTaxRepresentativeTaxID:str = obj["PLTaxRepresentativeTaxID"]
      """  Tax ID of the Tax Representative  """  
      self.PLMarginScheme:int = obj["PLMarginScheme"]
      """  Margin Scheme  """  
      self.PLGoodsOrServiceVATExempt:bool = obj["PLGoodsOrServiceVATExempt"]
      """  Goods or Service VAT exempt  """  
      self.CCCity:str = obj["CCCity"]
      """  Credit Card Holder City  """  
      self.CCState:str = obj["CCState"]
      """  Credit Card Holder State  """  
      self.ExtAOEUserID:str = obj["ExtAOEUserID"]
      """  ExtAOEUserID  """  
      self.ExtAOE:str = obj["ExtAOE"]
      """  ExtAOE  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers (CustID`CustomerName~CustID`CustomerName)  """  
      self.AVSAddr:str = obj["AVSAddr"]
      """  AVSADDR returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) address test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AVSZip:str = obj["AVSZip"]
      """  AVSZIP returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) zip code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.BillToCustomerName:str = obj["BillToCustomerName"]
      """  Bill to customer name.  """  
      self.BTAddressList:str = obj["BTAddressList"]
      """  Bill To Address List.  """  
      self.BTContactEMailAddress:str = obj["BTContactEMailAddress"]
      self.BTContactFaxNum:str = obj["BTContactFaxNum"]
      """  Bill to contact fax number.  """  
      self.BTContactName:str = obj["BTContactName"]
      """  Bill to contact name.  """  
      self.BTContactPhoneNum:str = obj["BTContactPhoneNum"]
      """  Bill to contact phone number.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Bill To Customer ID  """  
      self.CanChangeTaxLiab:bool = obj["CanChangeTaxLiab"]
      """  The flag to indicate if the user can change Tax Liability on the header level after adding a detail line.  """  
      self.CardStore:str = obj["CardStore"]
      """  Stored Credit Card Number  """  
      self.CCCSCID:str = obj["CCCSCID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention  """  
      self.CCCSCIDToken:str = obj["CCCSCIDToken"]
      """  Tokenized value of CSCID  """  
      self.CCIsTraining:bool = obj["CCIsTraining"]
      """   Indicates if the credit card setup will be using a testing Paygate instance for transactions.
Force requests to use Paygate test url: paygate-test1.eaglesoa.com  """  
      self.CCResponse:str = obj["CCResponse"]
      """  RESPMSG returned by  a 3rd party credit card processing company for a credit card transaction. This is a brief description of the status of the credit card transaction.  """  
      self.CCRounding:int = obj["CCRounding"]
      self.CCTranID:str = obj["CCTranID"]
      """  PNREF returned by a 3rd party credit card processing company for a credit card transaction. This is a unique number that identifies the transaction and is often referenced we performing related transactions.  """  
      self.CCTranType:str = obj["CCTranType"]
      """  Credit Card Transaction Type  """  
      self.CSCResult:str = obj["CSCResult"]
      """  CVV2MATCH returned by a 3rd party credit card processing company for a credit card transaction. This value represents the results of the Card Security Code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustomerPrintAck:bool = obj["CustomerPrintAck"]
      self.CustomerRequiresPO:bool = obj["CustomerRequiresPO"]
      """  If true the customer requires a unique PO on Sales Orders  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      """  When set to true, indicates that this customer does not have credit available from your company.  """  
      self.CustTradePartnerName:str = obj["CustTradePartnerName"]
      self.DemandContract:str = obj["DemandContract"]
      """  DemandContract  """  
      self.DocCCRounding:int = obj["DocCCRounding"]
      self.DocTotalNet:int = obj["DocTotalNet"]
      self.DocTotalOrder:int = obj["DocTotalOrder"]
      self.dspBTCustID:str = obj["dspBTCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.ECCEmail:str = obj["ECCEmail"]
      """  ECC Contact Email - Contains the email address of the ECC login that placed the sales order. This only applies for B2C Orders.  """  
      self.ECCPaymentDesc:str = obj["ECCPaymentDesc"]
      """  ECC Payment Description  """  
      self.EnableCreditCard:bool = obj["EnableCreditCard"]
      """  True when Credit Card Procesing module is enabled  """  
      self.EnableJobWizard:bool = obj["EnableJobWizard"]
      """  True when Job Wizard must be enabled  """  
      self.EnableSoldToID:bool = obj["EnableSoldToID"]
      """  True when SoldTo ID must be enabled  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ERSOverride:bool = obj["ERSOverride"]
      """  It will be displayed when the value of the ERS flag at the sales order is different from the value in the customer master file.  """  
      self.HasMiscCharges:bool = obj["HasMiscCharges"]
      """  Used by UI to disable CurrencyCode  """  
      self.HasOrderLines:bool = obj["HasOrderLines"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.LinkMsg:str = obj["LinkMsg"]
      self.NoTaxRgnChange:bool = obj["NoTaxRgnChange"]
      """  Internal field which indicates if Order Tax Liability is not going to be changed even though Ship To is changed.  Related to Tax inclusive pricing. Depends on user response.  """  
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  OTS Tax Liability Code (Header)  """  
      self.ParentCustNum:int = obj["ParentCustNum"]
      """  Contains the Parent Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      self.ReferencePNRef:str = obj["ReferencePNRef"]
      """  PNRef number referred to in the transaction.  If Deposit transaction must referenece prior Authorization using the PNRef  """  
      self.ResetBTCustAddr:bool = obj["ResetBTCustAddr"]
      """  Internal field toindicate if the system should reset Bill to Customer address.  Based on the  user reply for LOC.  """  
      self.ResetRelTaxRgn:bool = obj["ResetRelTaxRgn"]
      """  Internal field which indicates if existing Release Tax Region should be se-set to the new Order Header Tax Liability.  Depends on the user reply.  """  
      self.Rpt1CCRounding:int = obj["Rpt1CCRounding"]
      self.Rpt1TotalNet:int = obj["Rpt1TotalNet"]
      self.Rpt2CCRounding:int = obj["Rpt2CCRounding"]
      self.Rpt2TotalNet:int = obj["Rpt2TotalNet"]
      self.Rpt3CCRounding:int = obj["Rpt3CCRounding"]
      self.Rpt3TotalNet:int = obj["Rpt3TotalNet"]
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  Element 1 of SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  Element 2 of SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  Element 3 of SalesRepList  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  Element 4 of SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  Element 5 of SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.ShipToAddressList:str = obj["ShipToAddressList"]
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShipToCustId:str = obj["ShipToCustId"]
      """  Customer Id of the third-party Ship To  """  
      self.ShowApplyOrderDiscountsControl:bool = obj["ShowApplyOrderDiscountsControl"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      self.SoldToContactEMailAddress:str = obj["SoldToContactEMailAddress"]
      self.SoldToContactFaxNum:str = obj["SoldToContactFaxNum"]
      self.SoldToContactName:str = obj["SoldToContactName"]
      self.SoldToContactPhoneNum:str = obj["SoldToContactPhoneNum"]
      self.TermsType:str = obj["TermsType"]
      """  This field defines the type of the term  """  
      self.TotalNet:int = obj["TotalNet"]
      self.TotalOrder:int = obj["TotalOrder"]
      self.TranDocTypeDescr:str = obj["TranDocTypeDescr"]
      self.TrueDiscountPercent:int = obj["TrueDiscountPercent"]
      """  the true discount percent from the order total  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  Taiwan GUI Legal Number Generation Type  """  
      self.UpdateDtlAndRelRecords:bool = obj["UpdateDtlAndRelRecords"]
      self.InvoicesExist:bool = obj["InvoicesExist"]
      """  Indicates if one or more invoices exist for this order  """  
      self.BTAddressFormatted:str = obj["BTAddressFormatted"]
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  The formatted ship to address  """  
      self.SoldToAddressFormatted:str = obj["SoldToAddressFormatted"]
      """  The formatted Sold To Address  """  
      self.TranDate:str = obj["TranDate"]
      self.TranNum:int = obj["TranNum"]
      self.TranTime:int = obj["TranTime"]
      self.OrderRelNeedByDateNotNull:bool = obj["OrderRelNeedByDateNotNull"]
      """  Indicates there is an OrderRel record that has a non-null NeedByDate  """  
      self.InactiveCustomer:bool = obj["InactiveCustomer"]
      """  Indicates a customer referenced on the order is inactive.  """  
      self.EnableAllocationQueueActions:bool = obj["EnableAllocationQueueActions"]
      """  Enable Fulfillment Queue Actions  """  
      self.CREProcessor:bool = obj["CREProcessor"]
      """  CREProcessor is true when Credit Card Configuration is CRE Server.  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BTCustNumCustID:str = obj["BTCustNumCustID"]
      self.BTCustNumName:str = obj["BTCustNumName"]
      self.BTCustNumBTName:str = obj["BTCustNumBTName"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.InvCurrCurrDesc:str = obj["InvCurrCurrDesc"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.PlantName:str = obj["PlantName"]
      self.PSCurrCurrDesc:str = obj["PSCurrCurrDesc"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.ReservePriDescription:str = obj["ReservePriDescription"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaCodeInactive:bool = obj["ShipViaCodeInactive"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.Project_c:str = obj["Project_c"]
      self.OriginalOrderNo_c:int = obj["OriginalOrderNo_c"]
      self.MASFlag_c:bool = obj["MASFlag_c"]
      self.Estimate_c:bool = obj["Estimate_c"]
      self.ShipOrderComplete_c:bool = obj["ShipOrderComplete_c"]
      self.ProjectID_c:str = obj["ProjectID_c"]
      self.PhaseID_c:str = obj["PhaseID_c"]
      self.SalesCatID__c:str = obj["SalesCatID__c"]
      self.TaxCatID_c:str = obj["TaxCatID_c"]
      self.MfgOrder_c:bool = obj["MfgOrder_c"]
      pass

class Erp_Tablesets_OrderHedUPSRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.UPSQVSeq:int = obj["UPSQVSeq"]
      """  UPS Quantum View Sequence  """  
      self.EmailAddress:str = obj["EmailAddress"]
      """  Email address to notify for a UPS shipment  """  
      self.ShipmentNotify:bool = obj["ShipmentNotify"]
      """  Logical indicating if the EmailAddress is to be updated at shipping.  """  
      self.FailureNotify:bool = obj["FailureNotify"]
      """  Logical indicating if the Email Address is to be notified of a failed shipment.  """  
      self.DeliveryNotify:bool = obj["DeliveryNotify"]
      """  Logical indicating if the Email Address is to be notified of delivery.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EnableQuantumView:bool = obj["EnableQuantumView"]
      """  Logical indicating if the UPS quantum view email data is to be enabled.  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHistRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order Line  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Order Date  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Part Description  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Order Quantity  """  
      self.UOM:str = obj["UOM"]
      """  Selling Unit of Measure  """  
      self.OriginalPrice:int = obj["OriginalPrice"]
      """  Original Price  """  
      self.NewPrice:int = obj["NewPrice"]
      """  New Price  """  
      self.NewQty:int = obj["NewQty"]
      """  New Quantity  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number that this miscellaneous record is related to. If related to the Order then this field is zero. This number is not directly entered by the user; rather it is carried through from the header or detail line that user was on when miscellaneous maintenance was requested.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the MiscChrg master file.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. This will be printed on the acknowledgment and transferred over to invoice processing. The default is provided by MiscChrg.Description, but it's overridable by the user. This can't be blank.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.FreqCode:str = obj["FreqCode"]
      """  Sets the frequency of when this miscellaneous charge should be applied. The options are F - First shipment, L = Last shipment, E = every shipment. This defaults from the MiscChrg.FreqCode.  """  
      self.Quoting:str = obj["Quoting"]
      """  An internally used flag which indicates that this record was created from a Quote via the "Get Quote" function. "Q" = related to the QuoteQty record, "L" = related to the overall QuoteDtl record. This flag is used so that the OrderMsc file can be refreshed from the QuoteMsc when Quantity or Quote/Line # changes occur. The logic is that if a change in order quantity of a order line that is linked to a quote causes a different price break to be selected then all the existing all OrderMsc records where Quoting = "Q" are deleted and then re-pulled in based on the new qty. If the Quote # or QuoteLine are changed then all OrderMsc records where Quoting is either a "Q" or "L" are deleted then re-pulled in from the newly referenced quote.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order miscellaneous charge is linked to an inter-company PO misc charge.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  Inter Company PO Sequence Number  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default. - Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default. - includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.ChangeTrackApproved:bool = obj["ChangeTrackApproved"]
      """  ChangeTrackApproved  """  
      self.ChangeTrackAmount:int = obj["ChangeTrackAmount"]
      """  ChangeTrackAmount  """  
      self.ChangeTrackMemoDesc:str = obj["ChangeTrackMemoDesc"]
      """  ChangeTrackMemoDesc  """  
      self.ChangeTrackMemoText:str = obj["ChangeTrackMemoText"]
      """  ChangeTrackMemoText  """  
      self.ChangeTrackStatus:str = obj["ChangeTrackStatus"]
      """  ChangeTrackStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DocDspMiscAmt:int = obj["DocDspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Misc charge amount on display (may or may not include taxes)  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.OpenLine:bool = obj["OpenLine"]
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.BitFlag:int = obj["BitFlag"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderRelRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Date which the item needs to be shipped by in order to meet the customers due date. Initially defaulted as OrderHed.ReqDate.  """  
      self.OurReqQty:int = obj["OurReqQty"]
      """  Quantity ,using Our U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The ShipTo ID to be used for this scheduled release record. This MUST BE VALID IN THE SHIPTO file. Use the OrderHead.ShiptoNum as the default when creating new records.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Ship Via ID that is used for this shipment release. THIS CAN BE BLANK or MUST BE VALID IN THE SHIPVIA master file. Use the OrderHead.ShipViaCode as the default.  """  
      self.OpenRelease:bool = obj["OpenRelease"]
      """  Indicates if this release is open.  This is normally set to closed via the shipping program. But can be changed indirectly  by the user during order entry when they "Void" the release..  """  
      self.FirmRelease:bool = obj["FirmRelease"]
      """  Indicates if this release is  "FIRM". The opposite is an uncommitted release, that is when the customer gives releases that are just 'Best Guesses' of what they will require in the future, such as in blanket order situations. This type of  releases is no different to the system, except that the FirmRelease field will be printed on reports such as TimePhase requirements.  """  
      self.Make:bool = obj["Make"]
      """   Indicates if this requirement or any part of it will be manufactured. Default the setting to "No" if valid Part and the Part.Type is "S" or "P".

Default the setting to "Yes" if the part is not found in Part master or the Part.Type = "J".  This flag also gets set if this release gets linked to a Job via Job Entry. There is an Index on this field so that we can display releases that need have a job assigned to them. This display is part of Job Entry.  """  
      self.OurJobQty:int = obj["OurJobQty"]
      """  The planned production quantity, using Our U/M, for the Job. This is not maintainable in order entry. It gets updated via Job Entry.  """  
      self.OurJobShippedQty:int = obj["OurJobShippedQty"]
      """  Actual quantity, using our U/M, shipped from the Job.  Updated via the shipping process.  """  
      self.VoidRelease:bool = obj["VoidRelease"]
      """   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.

When an OrderRel record is 'voided' any outstanding inventory allocations are relieved, OrderRel.OpenRelease is set to "no" and records are created/updated in the OrdJobMsg file for all the related  open OrderRel records if the OrderDtl that was tied to a Job to indicate that the line item was voided.  """  
      self.OurStockQty:int = obj["OurStockQty"]
      """  Quantity, using Our U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Indicates the inventory warehouse. This field is only relevant if this line references a valid Part record. Use the PrimWhse in the Part table as a default.  """  
      self.OurStockShippedQty:int = obj["OurStockShippedQty"]
      """  Actual quantity, using our U/M, shipped from Stock.  Updated via the shipping process.  """  
      self.PartNum:str = obj["PartNum"]
      """  The part number the release quantity is currently allocated to (if it exists in the part master file).  This is a duplicate of the OrderDtl part number and is not user maintainable.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Mirror image of OrderDtl.RevisionNum.  Not directly maintainable.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this customer/shipto  is exempt from sales tax for this line item. If field is non-blank it is considered exempt. Defaults from the Customer/Shipto file.  This code is totally user definable and no validation is required. This field will be printed on the Tax report if this item is reportable .  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Enter via a DDSL fill-in for contact name. Use OrderHed.ShpConNum when the OrderRel.ShipToNum = OrderHed.ShipToNum else use ShipTo.PrimScon as a default.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the item to be delivered. Defaulted as OrderHed.NeedByDate.  """  
      self.Reference:str = obj["Reference"]
      """  EDI Reference  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.SellingReqQty:int = obj["SellingReqQty"]
      """  Quantity ,using Selling U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  """  
      self.SellingJobQty:int = obj["SellingJobQty"]
      """  The planned production quantity, using selling U/M, for the Job. This is not maintainable in order entry. It gets updated via Job Entry.  """  
      self.SellingJobShippedQty:int = obj["SellingJobShippedQty"]
      """  Actual quantity, using selling U/M, shipped from the Job.  Updated via the shipping process.  """  
      self.SellingStockQty:int = obj["SellingStockQty"]
      """  Quantity, using selling U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  """  
      self.SellingStockShippedQty:int = obj["SellingStockShippedQty"]
      """  Actual quantity, using selling U/M, shipped from Stock.  Updated via the shipping process.  """  
      self.SelectForPicking:bool = obj["SelectForPicking"]
      """  Indicates if the release is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  """  
      self.StagingWarehouseCode:str = obj["StagingWarehouseCode"]
      """  The shipping "Staging" warehouse for the release.  Defaults from the system default shipping area (Site.DefShippingWhse). This is maintainable in the Sales Allocation program.  """  
      self.StagingBinNum:str = obj["StagingBinNum"]
      """  The shipping "Staging" bin for the release.  Defaults from the system default shipping area (Site.DefShippingBin). This is maintainable in the Sales Allocation program.  """  
      self.PickError:str = obj["PickError"]
      """   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  """  
      self.CumeQty:int = obj["CumeQty"]
      """  Quantity from last EDI update.  """  
      self.CumeDate:str = obj["CumeDate"]
      """  Date of last update  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order release is linked to an inter-company PO release.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPORelNum:int = obj["ICPORelNum"]
      """  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ScheduleNumber:str = obj["ScheduleNumber"]
      """  A link to the demand schedule that created/updated this OrderRel.  """  
      self.MarkForNum:str = obj["MarkForNum"]
      """  The Mark For to be used for this order release record. This MUST BE VALID IN THE SHIPTO file.  """  
      self.DropShipName:str = obj["DropShipName"]
      """  Full name for the drop shipment.  """  
      self.RAN:str = obj["RAN"]
      """  RAN Number.  Used for informational purposes.  Supplied by EDI.  """  
      self.DemandReference:str = obj["DemandReference"]
      """  Demand Reference.  Used for informational purposes and to aide in matching demand schedules with existing OrderRel records.  Supplied by EDI.  """  
      self.DemandSchedRejected:bool = obj["DemandSchedRejected"]
      """  Indicates if the demand schedule that created/updated this order release has been rejected.  """  
      self.DatePickTicketPrinted:str = obj["DatePickTicketPrinted"]
      """  The last date that the Material Queue Report was run for this release.  This field will be null until the Material Queue Report is run.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.VerbalConf:bool = obj["VerbalConf"]
      """  Verbal Confirmation required  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.ServSatDelivery:bool = obj["ServSatDelivery"]
      """  Is a Service Saturday delivery acceptable  """  
      self.ServSatPickup:bool = obj["ServSatPickup"]
      """  Is a Service Saturday pickup available  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServPOD:bool = obj["ServPOD"]
      """  Service Auto POD flag  """  
      self.ServAOD:bool = obj["ServAOD"]
      """  AOD  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.DockingStation:str = obj["DockingStation"]
      """  The dockingstation of the shipto address.  For future use.  """  
      self.Location:str = obj["Location"]
      """  The location within the customer shipto address.  For future use.  """  
      self.TransportID:str = obj["TransportID"]
      """  The code of the transport routing/time. For future use.  """  
      self.ShipbyTime:int = obj["ShipbyTime"]
      """  Ship the good by this time.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the OrderRelTax records tied to this release are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the release before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """  Indicates that the One Time ShipTO information defined for this release should be used.  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipment country  """  
      self.SubShipTo:str = obj["SubShipTo"]
      """   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a store description.
Will be printed on the packing slip  """  
      self.ShipRouting:str = obj["ShipRouting"]
      """   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a routing description.
Will be printed on the packing slip  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This field identifies Buy To Order releases.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The value for this field will be defaulted from the Supplier defined in the Part Site sub tab at the Part form. Used only for Buy To Order releases.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Supplier Purchase Point. Used only for Buy To Order releases.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This field identifies Drop Ship releases. Used only for Buy To Order releases.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.POLine:int = obj["POLine"]
      """  The line number of the purchase order related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  The release number of the purchase order line related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS can be saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the OTS info.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.IUM:str = obj["IUM"]
      """   Unit of Measure that qualifies the "our" quantity fields.
If a valid part then it is the Base Stocking UOM (Part.IUM).
A mirror image of OrderDtl.IUM. Not directly maintainable  """  
      self.SalesUM:str = obj["SalesUM"]
      """   Selling Unit of measure. Qualifies the "Selling" quantity fields.
A mirror image of OrderDtl.SalesUM. Not directly maintainable.  """  
      self.RelStatus:str = obj["RelStatus"]
      """  Status of Order Release  """  
      self.ComplianceMsg:str = obj["ComplianceMsg"]
      """  Displays the cause why the item is not compliant.  """  
      self.PrevSellQty:int = obj["PrevSellQty"]
      """  Previous Selling Quantity  """  
      self.PrevPartNum:str = obj["PrevPartNum"]
      """  Previous Part Number  """  
      self.PrevXPartNum:str = obj["PrevXPartNum"]
      """  Previous Customer Part Number  """  
      self.PrevNeedByDate:str = obj["PrevNeedByDate"]
      """  Previous Need By Date  """  
      self.PrevReqDate:str = obj["PrevReqDate"]
      """  Previous Require Date  """  
      self.PrevShipToNum:str = obj["PrevShipToNum"]
      """  Previous Ship To Num  """  
      self.MFCustNum:int = obj["MFCustNum"]
      """  Mark For Customer Number. This along with Mark For ShipToNum provides the foreign key field to a given ShipTo.  """  
      self.UseOTMF:bool = obj["UseOTMF"]
      """  Indicates that the One Time Mark For information defined for this record should be used.  """  
      self.OTMFName:str = obj["OTMFName"]
      """  One Time Mark For Name of the ShipTo.  """  
      self.OTMFAddress1:str = obj["OTMFAddress1"]
      """  One Time Mark For first line of the ShipTo address.  """  
      self.OTMFAddress2:str = obj["OTMFAddress2"]
      """  One Time Mark For second line of the ShipTo address.  """  
      self.OTMFAddress3:str = obj["OTMFAddress3"]
      """  One Time Mark For third line of the ShipTo address.  """  
      self.OTMFCity:str = obj["OTMFCity"]
      """  City portion of the One Time Mark For address.  """  
      self.OTMFState:str = obj["OTMFState"]
      """  The state or province portion of the One Time Mark For address.  """  
      self.OTMFZIP:str = obj["OTMFZIP"]
      """  The zip or postal code portion of the One Time Mark For address.  """  
      self.OTMFContact:str = obj["OTMFContact"]
      """  One Time Mark For Contact Name  """  
      self.OTMFFaxNum:str = obj["OTMFFaxNum"]
      """  Fax number for the One Time Mark For.  """  
      self.OTMFPhoneNum:str = obj["OTMFPhoneNum"]
      """  Phone number for the One Time Mark For  """  
      self.OTMFCountryNum:int = obj["OTMFCountryNum"]
      """  Country number for the One Time Mark For  """  
      self.ECCPlant:str = obj["ECCPlant"]
      """  ECCPlant  """  
      self.WIOrderLine:str = obj["WIOrderLine"]
      """  WIOrderLine  """  
      self.WIOrder:str = obj["WIOrder"]
      """  WIOrder  """  
      self.WebSKU:str = obj["WebSKU"]
      """  WebSKU  """  
      self.ShipOvers:bool = obj["ShipOvers"]
      """  ShipOvers  """  
      self.WIItemPrice:int = obj["WIItemPrice"]
      """  WIItemPrice  """  
      self.WIItemShipCost:int = obj["WIItemShipCost"]
      """  WIItemShipCost  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.PhaseID:str = obj["PhaseID"]
      """  PhaseID  """  
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      """  OTSShipToNum  """  
      self.WasRecInvoiced:bool = obj["WasRecInvoiced"]
      """  WasRecInvoiced  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the sales order release is ready to be fulfilled.  """  
      self.OTSEMailAddress:str = obj["OTSEMailAddress"]
      """  One Time ShipTo email address.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.NumberOfPieces:int = obj["NumberOfPieces"]
      """  Number of pieces for this attribute set.  """  
      self.NumberOfPiecesUOM:str = obj["NumberOfPiecesUOM"]
      """  Unit of measure for the NumberOfPieces.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.PartAllocQueueAction:str = obj["PartAllocQueueAction"]
      """  Indicates if the release should be added or removed from the fulfillment queue.  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.AvailableQuantity:int = obj["AvailableQuantity"]
      self.BuyOverride:bool = obj["BuyOverride"]
      """  BuyOverride  """  
      self.CreditLimitMessage:str = obj["CreditLimitMessage"]
      """  The message returned when checking a customer credit limit.  """  
      self.CreditLimitSource:str = obj["CreditLimitSource"]
      """  The source that put the customer on credit hold.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      """  Is OTS allowed by the Sold to Customer?  """  
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      """  True when Customer allows shipping to a Third-Party  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.DisablePlantWhse:bool = obj["DisablePlantWhse"]
      self.DocSelfAssessTax:int = obj["DocSelfAssessTax"]
      self.DocTotalTax:int = obj["DocTotalTax"]
      self.DocWithholdTax:int = obj["DocWithholdTax"]
      self.DropShipOverride:bool = obj["DropShipOverride"]
      """  DropShipOverride  """  
      self.DspInvMeth:str = obj["DspInvMeth"]
      """   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
'CP' = Cost Plus
The default is Customer Shipment.  """  
      self.DspRevMethod:str = obj["DspRevMethod"]
      """  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  """  
      self.EnableBuyToOrder:bool = obj["EnableBuyToOrder"]
      self.EnableMake:bool = obj["EnableMake"]
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ExistPOSugg:bool = obj["ExistPOSugg"]
      """  ExistPOSugg, external field to show/hide an epishape  """  
      self.HdrOTS:bool = obj["HdrOTS"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvtyUOM:str = obj["InvtyUOM"]
      """  Inventory UOM that the Order Release is allocated against. It is the similare column to the OrderDtl InvtyUOM and should always has the same value as in OrderDtl  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.LinkToPONum:bool = obj["LinkToPONum"]
      """  LinkToPONum, external field to show/hide an epishape  """  
      self.MakeOverride:bool = obj["MakeOverride"]
      self.MarkForAddrFormatted:str = obj["MarkForAddrFormatted"]
      """  The formatted mark for address  """  
      self.MarkForAddrList:str = obj["MarkForAddrList"]
      """  Contains the Mark For Address  """  
      self.MFCustID:str = obj["MFCustID"]
      self.NoRelTaxRgnChange:bool = obj["NoRelTaxRgnChange"]
      """  The flag based on the user anwer if Ship To of the release is supposed be changed but Tax info is not changed because of the conflict in tax pricing  """  
      self.NotCompliant:bool = obj["NotCompliant"]
      """  Indicates if the item on the line is not compliant on its source, that can be Inventory, PO or Job.  """  
      self.OnHandQuantity:int = obj["OnHandQuantity"]
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  OTS Tax Liability Code (Order Release)  """  
      self.PartExists:bool = obj["PartExists"]
      self.PhaseWasRecInvoiced:bool = obj["PhaseWasRecInvoiced"]
      """  If the phase has been recognized or invoiced.  """  
      self.ProjectID:str = obj["ProjectID"]
      self.ReleaseStatus:str = obj["ReleaseStatus"]
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  the flag to indicate if all previously creaded manually added and manual tax relcords related to Order line release should be deleted if the user populates Tax Exempt field.  """  
      self.Rpt1SelfAssessTax:int = obj["Rpt1SelfAssessTax"]
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      self.Rpt1WithholdTax:int = obj["Rpt1WithholdTax"]
      self.Rpt2SelfAssessTax:int = obj["Rpt2SelfAssessTax"]
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      self.Rpt2WithholdTax:int = obj["Rpt2WithholdTax"]
      self.Rpt3SelfAssessTax:int = obj["Rpt3SelfAssessTax"]
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      self.Rpt3WithholdTax:int = obj["Rpt3WithholdTax"]
      self.SalesOrderLinked:bool = obj["SalesOrderLinked"]
      """  SalesOrderLinked  """  
      self.SelfAssessTax:int = obj["SelfAssessTax"]
      """  Self-Assessed Tax  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """  Selling Factor for display only  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Selling Factor Direction for display oly  """  
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  The formatted ship to address  """  
      self.ShipToAddressList:str = obj["ShipToAddressList"]
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToSelected:bool = obj["ShipToSelected"]
      self.SNEnable:bool = obj["SNEnable"]
      self.ThisRelInvtyQty:int = obj["ThisRelInvtyQty"]
      self.TotalJobStockShipped:int = obj["TotalJobStockShipped"]
      self.TotalTax:int = obj["TotalTax"]
      """  Invoice Tax  """  
      self.UpdateMarkForRecords:bool = obj["UpdateMarkForRecords"]
      self.VoidOrder:bool = obj["VoidOrder"]
      self.WithholdTax:int = obj["WithholdTax"]
      """  Withholding Tax  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the button Attibutes in Order Release  """  
      self.AttributeMismatch:bool = obj["AttributeMismatch"]
      """  Attribute class is MRP Planned but AttributeSetID has not been set on release.  """  
      self.AllocatedQuantity:int = obj["AllocatedQuantity"]
      """  The total allocated quantity for this release.  """  
      self.ErrorStatusDisplay:str = obj["ErrorStatusDisplay"]
      """  Error Status Display  """  
      self.InPartAllocQueue:bool = obj["InPartAllocQueue"]
      """  True if this release is in the fulfillment queue.  """  
      self.ShowAllocationQueueActions:bool = obj["ShowAllocationQueueActions"]
      """  Show Fulfillment Queue Actions  """  
      self.BitFlag:int = obj["BitFlag"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.MarkForNumInactive:bool = obj["MarkForNumInactive"]
      self.MFCustNumInactive:bool = obj["MFCustNumInactive"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OTMFCountryDescription:str = obj["OTMFCountryDescription"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PlantName:str = obj["PlantName"]
      self.PurPointAddress3:str = obj["PurPointAddress3"]
      self.PurPointZip:str = obj["PurPointZip"]
      self.PurPointName:str = obj["PurPointName"]
      self.PurPointCountry:str = obj["PurPointCountry"]
      self.PurPointAddress1:str = obj["PurPointAddress1"]
      self.PurPointState:str = obj["PurPointState"]
      self.PurPointCity:str = obj["PurPointCity"]
      self.PurPointAddress2:str = obj["PurPointAddress2"]
      self.PurPointPrimPCon:int = obj["PurPointPrimPCon"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TPShipToName:str = obj["TPShipToName"]
      self.TPShipToBTName:str = obj["TPShipToBTName"]
      self.TPShipToCustID:str = obj["TPShipToCustID"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.JobNum_c:str = obj["JobNum_c"]
      pass

class Erp_Tablesets_OrderRelTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the tax.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the tax converted to the customers currency.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.RateCode:str = obj["RateCode"]
      """  Rate Code  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution Date  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Tax Rate Date  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SalesTaxDescDescription:str = obj["SalesTaxDescDescription"]
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CollectionTypeDescription:str = obj["CollectionTypeDescription"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      self.NoChangeManual:bool = obj["NoChangeManual"]
      """  If Tax Liability is In Price then the user should not be able to change Manual flag on Tax Record  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RateCodeDescDescription:str = obj["RateCodeDescDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderRepCommRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number this sales rep commission is tied to  """  
      self.SalesRepCode:str = obj["SalesRepCode"]
      """  Sales rep code for this commission data  """  
      self.Name:str = obj["Name"]
      """  Sales Rep name  """  
      self.CommLines:int = obj["CommLines"]
      """  Number of commission lines this sales rep has for this order  """  
      self.CommSaleAmt:int = obj["CommSaleAmt"]
      """  Commission sale amount  """  
      self.CommAmt:int = obj["CommAmt"]
      """  Commission amount  """  
      self.Seq:str = obj["Seq"]
      """  Seq number to keep key unique if sales rep is repeated  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Contains the Order Number that ties this detail record back to an OrderHed record.  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Order total and Payment's Percentage.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Order total and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.IsLastRow:bool = obj["IsLastRow"]
      """  Indicates if this is the last OrderSched row for the order  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The Part number that this substitute Part is for.  """  
      self.SubPart:str = obj["SubPart"]
      """  Substitute Part  """  
      self.RecType:str = obj["RecType"]
      """  Indicates the record type. "S" = Substitute, "C" = Compliment  """  
      self.SubType:str = obj["SubType"]
      """  Pertains only to Substitute Parts (RecType = "S"). Values are "C" - Comparable, "D" - Downgrade, "U" - Upgrade  """  
      self.QtyPer:int = obj["QtyPer"]
      """   The quantity of the alternate part per 1 of the parent part in the parents base inventory uom. Cannot be zero.
To convert an existing OrderDtl.SellingQty to a PartSubs. It is converted to the Parents Part Base Inventory UOM  then multiply PartSubs.QtyPer, then converted to  PartSub.SalesUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit of measure used when this part is used as a substitute/compliment with the parent part (partsubs.partnum).  Defaults as Part.SUM of the PartSub.SubPart.  """  
      self.Comment:str = obj["Comment"]
      """  Optional Comment  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultSub:bool = obj["DefaultSub"]
      self.Price:int = obj["Price"]
      """  Price for the Suggested Quantity  """  
      self.SuggestedQty:int = obj["SuggestedQty"]
      """  Suggested Quantity  """  
      self.Selected:bool = obj["Selected"]
      """  Selected Row  """  
      self.SugOrderQty:int = obj["SugOrderQty"]
      """  Suggested Quantity for Order Qty in Quote Detail  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.SubPartSellingFactor:int = obj["SubPartSellingFactor"]
      self.SubPartTrackSerialNum:bool = obj["SubPartTrackSerialNum"]
      self.SubPartTrackDimension:bool = obj["SubPartTrackDimension"]
      self.SubPartPartDescription:str = obj["SubPartPartDescription"]
      self.SubPartIUM:str = obj["SubPartIUM"]
      self.SubPartSalesUM:str = obj["SubPartSalesUM"]
      self.SubPartTrackLots:bool = obj["SubPartTrackLots"]
      self.SubPartPricePerCode:str = obj["SubPartPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SNFormatRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.NumberOfDigits:int = obj["NumberOfDigits"]
      """  Number of digits in the serial number  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """   Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer, Mask
Code/desc required:
CHARACTER`Alphanumeric
INTEGER`NumericOnly
MASK`Serial Mask
This field should be flagged as Include = true in Object Designer.  """  
      self.SNFormat1:str = obj["SNFormat1"]
      self.LeadingZeroes:bool = obj["LeadingZeroes"]
      """  Whether or not to have leading zeroes  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """   Current setting for the prefix that will be attached to all new Serial Numbers as they are generated for Character and Integer format types.
This field should be flagged as Include = true in Object Designer.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.HasSerialNumbers:bool = obj["HasSerialNumbers"]
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskMask:str = obj["SerialMaskMask"]
      self.SerialMaskExample:str = obj["SerialMaskExample"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SelectedSerialNumbersRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  SerialNumber  """  
      self.Scrapped:bool = obj["Scrapped"]
      """  Scrapped flag  """  
      self.ScrappedReasonCode:str = obj["ScrappedReasonCode"]
      """  Scrapped reason code  """  
      self.Voided:bool = obj["Voided"]
      """  Voided flag  """  
      self.Reference:str = obj["Reference"]
      """  Reference field  """  
      self.ReasonCodeType:str = obj["ReasonCodeType"]
      """  Reason code type = s  """  
      self.ReasonCodeDesc:str = obj["ReasonCodeDesc"]
      """  Reason code description  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNumber  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """  Serial number prefix  """  
      self.SNBaseNumber:str = obj["SNBaseNumber"]
      """  Base number used to create the serial number  """  
      self.SourceRowID:str = obj["SourceRowID"]
      """  RowID of the source record for this serial number  """  
      self.TransType:str = obj["TransType"]
      """  TransType of the record that created this serial number  """  
      self.PassedInspection:bool = obj["PassedInspection"]
      """  True if this serial numbered part passed inspection  """  
      self.Deselected:bool = obj["Deselected"]
      """  Used to flag previously selected serial numbers as deselected  """  
      self.KitWhseList:str = obj["KitWhseList"]
      self.RawSerialNum:str = obj["RawSerialNum"]
      """  This will be the raw serial number as it was scanned or entered into the system. This would only differ from the SerialNumber field if a validate type mask was being used where characters were stripped (using ~ in the mask).  """  
      self.KBLbrAction:int = obj["KBLbrAction"]
      """  Action type field used for Kanban receipts to indicate if the new serial number status is Inventory, Scrapped or NonConf.  This requires Code/desc:  1 ` inventory 2 ` Scrapped 3 ` Nonconformance  """  
      self.KBLbrActionDesc:str = obj["KBLbrActionDesc"]
      """  Description field for KBLbrAction ? holds the translated description for the KBLbrAction code for UI display and combo box.  """  
      self.PreventDeselect:bool = obj["PreventDeselect"]
      """  If true, then users can not deselect this serial number.  This is used by applications that allow maintenance to the Selected Serial Numbers after update.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Used only by SN Assignment  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """  Used only by SN Assignment: C = Customer Part / I = Internal Part XRef  """  
      self.PreDeselected:bool = obj["PreDeselected"]
      self.poLinkValues:str = obj["poLinkValues"]
      """  temporary field used to link the packout lines to ship detail lines  """  
      self.SNMask:str = obj["SNMask"]
      """  The mask the was used to generate the serial number  """  
      self.NotSavedToDB:bool = obj["NotSavedToDB"]
      """  Flag to indicate that the SelectedSerialNumbers entry has not yet been saved to the DB for the related transaction. Used to keep track of which deselected serial numbers need to be passed to the transaction update logic.  """  
      self.RowSelected:bool = obj["RowSelected"]
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass




#########################################################################
# Custom Schemas:
#########################################################################
class AfterChangedOrderDtlProjectID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class AfterChangedOrderDtlProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ApplyOrderBasedDiscounts_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The order to apply the discounts to  """  
      pass

class ApplyOrderBasedDiscounts_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ApplyOrderHedDiscountToLines_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The Order Number  """  
      pass

class ApplyOrderHedDiscountToLines_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class CCClear_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CCClear_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CCLoadCardNumbers_input:
   """ Required : 
   ds
   inTranDate
   inTranTime
   inTranNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.inTranDate:str = obj["inTranDate"]
      """  TranDate from the CreditTran table  """  
      self.inTranTime:int = obj["inTranTime"]
      """  TranTime from the CreditTran table  """  
      self.inTranNum:int = obj["inTranNum"]
      """  TranNum from the CreditTran table  """  
      pass

class CCLoadCardNumbers_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CCLoadTranData_input:
   """ Required : 
   ds
   inTranDate
   inTranTime
   inTranNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.inTranDate:str = obj["inTranDate"]
      """  TranDate from the CreditTran table  """  
      self.inTranTime:int = obj["inTranTime"]
      """  TranTime from the CreditTran table  """  
      self.inTranNum:int = obj["inTranNum"]
      """  TranNum from the CreditTran table  """  
      pass

class CCLoadTranData_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CCProcessCard_input:
   """ Required : 
   inTranType
   ds
   """  
   def __init__(self, obj):
      self.inTranType:str = obj["inTranType"]
      """  The transaction type to apply to the credit card.
            Valid transaction types : D (Deposit), S (Sale), A (Authorize),
            C (Credit - 803), V (Void).  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CCProcessCard_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeBTCustIDMaster_input:
   """ Required : 
   NewBillToCustID
   lchkCustCredHold
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.NewBillToCustID:str = obj["NewBillToCustID"]
      """  Proposed bill to custid  """  
      self.lchkCustCredHold:bool = obj["lchkCustCredHold"]
      """  flag to determine if we run CheckCustomerCreditHold  """  
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number - optional  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeBTCustIDMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.lCustomerAllowed:bool = obj["lCustomerAllowed"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCCAmounts_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCCAmounts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCardNumber_input:
   """ Required : 
   inCardNumber
   ds
   """  
   def __init__(self, obj):
      self.inCardNumber:str = obj["inCardNumber"]
      """  Proposed Card Number  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCardNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCommissionable_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCommissionable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCommodityCode_input:
   """ Required : 
   newCommodityCode
   ds
   """  
   def __init__(self, obj):
      self.newCommodityCode:str = obj["newCommodityCode"]
      """  New Commodity Code  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCommodityCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeContractNumMaster_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iContractNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.iOrderLine:int = obj["iOrderLine"]
      self.iContractNum:int = obj["iContractNum"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeContractNumMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeContractNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeContractNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCounterSale_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCounterSale_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCreditExp_input:
   """ Required : 
   ipExpMonth
   ipExpYear
   ds
   """  
   def __init__(self, obj):
      self.ipExpMonth:int = obj["ipExpMonth"]
      """  Expiration Month  """  
      self.ipExpYear:int = obj["ipExpYear"]
      """  Expiration Year  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCreditExp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCurrencyCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCurrencyCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCustomer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeCustomer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDiscBreakListCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeDiscBreakListCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDiscountAmount_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeDiscountAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDiscountPercent_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeDiscountPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeERSOrder_input:
   """ Required : 
   proposedERSOrder
   ds
   """  
   def __init__(self, obj):
      self.proposedERSOrder:bool = obj["proposedERSOrder"]
      """  The proposed ERS Order  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeERSOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeGroup_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeGroup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeHedOTSCountryNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeHedOTSCountryNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeHedUseOTS_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeHedUseOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeIncotermCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeIncotermCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeKitPricing_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeKitPricing_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeKitQtyPer_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeKitQtyPer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMake_input:
   """ Required : 
   ipMake
   ds
   """  
   def __init__(self, obj):
      self.ipMake:bool = obj["ipMake"]
      """  The new Make value.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeMake_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeManualTaxCalc_input:
   """ Required : 
   ipOrderNum
   ipLineNum
   ipRelNum
   ipTaxCode
   ipRateCode
   ds
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  Order Number.  """  
      self.ipLineNum:int = obj["ipLineNum"]
      """  Order line number.  """  
      self.ipRelNum:int = obj["ipRelNum"]
      """  Order Rel number.  """  
      self.ipTaxCode:str = obj["ipTaxCode"]
      """  Release tax code.  """  
      self.ipRateCode:str = obj["ipRateCode"]
      """  Release rate code.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeManualTaxCalc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscAmount_input:
   """ Required : 
   ds
   tableName
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.tableName:str = obj["tableName"]
      """  name of table being passed in  """  
      pass

class ChangeMiscAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscCode_input:
   """ Required : 
   ds
   tableName
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.tableName:str = obj["tableName"]
      """  name of table being passed in  """  
      pass

class ChangeMiscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscPercent_input:
   """ Required : 
   ds
   tableName
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.tableName:str = obj["tableName"]
      """  name of table being passed in  """  
      pass

class ChangeMiscPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscType_input:
   """ Required : 
   ds
   tableName
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.tableName:str = obj["tableName"]
      """  name of table being passed in  """  
      pass

class ChangeMiscType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeNeedByDate_input:
   """ Required : 
   ds
   cTableName
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.cTableName:str = obj["cTableName"]
      """  The table that is changed: OrderHed,OrderDtl, or OrderRel  """  
      pass

class ChangeNeedByDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeNewNeedByDate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

class ChangeNewNeedByDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeNewSellingQuantity_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

class ChangeNewSellingQuantity_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeODtlWarehouse_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeODtlWarehouse_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeORelWarehouse_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeORelWarehouse_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderDtlPWContract_input:
   """ Required : 
   ipContractID
   ds
   """  
   def __init__(self, obj):
      self.ipContractID:str = obj["ipContractID"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderDtlPWContract_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ipContractID:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderDtlProdCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderDtlProdCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderDtlProjectID_input:
   """ Required : 
   projectID
   ds
   """  
   def __init__(self, obj):
      self.projectID:str = obj["projectID"]
      """  The Project ID value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderDtlProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.projectMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedCurrencyCode_input:
   """ Required : 
   currencyCode
   ds
   """  
   def __init__(self, obj):
      self.currencyCode:str = obj["currencyCode"]
      """  The proposed currency code value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedCurrencyCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedCustomerCustID_input:
   """ Required : 
   orderNum
   proposedCustomerCustID
   ds
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The order number  """  
      self.proposedCustomerCustID:str = obj["proposedCustomerCustID"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedCustomerCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.creditLimitMessage:str = obj["parameters"]
      self.agingMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedIntrntlShip_input:
   """ Required : 
   intrntlShip
   ds
   """  
   def __init__(self, obj):
      self.intrntlShip:bool = obj["intrntlShip"]
      """  The proposed international shipment value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedIntrntlShip_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedOTSSaveAs_input:
   """ Required : 
   otsSaveAs
   ds
   """  
   def __init__(self, obj):
      self.otsSaveAs:str = obj["otsSaveAs"]
      """  The proposed OTS Save As value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedOTSSaveAs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedSalesRepCode_input:
   """ Required : 
   salesRepCode
   columnName
   ds
   """  
   def __init__(self, obj):
      self.salesRepCode:str = obj["salesRepCode"]
      """  The proposed SalesRep code  """  
      self.columnName:str = obj["columnName"]
      """  The column name of the sales rep column that is changing  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedSalesRepCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderHedShipToNum_input:
   """ Required : 
   shipToNum
   ds
   """  
   def __init__(self, obj):
      self.shipToNum:str = obj["shipToNum"]
      """  The proposed Ship To Num  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderHedShipToNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.keepShipToWithoutTaxRegionMessage:str = obj["parameters"]
      self.taxRecalcMessage:str = obj["parameters"]
      self.defaultTaxLiabilityMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelBuyToOrder_input:
   """ Required : 
   ipBuyToOrder
   ds
   """  
   def __init__(self, obj):
      self.ipBuyToOrder:bool = obj["ipBuyToOrder"]
      """  The new Buy To Order value.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelBuyToOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelDropShip_input:
   """ Required : 
   ipDropShip
   ds
   """  
   def __init__(self, obj):
      self.ipDropShip:bool = obj["ipDropShip"]
      """  The new DropShip value.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelDropShip_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelFirmRelease_input:
   """ Required : 
   firmRelease
   ds
   """  
   def __init__(self, obj):
      self.firmRelease:bool = obj["firmRelease"]
      """  The new FirmRelease value.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelFirmRelease_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelMFCustID_input:
   """ Required : 
   ipMFCustID
   ds
   """  
   def __init__(self, obj):
      self.ipMFCustID:str = obj["ipMFCustID"]
      """  The proposed Mark For Customer ID  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelMFCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelMarkForNum_input:
   """ Required : 
   ProposedMarkForNum
   ds
   """  
   def __init__(self, obj):
      self.ProposedMarkForNum:str = obj["ProposedMarkForNum"]
      """  The Proposed ShipToNum  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelMarkForNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelOTSCountryNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelOTSCountryNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelOTSSaveAs_input:
   """ Required : 
   otsSaveAs
   ds
   """  
   def __init__(self, obj):
      self.otsSaveAs:str = obj["otsSaveAs"]
      """  The proposed OTS Save As value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelOTSSaveAs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelPWContract_input:
   """ Required : 
   ipContractID
   ds
   """  
   def __init__(self, obj):
      self.ipContractID:str = obj["ipContractID"]
      """  The proposed ContractID  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelPWContract_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ipContractID:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelShipToContact_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelShipToContact_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelShipToCustID_input:
   """ Required : 
   iShipToCustID
   ds
   """  
   def __init__(self, obj):
      self.iShipToCustID:str = obj["iShipToCustID"]
      """  Proposed Third-Party Ship To  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelShipToCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelShipTo_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelShipTo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxBaseFixedAmount_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewFixedAmount
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewFixedAmount:int = obj["NewFixedAmount"]
      """  Proposed Fixed AMount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxBaseFixedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxBaseTaxAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   NewTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.NewTaxAmt:int = obj["NewTaxAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxBaseTaxAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxBaseTaxableAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewTaxableAmt:int = obj["NewTaxableAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxBaseTaxableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxDocFixedAmount_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewFixedAmount
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewFixedAmount:int = obj["NewFixedAmount"]
      """  Proposed Fixed AMount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxDocFixedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxDocTaxAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   NewTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.NewTaxAmt:int = obj["NewTaxAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxDocTaxAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelTaxDocTaxableAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewTaxableAmt:int = obj["NewTaxableAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelTaxDocTaxableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelUseOTMF_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelUseOTMF_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOrderRelVendorID_input:
   """ Required : 
   ipVendorID
   ds
   """  
   def __init__(self, obj):
      self.ipVendorID:str = obj["ipVendorID"]
      """  The new Vendor ID value.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOrderRelVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOverrideDiscPriceList_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOverrideDiscPriceList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOverridePriceList_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeOverridePriceList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartNumMaster_input:
   """ Required : 
   partNum
   lSubstitutePartExist
   lIsPhantom
   uomCode
   SysRowID
   rowType
   salesKitView
   removeKitComponents
   suppressUserPrompts
   getPartXRefInfo
   checkPartRevisionChange
   checkChangeKitParent
   ds
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  proposed PartNum  """  
      self.lSubstitutePartExist:bool = obj["lSubstitutePartExist"]
      """  bool which identifies whether a substitute part exists.  set in 'checkPartRevisionChange' logic  """  
      self.lIsPhantom:bool = obj["lIsPhantom"]
      """  bool which identifies whether this is a phantom part.  set in 'getPartXRefInfo' logic  """  
      self.uomCode:str = obj["uomCode"]
      """  associated uomCode for this part.  maybe overwritten in chkPartXRefInfo  """  
      self.SysRowID:str = obj["SysRowID"]
      """  sysRowID for current row  """  
      self.rowType:str = obj["rowType"]
      """  current rowType  """  
      self.salesKitView:bool = obj["salesKitView"]
      """  flag to identify whether this OrderDtl record is from salesKitView (or OrderDtlView)  """  
      self.removeKitComponents:bool = obj["removeKitComponents"]
      """  flag (set by user unless suppressUserPrompts is true) to OK removing kit components if kit parent changes  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  flag to determine is user wants to be able to respond to messages and return to UI  """  
      self.getPartXRefInfo:bool = obj["getPartXRefInfo"]
      """  flag to determine whether a particular part of validation logic is run  """  
      self.checkPartRevisionChange:bool = obj["checkPartRevisionChange"]
      """  flag to determine whether a particular part of validation logic is run  """  
      self.checkChangeKitParent:bool = obj["checkChangeKitParent"]
      """  flag to determine whether a particular part of validation logic is run  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangePartNumMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.partNum:str = obj["parameters"]
      self.lSubstitutePartExist:bool = obj["lSubstitutePartExist"]
      self.lIsPhantom:bool = obj["lIsPhantom"]
      self.uomCode:str = obj["parameters"]
      self.cDeleteComponentsMessage:str = obj["parameters"]
      self.questionString:str = obj["parameters"]
      self.cWarningMessage:str = obj["parameters"]
      self.multipleMatch:bool = obj["multipleMatch"]
      self.promptToExplodeBOM:bool = obj["promptToExplodeBOM"]
      self.cConfigPartMessage:str = obj["parameters"]
      self.cSubPartMessage:str = obj["parameters"]
      self.explodeBOMerrMessage:str = obj["parameters"]
      self.cMsgType:str = obj["parameters"]
      self.multiSubsAvail:bool = obj["multiSubsAvail"]
      self.runOutQtyAvail:bool = obj["runOutQtyAvail"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartNum_input:
   """ Required : 
   ds
   lSubstitutePartsExist
   uomCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.lSubstitutePartsExist:bool = obj["lSubstitutePartsExist"]
      """  Flag to indicate if a substitute part exists  """  
      self.uomCode:str = obj["uomCode"]
      """  UOM Code (only used for Product Codes)  """  
      pass

class ChangePartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePlant_input:
   """ Required : 
   ProposedPlant
   ds
   """  
   def __init__(self, obj):
      self.ProposedPlant:str = obj["ProposedPlant"]
      """  The proposed plant  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangePlant_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePriceList_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangePriceList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePricePerCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangePricePerCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeProjectID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePromotionalPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangePromotionalPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeQuickEntryOption_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeQuickEntryOption_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeQuoteLine_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeQuoteLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeQuoteQtyNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeQuoteQtyNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRMANum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRMANum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRelUseOTS_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRelUseOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRenewalNbrMaster_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iContractNum
   iRenewalNbr
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.iOrderLine:int = obj["iOrderLine"]
      self.iContractNum:int = obj["iContractNum"]
      self.iRenewalNbr:int = obj["iRenewalNbr"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRenewalNbrMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRenewalNbr_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRenewalNbr_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRevNumMaster_input:
   """ Required : 
   checkPartRevChange
   checkComponents
   removeKitComponents
   suppressUserPrompts
   proposedRev
   ds
   """  
   def __init__(self, obj):
      self.checkPartRevChange:bool = obj["checkPartRevChange"]
      """  bool to determine whether we run the CheckPartRevChange logic  """  
      self.checkComponents:bool = obj["checkComponents"]
      """  bool to determine whether we attempt to delete existing child parts  """  
      self.removeKitComponents:bool = obj["removeKitComponents"]
      """  bool to determine whether we delete existing child parts  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  flag to determine is user wants to be able to respond to messages and return to UI  """  
      self.proposedRev:str = obj["proposedRev"]
      """  proposed RevisionNum  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRevNumMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cConfigPartMessage:str = obj["parameters"]
      self.cDeleteComponentsMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRevisionNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeSalesRep_input:
   """ Required : 
   cSalesRepCode
   """  
   def __init__(self, obj):
      self.cSalesRepCode:str = obj["cSalesRepCode"]
      """  The SalesRep code  """  
      pass

class ChangeSalesRep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.dRepRate:int = obj["parameters"]
      self.iRepSplit:int = obj["parameters"]
      self.cRepName:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeSalesUOM_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeSalesUOM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeSellingQtyMaster_input:
   """ Required : 
   ds
   ipSellingQuantity
   chkSellQty
   negInvTest
   chgSellQty
   chgDiscPer
   suppressUserPrompts
   lKeepUnitPrice
   pcPartNum
   pcWhseCode
   pcBinNum
   pcLotNum
   pcAttributeSetID
   pcDimCode
   pdDimConvFactor
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.ipSellingQuantity:int = obj["ipSellingQuantity"]
      """  New value for SellingQuantity  """  
      self.chkSellQty:bool = obj["chkSellQty"]
      """  flag to determine if we run checkSellingQuantityChange logic  """  
      self.negInvTest:bool = obj["negInvTest"]
      """  flag to determine if we run negativeInventoryTest logic  """  
      self.chgSellQty:bool = obj["chgSellQty"]
      """  flag to determine if we run changeSellingQuantity logic  """  
      self.chgDiscPer:bool = obj["chgDiscPer"]
      """  flag to determine if we run changeDiscountPercent logic  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  flag to determine if we suppress any user input  """  
      self.lKeepUnitPrice:bool = obj["lKeepUnitPrice"]
      """  Keep the current unit price even if it will be recalcuated based on the new quantity  """  
      self.pcPartNum:str = obj["pcPartNum"]
      """  partNum for negativeInventoryTest  """  
      self.pcWhseCode:str = obj["pcWhseCode"]
      """  whseCode for negativeInventoryTest  """  
      self.pcBinNum:str = obj["pcBinNum"]
      """  binNum for negativeInventoryTest  """  
      self.pcLotNum:str = obj["pcLotNum"]
      """  lotNum for negativeInventoryTest  """  
      self.pcAttributeSetID:int = obj["pcAttributeSetID"]
      """  attributeSetID for negativeInventoryTest  """  
      self.pcDimCode:str = obj["pcDimCode"]
      """  dimcode for negativeInventoryTest  """  
      self.pdDimConvFactor:int = obj["pdDimConvFactor"]
      """  dimConvFactor for negativeInventoryTest  """  
      pass

class ChangeSellingQtyMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.pcMessage:str = obj["parameters"]
      self.pcNeqQtyAction:str = obj["parameters"]
      self.opWarningMsg:str = obj["parameters"]
      self.cSellingQuantityChangedMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeSellingQuantity_input:
   """ Required : 
   ds
   lKeepUnitPrice
   ipSellingQuantity
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.lKeepUnitPrice:bool = obj["lKeepUnitPrice"]
      """  Keep the current unit price even if it will be recalcuated based on the new quantity  """  
      self.ipSellingQuantity:int = obj["ipSellingQuantity"]
      """  New value for SellingReqQty  """  
      pass

class ChangeSellingQuantity_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.opWarningMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeSellingReqQty_input:
   """ Required : 
   ds
   ipSellingReqQty
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.ipSellingReqQty:int = obj["ipSellingReqQty"]
      """  New value for SellingReqQty  """  
      pass

class ChangeSellingReqQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.opWarningMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeShipToContact_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeShipToContact_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeShipToCustID_input:
   """ Required : 
   iShipToCustID
   ds
   """  
   def __init__(self, obj):
      self.iShipToCustID:str = obj["iShipToCustID"]
      """  Proposed Third-Party Ship To  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeShipToCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeShipToID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeShipToID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeSoldToContact_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeSoldToContact_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeSoldToID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeSoldToID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxRegionCode_input:
   """ Required : 
   ipOrderNum
   ipNewCode
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  OrderNum  """  
      self.ipNewCode:str = obj["ipNewCode"]
      """  New Tax Region Code  """  
      pass

class ChangeTaxRegionCode_output:
   def __init__(self, obj):
      pass

class ChangeUOMConfirm_input:
   """ Required : 
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class ChangeUOMConfirm_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.msg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeUnitPrice_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeVendorChange_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

class ChangeVendorChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeWhseCodeMaster_input:
   """ Required : 
   ds
   negInvTest
   chgDtlWhse
   suppressUserPrompts
   pcPartNum
   pcWhseCode
   pcBinNum
   pcLotNum
   pcAttributeSetID
   pcDimCode
   pdDimConvFactor
   pdSellingQuantity
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.negInvTest:bool = obj["negInvTest"]
      """  flag to determine if we run negativeInventoryTest logic  """  
      self.chgDtlWhse:bool = obj["chgDtlWhse"]
      """  flag to determine if we run changeODtlWarehouse logic  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  flag to determine if we suppress any user input  """  
      self.pcPartNum:str = obj["pcPartNum"]
      """  partNum for negativeInventoryTest  """  
      self.pcWhseCode:str = obj["pcWhseCode"]
      """  whseCode for negativeInventoryTest  """  
      self.pcBinNum:str = obj["pcBinNum"]
      """  binNum for negativeInventoryTest  """  
      self.pcLotNum:str = obj["pcLotNum"]
      """  lotNum for negativeInventoryTest  """  
      self.pcAttributeSetID:int = obj["pcAttributeSetID"]
      """  attributeSetID for negativeInventoryTest  """  
      self.pcDimCode:str = obj["pcDimCode"]
      """  dimcode for negativeInventoryTest  """  
      self.pdDimConvFactor:int = obj["pdDimConvFactor"]
      """  dimConvFactor for negativeInventoryTest  """  
      self.pdSellingQuantity:int = obj["pdSellingQuantity"]
      """  sellingQty for negativeInventoryTest  """  
      pass

class ChangeWhseCodeMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.pcMessage:str = obj["parameters"]
      self.pcNeqQtyAction:str = obj["parameters"]
      pass

      """  output parameters  """  

class ChangeXPartNum_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangeXPartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangedCardNumber_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ChangedCardNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckComplianceFail_input:
   """ Required : 
   orderNum
   orderLine
   orderRelNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Current Order Number.  """  
      self.orderLine:int = obj["orderLine"]
      """  Current Order Line.  """  
      self.orderRelNum:int = obj["orderRelNum"]
      """  Current Order Release.  """  
      pass

class CheckComplianceFail_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.compliant:bool = obj["compliant"]
      pass

      """  output parameters  """  

class CheckComplianceOrderFail_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Current Order Number  """  
      pass

class CheckComplianceOrderFail_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.compliantMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckConfiguration_input:
   """ Required : 
   orderNum
   orderLine
   sourcePart
   sourceRev
   findRevision
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Order number to be searched  """  
      self.orderLine:int = obj["orderLine"]
      """  Order Line to be checked  """  
      self.sourcePart:str = obj["sourcePart"]
      """  Part Num to get details from (populated when sourceFile = "Method")  """  
      self.sourceRev:str = obj["sourceRev"]
      """  Revision number to get details from (populated when sourceFile = "Method")  """  
      self.findRevision:bool = obj["findRevision"]
      """  If true the revision number will be looked up rather than using the sourceRev  """  
      pass

class CheckConfiguration_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.canGetDetails:bool = obj["canGetDetails"]
      self.needsConfiguration:bool = obj["needsConfiguration"]
      self.configureRevision:str = obj["parameters"]
      self.reasonMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckContractNum_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iContractNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.iOrderLine:int = obj["iOrderLine"]
      self.iContractNum:int = obj["iContractNum"]
      pass

class CheckContractNum_output:
   def __init__(self, obj):
      pass

class CheckCreditCardTranForOrder_input:
   """ Required : 
   orderNum
   tranType
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.tranType:str = obj["tranType"]
      pass

class CheckCreditCardTranForOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.returnMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCreditTran_input:
   """ Required : 
   inTranType
   ds
   """  
   def __init__(self, obj):
      self.inTranType:str = obj["inTranType"]
      """  The transaction type to apply to the credit card.
            Valid transaction types : D (Deposit), S (Sale), A (Authorize),
            C (Credit - 803), V (Void).  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckCreditTran_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckCustOnCreditHold_input:
   """ Required : 
   iOrderNum
   cCustID
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number - optional  """  
      self.cCustID:str = obj["cCustID"]
      """  The Customer ID - optional  """  
      pass

class CheckCustOnCreditHold_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.lCustomerAllowed:bool = obj["lCustomerAllowed"]
      pass

      """  output parameters  """  

class CheckCustomerCreditLimit_input:
   """ Required : 
   iOrderNum
   iCustNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iCustNum:int = obj["iCustNum"]
      """  The Customer Number  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckCustomerCreditLimit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.cCreditShipAction:str = obj["parameters"]
      self.lContinue:bool = obj["lContinue"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckCustomerCreditRelease_input:
   """ Required : 
   iOrderNum
   iOrderDtlNum
   iCustNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iOrderDtlNum:int = obj["iOrderDtlNum"]
      """  The line number.  """  
      self.iCustNum:int = obj["iCustNum"]
      """  The Customer Number  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckCustomerCreditRelease_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.lContinue:bool = obj["lContinue"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckICPOReadyToSend_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The order number to check against  """  
      pass

class CheckICPOReadyToSend_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cReadyToSendMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckICPO_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.icpoFound:bool = obj["icpoFound"]
      pass

      """  output parameters  """  

class CheckKitRevision_input:
   """ Required : 
   iPartNum
   iRevisionNum
   """  
   def __init__(self, obj):
      self.iPartNum:str = obj["iPartNum"]
      """  Part number  """  
      self.iRevisionNum:str = obj["iRevisionNum"]
      """  Revision number  """  
      pass

class CheckKitRevision_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckLetterOfCredit_input:
   """ Required : 
   locID
   totalAmt
   """  
   def __init__(self, obj):
      self.locID:str = obj["locID"]
      """  ID of the letter of credit  """  
      self.totalAmt:int = obj["totalAmt"]
      """  Amount in Doc currency for the new order  """  
      pass

class CheckLetterOfCredit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.locHoldMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckLtrOfCrdt_input:
   """ Required : 
   iOrderNum
   cARLOCID
   dTotalCharges
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  Sales Order number  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  Letter of Credit ID  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  OrderHed.TotalCharges  """  
      pass

class CheckLtrOfCrdt_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckMakeDirectReleases_input:
   """ Required : 
   ipOrderNum
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  Order Number  """  
      pass

class CheckMakeDirectReleases_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opIssueWarning:bool = obj["opIssueWarning"]
      pass

      """  output parameters  """  

class CheckOrderHedChanges_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckOrderHedChanges_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.cOrderChangedMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckOrderLinkToInterCompanyPO_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      pass

class CheckOrderLinkToInterCompanyPO_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cICPOLinkMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckPartRevisionChange_input:
   """ Required : 
   iOrderNum
   iOrderLine
   cFieldName
   cPartNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The current OrderHed.OrderNum field  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The current OrderDtl.OrderLine field  """  
      self.cFieldName:str = obj["cFieldName"]
      """  The name of the field you are leaving  """  
      self.cPartNum:str = obj["cPartNum"]
      """  The new PartNum if a substitute part is found, partNum will be the substitute part  """  
      pass

class CheckPartRevisionChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cPartNum:str = obj["parameters"]
      self.cConfigPartMessage:str = obj["parameters"]
      self.cSubPartMessage:str = obj["parameters"]
      self.lSubAvail:bool = obj["lSubAvail"]
      self.cMsgType:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckProjectID_input:
   """ Required : 
   ipProjectID
   ds
   """  
   def __init__(self, obj):
      self.ipProjectID:str = obj["ipProjectID"]
      """  The Project ID value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opProjMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckQuoteForCreditLimit_input:
   """ Required : 
   iQuoteNum
   iCustNum
   """  
   def __init__(self, obj):
      self.iQuoteNum:int = obj["iQuoteNum"]
      self.iCustNum:int = obj["iCustNum"]
      """  The Customer Number  """  
      pass

class CheckQuoteForCreditLimit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.cCreditStatus:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckQuoteLinesNoQuantity_input:
   """ Required : 
   iQuoteNum
   """  
   def __init__(self, obj):
      self.iQuoteNum:int = obj["iQuoteNum"]
      """  The Quote Number  """  
      pass

class CheckQuoteLinesNoQuantity_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cQuoteLineWOQtyMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckRateGrpCode_input:
   """ Required : 
   ipRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.ipRateGrpCode:str = obj["ipRateGrpCode"]
      """  Currency Rate Group Code  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckRateGrpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckRenewalNbr_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iContractNum
   iRenewalNbr
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.iOrderLine:int = obj["iOrderLine"]
      self.iContractNum:int = obj["iContractNum"]
      self.iRenewalNbr:int = obj["iRenewalNbr"]
      pass

class CheckRenewalNbr_output:
   def __init__(self, obj):
      pass

class CheckSONum_input:
   """ Required : 
   ProposedSONum
   """  
   def __init__(self, obj):
      self.ProposedSONum:int = obj["ProposedSONum"]
      """  The proposed SO Number  """  
      pass

class CheckSONum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opFoundSO:bool = obj["opFoundSO"]
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckSellingFactorDirection_input:
   """ Required : 
   ip_SellingFactorDirection
   ds
   """  
   def __init__(self, obj):
      self.ip_SellingFactorDirection:str = obj["ip_SellingFactorDirection"]
      """  The Selling Factor Direction value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CheckSellingFactorDirection_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckSellingQuantityChange_input:
   """ Required : 
   ds
   dSellingQuantity
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.dSellingQuantity:int = obj["dSellingQuantity"]
      """  The proposed selling quantity  """  
      pass

class CheckSellingQuantityChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cSellingQuantityChangedMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class CloseOrderLine_input:
   """ Required : 
   iOrderNum
   iOrderLine
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Line to close  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number to close  """  
      pass

class CloseOrderLine_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class CloseOrder_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number to close  """  
      pass

class CloseOrder_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class CloseRelease_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iOrderRelNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Release to close  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line of the Release to close  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Order Release Number of the release to close  """  
      pass

class CloseRelease_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ConfigurationChangePart_input:
   """ Required : 
   orderDtlSysRowID
   """  
   def __init__(self, obj):
      self.orderDtlSysRowID:str = obj["orderDtlSysRowID"]
      """  OrderDtl SysRowID  """  
      pass

class ConfigurationChangePart_output:
   def __init__(self, obj):
      pass

class ConfigurationChangeUnitPrice_input:
   """ Required : 
   orderDtlSysRowID
   commitValues
   currencySwitch
   """  
   def __init__(self, obj):
      self.orderDtlSysRowID:str = obj["orderDtlSysRowID"]
      """  OrderDtl SysRowID  """  
      self.commitValues:bool = obj["commitValues"]
      """  True to indicate if the changes should be committed to the DB. False if the logic only needs to compare the entity before and after the changes without commit them.  """  
      self.currencySwitch:bool = obj["currencySwitch"]
      """  Flag to indicate which currency was affected by the Document Rule, true for Base Currency and false for Document Currency.  """  
      pass

class ConfigurationChangeUnitPrice_output:
   def __init__(self, obj):
      pass

class ConfigurationRefreshQty_input:
   """ Required : 
   orderDtlSysRowID
   """  
   def __init__(self, obj):
      self.orderDtlSysRowID:str = obj["orderDtlSysRowID"]
      """  OrderDtl SysRowID  """  
      pass

class ConfigurationRefreshQty_output:
   def __init__(self, obj):
      pass

class ConsolidateOrdersToCounterSale_input:
   """ Required : 
   orderList
   """  
   def __init__(self, obj):
      self.orderList:str = obj["orderList"]
      """  List of order numbers  """  
      pass

class ConsolidateOrdersToCounterSale_output:
   def __init__(self, obj):
      self.returnObj:int = obj["returnObj"]
      """  The counter sale order number  """  
      pass

class CopyOrderCreditLimitAndHoldCheck_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      pass

class CopyOrderCreditLimitAndHoldCheck_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.creditLimitMessage:str = obj["parameters"]
      self.letterOfCreditHoldMessage:str = obj["parameters"]
      self.holdMessage:str = obj["parameters"]
      self.attributeValidationMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CopyOrder_input:
   """ Required : 
   orderNum
   ipPONum
   ipOpenRel
   ipReNbr
   ipPreserve
   ipCalc
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The order to apply the discounts to  """  
      self.ipPONum:str = obj["ipPONum"]
      self.ipOpenRel:bool = obj["ipOpenRel"]
      self.ipReNbr:bool = obj["ipReNbr"]
      self.ipPreserve:bool = obj["ipPreserve"]
      self.ipCalc:bool = obj["ipCalc"]
      pass

class CopyOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.NewOrderNum:int = obj["parameters"]
      self.OutMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CounterSaleValidateInvQty_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The Order Number of the counter sale order to process  """  
      pass

class CounterSaleValidateInvQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.negativeInventoryMessage:str = obj["parameters"]
      self.negativeInventoryAction:str = obj["parameters"]
      pass

      """  output parameters  """  

class CreateGlbSugPOChg_input:
   """ Required : 
   ds
   iOrderNum
   iOrderLine
   iOrderRel
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number  """  
      self.iOrderRel:int = obj["iOrderRel"]
      """  The Order Release Number  """  
      pass

class CreateGlbSugPOChg_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateLineMiscChargesFromQuote_input:
   """ Required : 
   ipOrderNum
   ipOrderLine
   ipQuoteNum
   ipQuoteLine
   ipQtyNum
   ds
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  The Order Number  """  
      self.ipOrderLine:int = obj["ipOrderLine"]
      """  The Line Number  """  
      self.ipQuoteNum:int = obj["ipQuoteNum"]
      """  The Quote Number  """  
      self.ipQuoteLine:int = obj["ipQuoteLine"]
      """  The Quote Line  """  
      self.ipQtyNum:int = obj["ipQtyNum"]
      """  The Quote Quantity  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CreateLineMiscChargesFromQuote_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateLinesFromHistory_input:
   """ Required : 
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CreateLinesFromHistory_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateOrderDtlComplements_input:
   """ Required : 
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class CreateOrderDtlComplements_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateOrderFromQuoteSaveOTS_input:
   """ Required : 
   iQuoteNum
   ds
   """  
   def __init__(self, obj):
      self.iQuoteNum:int = obj["iQuoteNum"]
      """  The Quote Number with which to create the order  """  
      self.ds:list[Erp_Tablesets_SaveOTSParamsTableset] = obj["ds"]
      pass

class CreateOrderFromQuoteSaveOTS_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class CreateOrderFromQuote_input:
   """ Required : 
   iQuoteNum
   iPoNum
   iCreditStatus
   iCreditHold
   """  
   def __init__(self, obj):
      self.iQuoteNum:int = obj["iQuoteNum"]
      """  The Quote Number with which to create the order  """  
      self.iPoNum:str = obj["iPoNum"]
      self.iCreditStatus:str = obj["iCreditStatus"]
      self.iCreditHold:bool = obj["iCreditHold"]
      pass

class CreateOrderFromQuote_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class DeleteByID_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      pass

class DeleteByID_output:
   def __init__(self, obj):
      pass

class ECCUpdateFinal_input:
   """ Required : 
   ds
   reqType
   xmlDoc
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.reqType:str = obj["reqType"]
      self.xmlDoc:str = obj["xmlDoc"]
      pass

class ECCUpdateFinal_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ECCUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ECCUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ETCAfterAddressValidationOTS_input:
   """ Required : 
   ds
   ds1
   OrderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.ds1:list[Erp_Tablesets_ETCAddrValidationTableset] = obj["ds1"]
      self.OrderNum:int = obj["OrderNum"]
      """  OrderHed.OrderNum  """  
      pass

class ETCAfterAddressValidationOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ETCAfterRelAddressValidationOTS_input:
   """ Required : 
   ds
   ds1
   OrderNum
   OrderLine
   OrderRelNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.ds1:list[Erp_Tablesets_ETCAddrValidationTableset] = obj["ds1"]
      self.OrderNum:int = obj["OrderNum"]
      """  OrderHed.OrderNum  """  
      self.OrderLine:int = obj["OrderLine"]
      """  OrderRel.OrderLine  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  OrderRel.OrderRelNum  """  
      pass

class ETCAfterRelAddressValidationOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ETCValidateAddress_input:
   """ Required : 
   isOrderReleaseVal
   OrderNum
   OrderLine
   OrderRelNum
   """  
   def __init__(self, obj):
      self.isOrderReleaseVal:bool = obj["isOrderReleaseVal"]
      """  If true, the validation is for One Time Ship To on Line/Release level.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  OrderHed.OrderNum  """  
      self.OrderLine:int = obj["OrderLine"]
      """  OrderDtl.OrderLine  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  OrderRel.OrderRelNum  """  
      pass

class ETCValidateAddress_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ETCAddrValidationTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.StatusFlag:bool = obj["StatusFlag"]
      self.ErrorFlag:bool = obj["ErrorFlag"]
      self.ErrorMsg:str = obj["parameters"]
      self.ExceptionFlag:bool = obj["ExceptionFlag"]
      pass

      """  output parameters  """  

class EccCalcKitValue_input:
   """ Required : 
   newOrder
   orderNum
   lineNum
   """  
   def __init__(self, obj):
      self.newOrder:list[Erp_Tablesets_SalesOrderTableset] = obj["newOrder"]
      self.orderNum:int = obj["orderNum"]
      self.lineNum:int = obj["lineNum"]
      pass

class EccCalcKitValue_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.newOrder:list[Erp_Tablesets_SalesOrderTableset] = obj["newOrder"]
      pass

      """  output parameters  """  

class EccProcessPayment_input:
   """ Required : 
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class EccProcessPayment_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class Erp_Tablesets_ETCAddrValidationTableset:
   def __init__(self, obj):
      self.ETCAddress:list[Erp_Tablesets_ETCAddressRow] = obj["ETCAddress"]
      self.ETCMessage:list[Erp_Tablesets_ETCMessageRow] = obj["ETCMessage"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ETCAddressRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.City:str = obj["City"]
      """  City name  """  
      self.Country:str = obj["Country"]
      """  Country name  """  
      self.Line1:str = obj["Line1"]
      """  Address line 1  """  
      self.Line2:str = obj["Line2"]
      """  Address line 2  """  
      self.Line3:str = obj["Line3"]
      """  Address line 3  """  
      self.PostalCode:str = obj["PostalCode"]
      """  Postal or ZIP code  """  
      self.Region:str = obj["Region"]
      """  State or province name  """  
      self.AddrSource:str = obj["AddrSource"]
      """  This is an additional field that will be required to designate the type of address that is being validated (customer, plant, etc)  """  
      self.AddrSourceID:str = obj["AddrSourceID"]
      """  This is an additional field to contain an appropriate piece of data to be used with the AddrSource for display in the UI to clarify for the user what data the validated address relates to. Such as AddrSource = Customer and AddrSourceID = ?Addison?  """  
      self.UpdateAddr:bool = obj["UpdateAddr"]
      """  This is an additional field that will be set if the user has indicated that the Vantage address should be updated from the address validation results.  """  
      self.TransactionID:str = obj["TransactionID"]
      """  This value will come from Avalara ValidateResult TransactionID and identifies a unique specific request/response set. It will be used to tie the ETCValidAddress and ETCMessage rows to ETCAddress.  """  
      self.UpdateAllowed:bool = obj["UpdateAllowed"]
      """  This field will be set if by the process calling address validation to indicate whether the user should have the option to update the original address within the address validation UI.  """  
      self.RequestID:str = obj["RequestID"]
      """  Programmatically assign unique key to tie the ETCAddress table, the ETCValidAddress table and the ETCMessages table together.  """  
      self.AddressCode:str = obj["AddressCode"]
      """  Programmatically determined value used internally by the adapter. Defaults to the hash code of the Address object.  """  
      self.AddressType:str = obj["AddressType"]
      """  The type of address that was coded (PO Box, Rural Route, and so on), using the input address. This probably needs Code/desc data  Avalara will return F = Firm or company address; G = General Delivery address; H= High-rise or business complex; P = PO Box address; R = Rural route address; S = Street or residential address  """  
      self.CarrierRoute:str = obj["CarrierRoute"]
      """  The carrier route associated with the input address (USA). This probably needs Code/desc data  Avalara will return B = PO Box; C = City Delivery; G= General Delivery; H = Highway Contract; R = Rural route.  """  
      self.ValidCity:str = obj["ValidCity"]
      """  City name  """  
      self.ValidCountry:str = obj["ValidCountry"]
      """  Country name  """  
      self.County:str = obj["County"]
      """  County name  """  
      self.FipsCode:str = obj["FipsCode"]
      """  Federal Information Processing Standards Code (USA). This is a unique code representing each geographic combination of state, county, and city. The code is made up of the Federal Information Processing Code (FIPS) that uniquely identifies each state, county, and city in the U.S. See Federal Information Processing Standards (FIPS) Codes for more details. Digits 1-2 are the state code, digits 3-5 are the county code and digits 6-10 are the city code.  """  
      self.ValidLine1:str = obj["ValidLine1"]
      """  Line one of the valid address returned by the tax integration.  """  
      self.ValidLine2:str = obj["ValidLine2"]
      """  Line two of the valid address returned by the tax integration.  """  
      self.ValidLine3:str = obj["ValidLine3"]
      """  Line three of the valid address returned by the tax integration.  """  
      self.ValidLine4:str = obj["ValidLine4"]
      """  Line four of the valid address returned by the tax integration.  """  
      self.ValidPostalCode:str = obj["ValidPostalCode"]
      """  Postal code returned by the tax integration.  """  
      self.PostNet:str = obj["PostNet"]
      """  A 12-digit POSTNet barcode (USA). Digits 1-5 = ZIP code, digits 6-9 = Plus4 Code, digits 10-11 = delivery point, digit 12 = check digit  """  
      self.ValidRegion:str = obj["ValidRegion"]
      """  State or province name or abbreviation returned by the tax integration.  """  
      self.ResultCode:str = obj["ResultCode"]
      """  This needs Code/desc data.  Avalara will return a single code for each address validation request. We will include the result code in each ETCValidAddress row. Success = Operation Succeeded; Warning = Warnings occured, operation succeeded, Error = Errors occured, operation failed; Exception = Unexpected exceptions occurred, operation failed.  """  
      self.ResultSeq:int = obj["ResultSeq"]
      """  This is an additional field to set a unique sequence for each ValidMessage returned for a specific TransactionId.  """  
      self.CarrierRouteDesc:str = obj["CarrierRouteDesc"]
      """  Carrier Route description  """  
      self.AddressTypeDesc:str = obj["AddressTypeDesc"]
      """  Address type description  """  
      self.OTSCountry:str = obj["OTSCountry"]
      self.CountryNum:int = obj["CountryNum"]
      """  A  unique integer assigned by the system to new countries by the  maintenance program. This field is used as the foreign key to identify the country in other files such as Customer, or vendor. The end user should never need to know about the value of this field.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.ACWPercentage:int = obj["ACWPercentage"]
      """   Auto consume window percentage: this is a percentage to calculate the auto consume window days  that scheduling engine will take in consideration to look for available quantity to consume.
The purpose of this is to look ahead for a few days that will save more time than building the goods, so unless we get the full qty “current date” we need to use the window to look for the remaining.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ETCMessageRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.Details:str = obj["Details"]
      self.Helplink:str = obj["Helplink"]
      """  URL to help page for this message  """  
      self.Name:str = obj["Name"]
      """  Gets the name of the message  """  
      self.RefersTo:str = obj["RefersTo"]
      """  The item the message refers to, if applicable. Used to indicate a missing or incorrect value  """  
      self.Severity:str = obj["Severity"]
      """  This probably needs Code/desc data  Avalara will return Success = Operation Succeeded; Warning = Warnings occured, operation succeeded, Error = Errors occured, operation failed; Exception = Unexpected exceptions occurred, operation failed.  """  
      self.Source:str = obj["Source"]
      """  source of the message  """  
      self.Summary:str = obj["Summary"]
      """  concise summary of the message  """  
      self.TransactionID:str = obj["TransactionID"]
      """  This value will come from Avalara ValidateResult TransactionID and identifies a unique specific request/response set. It will be used to tie the ETCMessage row to ETCAddress.  """  
      self.AddrSource:str = obj["AddrSource"]
      """  This is an additional field that will be required to designate the type of address that is being validated (customer, plant, etc)  """  
      self.AddrSourceID:str = obj["AddrSourceID"]
      """  This is an additional field to contain an appropriate piece of data to be used with the AddrSource for display in the UI to clarify for the user what data the validated address relates to. Such as AddrSource = Customer and AddrSourceID = ?Addison?  """  
      self.RequestID:str = obj["RequestID"]
      """  Programitically assigned.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GlbSugPOChgRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order that this release record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  The line # of  PoDetail record that the PORel record is related to.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  """  
      self.SuggestionCode:str = obj["SuggestionCode"]
      """   Suggested action to be taken for this Purchase Order release.
"X" = Expedite, "P" = Postpone,  "C" = Cancel, "I"= increase qty, R = Reduce Qty. This field is a 8 char. field it could contain "IP' increase and postpone.  """  
      self.BuyerID:str = obj["BuyerID"]
      """   The Buyer Id that is on the related PO.
Duplicate of POHeader.BuyerID  """  
      self.RequireDate:str = obj["RequireDate"]
      """  Requirement Due Date.  For suggested Cancels or Reduce Quantity this is set to Today.  """  
      self.SourceName:str = obj["SourceName"]
      """  Human formatted string that contains the original source document of this entry.  """  
      self.SurplusQty:int = obj["SurplusQty"]
      """  New Suggested qty (in our UOM). This is the true amount suggested, not the difference between actual and suggested.  This only pertains to increase and reduce qty suggestions.  """  
      self.CancelReason:str = obj["CancelReason"]
      """   Reason for "Cancel" suggestion.  Purchase for stock which
1. OverMax - Stock purchase which surpasses the maximum.
2. No Requirement - Job purchase no open job record.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field can not be blank.  """  
      self.ConNum:int = obj["ConNum"]
      """  Supplier contact linked to this record.  """  
      self.Comment:str = obj["Comment"]
      """  Comment  """  
      self.VendorChange:bool = obj["VendorChange"]
      """  Indicates that this suggestion was initiated from the supplier Wb.  It is a reference field on time phase and does not add or subtract from the balance.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Linked Inter-Company sales order.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Linked Inter-Company Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The linked Inter-Company sale order release.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.TransDate:str = obj["TransDate"]
      self.GlbCompany:str = obj["GlbCompany"]
      self.ABCCode:str = obj["ABCCode"]
      self.SuggestionStatus:str = obj["SuggestionStatus"]
      """  SuggestionStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Review:bool = obj["Review"]
      """  Review  """  
      self.LockDate:bool = obj["LockDate"]
      """  LockDate  """  
      self.LockQty:bool = obj["LockQty"]
      """  LockQty  """  
      self.DisplaySuggestionStatus:str = obj["DisplaySuggestionStatus"]
      """  The translated suggestion status for display  """  
      self.IUM:str = obj["IUM"]
      """  it's the UOM for the field NewOurQuantity  """  
      self.NewOurQuantity:int = obj["NewOurQuantity"]
      self.NewShipByDate:str = obj["NewShipByDate"]
      self.SalesIUM:str = obj["SalesIUM"]
      """  it's the UOM value of SurPlusQty  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GlbSugPOChgTableset:
   def __init__(self, obj):
      self.GlbSugPOChg:list[Erp_Tablesets_GlbSugPOChgRow] = obj["GlbSugPOChg"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency display switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Document reportable amount.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Document taxable amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document tax amount.  """  
      self.HedNum:int = obj["HedNum"]
      """  Order or Quote number this tax summary relates to.  """  
      self.Percent:int = obj["Percent"]
      """  Tax percent  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax amount  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax code  """  
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales Tax description  """  
      self.GroupID:str = obj["GroupID"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.RateCode:str = obj["RateCode"]
      """  Rate Code on the Header Tax Summary  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  Invoice Number of allocated Deposits  """  
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      """  Rate Code Description on the Header Tax Summary  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_JobProdRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number. Used in tying record back to its parent JobHead record.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Related sales order number. For build to stock demands the OrderNum, OrderLine and OrderRel fields are all zero  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Related Sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Related sales order release number.  """  
      self.ProdQty:int = obj["ProdQty"]
      """   The planned production quantity for a  Job to fill the demand.
Note: updates the JobHead.ProdQty via JobProd write trigger.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """   Inventory warehouse that job is producing for.
Only relevant for build to stock demands (ordernum = 0). In this case a valid Part must be referenced.  """  
      self.TargetJobNum:str = obj["TargetJobNum"]
      """  Production Demands can be from other jobs.  That is, one job can be building parts that are required by another job. The demand is defined by a JobMtl record on some other job.  "TargetJobNum" is the job that this job is making parts for.  """  
      self.TargetAssemblySeq:int = obj["TargetAssemblySeq"]
      """  Assembly Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.TargetMtlSeq:int = obj["TargetMtlSeq"]
      """  Material Sequence of the JobMtl record that is making the production demand. (See "TargetJobNum")  """  
      self.ShippedQty:int = obj["ShippedQty"]
      """   Quantity Shipped against this allocation.
Updated via the ShipDtl write triggers.  """  
      self.ReceivedQty:int = obj["ReceivedQty"]
      """   Total quantity received to stock for this production allocation.
Updated via the Manufacturing Receipts process  """  
      self.WIPQty:int = obj["WIPQty"]
      """   Represents the "outstanding" WIP production quantity.
WIPQty = JobProd.Quantity - (ShippedQty +ReceivedQty) if negative then it is set to zero. If related Order Release is closed then reservation is zero.
Updated via the JobProd, OrderRel triggers.  """  
      self.CallNum:int = obj["CallNum"]
      """  The Service Call number that this Job is linked to.  """  
      self.CallLine:int = obj["CallLine"]
      """  The Service Call Line that this Job is linked to.  """  
      self.TFLineNum:str = obj["TFLineNum"]
      """  This is the unique key for this table.  It will have a prefix like Job to indicate firm or unfirm orders.  The record can be linked to an Order Header by using the TFOrdNum TFOrdSeq keys.  """  
      self.PartNum:str = obj["PartNum"]
      """   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand schedule is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  The sequence from the DemandHead record this DemandSchedule is related to.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  The sequence from the DemandDetail record this DemandSchedule is related to.  """  
      self.DemandScheduleSeq:int = obj["DemandScheduleSeq"]
      """  This field along with Company, DemandContractNum, DemandHeadSeq, and DemandDetailSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandSchedulel record for the DemandDetail and the adding 1 to it.  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanID:str = obj["PlanID"]
      """  PlanID  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.WIPToMiscShipment:bool = obj["WIPToMiscShipment"]
      """  Job will be shipped through a Misc Shipment directly from WIP when job is closed.  """  
      self.RMANum:int = obj["RMANum"]
      """  RMA Num linked from RMA Disposition.  """  
      self.RMALine:int = obj["RMALine"]
      """  RMA Line linked from RMA Disposition.  """  
      self.RMAReceipt:int = obj["RMAReceipt"]
      """  RMA Receipt linked from RMA Disposition.  """  
      self.RMADisp:int = obj["RMADisp"]
      """  RMA Disposition linked from RMA Disposition.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  DMRNum  """  
      self.DMRActionNum:int = obj["DMRActionNum"]
      """  DMRActionNum  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.CustID:str = obj["CustID"]
      """  The customer ID  """  
      self.CustName:str = obj["CustName"]
      """  The customer name.  """  
      self.DemandLinkSource:str = obj["DemandLinkSource"]
      """  The demand linke source  """  
      self.DemandLinkStatus:str = obj["DemandLinkStatus"]
      """  The demand link status  """  
      self.IUM:str = obj["IUM"]
      """  IUM  """  
      self.JHPartDesc:str = obj["JHPartDesc"]
      """  The jobhead part description  """  
      self.JHPartNum:str = obj["JHPartNum"]
      """  The jobhead part number  """  
      self.MakeToJobQty:int = obj["MakeToJobQty"]
      """  The make to job quantity  """  
      self.MakeToStockQty:int = obj["MakeToStockQty"]
      """  The make to stock quantity  """  
      self.MakeToType:str = obj["MakeToType"]
      """  The Make to type (i.e. Stock, Job, Order)  """  
      self.MaxAllowedQty:int = obj["MaxAllowedQty"]
      """  Calculated quantity that could come from allocatedqty or accumulation from parttran.  """  
      self.MtlPartDesc:str = obj["MtlPartDesc"]
      """  The jobmtl part description.  """  
      self.MtlPartNum:str = obj["MtlPartNum"]
      """  The jobmtl part number.  """  
      self.OrdWIPQty:int = obj["OrdWIPQty"]
      """  The order WIP quantity  """  
      self.OurStockQty:int = obj["OurStockQty"]
      """  Calculated field OurStockQty, will update OrderRel.OurStockQty  """  
      self.PullFromStockWarehouseCode:str = obj["PullFromStockWarehouseCode"]
      """  Pull from Stock warehouse code (orderrel.warehousecode  """  
      self.PullFromStockWarehouseDesc:str = obj["PullFromStockWarehouseDesc"]
      """  The pull from stock warehouse description  """  
      self.ShipBy:str = obj["ShipBy"]
      """  The Demand Link Due Date - Ship By  """  
      self.SplitQty:int = obj["SplitQty"]
      """  The split quantity for the demand.  """  
      self.StkWIPQty:int = obj["StkWIPQty"]
      """  The stock WIP quantity  """  
      self.TFOrdLine:int = obj["TFOrdLine"]
      self.TFOrdNum:str = obj["TFOrdNum"]
      self.TotalSplitQuantity:int = obj["TotalSplitQuantity"]
      """  Temp field so UI has a column to bind to for calculation of Total Split Quantity.  """  
      self.TrackSerialNumbers:bool = obj["TrackSerialNumbers"]
      self.Valid:bool = obj["Valid"]
      """  This is a field used in Split Job to determine if record has been validated.  """  
      self.AsmPartDesc:str = obj["AsmPartDesc"]
      """  The jobasmbl part description.  """  
      self.AsmPartNum:str = obj["AsmPartNum"]
      """  The jobasmbl part number.  """  
      self.EnableAttributeSetSearch:bool = obj["EnableAttributeSetSearch"]
      self.DispNumberOfPieces:int = obj["DispNumberOfPieces"]
      """  Number of pieces for inventory attribute tracked parts.  """  
      self.CustInactive:bool = obj["CustInactive"]
      """  Indicates a customer referenced on the record is inactive.  """  
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      """  Indicates if a ShipTo referenced on the record is inactive.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallLineLineDesc:str = obj["CallLineLineDesc"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartAttrClassID:str = obj["PartAttrClassID"]
      self.PartTrackInventoryByRevision:bool = obj["PartTrackInventoryByRevision"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.PartTrackInventoryAttributes:bool = obj["PartTrackInventoryAttributes"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OHOrderMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number that this miscellaneous record is related to. If related to the Order then this field is zero. This number is not directly entered by the user; rather it is carried through from the header or detail line that user was on when miscellaneous maintenance was requested.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the MiscChrg master file.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. This will be printed on the acknowledgment and transferred over to invoice processing. The default is provided by MiscChrg.Description, but it's overridable by the user. This can't be blank.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.FreqCode:str = obj["FreqCode"]
      """  Sets the frequency of when this miscellaneous charge should be applied. The options are F - First shipment, L = Last shipment, E = every shipment. This defaults from the MiscChrg.FreqCode.  """  
      self.Quoting:str = obj["Quoting"]
      """  An internally used flag which indicates that this record was created from a Quote via the "Get Quote" function. "Q" = related to the QuoteQty record, "L" = related to the overall QuoteDtl record. This flag is used so that the OrderMsc file can be refreshed from the QuoteMsc when Quantity or Quote/Line # changes occur. The logic is that if a change in order quantity of a order line that is linked to a quote causes a different price break to be selected then all the existing all OrderMsc records where Quoting = "Q" are deleted and then re-pulled in based on the new qty. If the Quote # or QuoteLine are changed then all OrderMsc records where Quoting is either a "Q" or "L" are deleted then re-pulled in from the newly referenced quote.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order miscellaneous charge is linked to an inter-company PO misc charge.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  Inter Company PO Sequence Number  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default. - Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default. - includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.ChangeTrackApproved:bool = obj["ChangeTrackApproved"]
      """  ChangeTrackApproved  """  
      self.ChangeTrackAmount:int = obj["ChangeTrackAmount"]
      """  ChangeTrackAmount  """  
      self.ChangeTrackMemoDesc:str = obj["ChangeTrackMemoDesc"]
      """  ChangeTrackMemoDesc  """  
      self.ChangeTrackMemoText:str = obj["ChangeTrackMemoText"]
      """  ChangeTrackMemoText  """  
      self.ChangeTrackStatus:str = obj["ChangeTrackStatus"]
      """  ChangeTrackStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DocDspMiscAmt:int = obj["DocDspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Misc charge amount on display (may or may not include taxes)  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      """  Misc charge amount on display in report currency (may or may not include taxes)  """  
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      """  Misc charge amount on display in report currency (may or may not include taxes)  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.BitFlag:int = obj["BitFlag"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrdDtlQuoteQtyTableset:
   def __init__(self, obj):
      self.QuoteQty:list[Erp_Tablesets_QuoteQtyRow] = obj["QuoteQty"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_OrdRelJobProdTableset:
   def __init__(self, obj):
      self.JobProd:list[Erp_Tablesets_JobProdRow] = obj["JobProd"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_OrderCustTrkRow:
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  from OrderHed.OrderNum  """  
      self.OpenOrder:bool = obj["OpenOrder"]
      """  from OrderHed.OpenOrder  """  
      self.Company:str = obj["Company"]
      """  from OrderHed.Company  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  from OrderHed.OrderHeld  """  
      self.PONum:str = obj["PONum"]
      """  from OrderHed.PONum  """  
      self.CustNum:int = obj["CustNum"]
      """  from OrderHed.CustNum  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  from OrderHed.ShipToNum  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  from OrderHed.ShpConNum  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  from OrderHed.PrcConNum  """  
      self.OrderDate:str = obj["OrderDate"]
      """  from OrderHed.OrderDate  """  
      self.OrderHedNeedByDate:str = obj["OrderHedNeedByDate"]
      """  from OrderHed.NeedByDate  """  
      self.OrderHedRequestDate:str = obj["OrderHedRequestDate"]
      """  from OrderHed.RequestDate  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  from OrderHed.Currency  """  
      self.OrderLine:int = obj["OrderLine"]
      """  from OrderDtl.OrderLine  """  
      self.OpenLine:bool = obj["OpenLine"]
      """  from OrderDtl.OpenLine  """  
      self.POLine:str = obj["POLine"]
      """  from OrderDtl.POLine  """  
      self.PartNum:str = obj["PartNum"]
      """  from OrderDtl.PartNum  """  
      self.LineDesc:str = obj["LineDesc"]
      """  from OrderDtl.LineDesc  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  from OrderDtl.SellingQuantity  """  
      self.SalesUM:str = obj["SalesUM"]
      """  from OrderDtl.SalesUM  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  from OrderDtl.DocUnitPrice  """  
      self.ProdCode:str = obj["ProdCode"]
      """  from OrderDtl.ProdCode  """  
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      """  from OrderDtl.ProdCodeDescription  """  
      self.OrderDtlNeedByDate:str = obj["OrderDtlNeedByDate"]
      """  from OrderDtl.NeedByDate  """  
      self.OrderDtlRequestDate:str = obj["OrderDtlRequestDate"]
      """  from OrderDtl.RequestDate  """  
      self.WebOrder:bool = obj["WebOrder"]
      """  from OrderHed.WebOrder  """  
      self.OnCreditHold:bool = obj["OnCreditHold"]
      """  If OrderHed.CustOnCreditHold = true and OrderHed.CreditOverride = false and OrderHed.OpenOrder = true then true otherwise false  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  from OrderDtl.RevisionNum  """  
      self.XPartNum:str = obj["XPartNum"]
      """  from OrderDtl.XPartNum  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  from OrderDtl.XRevisionNum  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To customer number from OrderHed.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Bill To Customer ID from OrderHed.  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill To Customer Name.  """  
      self.BTAddressList:str = obj["BTAddressList"]
      """  Bill to address list.  """  
      self.BTContactFaxNum:str = obj["BTContactFaxNum"]
      """  Bill to contact fax number.  """  
      self.BTContactPhoneNum:str = obj["BTContactPhoneNum"]
      """  Bill to contact phone number  """  
      self.BTContactName:str = obj["BTContactName"]
      """  Bill To Contact name.  """  
      self.BTConNum:int = obj["BTConNum"]
      """  Bill to contact num.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id.  """  
      self.SoldToCustName:str = obj["SoldToCustName"]
      """  Sold to customer name.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  The full customer's name.  """  
      self.ShipToName:str = obj["ShipToName"]
      """  The name for the ship to location.  """  
      self.CustID:str = obj["CustID"]
      """  The customer ID.  """  
      self.POLineRef:str = obj["POLineRef"]
      """  from OrderDtl.POLineRef  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderCustTrkTableset:
   def __init__(self, obj):
      self.OrderCustTrk:list[Erp_Tablesets_OrderCustTrkRow] = obj["OrderCustTrk"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_OrderDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.OrderNum:int = obj["OrderNum"]
      self.OrderLine:int = obj["OrderLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderDtlRow:
   def __init__(self, obj):
      self.VoidLine:bool = obj["VoidLine"]
      """   Indicates that the line item was closed before any shipments were made against it. Normally line items are closed as part of the Shipping process. By using the "Close Line" menu option the user can close the line manually, to provide the function to close the line when the customer cancels there request.  If the line item had no shipments made it is then marked as "voided". Regardless of shipment activity the line is also marked as closed (OpenLine = No).
When an OrderDtl record is 'voided/closed' all of it's related OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.OpenLine:bool = obj["OpenLine"]
      """  Indicates if the OrderDtl record is in a "open or closed" status.  This field is not directly maintainable. It can be set to "closed" via the "Close-Line" menu option,  the "Close-Order" menu option, or when all the related OrderRel records are closed, OrderRel records are closed via shipping or by the "Close Release" button within Order Entry. (See VoidLine also).  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Contains the Order Number that ties this detail record back to an OrderHed record.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.PartNum:str = obj["PartNum"]
      """   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the OrderDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Line Item description. The Part.Description can be used as a default.  """  
      self.Reference:str = obj["Reference"]
      """  EDI Reference  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.POLine:str = obj["POLine"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """  Controls if line is commissionable. Note if all the OrderHed.SalesRep are blank then this should be "No", also the user should not even see this field when there are no sales reps for the order.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  The line item discount percent. It has nothing to do with price break discounts. It is a flat discount percent that defaults from the OrderHed.DiscountPercent, which was originally defaulted from the Customer.DiscountPercent.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Total Order Quantity for the line item. This quantity must always be kept in sync with the scheduled ship quantities stored in the OrderRel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line ( more than one OrderRel record) the OrderQty is not maintainable. As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This ensures that Order quantity and scheduled ship quantity are always in sync.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """   Date that the first release needs be shipped by in order to meet the customers due date for the first delivery. Defaulted as OrderHed.RequestDate.
Not directly maintainable when more than one delivery record exists, in which case it gets refreshed as the earliest ReqDate of the related OrderRel records.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """  Indicates the pricing per quantity. It can be "E" = per each, "C" = per hundred,  "M" = per thousand. Used to calculate the extended unit price for the line item. The logic is to divide the OrderDtl.OrderQty by the appropriate "per" value and then multiply by unit price.  Use the  Part.PricePerCode as a default. If Part record does not exist then default as "E".  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the detail order line item. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the order line item. These will copied into the packing slip detail  file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the order line item. These will copied into the Invoice detail  file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains comments for pick list or job about the order line item. These will be printed on the picking lists or copied to the job during the link process.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record. Defaults from the the or from the Part Master.  """  
      self.AdvanceBillBal:int = obj["AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs. This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering amount in the InvcDetl.  """  
      self.DocAdvanceBillBal:int = obj["DocAdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with. This is part of the foreign key to QuoteHed file. This field is updated via the "get quote" function within Order Entry.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this order line was created. Updated via the Get Quote function within Order Entry. This field along with Company and QuoteNum make up the link to the QuoteDtl file.  """  
      self.TMBilling:bool = obj["TMBilling"]
      """  Indicates if the Order line item is billed based on Time & Material. This flag is copied into the ShipDtl record during the Shipping Entry process. See ShipDtl.TMBilling description for further details.  """  
      self.OrigWhyNoTax:str = obj["OrigWhyNoTax"]
      """  This field is no longer active. It has been replaced by OrderRel.Exempt. The contents were copied into OrderRel.Exempt during the release conversion process. This will be removed in the next release.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """   Date the customer needs the first release to be delivered.
Defaulted as OrderHed.NeedByDate. Not directly maintainable when more than one delivery record exists. In which case it is kept in sync with the OrderRel record which has the earliest ReqDate which are maintained in the shipping release dialog boxes.  """  
      self.CustNum:int = obj["CustNum"]
      """  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the OrderDtl records for a specific customer.  """  
      self.Rework:bool = obj["Rework"]
      """   Used to indicate that line item is to be "Reworked" instead of manufactured.  It is shown in the Job Entry Order Activity screens.
When Yes then all related OrderRel records are Make=Yes.  """  
      self.RMANum:int = obj["RMANum"]
      """   Return Authorization Number that OrderDtl is fulfilling.
If entered, must be valid in RMAHead.  """  
      self.RMALine:int = obj["RMALine"]
      """  The line item of the RMA detail that this order line item is fulfilling.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID of the Project table record that this OrderDtl record. Can be blank.  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.BasePartNum:str = obj["BasePartNum"]
      """  The part number used to identify the configured part number initially entered on the line.  """  
      self.Warranty:bool = obj["Warranty"]
      """  Indicate that the item or the product group has a warranty.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Unique code for the Warranty that ties this record to a type of warranty.  Found on either the Part or ProdGrup table.  """  
      self.MaterialDuration:int = obj["MaterialDuration"]
      """  The # of days, months, years the material is covered by warranty  """  
      self.LaborDuration:int = obj["LaborDuration"]
      """  The # of days, months, years the Labor is covered by warranty  """  
      self.MiscDuration:int = obj["MiscDuration"]
      """  The # of days, months, years the Misc. Charges are covered by warranty  """  
      self.MaterialMod:str = obj["MaterialMod"]
      """  Whether the duration of warranty  is for "Days"," Months", "Years".  """  
      self.LaborMod:str = obj["LaborMod"]
      """  Whether the duration of warranty  is "Days"," Months"," years".  """  
      self.WarrantyComment:str = obj["WarrantyComment"]
      """  Editor widget for Warranty comments.  """  
      self.Onsite:bool = obj["Onsite"]
      """  This warranty covers On site visits  """  
      self.MatCovered:bool = obj["MatCovered"]
      """  Are Material cost covered  """  
      self.LabCovered:bool = obj["LabCovered"]
      """  Is Labor Cost Covered  """  
      self.MiscCovered:bool = obj["MiscCovered"]
      """  Are misc. Costs Covered  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Unit of measure (how it is sold/issued).  Use the default Part.SUM if its a valid Part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  Represents one of the requested Order Quantities for the line item using OrderDtl.SUM.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.ShipLineComplete:bool = obj["ShipLineComplete"]
      """  Indicates if the order line must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases of the line with a ship date <= the given cutoff date also have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "L" (Ship Order line 100% complete) and OrderHed.ShipOrderComplete = No. This field is disabled and set to No if the OrderHed.ShipOrderComplete = Yes.  """  
      self.CumeQty:int = obj["CumeQty"]
      """  Quantity from last EDI update.  """  
      self.CumeDate:str = obj["CumeDate"]
      """  Date of last update  """  
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  The related Marketing Campaign ID. Mirror image of the QuoteHed.MkthCampaignID. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """   Link to the marketing event associated with this record.
The related Marketing Event Sequence. Mirror image of the QuoteHed.MktgEventSeq. Maintainable via order entry if not related to a quote and the CRM module is installed.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order line is linked to an inter-company PO line.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.LastConfigDate:str = obj["LastConfigDate"]
      """  The date when the configuration was completed for the assembly.  """  
      self.LastConfigTime:int = obj["LastConfigTime"]
      """  The system time when the configuration was completed for the assembly.  """  
      self.LastConfigUserID:str = obj["LastConfigUserID"]
      """  The User ID of the last user to complete the configuration of the assembly.  """  
      self.ConfigUnitPrice:int = obj["ConfigUnitPrice"]
      """   Same as Unit price except that this field contains the unit price computed from the input based pricing in a configuration.
If price breaks exist this price should be used as the base price instead of the one found in the part table.  """  
      self.ConfigBaseUnitPrice:int = obj["ConfigBaseUnitPrice"]
      """  This is the base price for inputs based pricing of a configuration.  The price of inputs are added to this price to get the ConfigUnitPrice.  """  
      self.PriceListCode:str = obj["PriceListCode"]
      """  This is the Price List used to determine the starting base price.  """  
      self.BreakListCode:str = obj["BreakListCode"]
      """  This is the Price List used to determine the break % or amount.  """  
      self.PricingQty:int = obj["PricingQty"]
      """  The Order Quantity (total qty of related order lines) used to find price when quantity based discounting is applied.  """  
      self.LockPrice:bool = obj["LockPrice"]
      """  Indicates if the price of the order line can be changed.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency (converted using the exchange rate on OrderHed).  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency (converted using the exchange rate on OrderHed).  """  
      self.PriceGroupCode:str = obj["PriceGroupCode"]
      """  This is the Price Group ID used to price the order line with.  """  
      self.OverridePriceList:bool = obj["OverridePriceList"]
      """  Indicates if the user selected a price list different from the default.  """  
      self.BaseRevisionNum:str = obj["BaseRevisionNum"]
      """  The revision number used to identify the configured part/revision number initially entered on the line.  """  
      self.PricingValue:int = obj["PricingValue"]
      """  The Order Value (total extended price of related order lines) used to find order value break when value based discounting is applied.  """  
      self.DisplaySeq:int = obj["DisplaySeq"]
      """  This field controls the order in which Sales Order lines are displayed.  Display Seq is a decimal number where the whole number portion is used to sequence normal sales order lines and the decimal portion is used to sequence kit components under their associated kit parent.  """  
      self.KitParentLine:int = obj["KitParentLine"]
      """  The sales order line number of the parent kit item.  This is only relevent for sales order lines which are kit parent or component lines.  If the KitParentLine equals the OrderLine then this is a kit parent line.  """  
      self.KitAllowUpdate:bool = obj["KitAllowUpdate"]
      """  Indicates if component lines can be added, deleted and modified during Sales Order entry.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitShipComplete:bool = obj["KitShipComplete"]
      """  Indicates if the parent kit part must be shipped complete of if kit components can be shippped in varying degrees of completeness.  This field is only relevant for sales order lines which are kit parents. If this field is set to "No" then KitPricing must be set to "P".  """  
      self.KitBackFlush:bool = obj["KitBackFlush"]
      """  Indicates if all components are to be backflushed when a kit parent part is shipped.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsPS:bool = obj["KitPrintCompsPS"]
      """  Indicates if kit components are to be printed on packing slips.  If KitShipComplete is "Yes", then this field must be set to "YES" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPrintCompsInv:bool = obj["KitPrintCompsInv"]
      """  Indicates if kit components are to be printed on invoices.  If KitShipComplete is "Yes", then this field must be set to "Yes" as well.  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitPricing:str = obj["KitPricing"]
      """  Indicates how kits will be priced.  Values are P = Parent Pricing (The price is obtained from the sales price for the kit parent item), C = Component Pricing (The price is obtained from a rollup of kit component items).  This field is only relevant for sales order lines which are kit parents.  """  
      self.KitQtyPer:int = obj["KitQtyPer"]
      """  Component quantity required to fulfill one kit parent.  This field is only relevant on a sales order line which is a kit component.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Commission Pay rates for the line item associated to the possible 5 sales reps for the order. Use the OrderHed.RepRate as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y".  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Use the OrderHed.RepSplit as the default. These fields are not accessible if the OrderDtl.Commissionable is not "Y"  """  
      self.DemandContractLine:int = obj["DemandContractLine"]
      """  The Demand Contract Detail record this OrderDtl is related to.  """  
      self.CreateNewJob:bool = obj["CreateNewJob"]
      """  Create New Job flag  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.GetDtls:bool = obj["GetDtls"]
      """  Get Details flag  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SchedJob:bool = obj["SchedJob"]
      """  Schedule Job flag  """  
      self.RelJob:bool = obj["RelJob"]
      """  Release Job flag  """  
      self.EnableCreateNewJob:bool = obj["EnableCreateNewJob"]
      """  Enable New Job flag  """  
      self.EnableGetDtls:bool = obj["EnableGetDtls"]
      """  Enable Get Details flag  """  
      self.EnableSchedJob:bool = obj["EnableSchedJob"]
      """  Enable Schedule Job flag  """  
      self.EnableRelJob:bool = obj["EnableRelJob"]
      """  Enable Release Job flag  """  
      self.CounterSaleWarehouse:str = obj["CounterSaleWarehouse"]
      """  Indicates the warehouse selected for a counter sale order line.  """  
      self.CounterSaleBinNum:str = obj["CounterSaleBinNum"]
      """  Identifies the Bin selected for a counter sale order line.  """  
      self.CounterSaleLotNum:str = obj["CounterSaleLotNum"]
      """  Indicates the lot number selected for a counter sale order line.  """  
      self.CounterSaleDimCode:str = obj["CounterSaleDimCode"]
      """  Indicates the dimension code selected for a counter sales order line.  """  
      self.DemandDtlRejected:bool = obj["DemandDtlRejected"]
      """  Indicates if the demand detail that created/updated this order line has been rejected.  """  
      self.KitFlag:str = obj["KitFlag"]
      """   A character flag field used to differentiate between regular sales order line, Sales Kit parent order line and Sales Kit component order line.
P = Sales Kit Parent line
C = Sales Kit Component Line
Null = regular line  """  
      self.KitsLoaded:bool = obj["KitsLoaded"]
      """  Indicates if the kit components have been automatically loaded.  If set to false the user interface will attempt to load the kit components after the user saves a new order line.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this demand is for.  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.DemandDtlSeq:int = obj["DemandDtlSeq"]
      """  This field along with Company, DemandContractNum and DemandHeadSeq make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last DemandDetail record for the DemandHead and the adding 1 to it.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases for the line  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1AdvanceBillBal:int = obj["Rpt1AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt2AdvanceBillBal:int = obj["Rpt2AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt3AdvanceBillBal:int = obj["Rpt3AdvanceBillBal"]
      """  Tracks the "Balance" of Advance billings which are to be used to reduce the invoice when actual shipment occurs( in the customer's currency). This value is increased via the "Advance Bill" invoice type. It is reduced when the shipment invoice is created by entering the amount in the InvcDetl.  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.ExtPriceDtl:int = obj["ExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule  """  
      self.DocExtPriceDtl:int = obj["DocExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.Rpt1ExtPriceDtl:int = obj["Rpt1ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPriceDtl:int = obj["Rpt2ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPriceDtl:int = obj["Rpt3ExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.LineStatus:str = obj["LineStatus"]
      """  Status of Order Line  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table. Assumed to include taxes  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Same as DocUnit price except that this field contains the unit price including taxes  """  
      self.InDiscount:int = obj["InDiscount"]
      """  A flat discount amount for the line item. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed.  - includes taxes  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """  A flat discount amount for the line item Converted to the customers currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * InUnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, InUnitPrice or OrderQty fields are changed. - includes taxes  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the price returned by the price list before quantity based or order value based discounts are applied. including taxes  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """   Same as List price except that this field contains the list price in
the customer currency -including taxes.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied. including taxes  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in the customer currency - including taxes.  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  A flat discount amount for the line item Converted to a report currency. It can be left zero. This is calculated using the OrderDtl.DiscountPercent * (OrderQty * UnitPrice). This field can also be directly updated by the user, However it is refreshed whenever the DiscountPercent, UnitPrice or OrderQty fields are changed.  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """   Same as List price except that this field contains the list price in
a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Same as Order Based price except that this field contains the unit price in a report currency (converted using the exchange rate on OrderHed).  """  
      self.InExtPriceDtl:int = obj["InExtPriceDtl"]
      """  Extended Price for the order line item, rounded according to the Base currency Round rule - Taxes are Included  """  
      self.DocInExtPriceDtl:int = obj["DocInExtPriceDtl"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule - Taxes Included  """  
      self.Rpt1InExtPriceDtl:int = obj["Rpt1InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPriceDtl:int = obj["Rpt2InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPriceDtl:int = obj["Rpt3InExtPriceDtl"]
      """  Reporting currency value of this field  """  
      self.OldOurOpenQty:int = obj["OldOurOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldSellingOpenQty:int = obj["OldSellingOpenQty"]
      """  Used to store selling open quantity value setting assigned in product configuration programs  """  
      self.OldOpenValue:int = obj["OldOpenValue"]
      """  Used to store open value setting assigned in product configuration programs  """  
      self.OldProdCode:str = obj["OldProdCode"]
      """  Used to store prod code value assigned in product configuration programs  """  
      self.PrevSellQty:int = obj["PrevSellQty"]
      """  Previous Selling Quantity  """  
      self.PrevPartNum:str = obj["PrevPartNum"]
      """  Previous Part Number  """  
      self.PrevXPartNum:str = obj["PrevXPartNum"]
      """  Previous Customer Part Number  """  
      self.KitCompOrigSeq:int = obj["KitCompOrigSeq"]
      """  The original material sequence of this kit component under the kit parent part.  """  
      self.KitCompOrigPart:str = obj["KitCompOrigPart"]
      """  The original kit component part number prior to processing any configurator rule programs  """  
      self.SmartStringProcessed:bool = obj["SmartStringProcessed"]
      """  If TRUE then this field will mean that the smart string has already been processed  """  
      self.SmartString:str = obj["SmartString"]
      """  Original smart string passed in for configuration  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.DiscBreakListCode:str = obj["DiscBreakListCode"]
      self.DiscListPrice:int = obj["DiscListPrice"]
      self.LockDisc:bool = obj["LockDisc"]
      self.OverrideDiscPriceList:bool = obj["OverrideDiscPriceList"]
      self.GroupSeq:int = obj["GroupSeq"]
      """  GroupSeq  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCOrderLine:int = obj["ECCOrderLine"]
      """  ECCOrderLine  """  
      self.DupOnJobCrt:bool = obj["DupOnJobCrt"]
      """  DupOnJobCrt  """  
      self.UndersPct:int = obj["UndersPct"]
      """  UndersPct  """  
      self.Overs:int = obj["Overs"]
      """  Overs  """  
      self.Unders:int = obj["Unders"]
      """  Unders  """  
      self.OversUnitPrice:int = obj["OversUnitPrice"]
      """  OversUnitPrice  """  
      self.PlanUserID:str = obj["PlanUserID"]
      """  PlanUserID  """  
      self.PlanGUID:str = obj["PlanGUID"]
      """  PlanGUID  """  
      self.MOMsourceType:str = obj["MOMsourceType"]
      """  MOMsourceType  """  
      self.MOMsourceEst:str = obj["MOMsourceEst"]
      """  MOMsourceEst  """  
      self.DefaultOversPricing:str = obj["DefaultOversPricing"]
      """  DefaultOversPricing  """  
      self.ECCPlant:str = obj["ECCPlant"]
      """  ECCPlant  """  
      self.ECCQuoteNum:str = obj["ECCQuoteNum"]
      """  ECCQuoteNum  """  
      self.ECCQuoteLine:int = obj["ECCQuoteLine"]
      """  ECCQuoteLine  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MfgJobType:str = obj["MfgJobType"]
      """  MfgJobType  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.CreateJob:bool = obj["CreateJob"]
      """  CreateJob  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.DocInAdvanceBillBal:int = obj["DocInAdvanceBillBal"]
      """  DocInAdvanceBillBal  """  
      self.InAdvanceBillBal:int = obj["InAdvanceBillBal"]
      """  InAdvanceBillBal  """  
      self.Rpt1InAdvanceBillBal:int = obj["Rpt1InAdvanceBillBal"]
      """  Rpt1InAdvanceBillBal  """  
      self.Rpt2InAdvanceBillBal:int = obj["Rpt2InAdvanceBillBal"]
      """  Rpt2InAdvanceBillBal  """  
      self.Rpt3InAdvanceBillBal:int = obj["Rpt3InAdvanceBillBal"]
      """  Rpt3InAdvanceBillBal  """  
      self.PCLinkRemoved:bool = obj["PCLinkRemoved"]
      """  PCLinkRemoved  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MSRP:int = obj["MSRP"]
      """  Base price before any price breaks and discounts  """  
      self.DocMSRP:int = obj["DocMSRP"]
      """  Same as MSRP except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1MSRP:int = obj["Rpt1MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt2MSRP:int = obj["Rpt2MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.Rpt3MSRP:int = obj["Rpt3MSRP"]
      """  Same as MSRP except that this field contains the price in a report currency.  """  
      self.EndCustomerPrice:int = obj["EndCustomerPrice"]
      """  Distributor end customer price.  """  
      self.DocEndCustomerPrice:int = obj["DocEndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1EndCustomerPrice:int = obj["Rpt1EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt2EndCustomerPrice:int = obj["Rpt2EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.Rpt3EndCustomerPrice:int = obj["Rpt3EndCustomerPrice"]
      """  Same as end customer price except that this field contains the price in a report currency.  """  
      self.PromotionalPrice:int = obj["PromotionalPrice"]
      """  Promotional Price offered to Dealer and Distributors.  """  
      self.DocPromotionalPrice:int = obj["DocPromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in the customer currency converted using the exchange rate on OrderHed.  """  
      self.Rpt1PromotionalPrice:int = obj["Rpt1PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt2PromotionalPrice:int = obj["Rpt2PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.Rpt3PromotionalPrice:int = obj["Rpt3PromotionalPrice"]
      """  Same as Promotional Price except that this field contains the price in a report currency converted using the exchange rate on OrderHed.  """  
      self.OrderLineStatusCode:str = obj["OrderLineStatusCode"]
      """  Current status of line.  This is a maintainable status through Order Line Status maintenance.  Depending on the setting can control is line is updatable from the web.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  Used specifically for Deal Portal and Location Inventory, not for Inventory Tracked Attributes.  """  
      self.KBConfigProdID:int = obj["KBConfigProdID"]
      """  The unique identifier of the related CPQ Configured Quote Product.  """  
      self.KBOriginalConfigProdID:int = obj["KBOriginalConfigProdID"]
      """  The unique identifier of the related original CPQ Configured Quote Product.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AvailableQuantity:int = obj["AvailableQuantity"]
      self.AvailPriceLists:str = obj["AvailPriceLists"]
      """  Available Price Lists  """  
      self.AvailUMFromQuote:str = obj["AvailUMFromQuote"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CalcUnitPrice:int = obj["CalcUnitPrice"]
      """  Default calculated unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.ConfigType:str = obj["ConfigType"]
      self.Configured:str = obj["Configured"]
      self.CounterSale:bool = obj["CounterSale"]
      self.CreditLimitMessage:str = obj["CreditLimitMessage"]
      """  The message text returned by the credit check process.  """  
      self.CreditLimitSource:str = obj["CreditLimitSource"]
      """  The source that put the customer on credit hold.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencyID:str = obj["CurrencyID"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DemandQuantity:int = obj["DemandQuantity"]
      self.DimCode:str = obj["DimCode"]
      self.DimConvFactor:int = obj["DimConvFactor"]
      self.DocDspDiscount:int = obj["DocDspDiscount"]
      """  Document currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      """  Document currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the order line item in Customer currency, rounded according to the Doc currency Round rule  """  
      self.DocInMiscCharges:int = obj["DocInMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in document currency  """  
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  The amount of discount for display in document currency which does not include taxes  """  
      self.DocMiscCharges:int = obj["DocMiscCharges"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total tax in Doc currency. The sum of all the tax details for the line (OrderRelTax).  """  
      self.DocTotalPrice:int = obj["DocTotalPrice"]
      self.DspDiscount:int = obj["DspDiscount"]
      """  Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DspJobType:str = obj["DspJobType"]
      """  To display the type of job this is: MFG = Manufacturing, PRJ = Project  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      """  Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.DUM:str = obj["DUM"]
      self.ECCConfigSysRowId:str = obj["ECCConfigSysRowId"]
      """  Web basket configuration related SysRowID  """  
      self.ECCDiscount:int = obj["ECCDiscount"]
      """  Additional discount calculated by ECC  """  
      self.ECCPreventRepricing:bool = obj["ECCPreventRepricing"]
      """  Prevents Epicor repricing the unit price coming from ECC.  This usually would be a result of Epicor going off-line and order pricing was performed by ECC.  """  
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the button Attibutes in Order Line  """  
      self.EnableKitUnitPrice:bool = obj["EnableKitUnitPrice"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableRenewalNbr:bool = obj["EnableRenewalNbr"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EnableSellingQty:bool = obj["EnableSellingQty"]
      """  This field is used for a row rule on the UIApp, it is set on the AfterGetRows for this table  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ExtPrice:int = obj["ExtPrice"]
      self.FromQuoteLineFlag:bool = obj["FromQuoteLineFlag"]
      self.FSAInstallationCost:int = obj["FSAInstallationCost"]
      """  Installation price of an equipment that requires installation in Epicor FSA. This value by default is inherited from the part but it could be overridden for another value if it's necessary.  """  
      self.FSAInstallationOrderLine:int = obj["FSAInstallationOrderLine"]
      self.FSAInstallationOrderNum:int = obj["FSAInstallationOrderNum"]
      self.FSAInstallationRequired:bool = obj["FSAInstallationRequired"]
      """  Indicates if the equipment requires an installation prior being marked as “Installed” on a Location in Epicor FSA. If true, at shipment it will create a service order for the installation service in FSA.  """  
      self.FSAInstallationType:str = obj["FSAInstallationType"]
      """  Indicates the service order template ID that Epicor FSA will use to create the installation service order.  """  
      self.FSAInstallationTypeDescription:str = obj["FSAInstallationTypeDescription"]
      self.HasComplement:bool = obj["HasComplement"]
      """  Indicates whether the part has at least one Complement  """  
      self.HasDowngrade:bool = obj["HasDowngrade"]
      """  Indicates whether the part has at least one Downgrade  """  
      self.HasSubstitute:bool = obj["HasSubstitute"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.HasUpgrade:bool = obj["HasUpgrade"]
      """  Indicates whether the part has at least one Upgrade  """  
      self.InMiscCharges:int = obj["InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line  """  
      self.InPrice:bool = obj["InPrice"]
      """  The flag to indicate if the Order Header Tax Liability is Tax Inclusive Pricing.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvtyUOM:str = obj["InvtyUOM"]
      """  Inventory UOM that the Order Detail is allocated against.  """  
      self.JobTypeDesc:str = obj["JobTypeDesc"]
      self.JobWasCreated:bool = obj["JobWasCreated"]
      """  If the Job has been already created against this line.  """  
      self.KitChangeParms:bool = obj["KitChangeParms"]
      """  If Kit Flag = P then sets this field to the value of the related PartPlant.KitAllowChangeParms. If KitFlag <> P then this will be FALSE.  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.KitFlagDescription:str = obj["KitFlagDescription"]
      """  Kit Flag Description. "P" = Parent, "C" = Component.  """  
      self.KitOrderQtyUOM:str = obj["KitOrderQtyUOM"]
      self.KitStandard:bool = obj["KitStandard"]
      """  If KitFlag = "C" and the parent kit line is configured OR if KitFlag = "P" and Configured = "On" then this field will be TRUE, otherwise it will be false.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  The amount of discount for display which does not include taxes  """  
      self.LotNum:str = obj["LotNum"]
      self.MiscCharges:int = obj["MiscCharges"]
      self.MultipleReleases:bool = obj["MultipleReleases"]
      self.OnHandQuantity:int = obj["OnHandQuantity"]
      self.PartExists:bool = obj["PartExists"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.POLineRef:str = obj["POLineRef"]
      """  Optional field used to enter the customers Purchase Order line item reference number.  """  
      self.PriceListCodeDesc:str = obj["PriceListCodeDesc"]
      self.ProcessCounterSale:bool = obj["ProcessCounterSale"]
      self.ProcessQuickEntry:bool = obj["ProcessQuickEntry"]
      self.QuoteQtyNum:int = obj["QuoteQtyNum"]
      self.RelWasRecInvoiced:bool = obj["RelWasRecInvoiced"]
      """  For this Detail line there is Release line that has Project and Phase and these Project or Phase was invoiced or used in revenue recognition.  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Extended Price for the Order Line in Rpt1 currency  """  
      self.Rpt1InMiscCharges:int = obj["Rpt1InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt1LessDiscount:int = obj["Rpt1LessDiscount"]
      """  The amount of discount for display which does not include taxes (report currency)  """  
      self.Rpt1MiscCharges:int = obj["Rpt1MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt1TotalPrice:int = obj["Rpt1TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Extended Price for the orderLine in Rpt2 currency.  """  
      self.Rpt2InMiscCharges:int = obj["Rpt2InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt2LessDiscount:int = obj["Rpt2LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt2MiscCharges:int = obj["Rpt2MiscCharges"]
      """  Report currency misc charges  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt2TotalPrice:int = obj["Rpt2TotalPrice"]
      """  Report currency line total price  """  
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      """  Report Currency Discount amount being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      """  Report Currency Unit Price being displayed (if the tax option is Tax Inclusive Pricing this amount includes taxes)  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Extended price for the order line in Rpt3 currency  """  
      self.Rpt3InMiscCharges:int = obj["Rpt3InMiscCharges"]
      """  Tax Inclusive Pricing - Total Misc Charges for the Order Line in report currency  """  
      self.Rpt3LessDiscount:int = obj["Rpt3LessDiscount"]
      """  The amount of discount for display in report currency which does not include taxes (report currency)  """  
      self.Rpt3MiscCharges:int = obj["Rpt3MiscCharges"]
      """  Report Currency misc charges  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Report currency line tax amount  """  
      self.Rpt3TotalPrice:int = obj["Rpt3TotalPrice"]
      """  Report currency line total price  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax in base currency. The sum of all the tax details for the line.  """  
      self.ThisOrderInvtyQty:int = obj["ThisOrderInvtyQty"]
      """  The Sales Order Quantity expressed in the Inventory Unit of Measure  """  
      self.TotalPrice:int = obj["TotalPrice"]
      self.TotalShipped:int = obj["TotalShipped"]
      self.WarehouseCode:str = obj["WarehouseCode"]
      self.WarehouseDesc:str = obj["WarehouseDesc"]
      self.BinNum:str = obj["BinNum"]
      self.AttributeMismatch:bool = obj["AttributeMismatch"]
      """  Attribute class is MRP Planned but AttributeSetID has not been set on releases.  """  
      self.JobManagerString:str = obj["JobManagerString"]
      """  A string containing the parameters needed to run Job Manager  """  
      self.CalcOrdBasedPrice:int = obj["CalcOrdBasedPrice"]
      """  Default calculated order value based discounts unit price for a particular part/customer.  Used with integrations for pre-order price validations.  """  
      self.SalesOrderLinked:bool = obj["SalesOrderLinked"]
      """  At least 1 OrderRel for OrderDtl has a PONum assigned.  """  
      self.InventoryAttributeSetID:int = obj["InventoryAttributeSetID"]
      """  This external column is to be used for the purpose of adding an OrderDtl for a part that has Track Inventory Attributes, allowing the AttributeSetID to be passed in with the line to be included on the OrderRel within the same update method call.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.CustNumSendToFSA:bool = obj["CustNumSendToFSA"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.DiscBreakListCodeListDescription:str = obj["DiscBreakListCodeListDescription"]
      self.DiscBreakListCodeEndDate:str = obj["DiscBreakListCodeEndDate"]
      self.DiscBreakListCodeStartDate:str = obj["DiscBreakListCodeStartDate"]
      self.MktgCampaignIDCampDescription:str = obj["MktgCampaignIDCampDescription"]
      self.MktgEvntEvntDescription:str = obj["MktgEvntEvntDescription"]
      self.OrderNumBTCustNum:int = obj["OrderNumBTCustNum"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.PartNumSendToFSA:bool = obj["PartNumSendToFSA"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumDefaultAttributeSetID:int = obj["PartNumDefaultAttributeSetID"]
      self.PartNumFSAEquipment:bool = obj["PartNumFSAEquipment"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PriceBreakListDescription:str = obj["PriceBreakListDescription"]
      self.PriceBreakStartDate:str = obj["PriceBreakStartDate"]
      self.PriceBreakEndDate:str = obj["PriceBreakEndDate"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.WarrantyCodeWarrDescription:str = obj["WarrantyCodeWarrDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.Phase_c:str = obj["Phase_c"]
      self.ItemID_c:str = obj["ItemID_c"]
      self.TypeCode_c:str = obj["TypeCode_c"]
      self.OrigTypeCode_c:str = obj["OrigTypeCode_c"]
      self.PhaseID_c:str = obj["PhaseID_c"]
      self.SalesCatID_c:str = obj["SalesCatID_c"]
      self.IndustryShipDate_c:str = obj["IndustryShipDate_c"]
      self.CreateDate_c:str = obj["CreateDate_c"]
      self.PriceUpdateDate_c:str = obj["PriceUpdateDate_c"]
      self.CreatedBy_c:str = obj["CreatedBy_c"]
      self.UpdatedBy_c:str = obj["UpdatedBy_c"]
      pass

class Erp_Tablesets_OrderHedAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.OrderNum:int = obj["OrderNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHedListRow:
   def __init__(self, obj):
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """   Indicates that the Order item was closed before any shipments were made against it. Normally the Orders are closed as part of the Shipping process when all the releases have been closed.  By using the "Close Order" menu option the user can close the Order manually, to provide the function to "Cancel"  the order when the customer cancels there request.  If the Order item had no shipments made it is then marked as "voided". Regardless of shipment activity the Order is always marked as closed (OpenOrder = No).
When an OrderHed record is 'voided/closed' all of it's related OrderDtl and OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in shipping entry. It does not prevent shipments from being entered for this order.  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Mandatory entry and must be valid. Default as the system date.  """  
      self.DepositBal:int = obj["DepositBal"]
      """  Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocDepositBal:int = obj["DocDepositBal"]
      """  Display value contains the deposit balance in the customer's currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on this order to arrive.  This is used only as the default value for the NeedByDate when creating order detail line items.  This can be left blank.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.BTCustNumCustID:str = obj["BTCustNumCustID"]
      """  BTCustNumCustID  """  
      self.BTCustNumName:str = obj["BTCustNumName"]
      """  BTCustNumName  """  
      self.DemandContract:str = obj["DemandContract"]
      """  DemandContract  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHedListTableset:
   def __init__(self, obj):
      self.OrderHedList:list[Erp_Tablesets_OrderHedListRow] = obj["OrderHedList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_OrderHedRow:
   def __init__(self, obj):
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.VoidOrder:bool = obj["VoidOrder"]
      """   Indicates that the Order item was closed before any shipments were made against it. Normally the Orders are closed as part of the Shipping process when all the releases have been closed.  By using the "Close Order" menu option the user can close the Order manually, to provide the function to "Cancel"  the order when the customer cancels there request.  If the Order item had no shipments made it is then marked as "voided". Regardless of shipment activity the Order is always marked as closed (OpenOrder = No).
When an OrderHed record is 'voided/closed' all of it's related OrderDtl and OrderRel records are also Closed/Voided thereby removing  any outstanding inventory allocations, if the OrderRel records were related to Jobs then they are flagged (OrderRel.OpenChg = Yes) to show up in the Job "Change Order List".  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.PONum:str = obj["PONum"]
      """  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  """  
      self.OrderHeld:bool = obj["OrderHeld"]
      """  Indicates if an order is flagged as being "HELD" , this  is primarily used as a visual indicator in shipping entry. It does not prevent shipments from being entered for this order.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """   This is used as one of the selection parameters on the Order entry edit reports. The intent is for users to be able to select orders that they have entered for hard copy edit.

On new orders use the users login ID as the default. They can override this if they wish to enter something more meaningful.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Indicates which customer ship to is to be used as the default for the Order release records for this order. It  can be blank or it must be valid in the SHIPTO table. Use the CUSTOMER.SHIPTONUM as the default on new orders or when the ORDERHED.CUSTNUM is changed.  """  
      self.RequestDate:str = obj["RequestDate"]
      """  Date that the items need to be shipped by to meet the customers NeedByDate.  This can be left blank, it is only used to supply a default for OrderDtl.RequestDate.  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Mandatory entry and must be valid. Default as the system date.  """  
      self.FOB:str = obj["FOB"]
      """  An optional field that describes the FOB policy.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Contains the key value of the record in the "SHIPVIA" table. It can be left blank or must be valid in the 'SHIPTO"  table.
Use the CUSTOMER.SHIPVIA as the default when the ORDER.CUSTNUM field is changed and the ORDERHED.SHIPTO is blank. Use SHIPTO.SHIPVIA when ORDER.CUSTNUM or ORDERHED.SHIPTO fields are changed and the ORDERHED.SHIPTO is not blank.  """  
      self.TermsCode:str = obj["TermsCode"]
      """   Contains the key value of the record in the TERMS table which indicates the sales terms established for this order. On change of ORDERHED.CUSTNUM use the CUSTOMER.TERMS

field as the default.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """  Used to establish a discount percent value which will be used as a default during order detail line entry. It can be left as zero.  Use the CUSTOMER.DISCOUNTPERCENT field as a default. Refreshed whenever ORDERHED.CUSTOMER field changes.  """  
      self.PrcConNum:int = obj["PrcConNum"]
      """  Contains the key  value for the Purchasing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMPCON as the default.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Establishes the Shipping Contact to be used as default on the Order release records. Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Use the Customer.PrimScon as a default.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the order. Up to five codes can be  established. This field is not directly maintainable. Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The first one is defaulted from the Customer master if ship to is blank; otherwise, from the Ship To.  """  
      self.OrderComment:str = obj["OrderComment"]
      """  Contains comments about the overall order. These will be printed on the Sales Acknowledgements.  """  
      self.ShipComment:str = obj["ShipComment"]
      """  Used to establish shipping comments about the overall order. These will copied into the packing slip header file as defaults.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.PickListComment:str = obj["PickListComment"]
      """  Contains picking  comments about the overall order. These will be printed on the picking lists.  """  
      self.DepositBal:int = obj["DepositBal"]
      """  Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocDepositBal:int = obj["DocDepositBal"]
      """  Display value contains the deposit balance in the customer's currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the items on this order to arrive.  This is used only as the default value for the NeedByDate when creating order detail line items.  This can be left blank.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this order.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The USERID of the user that overrode an order credit hold (system set).  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  The date that the user last overrode the customer credit hold (system set).  """  
      self.CreditOverrideTime:str = obj["CreditOverrideTime"]
      """  The time that the user last overrode the customer credit hold in HH:MM:SS format (system set).  """  
      self.CreditOverrideLimit:int = obj["CreditOverrideLimit"]
      """  The authorized maximum dollar limit that an order for a credit held customer is approved for.  Initially defaulted to the current order amount when the order is credit hold overridden.  The order amount is calculated by using line information only (i.e. extended amount and discounts) - deposits, advance billings, shipments and miscellaneous charges are NOT considered.  """  
      self.SndAlrtShp:bool = obj["SndAlrtShp"]
      """  Controls if an alert is to be sent when shipments are made for this order.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this order.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.AllocPriorityCode:str = obj["AllocPriorityCode"]
      """  Code used to relate a AllocPri record to the order.  Defaulted from Customer.AllocPriorityCode.  """  
      self.ReservePriorityCode:str = obj["ReservePriorityCode"]
      """  Code used to relate a ReservePri record to the order.  Defaulted from Customer.ReservePriorityCode.  """  
      self.ShipOrderComplete:bool = obj["ShipOrderComplete"]
      """  Indicates if the order must be shipped complete.  That is, as an orders release are selected for picking during the Auto Pick process of the Order Allocation program, the all releases with a ship date <= the given cutoff date alos have to be picked complete otherwise they will not be selected. This is defaulted to Yes when Customer.ShippingQualifier = "O" (Ship Order 100% complete)  """  
      self.WebOrder:bool = obj["WebOrder"]
      """  Not editable, When SF Synch creates orders, this flag is set to YES.  """  
      self.CCApprovalNum:str = obj["CCApprovalNum"]
      """  Updated Via SF Synch.  This is the authorization number from a third party credit card validation service.  """  
      self.EDIOrder:bool = obj["EDIOrder"]
      """  Order created from EDI interfaced module.  """  
      self.EDIAck:bool = obj["EDIAck"]
      """  Updated from EDI module if 855 or 865 created.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order header is linked to an inter-company PO header.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number that uniquely identifies the purchase order.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.WebEntryPerson:str = obj["WebEntryPerson"]
      """  This is the web-login-id (email address) of the person that placed the order.  """  
      self.AckEmailSent:bool = obj["AckEmailSent"]
      """  Indicates whether the email acknowledgement of the order has been sent.  (For web orders)  """  
      self.ApplyOrderBasedDisc:bool = obj["ApplyOrderBasedDisc"]
      """  Indicates if order based discounting needs to be applied to the order.  """  
      self.AutoOrderBasedDisc:bool = obj["AutoOrderBasedDisc"]
      """  Indicates if order based discounting should be applied automatically or manually triggered by user as menu option.  """  
      self.EntryMethod:str = obj["EntryMethod"]
      """   Indicates Entry method program that used to create the order.
S = Standard, Q = Quick Entry,  C = Counter Sales, D = Demand/EDI  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case that created this order.  """  
      self.CounterSale:bool = obj["CounterSale"]
      """  Flag used in sales order entry for counter sales orders.  """  
      self.CreateInvoice:bool = obj["CreateInvoice"]
      """  Create AR Invoice for counter sales order.  """  
      self.CreatePackingSlip:bool = obj["CreatePackingSlip"]
      """  Create Packing Slip for counter sale.  """  
      self.LockQty:bool = obj["LockQty"]
      """   increase/decrease when releases are changed.
When locked changes to releases does not change the order quantity.
NOTE: This feature is not implemented with the initial 5.2 release. Intended to be available in a later patch.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.CCAmount:int = obj["CCAmount"]
      """  Credit Transaction Amount, makes up part of CCTotal  """  
      self.CCFreight:int = obj["CCFreight"]
      """  Credit Card transaction freight amount, part of CCTotal  """  
      self.CCTax:int = obj["CCTax"]
      """  Credit Card Transaction Tax amount, part of CCTotal  """  
      self.CCTotal:int = obj["CCTotal"]
      """  Total amount being sent to the credit card processor  """  
      self.CCDocAmount:int = obj["CCDocAmount"]
      """  See CCAmount  """  
      self.CCDocFreight:int = obj["CCDocFreight"]
      """  See CCFreight  """  
      self.CCDocTax:int = obj["CCDocTax"]
      """  See CCTax  """  
      self.CCDocTotal:int = obj["CCDocTotal"]
      """  See CCTotal  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number  """  
      self.BTConNum:int = obj["BTConNum"]
      """  New database field as it can be changed by user.  Default is set to BTCustNum?s primary billing contact.  If a primary billing contact is not set, default is ?None Selected?.  Keep in mind the BTCustNum field may be the same as CustNum (SoldTo) but the default would still be this customer?s primary billing contact where the ConNum field (Contact for sold to) is defaulting the primary purchasing contact.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Split percent is used to calculate the "commissionable"  dollar amount. This field is used to establish the default split percent used in detail line entry. Should be zero if the corresponding SalesRep code is blank. Default as 100 percent  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the defaults sales rep commission rates to be used during entry of order detail lines. Must be zero if the ORDERHED.SALEREPCODE is blank. Default is the SALESREP.COMMISSIONPERCENT.  """  
      self.OutboundSalesDocCtr:int = obj["OutboundSalesDocCtr"]
      """  Incremented whenever an outbound sales document is generated from the order, i.e. Sales Order Acknowledgement, Response to Change, etc.  """  
      self.OutboundShipDocsCtr:int = obj["OutboundShipDocsCtr"]
      """  Incremented whenever an outbound shipping document is generated from the order, i.e. ASN.  """  
      self.DemandContractNum:int = obj["DemandContractNum"]
      """  The demand contract this OrderHed is related to.  """  
      self.DoNotShipBeforeDate:str = obj["DoNotShipBeforeDate"]
      """  The date before which the order cannot be shipped.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.DoNotShipAfterDate:str = obj["DoNotShipAfterDate"]
      """  The date after which the order cannot be shipped.  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.CancelAfterDate:str = obj["CancelAfterDate"]
      """  The date after which the sales order should be canceled.  """  
      self.DemandRejected:bool = obj["DemandRejected"]
      """  Indicates if the demand that created/updated this order has been rejected.  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.CreditCardOrder:bool = obj["CreditCardOrder"]
      """  Indicates if the Order is a credit card order  """  
      self.DemandHeadSeq:int = obj["DemandHeadSeq"]
      """  This field along with Company and DemandContractNum make up the unique key to the table. The system should generate this number during entry of new header records. The system determines next available number by finding the last DemandHead for the DemandContractNum and adding 1.  """  
      self.PayFlag:str = obj["PayFlag"]
      """  For Shipping; Bill Shipper, Bill Recipient, Bill Third Party, Bill Consignee  """  
      self.PayAccount:str = obj["PayAccount"]
      """  Shipping Pay Flag Account Number. Required when Pag Flag is collect or Third party  """  
      self.PayBTAddress1:str = obj["PayBTAddress1"]
      """  Shipping Bill To. The first line of the Payers main address. Required when Pay Flag is Third party.  """  
      self.PayBTAddress2:str = obj["PayBTAddress2"]
      """  Shipping Bill To.  The second line of the Payers main address. An address is required when Pay Flag is Third party  """  
      self.PayBTCity:str = obj["PayBTCity"]
      """  Shipping, The city portion of the Payer main address.  """  
      self.PayBTState:str = obj["PayBTState"]
      """  The state or province portion of the shipment payer main address.  """  
      self.PayBTZip:str = obj["PayBTZip"]
      """  The zip or postal code portion of the shipping payers main address.  """  
      self.PayBTCountry:str = obj["PayBTCountry"]
      """  The country of the main shipping payers address.  """  
      self.DropShip:bool = obj["DropShip"]
      """  Freight charges will not be returned if 'yes'  """  
      self.CommercialInvoice:bool = obj["CommercialInvoice"]
      """  Added for international shipping  """  
      self.ShipExprtDeclartn:bool = obj["ShipExprtDeclartn"]
      """  Added for international shipping. Shipper's Export Declaration  """  
      self.CertOfOrigin:bool = obj["CertOfOrigin"]
      """  For International shipping.  Certificate of Orgin.  """  
      self.LetterOfInstr:bool = obj["LetterOfInstr"]
      """  For International shipping.  Shipper's Letter of Instruction.  """  
      self.FFID:str = obj["FFID"]
      """  International Shipping. Frieght Forwarder ID  """  
      self.FFAddress1:str = obj["FFAddress1"]
      """  International Shipping. The first line of the Frieght Forwarder main address.  """  
      self.FFAddress2:str = obj["FFAddress2"]
      """  International Shipping. The second line of the Frieght Forwarder main address.  """  
      self.FFCity:str = obj["FFCity"]
      """  Shipping, The city portion of the Frieght Forwarder main address.  """  
      self.FFState:str = obj["FFState"]
      """  International Shipping. The state or province portion of the shipment Frieght Forwarder main address.  """  
      self.FFZip:str = obj["FFZip"]
      """  International Shipping. The zip or postal code portion of the shipping Frieght Forwarder main address.  """  
      self.FFCountry:str = obj["FFCountry"]
      """  International shipping. The country of the Frieght Forwarder .  """  
      self.FFContact:str = obj["FFContact"]
      """  International Shipping. Frieght Forwarder Contact  """  
      self.FFCompName:str = obj["FFCompName"]
      """  International Shipping. Frieght Forwarder company name  """  
      self.FFPhoneNum:str = obj["FFPhoneNum"]
      """  International Shipping. Frieght Forwarder Phone number  """  
      self.IntrntlShip:bool = obj["IntrntlShip"]
      """  Is this an International shipment  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.IndividualPackIDs:bool = obj["IndividualPackIDs"]
      """  Indicates whether or not all freight charges sent or received are for individual pack DIs or the master pack.  """  
      self.FFAddress3:str = obj["FFAddress3"]
      """  Freight Forwarder third address line.  """  
      self.DeliveryConf:int = obj["DeliveryConf"]
      """   Determines the level of delivery confirmation.
1 - No Signature Required
2 - Adult Signature Required
3 - Confirmation Required
4 - Verbal Confirmation Required  """  
      self.AddlHdlgFlag:bool = obj["AddlHdlgFlag"]
      """  Additional Handling Required flag  """  
      self.NonStdPkg:bool = obj["NonStdPkg"]
      """  Non Standard Package flag.  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.FFCountryNum:int = obj["FFCountryNum"]
      """  Freight Forwarder country portion of the address  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.PayBTAddress3:str = obj["PayBTAddress3"]
      """  Payer Bill To  third address line  """  
      self.PayBTCountryNum:int = obj["PayBTCountryNum"]
      """  Payer Bill To country portion of the address  """  
      self.PayBTPhone:str = obj["PayBTPhone"]
      """  Payer Bill To phone number  """  
      self.UPSQuantumView:bool = obj["UPSQuantumView"]
      """  UPS Quantity View  """  
      self.UPSQVShipFromName:str = obj["UPSQVShipFromName"]
      """  UPS Quantum View Ship from Nam  """  
      self.UPSQVMemo:str = obj["UPSQVMemo"]
      """  UPS Quantity View Memo  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the order is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the order which could affect taxes (OrderDtl, OrderHed, OrderMisc, etc). It defaults from XASyst.SOReadyToCalcDflt field when an order is created.  """  
      self.TotalCharges:int = obj["TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalMisc:int = obj["TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalDiscount:int = obj["TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalComm:int = obj["TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalAdvBill:int = obj["TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalLines:int = obj["TotalLines"]
      """  Total number of lines on the order  """  
      self.TotalReleases:int = obj["TotalReleases"]
      """  Total Number of releases on order  """  
      self.TotalRelDates:int = obj["TotalRelDates"]
      """  Total number of distinct release dates on order  """  
      self.DocTotalCharges:int = obj["DocTotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalMisc:int = obj["DocTotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalDiscount:int = obj["DocTotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.DocTotalComm:int = obj["DocTotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.TotalTax:int = obj["TotalTax"]
      """   Order Total Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalAdvBill:int = obj["DocTotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.TotalShipped:int = obj["TotalShipped"]
      """  Total Shipped amount  """  
      self.TotalInvoiced:int = obj["TotalInvoiced"]
      """  Total amount of order that has been invoiced  """  
      self.TotalCommLines:int = obj["TotalCommLines"]
      """  Total number of lines that were commissionable  """  
      self.SRCommAmt1:int = obj["SRCommAmt1"]
      """  Commission earned for first sales rep  """  
      self.SRCommAmt2:int = obj["SRCommAmt2"]
      """  Commission earned for second sales rep  """  
      self.SRCommAmt3:int = obj["SRCommAmt3"]
      """  Commission earned for third sales rep  """  
      self.SRCommAmt4:int = obj["SRCommAmt4"]
      """  Commission earned for fourth sales rep  """  
      self.SRCommAmt5:int = obj["SRCommAmt5"]
      """  Commission earned for fifth sales rep  """  
      self.SRCommableAmt1:int = obj["SRCommableAmt1"]
      """  Total Commissionable Amount for first salesrep  """  
      self.SRCommableAmt2:int = obj["SRCommableAmt2"]
      """  Total Commissionable Amount for second salesrep  """  
      self.SRCommableAmt3:int = obj["SRCommableAmt3"]
      """  Total Commissionable Amount for third salesrep  """  
      self.SRCommableAmt4:int = obj["SRCommableAmt4"]
      """  Total Commissionable Amount for fourth salesrep  """  
      self.SRCommableAmt5:int = obj["SRCommableAmt5"]
      """  Total Commissionable Amount for fifth salesrep  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt1DepositBal:int = obj["Rpt1DepositBal"]
      """  Display value contains the deposit balance in a reporting currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.Rpt2DepositBal:int = obj["Rpt2DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt3DepositBal:int = obj["Rpt3DepositBal"]
      """  Display value contains the deposit balance in a report currency when the currency module is used; otherwise it is equal to the DepositBal. customer. Contains the current outstanding (liability) deposits that have been made for the sales order. This value is increased via cash receipts or "deposit" type invoices. It is supplied as a default to invoice entry (InvcHead.DepositCredit) at which time it is decreased.  """  
      self.Rpt1TotalCharges:int = obj["Rpt1TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalCharges:int = obj["Rpt2TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalCharges:int = obj["Rpt3TotalCharges"]
      """   Total Line Amount
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalAdvBill:int = obj["Rpt1TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt2TotalAdvBill:int = obj["Rpt2TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt3TotalAdvBill:int = obj["Rpt3TotalAdvBill"]
      """  Total Advance Billable Balance  """  
      self.Rpt1TotalMisc:int = obj["Rpt1TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalMisc:int = obj["Rpt2TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalMisc:int = obj["Rpt3TotalMisc"]
      """   Total Miscellaneous charges
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalDiscount:int = obj["Rpt1TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalDiscount:int = obj["Rpt2TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalDiscount:int = obj["Rpt3TotalDiscount"]
      """   Total Line Discounts
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalComm:int = obj["Rpt1TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalComm:int = obj["Rpt2TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalComm:int = obj["Rpt3TotalComm"]
      """   Total Commissions for Order
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax +TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """   Total Order Invoice Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1CCAmount:int = obj["Rpt1CCAmount"]
      """  See CCAmount  """  
      self.Rpt2CCAmount:int = obj["Rpt2CCAmount"]
      """  See CCAmount  """  
      self.Rpt3CCAmount:int = obj["Rpt3CCAmount"]
      """  See CCAmount  """  
      self.Rpt1CCFreight:int = obj["Rpt1CCFreight"]
      """  See CCFreight  """  
      self.Rpt2CCFreight:int = obj["Rpt2CCFreight"]
      """  See CCFreight  """  
      self.Rpt3CCFreight:int = obj["Rpt3CCFreight"]
      """  See CCFreight  """  
      self.Rpt1CCTax:int = obj["Rpt1CCTax"]
      """  See CCTax  """  
      self.Rpt2CCTax:int = obj["Rpt2CCTax"]
      """  See CCTax  """  
      self.Rpt3CCTax:int = obj["Rpt3CCTax"]
      """  See CCTax  """  
      self.Rpt1CCTotal:int = obj["Rpt1CCTotal"]
      """  See CCTotal  """  
      self.Rpt2CCTotal:int = obj["Rpt2CCTotal"]
      """  See CCTotal  """  
      self.Rpt3CCTotal:int = obj["Rpt3CCTotal"]
      """  See CCTotal  """  
      self.OrderAmt:int = obj["OrderAmt"]
      """  Total order Amount. This field is an accumulation of the extended net amounts of the detail line items  """  
      self.DocOrderAmt:int = obj["DocOrderAmt"]
      """  Total order Amount in customer currency. This field is an accumulation of the extended net amounts of the detail line items and rounded according to the Doc currency Round rule  """  
      self.Rpt1OrderAmt:int = obj["Rpt1OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrderAmt:int = obj["Rpt2OrderAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrderAmt:int = obj["Rpt3OrderAmt"]
      """  Reporting currency value of this field  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipment country  """  
      self.TotalWHTax:int = obj["TotalWHTax"]
      """   Order Total Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalWHTax:int = obj["DocTotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalWHTax:int = obj["Rpt1TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalWHTax:int = obj["Rpt2TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalWHTax:int = obj["Rpt3TotalWHTax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """   Order Total Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """   Total Order Self Assessed Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """   Total Order Withholding Taxes
Order Total = TotalCharges + TotalMisc - TotalDiscount + TotalTaxes + TotalWHTax + TotalSATax
Net Total = Order Total - TotalComm  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS is saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the  OTS info.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.OrderStatus:str = obj["OrderStatus"]
      """  Status of Order  """  
      self.HoldSetByDemand:bool = obj["HoldSetByDemand"]
      """  Hold Set by Demand  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.InTotalCharges:int = obj["InTotalCharges"]
      """  Reserved for future use  """  
      self.InTotalMisc:int = obj["InTotalMisc"]
      """  Reserved for future use  """  
      self.InTotalDiscount:int = obj["InTotalDiscount"]
      """  Reserved for future use  """  
      self.DocInTotalCharges:int = obj["DocInTotalCharges"]
      """  Reserved for future use  """  
      self.DocInTotalMisc:int = obj["DocInTotalMisc"]
      """  Reserved for future use  """  
      self.DocInTotalDiscount:int = obj["DocInTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt1InTotalCharges:int = obj["Rpt1InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt2InTotalCharges:int = obj["Rpt2InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt3InTotalCharges:int = obj["Rpt3InTotalCharges"]
      """  Reserved for future use  """  
      self.Rpt1InTotalMisc:int = obj["Rpt1InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt2InTotalMisc:int = obj["Rpt2InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt3InTotalMisc:int = obj["Rpt3InTotalMisc"]
      """  Reserved for future use  """  
      self.Rpt1InTotalDiscount:int = obj["Rpt1InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt2InTotalDiscount:int = obj["Rpt2InTotalDiscount"]
      """  Reserved for future use  """  
      self.Rpt3InTotalDiscount:int = obj["Rpt3InTotalDiscount"]
      """  Reserved for future use  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash Receipts. Default is from Customer(Bill To).  """  
      self.ERSOrder:bool = obj["ERSOrder"]
      """  It will be used to identify SO that will generate an invoice at the shipment.  If the order is created manually the default for this order will be taken from the customer master file. If the order is created via DM, the default will be taken from the value in the DM records.  """  
      self.LOCHold:bool = obj["LOCHold"]
      """  Indicates that order is on hold due to amount exceeding value on Letter of Credit.  """  
      self.PSCurrCode:str = obj["PSCurrCode"]
      """  Currency code used in further packing slips.  """  
      self.InvCurrCode:str = obj["InvCurrCode"]
      """  Currency code used in further AR invoices.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  Legal Number for the record.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document for the record.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.DemandProcessDate:str = obj["DemandProcessDate"]
      """  Date in which the related demand was last processed.  """  
      self.DemandProcessTime:int = obj["DemandProcessTime"]
      """  System Time when demand was last processed.  """  
      self.LastScheduleNumber:str = obj["LastScheduleNumber"]
      """  Last Schedule Number in which the demand was processed.  """  
      self.LastTCtrlNum:str = obj["LastTCtrlNum"]
      """  EDI Transaction Control Number  """  
      self.LastBatchNum:str = obj["LastBatchNum"]
      """  EDI Batch Control Number  """  
      self.ECCOrderNum:str = obj["ECCOrderNum"]
      """  ECCOrderNum  """  
      self.ECCPONum:str = obj["ECCPONum"]
      """  ECCPONum  """  
      self.WIOrder:str = obj["WIOrder"]
      """  WIOrder  """  
      self.WIApplication:str = obj["WIApplication"]
      """  WIApplication  """  
      self.WIUsername:str = obj["WIUsername"]
      """  WIUsername  """  
      self.WIUserID:str = obj["WIUserID"]
      """  WIUserID  """  
      self.WICreditCardorder:bool = obj["WICreditCardorder"]
      """  WICreditCardorder  """  
      self.OrderCSR:str = obj["OrderCSR"]
      """  OrderCSR  """  
      self.UserChar1:str = obj["UserChar1"]
      """  UserChar1  """  
      self.UserChar2:str = obj["UserChar2"]
      """  UserChar2  """  
      self.UserChar3:str = obj["UserChar3"]
      """  UserChar3  """  
      self.UserChar4:str = obj["UserChar4"]
      """  UserChar4  """  
      self.UserDate1:str = obj["UserDate1"]
      """  UserDate1  """  
      self.UserDate2:str = obj["UserDate2"]
      """  UserDate2  """  
      self.UserDate3:str = obj["UserDate3"]
      """  UserDate3  """  
      self.UserDate4:str = obj["UserDate4"]
      """  UserDate4  """  
      self.UserDecimal1:int = obj["UserDecimal1"]
      """  UserDecimal1  """  
      self.UserDecimal2:int = obj["UserDecimal2"]
      """  UserDecimal2  """  
      self.UserInteger1:int = obj["UserInteger1"]
      """  UserInteger1  """  
      self.UserInteger2:int = obj["UserInteger2"]
      """  UserInteger2  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.IsCSRSet:bool = obj["IsCSRSet"]
      """  IsCSRSet  """  
      self.ECCPaymentMethod:str = obj["ECCPaymentMethod"]
      """  ECCPaymentMethod  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      """  OTSShipToNum  """  
      self.ProFormaInvComment:str = obj["ProFormaInvComment"]
      """  ProFormaInvComment  """  
      self.ccToken:str = obj["ccToken"]
      """  ccToken  """  
      self.InvcOrderCmp:bool = obj["InvcOrderCmp"]
      """  InvcOrderCmp  """  
      self.ReprintSOAck:bool = obj["ReprintSOAck"]
      """  ReprintSOAck  """  
      self.CounterSOAck:int = obj["CounterSOAck"]
      """  CounterSOAck  """  
      self.DispatchReason:str = obj["DispatchReason"]
      """  DispatchReason  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag will be used to indicate if the sales order is ready to be fulfilled.  """  
      self.ShipByTime:int = obj["ShipByTime"]
      """  Ship the good by this time  """  
      self.TWFiscalYear:int = obj["TWFiscalYear"]
      """  Taiwan GUI Calendar Fiscal Year  """  
      self.TWFiscalYearSuffix:str = obj["TWFiscalYearSuffix"]
      """  Taiwan GUI Calendar Fiscal Year Suffix  """  
      self.TWFiscalPeriod:int = obj["TWFiscalPeriod"]
      """  Taiwan GUI Calendar Fiscal Period  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  GUI Group of Legal Numbers  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  Seller GUI Code  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  Buyer GUI Code  """  
      self.OrderOpenCredit:int = obj["OrderOpenCredit"]
      """  OrderOpenCredit  """  
      self.ClosedNotShipped:int = obj["ClosedNotShipped"]
      """  ClosedNotShipped  """  
      self.InvCurrDepositBal:int = obj["InvCurrDepositBal"]
      """  InvCurrDepositBal  """  
      self.PLArticle106c:bool = obj["PLArticle106c"]
      """  Article. 106c  """  
      self.PLInvIssuedByTaxpayer:bool = obj["PLInvIssuedByTaxpayer"]
      """  Invoices are issued by a taxpayer's representative  """  
      self.PLInvIssuedBySecondTaxpayer:bool = obj["PLInvIssuedBySecondTaxpayer"]
      """  Invoices issued by the second taxpayer  """  
      self.PLTouristService:bool = obj["PLTouristService"]
      """  Tourist Services  """  
      self.PLSecondHandOrArts:bool = obj["PLSecondHandOrArts"]
      """  Second hand goods, works of art, collectibles or antiques  """  
      self.PLLegalArticleAct:str = obj["PLLegalArticleAct"]
      """  Appropriate Legal Article of the Act  """  
      self.PLLegalArticleWEDirective:str = obj["PLLegalArticleWEDirective"]
      """  Appropriate Legal Article of 2006/112/WE Directive  """  
      self.PLLegalArticleOther:str = obj["PLLegalArticleOther"]
      """  Other Legal Article  """  
      self.PLEnforcementAuthName:str = obj["PLEnforcementAuthName"]
      """  Name of the Enforcement Authority or the Name of the Judicial Officer  """  
      self.PLEnforcementAuthAddr:str = obj["PLEnforcementAuthAddr"]
      """  Address of the Enforcement Authority or Judicial Officer  """  
      self.PLTaxRepresentativeName:str = obj["PLTaxRepresentativeName"]
      """  Tax Representative Name  """  
      self.PLTaxRepresentativeAddr:str = obj["PLTaxRepresentativeAddr"]
      """  Tax Representative Address  """  
      self.PLTaxRepresentativeTaxID:str = obj["PLTaxRepresentativeTaxID"]
      """  Tax ID of the Tax Representative  """  
      self.PLMarginScheme:int = obj["PLMarginScheme"]
      """  Margin Scheme  """  
      self.PLGoodsOrServiceVATExempt:bool = obj["PLGoodsOrServiceVATExempt"]
      """  Goods or Service VAT exempt  """  
      self.CCCity:str = obj["CCCity"]
      """  Credit Card Holder City  """  
      self.CCState:str = obj["CCState"]
      """  Credit Card Holder State  """  
      self.ExtAOEUserID:str = obj["ExtAOEUserID"]
      """  ExtAOEUserID  """  
      self.ExtAOE:str = obj["ExtAOE"]
      """  ExtAOE  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.FSMSendTo:bool = obj["FSMSendTo"]
      """  FSMSendTo  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers (CustID`CustomerName~CustID`CustomerName)  """  
      self.AVSAddr:str = obj["AVSAddr"]
      """  AVSADDR returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) address test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AVSZip:str = obj["AVSZip"]
      """  AVSZIP returned by a 3rd party credit card processing company  for a credit card transaction. This value represents the results of the Address Verification System (AVS) zip code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.BillToCustomerName:str = obj["BillToCustomerName"]
      """  Bill to customer name.  """  
      self.BTAddressList:str = obj["BTAddressList"]
      """  Bill To Address List.  """  
      self.BTContactEMailAddress:str = obj["BTContactEMailAddress"]
      self.BTContactFaxNum:str = obj["BTContactFaxNum"]
      """  Bill to contact fax number.  """  
      self.BTContactName:str = obj["BTContactName"]
      """  Bill to contact name.  """  
      self.BTContactPhoneNum:str = obj["BTContactPhoneNum"]
      """  Bill to contact phone number.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Bill To Customer ID  """  
      self.CanChangeTaxLiab:bool = obj["CanChangeTaxLiab"]
      """  The flag to indicate if the user can change Tax Liability on the header level after adding a detail line.  """  
      self.CardStore:str = obj["CardStore"]
      """  Stored Credit Card Number  """  
      self.CCCSCID:str = obj["CCCSCID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention  """  
      self.CCCSCIDToken:str = obj["CCCSCIDToken"]
      """  Tokenized value of CSCID  """  
      self.CCIsTraining:bool = obj["CCIsTraining"]
      """   Indicates if the credit card setup will be using a testing Paygate instance for transactions.
Force requests to use Paygate test url: paygate-test1.eaglesoa.com  """  
      self.CCResponse:str = obj["CCResponse"]
      """  RESPMSG returned by  a 3rd party credit card processing company for a credit card transaction. This is a brief description of the status of the credit card transaction.  """  
      self.CCRounding:int = obj["CCRounding"]
      self.CCTranID:str = obj["CCTranID"]
      """  PNREF returned by a 3rd party credit card processing company for a credit card transaction. This is a unique number that identifies the transaction and is often referenced we performing related transactions.  """  
      self.CCTranType:str = obj["CCTranType"]
      """  Credit Card Transaction Type  """  
      self.CSCResult:str = obj["CSCResult"]
      """  CVV2MATCH returned by a 3rd party credit card processing company for a credit card transaction. This value represents the results of the Card Security Code test. The result in this field does not affect the outcome of the transaction and is supplied for advisory purposes only.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustomerPrintAck:bool = obj["CustomerPrintAck"]
      self.CustomerRequiresPO:bool = obj["CustomerRequiresPO"]
      """  If true the customer requires a unique PO on Sales Orders  """  
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      """  When set to true, indicates that this customer does not have credit available from your company.  """  
      self.CustTradePartnerName:str = obj["CustTradePartnerName"]
      self.DemandContract:str = obj["DemandContract"]
      """  DemandContract  """  
      self.DocCCRounding:int = obj["DocCCRounding"]
      self.DocTotalNet:int = obj["DocTotalNet"]
      self.DocTotalOrder:int = obj["DocTotalOrder"]
      self.dspBTCustID:str = obj["dspBTCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.ECCEmail:str = obj["ECCEmail"]
      """  ECC Contact Email - Contains the email address of the ECC login that placed the sales order. This only applies for B2C Orders.  """  
      self.ECCPaymentDesc:str = obj["ECCPaymentDesc"]
      """  ECC Payment Description  """  
      self.EnableCreditCard:bool = obj["EnableCreditCard"]
      """  True when Credit Card Procesing module is enabled  """  
      self.EnableJobWizard:bool = obj["EnableJobWizard"]
      """  True when Job Wizard must be enabled  """  
      self.EnableSoldToID:bool = obj["EnableSoldToID"]
      """  True when SoldTo ID must be enabled  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ERSOverride:bool = obj["ERSOverride"]
      """  It will be displayed when the value of the ERS flag at the sales order is different from the value in the customer master file.  """  
      self.HasMiscCharges:bool = obj["HasMiscCharges"]
      """  Used by UI to disable CurrencyCode  """  
      self.HasOrderLines:bool = obj["HasOrderLines"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.LinkMsg:str = obj["LinkMsg"]
      self.NoTaxRgnChange:bool = obj["NoTaxRgnChange"]
      """  Internal field which indicates if Order Tax Liability is not going to be changed even though Ship To is changed.  Related to Tax inclusive pricing. Depends on user response.  """  
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  OTS Tax Liability Code (Header)  """  
      self.ParentCustNum:int = obj["ParentCustNum"]
      """  Contains the Parent Customer number that the sales order is for.  This must be valid in the Customer table.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      self.ReferencePNRef:str = obj["ReferencePNRef"]
      """  PNRef number referred to in the transaction.  If Deposit transaction must referenece prior Authorization using the PNRef  """  
      self.ResetBTCustAddr:bool = obj["ResetBTCustAddr"]
      """  Internal field toindicate if the system should reset Bill to Customer address.  Based on the  user reply for LOC.  """  
      self.ResetRelTaxRgn:bool = obj["ResetRelTaxRgn"]
      """  Internal field which indicates if existing Release Tax Region should be se-set to the new Order Header Tax Liability.  Depends on the user reply.  """  
      self.Rpt1CCRounding:int = obj["Rpt1CCRounding"]
      self.Rpt1TotalNet:int = obj["Rpt1TotalNet"]
      self.Rpt2CCRounding:int = obj["Rpt2CCRounding"]
      self.Rpt2TotalNet:int = obj["Rpt2TotalNet"]
      self.Rpt3CCRounding:int = obj["Rpt3CCRounding"]
      self.Rpt3TotalNet:int = obj["Rpt3TotalNet"]
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  Element 1 of SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  Element 2 of SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  Element 3 of SalesRepList  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  Element 4 of SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  Element 5 of SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      self.SalesRepName2:str = obj["SalesRepName2"]
      self.SalesRepName3:str = obj["SalesRepName3"]
      self.SalesRepName4:str = obj["SalesRepName4"]
      self.SalesRepName5:str = obj["SalesRepName5"]
      self.ShipToAddressList:str = obj["ShipToAddressList"]
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShipToCustId:str = obj["ShipToCustId"]
      """  Customer Id of the third-party Ship To  """  
      self.ShowApplyOrderDiscountsControl:bool = obj["ShowApplyOrderDiscountsControl"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      self.SoldToContactEMailAddress:str = obj["SoldToContactEMailAddress"]
      self.SoldToContactFaxNum:str = obj["SoldToContactFaxNum"]
      self.SoldToContactName:str = obj["SoldToContactName"]
      self.SoldToContactPhoneNum:str = obj["SoldToContactPhoneNum"]
      self.TermsType:str = obj["TermsType"]
      """  This field defines the type of the term  """  
      self.TotalNet:int = obj["TotalNet"]
      self.TotalOrder:int = obj["TotalOrder"]
      self.TranDocTypeDescr:str = obj["TranDocTypeDescr"]
      self.TrueDiscountPercent:int = obj["TrueDiscountPercent"]
      """  the true discount percent from the order total  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  Taiwan GUI Legal Number Generation Type  """  
      self.UpdateDtlAndRelRecords:bool = obj["UpdateDtlAndRelRecords"]
      self.InvoicesExist:bool = obj["InvoicesExist"]
      """  Indicates if one or more invoices exist for this order  """  
      self.BTAddressFormatted:str = obj["BTAddressFormatted"]
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  The formatted ship to address  """  
      self.SoldToAddressFormatted:str = obj["SoldToAddressFormatted"]
      """  The formatted Sold To Address  """  
      self.TranDate:str = obj["TranDate"]
      self.TranNum:int = obj["TranNum"]
      self.TranTime:int = obj["TranTime"]
      self.OrderRelNeedByDateNotNull:bool = obj["OrderRelNeedByDateNotNull"]
      """  Indicates there is an OrderRel record that has a non-null NeedByDate  """  
      self.InactiveCustomer:bool = obj["InactiveCustomer"]
      """  Indicates a customer referenced on the order is inactive.  """  
      self.EnableAllocationQueueActions:bool = obj["EnableAllocationQueueActions"]
      """  Enable Fulfillment Queue Actions  """  
      self.CREProcessor:bool = obj["CREProcessor"]
      """  CREProcessor is true when Credit Card Configuration is CRE Server.  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.BTCustNumCustID:str = obj["BTCustNumCustID"]
      self.BTCustNumName:str = obj["BTCustNumName"]
      self.BTCustNumBTName:str = obj["BTCustNumBTName"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.HDCaseDescription:str = obj["HDCaseDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.InvCurrCurrDesc:str = obj["InvCurrCurrDesc"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.PlantName:str = obj["PlantName"]
      self.PSCurrCurrDesc:str = obj["PSCurrCurrDesc"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.ReservePriDescription:str = obj["ReservePriDescription"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaCodeInactive:bool = obj["ShipViaCodeInactive"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.Project_c:str = obj["Project_c"]
      self.OriginalOrderNo_c:int = obj["OriginalOrderNo_c"]
      self.MASFlag_c:bool = obj["MASFlag_c"]
      self.Estimate_c:bool = obj["Estimate_c"]
      self.ShipOrderComplete_c:bool = obj["ShipOrderComplete_c"]
      self.ProjectID_c:str = obj["ProjectID_c"]
      self.PhaseID_c:str = obj["PhaseID_c"]
      self.SalesCatID__c:str = obj["SalesCatID__c"]
      self.TaxCatID_c:str = obj["TaxCatID_c"]
      self.MfgOrder_c:bool = obj["MfgOrder_c"]
      pass

class Erp_Tablesets_OrderHedUPSRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  When creating a new order the user is prompted for an order number. If the field is left blank, the next available # is assigned by the system. The system generates a number by finding the order # of the last record on file and then adding 1 to it.  """  
      self.UPSQVSeq:int = obj["UPSQVSeq"]
      """  UPS Quantum View Sequence  """  
      self.EmailAddress:str = obj["EmailAddress"]
      """  Email address to notify for a UPS shipment  """  
      self.ShipmentNotify:bool = obj["ShipmentNotify"]
      """  Logical indicating if the EmailAddress is to be updated at shipping.  """  
      self.FailureNotify:bool = obj["FailureNotify"]
      """  Logical indicating if the Email Address is to be notified of a failed shipment.  """  
      self.DeliveryNotify:bool = obj["DeliveryNotify"]
      """  Logical indicating if the Email Address is to be notified of delivery.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EnableQuantumView:bool = obj["EnableQuantumView"]
      """  Logical indicating if the UPS quantum view email data is to be enabled.  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderHistRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order Line  """  
      self.OrderDate:str = obj["OrderDate"]
      """  Order Date  """  
      self.PartNum:str = obj["PartNum"]
      """  Part Number  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Part Description  """  
      self.OrderQty:int = obj["OrderQty"]
      """  Order Quantity  """  
      self.UOM:str = obj["UOM"]
      """  Selling Unit of Measure  """  
      self.OriginalPrice:int = obj["OriginalPrice"]
      """  Original Price  """  
      self.NewPrice:int = obj["NewPrice"]
      """  New Price  """  
      self.NewQty:int = obj["NewQty"]
      """  New Quantity  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number that this miscellaneous record is related to. If related to the Order then this field is zero. This number is not directly entered by the user; rather it is carried through from the header or detail line that user was on when miscellaneous maintenance was requested.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the MiscChrg master file.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. This will be printed on the acknowledgment and transferred over to invoice processing. The default is provided by MiscChrg.Description, but it's overridable by the user. This can't be blank.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default.  """  
      self.FreqCode:str = obj["FreqCode"]
      """  Sets the frequency of when this miscellaneous charge should be applied. The options are F - First shipment, L = Last shipment, E = every shipment. This defaults from the MiscChrg.FreqCode.  """  
      self.Quoting:str = obj["Quoting"]
      """  An internally used flag which indicates that this record was created from a Quote via the "Get Quote" function. "Q" = related to the QuoteQty record, "L" = related to the overall QuoteDtl record. This flag is used so that the OrderMsc file can be refreshed from the QuoteMsc when Quantity or Quote/Line # changes occur. The logic is that if a change in order quantity of a order line that is linked to a quote causes a different price break to be selected then all the existing all OrderMsc records where Quoting = "Q" are deleted and then re-pulled in based on the new qty. If the Quote # or QuoteLine are changed then all OrderMsc records where Quoting is either a "Q" or "L" are deleted then re-pulled in from the newly referenced quote.  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order miscellaneous charge is linked to an inter-company PO misc charge.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  Inter Company PO Sequence Number  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero. Use MiscChrg.MiscAmt as a default. - Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit(display value). Can't be zero. Use MiscChrg.MiscAmt as a default. - includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.ChangeTrackApproved:bool = obj["ChangeTrackApproved"]
      """  ChangeTrackApproved  """  
      self.ChangeTrackAmount:int = obj["ChangeTrackAmount"]
      """  ChangeTrackAmount  """  
      self.ChangeTrackMemoDesc:str = obj["ChangeTrackMemoDesc"]
      """  ChangeTrackMemoDesc  """  
      self.ChangeTrackMemoText:str = obj["ChangeTrackMemoText"]
      """  ChangeTrackMemoText  """  
      self.ChangeTrackStatus:str = obj["ChangeTrackStatus"]
      """  ChangeTrackStatus  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DocDspMiscAmt:int = obj["DocDspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Misc charge amount on display (may or may not include taxes)  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.OpenLine:bool = obj["OpenLine"]
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      """  Misc charge amount on display in report currency  (may or may not include taxes)  """  
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      """  Misc charge amount on display in document currency (may or may not include taxes)  """  
      self.RespMessage:str = obj["RespMessage"]
      """  Pass Credit Limit check message to the UI  """  
      self.BitFlag:int = obj["BitFlag"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderRelRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  """  
      self.ReqDate:str = obj["ReqDate"]
      """  Date which the item needs to be shipped by in order to meet the customers due date. Initially defaulted as OrderHed.ReqDate.  """  
      self.OurReqQty:int = obj["OurReqQty"]
      """  Quantity ,using Our U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  The ShipTo ID to be used for this scheduled release record. This MUST BE VALID IN THE SHIPTO file. Use the OrderHead.ShiptoNum as the default when creating new records.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  Ship Via ID that is used for this shipment release. THIS CAN BE BLANK or MUST BE VALID IN THE SHIPVIA master file. Use the OrderHead.ShipViaCode as the default.  """  
      self.OpenRelease:bool = obj["OpenRelease"]
      """  Indicates if this release is open.  This is normally set to closed via the shipping program. But can be changed indirectly  by the user during order entry when they "Void" the release..  """  
      self.FirmRelease:bool = obj["FirmRelease"]
      """  Indicates if this release is  "FIRM". The opposite is an uncommitted release, that is when the customer gives releases that are just 'Best Guesses' of what they will require in the future, such as in blanket order situations. This type of  releases is no different to the system, except that the FirmRelease field will be printed on reports such as TimePhase requirements.  """  
      self.Make:bool = obj["Make"]
      """   Indicates if this requirement or any part of it will be manufactured. Default the setting to "No" if valid Part and the Part.Type is "S" or "P".

Default the setting to "Yes" if the part is not found in Part master or the Part.Type = "J".  This flag also gets set if this release gets linked to a Job via Job Entry. There is an Index on this field so that we can display releases that need have a job assigned to them. This display is part of Job Entry.  """  
      self.OurJobQty:int = obj["OurJobQty"]
      """  The planned production quantity, using Our U/M, for the Job. This is not maintainable in order entry. It gets updated via Job Entry.  """  
      self.OurJobShippedQty:int = obj["OurJobShippedQty"]
      """  Actual quantity, using our U/M, shipped from the Job.  Updated via the shipping process.  """  
      self.VoidRelease:bool = obj["VoidRelease"]
      """   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.

When an OrderRel record is 'voided' any outstanding inventory allocations are relieved, OrderRel.OpenRelease is set to "no" and records are created/updated in the OrdJobMsg file for all the related  open OrderRel records if the OrderDtl that was tied to a Job to indicate that the line item was voided.  """  
      self.OurStockQty:int = obj["OurStockQty"]
      """  Quantity, using Our U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  Indicates the inventory warehouse. This field is only relevant if this line references a valid Part record. Use the PrimWhse in the Part table as a default.  """  
      self.OurStockShippedQty:int = obj["OurStockShippedQty"]
      """  Actual quantity, using our U/M, shipped from Stock.  Updated via the shipping process.  """  
      self.PartNum:str = obj["PartNum"]
      """  The part number the release quantity is currently allocated to (if it exists in the part master file).  This is a duplicate of the OrderDtl part number and is not user maintainable.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Part Revision number.  Mirror image of OrderDtl.RevisionNum.  Not directly maintainable.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this customer/shipto  is exempt from sales tax for this line item. If field is non-blank it is considered exempt. Defaults from the Customer/Shipto file.  This code is totally user definable and no validation is required. This field will be printed on the Tax report if this item is reportable .  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Enter via a DDSL fill-in for contact name. Use OrderHed.ShpConNum when the OrderRel.ShipToNum = OrderHed.ShipToNum else use ShipTo.PrimScon as a default.  """  
      self.NeedByDate:str = obj["NeedByDate"]
      """  Date customer needs the item to be delivered. Defaulted as OrderHed.NeedByDate.  """  
      self.Reference:str = obj["Reference"]
      """  EDI Reference  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier.  """  
      self.SellingReqQty:int = obj["SellingReqQty"]
      """  Quantity ,using Selling U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  """  
      self.SellingJobQty:int = obj["SellingJobQty"]
      """  The planned production quantity, using selling U/M, for the Job. This is not maintainable in order entry. It gets updated via Job Entry.  """  
      self.SellingJobShippedQty:int = obj["SellingJobShippedQty"]
      """  Actual quantity, using selling U/M, shipped from the Job.  Updated via the shipping process.  """  
      self.SellingStockQty:int = obj["SellingStockQty"]
      """  Quantity, using selling U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  """  
      self.SellingStockShippedQty:int = obj["SellingStockShippedQty"]
      """  Actual quantity, using selling U/M, shipped from Stock.  Updated via the shipping process.  """  
      self.SelectForPicking:bool = obj["SelectForPicking"]
      """  Indicates if the release is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  """  
      self.StagingWarehouseCode:str = obj["StagingWarehouseCode"]
      """  The shipping "Staging" warehouse for the release.  Defaults from the system default shipping area (Site.DefShippingWhse). This is maintainable in the Sales Allocation program.  """  
      self.StagingBinNum:str = obj["StagingBinNum"]
      """  The shipping "Staging" bin for the release.  Defaults from the system default shipping area (Site.DefShippingBin). This is maintainable in the Sales Allocation program.  """  
      self.PickError:str = obj["PickError"]
      """   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  """  
      self.CumeQty:int = obj["CumeQty"]
      """  Quantity from last EDI update.  """  
      self.CumeDate:str = obj["CumeDate"]
      """  Date of last update  """  
      self.Linked:bool = obj["Linked"]
      """  Indicates if this order release is linked to an inter-company PO release.  """  
      self.ICPONum:int = obj["ICPONum"]
      """  Inter-Company Purchase order number  that the detail line item is linked to.  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  """  
      self.ICPORelNum:int = obj["ICPORelNum"]
      """  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  """  
      self.ExtCompany:str = obj["ExtCompany"]
      """  External Trading Company Identifier.  """  
      self.ScheduleNumber:str = obj["ScheduleNumber"]
      """  A link to the demand schedule that created/updated this OrderRel.  """  
      self.MarkForNum:str = obj["MarkForNum"]
      """  The Mark For to be used for this order release record. This MUST BE VALID IN THE SHIPTO file.  """  
      self.DropShipName:str = obj["DropShipName"]
      """  Full name for the drop shipment.  """  
      self.RAN:str = obj["RAN"]
      """  RAN Number.  Used for informational purposes.  Supplied by EDI.  """  
      self.DemandReference:str = obj["DemandReference"]
      """  Demand Reference.  Used for informational purposes and to aide in matching demand schedules with existing OrderRel records.  Supplied by EDI.  """  
      self.DemandSchedRejected:bool = obj["DemandSchedRejected"]
      """  Indicates if the demand schedule that created/updated this order release has been rejected.  """  
      self.DatePickTicketPrinted:str = obj["DatePickTicketPrinted"]
      """  The last date that the Material Queue Report was run for this release.  This field will be null until the Material Queue Report is run.  """  
      self.ResDelivery:bool = obj["ResDelivery"]
      """  Is this a residential delivery  """  
      self.SatDelivery:bool = obj["SatDelivery"]
      """  Is a Saturday delivery acceptable  """  
      self.SatPickup:bool = obj["SatPickup"]
      """  Is a Saturday pickup available  """  
      self.VerbalConf:bool = obj["VerbalConf"]
      """  Verbal Confirmation required  """  
      self.Hazmat:bool = obj["Hazmat"]
      """  Hazmat or Dangerous Goods delivery  """  
      self.DocOnly:bool = obj["DocOnly"]
      """  Documents Only delivery  """  
      self.RefNotes:str = obj["RefNotes"]
      """  Reference Notes for the delivery  """  
      self.ApplyChrg:bool = obj["ApplyChrg"]
      """  Apply Handling Charge to shipment  """  
      self.ChrgAmount:int = obj["ChrgAmount"]
      """  Handling Charge Amount  """  
      self.COD:bool = obj["COD"]
      """  Prefer COD delivery  """  
      self.CODFreight:bool = obj["CODFreight"]
      """  Add Freight COD Amount owed  """  
      self.CODCheck:bool = obj["CODCheck"]
      """  Cashier's Check or Money order is required on COD Delivery  """  
      self.CODAmount:int = obj["CODAmount"]
      """  Amount due on Cashier's check or money order  """  
      self.GroundType:str = obj["GroundType"]
      """  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  """  
      self.NotifyFlag:bool = obj["NotifyFlag"]
      """  Indicates whether to send an email notification of delivery  """  
      self.NotifyEMail:str = obj["NotifyEMail"]
      """  The list of email address to notify about a delivery  """  
      self.DeclaredIns:bool = obj["DeclaredIns"]
      """  Flag to indicate that an insurance value was declared on delivery  """  
      self.DeclaredAmt:int = obj["DeclaredAmt"]
      """  Declared Insurance Amount  """  
      self.ServSatDelivery:bool = obj["ServSatDelivery"]
      """  Is a Service Saturday delivery acceptable  """  
      self.ServSatPickup:bool = obj["ServSatPickup"]
      """  Is a Service Saturday pickup available  """  
      self.ServSignature:bool = obj["ServSignature"]
      """  Service delivery requires signature  """  
      self.ServAlert:bool = obj["ServAlert"]
      """  Service Priority Alert flag  """  
      self.ServPOD:bool = obj["ServPOD"]
      """  Service Auto POD flag  """  
      self.ServAOD:bool = obj["ServAOD"]
      """  AOD  """  
      self.ServHomeDel:bool = obj["ServHomeDel"]
      """  Service Home Delivery allowed  """  
      self.DeliveryType:str = obj["DeliveryType"]
      """  Service Home Delivery Type Code  """  
      self.ServDeliveryDate:str = obj["ServDeliveryDate"]
      """  Service Home Delivery date  """  
      self.ServPhone:str = obj["ServPhone"]
      """  Home delivery phone number  """  
      self.ServInstruct:str = obj["ServInstruct"]
      """  Service Delivery Instructions  """  
      self.ServRelease:bool = obj["ServRelease"]
      """  Service Signature release is on file  """  
      self.ServAuthNum:str = obj["ServAuthNum"]
      """  Service Signature Release authorization number  """  
      self.ServRef1:str = obj["ServRef1"]
      """  Service Reference 1  """  
      self.ServRef2:str = obj["ServRef2"]
      """  Service Reference 2  """  
      self.ServRef3:str = obj["ServRef3"]
      """  Service Reference 3  """  
      self.ServRef4:str = obj["ServRef4"]
      """  Service Reference 4  """  
      self.ServRef5:str = obj["ServRef5"]
      """  Service Reference 5  """  
      self.OverrideCarrier:bool = obj["OverrideCarrier"]
      """  Override Carrier Defaults.  If not checked then the Site values will be used  """  
      self.OverrideService:bool = obj["OverrideService"]
      """  Override Service Options.  If not checked then the Site values will be used  """  
      self.DockingStation:str = obj["DockingStation"]
      """  The dockingstation of the shipto address.  For future use.  """  
      self.Location:str = obj["Location"]
      """  The location within the customer shipto address.  For future use.  """  
      self.TransportID:str = obj["TransportID"]
      """  The code of the transport routing/time. For future use.  """  
      self.ShipbyTime:int = obj["ShipbyTime"]
      """  Ship the good by this time.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the OrderRelTax records tied to this release are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the release before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """  Indicates that the One Time ShipTO information defined for this release should be used.  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipment country  """  
      self.SubShipTo:str = obj["SubShipTo"]
      """   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a store description.
Will be printed on the packing slip  """  
      self.ShipRouting:str = obj["ShipRouting"]
      """   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a routing description.
Will be printed on the packing slip  """  
      self.BuyToOrder:bool = obj["BuyToOrder"]
      """  This field identifies Buy To Order releases.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The value for this field will be defaulted from the Supplier defined in the Part Site sub tab at the Part form. Used only for Buy To Order releases.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Supplier Purchase Point. Used only for Buy To Order releases.  """  
      self.DropShip:bool = obj["DropShip"]
      """  This field identifies Drop Ship releases. Used only for Buy To Order releases.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.POLine:int = obj["POLine"]
      """  The line number of the purchase order related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  The release number of the purchase order line related to this Buy To Order release. Used only for Buy To Order releases.  """  
      self.OpenOrder:bool = obj["OpenOrder"]
      """  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  """  
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      """  Indicates if/how the OTS can be saved. Valid values blank = None, C = Customer, P = Prospect, S = Suspect T = Ship To  """  
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      """  CustID to be used if the OTS is used to create a customer record.  """  
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      """  True if Customer or ShipTo record was created using the OTS info.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.IUM:str = obj["IUM"]
      """   Unit of Measure that qualifies the "our" quantity fields.
If a valid part then it is the Base Stocking UOM (Part.IUM).
A mirror image of OrderDtl.IUM. Not directly maintainable  """  
      self.SalesUM:str = obj["SalesUM"]
      """   Selling Unit of measure. Qualifies the "Selling" quantity fields.
A mirror image of OrderDtl.SalesUM. Not directly maintainable.  """  
      self.RelStatus:str = obj["RelStatus"]
      """  Status of Order Release  """  
      self.ComplianceMsg:str = obj["ComplianceMsg"]
      """  Displays the cause why the item is not compliant.  """  
      self.PrevSellQty:int = obj["PrevSellQty"]
      """  Previous Selling Quantity  """  
      self.PrevPartNum:str = obj["PrevPartNum"]
      """  Previous Part Number  """  
      self.PrevXPartNum:str = obj["PrevXPartNum"]
      """  Previous Customer Part Number  """  
      self.PrevNeedByDate:str = obj["PrevNeedByDate"]
      """  Previous Need By Date  """  
      self.PrevReqDate:str = obj["PrevReqDate"]
      """  Previous Require Date  """  
      self.PrevShipToNum:str = obj["PrevShipToNum"]
      """  Previous Ship To Num  """  
      self.MFCustNum:int = obj["MFCustNum"]
      """  Mark For Customer Number. This along with Mark For ShipToNum provides the foreign key field to a given ShipTo.  """  
      self.UseOTMF:bool = obj["UseOTMF"]
      """  Indicates that the One Time Mark For information defined for this record should be used.  """  
      self.OTMFName:str = obj["OTMFName"]
      """  One Time Mark For Name of the ShipTo.  """  
      self.OTMFAddress1:str = obj["OTMFAddress1"]
      """  One Time Mark For first line of the ShipTo address.  """  
      self.OTMFAddress2:str = obj["OTMFAddress2"]
      """  One Time Mark For second line of the ShipTo address.  """  
      self.OTMFAddress3:str = obj["OTMFAddress3"]
      """  One Time Mark For third line of the ShipTo address.  """  
      self.OTMFCity:str = obj["OTMFCity"]
      """  City portion of the One Time Mark For address.  """  
      self.OTMFState:str = obj["OTMFState"]
      """  The state or province portion of the One Time Mark For address.  """  
      self.OTMFZIP:str = obj["OTMFZIP"]
      """  The zip or postal code portion of the One Time Mark For address.  """  
      self.OTMFContact:str = obj["OTMFContact"]
      """  One Time Mark For Contact Name  """  
      self.OTMFFaxNum:str = obj["OTMFFaxNum"]
      """  Fax number for the One Time Mark For.  """  
      self.OTMFPhoneNum:str = obj["OTMFPhoneNum"]
      """  Phone number for the One Time Mark For  """  
      self.OTMFCountryNum:int = obj["OTMFCountryNum"]
      """  Country number for the One Time Mark For  """  
      self.ECCPlant:str = obj["ECCPlant"]
      """  ECCPlant  """  
      self.WIOrderLine:str = obj["WIOrderLine"]
      """  WIOrderLine  """  
      self.WIOrder:str = obj["WIOrder"]
      """  WIOrder  """  
      self.WebSKU:str = obj["WebSKU"]
      """  WebSKU  """  
      self.ShipOvers:bool = obj["ShipOvers"]
      """  ShipOvers  """  
      self.WIItemPrice:int = obj["WIItemPrice"]
      """  WIItemPrice  """  
      self.WIItemShipCost:int = obj["WIItemShipCost"]
      """  WIItemShipCost  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.PhaseID:str = obj["PhaseID"]
      """  PhaseID  """  
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      """  OTSShipToNum  """  
      self.WasRecInvoiced:bool = obj["WasRecInvoiced"]
      """  WasRecInvoiced  """  
      self.ContractID:str = obj["ContractID"]
      """  The identifier of the planning contract.  """  
      self.LinkToContract:bool = obj["LinkToContract"]
      """  When a demand is flagged as Link to Contract, MRP will take the demand as part of the planning of the Contract.  """  
      self.ReadyToFulfill:bool = obj["ReadyToFulfill"]
      """  This flag indicates if the sales order release is ready to be fulfilled.  """  
      self.OTSEMailAddress:str = obj["OTSEMailAddress"]
      """  One Time ShipTo email address.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.NumberOfPieces:int = obj["NumberOfPieces"]
      """  Number of pieces for this attribute set.  """  
      self.NumberOfPiecesUOM:str = obj["NumberOfPiecesUOM"]
      """  Unit of measure for the NumberOfPieces.  """  
      self.PlanningNumberOfPieces:int = obj["PlanningNumberOfPieces"]
      """  Planning number of pieces for this attribute set.  """  
      self.PartAllocQueueAction:str = obj["PartAllocQueueAction"]
      """  Indicates if the release should be added or removed from the fulfillment queue.  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.AvailableQuantity:int = obj["AvailableQuantity"]
      self.BuyOverride:bool = obj["BuyOverride"]
      """  BuyOverride  """  
      self.CreditLimitMessage:str = obj["CreditLimitMessage"]
      """  The message returned when checking a customer credit limit.  """  
      self.CreditLimitSource:str = obj["CreditLimitSource"]
      """  The source that put the customer on credit hold.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      """  Is OTS allowed by the Sold to Customer?  """  
      self.CustomerAllowShipTo3:bool = obj["CustomerAllowShipTo3"]
      """  True when Customer allows shipping to a Third-Party  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.DisablePlantWhse:bool = obj["DisablePlantWhse"]
      self.DocSelfAssessTax:int = obj["DocSelfAssessTax"]
      self.DocTotalTax:int = obj["DocTotalTax"]
      self.DocWithholdTax:int = obj["DocWithholdTax"]
      self.DropShipOverride:bool = obj["DropShipOverride"]
      """  DropShipOverride  """  
      self.DspInvMeth:str = obj["DspInvMeth"]
      """   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
'CP' = Cost Plus
The default is Customer Shipment.  """  
      self.DspRevMethod:str = obj["DspRevMethod"]
      """  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  """  
      self.EnableBuyToOrder:bool = obj["EnableBuyToOrder"]
      self.EnableMake:bool = obj["EnableMake"]
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.ExistPOSugg:bool = obj["ExistPOSugg"]
      """  ExistPOSugg, external field to show/hide an epishape  """  
      self.HdrOTS:bool = obj["HdrOTS"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvtyUOM:str = obj["InvtyUOM"]
      """  Inventory UOM that the Order Release is allocated against. It is the similare column to the OrderDtl InvtyUOM and should always has the same value as in OrderDtl  """  
      self.KitDisable:bool = obj["KitDisable"]
      """  Will be set to true if the current OrderDtl record is KitFlag = 'C' and the KitParent of this record is KitAllowUpdate = NO  """  
      self.LinkToPONum:bool = obj["LinkToPONum"]
      """  LinkToPONum, external field to show/hide an epishape  """  
      self.MakeOverride:bool = obj["MakeOverride"]
      self.MarkForAddrFormatted:str = obj["MarkForAddrFormatted"]
      """  The formatted mark for address  """  
      self.MarkForAddrList:str = obj["MarkForAddrList"]
      """  Contains the Mark For Address  """  
      self.MFCustID:str = obj["MFCustID"]
      self.NoRelTaxRgnChange:bool = obj["NoRelTaxRgnChange"]
      """  The flag based on the user anwer if Ship To of the release is supposed be changed but Tax info is not changed because of the conflict in tax pricing  """  
      self.NotCompliant:bool = obj["NotCompliant"]
      """  Indicates if the item on the line is not compliant on its source, that can be Inventory, PO or Job.  """  
      self.OnHandQuantity:int = obj["OnHandQuantity"]
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  OTS Tax Liability Code (Order Release)  """  
      self.PartExists:bool = obj["PartExists"]
      self.PhaseWasRecInvoiced:bool = obj["PhaseWasRecInvoiced"]
      """  If the phase has been recognized or invoiced.  """  
      self.ProjectID:str = obj["ProjectID"]
      self.ReleaseStatus:str = obj["ReleaseStatus"]
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  the flag to indicate if all previously creaded manually added and manual tax relcords related to Order line release should be deleted if the user populates Tax Exempt field.  """  
      self.Rpt1SelfAssessTax:int = obj["Rpt1SelfAssessTax"]
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      self.Rpt1WithholdTax:int = obj["Rpt1WithholdTax"]
      self.Rpt2SelfAssessTax:int = obj["Rpt2SelfAssessTax"]
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      self.Rpt2WithholdTax:int = obj["Rpt2WithholdTax"]
      self.Rpt3SelfAssessTax:int = obj["Rpt3SelfAssessTax"]
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      self.Rpt3WithholdTax:int = obj["Rpt3WithholdTax"]
      self.SalesOrderLinked:bool = obj["SalesOrderLinked"]
      """  SalesOrderLinked  """  
      self.SelfAssessTax:int = obj["SelfAssessTax"]
      """  Self-Assessed Tax  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """  Selling Factor for display only  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Selling Factor Direction for display oly  """  
      self.ShipToAddressFormatted:str = obj["ShipToAddressFormatted"]
      """  The formatted ship to address  """  
      self.ShipToAddressList:str = obj["ShipToAddressList"]
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToSelected:bool = obj["ShipToSelected"]
      self.SNEnable:bool = obj["SNEnable"]
      self.ThisRelInvtyQty:int = obj["ThisRelInvtyQty"]
      self.TotalJobStockShipped:int = obj["TotalJobStockShipped"]
      self.TotalTax:int = obj["TotalTax"]
      """  Invoice Tax  """  
      self.UpdateMarkForRecords:bool = obj["UpdateMarkForRecords"]
      self.VoidOrder:bool = obj["VoidOrder"]
      self.WithholdTax:int = obj["WithholdTax"]
      """  Withholding Tax  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      self.EnableDynAttrButton:bool = obj["EnableDynAttrButton"]
      """  Allow enable/disable for the button Attibutes in Order Release  """  
      self.AttributeMismatch:bool = obj["AttributeMismatch"]
      """  Attribute class is MRP Planned but AttributeSetID has not been set on release.  """  
      self.AllocatedQuantity:int = obj["AllocatedQuantity"]
      """  The total allocated quantity for this release.  """  
      self.ErrorStatusDisplay:str = obj["ErrorStatusDisplay"]
      """  Error Status Display  """  
      self.InPartAllocQueue:bool = obj["InPartAllocQueue"]
      """  True if this release is in the fulfillment queue.  """  
      self.ShowAllocationQueueActions:bool = obj["ShowAllocationQueueActions"]
      """  Show Fulfillment Queue Actions  """  
      self.BitFlag:int = obj["BitFlag"]
      self.DynAttrValueSetShortDescription:str = obj["DynAttrValueSetShortDescription"]
      self.DynAttrValueSetDescription:str = obj["DynAttrValueSetDescription"]
      self.MarkForNumInactive:bool = obj["MarkForNumInactive"]
      self.MFCustNumInactive:bool = obj["MFCustNumInactive"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OTMFCountryDescription:str = obj["OTMFCountryDescription"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PlantName:str = obj["PlantName"]
      self.PurPointAddress3:str = obj["PurPointAddress3"]
      self.PurPointZip:str = obj["PurPointZip"]
      self.PurPointName:str = obj["PurPointName"]
      self.PurPointCountry:str = obj["PurPointCountry"]
      self.PurPointAddress1:str = obj["PurPointAddress1"]
      self.PurPointState:str = obj["PurPointState"]
      self.PurPointCity:str = obj["PurPointCity"]
      self.PurPointAddress2:str = obj["PurPointAddress2"]
      self.PurPointPrimPCon:int = obj["PurPointPrimPCon"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TPShipToName:str = obj["TPShipToName"]
      self.TPShipToBTName:str = obj["TPShipToBTName"]
      self.TPShipToCustID:str = obj["TPShipToCustID"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.WarehouseCodeDescription:str = obj["WarehouseCodeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      self.UD_SysRevID:str = obj["UD_SysRevID"]
      self.JobNum_c:str = obj["JobNum_c"]
      pass

class Erp_Tablesets_OrderRelTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Sales order Line number that this order release is linked to.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  """  
      self.Discount:int = obj["Discount"]
      """  A flat discount amount for the tax.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """  A flat discount amount for the tax converted to the customers currency.  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.RateCode:str = obj["RateCode"]
      """  Rate Code  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution Date  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Tax Rate Date  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.SalesTaxDescDescription:str = obj["SalesTaxDescDescription"]
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CollectionTypeDescription:str = obj["CollectionTypeDescription"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      self.NoChangeManual:bool = obj["NoChangeManual"]
      """  If Tax Liability is In Price then the user should not be able to change Manual flag on Tax Record  """  
      self.EntryProcess:str = obj["EntryProcess"]
      """  this is used in order entry to ignore afterGetRows logic (logic that just refreshes external fields).  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RateCodeDescDescription:str = obj["RateCodeDescDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderRepCommRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number this sales rep commission is tied to  """  
      self.SalesRepCode:str = obj["SalesRepCode"]
      """  Sales rep code for this commission data  """  
      self.Name:str = obj["Name"]
      """  Sales Rep name  """  
      self.CommLines:int = obj["CommLines"]
      """  Number of commission lines this sales rep has for this order  """  
      self.CommSaleAmt:int = obj["CommSaleAmt"]
      """  Commission sale amount  """  
      self.CommAmt:int = obj["CommAmt"]
      """  Commission amount  """  
      self.Seq:str = obj["Seq"]
      """  Seq number to keep key unique if sales rep is repeated  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_OrderSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Contains the Order Number that ties this detail record back to an OrderHed record.  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Order total and Payment's Percentage.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Order total and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.IsLastRow:bool = obj["IsLastRow"]
      """  Indicates if this is the last OrderSched row for the order  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PartSubsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PartNum:str = obj["PartNum"]
      """  The Part number that this substitute Part is for.  """  
      self.SubPart:str = obj["SubPart"]
      """  Substitute Part  """  
      self.RecType:str = obj["RecType"]
      """  Indicates the record type. "S" = Substitute, "C" = Compliment  """  
      self.SubType:str = obj["SubType"]
      """  Pertains only to Substitute Parts (RecType = "S"). Values are "C" - Comparable, "D" - Downgrade, "U" - Upgrade  """  
      self.QtyPer:int = obj["QtyPer"]
      """   The quantity of the alternate part per 1 of the parent part in the parents base inventory uom. Cannot be zero.
To convert an existing OrderDtl.SellingQty to a PartSubs. It is converted to the Parents Part Base Inventory UOM  then multiply PartSubs.QtyPer, then converted to  PartSub.SalesUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit of measure used when this part is used as a substitute/compliment with the parent part (partsubs.partnum).  Defaults as Part.SUM of the PartSub.SubPart.  """  
      self.Comment:str = obj["Comment"]
      """  Optional Comment  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefaultSub:bool = obj["DefaultSub"]
      self.Price:int = obj["Price"]
      """  Price for the Suggested Quantity  """  
      self.SuggestedQty:int = obj["SuggestedQty"]
      """  Suggested Quantity  """  
      self.Selected:bool = obj["Selected"]
      """  Selected Row  """  
      self.SugOrderQty:int = obj["SugOrderQty"]
      """  Suggested Quantity for Order Qty in Quote Detail  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.SubPartSellingFactor:int = obj["SubPartSellingFactor"]
      self.SubPartTrackSerialNum:bool = obj["SubPartTrackSerialNum"]
      self.SubPartTrackDimension:bool = obj["SubPartTrackDimension"]
      self.SubPartPartDescription:str = obj["SubPartPartDescription"]
      self.SubPartIUM:str = obj["SubPartIUM"]
      self.SubPartSalesUM:str = obj["SubPartSalesUM"]
      self.SubPartTrackLots:bool = obj["SubPartTrackLots"]
      self.SubPartPricePerCode:str = obj["SubPartPricePerCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_QuoteQtyRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote # that this record is linked to.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  The QuoteLine to which this QuoteQty record is related to.  """  
      self.QtyNum:int = obj["QtyNum"]
      """  An internally used integer assigned by the system to provide a unique key to the QuoteQty file. Allowing virtually unlimited quantities to be quoted for each detail line on a quote. This number is assigned as one greater than last one on file for the given QuoteDtl record.  """  
      self.OurQuantity:int = obj["OurQuantity"]
      """  Represents one of the requested Quote Quantities for the line item using QuoteQty.IUM.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Quoted unit price for the given quantity. This value is entered by the user.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed).
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """   Indicates the pricing per quantity. It can be "E" = per each,
"C" = per hundred,  "M" = per thousand. Used to calculate the extended unit price for the line item. The logic is to divide the QuoteQty.Quantity by the appropriate "per" value and then multiply by unit price.  Use the  Part.PricePerCode as a default. If Part record does not exist then default as "E"  """  
      self.MtlBurMarkUp:int = obj["MtlBurMarkUp"]
      """  Material Bur Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.MaterialMarkUp:int = obj["MaterialMarkUp"]
      """  Material Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.SubcontractMarkUp:int = obj["SubcontractMarkUp"]
      """  SubContract Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.LaborMarkUp:int = obj["LaborMarkUp"]
      """  Labor Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.BurdenMarkUp:int = obj["BurdenMarkUp"]
      """  Labor Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.MiscCostDesc:str = obj["MiscCostDesc"]
      """  Miscellaneous Cost description.  """  
      self.MiscCost:int = obj["MiscCost"]
      """  Miscellaneous Cost amount that will be considered in the unit price calculations.  """  
      self.MiscCostMarkUp:int = obj["MiscCostMarkUp"]
      """  Miscellaneous Cost Markup Percent for this quoted quantity. May default from the QMarkUp file. By either using the default established for the customer (Customer.QMarkUpID) or the one established for the system (EQSyst.QMarkUpID) otherwise zero.  """  
      self.CommissionPct:int = obj["CommissionPct"]
      """  Allows entry of commission percent so that it will be considered in the final calculated unit price. The commission percent is calculated as a percent of the "net unit price". Net unit price is the material, subcontract, labor, burden and miscellaneous costs plus their corresponding markups.  """  
      self.PercentType:str = obj["PercentType"]
      """  A qualifier of the Material, SubContract, Labor, Burden and Miscellaneous markup percent values. Prices can be calculated either as a straight markup of cost ( Cost + (Cost *  x %)) or a percent of profit ( Cost / (100% -  x%).   PercentType "M" = straight markup, "P" = Profit Percent. Defaulted from referenced QMarkup, from EQSyst.PercentType if not blank, else default as "M".  """  
      self.IUM:str = obj["IUM"]
      """  Unit of Measure (how it is stocked).  Use the default Part.IUM if its a valid part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Unit of measure (how it is sold/issued).  Use the default Part.SUM if its a valid Part else use the global variable Def-UM which is established from XaSyst.DefaultUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.SellingQuantity:int = obj["SellingQuantity"]
      """  Represents one of the requested Quote Quantities for the line item using QuoteQty.SUM.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.MarkUpID:str = obj["MarkUpID"]
      """  Unique identifier of this material markup. Defaults from its parent table Qmarkup.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """  Reserved for future use  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """  Reserved for future use  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """  Reserved for future use  """  
      self.PriceSource:str = obj["PriceSource"]
      """  PriceSource  """  
      self.PricePerAdl1000:int = obj["PricePerAdl1000"]
      """  PricePerAdl1000  """  
      self.TotalSellPrice:int = obj["TotalSellPrice"]
      """  TotalSellPrice  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DocPricePerAdl1000:int = obj["DocPricePerAdl1000"]
      """  DocPricePerAdl1000  """  
      self.DocTotalSellPrice:int = obj["DocTotalSellPrice"]
      """  DocTotalSellPrice  """  
      self.UserChangedUnitPrice:bool = obj["UserChangedUnitPrice"]
      """  Indicates if the unit price for the qty break has been manually modified  """  
      self.CalcProfit:int = obj["CalcProfit"]
      """  Worksheet field  """  
      self.CalcProfitProfit:int = obj["CalcProfitProfit"]
      """  CalcProfit Profit calculation  """  
      self.CalcUnitCost:int = obj["CalcUnitCost"]
      """  Worksheet field  """  
      self.CalcUnitPriceMarkup:int = obj["CalcUnitPriceMarkup"]
      """  Worksheet field  """  
      self.CalcUnitPriceProfit:int = obj["CalcUnitPriceProfit"]
      """  Worksheet field  """  
      self.CalcUPCommMarkup:int = obj["CalcUPCommMarkup"]
      """  Worksheet field  """  
      self.CalcUPCommProfit:int = obj["CalcUPCommProfit"]
      """  Worksheet field  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  Currency.CurrSymbol from QuoteHed  """  
      self.DisableMtlMarkup:bool = obj["DisableMtlMarkup"]
      """  Flag to indicate when to disable/enable material markup field  """  
      self.MaterialMarkupM:int = obj["MaterialMarkupM"]
      """  External field for MaterialMarkup Markup calculations  """  
      self.MaterialMarkupP:int = obj["MaterialMarkupP"]
      """  External field for MaterialMarkup Profit calculations  """  
      self.MiscChrg:str = obj["MiscChrg"]
      """  Indicates if the record has a miscellaneous charge associated with it  """  
      self.PriceBurMarkup:int = obj["PriceBurMarkup"]
      """  Worksheet field  """  
      self.PriceBurProfit:int = obj["PriceBurProfit"]
      """  Worksheet field  """  
      self.PriceLbrMarkup:int = obj["PriceLbrMarkup"]
      """  Worksheet field  """  
      self.PriceLbrProfit:int = obj["PriceLbrProfit"]
      """  Worksheet field  """  
      self.PriceMscChrgMarkup:int = obj["PriceMscChrgMarkup"]
      """  Worksheet field  """  
      self.PriceMscChrgProfit:int = obj["PriceMscChrgProfit"]
      """  Worksheet field  """  
      self.PriceMtlBurMarkup:int = obj["PriceMtlBurMarkup"]
      """  Worksheet field  """  
      self.PriceMtlBurProfit:int = obj["PriceMtlBurProfit"]
      """  Worksheet field  """  
      self.PriceMtlMarkup:int = obj["PriceMtlMarkup"]
      """  Worksheet field  """  
      self.PriceMtlProfit:int = obj["PriceMtlProfit"]
      """  Worksheet field  """  
      self.PricePerFactor:int = obj["PricePerFactor"]
      """  Integer value of the PricePerCode field (for calculations)  """  
      self.PriceSubMarkup:int = obj["PriceSubMarkup"]
      """  Worksheet field  """  
      self.PriceSubProfit:int = obj["PriceSubProfit"]
      """  Worksheet field  """  
      self.PriceTotalCommMarkup:int = obj["PriceTotalCommMarkup"]
      """  Worksheet field  """  
      self.PriceTotalCommProfit:int = obj["PriceTotalCommProfit"]
      """  Worksheet field  """  
      self.PriceTotalMarkup:int = obj["PriceTotalMarkup"]
      """  Worksheet field  """  
      self.PriceTotalProfit:int = obj["PriceTotalProfit"]
      """  Worksheet field  """  
      self.QuotedMarkup:int = obj["QuotedMarkup"]
      """  Worksheet field  """  
      self.QuotedProfit:int = obj["QuotedProfit"]
      """  Worksheet field  """  
      self.RollUpCostNeeded:bool = obj["RollUpCostNeeded"]
      """  If marked then the totals are not updated and a ?Roll up costs? is needed.  """  
      self.TotalBurCost:int = obj["TotalBurCost"]
      """  QuoteCst.TotalBurCost - Worksheet temp field  """  
      self.TotalCommission:int = obj["TotalCommission"]
      """  Worksheet field  """  
      self.TotalCommProfit:int = obj["TotalCommProfit"]
      """  Total Commision Profit calculation  """  
      self.TotalCost:int = obj["TotalCost"]
      """  Worksheet field  """  
      self.TotalLbrCost:int = obj["TotalLbrCost"]
      """  QuoteCst.TotalLbrCost - Worksheet temp field  """  
      self.TotalMarkup:int = obj["TotalMarkup"]
      """  Worksheet field  """  
      self.TotalMtlBurCost:int = obj["TotalMtlBurCost"]
      """  QuoteCst.TotalMtlBurCost - Worksheet temp field  """  
      self.TotalMtlCost:int = obj["TotalMtlCost"]
      """  QuoteCst.TotalMtlCost - Worksheet temp field  """  
      self.TotalProdBurHrs:int = obj["TotalProdBurHrs"]
      """  QuoteCst.TotalProdBurHrs - Worksheet temp field  """  
      self.TotalProdLbrHrs:int = obj["TotalProdLbrHrs"]
      """  QuoteCst.TotalProdLbrHrs - Worksheet temp field  """  
      self.TotalProfit:int = obj["TotalProfit"]
      """  Worksheet field  """  
      self.TotalQuotedPrice:int = obj["TotalQuotedPrice"]
      """  Worksheet field  """  
      self.TotalSetupBurHrs:int = obj["TotalSetupBurHrs"]
      """  QuoteCst.TotalSetupBurHrs - Worksheet temp field  """  
      self.TotalSetupLbrHrs:int = obj["TotalSetupLbrHrs"]
      """  QuoteCst.TotalSetupLbrHrs - Worksheet temp field  """  
      self.TotalSubCost:int = obj["TotalSubCost"]
      """  QuoteCst.TotalSubCost - Worksheet temp field  """  
      self.WQUnitPrice:int = obj["WQUnitPrice"]
      """  Worksheet Quoted Unit Price  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Currency.CurrSymbol for BASE  """  
      self.CalcMarkup:int = obj["CalcMarkup"]
      """  Worksheet field  """  
      self.CalcMarkupProfit:int = obj["CalcMarkupProfit"]
      """  CalcMarkup Profit calculation  """  
      self.BitFlag:int = obj["BitFlag"]
      self.QuoteLineLineDesc:str = obj["QuoteLineLineDesc"]
      self.QuoteNumCurrencyCode:str = obj["QuoteNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SNFormatRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.Plant:str = obj["Plant"]
      """  Site Identifier. This field cannot be blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  The PartNum field identifies the Part and is used in the primary key.  """  
      self.NumberOfDigits:int = obj["NumberOfDigits"]
      """  Number of digits in the serial number  """  
      self.SNMask:str = obj["SNMask"]
      """  If the SNBaseDataType is Mask this is the Serial Mask ID assigned for format validation/generation.  """  
      self.SNBaseDataType:str = obj["SNBaseDataType"]
      """   Current setting for Data type of the Base Serial Number field to be used as new serial numbers are generated. Valid values; Character, Integer, Mask
Code/desc required:
CHARACTER`Alphanumeric
INTEGER`NumericOnly
MASK`Serial Mask
This field should be flagged as Include = true in Object Designer.  """  
      self.SNFormat:str = obj["SNFormat"]
      """   Current setting for Format of the Base serial number that will be used as new serial numbers are generated. Expressed in progress syntax. Ex: X(30), 99999999 for Character or Integer, or as a Serial Mask defined in SerialMask table.
This field should be flagged as ReadOnly and Include = true in Object Designer.  """  
      self.LeadingZeroes:bool = obj["LeadingZeroes"]
      """  Whether or not to have leading zeroes  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """   Current setting for the prefix that will be attached to all new Serial Numbers as they are generated for Character and Integer format types.
This field should be flagged as Include = true in Object Designer.  """  
      self.SNMaskSuffix:str = obj["SNMaskSuffix"]
      """  A standard suffix that will be attached to all serial numbers generated for the PartSite currently used only by SNBaseStructure Mask types  """  
      self.SNMaskPrefix:str = obj["SNMaskPrefix"]
      """  The prefix that was used to construct the serial number currently used only by SNBaseStructure Mask types  """  
      self.SNLastUsedSeq:str = obj["SNLastUsedSeq"]
      """  This is the last used serial sequence. It is used only for the Mask Generate type to determine the next logical serial number to generate for this part/Site. It can be altered by the user and several PartSites can have the same counter values defined, but  """  
      self.HasSerialNumbers:bool = obj["HasSerialNumbers"]
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.PartPricePerCode:str = obj["PartPricePerCode"]
      self.PartTrackLots:bool = obj["PartTrackLots"]
      self.PartTrackSerialNum:bool = obj["PartTrackSerialNum"]
      self.PartTrackDimension:bool = obj["PartTrackDimension"]
      self.PartSalesUM:str = obj["PartSalesUM"]
      self.PartIUM:str = obj["PartIUM"]
      self.PartSellingFactor:int = obj["PartSellingFactor"]
      self.PartPartDescription:str = obj["PartPartDescription"]
      self.SerialMaskMaskType:int = obj["SerialMaskMaskType"]
      self.SerialMaskMask:str = obj["SerialMaskMask"]
      self.SerialMaskExample:str = obj["SerialMaskExample"]
      self.SerialMaskDescription:str = obj["SerialMaskDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SOEntryUIParamsRow:
   def __init__(self, obj):
      self.CalcQtysPreference:bool = obj["CalcQtysPreference"]
      """  Value from UserComp.CalcQtysPreference  """  
      self.CCAllowSales:bool = obj["CCAllowSales"]
      """  Value from CreditCardProc.AllowDepPay  """  
      self.CCEnableAddress:bool = obj["CCEnableAddress"]
      """  Value from CreditCardProc.UseAVS  """  
      self.CCEnableCSC:bool = obj["CCEnableCSC"]
      """  Value from CreditCardProc.UseCSC.  """  
      self.EnableICPOSugTool:bool = obj["EnableICPOSugTool"]
      """  True if can find IMOrderHed for this company where the IMOrderHed.IncomingOutgoing = 'i'.  """  
      self.Localization:str = obj["Localization"]
      """  Value from XBSyst.Localization.  """  
      self.SOReadyToCalcDflt:bool = obj["SOReadyToCalcDflt"]
      """  Value from XASyst.SOReadyToCalcDflt.  """  
      self.SuppressSOMakeDirWrn:bool = obj["SuppressSOMakeDirWrn"]
      """  Value from PtchFld where tablename = 'PlantConfCtrl', FieldName = 'SuppressSOMakeDirWrn'  """  
      self.PrjAllowWBSPhase:bool = obj["PrjAllowWBSPhase"]
      """   Allow Project/WBS phase to be defined
(Patch field)  """  
      self.UseTerritorySecurity:bool = obj["UseTerritorySecurity"]
      """   Filter sales orders and customer access using workflow territory security.
(Patch Field)  """  
      self.EnableManifestRateShopping:bool = obj["EnableManifestRateShopping"]
      """  Indicates whether the PlantConfCtrl for the current login site has ManifestRateShopping enabled  """  
      self.ManifestRateShoppingURL:str = obj["ManifestRateShoppingURL"]
      """  URL for Manifest Rate Shopping for the current login Site  """  
      self.CREProcessor:bool = obj["CREProcessor"]
      """  CREProcessor is true when Credit Card Configuration is CRE Server.  """  
      self.PayGateHostAddress:str = obj["PayGateHostAddress"]
      """  Host Address for the Paygate Hosted Token Service.  """  
      self.PayGateNameSpace:str = obj["PayGateNameSpace"]
      """  NameSpace for the Paygate Hosted Token Service.  """  
      self.PayGatePublicKey:str = obj["PayGatePublicKey"]
      """  Public Key for the Paygate Hosted Token Service EWA component.  """  
      self.HMRCTaxValidationAllow:bool = obj["HMRCTaxValidationAllow"]
      self.TaxValidationAllow:bool = obj["TaxValidationAllow"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SOEntryUIParamsTableset:
   def __init__(self, obj):
      self.SOEntryUIParams:list[Erp_Tablesets_SOEntryUIParamsRow] = obj["SOEntryUIParams"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_SalesOrderTableset:
   def __init__(self, obj):
      self.OrderHed:list[Erp_Tablesets_OrderHedRow] = obj["OrderHed"]
      self.OrderHedAttch:list[Erp_Tablesets_OrderHedAttchRow] = obj["OrderHedAttch"]
      self.OHOrderMsc:list[Erp_Tablesets_OHOrderMscRow] = obj["OHOrderMsc"]
      self.OrderDtl:list[Erp_Tablesets_OrderDtlRow] = obj["OrderDtl"]
      self.OrderDtlAttch:list[Erp_Tablesets_OrderDtlAttchRow] = obj["OrderDtlAttch"]
      self.OrderMsc:list[Erp_Tablesets_OrderMscRow] = obj["OrderMsc"]
      self.OrderRel:list[Erp_Tablesets_OrderRelRow] = obj["OrderRel"]
      self.OrderRelTax:list[Erp_Tablesets_OrderRelTaxRow] = obj["OrderRelTax"]
      self.OrderHedUPS:list[Erp_Tablesets_OrderHedUPSRow] = obj["OrderHedUPS"]
      self.OrderRepComm:list[Erp_Tablesets_OrderRepCommRow] = obj["OrderRepComm"]
      self.OrderSched:list[Erp_Tablesets_OrderSchedRow] = obj["OrderSched"]
      self.HedTaxSum:list[Erp_Tablesets_HedTaxSumRow] = obj["HedTaxSum"]
      self.OrderHist:list[Erp_Tablesets_OrderHistRow] = obj["OrderHist"]
      self.PartSubs:list[Erp_Tablesets_PartSubsRow] = obj["PartSubs"]
      self.SelectedSerialNumbers:list[Erp_Tablesets_SelectedSerialNumbersRow] = obj["SelectedSerialNumbers"]
      self.SNFormat:list[Erp_Tablesets_SNFormatRow] = obj["SNFormat"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_SaveOTSParamsRow:
   def __init__(self, obj):
      self.OTSAddress1:str = obj["OTSAddress1"]
      self.OTSAddress2:str = obj["OTSAddress2"]
      self.OTSAddress3:str = obj["OTSAddress3"]
      self.OTSCity:str = obj["OTSCity"]
      self.OTSContact:str = obj["OTSContact"]
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      self.OTSCustSaved:bool = obj["OTSCustSaved"]
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      self.OTSName:str = obj["OTSName"]
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      self.OTSResaleID:str = obj["OTSResaleID"]
      self.OTSSaveAs:str = obj["OTSSaveAs"]
      self.OTSSaveCustID:str = obj["OTSSaveCustID"]
      self.OTSSaved:bool = obj["OTSSaved"]
      self.OTSShipToNum:str = obj["OTSShipToNum"]
      self.OTSState:str = obj["OTSState"]
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      self.OTSZIP:str = obj["OTSZIP"]
      self.OTSOverride:bool = obj["OTSOverride"]
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SaveOTSParamsTableset:
   def __init__(self, obj):
      self.SaveOTSParams:list[Erp_Tablesets_SaveOTSParamsRow] = obj["SaveOTSParams"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_SelectSerialNumbersParamsRow:
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      """  The part number to which the serial numbers have been assigned.  """  
      self.quantity:int = obj["quantity"]
      """  The quantity of serial numbers that need to be selected.  """  
      self.whereClause:str = obj["whereClause"]
      """  whereClause for filtering available serial numbers  """  
      self.transType:str = obj["transType"]
      """  transType of this transaction  """  
      self.sourceRowID:str = obj["sourceRowID"]
      """  Include when filtering a set of SN's for BL processing is necessary.  It may be null if not needed.  """  
      self.enableCreate:bool = obj["enableCreate"]
      """  Determines if serial numbers can be created.  """  
      self.enableSelect:bool = obj["enableSelect"]
      """  Determines if serial numbers can be selected.  """  
      self.enableRetrieve:bool = obj["enableRetrieve"]
      """  Determines if serial numbers can be retrieved.  """  
      self.allowVoided:bool = obj["allowVoided"]
      """  Specifies whether Voided serial numbers can be manually selected.  """  
      self.plant:str = obj["plant"]
      """  The Plant associated with this transaction  """  
      self.xrefPartNum:str = obj["xrefPartNum"]
      self.xrefPartType:str = obj["xrefPartType"]
      self.xrefCustNum:int = obj["xrefCustNum"]
      self.poLinkValues:str = obj["poLinkValues"]
      """  temporary field used to link the packout lines to ship detail lines  """  
      self.attributeSetID:int = obj["attributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.attributeSetShortDescription:str = obj["attributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.revisionNum:str = obj["revisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SelectSerialNumbersParamsTableset:
   def __init__(self, obj):
      self.SelectSerialNumbersParams:list[Erp_Tablesets_SelectSerialNumbersParamsRow] = obj["SelectSerialNumbersParams"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_SelectedSerialNumbersRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.SerialNumber:str = obj["SerialNumber"]
      """  SerialNumber  """  
      self.Scrapped:bool = obj["Scrapped"]
      """  Scrapped flag  """  
      self.ScrappedReasonCode:str = obj["ScrappedReasonCode"]
      """  Scrapped reason code  """  
      self.Voided:bool = obj["Voided"]
      """  Voided flag  """  
      self.Reference:str = obj["Reference"]
      """  Reference field  """  
      self.ReasonCodeType:str = obj["ReasonCodeType"]
      """  Reason code type = s  """  
      self.ReasonCodeDesc:str = obj["ReasonCodeDesc"]
      """  Reason code description  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNumber  """  
      self.SNPrefix:str = obj["SNPrefix"]
      """  Serial number prefix  """  
      self.SNBaseNumber:str = obj["SNBaseNumber"]
      """  Base number used to create the serial number  """  
      self.SourceRowID:str = obj["SourceRowID"]
      """  RowID of the source record for this serial number  """  
      self.TransType:str = obj["TransType"]
      """  TransType of the record that created this serial number  """  
      self.PassedInspection:bool = obj["PassedInspection"]
      """  True if this serial numbered part passed inspection  """  
      self.Deselected:bool = obj["Deselected"]
      """  Used to flag previously selected serial numbers as deselected  """  
      self.KitWhseList:str = obj["KitWhseList"]
      self.RawSerialNum:str = obj["RawSerialNum"]
      """  This will be the raw serial number as it was scanned or entered into the system. This would only differ from the SerialNumber field if a validate type mask was being used where characters were stripped (using ~ in the mask).  """  
      self.KBLbrAction:int = obj["KBLbrAction"]
      """  Action type field used for Kanban receipts to indicate if the new serial number status is Inventory, Scrapped or NonConf.  This requires Code/desc:  1 ` inventory 2 ` Scrapped 3 ` Nonconformance  """  
      self.KBLbrActionDesc:str = obj["KBLbrActionDesc"]
      """  Description field for KBLbrAction ? holds the translated description for the KBLbrAction code for UI display and combo box.  """  
      self.PreventDeselect:bool = obj["PreventDeselect"]
      """  If true, then users can not deselect this serial number.  This is used by applications that allow maintenance to the Selected Serial Numbers after update.  """  
      self.XRefPartNum:str = obj["XRefPartNum"]
      """  Used only by SN Assignment  """  
      self.XRefPartType:str = obj["XRefPartType"]
      """  Used only by SN Assignment: C = Customer Part / I = Internal Part XRef  """  
      self.PreDeselected:bool = obj["PreDeselected"]
      self.poLinkValues:str = obj["poLinkValues"]
      """  temporary field used to link the packout lines to ship detail lines  """  
      self.SNMask:str = obj["SNMask"]
      """  The mask the was used to generate the serial number  """  
      self.NotSavedToDB:bool = obj["NotSavedToDB"]
      """  Flag to indicate that the SelectedSerialNumbers entry has not yet been saved to the DB for the related transaction. Used to keep track of which deselected serial numbers need to be passed to the transaction update logic.  """  
      self.RowSelected:bool = obj["RowSelected"]
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_UpdExtSalesOrderTableset:
   def __init__(self, obj):
      self.OrderHed:list[Erp_Tablesets_OrderHedRow] = obj["OrderHed"]
      self.OrderHedAttch:list[Erp_Tablesets_OrderHedAttchRow] = obj["OrderHedAttch"]
      self.OHOrderMsc:list[Erp_Tablesets_OHOrderMscRow] = obj["OHOrderMsc"]
      self.OrderDtl:list[Erp_Tablesets_OrderDtlRow] = obj["OrderDtl"]
      self.OrderDtlAttch:list[Erp_Tablesets_OrderDtlAttchRow] = obj["OrderDtlAttch"]
      self.OrderMsc:list[Erp_Tablesets_OrderMscRow] = obj["OrderMsc"]
      self.OrderRel:list[Erp_Tablesets_OrderRelRow] = obj["OrderRel"]
      self.OrderRelTax:list[Erp_Tablesets_OrderRelTaxRow] = obj["OrderRelTax"]
      self.OrderHedUPS:list[Erp_Tablesets_OrderHedUPSRow] = obj["OrderHedUPS"]
      self.OrderRepComm:list[Erp_Tablesets_OrderRepCommRow] = obj["OrderRepComm"]
      self.OrderSched:list[Erp_Tablesets_OrderSchedRow] = obj["OrderSched"]
      self.HedTaxSum:list[Erp_Tablesets_HedTaxSumRow] = obj["HedTaxSum"]
      self.OrderHist:list[Erp_Tablesets_OrderHistRow] = obj["OrderHist"]
      self.PartSubs:list[Erp_Tablesets_PartSubsRow] = obj["PartSubs"]
      self.SelectedSerialNumbers:list[Erp_Tablesets_SelectedSerialNumbersRow] = obj["SelectedSerialNumbers"]
      self.SNFormat:list[Erp_Tablesets_SNFormatRow] = obj["SNFormat"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class GetBasePartAndConfigType_input:
   """ Required : 
   sourceSysRowID
   """  
   def __init__(self, obj):
      self.sourceSysRowID:str = obj["sourceSysRowID"]
      """  OrderDtl sysRowID  """  
      pass

class GetBasePartAndConfigType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cfgPartNum:str = obj["parameters"]
      self.cfgRevisionNum:str = obj["parameters"]
      self.configType:str = obj["parameters"]
      self.configID:str = obj["parameters"]
      self.configURL:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetBasePartForConfig_input:
   """ Required : 
   sourceSysRowID
   """  
   def __init__(self, obj):
      self.sourceSysRowID:str = obj["sourceSysRowID"]
      """  Order Number of the target Assembly  """  
      pass

class GetBasePartForConfig_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cfgPartNum:str = obj["parameters"]
      self.cfgRevisionNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetByIDLinkedOrder_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the order to get  """  
      pass

class GetByIDLinkedOrder_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class GetByID_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      pass

class GetByID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class GetBySysRowID_input:
   """ Required : 
   id
   """  
   def __init__(self, obj):
      self.id:str = obj["id"]
      pass

class GetBySysRowID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class GetBySysRowIDs_input:
   """ Required : 
   ids
   """  
   def __init__(self, obj):
      self.ids:str = obj["ids"]
      pass

class GetBySysRowIDs_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class GetCalcQtyPref_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opCalcQtyPref:bool = obj["opCalcQtyPref"]
      pass

      """  output parameters  """  

class GetCodeDescList_input:
   """ Required : 
   tableName
   fieldName
   """  
   def __init__(self, obj):
      self.tableName:str = obj["tableName"]
      self.fieldName:str = obj["fieldName"]
      pass

class GetCodeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetGlbSugPOChgForOrder_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      pass

class GetGlbSugPOChgForOrder_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["returnObj"]
      pass

class GetGlbSugPOChg_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iOrderRelNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Order Release Number  """  
      self.pageSize:int = obj["pageSize"]
      """  The Page Size  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page  """  
      pass

class GetGlbSugPOChg_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetInventoryQuantities_input:
   """ Required : 
   lOnlyRel
   ds
   """  
   def __init__(self, obj):
      self.lOnlyRel:bool = obj["lOnlyRel"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class GetInventoryQuantities_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetJobProdForRelease_input:
   """ Required : 
   orderNum
   orderLine
   orderRelNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The Order Number  """  
      self.orderLine:int = obj["orderLine"]
      """  The Order Line Number  """  
      self.orderRelNum:int = obj["orderRelNum"]
      """  The Order Line Number  """  
      pass

class GetJobProdForRelease_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrdRelJobProdTableset] = obj["returnObj"]
      pass

class GetJobProd_input:
   """ Required : 
   iOrderNum
   iOrderLine
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number  """  
      self.pageSize:int = obj["pageSize"]
      """  The Page Size  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page  """  
      pass

class GetJobProd_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrdRelJobProdTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetKitComponents_input:
   """ Required : 
   iPartNum
   iRevisionNum
   iTargetAsm
   orderNum
   orderLine
   iUseMethodForParts
   regenerateKit
   errorMsg
   ds
   """  
   def __init__(self, obj):
      self.iPartNum:str = obj["iPartNum"]
      """  Part Number of the given OrderLine  """  
      self.iRevisionNum:str = obj["iRevisionNum"]
      """  Revision Number selected for the given PartNum  """  
      self.iTargetAsm:int = obj["iTargetAsm"]
      """  Target assembly to be exploded (usually asm 0)  """  
      self.orderNum:int = obj["orderNum"]
      """  Order number to be exploded  """  
      self.orderLine:int = obj["orderLine"]
      """  Order line which will be the Kit Parent  """  
      self.iUseMethodForParts:bool = obj["iUseMethodForParts"]
      """  -  """  
      self.regenerateKit:bool = obj["regenerateKit"]
      """  If true this will cause the previous loaded components to be deleted  """  
      self.errorMsg:str = obj["errorMsg"]
      """  Text message returned in case an error/warning was found  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class GetKitComponents_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errorMsg:str = obj["parameters"]
      self.errorType:int = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetListCustom_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   customClause
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  The search criteria  """  
      self.pageSize:int = obj["pageSize"]
      """  Size of a page  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page  """  
      self.customClause:str = obj["customClause"]
      """  Custom WhereClause  """  
      pass

class GetListCustom_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrderHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrderHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetNewOHOrderMsc_input:
   """ Required : 
   ds
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class GetNewOHOrderMsc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderDtlAttch_input:
   """ Required : 
   ds
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class GetNewOrderDtlAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderDtl_input:
   """ Required : 
   ds
   orderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      pass

class GetNewOrderDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderHedAttch_input:
   """ Required : 
   ds
   orderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      pass

class GetNewOrderHedAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderHedUPS_input:
   """ Required : 
   ds
   orderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      pass

class GetNewOrderHedUPS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderHed_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class GetNewOrderHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderMsc_input:
   """ Required : 
   ds
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class GetNewOrderMsc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderRelTax_input:
   """ Required : 
   ds
   orderNum
   orderLine
   orderRelNum
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      self.orderRelNum:int = obj["orderRelNum"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewOrderRelTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderRel_input:
   """ Required : 
   ds
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class GetNewOrderRel_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewOrderSched_input:
   """ Required : 
   ds
   orderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.orderNum:int = obj["orderNum"]
      pass

class GetNewOrderSched_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewSalesKit_input:
   """ Required : 
   OrderNum
   OrderLine
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order number where the Kit Parent resides  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line that has the SalesKit and to which the kit component will be added  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class GetNewSalesKit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetPayBTFlagDefaults_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class GetPayBTFlagDefaults_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetPlantConfCtrlInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opSuppressWarning:bool = obj["opSuppressWarning"]
      pass

      """  output parameters  """  

class GetQuoteQty_input:
   """ Required : 
   iQuoteNum
   iQuoteLine
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.iQuoteNum:int = obj["iQuoteNum"]
      """  The Quote Number  """  
      self.iQuoteLine:int = obj["iQuoteLine"]
      """  The Quote Line Number  """  
      self.pageSize:int = obj["pageSize"]
      """  The Page Size  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page  """  
      pass

class GetQuoteQty_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrdDtlQuoteQtyTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsAuthorizedTerritories_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  The search criteria  """  
      self.pageSize:int = obj["pageSize"]
      """  Size of a page  """  
      self.absolutePage:int = obj["absolutePage"]
      """  The absolute page  """  
      pass

class GetRowsAuthorizedTerritories_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsCustomerTracker_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRepComm
   whereClauseSelectedSerialNumbers
   whereClauseSerialNumberSearch
   whereClauseSNFormat
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      """  Whereclause for OrderHed table.  """  
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      """  Whereclause for OrderHedAttch table.  """  
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      """  Whereclause for OHOrderMsc table.  """  
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      """  Whereclause for OrderDtl table.  """  
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      """  Whereclause for OrderDtlAttch table.  """  
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      """  Whereclause for OrderMsc table.  """  
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      """  Whereclause for OrderRel  table.  """  
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      """  Whereclause for RepComm table.  """  
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      """  Whereclause for SelectedSerialNumbers table.  """  
      self.whereClauseSerialNumberSearch:str = obj["whereClauseSerialNumberSearch"]
      """  Whereclause for SerialNumberSearch table.  """  
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      """  Whereclause for SNFormat table.  """  
      self.pageSize:int = obj["pageSize"]
      """  Page size.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Absolute page.  """  
      pass

class GetRowsCustomerTracker_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_OrderCustTrkTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsForCashReceipt_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRelTax
   whereClauseOrderHedUPS
   whereClauseOrderRepComm
   whereClauseOrderSched
   whereClauseHedTaxSum
   whereClauseOrderHist
   whereClausePartSubs
   whereClauseSelectedSerialNumbers
   whereClauseSNFormat
   whereClauseTaxConnectStatus
   groupID
   headNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      self.whereClauseOrderRelTax:str = obj["whereClauseOrderRelTax"]
      self.whereClauseOrderHedUPS:str = obj["whereClauseOrderHedUPS"]
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      self.whereClauseOrderSched:str = obj["whereClauseOrderSched"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseOrderHist:str = obj["whereClauseOrderHist"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.groupID:str = obj["groupID"]
      self.headNum:int = obj["headNum"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRowsForCashReceipt_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsForInvoice_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRelTax
   whereClauseOrderHedUPS
   whereClauseOrderRepComm
   whereClauseOrderSched
   whereClauseHedTaxSum
   whereClauseOrderHist
   whereClausePartSubs
   whereClauseSelectedSerialNumbers
   whereClauseSNFormat
   whereClauseTaxConnectStatus
   invoiceNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      self.whereClauseOrderRelTax:str = obj["whereClauseOrderRelTax"]
      self.whereClauseOrderHedUPS:str = obj["whereClauseOrderHedUPS"]
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      self.whereClauseOrderSched:str = obj["whereClauseOrderSched"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseOrderHist:str = obj["whereClauseOrderHist"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRowsForInvoice_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsForQuote_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRelTax
   whereClauseOrderHedUPS
   whereClauseOrderRepComm
   whereClauseOrderSched
   whereClauseHedTaxSum
   whereClauseOrderHist
   whereClausePartSubs
   whereClauseSelectedSerialNumbers
   whereClauseSNFormat
   whereClauseTaxConnectStatus
   quoteNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      self.whereClauseOrderRelTax:str = obj["whereClauseOrderRelTax"]
      self.whereClauseOrderHedUPS:str = obj["whereClauseOrderHedUPS"]
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      self.whereClauseOrderSched:str = obj["whereClauseOrderSched"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseOrderHist:str = obj["whereClauseOrderHist"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.quoteNum:int = obj["quoteNum"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRowsForQuote_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsForShipment_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRelTax
   whereClauseOrderHedUPS
   whereClauseOrderRepComm
   whereClauseOrderSched
   whereClauseHedTaxSum
   whereClauseOrderHist
   whereClausePartSubs
   whereClauseSelectedSerialNumbers
   whereClauseSNFormat
   whereClauseTaxConnectStatus
   packNum
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      self.whereClauseOrderRelTax:str = obj["whereClauseOrderRelTax"]
      self.whereClauseOrderHedUPS:str = obj["whereClauseOrderHedUPS"]
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      self.whereClauseOrderSched:str = obj["whereClauseOrderSched"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseOrderHist:str = obj["whereClauseOrderHist"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.packNum:int = obj["packNum"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRowsForShipment_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRows_input:
   """ Required : 
   whereClauseOrderHed
   whereClauseOrderHedAttch
   whereClauseOHOrderMsc
   whereClauseOrderDtl
   whereClauseOrderDtlAttch
   whereClauseOrderMsc
   whereClauseOrderRel
   whereClauseOrderRelTax
   whereClauseOrderHedUPS
   whereClauseOrderRepComm
   whereClauseOrderSched
   whereClauseHedTaxSum
   whereClauseOrderHist
   whereClausePartSubs
   whereClauseSelectedSerialNumbers
   whereClauseSNFormat
   whereClauseTaxConnectStatus
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseOrderHed:str = obj["whereClauseOrderHed"]
      self.whereClauseOrderHedAttch:str = obj["whereClauseOrderHedAttch"]
      self.whereClauseOHOrderMsc:str = obj["whereClauseOHOrderMsc"]
      self.whereClauseOrderDtl:str = obj["whereClauseOrderDtl"]
      self.whereClauseOrderDtlAttch:str = obj["whereClauseOrderDtlAttch"]
      self.whereClauseOrderMsc:str = obj["whereClauseOrderMsc"]
      self.whereClauseOrderRel:str = obj["whereClauseOrderRel"]
      self.whereClauseOrderRelTax:str = obj["whereClauseOrderRelTax"]
      self.whereClauseOrderHedUPS:str = obj["whereClauseOrderHedUPS"]
      self.whereClauseOrderRepComm:str = obj["whereClauseOrderRepComm"]
      self.whereClauseOrderSched:str = obj["whereClauseOrderSched"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseOrderHist:str = obj["whereClauseOrderHist"]
      self.whereClausePartSubs:str = obj["whereClausePartSubs"]
      self.whereClauseSelectedSerialNumbers:str = obj["whereClauseSelectedSerialNumbers"]
      self.whereClauseSNFormat:str = obj["whereClauseSNFormat"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRows_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetSalesOrderRelationshipMap_input:
   """ Required : 
   orderNum
   maxNumOfCards
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.maxNumOfCards:int = obj["maxNumOfCards"]
      pass

class GetSalesOrderRelationshipMap_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetSelectSerialNumbersParams_input:
   """ Required : 
   ipPartNum
   ipAttributeSetID
   ipWhseCode
   ipBinNum
   ipQuantity
   ipTranType
   ipRowID
   """  
   def __init__(self, obj):
      self.ipPartNum:str = obj["ipPartNum"]
      """  ipPartNum  """  
      self.ipAttributeSetID:int = obj["ipAttributeSetID"]
      """  ipAttributeSetID  """  
      self.ipWhseCode:str = obj["ipWhseCode"]
      """  ipWhseCode  """  
      self.ipBinNum:str = obj["ipBinNum"]
      """  ipBinNum  """  
      self.ipQuantity:int = obj["ipQuantity"]
      """  ipQuantity  """  
      self.ipTranType:str = obj["ipTranType"]
      """  ipTranType  """  
      self.ipRowID:str = obj["ipRowID"]
      """  ipRowID  """  
      pass

class GetSelectSerialNumbersParams_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SelectSerialNumbersParamsTableset] = obj["returnObj"]
      pass

class GetSmartString_input:
   """ Required : 
   OrderNum
   OrderLine
   PartNum
   RevisionNum
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Kit component order number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Kit component order line  """  
      self.PartNum:str = obj["PartNum"]
      """  The part being configured  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision being configured  """  
      pass

class GetSmartString_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.SmartString:str = obj["parameters"]
      self.CreatePart:bool = obj["CreatePart"]
      self.PromptForPartNum:bool = obj["PromptForPartNum"]
      self.NotifyOfExistingPart:bool = obj["NotifyOfExistingPart"]
      self.NewPartNum:str = obj["parameters"]
      self.CreateCustPart:bool = obj["CreateCustPart"]
      self.PromptForCustPartNum:bool = obj["PromptForCustPartNum"]
      self.NewCustPartNum:str = obj["parameters"]
      self.PromptForAutoCreatePart:bool = obj["PromptForAutoCreatePart"]
      pass

      """  output parameters  """  

class GetUIParams_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SOEntryUIParamsTableset] = obj["returnObj"]
      pass

class GlbSugPOChgDelete_input:
   """ Required : 
   cRowIdent
   """  
   def __init__(self, obj):
      self.cRowIdent:str = obj["cRowIdent"]
      """  The row ident of the record to delete  """  
      pass

class GlbSugPOChgDelete_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["returnObj"]
      pass

class GlbSugPOChgUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

class GlbSugPOChgUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GlbSugPOChgTableset] = obj["ds"]
      pass

      """  output parameters  """  

class HasMultipleSubs_input:
   """ Required : 
   iPartNum
   """  
   def __init__(self, obj):
      self.iPartNum:str = obj["iPartNum"]
      pass

class HasMultipleSubs_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class Ice_BOUpdErrorRow:
   def __init__(self, obj):
      self.TableName:str = obj["TableName"]
      self.ErrorLevel:str = obj["ErrorLevel"]
      self.ErrorType:str = obj["ErrorType"]
      self.ErrorText:str = obj["ErrorText"]
      self.ErrorSysRowID:str = obj["ErrorSysRowID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      pass

class Ice_BOUpdErrorTableset:
   def __init__(self, obj):
      self.BOUpdError:list[Ice_BOUpdErrorRow] = obj["BOUpdError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class InvoiceExists_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Order number  """  
      pass

class InvoiceExists_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      """  True if invoice exists, False if not.  """  
      pass

class IsRunOutOnHand_input:
   """ Required : 
   iPartNum
   """  
   def __init__(self, obj):
      self.iPartNum:str = obj["iPartNum"]
      pass

class IsRunOutOnHand_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class JobProdDelete_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iOrderRelNum
   cJobNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Order Release Number  """  
      self.cJobNum:str = obj["cJobNum"]
      """  Job Number  """  
      pass

class JobProdDelete_output:
   def __init__(self, obj):
      pass

class KitCompPartCreate_input:
   """ Required : 
   OrderNum
   OrderLine
   PartNum
   RevisionNum
   SmartString
   NewPartNum
   NewCustPartNum
   ResponseAutoCrtPart
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Kit component order number  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Kit component order line  """  
      self.PartNum:str = obj["PartNum"]
      """  The part being configured  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  The revision being configured  """  
      self.SmartString:str = obj["SmartString"]
      """  The generated smart string of the configuration  """  
      self.NewPartNum:str = obj["NewPartNum"]
      """  The Part Number to be used for a new part creation.  If blank, a part will not be created.  """  
      self.NewCustPartNum:str = obj["NewCustPartNum"]
      """  The Customer Part Number to stored on the order line.  """  
      self.ResponseAutoCrtPart:bool = obj["ResponseAutoCrtPart"]
      """  Answer to the question presented to user about auto creating a part.  """  
      pass

class KitCompPartCreate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.NewPartAlreadyExists:bool = obj["NewPartAlreadyExists"]
      pass

      """  output parameters  """  

class MasterUpdate_input:
   """ Required : 
   lCheckForOrderChangedMsg
   lcheckForResponse
   cTableName
   iCustNum
   iOrderNum
   lweLicensed
   ds
   """  
   def __init__(self, obj):
      self.lCheckForOrderChangedMsg:bool = obj["lCheckForOrderChangedMsg"]
      """  bool to determine whether to run code to check for order changed columns  """  
      self.lcheckForResponse:bool = obj["lcheckForResponse"]
      """  bool to determine whether to run code that may require user input  """  
      self.cTableName:str = obj["cTableName"]
      """  identifies which table was modified  """  
      self.iCustNum:int = obj["iCustNum"]
      """  The current custNum  """  
      self.iOrderNum:int = obj["iOrderNum"]
      """  The current orderNum  """  
      self.lweLicensed:bool = obj["lweLicensed"]
      """  whether the WE module is licensed  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class MasterUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.lContinue:bool = obj["lContinue"]
      self.cResponseMsg:str = obj["parameters"]
      self.cCreditShipAction:str = obj["parameters"]
      self.cDisplayMsg:str = obj["parameters"]
      self.cCompliantMsg:str = obj["parameters"]
      self.cResponseMsgOrdRel:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.cShipByDateMessage:str = obj["parameters"]
      self.cNeedByDateMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class NegativeInventoryTest_input:
   """ Required : 
   pcPartNum
   pcWhseCode
   pcBinNum
   pcLotNum
   pcAttributeSetID
   pcPCID
   pcDimCode
   pdDimConvFactor
   ipSellingQuantity
   """  
   def __init__(self, obj):
      self.pcPartNum:str = obj["pcPartNum"]
      self.pcWhseCode:str = obj["pcWhseCode"]
      self.pcBinNum:str = obj["pcBinNum"]
      self.pcLotNum:str = obj["pcLotNum"]
      self.pcAttributeSetID:int = obj["pcAttributeSetID"]
      self.pcPCID:str = obj["pcPCID"]
      self.pcDimCode:str = obj["pcDimCode"]
      self.pdDimConvFactor:int = obj["pdDimConvFactor"]
      self.ipSellingQuantity:int = obj["ipSellingQuantity"]
      pass

class NegativeInventoryTest_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.pcNeqQtyAction:str = obj["parameters"]
      self.pcMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class OnChangeARLOCID_input:
   """ Required : 
   ipARLOCID
   ds
   """  
   def __init__(self, obj):
      self.ipARLOCID:str = obj["ipARLOCID"]
      """  The Letter of Credit ID value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeARLOCID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opOverwriteValue:str = obj["parameters"]
      self.opFieldName:str = obj["parameters"]
      self.opMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeCardType_input:
   """ Required : 
   CardType
   ds
   """  
   def __init__(self, obj):
      self.CardType:str = obj["CardType"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeCardType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeCreditCardOrder_input:
   """ Required : 
   ipCreditCardOrder
   ds
   """  
   def __init__(self, obj):
      self.ipCreditCardOrder:bool = obj["ipCreditCardOrder"]
      """  Proposed CreditCardOrder value  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeCreditCardOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeHeaderShipTo_input:
   """ Required : 
   newHeaderShipToNum
   ds
   """  
   def __init__(self, obj):
      self.newHeaderShipToNum:str = obj["newHeaderShipToNum"]
      """  The proposed  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeHeaderShipTo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.TaxPricingFlag:bool = obj["TaxPricingFlag"]
      self.TaxRecalFlag:bool = obj["TaxRecalFlag"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfFixedAmount_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewFixedAmount
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewFixedAmount:int = obj["NewFixedAmount"]
      """  Proposed Fixed AMount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfFixedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfMktgCampaign_input:
   """ Required : 
   MktgCampaignID
   ds
   """  
   def __init__(self, obj):
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  The MktgCampaign Id  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfMktgCampaign_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfMktgEvnt_input:
   """ Required : 
   MktgCampaignID
   MktgEvntSeq
   ds
   """  
   def __init__(self, obj):
      self.MktgCampaignID:str = obj["MktgCampaignID"]
      """  The MktgCampaign Id  """  
      self.MktgEvntSeq:int = obj["MktgEvntSeq"]
      """  The MktgCampaign Id  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfMktgEvnt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfQuoteLine_input:
   """ Required : 
   quoteNum
   quoteLine
   ds
   """  
   def __init__(self, obj):
      self.quoteNum:int = obj["quoteNum"]
      """  The QuoteNum  """  
      self.quoteLine:int = obj["quoteLine"]
      """  The QuoteLine  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfQuoteLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfTaxAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   NewTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.NewTaxAmt:int = obj["NewTaxAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfTaxAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfTaxPercent_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   NewPercent
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.NewPercent:int = obj["NewPercent"]
      """  Proposed Percent.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeOfTaxPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeRateCode_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  Release tax rate code.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeRateCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeRelShipToNum_input:
   """ Required : 
   newShipToNum
   ds
   """  
   def __init__(self, obj):
      self.newShipToNum:str = obj["newShipToNum"]
      """  Proposed Order release Ship to.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeRelShipToNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.taxPricingFlag:bool = obj["taxPricingFlag"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeTaxCode_input:
   """ Required : 
   ipOrderNum
   ipLineNum
   ipRelNum
   ipTaxCode
   ds
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  Order Number.  """  
      self.ipLineNum:int = obj["ipLineNum"]
      """  Order line number.  """  
      self.ipRelNum:int = obj["ipRelNum"]
      """  Order Rel number.  """  
      self.ipTaxCode:str = obj["ipTaxCode"]
      """  Release tax code.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeTaxCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeTaxableAmt_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   TaxCode
   RateCode
   NewTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order Rel number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Release tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Release rate code.  """  
      self.NewTaxableAmt:int = obj["NewTaxableAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeTaxableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeTranDocTypeID_input:
   """ Required : 
   orderNum
   ds
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeTranDocTypeID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofBTConNum_input:
   """ Required : 
   NewBillToConNum
   ds
   """  
   def __init__(self, obj):
      self.NewBillToConNum:int = obj["NewBillToConNum"]
      """  Proposed bill to custid  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofBTConNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofBTCustID_input:
   """ Required : 
   NewBillToCustID
   ds
   """  
   def __init__(self, obj):
      self.NewBillToCustID:str = obj["NewBillToCustID"]
      """  Proposed bill to custid  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofBTCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineRelExemptTax_input:
   """ Required : 
   OrderNum
   OrderLine
   OrderRel
   """  
   def __init__(self, obj):
      self.OrderNum:int = obj["OrderNum"]
      """  Order Number.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line number.  """  
      self.OrderRel:int = obj["OrderRel"]
      """  Order release number.  """  
      pass

class OnChangeofLineRelExemptTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.AskManualQuestion:bool = obj["AskManualQuestion"]
      pass

      """  output parameters  """  

class OnChangeofPhaseID_input:
   """ Required : 
   ipPhaseID
   ipIsChanging
   ds
   """  
   def __init__(self, obj):
      self.ipPhaseID:str = obj["ipPhaseID"]
      """  Proposed Phase ID.  """  
      self.ipIsChanging:bool = obj["ipIsChanging"]
      """  Is called from column_changing.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofPhaseID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opProjMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofSoldToCreditCheck_input:
   """ Required : 
   iOrderNum
   iCustID
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      self.iCustID:str = obj["iCustID"]
      """  The Sold To Customer ID  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofSoldToCreditCheck_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cAgingMessage:str = obj["parameters"]
      self.lContinue:bool = obj["lContinue"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRgnWithColumnName_input:
   """ Required : 
   taxRegionCode
   columnName
   ds
   """  
   def __init__(self, obj):
      self.taxRegionCode:str = obj["taxRegionCode"]
      """  Proposed tax region code.  """  
      self.columnName:str = obj["columnName"]
      """  The name of the column being changed - TaxRegionCode or OTSTaxRegionCode  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofTaxRgnWithColumnName_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.taxMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRgn_input:
   """ Required : 
   iTaxRegionCode
   ds
   """  
   def __init__(self, obj):
      self.iTaxRegionCode:str = obj["iTaxRegionCode"]
      """  Proposed tax region code.  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OnChangeofTaxRgn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangingOrderSchedAmount_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      self.ts:list[Erp_Tablesets_SalesOrderTableset] = obj["ts"]
      pass

class OnChangingOrderSchedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_SalesOrderTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OnChangingOrderSchedPercent_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      self.ts:list[Erp_Tablesets_SalesOrderTableset] = obj["ts"]
      pass

class OnChangingOrderSchedPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_SalesOrderTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OrderDtlGetNewContracts_input:
   """ Required : 
   ds
   iOrderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The order number to add the line to  """  
      pass

class OrderDtlGetNewContracts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OrderDtlGetNewCounterSale_input:
   """ Required : 
   ds
   iOrderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The order number to add the line to  """  
      pass

class OrderDtlGetNewCounterSale_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OrderDtlGetNewFromQuote_input:
   """ Required : 
   ds
   iOrderNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The order number to add the line to  """  
      pass

class OrderDtlGetNewFromQuote_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OrderDtlQuoteLineChanging_input:
   """ Required : 
   quoteNum
   quoteLine
   ds
   """  
   def __init__(self, obj):
      self.quoteNum:int = obj["quoteNum"]
      """  The QuoteNum  """  
      self.quoteLine:int = obj["quoteLine"]
      """  The QuoteLine  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class OrderDtlQuoteLineChanging_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OverCreditLimitUpdateAllowed_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number  """  
      pass

class OverCreditLimitUpdateAllowed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.lUpdateAllowed:bool = obj["lUpdateAllowed"]
      pass

      """  output parameters  """  

class PhantomComponents_input:
   """ Required : 
   phPartNum
   OrderNum
   OrderLine
   errMessage
   """  
   def __init__(self, obj):
      self.phPartNum:str = obj["phPartNum"]
      """  The phantom part number  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Order number where the lines will be saved  """  
      self.OrderLine:int = obj["OrderLine"]
      """  Order line of the parent line  """  
      self.errMessage:str = obj["errMessage"]
      """  Returns any error messages found during the process  """  
      pass

class PhantomComponents_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class PopulateCallContext_input:
   """ Required : 
   orderNum
   orderLine
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.orderLine:int = obj["orderLine"]
      pass

class PopulateCallContext_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.callContext:str = obj["parameters"]
      pass

      """  output parameters  """  

class PreCopyOrder_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The order to copy  """  
      pass

class PreCopyOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.holdMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class PreOrder_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtSalesOrderTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class PreOrder_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtSalesOrderTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class ProcessCounterSaleUsingOrderLinesInDatabase_input:
   """ Required : 
   orderNum
   generatePackingSlip
   generateInvoice
   readyToShip
   creditShipAction
   ds
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The Order Number of the counter sale order to process  """  
      self.generatePackingSlip:bool = obj["generatePackingSlip"]
      """  Flag to indicate if the packing slip should be generated  """  
      self.generateInvoice:bool = obj["generateInvoice"]
      """  Flag to indicate if the invoice should be generated  """  
      self.readyToShip:bool = obj["readyToShip"]
      """  Indicates if the packing slip should be marked as ready to ship  """  
      self.creditShipAction:str = obj["creditShipAction"]
      """  indicates if customer should be placed on credit hold  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ProcessCounterSaleUsingOrderLinesInDatabase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.packNumList:str = obj["parameters"]
      self.invoiceNum:int = obj["parameters"]
      self.counterSaleMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ProcessCounterSale_input:
   """ Required : 
   iOrderNum
   lGeneratePackingSlip
   lGenerateInvoice
   lReadyToShip
   cCreditShipAction
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the counter sale order to process  """  
      self.lGeneratePackingSlip:bool = obj["lGeneratePackingSlip"]
      """  Flag to indicate if the packing slip should be generated  """  
      self.lGenerateInvoice:bool = obj["lGenerateInvoice"]
      """  Flag to indicate if the invoice should be generated  """  
      self.lReadyToShip:bool = obj["lReadyToShip"]
      """  Indicates if the packing slip should be marked as ready to ship  """  
      self.cCreditShipAction:str = obj["cCreditShipAction"]
      """  indicates if customer should be placed on credit hold  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ProcessCounterSale_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cPackNum:str = obj["parameters"]
      self.iInvoiceNum:int = obj["parameters"]
      self.opMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ProcessPayGateCreditCardStatus_input:
   """ Required : 
   creditCardStatus
   ds
   """  
   def __init__(self, obj):
      self.creditCardStatus:str = obj["creditCardStatus"]
      """  Credit card status  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ProcessPayGateCreditCardStatus_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ProcessPayGateMessage_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ProcessPayGateMessage_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ProcessQuickEntry_input:
   """ Required : 
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the order to process  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ProcessQuickEntry_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.lProcessComplete:bool = obj["lProcessComplete"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class REVISIONHISTORY06_output:
   def __init__(self, obj):
      pass

class RebuildShipUPS_input:
   """ Required : 
   ipCustNum
   ipShipToNum
   ds
   """  
   def __init__(self, obj):
      self.ipCustNum:int = obj["ipCustNum"]
      """  Customer to update  """  
      self.ipShipToNum:str = obj["ipShipToNum"]
      """  Ship To Num  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class RebuildShipUPS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RecalcKitPriceAfterConfig_input:
   """ Required : 
   iOrderNum
   iOrderLine
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  Sales Order Number for configured part  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  Sales Order Line for configured part  """  
      pass

class RecalcKitPriceAfterConfig_output:
   def __init__(self, obj):
      pass

class RemoveICPOLink_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order to remove the link from  """  
      pass

class RemoveICPOLink_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ReopenOrderLine_input:
   """ Required : 
   iOrderNum
   iOrderLine
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Line to reopen  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number to close  """  
      pass

class ReopenOrderLine_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ReopenOrder_input:
   """ Required : 
   iOrderNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order to reopen  """  
      pass

class ReopenOrder_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ReopenReleaseSetAttributeSetID_input:
   """ Required : 
   defaultAttributeSetID
   iOrderNum
   iOrderLine
   iOrderRelNum
   """  
   def __init__(self, obj):
      self.defaultAttributeSetID:int = obj["defaultAttributeSetID"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Release to reopen  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number of the Release to close  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Release Number of the Release to close  """  
      pass

class ReopenReleaseSetAttributeSetID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class ReopenRelease_input:
   """ Required : 
   iOrderNum
   iOrderLine
   iOrderRelNum
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Release to reopen  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number of the Release to close  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Release Number of the Release to close  """  
      pass

class ReopenRelease_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class SendLinkedICPOSuggestion_output:
   def __init__(self, obj):
      pass

class SetCalcQtysPref_input:
   """ Required : 
   ipCalcQtyPref
   """  
   def __init__(self, obj):
      self.ipCalcQtyPref:bool = obj["ipCalcQtyPref"]
      pass

class SetCalcQtysPref_output:
   def __init__(self, obj):
      pass

class SetKBMaxConfigProdID_input:
   """ Required : 
   orderNum
   orderLine
   kbConfigProdID
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Order Number  """  
      self.orderLine:int = obj["orderLine"]
      """  Order Line  """  
      self.kbConfigProdID:int = obj["kbConfigProdID"]
      """  CPQ Quote Product ID  """  
      pass

class SetKBMaxConfigProdID_output:
   def __init__(self, obj):
      pass

class SetReadyToCalc_input:
   """ Required : 
   ipOrderNum
   ds
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  The Order Number of the Order to remove the link from  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class SetReadyToCalc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SetReprintSOAckFlag_input:
   """ Required : 
   iOrderNum
   ds
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class SetReprintSOAckFlag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SetUPSQVEnable_input:
   """ Required : 
   ipQVEnable
   ds
   """  
   def __init__(self, obj):
      self.ipQVEnable:bool = obj["ipQVEnable"]
      """  logical indicating if the quantum view is to enabled/disabled  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class SetUPSQVEnable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SubmitNewOrder_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class SubmitNewOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateExistingOrder_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class UpdateExistingOrder_output:
   def __init__(self, obj):
      pass

class UpdateExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtSalesOrderTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtSalesOrderTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class UpdateKBMaxConfigurator_input:
   """ Required : 
   orderNum
   orderLine
   configuredProductJson
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  Order Number  """  
      self.orderLine:int = obj["orderLine"]
      """  Order Line  """  
      self.configuredProductJson:str = obj["configuredProductJson"]
      """  KBMax configurator data passed from the embed API  """  
      pass

class UpdateKBMaxConfigurator_output:
   def __init__(self, obj):
      pass

class UpdateOrderDtlDiscountPercent_input:
   """ Required : 
   orderNum
   orderLines
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      self.orderLines:str = obj["orderLines"]
      pass

class UpdateOrderDtlDiscountPercent_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class UpdatePartAllocQueue_input:
   """ Required : 
   orderNum
   action
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The sales order number  """  
      self.action:str = obj["action"]
      """  The fulfillment queue action to take ("SEND" or "REMOVE")  """  
      pass

class UpdatePartAllocQueue_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_SalesOrderTableset] = obj["returnObj"]
      pass

class Update_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class Update_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateBAQShippingDate_input:
   """ Required : 
   proposedDate
   originalDate
   dateColumnName
   plant
   """  
   def __init__(self, obj):
      self.proposedDate:str = obj["proposedDate"]
      """  New date to be validated  """  
      self.originalDate:str = obj["originalDate"]
      """  The date already set before being changed  """  
      self.dateColumnName:str = obj["dateColumnName"]
      """  The column the proposed date is from  """  
      self.plant:str = obj["plant"]
      """  The site set for the order release  """  
      pass

class ValidateBAQShippingDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invalidDateMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateCounterSaleSN_input:
   """ Required : 
   orderNum
   ds
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The Order Number of the counter sale order to validate  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateCounterSaleSN_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateCurrencyCode_input:
   """ Required : 
   currencyCode
   ds
   """  
   def __init__(self, obj):
      self.currencyCode:str = obj["currencyCode"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateCurrencyCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateCustomer_input:
   """ Required : 
   ds
   Cust
   Prj
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.Cust:str = obj["Cust"]
      """  CustID  """  
      self.Prj:str = obj["Prj"]
      """  ProjectID  """  
      pass

class ValidateCustomer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateInvCurrCode_input:
   """ Required : 
   invCurrCode
   ds
   """  
   def __init__(self, obj):
      self.invCurrCode:str = obj["invCurrCode"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateInvCurrCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateInvQty_input:
   """ Required : 
   ipOrderNum
   ds
   """  
   def __init__(self, obj):
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  The Order Number of the counter sale order to process  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateInvQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNegInvMessage:str = obj["parameters"]
      self.opNegQtyAction:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateOTSTaxID_input:
   """ Required : 
   ds
   manualValidation
   hmrcFraudPrevHeader
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.manualValidation:bool = obj["manualValidation"]
      self.hmrcFraudPrevHeader:str = obj["hmrcFraudPrevHeader"]
      pass

class ValidateOTSTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateOrderLinesTaxCategoryTypes_input:
   """ Required : 
   orderNum
   """  
   def __init__(self, obj):
      self.orderNum:int = obj["orderNum"]
      """  The order number to validate  """  
      pass

class ValidateOrderLinesTaxCategoryTypes_output:
   def __init__(self, obj):
      pass

class ValidateProjectID_input:
   """ Required : 
   ds
   Prj
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.Prj:str = obj["Prj"]
      """  ProjectID  """  
      pass

class ValidateProjectID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateSN_input:
   """ Required : 
   ipSerialNum
   ipPartNum
   ipAttributeSetID
   ipOurInvShipQty
   ipOrderNum
   ipOrderLine
   ipOrderRelNum
   ipWarehouseCode
   ipBinNum
   """  
   def __init__(self, obj):
      self.ipSerialNum:str = obj["ipSerialNum"]
      """  Serial number to validate.  """  
      self.ipPartNum:str = obj["ipPartNum"]
      """  Part number  """  
      self.ipAttributeSetID:int = obj["ipAttributeSetID"]
      """  Attribute Set  """  
      self.ipOurInvShipQty:int = obj["ipOurInvShipQty"]
      """  Inventory Ship Quantity  """  
      self.ipOrderNum:int = obj["ipOrderNum"]
      """  Order number  """  
      self.ipOrderLine:int = obj["ipOrderLine"]
      """  Order Line number  """  
      self.ipOrderRelNum:int = obj["ipOrderRelNum"]
      """  OrderRelease number  """  
      self.ipWarehouseCode:str = obj["ipWarehouseCode"]
      """  Ship from warehouse  """  
      self.ipBinNum:str = obj["ipBinNum"]
      """  Ship from bin  """  
      pass

class ValidateSN_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.isVoided:bool = obj["isVoided"]
      pass

      """  output parameters  """  

class ValidateSNs_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateSNs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateShippingDate_input:
   """ Required : 
   proposedDate
   dateColumnName
   dateColumnTable
   ds
   """  
   def __init__(self, obj):
      self.proposedDate:str = obj["proposedDate"]
      """  New date to be validated  """  
      self.dateColumnName:str = obj["dateColumnName"]
      """  The column the proposed date is from  """  
      self.dateColumnTable:str = obj["dateColumnTable"]
      """  The table that the validating date belongs to  """  
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

class ValidateShippingDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invalidDateMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      pass

      """  output parameters  """  

class VerifyReopenRelease_input:
   """ Required : 
   ds
   iOrderNum
   iOrderLine
   iOrderRelNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.iOrderNum:int = obj["iOrderNum"]
      """  The Order Number of the Order Release to reopen  """  
      self.iOrderLine:int = obj["iOrderLine"]
      """  The Order Line Number of the Release to close  """  
      self.iOrderRelNum:int = obj["iOrderRelNum"]
      """  The Release Number of the Release to close  """  
      pass

class VerifyReopenRelease_output:
   def __init__(self, obj):
      self.returnObj:int = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_SalesOrderTableset] = obj["ds"]
      self.cPromptMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class VerifySendICPOSugg_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cVerifySendMsgText:str = obj["parameters"]
      pass

      """  output parameters  """  

class chkCustomerCreditLimitForCopyOrder_input:
   """ Required : 
   CustNum
   OrderNum
   ARLocId
   NewLineAmt
   updCreditHold
   """  
   def __init__(self, obj):
      self.CustNum:int = obj["CustNum"]
      """  Customer for which we are validating the credit  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Number of the order  """  
      self.ARLocId:str = obj["ARLocId"]
      """  It indicates if the order has a Letter of Credit associated  """  
      self.NewLineAmt:int = obj["NewLineAmt"]
      """  In this case it's the OrderAmt  """  
      self.updCreditHold:bool = obj["updCreditHold"]
      """  Credit Hold  """  
      pass

class chkCustomerCreditLimitForCopyOrder_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cCreditOrderAction:str = obj["parameters"]
      self.cCreditShipAction:str = obj["parameters"]
      self.cCreditLimitMessage:str = obj["parameters"]
      self.cCreditStatus:str = obj["parameters"]
      pass

      """  output parameters  """  

class chkLtrOfCrdt_input:
   """ Required : 
   iOrderNum
   cARLOCID
   dTotalCharges
   """  
   def __init__(self, obj):
      self.iOrderNum:int = obj["iOrderNum"]
      """  Sales Order number  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  Letter of Credit ID  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  OrderHed.TotalCharges  """  
      pass

class chkLtrOfCrdt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class getBreakListCodeDesc_input:
   """ Required : 
   pcListCode
   pcPartNum
   pcLineWarehouse
   pcCurrencyCode
   pdtOrderDate
   """  
   def __init__(self, obj):
      self.pcListCode:str = obj["pcListCode"]
      self.pcPartNum:str = obj["pcPartNum"]
      self.pcLineWarehouse:str = obj["pcLineWarehouse"]
      self.pcCurrencyCode:str = obj["pcCurrencyCode"]
      self.pdtOrderDate:str = obj["pdtOrderDate"]
      pass

class getBreakListCodeDesc_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

