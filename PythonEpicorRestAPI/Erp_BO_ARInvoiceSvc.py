import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.ARInvoiceSvc
# Description: AR Invoice entry
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/$metadata",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get ARInvoices items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ARInvoices
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcHeadRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices",headers=creds) as resp:
           return await resp.json()

async def post_ARInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ARInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcHeadRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcHeadRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum(Company, InvoiceNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the ARInvoice item
   Description: Calls GetByID to retrieve the ARInvoice item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ARInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcHeadRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_ARInvoices_Company_InvoiceNum(Company, InvoiceNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update ARInvoice for the service
   Description: Calls UpdateExt to update ARInvoice. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ARInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcHeadRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_ARInvoices_Company_InvoiceNum(Company, InvoiceNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete ARInvoice item
   Description: Call UpdateExt to delete ARInvoice item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ARInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_AllocDeposits(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get AllocDeposits items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_AllocDeposits1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.AllocDepositRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/AllocDeposits",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_AllocDeposits_Company_InvoiceNum_DepInvoiceNum_DepGroupID_DepHeadNum(Company, InvoiceNum, DepInvoiceNum, DepGroupID, DepHeadNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the AllocDeposit item
   Description: Calls GetByID to retrieve the AllocDeposit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_AllocDeposit1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DepInvoiceNum: Desc: DepInvoiceNum   Required: True
      :param DepGroupID: Desc: DepGroupID   Required: True   Allow empty value : True
      :param DepHeadNum: Desc: DepHeadNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.AllocDepositRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/AllocDeposits(" + Company + "," + InvoiceNum + "," + DepInvoiceNum + "," + DepGroupID + "," + DepHeadNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_CentralCollectionPayments(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get CentralCollectionPayments items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_CentralCollectionPayments1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.CentralCollectionPaymentRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/CentralCollectionPayments",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_CentralCollectionPayments_Company_GroupID_HeadNum_InvoiceNum_InvoiceRef_Source(Company, InvoiceNum, GroupID, HeadNum, InvoiceRef, Source, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the CentralCollectionPayment item
   Description: Calls GetByID to retrieve the CentralCollectionPayment item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_CentralCollectionPayment1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param GroupID: Desc: GroupID   Required: True   Allow empty value : True
      :param HeadNum: Desc: HeadNum   Required: True
      :param InvoiceRef: Desc: InvoiceRef   Required: True
      :param Source: Desc: Source   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.CentralCollectionPaymentRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/CentralCollectionPayments(" + Company + "," + GroupID + "," + HeadNum + "," + InvoiceNum + "," + InvoiceRef + "," + Source + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcDtls(Company, InvoiceNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcDtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcDtls",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcDtls_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtl item
   Description: Calls GetByID to retrieve the InvcDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcScheds(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcScheds items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcScheds1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcScheds",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcScheds_Company_InvoiceNum_PaySeq(Company, InvoiceNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcSched item
   Description: Calls GetByID to retrieve the InvcSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcSched1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcScheds(" + Company + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_MXInvcHeadFiscalTexts(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get MXInvcHeadFiscalTexts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_MXInvcHeadFiscalTexts1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.MXInvcHeadFiscalTextRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/MXInvcHeadFiscalTexts",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_MXInvcHeadFiscalTexts_Company_InvoiceNum_FiscalTextSeq(Company, InvoiceNum, FiscalTextSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the MXInvcHeadFiscalText item
   Description: Calls GetByID to retrieve the MXInvcHeadFiscalText item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_MXInvcHeadFiscalText1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param FiscalTextSeq: Desc: FiscalTextSeq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.MXInvcHeadFiscalTextRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/MXInvcHeadFiscalTexts(" + Company + "," + InvoiceNum + "," + FiscalTextSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_MXInvcRefs(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get MXInvcRefs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_MXInvcRefs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.MXInvcRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/MXInvcRefs",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_MXInvcRefs_Company_InvoiceNum_RefInvoiceNum(Company, InvoiceNum, RefInvoiceNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the MXInvcRef item
   Description: Calls GetByID to retrieve the MXInvcRef item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_MXInvcRef1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param RefInvoiceNum: Desc: RefInvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.MXInvcRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/MXInvcRefs(" + Company + "," + InvoiceNum + "," + RefInvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcHeadAttches(Company, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcHeadAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcHeadAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcHeadAttches",headers=creds) as resp:
           return await resp.json()

async def get_ARInvoices_Company_InvoiceNum_InvcHeadAttches_Company_InvoiceNum_DrawingSeq(Company, InvoiceNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcHeadAttch item
   Description: Calls GetByID to retrieve the InvcHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcHeadAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/ARInvoices(" + Company + "," + InvoiceNum + ")/InvcHeadAttches(" + Company + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_AllocDeposits(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get AllocDeposits items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_AllocDeposits
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.AllocDepositRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/AllocDeposits",headers=creds) as resp:
           return await resp.json()

async def post_AllocDeposits(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_AllocDeposits
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.AllocDepositRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.AllocDepositRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/AllocDeposits", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_AllocDeposits_Company_InvoiceNum_DepInvoiceNum_DepGroupID_DepHeadNum(Company, InvoiceNum, DepInvoiceNum, DepGroupID, DepHeadNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the AllocDeposit item
   Description: Calls GetByID to retrieve the AllocDeposit item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_AllocDeposit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DepInvoiceNum: Desc: DepInvoiceNum   Required: True
      :param DepGroupID: Desc: DepGroupID   Required: True   Allow empty value : True
      :param DepHeadNum: Desc: DepHeadNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.AllocDepositRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/AllocDeposits(" + Company + "," + InvoiceNum + "," + DepInvoiceNum + "," + DepGroupID + "," + DepHeadNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_AllocDeposits_Company_InvoiceNum_DepInvoiceNum_DepGroupID_DepHeadNum(Company, InvoiceNum, DepInvoiceNum, DepGroupID, DepHeadNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update AllocDeposit for the service
   Description: Calls UpdateExt to update AllocDeposit. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_AllocDeposit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DepInvoiceNum: Desc: DepInvoiceNum   Required: True
      :param DepGroupID: Desc: DepGroupID   Required: True   Allow empty value : True
      :param DepHeadNum: Desc: DepHeadNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.AllocDepositRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/AllocDeposits(" + Company + "," + InvoiceNum + "," + DepInvoiceNum + "," + DepGroupID + "," + DepHeadNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_AllocDeposits_Company_InvoiceNum_DepInvoiceNum_DepGroupID_DepHeadNum(Company, InvoiceNum, DepInvoiceNum, DepGroupID, DepHeadNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete AllocDeposit item
   Description: Call UpdateExt to delete AllocDeposit item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_AllocDeposit
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DepInvoiceNum: Desc: DepInvoiceNum   Required: True
      :param DepGroupID: Desc: DepGroupID   Required: True   Allow empty value : True
      :param DepHeadNum: Desc: DepHeadNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/AllocDeposits(" + Company + "," + InvoiceNum + "," + DepInvoiceNum + "," + DepGroupID + "," + DepHeadNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_CentralCollectionPayments(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get CentralCollectionPayments items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_CentralCollectionPayments
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.CentralCollectionPaymentRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/CentralCollectionPayments",headers=creds) as resp:
           return await resp.json()

async def post_CentralCollectionPayments(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_CentralCollectionPayments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.CentralCollectionPaymentRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.CentralCollectionPaymentRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/CentralCollectionPayments", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_CentralCollectionPayments_Company_GroupID_HeadNum_InvoiceNum_InvoiceRef_Source(Company, GroupID, HeadNum, InvoiceNum, InvoiceRef, Source, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the CentralCollectionPayment item
   Description: Calls GetByID to retrieve the CentralCollectionPayment item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_CentralCollectionPayment
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param GroupID: Desc: GroupID   Required: True   Allow empty value : True
      :param HeadNum: Desc: HeadNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceRef: Desc: InvoiceRef   Required: True
      :param Source: Desc: Source   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.CentralCollectionPaymentRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/CentralCollectionPayments(" + Company + "," + GroupID + "," + HeadNum + "," + InvoiceNum + "," + InvoiceRef + "," + Source + ")",headers=creds) as resp:
           return await resp.json()

async def patch_CentralCollectionPayments_Company_GroupID_HeadNum_InvoiceNum_InvoiceRef_Source(Company, GroupID, HeadNum, InvoiceNum, InvoiceRef, Source, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update CentralCollectionPayment for the service
   Description: Calls UpdateExt to update CentralCollectionPayment. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_CentralCollectionPayment
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param GroupID: Desc: GroupID   Required: True   Allow empty value : True
      :param HeadNum: Desc: HeadNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceRef: Desc: InvoiceRef   Required: True
      :param Source: Desc: Source   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.CentralCollectionPaymentRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/CentralCollectionPayments(" + Company + "," + GroupID + "," + HeadNum + "," + InvoiceNum + "," + InvoiceRef + "," + Source + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_CentralCollectionPayments_Company_GroupID_HeadNum_InvoiceNum_InvoiceRef_Source(Company, GroupID, HeadNum, InvoiceNum, InvoiceRef, Source, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete CentralCollectionPayment item
   Description: Call UpdateExt to delete CentralCollectionPayment item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_CentralCollectionPayment
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param GroupID: Desc: GroupID   Required: True   Allow empty value : True
      :param HeadNum: Desc: HeadNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceRef: Desc: InvoiceRef   Required: True
      :param Source: Desc: Source   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/CentralCollectionPayments(" + Company + "," + GroupID + "," + HeadNum + "," + InvoiceNum + "," + InvoiceRef + "," + Source + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcDtls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls",headers=creds) as resp:
           return await resp.json()

async def post_InvcDtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtl item
   Description: Calls GetByID to retrieve the InvcDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcDtls_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcDtl for the service
   Description: Calls UpdateExt to update InvcDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcDtls_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcDtl item
   Description: Call UpdateExt to delete InvcDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcChrgs(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcChrgs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcChrgs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcChrgRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcChrgs",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcChrgs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcChrg item
   Description: Calls GetByID to retrieve the InvcChrg item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcChrg1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcChrgRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcChrgs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDeferredRevs(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcDeferredRevs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcDeferredRevs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDeferredRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDeferredRevs",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDeferredRevs_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDeferredRev item
   Description: Calls GetByID to retrieve the InvcDeferredRev item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDeferredRev1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDeferredRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDeferredRevs(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlRASches(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcDtlRASches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcDtlRASches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlRASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlRASches",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlRASches_Company_InvoiceNum_InvoiceLine_AmortSeq(Company, InvoiceNum, InvoiceLine, AmortSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlRASch item
   Description: Calls GetByID to retrieve the InvcDtlRASch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlRASch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlRASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlRASches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcMiscs(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcMiscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcMiscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcMiscs",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcMiscs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcMisc item
   Description: Calls GetByID to retrieve the InvcMisc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcMisc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcMiscs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcTaxes(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcTaxes",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcTaxes_Company_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcTax item
   Description: Calls GetByID to retrieve the InvcTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcTaxes(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlTGLCs(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcDtlTGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcDtlTGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlTGLCs",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlTGLCs_Company_InvoiceNum_InvoiceLine_SysRowID(Company, InvoiceNum, InvoiceLine, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlTGLC item
   Description: Calls GetByID to retrieve the InvcDtlTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlTGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlTGLCs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlAttches(Company, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get InvcDtlAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_InvcDtlAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlAttches",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtls_Company_InvoiceNum_InvoiceLine_InvcDtlAttches_Company_InvoiceNum_InvoiceLine_DrawingSeq(Company, InvoiceNum, InvoiceLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlAttch item
   Description: Calls GetByID to retrieve the InvcDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtls(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")/InvcDtlAttches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcChrgs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcChrgs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcChrgs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcChrgRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcChrgs",headers=creds) as resp:
           return await resp.json()

async def post_InvcChrgs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcChrgs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcChrgRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcChrgRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcChrgs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcChrgs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcChrg item
   Description: Calls GetByID to retrieve the InvcChrg item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcChrg
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcChrgRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcChrgs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcChrgs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcChrg for the service
   Description: Calls UpdateExt to update InvcChrg. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcChrg
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcChrgRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcChrgs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcChrgs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcChrg item
   Description: Call UpdateExt to delete InvcChrg item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcChrg
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcChrgs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDeferredRevs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcDeferredRevs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcDeferredRevs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDeferredRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDeferredRevs",headers=creds) as resp:
           return await resp.json()

async def post_InvcDeferredRevs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcDeferredRevs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcDeferredRevRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcDeferredRevRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDeferredRevs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcDeferredRevs_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDeferredRev item
   Description: Calls GetByID to retrieve the InvcDeferredRev item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDeferredRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDeferredRevRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDeferredRevs(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcDeferredRevs_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcDeferredRev for the service
   Description: Calls UpdateExt to update InvcDeferredRev. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcDeferredRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcDeferredRevRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDeferredRevs(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcDeferredRevs_Company_InvoiceNum_InvoiceLine(Company, InvoiceNum, InvoiceLine, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcDeferredRev item
   Description: Call UpdateExt to delete InvcDeferredRev item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcDeferredRev
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDeferredRevs(" + Company + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlRASches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcDtlRASches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcDtlRASches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlRASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlRASches",headers=creds) as resp:
           return await resp.json()

async def post_InvcDtlRASches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcDtlRASches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcDtlRASchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcDtlRASchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlRASches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlRASches_Company_InvoiceNum_InvoiceLine_AmortSeq(Company, InvoiceNum, InvoiceLine, AmortSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlRASch item
   Description: Calls GetByID to retrieve the InvcDtlRASch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlRASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlRASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlRASches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcDtlRASches_Company_InvoiceNum_InvoiceLine_AmortSeq(Company, InvoiceNum, InvoiceLine, AmortSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcDtlRASch for the service
   Description: Calls UpdateExt to update InvcDtlRASch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcDtlRASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcDtlRASchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlRASches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcDtlRASches_Company_InvoiceNum_InvoiceLine_AmortSeq(Company, InvoiceNum, InvoiceLine, AmortSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcDtlRASch item
   Description: Call UpdateExt to delete InvcDtlRASch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcDtlRASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlRASches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcMiscs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcMiscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcMiscs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcMiscs",headers=creds) as resp:
           return await resp.json()

async def post_InvcMiscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcMiscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcMiscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcMiscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcMiscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcMiscs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcMisc item
   Description: Calls GetByID to retrieve the InvcMisc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcMiscs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcMiscs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcMisc for the service
   Description: Calls UpdateExt to update InvcMisc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcMiscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcMiscs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcMiscs_Company_InvoiceNum_InvoiceLine_SeqNum(Company, InvoiceNum, InvoiceLine, SeqNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcMisc item
   Description: Call UpdateExt to delete InvcMisc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SeqNum: Desc: SeqNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcMiscs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SeqNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcTaxes",headers=creds) as resp:
           return await resp.json()

async def post_InvcTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcTaxes_Company_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcTax item
   Description: Calls GetByID to retrieve the InvcTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcTaxes(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcTaxes_Company_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcTax for the service
   Description: Calls UpdateExt to update InvcTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcTaxes(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcTaxes_Company_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcTax item
   Description: Call UpdateExt to delete InvcTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcTaxes(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlTGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcDtlTGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcDtlTGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlTGLCs",headers=creds) as resp:
           return await resp.json()

async def post_InvcDtlTGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcDtlTGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcDtlTGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcDtlTGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlTGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlTGLCs_Company_InvoiceNum_InvoiceLine_SysRowID(Company, InvoiceNum, InvoiceLine, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlTGLC item
   Description: Calls GetByID to retrieve the InvcDtlTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlTGLCs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcDtlTGLCs_Company_InvoiceNum_InvoiceLine_SysRowID(Company, InvoiceNum, InvoiceLine, SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcDtlTGLC for the service
   Description: Calls UpdateExt to update InvcDtlTGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcDtlTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcDtlTGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlTGLCs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcDtlTGLCs_Company_InvoiceNum_InvoiceLine_SysRowID(Company, InvoiceNum, InvoiceLine, SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcDtlTGLC item
   Description: Call UpdateExt to delete InvcDtlTGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcDtlTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlTGLCs(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcDtlAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcDtlAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlAttches",headers=creds) as resp:
           return await resp.json()

async def post_InvcDtlAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcDtlAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcDtlAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcDtlAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcDtlAttches_Company_InvoiceNum_InvoiceLine_DrawingSeq(Company, InvoiceNum, InvoiceLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcDtlAttch item
   Description: Calls GetByID to retrieve the InvcDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlAttches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcDtlAttches_Company_InvoiceNum_InvoiceLine_DrawingSeq(Company, InvoiceNum, InvoiceLine, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcDtlAttch for the service
   Description: Calls UpdateExt to update InvcDtlAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcDtlAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlAttches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcDtlAttches_Company_InvoiceNum_InvoiceLine_DrawingSeq(Company, InvoiceNum, InvoiceLine, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcDtlAttch item
   Description: Call UpdateExt to delete InvcDtlAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcDtlAttches(" + Company + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcScheds(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcScheds items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcScheds
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcScheds",headers=creds) as resp:
           return await resp.json()

async def post_InvcScheds(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcScheds
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcSchedRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcSchedRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcScheds", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcScheds_Company_InvoiceNum_PaySeq(Company, InvoiceNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcSched item
   Description: Calls GetByID to retrieve the InvcSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcScheds(" + Company + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcScheds_Company_InvoiceNum_PaySeq(Company, InvoiceNum, PaySeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcSched for the service
   Description: Calls UpdateExt to update InvcSched. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcSchedRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcScheds(" + Company + "," + InvoiceNum + "," + PaySeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcScheds_Company_InvoiceNum_PaySeq(Company, InvoiceNum, PaySeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcSched item
   Description: Call UpdateExt to delete InvcSched item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcScheds(" + Company + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_MXInvcHeadFiscalTexts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get MXInvcHeadFiscalTexts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_MXInvcHeadFiscalTexts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.MXInvcHeadFiscalTextRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcHeadFiscalTexts",headers=creds) as resp:
           return await resp.json()

async def post_MXInvcHeadFiscalTexts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_MXInvcHeadFiscalTexts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.MXInvcHeadFiscalTextRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.MXInvcHeadFiscalTextRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcHeadFiscalTexts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_MXInvcHeadFiscalTexts_Company_InvoiceNum_FiscalTextSeq(Company, InvoiceNum, FiscalTextSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the MXInvcHeadFiscalText item
   Description: Calls GetByID to retrieve the MXInvcHeadFiscalText item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_MXInvcHeadFiscalText
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param FiscalTextSeq: Desc: FiscalTextSeq   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.MXInvcHeadFiscalTextRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcHeadFiscalTexts(" + Company + "," + InvoiceNum + "," + FiscalTextSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_MXInvcHeadFiscalTexts_Company_InvoiceNum_FiscalTextSeq(Company, InvoiceNum, FiscalTextSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update MXInvcHeadFiscalText for the service
   Description: Calls UpdateExt to update MXInvcHeadFiscalText. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_MXInvcHeadFiscalText
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param FiscalTextSeq: Desc: FiscalTextSeq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.MXInvcHeadFiscalTextRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcHeadFiscalTexts(" + Company + "," + InvoiceNum + "," + FiscalTextSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_MXInvcHeadFiscalTexts_Company_InvoiceNum_FiscalTextSeq(Company, InvoiceNum, FiscalTextSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete MXInvcHeadFiscalText item
   Description: Call UpdateExt to delete MXInvcHeadFiscalText item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_MXInvcHeadFiscalText
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param FiscalTextSeq: Desc: FiscalTextSeq   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcHeadFiscalTexts(" + Company + "," + InvoiceNum + "," + FiscalTextSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_MXInvcRefs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get MXInvcRefs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_MXInvcRefs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.MXInvcRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcRefs",headers=creds) as resp:
           return await resp.json()

async def post_MXInvcRefs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_MXInvcRefs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.MXInvcRefRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.MXInvcRefRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcRefs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_MXInvcRefs_Company_InvoiceNum_RefInvoiceNum(Company, InvoiceNum, RefInvoiceNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the MXInvcRef item
   Description: Calls GetByID to retrieve the MXInvcRef item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_MXInvcRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param RefInvoiceNum: Desc: RefInvoiceNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.MXInvcRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcRefs(" + Company + "," + InvoiceNum + "," + RefInvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_MXInvcRefs_Company_InvoiceNum_RefInvoiceNum(Company, InvoiceNum, RefInvoiceNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update MXInvcRef for the service
   Description: Calls UpdateExt to update MXInvcRef. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_MXInvcRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param RefInvoiceNum: Desc: RefInvoiceNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.MXInvcRefRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcRefs(" + Company + "," + InvoiceNum + "," + RefInvoiceNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_MXInvcRefs_Company_InvoiceNum_RefInvoiceNum(Company, InvoiceNum, RefInvoiceNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete MXInvcRef item
   Description: Call UpdateExt to delete MXInvcRef item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_MXInvcRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param RefInvoiceNum: Desc: RefInvoiceNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/MXInvcRefs(" + Company + "," + InvoiceNum + "," + RefInvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_InvcHeadAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get InvcHeadAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_InvcHeadAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcHeadAttches",headers=creds) as resp:
           return await resp.json()

async def post_InvcHeadAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_InvcHeadAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.InvcHeadAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.InvcHeadAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcHeadAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_InvcHeadAttches_Company_InvoiceNum_DrawingSeq(Company, InvoiceNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the InvcHeadAttch item
   Description: Calls GetByID to retrieve the InvcHeadAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_InvcHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.InvcHeadAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcHeadAttches(" + Company + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_InvcHeadAttches_Company_InvoiceNum_DrawingSeq(Company, InvoiceNum, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update InvcHeadAttch for the service
   Description: Calls UpdateExt to update InvcHeadAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_InvcHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.InvcHeadAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcHeadAttches(" + Company + "," + InvoiceNum + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_InvcHeadAttches_Company_InvoiceNum_DrawingSeq(Company, InvoiceNum, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete InvcHeadAttch item
   Description: Call UpdateExt to delete InvcHeadAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_InvcHeadAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param InvoiceNum: Desc: InvoiceNum   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/InvcHeadAttches(" + Company + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_HedTaxSums(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get HedTaxSums items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_HedTaxSums
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.HedTaxSumRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/HedTaxSums",headers=creds) as resp:
           return await resp.json()

async def post_HedTaxSums(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_HedTaxSums
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/HedTaxSums", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the HedTaxSum item
   Description: Calls GetByID to retrieve the HedTaxSum item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update HedTaxSum for the service
   Description: Calls UpdateExt to update HedTaxSum. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.HedTaxSumRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_HedTaxSums_Company_HedNum_TaxCode_RateCode_AllocDepInvcNum(Company, HedNum, TaxCode, RateCode, AllocDepInvcNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete HedTaxSum item
   Description: Call UpdateExt to delete HedTaxSum item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_HedTaxSum
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param HedNum: Desc: HedNum   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param AllocDepInvcNum: Desc: AllocDepInvcNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/HedTaxSums(" + Company + "," + HedNum + "," + TaxCode + "," + RateCode + "," + AllocDepInvcNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_LegalNumGenOpts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get LegalNumGenOpts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_LegalNumGenOpts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.LegalNumGenOptsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/LegalNumGenOpts",headers=creds) as resp:
           return await resp.json()

async def post_LegalNumGenOpts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_LegalNumGenOpts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/LegalNumGenOpts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the LegalNumGenOpt item
   Description: Calls GetByID to retrieve the LegalNumGenOpt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update LegalNumGenOpt for the service
   Description: Calls UpdateExt to update LegalNumGenOpt. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete LegalNumGenOpt item
   Description: Call UpdateExt to delete LegalNumGenOpt item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")",headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get TaxConnectStatus items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_TaxConnectStatus
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/TaxConnectStatus",headers=creds) as resp:
           return await resp.json()

async def post_TaxConnectStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_TaxConnectStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/TaxConnectStatus", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus_Company(Company, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the TaxConnectStatu item
   Description: Calls GetByID to retrieve the TaxConnectStatu item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def patch_TaxConnectStatus_Company(Company, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update TaxConnectStatu for the service
   Description: Calls UpdateExt to update TaxConnectStatu. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/TaxConnectStatus(" + Company + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_TaxConnectStatus_Company(Company, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete TaxConnectStatu item
   Description: Call UpdateExt to delete TaxConnectStatu item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def get_List(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.InvcHeadListRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def get_GetRows(whereClauseInvcHead, whereClauseInvcHeadAttch, whereClauseAllocDeposit, whereClauseCentralCollectionPayment, whereClauseInvcDtl, whereClauseInvcDtlAttch, whereClauseInvcChrg, whereClauseInvcDeferredRev, whereClauseInvcDtlRASch, whereClauseInvcMisc, whereClauseInvcTax, whereClauseInvcDtlTGLC, whereClauseInvcSched, whereClauseMXInvcHeadFiscalText, whereClauseMXInvcRef, whereClauseHedTaxSum, whereClauseLegalNumGenOpts, whereClauseTaxConnectStatus, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcHead=" + whereClauseInvcHead
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcHeadAttch=" + whereClauseInvcHeadAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAllocDeposit=" + whereClauseAllocDeposit
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseCentralCollectionPayment=" + whereClauseCentralCollectionPayment
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcDtl=" + whereClauseInvcDtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcDtlAttch=" + whereClauseInvcDtlAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcChrg=" + whereClauseInvcChrg
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcDeferredRev=" + whereClauseInvcDeferredRev
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcDtlRASch=" + whereClauseInvcDtlRASch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcMisc=" + whereClauseInvcMisc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcTax=" + whereClauseInvcTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcDtlTGLC=" + whereClauseInvcDtlTGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseInvcSched=" + whereClauseInvcSched
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseMXInvcHeadFiscalText=" + whereClauseMXInvcHeadFiscalText
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseMXInvcRef=" + whereClauseMXInvcRef
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseHedTaxSum=" + whereClauseHedTaxSum
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseLegalNumGenOpts=" + whereClauseLegalNumGenOpts
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseTaxConnectStatus=" + whereClauseTaxConnectStatus
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetByID(invoiceNum, epicorHeaders = None):
   """  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "invoiceNum=" + invoiceNum

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetList(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcChrg(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcChrg
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcChrg
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcChrg_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcChrg_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcDtlRASch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcDtlRASch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcDtlRASch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcDtlRASch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcDtlRASch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcMisc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcMisc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcMisc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcMisc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcMisc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcDtlTGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcDtlTGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcDtlTGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcDtlTGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcDtlTGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcSched(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcSched
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcSched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcSched_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcSched_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewMXInvcHeadFiscalText(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewMXInvcHeadFiscalText
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewMXInvcHeadFiscalText
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewMXInvcHeadFiscalText_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewMXInvcHeadFiscalText_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewMXInvcRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewMXInvcRef
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewMXInvcRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewMXInvcRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewMXInvcRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteByID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowID(id, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "id=" + id

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowIDs(ids, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "ids=" + ids

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_Update(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangedCODebitNote(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangedCODebitNote
   Description: Performs required logic when InvcHead.CODebitNote is modified.
   OperationID: OnChangedCODebitNote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangedCODebitNote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangedCODebitNote_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCOOperType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCOOperType
   Description: Performs required logic when InvcHead.COOperType is modified.
   OperationID: ChangeCOOperType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCOOperType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCOOperType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMXTaxRcptType(epicorHeaders = None):
   """  
   Summary: Invoke method GetMXTaxRcptType
   Description: Gets the current status of the Mexican Digital Tax Receipts, valid results can be
Disabled, CFD and CFDI
   OperationID: GetMXTaxRcptType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMXTaxRcptType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_UpdateMXCancellationID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMXCancellationID
   Description: Update MXCancellationID and MXCancellationStatus
   OperationID: UpdateMXCancellationID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMXCancellationID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMXCancellationID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMXGlobalInvoicePeriod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMXGlobalInvoicePeriod
   Description: Mexico CSF Update Global Invoice Period (used in the opened transaction scope for InvcHead)
   OperationID: UpdateMXGlobalInvoicePeriod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMXGlobalInvoicePeriod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMXGlobalInvoicePeriod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMXExportType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMXExportType
   Description: Return MXExportType 01 - No aplica, 02 - Definitiva, 03 - Temporal (should be as UserCodes)
   OperationID: GetMXExportType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMXExportType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMXExportType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfMXCancellationMode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfMXCancellationMode
   Description: Performs required logic when InvcHead.MXCancellationMode is modified.
   OperationID: OnChangeOfMXCancellationMode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfMXCancellationMode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfMXCancellationMode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMXExportOperationType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMXExportOperationType
   Description: Performs required logic when InvcHead.MXExportOperationType is modified
   OperationID: ChangeMXExportOperationType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMXExportOperationType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMXExportOperationType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMXPurchaseType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMXPurchaseType
   Description: Performs required logic when InvcHead.MXPurchaseType is modified.
   OperationID: ChangeMXPurchaseType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMXPurchaseType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMXPurchaseType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMXSubstInvoiceNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMXSubstInvoiceNum
   Description: Performs required logic when InvcHead.MXSubstInvoiceNum is modified.
   OperationID: ChangeMXSubstInvoiceNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMXSubstInvoiceNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMXSubstInvoiceNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMXProdServCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMXProdServCode
   Description: Performs required logic when InvcDtl.MXProdServCode is modified.
   OperationID: ChangeMXProdServCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMXProdServCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMXProdServCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_createNewMXInvcHeadFiscalText(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method createNewMXInvcHeadFiscalText
   Description: Creation MXInvcHeadFiscalText records for selected Invoice and Customer. Method should be run in open Transaction scope
   OperationID: createNewMXInvcHeadFiscalText
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/createNewMXInvcHeadFiscalText_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/createNewMXInvcHeadFiscalText_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_LookupMXInvcRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method LookupMXInvcRef
   OperationID: LookupMXInvcRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/LookupMXInvcRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/LookupMXInvcRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckMXInvcRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckMXInvcRef
   OperationID: CheckMXInvcRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckMXInvcRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckMXInvcRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMXInvcRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMXInvcRef
   Description: Update MXInvoiceRef. Standard update not worked for keyed field
   OperationID: UpdateMXInvcRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMXInvcRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMXInvcRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RemoveMXInvcRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RemoveMXInvcRef
   Description: Remove all MXInvcRef linked to invoice
   OperationID: RemoveMXInvcRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RemoveMXInvcRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RemoveMXInvcRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineRevNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineRevNum
   Description: This method should be called when the revision number on the invoice detail
record is changed.
   OperationID: OnChangeofLineRevNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineRevNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineRevNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineSalesUM(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineSalesUM
   Description: This method should be called when the sales UM on the invoice detail
record is changed.
   OperationID: OnChangeofLineSalesUM
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineSalesUM_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineSalesUM_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineShipDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineShipDate
   Description: This method should be called when the ship date on the invoice detail
record is changed.
   OperationID: OnChangeofLineShipDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineShipDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineShipDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfLineShipToCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfLineShipToCustID
   Description: This method should be called when the Customer ShipTo ID on the invoice detail
record is changed.
   OperationID: OnChangeOfLineShipToCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfLineShipToCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfLineShipToCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineShipToNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineShipToNum
   Description: This method should be called when the ship to number on the invoice detail
record is changed.
   OperationID: OnChangeofLineShipToNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineShipToNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineShipToNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineShipVia(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineShipVia
   Description: This method should be called when the ship via on the invoice detail
record is changed.
   OperationID: OnChangeofLineShipVia
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineShipVia_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineShipVia_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineTaxCat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineTaxCat
   Description: This method should be called when the Tax category on the invoice detail
record is changed.
   OperationID: OnChangeofLineTaxCat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineTaxCat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineTaxCat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineTaxExempt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineTaxExempt
   Description: This method should be called when the Tax exempt on the invoice detail
record is changed.
   OperationID: OnChangeofLineTaxExempt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineTaxExempt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineTaxExempt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineTaxRgn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineTaxRgn
   Description: This method should be called when the Tax Region on the invoice detail
record is changed.
   OperationID: OnChangeofLineTaxRgn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineTaxRgn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineTaxRgn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineUnitPrice
   Description: This method should be called when the unit price on the invoice detail
record is changed.
   OperationID: OnChangeofLineUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLinkedInvcUnitPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLinkedInvcUnitPrice
   Description: This method should be called when the Linked invoice unit price on the BoE detail
record is changed.
   OperationID: OnChangeofLinkedInvcUnitPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLinkedInvcUnitPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLinkedInvcUnitPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLockRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLockRate
   Description: This method should be called when the invoice lock rate has been changed.
   OperationID: OnChangeofLockRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLockRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLockRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofManualTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofManualTax
   Description: This method should be called when the manual tax switch on the invoice tax
record is changed.
   OperationID: OnChangeofManualTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofManualTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofManualTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofMiscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofMiscAmt
   Description: Calculates the amounts for Miscellaneous charges when the misc. amt. changes.
   OperationID: OnChangeofMiscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofMiscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofMiscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofMiscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofMiscCode
   Description: Obtains defaults from the MiscCode table. This method needs to be called when
a code is being changed or after a new InvcMisc record is obtained.
   OperationID: OnChangeofMiscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofMiscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofMiscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofMiscPrcnt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofMiscPrcnt
   Description: Calculates the amounts for Miscellaneous charges when the misc. percentage changes.
   OperationID: OnChangeofMiscPrcnt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofMiscPrcnt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofMiscPrcnt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofOrderNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofOrderNum
   Description: This method should be called before the Order number has been updated.
   OperationID: OnChangeofOrderNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPayMethod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPayMethod
   Description: Method to call when changing the payment amount on the payment schedule for
   OperationID: OnChangeofPayMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPayMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPayMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPECharges(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPECharges
   Description: This method should be called when the InvcHead.PECharges is changed.
   OperationID: OnChangeofPECharges
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPECharges_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPECharges_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPECommissions(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPECommissions
   Description: This method should be called when the InvcHead.PECommissions is changed.
   OperationID: OnChangeofPECommissions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPECommissions_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPECommissions_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPEDischargeAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPEDischargeAmt
   Description: This method should be called when the InvcHead.PEDischargeAmt is changed.
   OperationID: OnChangeofPEDischargeAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPEDischargeAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPEDischargeAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPEInterest(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPEInterest
   Description: This method should be called when the InvcHead.PEInterest is changed.
   OperationID: OnChangeofPEInterest
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPEInterest_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPEInterest_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPENoPayPenalty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPENoPayPenalty
   Description: This method should be called when the InvcHead.PENoPayPenalty is changed.
   OperationID: OnChangeofPENoPayPenalty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPENoPayPenalty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPENoPayPenalty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPlant(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPlant
   Description: This method should be called when the plant is changed.
   OperationID: OnChangeofPlant
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPlant_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPlant_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfRACode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfRACode
   OperationID: OnChangeOfRACode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfRACode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfRACode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofRateCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofRateCode
   Description: This method should be called when the tax code on the invoice tax
record is changed.
   OperationID: OnChangeofRateCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofRateCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofRateCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofRateGrpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofRateGrpCode
   OperationID: OnChangeofRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofSalesRep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofSalesRep
   Description: This method should be called when a sales rep code on the invoice header
record is changed.  All the line items will be updated with the new sales rep.
   OperationID: OnChangeofSalesRep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofSalesRep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofSalesRep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofShipDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofShipDate
   Description: This method should be called before the shipment date has been updated.
   OperationID: OnChangeofShipDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofShipDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofShipDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofSoldToCustID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofSoldToCustID
   Description: This method returns the Sold To customer info.
   OperationID: OnChangeofSoldToCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofSoldToCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofSoldToCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCreditAgingWarningsDefaultDelim(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCreditAgingWarningsDefaultDelim
   Description: the wrapper method of the method 'CheckCreditAgingWarnings' which accepts parameters with the standard list separator: '~'
   OperationID: CheckCreditAgingWarningsDefaultDelim
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCreditAgingWarningsDefaultDelim_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCreditAgingWarningsDefaultDelim_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCreditAgingWarnings(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCreditAgingWarnings
   OperationID: CheckCreditAgingWarnings
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCreditAgingWarnings_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCreditAgingWarnings_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxableAmt
   Description: This method should be called when the taxable amount on the invoice tax
record is changed.
   OperationID: OnChangeofTaxableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxAmt
   Description: This method should be called when the tax amount on the invoice tax
record is changed.
   OperationID: OnChangeofTaxAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxCode
   Description: This method should be called when the tax code on the invoice tax
record is changed.
   OperationID: OnChangeofTaxCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxLock(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxLock
   Description: This method should be called when the invoice tax lock rate has been changed.
   OperationID: OnChangeofTaxLock
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxLock_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxLock_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxPDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxPDate
   Description: This method should be called before the Tax Point date has been updated.
   OperationID: OnChangeofTaxPDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxPDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxPDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxPercent
   Description: This method should be called when the tax percent on the invoice tax
record is changed.
   OperationID: OnChangeofTaxPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRateDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRateDate
   Description: This method should be called before the tax rate date has been updated.
   OperationID: OnChangeofTaxRateDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRateDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRateDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRateGrpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRateGrpCode
   OperationID: OnChangeofTaxRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxReportAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxReportAmt
   Description: This method should be called when the reportable amount on the invoice tax
record is changed.
   OperationID: OnChangeofTaxReportAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxReportAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxReportAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRgn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRgn
   Description: This method should be called when the InvcHead.TaxRegionCode changes
   OperationID: OnChangeofTaxRgn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRgn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRgn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTermsCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTermsCode
   Description: This method should be called when the Terms Code changes.
   OperationID: OnChangeofTermsCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTermsCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTermsCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfTransApplyDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfTransApplyDate
   Description: This method should be called before the transferred invoice apply date has been updated.
   OperationID: OnChangeOfTransApplyDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfTransApplyDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfTransApplyDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofUseSOCCDefaults(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofUseSOCCDefaults
   Description: This method should be called when the user changes the value in the
UseSOCCdefaults. The UseSOCCdefaults allows the user to specify whether or
not to use the sales order credit card info or enter it themselves..
   OperationID: OnChangeofUseSOCCDefaults
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofUseSOCCDefaults_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofUseSOCCDefaults_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeTranDocTypeID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeTranDocTypeID
   Description: Sets default values when the TranDocTypeID changes
   OperationID: OnChangeTranDocTypeID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTranDocTypeID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTranDocTypeID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeUseAltBillTo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeUseAltBillTo
   Description: UseAltBillTo check box event
   OperationID: OnChangeUseAltBillTo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeUseAltBillTo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeUseAltBillTo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeInvcSchedPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeInvcSchedPercent
   Description: Method to update Amount values in the InvcSched record and update last InvcSched record when it's needed.
   OperationID: OnChangeInvcSchedPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeInvcSchedPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeInvcSchedPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeInvcSchedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeInvcSchedAmount
   Description: Method to update Precent value in the InvcSched record and update last InvcSched record when it's needed.
   OperationID: OnChangeInvcSchedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeInvcSchedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeInvcSchedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeInvcSchedDays(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeInvcSchedDays
   Description: Method to update DueDate value in the InvcSched record and update following InvcSched records when it's needed.
   OperationID: OnChangeInvcSchedDays
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeInvcSchedDays_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeInvcSchedDays_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeInvcSchedDueDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeInvcSchedDueDate
   Description: Method to update PayDays value in the InvcSched record and update following InvcSched records when it's needed.
   OperationID: OnChangeInvcSchedDueDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeInvcSchedDueDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeInvcSchedDueDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PrePostBOEChangeStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PrePostBOEChangeStatus
   Description: This method should be called before a BOE Invoice is posted. If the GL
is not interfaced the user will be asked to continue Y/N.  If they choose N,
the PostInvoices method should not be called.
   OperationID: PrePostBOEChangeStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PrePostBOEChangeStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PrePostBOEChangeStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PrePostBOEInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PrePostBOEInvoice
   Description: This method should be called before a BOE Invoice is posted. If the GL
is not interfaced the user will be asked to continue Y/N.  If they choose N,
the PostInvoices method should not be called.
   OperationID: PrePostBOEInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PrePostBOEInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PrePostBOEInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PrePrintInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PrePrintInvoices
   Description: Purpose: Check if Taxes are calculated, for whole Group (ipInvoiceNum=0), or for one invoice (ipGroupID = "")
Copied from Rpt/ARInvForm/ARInvForm.p
   OperationID: PrePrintInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PrePrintInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PrePrintInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcAmortAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcAmortAmount
   OperationID: RecalcAmortAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcAmortAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcAmortAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcAmortAmountRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcAmortAmountRowMod
   Description: Recalculate amortization amounts based on the proposed percent. RowMod will not be cleared for the InvcDeferredRev table
   OperationID: RecalcAmortAmountRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcAmortAmountRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcAmortAmountRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcAmortPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcAmortPercent
   OperationID: RecalcAmortPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcAmortPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcAmortPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcAmortPercentRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcAmortPercentRowMod
   Description: Recalculate amortization percents based on the proposed amount. RowMod will not be cleared for the InvcDeferredRev table
   OperationID: RecalcAmortPercentRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcAmortPercentRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcAmortPercentRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RecalcDeferredTotals(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RecalcDeferredTotals
   OperationID: RecalcDeferredTotals
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcDeferredTotals_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcDeferredTotals_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RestoreAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RestoreAmortizationSchedule
   OperationID: RestoreAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RestoreAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RestoreAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RestoreAmortizationScheduleRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RestoreAmortizationScheduleRowMod
   Description: Restore Amortization Schedule. RowMod will not be cleared for InvcDeferredRev
   OperationID: RestoreAmortizationScheduleRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RestoreAmortizationScheduleRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RestoreAmortizationScheduleRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RMALineTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RMALineTax
   Description: This method creates tax lines when we create invoice from RMA Processing
   OperationID: RMALineTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RMALineTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RMALineTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SelectUninvoicedDropShipments(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SelectUninvoicedDropShipments
   Description: Method to call to select uninvoiced drop shipments.
   OperationID: SelectUninvoicedDropShipments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SelectUninvoicedDropShipments_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SelectUninvoicedDropShipments_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetReadyToCalc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetReadyToCalc
   Description: CALCULATE VANTAGE\TAX CONNECT TAX CALCULATIONS UI NEEDS TO CALL A SAVE BEFORE CALLING THIS PROCEDURE
   OperationID: SetReadyToCalc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetReadyToCalc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetReadyToCalc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetReadyToCalcEx(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetReadyToCalcEx
   Description: CALCULATE VANTAGE\TAX CONNECT TAX CALCULATIONS UI NEEDS TO CALL A SAVE BEFORE CALLING THIS PROCEDURE
   OperationID: SetReadyToCalcEx
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetReadyToCalcEx_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetReadyToCalcEx_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateBOEStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateBOEStatus
   Description: This method should be called when updating a Bill of Exchange status.
Called from AR Bill of Exchange Status Change Entry
   OperationID: UpdateBOEStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateBOEStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateBOEStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateEInvoiceStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateEInvoiceStatus
   Description: This method should be called when updating a eInvoice status.
Called from AR Invoice
   OperationID: UpdateEInvoiceStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateEInvoiceStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateEInvoiceStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetEInvoiceOperatorStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetEInvoiceOperatorStatus
   Description: Get E-Invoice operator status
   OperationID: GetEInvoiceOperatorStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetEInvoiceOperatorStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetEInvoiceOperatorStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMaster
   OperationID: UpdateMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMasterRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMasterRowMod
   OperationID: UpdateMasterRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMasterRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMasterRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMasterUsingPasteInsert(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMasterUsingPasteInsert
   OperationID: UpdateMasterUsingPasteInsert
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMasterUsingPasteInsert_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMasterUsingPasteInsert_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMasterUsingPasteInsertRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMasterUsingPasteInsertRowMod
   OperationID: UpdateMasterUsingPasteInsertRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMasterUsingPasteInsertRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMasterUsingPasteInsertRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdatePEInvcTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdatePEInvcTax
   Description: Fill Peru tables.
   OperationID: UpdatePEInvcTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdatePEInvcTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdatePEInvcTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdatePEInvcTaxSummary(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdatePEInvcTaxSummary
   Description: Fill Peru detraction summary table.
   OperationID: UpdatePEInvcTaxSummary
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdatePEInvcTaxSummary_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdatePEInvcTaxSummary_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateTaxLiability(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateTaxLiability
   OperationID: UpdateTaxLiability
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateTaxLiability_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateTaxLiability_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_VoidLegalNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method VoidLegalNumber
   Description: Voids the legal number.
   OperationID: VoidLegalNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/VoidLegalNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/VoidLegalNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfImmaterialAdjustment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfImmaterialAdjustment
   Description: CSF Thailand: this method sets default values of Revision Num and Date for Immaterial Adjustments
or clears ones when Immaterial Adjustment set to False
   OperationID: OnChangeOfImmaterialAdjustment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfImmaterialAdjustment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfImmaterialAdjustment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckVATFormat(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckVATFormat
   Description: This method test the validity of the VAT format
   OperationID: CheckVATFormat
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckVATFormat_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckVATFormat_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAvailBoEStatuses(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAvailBoEStatuses
   OperationID: GetAvailBoEStatuses
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAvailBoEStatuses_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAvailBoEStatuses_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDefaultDepPayToDate(epicorHeaders = None):
   """  
   Summary: Invoke method GetDefaultDepPayToDate
   Description: Return default date to limit selection of Deposit Payments
   OperationID: GetDefaultDepPayToDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDefaultDepPayToDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetDefaultDepPayDates(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDefaultDepPayDates
   OperationID: GetDefaultDepPayDates
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDefaultDepPayDates_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDefaultDepPayDates_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLegalNumByInvcRefNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLegalNumByInvcRefNum
   OperationID: GetLegalNumByInvcRefNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLegalNumByInvcRefNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLegalNumByInvcRefNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateLegalNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateLegalNum
   Description: Validates if an invoice accept changes or not based in its Legal Number configuration, this method contains almost the same logic than legNumDisallowChg method, with the difference
that this one returns an string with the validation result and the latter returns a bool and a BLException (instead of the string message) when needed.
   OperationID: ValidateLegalNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateLegalNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateLegalNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCodeDescList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCodeDescList
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRebateInvList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRebateInvList
   OperationID: GetRebateInvList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRebateInvList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRebateInvList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GenerateRebateInv(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateRebateInv
   OperationID: GenerateRebateInv
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateRebateInv_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateRebateInv_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAvailTranDocTypes(epicorHeaders = None):
   """  
   Summary: Invoke method GetAvailTranDocTypes
   OperationID: GetAvailTranDocTypes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAvailTranDocTypes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_OnChangeDueDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeDueDate
   Description: Called when the due date value is modified in the Posted Invoice Update form.
   OperationID: OnChangeDueDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeDueDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeDueDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDueDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDueDate
   Description: Called when the due date value is modified in the Posted Invoice Update Kinetic form.
   OperationID: ChangeDueDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDueDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDueDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeIncotermCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeIncotermCode
   Description: This method checks incoterm
   OperationID: ChangeIncotermCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeIncotermCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeIncotermCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCentralCollection(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCentralCollection
   Description: Method to validate if the Parent Company in Company Configuration is selected to allow be a Central Collection AR Invoice.
   OperationID: OnChangeCentralCollection
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCentralCollection_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCentralCollection_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCycleCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCycleCode
   OperationID: OnChangeCycleCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCycleCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCycleCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeRecurring(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeRecurring
   OperationID: OnChangeRecurring
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeRecurring_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeRecurring_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRecurringSourceInvoicesSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRecurringSourceInvoicesSearch
   OperationID: GetRecurringSourceInvoicesSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRecurringSourceInvoicesSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRecurringSourceInvoicesSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRecurringInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRecurringInvoices
   OperationID: GetRecurringInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRecurringInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRecurringInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalcInvcGrpTotal(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalcInvcGrpTotal
   OperationID: CalcInvcGrpTotal
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalcInvcGrpTotal_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalcInvcGrpTotal_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetInvcRecurr(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetInvcRecurr
   OperationID: GetInvcRecurr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetInvcRecurr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetInvcRecurr_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNextInvoiceDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNextInvoiceDate
   OperationID: GetNextInvoiceDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNextInvoiceDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNextInvoiceDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofPrepDeposit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofPrepDeposit
   Description: This method should be called after the document deposit amount has been changed.
   OperationID: OnChangeofPrepDeposit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofPrepDeposit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofPrepDeposit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_fillAllocDeposit(epicorHeaders = None):
   """  
   Summary: Invoke method fillAllocDeposit
   Description: Method to fill AllocDeposit Table
   OperationID: fillAllocDeposit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/fillAllocDeposit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CheckInvoicePI(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckInvoicePI
   Description: This method check whether any restriction for Payment Instrument exists.
   OperationID: CheckInvoicePI
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckInvoicePI_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckInvoicePI_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckISRCodeDefinition(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckISRCodeDefinition
   Description: Check all definition for generation ISR Code
   OperationID: CheckISRCodeDefinition
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckISRCodeDefinition_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckISRCodeDefinition_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMYIndustryCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMYIndustryCode
   OperationID: ChangeMYIndustryCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMYIndustryCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMYIndustryCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCommodityCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCommodityCode
   Description: Check Intrastat Commodity code
   OperationID: CheckCommodityCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCommodityCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCommodityCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPackDetails(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPackDetails
   Description: Get Pack details from a specific Invoice line.
   OperationID: GetPackDetails
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPackDetails_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPackDetails_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PopulateInvcHeadTransferList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PopulateInvcHeadTransferList
   OperationID: PopulateInvcHeadTransferList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PopulateInvcHeadTransferList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PopulateInvcHeadTransferList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateGroupID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateGroupID
   Description: Determines if a group id exists in the database.
   OperationID: ValidateGroupID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateGroupID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateGroupID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateInvcGrp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateInvcGrp
   Description: Creates a new InvcGrp to transfer Invoices to.
   OperationID: CreateInvcGrp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateInvcGrp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateInvcGrp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_TransferSelectedInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method TransferSelectedInvoices
   Description: This method performs the transfer of invoices from one group to another.
   OperationID: TransferSelectedInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TransferSelectedInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TransferSelectedInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSystemTranDocTypeDescID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSystemTranDocTypeDescID
   Description: Returns the TranDocTypeDescription and TranDocTypeID values of the SystemTranID set as default
   OperationID: GetSystemTranDocTypeDescID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSystemTranDocTypeDescID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSystemTranDocTypeDescID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDefaultDocType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDefaultDocType
   Description: This method gets the default document type for correction and cancellation invoice.
   OperationID: GetDefaultDocType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDefaultDocType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDefaultDocType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckNegativeInvcBalance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckNegativeInvcBalance
   Description: Search for Negative Balance Invoices and Credit Memos on group.
   OperationID: CheckNegativeInvcBalance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckNegativeInvcBalance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckNegativeInvcBalance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckShipToTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckShipToTaxID
   Description: Customer ShipTo Tax Id check
   OperationID: CheckShipToTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckShipToTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckShipToTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCustomerTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCustomerTaxID
   Description: Customer Tax Id check
   OperationID: CheckCustomerTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCustomerTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCustomerTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupTaxID
   Description: Check for Customer/ShipTo TaxId in Invoice Group
   OperationID: CheckGroupTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateOTSTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateOTSTaxID
   Description: OTS Tax Id validation
   OperationID: ValidateOTSTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateOTSTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateOTSTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupBankRefs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupBankRefs
   Description: Check Banking References of Group Invoices
   OperationID: CheckGroupBankRefs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupBankRefs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupBankRefs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupISRCodeLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupISRCodeLine
   Description: Check Group Invoices on generation ISR Code
   OperationID: CheckGroupISRCodeLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupISRCodeLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupISRCodeLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupForRemainingAmortBal(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupForRemainingAmortBal
   Description: Validates Remaining balances in Invoices from the Group
   OperationID: CheckGroupForRemainingAmortBal
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupForRemainingAmortBal_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupForRemainingAmortBal_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AddRMALineTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AddRMALineTax
   Description: Add RAM Line tax
   OperationID: AddRMALineTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddRMALineTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddRMALineTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPartNum
   Description: Gets Part Number as it is stored in the DB.
   OperationID: GetPartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePECodeInvcHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePECodeInvcHead
   OperationID: OnChangePECodeInvcHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePECodeInvcHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePECodeInvcHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePECodeInvcDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePECodeInvcDtl
   OperationID: OnChangePECodeInvcDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePECodeInvcDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePECodeInvcDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcHead
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcHeadAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcHeadAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcHeadAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcHeadAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcHeadAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewCentralCollectionPayment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewCentralCollectionPayment
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewCentralCollectionPayment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewCentralCollectionPayment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewCentralCollectionPayment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcDtlAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcDtlAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewInvcDtlAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcDtlAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcDtlAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalculateCOIFRS_PV(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalculateCOIFRS_PV
   Description: Calculate IFRS Present Value
   OperationID: CalculateCOIFRS_PV
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalculateCOIFRS_PV_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalculateCOIFRS_PV_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipHead
   Description: Builds where clause consisting of PackNum values associated with the InvcDtl records to retrieve ShipHead records.
   OperationID: GetShipHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_Update_ttInvcHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update_ttInvcHead
   Description: Calculate IFRS Present Value
   OperationID: Update_ttInvcHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_ttInvcHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_ttInvcHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CashRecGetInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CashRecGetInvoices
   Description: This procedure returns the invoices to Cash Receipt Entry
   OperationID: CashRecGetInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CashRecGetInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CashRecGetInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckAmortSchedules(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckAmortSchedules
   Description: Checks the schedules.
   OperationID: CheckAmortSchedules
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckAmortSchedules_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckAmortSchedules_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckDocumentIsLocked(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckDocumentIsLocked
   Description: Method to call when it is necessary to check if document is lock, before doing smth.
   OperationID: CheckDocumentIsLocked
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckDocumentIsLocked_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckDocumentIsLocked_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupIsLocked(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupIsLocked
   Description: Method to call when it is necessary to check if document is lock, before doing smth.
   OperationID: CheckGroupIsLocked
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupIsLocked_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupIsLocked_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLtrOfCredit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLtrOfCredit
   OperationID: CheckLtrOfCredit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLtrOfCredit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLtrOfCredit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CopyInvoiceLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CopyInvoiceLines
   Description: Copy Invoice lines from source invoice to ttInvc tables
   OperationID: CopyInvoiceLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CopyInvoiceLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CopyInvoiceLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateCorrectionInvoiceTH(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateCorrectionInvoiceTH
   Description: Creates a correction invoice from a another invoice. For Thailand.
Create correction invoice with reversed old and new lines in two  Invoice  (while base CreateCorrectionInvoice creates correction invoice with reversed old and new lines in one Invoice)
   OperationID: CreateCorrectionInvoiceTH
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateCorrectionInvoiceTH_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateCorrectionInvoiceTH_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateCorrectionInvoiceByParamsTH(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateCorrectionInvoiceByParamsTH
   Description: Creates a correction invoice from a another invoice. For Thailand.
Create correction invoice with reversed old and new lines in two  Invoice  (while base CreateCorrectionInvoice creates correction invoice with reversed old and new lines in one Invoice)
   OperationID: CreateCorrectionInvoiceByParamsTH
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateCorrectionInvoiceByParamsTH_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateCorrectionInvoiceByParamsTH_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateCorrectionInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateCorrectionInvoice
   Description: Creates a correction invoice from a another invoice.
   OperationID: CreateCorrectionInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateCorrectionInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateCorrectionInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateInvFromDep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateInvFromDep
   Description: Creates deposit invoices from deposit payments.
The list of deposit payments should be ~ delimited.
   OperationID: CreateInvFromDep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateInvFromDep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateInvFromDep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CurrSymbolByInvcNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CurrSymbolByInvcNum
   Description: Loads currency symbol by invoice num.
   OperationID: CurrSymbolByInvcNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CurrSymbolByInvcNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CurrSymbolByInvcNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteAmortizationSchedule
   OperationID: DeleteAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MassInvoiceDelete(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MassInvoiceDelete
   Description: Deletes more than one invoice that are selected from list grid
   OperationID: MassInvoiceDelete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MassInvoiceDelete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MassInvoiceDelete_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteMaster
   OperationID: DeleteMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeselectSelectedDropShipments(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeselectSelectedDropShipments
   Description: Method to call to deselect selected drop shipments.
   OperationID: DeselectSelectedDropShipments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeselectSelectedDropShipments_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeselectSelectedDropShipments_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EnableARDates(epicorHeaders = None):
   """  
   Summary: Invoke method EnableARDates
   Description: This method return wish dates have to be enable on AR Invoice.
   OperationID: EnableARDates
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/EnableARDates_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ETCValidateAddress(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ETCValidateAddress
   Description: Call tax integration and loads temp tables from the results.
   OperationID: ETCValidateAddress
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ETCValidateAddress_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ETCValidateAddress_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ETCAfterAddressValidationOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ETCAfterAddressValidationOTS
   Description: After the tax integration has been called, update the Invoice Detail on one time shipment address if it
was changed.
   OperationID: ETCAfterAddressValidationOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ETCAfterAddressValidationOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ETCAfterAddressValidationOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GenerateAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateAmortizationSchedule
   Description: Purpose:
Parameters:
<param name="ds" type="Epicor.Mfg.BO.ARInvoiceDataSet">A/R invoice data set.</param>
Notes:
   OperationID: GenerateAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GenerateAmortizationScheduleRowMod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateAmortizationScheduleRowMod
   Description: Purpose:
Parameters:
<param name="ds" type="Epicor.Mfg.BO.ARInvoiceDataSet">A/R invoice data set.</param>
Notes:
   OperationID: GenerateAmortizationScheduleRowMod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateAmortizationScheduleRowMod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateAmortizationScheduleRowMod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetARUninvoicedDropShipments(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetARUninvoicedDropShipments
   Description: Method to call to get uninvoiced receipts for Receipt billing.
   OperationID: GetARUninvoicedDropShipments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetARUninvoicedDropShipments_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetARUninvoicedDropShipments_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAvailNOEInvoiceTranDocTypes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAvailNOEInvoiceTranDocTypes
   Description: This method creates list of TranDocType depending on EInvoice property
   OperationID: GetAvailNOEInvoiceTranDocTypes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAvailNOEInvoiceTranDocTypes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAvailNOEInvoiceTranDocTypes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetByBOEInvoiceNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetByBOEInvoiceNum
   Description: This method finds the invoice for Bill of Exchange
   OperationID: GetByBOEInvoiceNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetByBOEInvoiceNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByBOEInvoiceNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCancellationInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCancellationInvoice
   Description: Creates new credit memo invoice as cancellation invoice.
   OperationID: GetCancellationInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCancellationInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCancellationInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetCurrencyBase(epicorHeaders = None):
   """  
   Summary: Invoke method GetCurrencyBase
   Description: This method returns the Base Currency
   OperationID: GetCurrencyBase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCurrencyBase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetDefaultAccount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDefaultAccount
   Description: Gets default account for a line.
   OperationID: GetDefaultAccount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDefaultAccount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDefaultAccount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDepositsToConvert(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDepositsToConvert
   Description: Method selects deposit payments for specified customers and the earliest payment date.
   OperationID: GetDepositsToConvert
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDepositsToConvert_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDepositsToConvert_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDropShipments(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDropShipments
   Description: Creates invoices for Drop Shipments.
The list of customers should be a ~ delimited list of customer numbers.
The Plant should be either the string "CURRENT" or "ALL".
The invoice numbers are in a ~ delimited list.
   OperationID: GetDropShipments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDropShipments_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDropShipments_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetServiceCallSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetServiceCallSearch
   Description: Method to call when the search is done on Get FS Calls.
   OperationID: GetServiceCallSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetServiceCallSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetServiceCallSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetServiceCallLineSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetServiceCallLineSearch
   Description: Method to call when the search is done on Get FS Calls.
   OperationID: GetServiceCallLineSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetServiceCallLineSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetServiceCallLineSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetFSCallsJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetFSCallsJob
   Description: Creates an FS Call invoice. The list of customers should be a ~ delimited
list of customer numbers. The list of codes should be a ~ delimited
list of service call codes. The list of calls should be a ~ delimited
list of service call numbers. The Plant should be either the string "CURRENT" or "ALL".
The number of invoices is an integer.
   OperationID: GetFSCallsJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetFSCallsJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetFSCallsJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetFSCallLineJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetFSCallLineJob
   Description: Creates an FS Call invoice. The list of customers should be a ~ delimited
list of customer numbers. The list of codes should be a ~ delimited
list of service call codes. The list of calls should be a ~ delimited
list of service call numbers. The Plant should be either the string "CURRENT" or "ALL".
The number of invoices is an integer.
   OperationID: GetFSCallLineJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetFSCallLineJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetFSCallLineJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetInvoiceLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetInvoiceLines
   Description: Get list of invoice lines
   OperationID: GetInvoiceLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetInvoiceLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetInvoiceLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetInvoiceReminders(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetInvoiceReminders
   Description: Get list of invoice reminders
   OperationID: GetInvoiceReminders
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetInvoiceReminders_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetInvoiceReminders_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AssignLegalNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignLegalNumber
   Description: Assigns a legal number to the invoice.
   OperationID: AssignLegalNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignLegalNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignLegalNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLegalNumGenOpts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLegalNumGenOpts
   Description: Returns the legal number generation options.
   OperationID: GetLegalNumGenOpts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLegalNumGenOpts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLegalNumGenOpts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreUpdate
   Description: This method will return a record in the LegalNumGenOpts datatable if
a legal number is required for this transaction.  The RequiresUserInput
flag will indicate if this legal number requires input from the user.  If
it does, the LegalNumberPrompt business objects needs to be called to
gather that information.  This method should be called when the user
saves the record but before the Update method is called.
   OperationID: PreUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDfltTranDocTypeID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDfltTranDocTypeID
   Description: Get Default Transaction document for AR Invoice
   OperationID: GetDfltTranDocTypeID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDfltTranDocTypeID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDfltTranDocTypeID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMilestoneBilling(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMilestoneBilling
   Description: Creates Milestone billing invoices.
   OperationID: GetMilestoneBilling
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMilestoneBilling_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMilestoneBilling_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetMilestoneSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetMilestoneSearch
   Description: Search for Milestone billing that could create an invoice and return them for
customer's selection.
   OperationID: GetMilestoneSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMilestoneSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMilestoneSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewDepositType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewDepositType
   Description: Creates a new InvcHead record for Deposit Billing or Deposit
Billing Credit Memo based on Deposit Billing type.
This method is separate from GetNewInvcHeadType so security can be
set on deposit invoices.
   OperationID: GetNewDepositType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewDepositType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewDepositType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvoiceManual(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvoiceManual
   Description: create new invoice passing in the Invoicenum.
   OperationID: GetNewInvoiceManual
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvoiceManual_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvoiceManual_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcHeadBOE(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcHeadBOE
   Description: Creates a new InvcHead record for Bill of Exchange.
   OperationID: GetNewInvcHeadBOE
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcHeadBOE_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcHeadBOE_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewInvcHeadType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewInvcHeadType
   Description: Creates a new InvcHead record based on the Invoice type.
   OperationID: GetNewInvcHeadType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewInvcHeadType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewInvcHeadType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_KineticGetPaymentDataForViewing(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method KineticGetPaymentDataForViewing
   Description: Method to call when obtaining the payment schedule for the invoice header.
   OperationID: KineticGetPaymentDataForViewing
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/KineticGetPaymentDataForViewing_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/KineticGetPaymentDataForViewing_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPaymentDataForViewing(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPaymentDataForViewing
   Description: Method to call when obtaining the payment schedule for the invoice header.
   OperationID: GetPaymentDataForViewing
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPaymentDataForViewing_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPaymentDataForViewing_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPBInvcSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPBInvcSearch
   Description: Search for Projects that could create an invoice and return them for customer's selection.
   OperationID: GetPBInvcSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPBInvcSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPBInvcSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPBInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPBInvoices
   Description: Creates an Project invoice. The list of projects should be a ~ delimited.
   OperationID: GetPBInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPBInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPBInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRecurBill(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRecurBill
   Description: Creates a re occurring invoice.
   OperationID: GetRecurBill
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRecurBill_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRecurBill_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRecurBillSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRecurBillSearch
   Description: Search for Service Contracts that could create an invoice and return them for
customer's selection.
   OperationID: GetRecurBillSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRecurBillSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRecurBillSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRMACredits(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRMACredits
   Description: Selects InvcHead records with a group of RMACRREQ and changes the group
to the group ID passed in.  A GetList needs to be run after this process so
the user can choose the invoice they want to process.  This method returns
a of how many invoices were converted.
   OperationID: GetRMACredits
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRMACredits_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRMACredits_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetClaimCredits(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetClaimCredits
   Description: Selects InvcHead records with a group of CLMCRREQ and changes the group
to the group ID passed in.  A GetList needs to be run after this process so
the user can choose the invoice they want to process.  This method returns
a  of how many invoices were converted.
   OperationID: GetClaimCredits
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetClaimCredits_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetClaimCredits_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRMACreditsSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRMACreditsSearch
   Description: Selects InvcHead records with a group of RMACRREQ and return them for
customer's selection.
   OperationID: GetRMACreditsSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRMACreditsSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRMACreditsSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetClaimCreditsSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetClaimCreditsSearch
   Description: Selects InvcHead records with a group of RMACRREQ and return them for
customer's selection.
   OperationID: GetClaimCreditsSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetClaimCreditsSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetClaimCreditsSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsContactTracker(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsContactTracker
   Description: Calls the normal GetRows method and then constructs a custom data set combining Head/Dtl fields for the contact tracker.
   OperationID: GetRowsContactTracker
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsContactTracker_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsContactTracker_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsCustomerTracker(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsCustomerTracker
   Description: Calls the normal GetRows method and then constructs a custom data set combining Head/Dtl fields for the customer tracker.
   OperationID: GetRowsCustomerTracker
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsCustomerTracker_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsCustomerTracker_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipmentsConsolidatedPS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipmentsConsolidatedPS
   Description: Creates an Shipment invoice. The list of customers should be a ~ delimited
list of customer numbers. The list of pack slips should be null (room for enhancement).
The Plant should be either the string "CURRENT" or "ALL". The invoice numbers
are in a ~ delimited list.
   OperationID: GetShipmentsConsolidatedPS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipmentsConsolidatedPS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipmentsConsolidatedPS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipments(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipments
   Description: Creates an Shipment invoice. The list of customers should be a ~ delimited
list of customer numbers. The list of pack slips should be null (room for enhancement).
The Plant should be either the string "CURRENT" or "ALL". The invoice numbers
are in a ~ delimited list.
   OperationID: GetShipments
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipments_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipments_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipmentsSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipmentsSearch
   Description: Method to call when the search is done on GetShipments.
CustIDs: You can specify a list of customers.
Plant Choice: C is for current.
A is for all.
   OperationID: GetShipmentsSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipmentsSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipmentsSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipmentsSearchWithFilters(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipmentsSearchWithFilters
   Description: Method to call when the search is done on GetShipments.
CustIDs: You can specify a list of customers.
Plant Choice: C is for current.
A is for all.
   OperationID: GetShipmentsSearchWithFilters
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipmentsSearchWithFilters_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipmentsSearchWithFilters_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSumOfInvoiceBalForInvoiceList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetSumOfInvoiceBalForInvoiceList
   OperationID: GetSumOfInvoiceBalForInvoiceList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetSumOfInvoiceBalForInvoiceList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSumOfInvoiceBalForInvoiceList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetvalidEAD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetvalidEAD
   OperationID: GetvalidEAD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetvalidEAD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetvalidEAD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetTaxRegInPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetTaxRegInPrice
   Description: Evaluate Tax Region and InPrice value from the proposed Ship To
   OperationID: GetTaxRegInPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetTaxRegInPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetTaxRegInPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateInvcDtlTGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateInvcDtlTGLC
   Description: Creates records with empty accounts according to Active Revision in GL Transaction Type Maintenance
   OperationID: CreateInvcDtlTGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateInvcDtlTGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateInvcDtlTGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvcGrpExists(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvcGrpExists
   Description: Checks if InvcGrp record exists or not.
   OperationID: InvcGrpExists
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvcGrpExists_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvcGrpExists_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_IsConvertedFromDep(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method IsConvertedFromDep
   Description: Returns true if deposit invoice is converted from deposit payment.
   OperationID: IsConvertedFromDep
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/IsConvertedFromDep_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/IsConvertedFromDep_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_IsPMForGenPIType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method IsPMForGenPIType
   OperationID: IsPMForGenPIType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/IsPMForGenPIType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/IsPMForGenPIType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_LoadRecordsPEInvcTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method LoadRecordsPEInvcTax
   Description: Fill Peru tables.
   OperationID: LoadRecordsPEInvcTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/LoadRecordsPEInvcTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/LoadRecordsPEInvcTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MassGenerateBOEInvcDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MassGenerateBOEInvcDtl
   Description: Create multiple InvcDtl for a BOE InvcHead from multiple selected invoices.
   OperationID: MassGenerateBOEInvcDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MassGenerateBOEInvcDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MassGenerateBOEInvcDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AGRegenElecInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AGRegenElecInvoice
   Description: This method will regenerate the related electronic invoice file.
This logic is not available when Argentina CSF is not enabled or the current invoice is not posted.
   OperationID: AGRegenElecInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AGRegenElecInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AGRegenElecInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AGLoadElecInvcResults(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AGLoadElecInvcResults
   Description: Populates the AGElecInvcError tables with all the results
for the current invoice generated by the electronic invoice generation process.
   OperationID: AGLoadElecInvcResults
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AGLoadElecInvcResults_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AGLoadElecInvcResults_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeAllocatedDepositAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeAllocatedDepositAmt
   Description: Voids the legal number.
   OperationID: OnChangeAllocatedDepositAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeAllocatedDepositAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeAllocatedDepositAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeARLOCID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeARLOCID
   Description: This procedure is used to validate the ARLOCID (AR Letter of Credit ID) for both
AR Invoice Entry and Posted Invoice Update. The argument "ipInvoiceNum is only
supplied when called from Posted Invoice Update. For AR Invoice Entry, if either the
Terms or the Bill To Customer is different on the Invoice than it is on the Letter
of Credit, a message to the user and a value for the UI to put in that field (if
the user decides to) are passed back. When called from Posted Invoice Update, the
Customer, Bill To Customer and the Currency must match or an error is given.
   OperationID: OnChangeARLOCID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeARLOCID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeARLOCID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeBlockedFin(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeBlockedFin
   Description: This method should be called when the plant is changed.
   OperationID: OnChangeBlockedFin
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeBlockedFin_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeBlockedFin_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeBOEStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeBOEStatus
   Description: Default bank for payment instrument when the BOE status changes.
   OperationID: OnChangeBOEStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeBOEStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeBOEStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeHold(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeHold
   OperationID: OnChangeHold
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeHold_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeHold_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeHoldReason(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeHoldReason
   OperationID: OnChangeHoldReason
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeHoldReason_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeHoldReason_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeInvDtlUseOTS(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeInvDtlUseOTS
   Description: Method to call when changed the UseOTS field the contract header record.
Refreshes the address list and contact info
   OperationID: OnChangeInvDtlUseOTS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeInvDtlUseOTS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeInvDtlUseOTS_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineCommodityCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineCommodityCode
   Description: Validate entered Commodity Code
   OperationID: OnChangeLineCommodityCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineCommodityCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineCommodityCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineDefRev(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineDefRev
   OperationID: OnChangeLineDefRev
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineDefRev_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineDefRev_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeDeferredPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeDeferredPercent
   Description: This method should be called when the deferred percent on invoice detail is changed.
   OperationID: OnChangeDeferredPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeDeferredPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeDeferredPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangePartiallyDefer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangePartiallyDefer
   Description: This method should be called when the flag Partially Defer on invoice detail is changed.
   OperationID: OnChangePartiallyDefer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePartiallyDefer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePartiallyDefer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeReclass(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeReclass
   Description: This method should be called when the flag Reclass on invoice detail is changed.
   OperationID: OnChangeReclass
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeReclass_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeReclass_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeReclassCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeReclassCode
   Description: This method should be called when the Reclass Code on invoice detail is changed.
   OperationID: OnChangeReclassCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeReclassCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeReclassCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeReclassReasonCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeReclassReasonCode
   Description: This method should be called when the Reclass Reason Code on invoice detail is changed.
   OperationID: OnChangeReclassReasonCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeReclassReasonCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeReclassReasonCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeUnrecognizedAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeUnrecognizedAmt
   Description: Recalculate Amortisation when the Unrecognized Amount is changed.
   OperationID: OnChangeUnrecognizedAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeUnrecognizedAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeUnrecognizedAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineDspWithholdAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineDspWithholdAmt
   Description: This method should be called when the withhold amount on the invoice detail
record is changed.
   OperationID: OnChangeLineDspWithholdAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineDspWithholdAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineDspWithholdAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineInvoiceRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineInvoiceRef
   Description: This method should be called before the InvcDtl invoice reference has been updated.
Specific to Bill of Exchange invoices.
   OperationID: OnChangeLineInvoiceRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineInvoiceRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineInvoiceRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfAmortDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfAmortDate
   OperationID: OnChangeOfAmortDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfAmortDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfAmortDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofApplyDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofApplyDate
   Description: This method should be called before the apply date has been updated.
   OperationID: OnChangeofApplyDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofApplyDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofApplyDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofApplyDateEx(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofApplyDateEx
   Description: This method should be called before the apply date has been updated.
   OperationID: OnChangeofApplyDateEx
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofApplyDateEx_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofApplyDateEx_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofChrgAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofChrgAmt
   Description: Calculates the amounts for Miscellaneous charges when the misc. amt. changes.
   OperationID: OnChangeofChrgAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofChrgAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofChrgAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofContact(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofContact
   Description: This method should be called when the contact is changed.
   OperationID: OnChangeofContact
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofContact_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofContact_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofCurrency(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofCurrency
   Description: If it is a new invoice, the currency fields are set. Otherwise they are updated.
   OperationID: OnChangeofCurrency
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofCurrency_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofCurrency_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofCustomer(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofCustomer
   Description: Called for change of bill to customer.
   OperationID: OnChangeofCustomer
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofCustomer_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofCustomer_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfDefRevStart(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfDefRevStart
   OperationID: OnChangeOfDefRevStart
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfDefRevStart_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfDefRevStart_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofDepAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofDepAmt
   Description: This method should be called after the document deposit amount has been changed.
   OperationID: OnChangeofDepAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofDepAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofDepAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofDeposit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofDeposit
   Description: This method should be called after the document deposit amount has been changed.
   OperationID: OnChangeofDeposit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofDeposit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofDeposit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofExchangeRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofExchangeRate
   Description: This method should be called when the exchange rate is changed.
   OperationID: OnChangeofExchangeRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofExchangeRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofExchangeRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofFixedAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofFixedAmt
   Description: This method should be called when the tax amount on the invoice tax
record is changed.
   OperationID: OnChangeofFixedAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofFixedAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofFixedAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofFOB(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofFOB
   Description: This method should be called when the FOB changes.
   OperationID: OnChangeofFOB
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofFOB_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofFOB_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofInvDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofInvDate
   Description: This method should be called before the invoice date has been updated.
   OperationID: OnChangeofInvDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofInvDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofInvDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetShipDateOnChangeofInvDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetShipDateOnChangeofInvDate
   OperationID: GetShipDateOnChangeofInvDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetShipDateOnChangeofInvDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetShipDateOnChangeofInvDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofInvDateEx(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofInvDateEx
   Description: This method should be called before the invoice date has been updated.
   OperationID: OnChangeofInvDateEx
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofInvDateEx_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofInvDateEx_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofInvoiceAddress(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofInvoiceAddress
   Description: This method will set the BillToInvoiceAddress field and the SoldToInvoiceAddress
based on the field name and value passed in.  If one is true, then the other is false.
   OperationID: OnChangeofInvoiceAddress
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofInvoiceAddress_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofInvoiceAddress_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeOfRevisionDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeOfRevisionDate
   Description: This method checks if entered RevisionDate is valid
   OperationID: OnChangeOfRevisionDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOfRevisionDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOfRevisionDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofRevisionNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofRevisionNum
   Description: This method will set the DocumentPrinted field
   OperationID: OnChangeofRevisionNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofRevisionNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofRevisionNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofInvoiceRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofInvoiceRef
   Description: This method should be called before the invoice reference has been updated.
   OperationID: OnChangeofInvoiceRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofInvoiceRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofInvoiceRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineAdvBill(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineAdvBill
   Description: This method should be called when the advanced billing amount on the invoice detail
record is changed.
   OperationID: OnChangeofLineAdvBill
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineAdvBill_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineAdvBill_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineContact(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineContact
   Description: This method should be called when the Contact on the invoice detail
record is changed.
   OperationID: OnChangeofLineContact
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineContact_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineContact_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineDesc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineDesc
   Description: This method should be called when the part description on the invoice detail
record is changed.
   OperationID: OnChangeofLineDesc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineDesc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineDesc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineDiscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineDiscAmt
   Description: This method should be called when the discount amount on the invoice detail
record is changed.
   OperationID: OnChangeofLineDiscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineDiscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineDiscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineDiscPerc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineDiscPerc
   Description: This method should be called when the discount percent on the invoice detail
record is changed.
   OperationID: OnChangeofLineDiscPerc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineDiscPerc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineDiscPerc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineExemptTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineExemptTax
   Description: This method should be called when the user populates line Tax Exempt field previously being blank
record is changed.
   OperationID: OnChangeofLineExemptTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineExemptTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineExemptTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineExtPrice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineExtPrice
   Description: This method should be called when the extended amount on the invoice detail
record is changed.
   OperationID: OnChangeofLineExtPrice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineExtPrice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineExtPrice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineInvoiceLineRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineInvoiceLineRef
   Description: This method should be called when the Invoice Line Reference number
on the invoice detail record is changed.
   OperationID: OnChangeofLineInvoiceLineRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineInvoiceLineRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineInvoiceLineRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineOrderLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineOrderLine
   Description: This method should be called when the OrderLine number
on the invoice detail record is changed.
   OperationID: OnChangeofLineOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineOrderRelease(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineOrderRelease
   Description: This method should be called when the order release number
on the invoice detail record is changed.
   OperationID: OnChangeofLineOrderRelease
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineOrderRelease_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineOrderRelease_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLinePartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLinePartNum
   Description: This method should be called when the part number on the invoice detail
record is changed.
   OperationID: OnChangeofLinePartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLinePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLinePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLinePricePerCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLinePricePerCode
   Description: This method should be called when the price per code on the invoice detail
record is changed.
   OperationID: OnChangeofLinePricePerCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLinePricePerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLinePricePerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineProdCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineProdCode
   Description: This method should be called when the Product code on the invoice detail
record is changed.
   OperationID: OnChangeofLineProdCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineProdCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineProdCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineQty
   Description: This method should be called when the quantity on the invoice detail
record is changed.
   OperationID: OnChangeofLineQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.ARInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################
class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_AllocDepositRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_AllocDepositRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_CentralCollectionPaymentRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_CentralCollectionPaymentRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_HedTaxSumRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcChrgRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcChrgRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcDeferredRevRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcDeferredRevRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcDtlAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcDtlAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcDtlRASchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcDtlRASchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcDtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcDtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcDtlTGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcDtlTGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcHeadAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcHeadAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcHeadListRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcHeadListRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcHeadRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcHeadRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcMiscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcMiscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcSchedRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcSchedRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_InvcTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_InvcTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_MXInvcHeadFiscalTextRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_MXInvcHeadFiscalTextRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_MXInvcRefRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_MXInvcRefRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_TaxConnectStatusRow] = obj["value"]
      pass

class Erp_Tablesets_AllocDepositRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.PrePayType:int = obj["PrePayType"]
      """   0 - Prepaid Invoiced Deposit  
1 - Cash Deposit
2 - Reverse Cash Deposit  """  
      self.DepInvoiceNum:int = obj["DepInvoiceNum"]
      """  Deposit Invoice Number  """  
      self.DepGroupID:str = obj["DepGroupID"]
      """  Group ID of deposit payment  """  
      self.DepHeadNum:int = obj["DepHeadNum"]
      """  Identification of Deposit Payment  """  
      self.DepApplyDate:str = obj["DepApplyDate"]
      """  Apply Date of Deposit Invoice  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.PrePayStatus:int = obj["PrePayStatus"]
      """   0 - Unrecognized              
1 - Partial Recognized
2 - Full Recognized  """  
      self.DocAllocAmt:int = obj["DocAllocAmt"]
      """  Allocated Amount  """  
      self.AllocAmt:int = obj["AllocAmt"]
      self.Rpt1AllocAmt:int = obj["Rpt1AllocAmt"]
      self.Rpt2AllocAmt:int = obj["Rpt2AllocAmt"]
      self.Rpt3AllocAmt:int = obj["Rpt3AllocAmt"]
      self.DocAllocBal:int = obj["DocAllocBal"]
      """  Allocated Balance  """  
      self.AllocBal:int = obj["AllocBal"]
      self.Rpt1AllocBal:int = obj["Rpt1AllocBal"]
      self.Rpt2AllocBal:int = obj["Rpt2AllocBal"]
      self.Rpt3AllocBal:int = obj["Rpt3AllocBal"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total Tax Amount of Deposit  """  
      self.TaxAmt:int = obj["TaxAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.DocAllocTaxBal:int = obj["DocAllocTaxBal"]
      """  Remaining Tax Amount of Deposit  """  
      self.AllocTaxBal:int = obj["AllocTaxBal"]
      self.Rpt1AllocTaxBal:int = obj["Rpt1AllocTaxBal"]
      self.Rpt2AllocTaxBal:int = obj["Rpt2AllocTaxBal"]
      self.Rpt3AllocTaxBal:int = obj["Rpt3AllocTaxBal"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Shipment Invoice Number for which this Deposit is allocated  """  
      self.DepCheckRef:str = obj["DepCheckRef"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch used to determine what currency to display amounts in.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      self.DocumentAmt:int = obj["DocumentAmt"]
      self.DocDocumentAmt:int = obj["DocDocumentAmt"]
      self.Rpt1DocumentAmt:int = obj["Rpt1DocumentAmt"]
      self.Rpt2DocumentAmt:int = obj["Rpt2DocumentAmt"]
      self.Rpt3DocumentAmt:int = obj["Rpt3DocumentAmt"]
      self.CustNum:int = obj["CustNum"]
      self.Reference:str = obj["Reference"]
      self.MovementNum:int = obj["MovementNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_CentralCollectionPaymentRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier  """  
      self.GroupID:str = obj["GroupID"]
      """  GroupID of CashDtl or ARPNDtl depending on the value of the Source Field  """  
      self.HeadNum:int = obj["HeadNum"]
      """  Cash Receipt or Payment Instrument Number  in the central collection company.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  InvoiceRef of CashDtl or ARPNDtl Depending on the value of the Source Field  """  
      self.Source:int = obj["Source"]
      """  Source of the data. 0 = CashDtl  1=ARPNDtl (Payment Instrument)  """  
      self.CheckRef:str = obj["CheckRef"]
      """  The customer's Check number of the receipt transaction in the central collection company or the ARPromNoteID if a Payment Instrument Payment.  """  
      self.TranType:str = obj["TranType"]
      """  Identifies the type of transaction.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction Date  in the central collection company.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.TranAmt:int = obj["TranAmt"]
      """  Amount of transaction  """  
      self.DocTranAmt:int = obj["DocTranAmt"]
      """  Document Amount of transaction  """  
      self.Rpt1TranAmt:int = obj["Rpt1TranAmt"]
      """  Reporting 1 Amount of transaction  """  
      self.Rpt2TranAmt:int = obj["Rpt2TranAmt"]
      """  Reporting 2 Amount of transaction  """  
      self.Rpt3TranAmt:int = obj["Rpt3TranAmt"]
      """  Reporting 3 Amount of transaction  """  
      self.DiscountAmt:int = obj["DiscountAmt"]
      """  Discount amount  """  
      self.DocDiscountAmt:int = obj["DocDiscountAmt"]
      """  Document Discount amount  """  
      self.Rpt1DiscountAmt:int = obj["Rpt1DiscountAmt"]
      """  Reporting 1 Discount amount  """  
      self.Rpt2DiscountAmt:int = obj["Rpt2DiscountAmt"]
      """  Reporting 2 Discount amount  """  
      self.Rpt3DiscountAmt:int = obj["Rpt3DiscountAmt"]
      """  Reporting 3 Discount amount  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  The date that the record was last changed  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """  Indicates if the record is a credit memo.  """  
      self.ApplyHeadNum:int = obj["ApplyHeadNum"]
      """  Number of the unallocated deposit payment applied in the central collection Company.  """  
      self.CColCheckRef:str = obj["CColCheckRef"]
      """  Check Reference in the central collection company.  """  
      self.ReverseRef:int = obj["ReverseRef"]
      """  Reference to cash receipt which had been reversed.  """  
      self.ReverseDate:str = obj["ReverseDate"]
      """  Date when cash receipt had been reversed  """  
      self.PIStage:str = obj["PIStage"]
      """  Payment Instrument Stage  """  
      self.PICancelDate:str = obj["PICancelDate"]
      """  Date that the payment instrument was cancel  """  
      self.AdjustmentRef:int = obj["AdjustmentRef"]
      """  Reference to cash receipt which had been adjusted in the central collection company.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.DispTranType:str = obj["DispTranType"]
      """  Identifies the type of transaction.  """  
      self.DocDspDiscountAmt:int = obj["DocDspDiscountAmt"]
      """  Document Discount amount.  """  
      self.DocDspTranAmt:int = obj["DocDspTranAmt"]
      """  Document Amount of transaction.  """  
      self.DspDiscountAmt:int = obj["DspDiscountAmt"]
      """  Discount amount.  """  
      self.DspTranAmt:int = obj["DspTranAmt"]
      """  Amount of transaction.  """  
      self.Rpt1DspTranAmt:int = obj["Rpt1DspTranAmt"]
      """  Reporting 1 Amount of transaction.  """  
      self.Rpt2DspDiscountAmt:int = obj["Rpt2DspDiscountAmt"]
      """  Reporting 2 Discount amount.  """  
      self.Rpt2DspTranAmt:int = obj["Rpt2DspTranAmt"]
      """  Reporting 2 Amount of transaction.  """  
      self.Rpt3DspDiscountAmt:int = obj["Rpt3DspDiscountAmt"]
      """  Reporting 3 Discount amount.  """  
      self.Rpt3DspTranAmt:int = obj["Rpt3DspTranAmt"]
      """  Reporting 3 Amount of transaction.  """  
      self.Rpt1DspDiscountAmt:int = obj["Rpt1DspDiscountAmt"]
      """  Reporting 1 Discount amount.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency display switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Document reportable amount.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Document taxable amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document tax amount.  """  
      self.HedNum:int = obj["HedNum"]
      """  Order or Quote number this tax summary relates to.  """  
      self.Percent:int = obj["Percent"]
      """  Tax percent  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax amount  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax code  """  
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales Tax description  """  
      self.GroupID:str = obj["GroupID"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.RateCode:str = obj["RateCode"]
      """  Rate Code on the Header Tax Summary  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  Invoice Number of allocated Deposits  """  
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      """  Rate Code Description on the Header Tax Summary  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcChrgRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number - the invoice the finance charge was calculated for.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.FromDate:str = obj["FromDate"]
      """  From Date  """  
      self.ToDate:str = obj["ToDate"]
      """  To Date  """  
      self.ChargeAmt:int = obj["ChargeAmt"]
      """  Miscellaneous Charge Amount. Base Currency.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      """  Unique Identifier for the Finance Charges  """  
      self.ChargePercent:int = obj["ChargePercent"]
      """  The percentage that shall be applied to the invoice amount when calculating the interest.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  """  
      self.SourceInvoiceNum:int = obj["SourceInvoiceNum"]
      """  The invoice the finance charge was calculated for.  """  
      self.DocChargeAmt:int = obj["DocChargeAmt"]
      """  Miscellaneous Charge Amount. Document Currency.  """  
      self.Rpt1ChargeAmt:int = obj["Rpt1ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ChargeAmt:int = obj["Rpt2ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ChargeAmt:int = obj["Rpt3ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.ReminderPreview:bool = obj["ReminderPreview"]
      """  This is a bool flag that indicates that the record was created not a as part of finance charges, but as a part of reminder letter functionality and will be used for printing only.  """  
      self.LetterNum:int = obj["LetterNum"]
      """  Reminder Letter num.  """  
      self.Manual:bool = obj["Manual"]
      """  The field specifies, whether the charge was generated by the program or entered manually in AR iNvoice Entry.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OutstandingBalance:int = obj["OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Base Currency.  """  
      self.DocOutstandingBalance:int = obj["DocOutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Document Currency.  """  
      self.Rpt1OutstandingBalance:int = obj["Rpt1OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.Rpt2OutstandingBalance:int = obj["Rpt2OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.Rpt3OutstandingBalance:int = obj["Rpt3OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      self.DspChargeAmt:int = obj["DspChargeAmt"]
      self.DspDocChargeAmt:int = obj["DspDocChargeAmt"]
      self.GroupID:str = obj["GroupID"]
      """  Group ID for the invoice  """  
      self.Rpt1DspChargeAmt:int = obj["Rpt1DspChargeAmt"]
      self.Rpt2DspChargeAmt:int = obj["Rpt2DspChargeAmt"]
      self.Rpt3DspChargeAmt:int = obj["Rpt3DspChargeAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDeferredRevRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.Revenue:int = obj["Revenue"]
      self.Recognized:int = obj["Recognized"]
      self.Unrecognized:int = obj["Unrecognized"]
      self.Distributed:int = obj["Distributed"]
      self.Remaining:int = obj["Remaining"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.GroupID:str = obj["GroupID"]
      self.DocRevenue:int = obj["DocRevenue"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.Rpt1Revenue:int = obj["Rpt1Revenue"]
      self.Rpt2Revenue:int = obj["Rpt2Revenue"]
      self.Rpt3Revenue:int = obj["Rpt3Revenue"]
      self.DocDistributed:int = obj["DocDistributed"]
      self.Rpt1Distributed:int = obj["Rpt1Distributed"]
      self.Rpt2Distributed:int = obj["Rpt2Distributed"]
      self.Rpt3Distributed:int = obj["Rpt3Distributed"]
      self.DocRecognized:int = obj["DocRecognized"]
      self.Rpt1Recognized:int = obj["Rpt1Recognized"]
      self.Rpt2Recognized:int = obj["Rpt2Recognized"]
      self.Rpt3Recognized:int = obj["Rpt3Recognized"]
      self.DocRemaining:int = obj["DocRemaining"]
      self.Rpt1Remaining:int = obj["Rpt1Remaining"]
      self.Rpt2Remaining:int = obj["Rpt2Remaining"]
      self.Rpt3Remaining:int = obj["Rpt3Remaining"]
      self.Rpt1Unrecognized:int = obj["Rpt1Unrecognized"]
      self.Rpt2Unrecognized:int = obj["Rpt2Unrecognized"]
      self.Rpt3Unrecognized:int = obj["Rpt3Unrecognized"]
      self.DocUnrecognized:int = obj["DocUnrecognized"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlRASchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.AmortSeq:int = obj["AmortSeq"]
      """  Internal identifier used to keep the records unique.  Each invoice line that is amortized will have a record for each period in which an amortization occurs.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The id of the fiscal calendar this record is related to.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  The fiscal year.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  The fiscal year suffix.  Allows for additional breakdown/definition of fiscal years, for example, by quarters.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  The fiscal period number in the fiscal year.  """  
      self.AmortDate:str = obj["AmortDate"]
      """  This is the date when the percentage of revenue will be recognized.  """  
      self.AmortPercent:int = obj["AmortPercent"]
      """  This is the percentage of total revenue to be recognized.  """  
      self.AmortAmt:int = obj["AmortAmt"]
      """  Amortization Amount of the invoice.  """  
      self.Rpt1AmortAmt:int = obj["Rpt1AmortAmt"]
      """  The amount to be recognized in the first reporting currency.  """  
      self.Rpt2AmortAmt:int = obj["Rpt2AmortAmt"]
      """  The amortization amount in the reporting currency.  """  
      self.Rpt3AmortAmt:int = obj["Rpt3AmortAmt"]
      """  The amortization in reporting currency.  """  
      self.DocAmortAmount:int = obj["DocAmortAmount"]
      """  The amortization amount in document currency.  """  
      self.Hold:bool = obj["Hold"]
      """  Indicates if this amortization period is on hold.  """  
      self.HoldReasonCode:str = obj["HoldReasonCode"]
      """  Descriptive code assigned by user which uniquely identifies a reason code master record and identifies why a amortization period is on hold.  """  
      self.HoldText:str = obj["HoldText"]
      """  Descriptive text further explaining why an amortization period is on hold.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if the revenue has been recognized for this line.  """  
      self.PostedDate:str = obj["PostedDate"]
      """  The date when the revenue was recognized.  """  
      self.ContractNum:int = obj["ContractNum"]
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgAmortSeq:int = obj["OrgAmortSeq"]
      """  Internal identifier used to Keep the records unique. Each invoice line that is amortized will have a record for each period in which an amortization occurs.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CustID:str = obj["CustID"]
      self.DocAmortAmt:int = obj["DocAmortAmt"]
      self.DocDspAmortAmt:int = obj["DocDspAmortAmt"]
      self.DocDspRevenueAmt:int = obj["DocDspRevenueAmt"]
      self.DocRevenueAmt:int = obj["DocRevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in document currency.  """  
      self.DspAmortAmt:int = obj["DspAmortAmt"]
      self.DspRevenueAmt:int = obj["DspRevenueAmt"]
      self.GroupID:str = obj["GroupID"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice Date is coming from the InvcHead.  """  
      self.ReadyToPost:bool = obj["ReadyToPost"]
      self.RevenueAmt:int = obj["RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount).  """  
      self.Rpt1DspAmortAmt:int = obj["Rpt1DspAmortAmt"]
      self.Rpt1DspRevenueAmt:int = obj["Rpt1DspRevenueAmt"]
      self.Rpt1RevenueAmt:int = obj["Rpt1RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Rpt2DspAmortAmt:int = obj["Rpt2DspAmortAmt"]
      self.Rpt2DspRevenueAmt:int = obj["Rpt2DspRevenueAmt"]
      self.Rpt2RevenueAmt:int = obj["Rpt2RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Rpt3DspAmortAmt:int = obj["Rpt3DspAmortAmt"]
      self.Rpt3DspRevenueAmt:int = obj["Rpt3DspRevenueAmt"]
      self.Rpt3RevenueAmt:int = obj["Rpt3RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Selected:bool = obj["Selected"]
      """  Flag to indicate if the record has been selected for the Hold/Unhold Amortization Periods process.  """  
      self.SeqDuration:str = obj["SeqDuration"]
      """  Displays the Amortization Seq in relation to the total Duration periods (i.e. AmortSeq/Duration).  """  
      self.TotalAmortAmt:int = obj["TotalAmortAmt"]
      """  Total Amortization Amount of all the periods displayed on the grid in base currency.  """  
      self.IsLocked:bool = obj["IsLocked"]
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an Schedule line is already in review journal or in posting process.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT" and line for service calls  "CALL".  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different Part number than the internal part number.  This field is defaulted from the OrderDtl or ShipDtl files.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision.  Default from the ShipDtl.XRevisionNum for shipment lines or from OrderDtl.XRevisionNum, otherwise left blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number used to identify line item part.  This would be used as "Our" part number if there is a difference between us and the customers part numbering scheme.  Defaults from the OrderDtl.PartNum or the ShipDtl.PartNum.  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Description of the line item.  Defaults from ShipDtl.LineDesc, OrderDtl.LineDesc or Part.PartDescription.  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure.  Defaulted from ShipDtl.IUM, OrderRel.IUM or Part.IUM.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Our Current Revision Number for this Part.  """  
      self.POLine:str = obj["POLine"]
      """  Contains the line reference of the item on the customers PO. This is for reference and printing purposes.  Defaults from the OrderDtl.POLine.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this customer is exempt from sales tax for this line item.  If field is non-blank it is considered exempt.  This code is totally user definable and no validation is required.  This field will be printed on the Tax report if this item is reportable.  When the value is changed from blank to non-blank or vice versa tax calculation logic kicks in to calculate the sales tax info in the InvcTax file.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record.  Defaults from the OrderDtl if related to an Order or from the Part Master.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """   Indicates if this line is commissionable for the related sales rep's.
Defaults from the OrderDtl.  Note: "Deposit" invoice is always No.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """   Unit price discount percent.  User can enter a percentage and the system calculates the  discount amount.
NOT MAINTAINABLE & zero if Advance Bill.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """   Indicates the pricing per quantity.  It can be "E" = per each,
"C" = per hundred,  "M" = per thousand.  Used to calculate the extended unit price for the line item.  The logic is to divide the InvcDtl.ShipQty by the appropriate "per" value and then multiply by unit price.  Use the OrderDtl.PricePerCode as default if referenced to an order else use Part.PricePerCode as a default.  If Part record does not exist then default as "E".  """  
      self.OurOrderQty:int = obj["OurOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.OurReqQty.  """  
      self.ExtPrice:int = obj["ExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.Discount:int = obj["Discount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Contains the foreign key to the ProdGrup file.  Can be blank or must be valid.  Defaults from the OrderDtl or Part file.  """  
      self.OurShipQty:int = obj["OurShipQty"]
      """  Our Quantity Shipped/billed.  Can be defaulted from ShipDtl.OurShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this detail record is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  The packing slip line number that is being invoiced.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order number.  This is not maintainable by the user.  The system duplicates it from the InvcHead.OrderNum.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  The associated sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Contains the release number of the order line item that is being invoiced.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Customer Ship To ID for the item.  Defaults from the Customer, OrderRel or ShipDtl records.  If invoice details reference only one ship to then the ship to info is printed as heading info. otherwise a "See Below" message is printed and the Ship To info is printed as part of the invoice detail body.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  Ship date of the invoice line item.  Defaults from the ShipHead or from the invoice date when not referencing a packing slip.  When printed on the invoice it is printed as part of the heading if only one date exists else it is printed as part of the detail line.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  ShipVia for the invoice detail lines.  Contains the Foreign key to the SHIPVIA master file. Can be left blank or must be valid.  Default from the OrderRel, ShipHead, Customer or ShipTo.  If invoice contains only a single ship via then it is printed as part of the heading; otherwise, it prints as part of the line item detail.  """  
      self.AdvanceBillCredit:int = obj["AdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.DocAdvanceBillCredit:int = obj["DocAdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal number that is used to link the invoice to the Customer master file.  This is not maintainable, it is duplicated from the InvcHead.CustNum field.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to enter comments about the invoice line item.  These are printed on the invoice.  When invoice is referenced to a sales order line then this is defaulted from OrderDtl.InvoiceComment.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Contains the key value for the shipping contact in the CUSTCNT table.  Can be blank or must be valid in the CUSTCNT table.  Use the Customer.PrimSCon as a default or from OrderRel record.  """  
      self.MtlUnitCost:int = obj["MtlUnitCost"]
      """  Material Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.LbrUnitCost:int = obj["LbrUnitCost"]
      """  Labor Unit Cost. The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.BurUnitCost:int = obj["BurUnitCost"]
      """  Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.SubUnitCost:int = obj["SubUnitCost"]
      """  Subcontract Unit Cost.  If shipped from inventory then it is zero. (Subcontract cost is combined with material cost on part master) The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.MtlBurUnitCost:int = obj["MtlBurUnitCost"]
      """  Material Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.COSPostingReqd:bool = obj["COSPostingReqd"]
      """  Answers the question, "Does this InvcDtl need to have cost of sales posted to G/L?"  If the Manufacturing System is not using a A/R clearing account (XASyst.ARClearingDiv = "") then the costs were already posted to the Cost Of Sales account by the COS/WIP procedure (JCP80.W), so there are no costs to move.  """  
      self.COSPosted:bool = obj["COSPosted"]
      """   If the amount of this InvcDtl was posted to the A/R clearing account (COSPostingReq = Yes), then at sometime the amount needs to be moved to the COS account.   When the costs are moved, this flag is set to Yes.
When a product is shipped it's costs are put in A/R Clearing.  When it's invoiced the costs are ready to be moved to COS.  The Capture WIP/COS Activity procedure (JCP80.W) moves these costs.  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallCode:str = obj["CallCode"]
      """  A unique code that identifies the type of service call.  Link to GL accounts when LineType = "CALL"  """  
      self.RMANum:int = obj["RMANum"]
      """   The related RMA number. Note: This only applies to Credit Memos.
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.RMALine:int = obj["RMALine"]
      """   The related RMA Line number.  This along with the RMANum provides the foreign key to the related RMADtl record.
(See InvcDtl.RMANum)  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """   Fiscal year that clearing/cos entry was posted to in G/L.
Note: The Fiscal Year, Period, Journal Code, JournalNum pertain only to records which were used to post to the ARClearing/COS. This condition is indicated if  COSPostingReqd = Yes.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """   Fiscal period that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """   Journal Code of the related GLJrnDtl.
Note: This is set as the Inventory Journal code defined in the inventory configuration options.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal # that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.SellingOrderQty:int = obj["SellingOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.SellingReqQty.  """  
      self.SellingShipQty:int = obj["SellingShipQty"]
      """  Selling Quantity Shipped/billed.  Can be defaulted from ShipDtl.SellingShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit Of Measure.  Defaulted from ShipDtl.SUM, OrderDtl.SUM or Part.SUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project Id that links the invoice detail  to the Project table.  """  
      self.MilestoneID:str = obj["MilestoneID"]
      """  Milestone id that links the invoice detail  to the ProjectMilestone.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied.  Will default from the OrderDtl.ListPrice.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocListPrice.  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  Will default from the OrderDtl.OrdBasedPrice.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocOrdBasedPrice.  """  
      self.AdvGainLoss:int = obj["AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Sales representative commission rate.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Sales representative commission rate.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Sales representative commission rate.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Sales representative commission rate.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Sales representative commission rate.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Sales representative commission percentage.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Sales representative commission percentage.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Sales representative commission percentage.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Sales representative commission percentage.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Sales representative commission percentage.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number used for consolidated invoices  """  
      self.JCMtlUnitCost:int = obj["JCMtlUnitCost"]
      """  Job Closing Material Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCLbrUnitCost:int = obj["JCLbrUnitCost"]
      """  Job Closing Labor Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCBurUnitCost:int = obj["JCBurUnitCost"]
      """  Job Closing Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCSubUnitCost:int = obj["JCSubUnitCost"]
      """  Job Closing Subcontract Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCMtlBurUnitCost:int = obj["JCMtlBurUnitCost"]
      """  Job Closing Material Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this invoice line.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AR invoice line.  """  
      self.OverrideReverseCharge:bool = obj["OverrideReverseCharge"]
      """  Indicates if the user overrides the Reverse Charge Method.  """  
      self.RevChargeApplied:bool = obj["RevChargeApplied"]
      """  Indicates if Reverse Charge tax line has been applied.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the InvcTax records tied to this line are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the line before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.Rpt1AdvanceBillCredit:int = obj["Rpt1AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2AdvanceBillCredit:int = obj["Rpt2AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3AdvanceBillCredit:int = obj["Rpt3AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1AdvGainLoss:int = obj["Rpt1AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2AdvGainLoss:int = obj["Rpt2AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3AdvGainLoss:int = obj["Rpt3AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the One Time ShipTo tax region for purposes of Sales Tax calculations.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipping adress country Number.  """  
      self.Plant:str = obj["Plant"]
      """  Value is copied from PartTran for PE  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  value is copied from PartTran for PE  """  
      self.CallLine:int = obj["CallLine"]
      """  value is copied from PartTran for PE  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  Drop Shipment Pack Line  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Drop shipment Packing Slip.  """  
      self.FinChargeCode:str = obj["FinChargeCode"]
      """  FK to the Finance Charges table  """  
      self.ABTUID:str = obj["ABTUID"]
      """  Reference to the ABT, it is GUID, used in PostingEngine  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.InExtPrice:int = obj["InExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocInExtPrice:int = obj["DocInExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.InDiscount:int = obj["InDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.InTotalMiscChrg:int = obj["InTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.DocInTotalMiscChrg:int = obj["DocInTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InListPrice.  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocInListPrice.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InOrdBasedPrice.  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocInOrdBasedPrice.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt1InExtPrice:int = obj["Rpt1InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPrice:int = obj["Rpt2InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPrice:int = obj["Rpt3InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InTotalMiscChrg:int = obj["Rpt1InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2InTotalMiscChrg:int = obj["Rpt2InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3InTotalMiscChrg:int = obj["Rpt3InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the Invoice Detail was created by the Correction (Reversing) logic.  """  
      self.AssetNum:str = obj["AssetNum"]
      """  Asset number of the linked Asset Disposal transaction.  """  
      self.DisposalNum:int = obj["DisposalNum"]
      """  Unique number to identify the linked Asset Disposal transaction.  """  
      self.PBLineType:str = obj["PBLineType"]
      """   Project Billing transactuion type with following options:
MWA = Measured Work, 
LBD = Employee Labor (Direct Labor), 
LBC = Contract Labor, 
MTL = Material, 
SUB = Subcontract, 
MSC = Other,
RET = Retention, 
FLBR = Fee Labor
FMTL = Fee Material,
FSUB = Fee Subcontract, 
FMSC = Fee ODC,
FPRJ = Fee of total project,
FRET = Fee retention,
BDN  = Burden,
CEIL = Reduce by Ceiling,
CLFR = Close ? Fee retention,
CLPR = Close ? Project Retention (CP)
CLSR = Close Billing schedule - Reverse retention
CLSA = Close Project ? Unassigned activities  """  
      self.InvoiceLineRef:int = obj["InvoiceLineRef"]
      """  Invoice line reference  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  Invoice Number Reference  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Number.  This field should be set according to the linked Shipment Line.  """  
      self.PBInvoiceLine:int = obj["PBInvoiceLine"]
      """  Reference to the draft invoice line created in Invoice Preparation  """  
      self.RAID:int = obj["RAID"]
      """  Contains the value of the AC_RAHead.RAID client accommodation.  """  
      self.RADtlID:int = obj["RADtlID"]
      """  Contains the value of the AC_RADtl.RADtlID client detail accommodation.  """  
      self.DeferredRev:bool = obj["DeferredRev"]
      """  Indicates if revenue is deferred for contracts assigned to this group.  """  
      self.RACode:str = obj["RACode"]
      """  Revenue Amortization Code.  """  
      self.DefRevStart:str = obj["DefRevStart"]
      """  Starting date the revenue is deferred.  """  
      self.ChargeDefRev:bool = obj["ChargeDefRev"]
      """  When Yes the decision to defer revenue on an invoice line was made after the invoice was posted and the deferred revenue account has not yet been charged.  This flag is used internally to determine whether or not a journal clearing the sales and charging the deferrred revenue account needs to be created.  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefRevPosted:bool = obj["DefRevPosted"]
      """  DefRevPosted  """  
      self.LinkedInvcUnitPrice:int = obj["LinkedInvcUnitPrice"]
      """  Unit price of Invoice linked to Bill of Exchange in original currency.  """  
      self.DspWithholdAmt:int = obj["DspWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.DocDspWithholdAmt:int = obj["DocDspWithholdAmt"]
      """  Withholding Tax Amount in document currency  """  
      self.Rpt1DspWithholdAmt:int = obj["Rpt1DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt2DspWithholdAmt:int = obj["Rpt2DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt3DspWithholdAmt:int = obj["Rpt3DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.LinkedCurrencyCode:str = obj["LinkedCurrencyCode"]
      """  Currency code from linked Invoice Header  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.PEBOEHeadNum:int = obj["PEBOEHeadNum"]
      """  PEBOEHeadNum  """  
      self.MXSellingShipQty:int = obj["MXSellingShipQty"]
      """  MXSellingShipQty  """  
      self.MXUnitPrice:int = obj["MXUnitPrice"]
      """  MXUnitPrice  """  
      self.DocMXUnitPrice:int = obj["DocMXUnitPrice"]
      """  DocMXUnitPrice  """  
      self.Rpt1MXUnitPrice:int = obj["Rpt1MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2MXUnitPrice:int = obj["Rpt2MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3MXUnitPrice:int = obj["Rpt3MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CustCostCenter:str = obj["CustCostCenter"]
      """  CustCostCenter  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DefRevEndDate:str = obj["DefRevEndDate"]
      """  DefRevEndDate  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.Reclassified:bool = obj["Reclassified"]
      """  Indicates tha this invoice Line was reclassified.  """  
      self.PartiallyDefer:bool = obj["PartiallyDefer"]
      """  Enables the user the ability to override the Percent or Amount of revenue to be deferred  """  
      self.DeferredPercent:int = obj["DeferredPercent"]
      """  Percentage of revenue to be deferred for this line item  """  
      self.Reclass:bool = obj["Reclass"]
      """  Enables the user the ability tp reclassify deferred revenue and select a reclassification code and reason code.  """  
      self.DeferredOnly:bool = obj["DeferredOnly"]
      """  Defines if the reclassification posting will only reclass the deferred revenue, or if the recognized revenue will be reclassed as well  """  
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      """  Reclassification Code. This field will be required if Reclass is checked.  """  
      self.ReclassReasonCode:str = obj["ReclassReasonCode"]
      """  Reason Code for reclassification from Reason Code Maintanance that have type 'Deferred Revenue'. This field will be required if reclass is checked.  """  
      self.ReclassComments:str = obj["ReclassComments"]
      """  Internal comments for reclassification entered by the user.  """  
      self.DeferredRevAmt:int = obj["DeferredRevAmt"]
      """  Deferred Revenue Amount in base currency  """  
      self.DocDeferredRevAmt:int = obj["DocDeferredRevAmt"]
      """  Deferred Revenue Amount in document currency  """  
      self.Rpt1DeferredRevAmt:int = obj["Rpt1DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt2DeferredRevAmt:int = obj["Rpt2DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt3DeferredRevAmt:int = obj["Rpt3DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.ChargeReclass:bool = obj["ChargeReclass"]
      """  ChargeReclass  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.DropShipPONum:int = obj["DropShipPONum"]
      """  DropShipPONum  """  
      self.DocInAdvanceBillCredit:int = obj["DocInAdvanceBillCredit"]
      """  DocInAdvanceBillCredit  """  
      self.InAdvanceBillCredit:int = obj["InAdvanceBillCredit"]
      """  InAdvanceBillCredit  """  
      self.Rpt1InAdvanceBillCredit:int = obj["Rpt1InAdvanceBillCredit"]
      """  Rpt1InAdvanceBillCredit  """  
      self.Rpt2InAdvanceBillCredit:int = obj["Rpt2InAdvanceBillCredit"]
      """  Rpt2InAdvanceBillCredit  """  
      self.Rpt3InAdvanceBillCredit:int = obj["Rpt3InAdvanceBillCredit"]
      """  Rpt3InAdvanceBillCredit  """  
      self.MYIndustryCode:str = obj["MYIndustryCode"]
      """  MYIndustryCode  """  
      self.DockingStation:str = obj["DockingStation"]
      """  The dockingstation of the shipto address.  For future use.  """  
      self.ConsolidateLines:bool = obj["ConsolidateLines"]
      """  ConsolidateLines  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this invoice line was created from.  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  True if transaction is related to Epicor FSA  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PETaxExempt:str = obj["PETaxExempt"]
      """  PETaxExempt  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the Invoicing Company.  """  
      self.CColOrderLine:int = obj["CColOrderLine"]
      """  Order number line the Invoicing Company.  """  
      self.CColOrderRel:int = obj["CColOrderRel"]
      """  Order number release the Invoicing Company.  """  
      self.CColInvoiceLineRef:int = obj["CColInvoiceLineRef"]
      """  Invoice Line reference on the Invoicing Company.  """  
      self.CColPackNum:int = obj["CColPackNum"]
      """  Packing slip number on the Invoicing Company.  """  
      self.CColPackLine:int = obj["CColPackLine"]
      """  Packing slip line number on the Invoicing Company.  """  
      self.CColDropShipPackSlip:str = obj["CColDropShipPackSlip"]
      """  Drop shipment packing slip number on the Invoicing Company.  """  
      self.CColDropShipPackSlipLine:int = obj["CColDropShipPackSlipLine"]
      """  Drop shipment packing slip line number on the Invoicing Company.  """  
      self.CColShipToCustID:str = obj["CColShipToCustID"]
      """  Ship To Customer ID from the Invoice Line in the subsidiary company.  """  
      self.CColShipToNum:str = obj["CColShipToNum"]
      """  Ship To from the Invoice Line in the subsidiary company.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.ServiceSource:str = obj["ServiceSource"]
      """  Indicates where invoice detail was created from when created from a service call job. Not maintainable. “Summarized Labor”, “Summarized Material”, “Labor”, “Material”  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  AssemblySeq related to JobMtl or JobOper used to create invoice line from service call job  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  Job Mtl seq used to create invoice line from service call job  """  
      self.OprSeq:int = obj["OprSeq"]
      """  Job subcontract oper seq used to create invoice line from service call job  """  
      self.LaborType:str = obj["LaborType"]
      """  Indicates the labor type of the LaborDtl used to create invoice from service call job.  """  
      self.BillableLaborHrs:int = obj["BillableLaborHrs"]
      """  LaborDtl hours summed by labor rate. Used to create invoice line from labor related to service call job.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable rate used to create invoice line from labor related to service call job. In base currency.  """  
      self.ServiceSourceType:str = obj["ServiceSourceType"]
      """  Indicates the type of service call transaction data used to create the invoice detail from a service call job. MT (material), LB (labor), SC (subcontract), MC (misc charge), SM (summarized material), SL (summarized labor), SS (summarized subcontract) No summarization for MC.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AdvBillEnabled:bool = obj["AdvBillEnabled"]
      """  Adv bill enabled flag  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      self.AllowUpdPartDefer:bool = obj["AllowUpdPartDefer"]
      """  This flag not allow updating PartiallyDefer in 'Posted Invoice Update' if  AR Invoice Line was  marked as Partially Defer in AR Invoice Entry.  """  
      self.BillToCustID:str = obj["BillToCustID"]
      """  CustID associated with the InvcDtl.BTCustNum field.  """  
      self.BTCustName:str = obj["BTCustName"]
      """  Customer Name associated with the InvcDtl.BTCustNum field.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CheckAmortAmounts:bool = obj["CheckAmortAmounts"]
      """  Used internally to determine when the user needs to be prompted to recalculate the amortization schedules.  This is not intended for use by the customers.  """  
      self.CNGTIDescription1:str = obj["CNGTIDescription1"]
      self.CNGTIDescription2:str = obj["CNGTIDescription2"]
      self.CNGTIDescription3:str = obj["CNGTIDescription3"]
      self.CNGTIDiscountTaxAmount:int = obj["CNGTIDiscountTaxAmount"]
      """  CSF China, discount tax amount  """  
      self.CNGTIIUM:str = obj["CNGTIIUM"]
      self.CNGTINetAmount:int = obj["CNGTINetAmount"]
      self.CNGTIPartDescription:str = obj["CNGTIPartDescription"]
      self.CNGTISpecification:str = obj["CNGTISpecification"]
      self.CNGTITaxAmount:int = obj["CNGTITaxAmount"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.CNGTITaxPercent:int = obj["CNGTITaxPercent"]
      self.CNGTITotalAmount:int = obj["CNGTITotalAmount"]
      self.CNGTIUnitPrice:int = obj["CNGTIUnitPrice"]
      """  CSF China, Unit price = if InvcHead.InPrice then InvcDtl.InUnitPrice else InvcDtl.UnitPrice  """  
      self.ContractSuspended:bool = obj["ContractSuspended"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency code from InvcHead.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CustID:str = obj["CustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.CustName:str = obj["CustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Invoice Detail Customer Name  """  
      self.DeleteRASchedule:bool = obj["DeleteRASchedule"]
      """  Intended for internal use.  This is set to yes when the user answers yes to the prompt asking if they want to delete schedules after they unchecked the deferred revenue flag.  """  
      self.DispGLAcct:str = obj["DispGLAcct"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DispPONum:str = obj["DispPONum"]
      """  PO number for display.  """  
      self.DispShipToAddr:str = obj["DispShipToAddr"]
      """  Ship to display address  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol.  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  Document discount amount  """  
      self.DocLineTax:int = obj["DocLineTax"]
      """  Doc line tax  """  
      self.DocLineTotal:int = obj["DocLineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.DocPEDetAmt:int = obj["DocPEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.DropShipment:bool = obj["DropShipment"]
      """  Drop Shipment  """  
      self.DspAdvanceBillCredit:int = obj["DspAdvanceBillCredit"]
      """  Display advance bill credit  """  
      self.DspDiscount:int = obj["DspDiscount"]
      """  Display discount  """  
      self.DspDocAdvanceBillCredit:int = obj["DspDocAdvanceBillCredit"]
      """  Display documents advance bill credit  """  
      self.DspDocDiscount:int = obj["DspDocDiscount"]
      """  Display document discount  """  
      self.DspDocExtPrice:int = obj["DspDocExtPrice"]
      """  Display document ext price  """  
      self.DspDocLessDiscount:int = obj["DspDocLessDiscount"]
      """  Display document less discount  """  
      self.DspDocLineTax:int = obj["DspDocLineTax"]
      """  Display document line tax  """  
      self.DspDocLineTotal:int = obj["DspDocLineTotal"]
      """  Display document line total  """  
      self.DspDocTotalMiscChrg:int = obj["DspDocTotalMiscChrg"]
      """  Display document total misc. charge  """  
      self.DspExtPrice:int = obj["DspExtPrice"]
      """  Display ext price  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display Invoice Reference  """  
      self.DspLessDiscount:int = obj["DspLessDiscount"]
      """  Display less discount  """  
      self.DspLineTax:int = obj["DspLineTax"]
      """  Display line tax  """  
      self.DspLineTotal:int = obj["DspLineTotal"]
      """  Display line total  """  
      self.DspOurShipQty:int = obj["DspOurShipQty"]
      """  Display our ship qty  """  
      self.DspSellingShipQty:int = obj["DspSellingShipQty"]
      """  Display selling ship qty  """  
      self.DspTaxExempt:str = obj["DspTaxExempt"]
      self.DspTotalMiscChrg:int = obj["DspTotalMiscChrg"]
      """  Display total misc. charges  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      self.DueDate:str = obj["DueDate"]
      """  Invoice head due date.  """  
      self.EmpID:str = obj["EmpID"]
      """  FSA Technician  """  
      self.EnableDspWithholdAmt:bool = obj["EnableDspWithholdAmt"]
      self.EnableRMADelete:bool = obj["EnableRMADelete"]
      self.EnableRMAUpdate:bool = obj["EnableRMAUpdate"]
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEmpID:str = obj["FSAEmpID"]
      """  Employee created in ERP and processed on FSA as Service Technician, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.FSAWarrantyCode:str = obj["FSAWarrantyCode"]
      """  Warranty created in ERP and processed on FSA, stored on FSAExtData db table.  """  
      self.GLTranAmt:int = obj["GLTranAmt"]
      """  GL Journal Source Transaction Amount  """  
      self.GLTranDate:str = obj["GLTranDate"]
      """  GL Journal Source Transaction Date  """  
      self.GroupID:str = obj["GroupID"]
      """  Group associated to the invoice  """  
      self.InPrice:bool = obj["InPrice"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvLegalNum:str = obj["InvLegalNum"]
      """  Invoice Header Legal Number  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice Date from InvcHead.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice header type  """  
      self.IsCommisBtnSensitive:bool = obj["IsCommisBtnSensitive"]
      """  Is commission button sensitive  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsTaxBtnSensitive:bool = obj["IsTaxBtnSensitive"]
      """  Tax buton sensitive or not.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  display discount  """  
      self.LineTax:int = obj["LineTax"]
      """  Line tax amount  """  
      self.LineTotal:int = obj["LineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.LinkedCurrencySymbol:str = obj["LinkedCurrencySymbol"]
      self.NoShipTaxRgnInfo:bool = obj["NoShipTaxRgnInfo"]
      """  The flag based on the user responce to indicate if Ship To to be chnaged on Invoice detail record without tax information from Ship To because of the different tax pricing  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Open invoice flag from InvcHead.  """  
      self.OrderUM:str = obj["OrderUM"]
      """  OrderUM display  """  
      self.OrigTaxCat:str = obj["OrigTaxCat"]
      """  original tax category  """  
      self.PEDetAmt:int = obj["PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEVATExemptionReason:str = obj["PEVATExemptionReason"]
      """  PE VAT Exemption Reason  """  
      self.Posted:bool = obj["Posted"]
      """  Posted flag from the InvcHead.  """  
      self.RADesc:str = obj["RADesc"]
      self.RASchedExists:bool = obj["RASchedExists"]
      """  Intended for internal use.  Indicates whether or not revenue amortization schedules exist.  """  
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  The internal flag to indicate if the logic is supposed to remove manual and/or manually added tax records per User request if the Line Tax Exempt field is populated  """  
      self.Rpt1DspAdvanceBillCredit:int = obj["Rpt1DspAdvanceBillCredit"]
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      self.Rpt1DspExtPrice:int = obj["Rpt1DspExtPrice"]
      self.Rpt1DspLessDiscount:int = obj["Rpt1DspLessDiscount"]
      self.Rpt1DspLineTax:int = obj["Rpt1DspLineTax"]
      self.Rpt1DspLineTotal:int = obj["Rpt1DspLineTotal"]
      self.Rpt1DspTotalMiscChrg:int = obj["Rpt1DspTotalMiscChrg"]
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      self.Rpt1LineTax:int = obj["Rpt1LineTax"]
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt1PEDetAmt:int = obj["Rpt1PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt2DspAdvanceBillCredit:int = obj["Rpt2DspAdvanceBillCredit"]
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      self.Rpt2DspExtPrice:int = obj["Rpt2DspExtPrice"]
      self.Rpt2DspLessDiscount:int = obj["Rpt2DspLessDiscount"]
      self.Rpt2DspLineTax:int = obj["Rpt2DspLineTax"]
      self.Rpt2DspLineTotal:int = obj["Rpt2DspLineTotal"]
      self.Rpt2DspTotalMiscChrg:int = obj["Rpt2DspTotalMiscChrg"]
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      self.Rpt2LineTax:int = obj["Rpt2LineTax"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt2PEDetAmt:int = obj["Rpt2PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt3DspAdvanceBillCredit:int = obj["Rpt3DspAdvanceBillCredit"]
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      self.Rpt3DspExtPrice:int = obj["Rpt3DspExtPrice"]
      self.Rpt3DspLessDiscount:int = obj["Rpt3DspLessDiscount"]
      self.Rpt3DspLineTax:int = obj["Rpt3DspLineTax"]
      self.Rpt3DspLineTotal:int = obj["Rpt3DspLineTotal"]
      self.Rpt3DspTotalMiscChrg:int = obj["Rpt3DspTotalMiscChrg"]
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      self.Rpt3LineTax:int = obj["Rpt3LineTax"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt3PEDetAmt:int = obj["Rpt3PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st sales rep of the invoice.  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd sales rep of the invoice header.  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd sales rep code of the invoice header.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th sales rep code of the invoice header.  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th salesrep code of the invoice header.  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShpLegalNum:str = obj["ShpLegalNum"]
      """  Ship Head Legal Number  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.SoldToCustName:str = obj["SoldToCustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Terms code from InvcHead.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.AllowReclassify:bool = obj["AllowReclassify"]
      """  This flag allow updating Reclassification data.  """  
      self.LineAmtRecalcd:bool = obj["LineAmtRecalcd"]
      """  The flag to indicate if the amount  is re-calculated to doc/base/rpt currencies after entered and no need to re-calculate on save.  """  
      self.IsExtrastatSensitive:bool = obj["IsExtrastatSensitive"]
      """  Set to true if extra trade statistics is enabled.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallCodeCallDescription:str = obj["CallCodeCallDescription"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.ContractNumSuspended:bool = obj["ContractNumSuspended"]
      self.CustCntName:str = obj["CustCntName"]
      self.CustCntMiddleName:str = obj["CustCntMiddleName"]
      self.CustCntFirstName:str = obj["CustCntFirstName"]
      self.CustCntFaxNum:str = obj["CustCntFaxNum"]
      self.CustCntCorpName:str = obj["CustCntCorpName"]
      self.CustCntPhoneNum:str = obj["CustCntPhoneNum"]
      self.CustCntLastName:str = obj["CustCntLastName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumAllowShipTo3:bool = obj["CustNumAllowShipTo3"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MilestoneIDDescription:str = obj["MilestoneIDDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.PackLineLineDesc:str = obj["PackLineLineDesc"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.ReclassCodeDescription:str = obj["ReclassCodeDescription"]
      self.ReclassReasonDescription:str = obj["ReclassReasonDescription"]
      self.RMALineLineDesc:str = obj["RMALineLineDesc"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.ShipToCustCustID:str = obj["ShipToCustCustID"]
      self.ShipToCustName:str = obj["ShipToCustName"]
      self.ShipToCustBTName:str = obj["ShipToCustBTName"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipToNumName:str = obj["ShipToNumName"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Indicates if invoice is "open".  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The latest transaction date (CashDtl) which was available when the invoice was closed. This is used to improve record selection performance when selecting invoices that were open as of a certain date. (Used by the aged invoice report). This is updated during the CashReceipt posting process, Adjustment entry or Apply Credit memos programs..  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """   Indicates the type of document. Yes = Credit Memo No= Invoice. This value can't be changed after the record has been created.
Credit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign but will entered as a positive.
Credit Memos created by invoice entry also set the InvoiceSuffix field = "CM"  """  
      self.UnappliedCash:bool = obj["UnappliedCash"]
      """  An internal flag that represents Credit Memo was due to Unapplied Receipts. Created by the Cash Receipts Entry program.   This is only applicable with CreditMemo = Yes.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The Check reference number that the Unapplied Receipt Credit Memo was created from. Cash receipts entry sets this field equal to the CashHead.CheckRef when it creates the Unapplied Receipt Credit Memo.  Primarily used as a reference.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  An internally assigned field that further identifies an invoice. This field will be displayed as a suffix to the invoice number.  The possible values are "CM" = Credit memo created by invoice entry, UR = Unapplied Receipt Credit Memo,  DN = Debit Note, and FC = Finance Charge invoice.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the BatchID of the "current " batch that the user is working with.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the receivables file.    Only invoices that have been Posted (true) will be included as part of the open receivables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns the next available #. The next available # is the greater of last # on file plus one or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices:  "Shp" = Invoice for Shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments, "Mis" = Miscellaneous.  The setting of this field affects invoice entry:  "Shipments" - These are generated by the "Get Shipments function" and is not selectable directly by the user.  "Advanced"  - Must have a sales order reference. The detail lines on this type of invoice update the OrderDtl.AdvanceBillBal. Also the user indicates if this should be considered as deferred revenue. Which changes which G/L accounts are used for the line item credits.  "Deposit" - invoices are used to request a "deposit" on an order. A Sales Order is mandatory. No line items or Miscellaneous records are allowed. The user enters a flat amount on the header (InvcHead.PrePayAmt) which will be printed in the body of the invoice. This also updates the OrderHed.PrePayBal field.   "Miscellaneous" - These invoices may or may not reference a Sales Order.  If Invoice is generated in Project Billing then there are following options: "PFF" - Fixed Fee project;  "PCP" - Cost Plus project;  "PTM" - Time and Material project;  "PPP" - Progress Payment project.  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  Only used when InvoiceType = "Adv" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If "No" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order #. This is a mandatory entry for all InvoiceType except "Miscellaneous". If entered it must be valid in the OrderHed file. The OrderHed supplies the invoice with many defaults, including; CustNum, PONum, TermsCode,  FOB, RepRate, RepSplit, SalesRepList, InvoiceComments  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal # that is used to link the invoice to the Customer master file.  This field is not directly maintained by the user.  In most cases it will be duplicated from the referenced OrderHed. For "Miscellaneous" invoices the user can enter either a Sales Order Number or a Customer ID which will supply the CustNum.  """  
      self.PONum:str = obj["PONum"]
      """  Customer's PO#.   This is a reference field which will be printed on the invoice. Defaults from the OrderHed.PONum.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.FOB:str = obj["FOB"]
      """  Defaults from sales order ORderHed.FOB  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the TERMS master file.  Defaults from OrderHed if OrderNum > 0 else from the Customer master. This IS A MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related InvcGrp or based on ShipDate of Packing Slip. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the InvcBatc or during the "get shipments" function it is determined based on the ShipDate of the packing slip or when the invoice date is changed. It is overrideable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Once posted, maintenance is not allowed.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DepositCredit:int = obj["DepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.DocDepositCredit:int = obj["DocDepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the invoice. Up to five codes can be  established. This field is not directly maintainable.  Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The defaults are based on the OrderHed.SalesRepList if a valid Order is referenced or first one is defaulted from the Customer master if ship to is blank else from the ShipTo.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """   This field is maintainable/viewable only for Credit Memos. It represents the invoice # that this credit memo relates to. It can be left blank. If entered it must be a valid InvcHead record where the InvcHead.CreditMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the credit memos next to their corresponding invoice. Therefore, this field will always have a value.

For Invoices it is equal to the InvoiceNum.

For Credit memos where they are not related to an invoice it is also set equal to the credit memo's InvoiceNum. In this later case when InvcHead.Credit = Yes and InvcHead.InvoiceNum = InvcHead.InvoiceRef the InvoiceRef is reset to zero before being displayed, then when written back to the database it is set = to the InvoiceNum if the user did not enter a related invoice.  """  
      self.RefCancelled:int = obj["RefCancelled"]
      """  Value of this field is reference to invoice which has been cancelled by current invoice.  """  
      self.RefCancelledBy:int = obj["RefCancelledBy"]
      """  Value of this field is reference to invoice that cancelled this invoice.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.PayDiscDate:str = obj["PayDiscDate"]
      """  Prompt payment discount date. This is calculated based on the Invoice date + Terms.DiscountDays. Not user maintainable. This will default into the cash receipt record if the scheduled due amount is being paid in full.  """  
      self.PayDiscAmt:int = obj["PayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.DocPayDiscAmt:int = obj["DocPayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.BillConNum:int = obj["BillConNum"]
      """  Contains the key  value for the Billing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMBCON as the default.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number. If ARSyst.ARVoucherInvoices = Yes then this value will be printed on the Invoice.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between invoiced with standard lines which are for parts "PART"  and lines for service calls  "CALL" .  """  
      self.RMANum:int = obj["RMANum"]
      """   The RMA number which generated this Credit Memo.
Note: This only applies to Credit Memos. 
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.Plant:str = obj["Plant"]
      """  The Site that the invoice is relate to.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identifier  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the Debit Note invoices this field contains the detail comments for the Debit Note. For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For the Debit Note invoice this field contains A Debit Note number assigned by the customer. The Debit Note number is supposed to be unique for the customer.  """  
      self.DebitNote:bool = obj["DebitNote"]
      """   Indicates the type of documents. Yes = Debit Note. This value can't be changed (the record is created on Invoice payment posting).
Debit Notes  also have the InvoiceSuffix field = "DN".  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  This is populated from ShipHead.CustNum representing the Sold To customer.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  Default is false.  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.RepComm1:int = obj["RepComm1"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm2:int = obj["RepComm2"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm3:int = obj["RepComm3"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm4:int = obj["RepComm4"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm5:int = obj["RepComm5"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepSales1:int = obj["RepSales1"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales2:int = obj["RepSales2"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales3:int = obj["RepSales3"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales4:int = obj["RepSales4"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales5:int = obj["RepSales5"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.CMType:str = obj["CMType"]
      """  Indicates if the Credit Memo is for a Rebate  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding in Base is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding in Customer currency  """  
      self.Rpt1DepositCredit:int = obj["Rpt1DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2DepositCredit:int = obj["Rpt2DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3DepositCredit:int = obj["Rpt3DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayDiscAmt:int = obj["Rpt1PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayDiscAmt:int = obj["Rpt2PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayDiscAmt:int = obj["Rpt3PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.DocDepApplied:int = obj["DocDepApplied"]
      """  Amount of deposit applied  """  
      self.Rpt1DepGainLoss:int = obj["Rpt1DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2DepGainLoss:int = obj["Rpt2DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3DepGainLoss:int = obj["Rpt3DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.LastChrgCalcDate:str = obj["LastChrgCalcDate"]
      """  The last date finance/late charges have been calculated for this invoice.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction document type id.  """  
      self.TotFinChrg:int = obj["TotFinChrg"]
      """  Total Finance Charge amount.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  Indicates if the document has been printed.  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.BlockedFinChrg:bool = obj["BlockedFinChrg"]
      """  Blocks certain invoice from generating finance/later charge.  """  
      self.BlockedFinChrgReason:str = obj["BlockedFinChrgReason"]
      """  Reason why invoice has been blocked generating finance/later charge and only is enabled if the invoice is blocked.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.BlockedRemLetters:bool = obj["BlockedRemLetters"]
      """  Blocks certain invoice from being printed on reminder letters.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.BlockedRemLettersReason:str = obj["BlockedRemLettersReason"]
      """  Reason why invoice has been blocked from being printed on reminder letters and only is enabled if the invoice is blocked.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  The actual ship date for the packing slip. Default as system date.  """  
      self.CurrRateDate:str = obj["CurrRateDate"]
      """  Currency Rate Date  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.UseAltBillTo:bool = obj["UseAltBillTo"]
      """  If TRUE taxes will be calculated based on the Alternate Bill To, if FALSE it will proceed normally.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be se to Yes if the Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden Finland Localization field - Banking Reference  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.ReversalDocAmount:int = obj["ReversalDocAmount"]
      """  Reversal Doucment Amount  """  
      self.OrigDueDate:str = obj["OrigDueDate"]
      """  Original Due Date at posting time  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The reference to CashHead.HeadNum.Used in deposit invoices  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.ContractRef:str = obj["ContractRef"]
      """  The free text field which can contain reference (such as Contract)  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash receipts. For Shipment Invoices it comes from Packing Slip. For Deposit Invoices created based on deposit payments it is actual bank money are received to. For other  Invoice types, default comes from 1) Sales Order 2) Bill To Customer 3) System default (Company).  """  
      self.ContractDate:str = obj["ContractDate"]
      """  Addition to Contract  """  
      self.PBProjectID:str = obj["PBProjectID"]
      """  If the invoice was generated in Project Billing then it is reference to the project.  """  
      self.DepositAmt:int = obj["DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment  """  
      self.GUIExportBillNumber:str = obj["GUIExportBillNumber"]
      """   Taiwan Localization
Export Bill Number  """  
      self.DocDepositAmt:int = obj["DocDepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in document currency  """  
      self.GUIDateOfExport:str = obj["GUIDateOfExport"]
      """   Taiwan Localization
Date of Export  """  
      self.Rpt1DepositAmt:int = obj["Rpt1DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt1 currency  """  
      self.GUIExportType:str = obj["GUIExportType"]
      """   Taiwan Localization
Export Type  """  
      self.Rpt2DepositAmt:int = obj["Rpt2DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt2 currency  """  
      self.GUIExportMark:str = obj["GUIExportMark"]
      """   Taiwan Localization
Export Mark  """  
      self.Rpt3DepositAmt:int = obj["Rpt3DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt23currency  """  
      self.GUIExportBillType:str = obj["GUIExportBillType"]
      """   Taiwan Localization
Export Bill Type  """  
      self.DepUnallocatedAmt:int = obj["DepUnallocatedAmt"]
      """  Deposit unallocated amount in base currency  """  
      self.SummarizationDate:str = obj["SummarizationDate"]
      """  Day when a company sums up accounts receivables for each customer.  """  
      self.DocDepUnallocatedAmt:int = obj["DocDepUnallocatedAmt"]
      """  Deposit unallocated amount in document currency  """  
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Rpt1DepUnallocatedAmt:int = obj["Rpt1DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt1 currency  """  
      self.BillingNumber:str = obj["BillingNumber"]
      """  Billing Number to be generated from Legal Numbering upon printing of billing statement.  """  
      self.Rpt2DepUnallocatedAmt:int = obj["Rpt2DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt2 currency  """  
      self.ReadyToBill:bool = obj["ReadyToBill"]
      """  Only records ready to bill will be printed in the Billing Statement  """  
      self.Rpt3DepUnallocatedAmt:int = obj["Rpt3DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.CustAgentName:str = obj["CustAgentName"]
      """  Customer Agent Name  """  
      self.CustAgentTaxRegNo:str = obj["CustAgentTaxRegNo"]
      """  Customer Agent Tax Region Number  """  
      self.ExportType:str = obj["ExportType"]
      """  Export Type: 0-No Export, 1-Normal Export(S04), 2-Material Export(S05), 3-Service Export(S06)  """  
      self.ExportReportNo:str = obj["ExportReportNo"]
      """  Export Report Number  """  
      self.RealEstateNo:str = obj["RealEstateNo"]
      """  Real Estate Number  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.RevisionDate:str = obj["RevisionDate"]
      """  RevisionDate  """  
      self.RevisionNum:int = obj["RevisionNum"]
      """  RevisionNum  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  TWGenerationType  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  TWGUIGroup  """  
      self.TWPeriodPrefix:str = obj["TWPeriodPrefix"]
      """  TWPeriodPrefix  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Invoice is for Central Collection.  """  
      self.DocCColInvBal:int = obj["DocCColInvBal"]
      """  Central Collection Doc Invoice Balance.  """  
      self.SubTotal:int = obj["SubTotal"]
      """  Sub total for invoice  """  
      self.DocSubTotal:int = obj["DocSubTotal"]
      """  Document sub total  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax amount from InvcTax  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document Total tax amount from InvcTax for Collection type 'Invoice'  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st entry in SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd entry in SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd entry in SalesRepList.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th entry in SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th entry in SalesRepList  """  
      self.ContactName:str = obj["ContactName"]
      """  Contact name  """  
      self.ContactFaxNum:str = obj["ContactFaxNum"]
      """  Contact fax number  """  
      self.ContactPhoneNum:str = obj["ContactPhoneNum"]
      """  Contact phone number  """  
      self.DisplayBillAddr:str = obj["DisplayBillAddr"]
      """  Bill to address in list format.  """  
      self.UseSOCCDefaults:bool = obj["UseSOCCDefaults"]
      """  If true, the credit card info will come from the sales order.  """  
      self.DisplayCreditCardNum:str = obj["DisplayCreditCardNum"]
      """  Display field for the masked credit card number  """  
      self.XRateLabel:str = obj["XRateLabel"]
      """  Currency label  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.DepositCreditEnabled:bool = obj["DepositCreditEnabled"]
      """  Deposit credit enabled flag.  """  
      self.PaySchedEnabled:bool = obj["PaySchedEnabled"]
      """  Pay schedule enabled flag  """  
      self.ContactEmailAddr:str = obj["ContactEmailAddr"]
      """  Contact email address.  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  InvoiceType description  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DspSubTotal:int = obj["DspSubTotal"]
      """  Display sub total  """  
      self.DspDocSubTotal:int = obj["DspDocSubTotal"]
      """  display document sub total  """  
      self.DspInvoiceAmt:int = obj["DspInvoiceAmt"]
      """  Display invoice amount  """  
      self.DspDocInvoiceAmt:int = obj["DspDocInvoiceAmt"]
      """  Display document invoice amount  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number from the 1st line item.  """  
      self.EnableSOCCDefaults:bool = obj["EnableSOCCDefaults"]
      """  Flag to determine if UseSOCCDefaults should be enabled.  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display invoice reference  """  
      self.GenedFromRMA:bool = obj["GenedFromRMA"]
      """  Flag for update of InvcHead to allow when group id is "RMACRREQ"  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.dspSoldToCustID:str = obj["dspSoldToCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID for the bill to customer (InvcHead.CustNum).  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.DispBalDN:int = obj["DispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DocDispBalDN:int = obj["DocDispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DNPmtAmt:int = obj["DNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocDNPmtAmt:int = obj["DocDNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DspInvoiceBal:int = obj["DspInvoiceBal"]
      """  Display Invoice Balance.  """  
      self.DspDocInvoiceBal:int = obj["DspDocInvoiceBal"]
      """  Display document invoice balance  """  
      self.DspDocRounding:int = obj["DspDocRounding"]
      """  Display Invoice Doc Rounding  """  
      self.DspRounding:int = obj["DspRounding"]
      """  Display Rounding in Base  """  
      self.Rpt1DspInvoiceAmt:int = obj["Rpt1DspInvoiceAmt"]
      self.Rpt2DspInvoiceAmt:int = obj["Rpt2DspInvoiceAmt"]
      self.Rpt3DspInvoiceAmt:int = obj["Rpt3DspInvoiceAmt"]
      self.Rpt1DspInvoiceBal:int = obj["Rpt1DspInvoiceBal"]
      self.Rpt2DspInvoiceBal:int = obj["Rpt2DspInvoiceBal"]
      self.Rpt3DspInvoiceBal:int = obj["Rpt3DspInvoiceBal"]
      self.Rpt1DspRounding:int = obj["Rpt1DspRounding"]
      self.Rpt2DspRounding:int = obj["Rpt2DspRounding"]
      self.Rpt3DspRounding:int = obj["Rpt3DspRounding"]
      self.Rpt1DspSubTotal:int = obj["Rpt1DspSubTotal"]
      self.Rpt2DspSubTotal:int = obj["Rpt2DspSubTotal"]
      self.Rpt3DspSubTotal:int = obj["Rpt3DspSubTotal"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2Taxamt:int = obj["Rpt2Taxamt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt1SubTotal:int = obj["Rpt1SubTotal"]
      self.Rpt2SubTotal:int = obj["Rpt2SubTotal"]
      self.Rpt3SubTotal:int = obj["Rpt3SubTotal"]
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      """  Indicates if assign legal number option is available.  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      """  Indicates if the void legal number option is available  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      """  Indicates if a legal number configuration exists for ar invoices/credit memos  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      """  Indicates if changes can occur after the document has been printed  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  The system transaction type - ARInvoice or CreditMemo.  Used to filter combo list for TranDocTypeID.  """  
      self.NextDiscDate:str = obj["NextDiscDate"]
      """  This field is to display in Cash Receipt Entry the Discount Date that the payment will take.  """  
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Indicates if TranDocTypeID is available for input.  """  
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.ReminderSeq:int = obj["ReminderSeq"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.DocDspTaxAmt:int = obj["DocDspTaxAmt"]
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.DisplayCurrencyID:str = obj["DisplayCurrencyID"]
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.ReversalDocAmt:int = obj["ReversalDocAmt"]
      """  Accumulate all reversal amounts of Credit Memos with the reference to the invoice  """  
      self.ERSInvoice:bool = obj["ERSInvoice"]
      """  It will be displayed to identify invoices automatically generated due ERS shipments.  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.ARPromNoteID:str = obj["ARPromNoteID"]
      """  when InvcHead.PIPayment = O then populate ARPaymentInstrumentID with a value of PI.  """  
      self.DepBal:int = obj["DepBal"]
      """  Deposit balance from CashHed  """  
      self.DocDepBal:int = obj["DocDepBal"]
      """  Document deposit amount from cashhead.  """  
      self.Rpt1DepBal:int = obj["Rpt1DepBal"]
      self.Rpt2DepBal:int = obj["Rpt2DepBal"]
      self.Rpt3DepBal:int = obj["Rpt3DepBal"]
      self.DspDepBal:int = obj["DspDepBal"]
      """  Display deposit balance.  """  
      self.DspDocDepBal:int = obj["DspDocDepBal"]
      """  Display document deposit balance  """  
      self.Rpt1DspDepBal:int = obj["Rpt1DspDepBal"]
      self.Rpt2DspDepBal:int = obj["Rpt2DspDepBal"]
      self.Rpt3DspDepBal:int = obj["Rpt3DspDepBal"]
      self.DspDepCr:int = obj["DspDepCr"]
      """  Display deposit credit.  """  
      self.DspDocDepCr:int = obj["DspDocDepCr"]
      """  Display document deposit credit.  """  
      self.Rpt1DspDepCr:int = obj["Rpt1DspDepCr"]
      self.Rpt2DspDepCr:int = obj["Rpt2DspDepCr"]
      self.Rpt3DspDepCr:int = obj["Rpt3DspDepCr"]
      self.Vr:int = obj["Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in base currency.  """  
      self.DocVr:int = obj["DocVr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in document currency.  """  
      self.SATaxAmt:int = obj["SATaxAmt"]
      self.DocSATaxAmt:int = obj["DocSATaxAmt"]
      self.Rpt1SATaxAmt:int = obj["Rpt1SATaxAmt"]
      self.Rpt2SATaxAmt:int = obj["Rpt2SATaxAmt"]
      self.Rpt3SATaxAmt:int = obj["Rpt3SATaxAmt"]
      self.Rpt1Vr:int = obj["Rpt1Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt1 currency.  """  
      self.WHTaxAmt:int = obj["WHTaxAmt"]
      self.DocWHTaxAmt:int = obj["DocWHTaxAmt"]
      self.Rpt1WHTaxAmt:int = obj["Rpt1WHTaxAmt"]
      self.Rpt2WHTaxAmt:int = obj["Rpt2WHTaxAmt"]
      self.Rpt3WHTaxAmt:int = obj["Rpt3WHTaxAmt"]
      self.Rpt2Vr:int = obj["Rpt2Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt2 currency.  """  
      self.Rpt3Vr:int = obj["Rpt3Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt3 currency.  """  
      self.DspABAmt:int = obj["DspABAmt"]
      """  Display advance billing amount  """  
      self.DspDocABAmt:int = obj["DspDocABAmt"]
      """  Display document advance billing amount  """  
      self.Rpt1DspABAmt:int = obj["Rpt1DspABAmt"]
      self.Rpt2DspABAmt:int = obj["Rpt2DspABAmt"]
      self.Rpt3DspABAmt:int = obj["Rpt3DspABAmt"]
      self.ABAmt:int = obj["ABAmt"]
      """  Total advanced billing amount.  """  
      self.DocABAmt:int = obj["DocABAmt"]
      """  Document Total advanced billing amount.  """  
      self.Rpt1ABAmt:int = obj["Rpt1ABAmt"]
      self.Rpt2ABAmt:int = obj["Rpt2ABAmt"]
      self.Rpt3ABAmt:int = obj["Rpt3ABAmt"]
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """  The flag to indicate if Invoice Header Apply Date is supposed to be Read Only  """  
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      """  The credit card description. For example, American Express, Visa, Master Card, Discover, etc.  """  
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      """  Description of the currency  """  
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      """  This is the updatable version of CurrencyCode.  This currency cannot be a record already in the currency table.  """  
      self.CurrRateGrpDescription:str = obj["CurrRateGrpDescription"]
      """  Description  """  
      self.CustomerName:str = obj["CustomerName"]
      """  The full name of the customer.  """  
      self.CustomerBTName:str = obj["CustomerBTName"]
      """  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      """  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  """  
      self.FOBDescription:str = obj["FOBDescription"]
      """  Full description of the FOB Code.  """  
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      """  Journal  Description.  """  
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      """  The member's name on the credit card.  """  
      self.OurBankIBANCode:str = obj["OurBankIBANCode"]
      """  IBAN Code  """  
      self.OurBankPayerRef:str = obj["OurBankPayerRef"]
      """  Payer Reference  """  
      self.OurBankDescription:str = obj["OurBankDescription"]
      """  Full description of the bank account.  """  
      self.OurBankCheckingAccount:str = obj["OurBankCheckingAccount"]
      """  The account number for the bank account. Used for reference only.  """  
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      """   Indicates that invoices for the customer is summarized and sent as a sum to the bank without specifying the individual invoices.
A single bank transaction is created for the payment but what?s actually sent to the bank will be determined by the electronic interface plug-in program.
Only enabled if type is set to ?Electronic Interface?  """  
      self.PayMethodType:int = obj["PayMethodType"]
      """  Indicated the type of payment with the following options:
 0 = Manual (default)
 1 = Electronic Interface
 2 = Check Printing
 3 = Payment Instrument Type 1
 4 = Payment Instrument Type 2  """  
      self.PayMethodName:str = obj["PayMethodName"]
      """  Name of the payment method  """  
      self.PlantName:str = obj["PlantName"]
      """  The Plant name. Used on shipping reports.  """  
      self.ProjectDescription:str = obj["ProjectDescription"]
      """  Full description of Project Management Code.  """  
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      """  Description  """  
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      """  Full description for the Tax Region.  """  
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      """  Full description of the terms which prints on sales orders and invoices.  """  
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      """  Description  """  
      self.NeedConfirmTaxes:bool = obj["NeedConfirmTaxes"]
      """  It indicates that this Invoice has taxes, for which the confirmation is required.  """  
      self.Selected:bool = obj["Selected"]
      """  Boolean for selection of invoices in grid  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Indicates if invoice is "open".  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The latest transaction date (CashDtl) which was available when the invoice was closed. This is used to improve record selection performance when selecting invoices that were open as of a certain date. (Used by the aged invoice report). This is updated during the CashReceipt posting process, Adjustment entry or Apply Credit memos programs..  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """   Indicates the type of document. Yes = Credit Memo No= Invoice. This value can't be changed after the record has been created.
Credit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign but will entered as a positive.
Credit Memos created by invoice entry also set the InvoiceSuffix field = "CM"  """  
      self.UnappliedCash:bool = obj["UnappliedCash"]
      """  An internal flag that represents Credit Memo was due to Unapplied Receipts. Created by the Cash Receipts Entry program.   This is only applicable with CreditMemo = Yes.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The Check reference number that the Unapplied Receipt Credit Memo was created from. Cash receipts entry sets this field equal to the CashHead.CheckRef when it creates the Unapplied Receipt Credit Memo.  Primarily used as a reference.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  An internally assigned field that further identifies an invoice. This field will be displayed as a suffix to the invoice number.  The possible values are "CM" = Credit memo created by invoice entry, UR = Unapplied Receipt Credit Memo,  DN = Debit Note, and FC = Finance Charge invoice.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the BatchID of the "current " batch that the user is working with.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the receivables file.    Only invoices that have been Posted (true) will be included as part of the open receivables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns the next available #. The next available # is the greater of last # on file plus one or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices:  "Shp" = Invoice for Shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments, "Mis" = Miscellaneous.  The setting of this field affects invoice entry:  "Shipments" - These are generated by the "Get Shipments function" and is not selectable directly by the user.  "Advanced"  - Must have a sales order reference. The detail lines on this type of invoice update the OrderDtl.AdvanceBillBal. Also the user indicates if this should be considered as deferred revenue. Which changes which G/L accounts are used for the line item credits.  "Deposit" - invoices are used to request a "deposit" on an order. A Sales Order is mandatory. No line items or Miscellaneous records are allowed. The user enters a flat amount on the header (InvcHead.PrePayAmt) which will be printed in the body of the invoice. This also updates the OrderHed.PrePayBal field.   "Miscellaneous" - These invoices may or may not reference a Sales Order.  If Invoice is generated in Project Billing then there are following options: "PFF" - Fixed Fee project;  "PCP" - Cost Plus project;  "PTM" - Time and Material project;  "PPP" - Progress Payment project.  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  Only used when InvoiceType = "Adv" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If "No" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order #. This is a mandatory entry for all InvoiceType except "Miscellaneous". If entered it must be valid in the OrderHed file. The OrderHed supplies the invoice with many defaults, including; CustNum, PONum, TermsCode,  FOB, RepRate, RepSplit, SalesRepList, InvoiceComments  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal # that is used to link the invoice to the Customer master file.  This field is not directly maintained by the user.  In most cases it will be duplicated from the referenced OrderHed. For "Miscellaneous" invoices the user can enter either a Sales Order Number or a Customer ID which will supply the CustNum.  """  
      self.PONum:str = obj["PONum"]
      """  Customer's PO#.   This is a reference field which will be printed on the invoice. Defaults from the OrderHed.PONum.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.FOB:str = obj["FOB"]
      """  Defaults from sales order ORderHed.FOB  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the TERMS master file.  Defaults from OrderHed if OrderNum > 0 else from the Customer master. This IS A MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related InvcGrp or based on ShipDate of Packing Slip. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the InvcBatc or during the "get shipments" function it is determined based on the ShipDate of the packing slip or when the invoice date is changed. It is overrideable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Once posted, maintenance is not allowed.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DepositCredit:int = obj["DepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.DocDepositCredit:int = obj["DocDepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the invoice. Up to five codes can be  established. This field is not directly maintainable.  Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The defaults are based on the OrderHed.SalesRepList if a valid Order is referenced or first one is defaulted from the Customer master if ship to is blank else from the ShipTo.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """   This field is maintainable/viewable only for Credit Memos. It represents the invoice # that this credit memo relates to. It can be left blank. If entered it must be a valid InvcHead record where the InvcHead.CreditMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the credit memos next to their corresponding invoice. Therefore, this field will always have a value.

For Invoices it is equal to the InvoiceNum.

For Credit memos where they are not related to an invoice it is also set equal to the credit memo's InvoiceNum. In this later case when InvcHead.Credit = Yes and InvcHead.InvoiceNum = InvcHead.InvoiceRef the InvoiceRef is reset to zero before being displayed, then when written back to the database it is set = to the InvoiceNum if the user did not enter a related invoice.  """  
      self.RefCancelled:int = obj["RefCancelled"]
      """  Value of this field is reference to invoice which has been cancelled by current invoice.  """  
      self.RefCancelledBy:int = obj["RefCancelledBy"]
      """  Value of this field is reference to invoice that cancelled this invoice.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.PayDiscDate:str = obj["PayDiscDate"]
      """  Prompt payment discount date. This is calculated based on the Invoice date + Terms.DiscountDays. Not user maintainable. This will default into the cash receipt record if the scheduled due amount is being paid in full.  """  
      self.PayDiscAmt:int = obj["PayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.DocPayDiscAmt:int = obj["DocPayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.BillConNum:int = obj["BillConNum"]
      """  Contains the key  value for the Billing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMBCON as the default.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number. If ARSyst.ARVoucherInvoices = Yes then this value will be printed on the Invoice.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between invoiced with standard lines which are for parts "PART"  and lines for service calls  "CALL" .  """  
      self.RMANum:int = obj["RMANum"]
      """   The RMA number which generated this Credit Memo.
Note: This only applies to Credit Memos. 
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.Plant:str = obj["Plant"]
      """  The Site that the invoice is relate to.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identifier  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the Debit Note invoices this field contains the detail comments for the Debit Note. For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For the Debit Note invoice this field contains A Debit Note number assigned by the customer. The Debit Note number is supposed to be unique for the customer.  """  
      self.DebitNote:bool = obj["DebitNote"]
      """   Indicates the type of documents. Yes = Debit Note. This value can't be changed (the record is created on Invoice payment posting).
Debit Notes  also have the InvoiceSuffix field = "DN".  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  This is populated from ShipHead.CustNum representing the Sold To customer.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  Default is false.  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.RepComm1:int = obj["RepComm1"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm2:int = obj["RepComm2"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm3:int = obj["RepComm3"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm4:int = obj["RepComm4"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm5:int = obj["RepComm5"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepSales1:int = obj["RepSales1"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales2:int = obj["RepSales2"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales3:int = obj["RepSales3"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales4:int = obj["RepSales4"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales5:int = obj["RepSales5"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.CMType:str = obj["CMType"]
      """  Indicates if the Credit Memo is for a Rebate  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding in Base is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding in Customer currency  """  
      self.Rpt1DepositCredit:int = obj["Rpt1DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2DepositCredit:int = obj["Rpt2DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3DepositCredit:int = obj["Rpt3DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayDiscAmt:int = obj["Rpt1PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayDiscAmt:int = obj["Rpt2PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayDiscAmt:int = obj["Rpt3PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.DocDepApplied:int = obj["DocDepApplied"]
      """  Amount of deposit applied  """  
      self.Rpt1DepGainLoss:int = obj["Rpt1DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2DepGainLoss:int = obj["Rpt2DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3DepGainLoss:int = obj["Rpt3DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.LastChrgCalcDate:str = obj["LastChrgCalcDate"]
      """  The last date finance/late charges have been calculated for this invoice.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction document type id.  """  
      self.TotFinChrg:int = obj["TotFinChrg"]
      """  Total Finance Charge amount.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  Indicates if the document has been printed.  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.BlockedFinChrg:bool = obj["BlockedFinChrg"]
      """  Blocks certain invoice from generating finance/later charge.  """  
      self.BlockedFinChrgReason:str = obj["BlockedFinChrgReason"]
      """  Reason why invoice has been blocked generating finance/later charge and only is enabled if the invoice is blocked.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.BlockedRemLetters:bool = obj["BlockedRemLetters"]
      """  Blocks certain invoice from being printed on reminder letters.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.BlockedRemLettersReason:str = obj["BlockedRemLettersReason"]
      """  Reason why invoice has been blocked from being printed on reminder letters and only is enabled if the invoice is blocked.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  The actual ship date for the packing slip. Default as system date.  """  
      self.CurrRateDate:str = obj["CurrRateDate"]
      """  Currency Rate Date  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.UseAltBillTo:bool = obj["UseAltBillTo"]
      """  If TRUE taxes will be calculated based on the Alternate Bill To, if FALSE it will proceed normally.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be se to Yes if the Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden Finland Localization field - Banking Reference  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.ReversalDocAmount:int = obj["ReversalDocAmount"]
      """  Reversal Doucment Amount  """  
      self.OrigDueDate:str = obj["OrigDueDate"]
      """  Original Due Date at posting time  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The reference to CashHead.HeadNum.Used in deposit invoices  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.ContractRef:str = obj["ContractRef"]
      """  The free text field which can contain reference (such as Contract)  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash receipts. For Shipment Invoices it comes from Packing Slip. For Deposit Invoices created based on deposit payments it is actual bank money are received to. For other  Invoice types, default comes from 1) Sales Order 2) Bill To Customer 3) System default (Company).  """  
      self.ContractDate:str = obj["ContractDate"]
      """  Addition to Contract  """  
      self.PBProjectID:str = obj["PBProjectID"]
      """  If the invoice was generated in Project Billing then it is reference to the project.  """  
      self.DepositAmt:int = obj["DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment  """  
      self.GUIExportBillNumber:str = obj["GUIExportBillNumber"]
      """   Taiwan Localization
Export Bill Number  """  
      self.DocDepositAmt:int = obj["DocDepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in document currency  """  
      self.GUIDateOfExport:str = obj["GUIDateOfExport"]
      """   Taiwan Localization
Date of Export  """  
      self.Rpt1DepositAmt:int = obj["Rpt1DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt1 currency  """  
      self.GUIExportType:str = obj["GUIExportType"]
      """   Taiwan Localization
Export Type  """  
      self.Rpt2DepositAmt:int = obj["Rpt2DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt2 currency  """  
      self.GUIExportMark:str = obj["GUIExportMark"]
      """   Taiwan Localization
Export Mark  """  
      self.Rpt3DepositAmt:int = obj["Rpt3DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt23currency  """  
      self.GUIExportBillType:str = obj["GUIExportBillType"]
      """   Taiwan Localization
Export Bill Type  """  
      self.DepUnallocatedAmt:int = obj["DepUnallocatedAmt"]
      """  Deposit unallocated amount in base currency  """  
      self.SummarizationDate:str = obj["SummarizationDate"]
      """  Day when a company sums up accounts receivables for each customer.  """  
      self.DocDepUnallocatedAmt:int = obj["DocDepUnallocatedAmt"]
      """  Deposit unallocated amount in document currency  """  
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Rpt1DepUnallocatedAmt:int = obj["Rpt1DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt1 currency  """  
      self.BillingNumber:str = obj["BillingNumber"]
      """  Billing Number to be generated from Legal Numbering upon printing of billing statement.  """  
      self.Rpt2DepUnallocatedAmt:int = obj["Rpt2DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt2 currency  """  
      self.ReadyToBill:bool = obj["ReadyToBill"]
      """  Only records ready to bill will be printed in the Billing Statement  """  
      self.Rpt3DepUnallocatedAmt:int = obj["Rpt3DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.CustAgentName:str = obj["CustAgentName"]
      """  Customer Agent Name  """  
      self.CustAgentTaxRegNo:str = obj["CustAgentTaxRegNo"]
      """  Customer Agent Tax Region Number  """  
      self.ExportType:str = obj["ExportType"]
      """  Export Type: 0-No Export, 1-Normal Export(S04), 2-Material Export(S05), 3-Service Export(S06)  """  
      self.ExportReportNo:str = obj["ExportReportNo"]
      """  Export Report Number  """  
      self.RealEstateNo:str = obj["RealEstateNo"]
      """  Real Estate Number  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.CycleCode:str = obj["CycleCode"]
      """  CycleCode  """  
      self.Duration:int = obj["Duration"]
      """  Duration  """  
      self.EndDate:str = obj["EndDate"]
      """  EndDate  """  
      self.MaxValueAmt:int = obj["MaxValueAmt"]
      """  MaxValueAmt  """  
      self.DocMaxValueAmt:int = obj["DocMaxValueAmt"]
      """  DocMaxValueAmt  """  
      self.Rpt1MaxValueAmt:int = obj["Rpt1MaxValueAmt"]
      """  Rpt1MaxValueAmt  """  
      self.Rpt2MaxValueAmt:int = obj["Rpt2MaxValueAmt"]
      """  Rpt2MaxValueAmt  """  
      self.Rpt3MaxValueAmt:int = obj["Rpt3MaxValueAmt"]
      """  Rpt3MaxValueAmt  """  
      self.HoldInvoice:bool = obj["HoldInvoice"]
      """  HoldInvoice  """  
      self.CopyLatestInvoice:bool = obj["CopyLatestInvoice"]
      """  CopyLatestInvoice  """  
      self.OverrideEndDate:bool = obj["OverrideEndDate"]
      """  OverrideEndDate  """  
      self.CycleInactive:bool = obj["CycleInactive"]
      """  CycleInactive  """  
      self.RecurSource:bool = obj["RecurSource"]
      """  RecurSource  """  
      self.InstanceNum:int = obj["InstanceNum"]
      """  InstanceNum  """  
      self.RecurBalance:int = obj["RecurBalance"]
      """  RecurBalance  """  
      self.DocRecurBalance:int = obj["DocRecurBalance"]
      """  DocRecurBalance  """  
      self.Rpt1RecurBalance:int = obj["Rpt1RecurBalance"]
      """  Rpt1RecurBalance  """  
      self.Rpt2RecurBalance:int = obj["Rpt2RecurBalance"]
      """  Rpt2RecurBalance  """  
      self.Rpt3RecurBalance:int = obj["Rpt3RecurBalance"]
      """  Rpt3RecurBalance  """  
      self.LastDate:str = obj["LastDate"]
      """  LastDate  """  
      self.RecurringState:str = obj["RecurringState"]
      """  RecurringState  """  
      self.IsRecurring:bool = obj["IsRecurring"]
      """  IsRecurring  """  
      self.InvoiceNumList:str = obj["InvoiceNumList"]
      """  InvoiceNumList  """  
      self.IsAddedToGTI:bool = obj["IsAddedToGTI"]
      """  IsAddedToGTI  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CHISRCodeLine:str = obj["CHISRCodeLine"]
      """  CHISRCodeLine  """  
      self.CMReason:str = obj["CMReason"]
      """  CMReason  """  
      self.THIsImmatAdjustment:bool = obj["THIsImmatAdjustment"]
      """  THIsImmatAdjustment  """  
      self.AGAuthorizationCode:str = obj["AGAuthorizationCode"]
      """  AGAuthorizationCode  """  
      self.AGAuthorizationDate:str = obj["AGAuthorizationDate"]
      """  AGAuthorizationDate  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGDocumentLetter:str = obj["AGDocumentLetter"]
      """  AGDocumentLetter  """  
      self.AGInvoicingPoint:str = obj["AGInvoicingPoint"]
      """  AGInvoicingPoint  """  
      self.AGLegalNumber:str = obj["AGLegalNumber"]
      """  AGLegalNumber  """  
      self.AGPrintingControlType:str = obj["AGPrintingControlType"]
      """  AGPrintingControlType  """  
      self.RevisionDate:str = obj["RevisionDate"]
      """  RevisionDate  """  
      self.RevisionNum:int = obj["RevisionNum"]
      """  RevisionNum  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  TWGenerationType  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  TWGUIGroup  """  
      self.TWPeriodPrefix:str = obj["TWPeriodPrefix"]
      """  TWPeriodPrefix  """  
      self.InvInCollections:bool = obj["InvInCollections"]
      """  Indicates if the Invoice is in Collections status  """  
      self.CollectionsCust:bool = obj["CollectionsCust"]
      """   Indicates if the Customer of the Invoice is in Collections
(Peru Localization)  """  
      self.CounterARForm:int = obj["CounterARForm"]
      """  A counter of the number of times an AR Invoice has been transmitted via EDI.  The counter is automatically incremented each time the EDIReady flag changes from False to True.  """  
      self.PostedRecog:bool = obj["PostedRecog"]
      """  flag indicates if Revenue of the invoice has been already posted  """  
      self.CNConfirmDate:str = obj["CNConfirmDate"]
      """  Confirmation Date  """  
      self.MXSATSeal:str = obj["MXSATSeal"]
      """  MXSATSeal  """  
      self.MXSerie:str = obj["MXSerie"]
      """  MXSerie  """  
      self.MXTaxRcptType:str = obj["MXTaxRcptType"]
      """  MXTaxRcptType  """  
      self.MXFiscalFolio:str = obj["MXFiscalFolio"]
      """  MXFiscalFolio  """  
      self.MXTotalPayments:int = obj["MXTotalPayments"]
      """  MXTotalPayments  """  
      self.MXFolio:str = obj["MXFolio"]
      """  MXFolio  """  
      self.MXCertifiedTimestamp:str = obj["MXCertifiedTimestamp"]
      """  MXCertifiedTimestamp  """  
      self.MXSATCertificateSN:str = obj["MXSATCertificateSN"]
      """  MXSATCertificateSN  """  
      self.MXDigitalSeal:str = obj["MXDigitalSeal"]
      """  MXDigitalSeal  """  
      self.MXPostedTimeStamp:str = obj["MXPostedTimeStamp"]
      """  MXPostedTimeStamp  """  
      self.MXCertificate:str = obj["MXCertificate"]
      """  MXCertificate  """  
      self.MXApprovalYear:int = obj["MXApprovalYear"]
      """  MXApprovalYear  """  
      self.MXCBB:str = obj["MXCBB"]
      """  MXCBB  """  
      self.MXApprovalNum:int = obj["MXApprovalNum"]
      """  MXApprovalNum  """  
      self.MXOriginalStringTFD:str = obj["MXOriginalStringTFD"]
      """  MXOriginalStringTFD  """  
      self.MXPaymentNum:int = obj["MXPaymentNum"]
      """  MXPaymentNum  """  
      self.MXPaidAs:str = obj["MXPaidAs"]
      """  MXPaidAs  """  
      self.MXCertificateSN:str = obj["MXCertificateSN"]
      """  MXCertificateSN  """  
      self.MXOriginalAmount:int = obj["MXOriginalAmount"]
      """  MXOriginalAmount  """  
      self.MXAccountNumber:str = obj["MXAccountNumber"]
      """  MXAccountNumber  """  
      self.MXOriginalDate:str = obj["MXOriginalDate"]
      """  MXOriginalDate  """  
      self.MXOriginalSeries:str = obj["MXOriginalSeries"]
      """  MXOriginalSeries  """  
      self.MXOriginalFolio:str = obj["MXOriginalFolio"]
      """  MXOriginalFolio  """  
      self.MXTaxRegime:str = obj["MXTaxRegime"]
      """  MXTaxRegime  """  
      self.MXOriginalString:str = obj["MXOriginalString"]
      """  MXOriginalString  """  
      self.MXPaymentName:str = obj["MXPaymentName"]
      """  MXPaymentName  """  
      self.EInvoice:bool = obj["EInvoice"]
      """  EInvoice  """  
      self.EInvStatus:int = obj["EInvStatus"]
      """  EInvStatus  """  
      self.EInvTimestamp:str = obj["EInvTimestamp"]
      """  EInvTimestamp  """  
      self.EInvUpdatedBy:str = obj["EInvUpdatedBy"]
      """  EInvUpdatedBy  """  
      self.EInvException:str = obj["EInvException"]
      """  EInvException  """  
      self.WithTaxConfirm:bool = obj["WithTaxConfirm"]
      """  Flagged that this invoice has taxes which were necessary or is necessary now.  """  
      self.UseAltBillToID:bool = obj["UseAltBillToID"]
      """  UseAltBillToID  """  
      self.MXCancelledDate:str = obj["MXCancelledDate"]
      """  MXCancelledDate  """  
      self.Overpaid:bool = obj["Overpaid"]
      """  Overpaid  """  
      self.OrdExchangeRate:int = obj["OrdExchangeRate"]
      """  OrdExchangeRate  """  
      self.PEAPPayNum:int = obj["PEAPPayNum"]
      """  PEAPPayNum  """  
      self.PEBankNumber:str = obj["PEBankNumber"]
      """  PEBankNumber  """  
      self.PECharges:int = obj["PECharges"]
      """  PECharges  """  
      self.PECommissions:int = obj["PECommissions"]
      """  PECommissions  """  
      self.PEDetTaxAmt:int = obj["PEDetTaxAmt"]
      """  PEDetTaxAmt  """  
      self.PEDetTaxCurrencyCode:str = obj["PEDetTaxCurrencyCode"]
      """  PEDetTaxCurrencyCode  """  
      self.PEDischargeAmt:int = obj["PEDischargeAmt"]
      """  PEDischargeAmt  """  
      self.PEDischargeDate:str = obj["PEDischargeDate"]
      """  PEDischargeDate  """  
      self.PEInterest:int = obj["PEInterest"]
      """  PEInterest  """  
      self.PENoPayPenalty:int = obj["PENoPayPenalty"]
      """  PENoPayPenalty  """  
      self.PESUNATDepAmt:int = obj["PESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.PESUNATDepDate:str = obj["PESUNATDepDate"]
      """  CSF Peru - SUNAT Deposit Date  """  
      self.PESUNATDepNum:str = obj["PESUNATDepNum"]
      """  CSF Peru -  SUNAT Deposit Number  """  
      self.PEBOEPosted:bool = obj["PEBOEPosted"]
      """  PEBOEPosted  """  
      self.DocPEInterest:int = obj["DocPEInterest"]
      """  DocPEInterest  """  
      self.DocPECommissions:int = obj["DocPECommissions"]
      """  DocPECommissions  """  
      self.DocPECharges:int = obj["DocPECharges"]
      """  DocPECharges  """  
      self.DocPENoPayPenalty:int = obj["DocPENoPayPenalty"]
      """  DocPENoPayPenalty  """  
      self.DocPEDischargeAmt:int = obj["DocPEDischargeAmt"]
      """  DocPEDischargeAmt  """  
      self.DocPEDetTaxAmt:int = obj["DocPEDetTaxAmt"]
      """  DocPEDetTaxAmt  """  
      self.Rpt1PEInterest:int = obj["Rpt1PEInterest"]
      """  Rpt1PEInterest  """  
      self.Rpt1PECommissions:int = obj["Rpt1PECommissions"]
      """  Rpt1PECommissions  """  
      self.Rpt1PECharges:int = obj["Rpt1PECharges"]
      """  Rpt1PECharges  """  
      self.Rpt1PENoPayPenalty:int = obj["Rpt1PENoPayPenalty"]
      """  Rpt1PENoPayPenalty  """  
      self.Rpt1PEDischargeAmt:int = obj["Rpt1PEDischargeAmt"]
      """  Rpt1PEDischargeAmt  """  
      self.Rpt2PEInterest:int = obj["Rpt2PEInterest"]
      """  Rpt2PEInterest  """  
      self.Rpt2PECommissions:int = obj["Rpt2PECommissions"]
      """  Rpt2PECommissions  """  
      self.Rpt2PECharges:int = obj["Rpt2PECharges"]
      """  Rpt2PECharges  """  
      self.Rpt2PENoPayPenalty:int = obj["Rpt2PENoPayPenalty"]
      """  Rpt2PENoPayPenalty  """  
      self.Rpt2PEDischargeAmt:int = obj["Rpt2PEDischargeAmt"]
      """  Rpt2PEDischargeAmt  """  
      self.Rpt3PEInterest:int = obj["Rpt3PEInterest"]
      """  Rpt3PEInterest  """  
      self.Rpt3PECommissions:int = obj["Rpt3PECommissions"]
      """  Rpt3PECommissions  """  
      self.Rpt3PECharges:int = obj["Rpt3PECharges"]
      """  Rpt3PECharges  """  
      self.Rpt3PENoPayPenalty:int = obj["Rpt3PENoPayPenalty"]
      """  Rpt3PENoPayPenalty  """  
      self.Rpt3PEDischargeAmt:int = obj["Rpt3PEDischargeAmt"]
      """  Rpt3PEDischargeAmt  """  
      self.OurSupplierCode:str = obj["OurSupplierCode"]
      """  Our Supplier Code  """  
      self.PEGuaranteeName:str = obj["PEGuaranteeName"]
      """  PEGuaranteeName  """  
      self.PEGuaranteeAddress1:str = obj["PEGuaranteeAddress1"]
      """  PEGuaranteeAddress1  """  
      self.PEGuaranteeAddress2:str = obj["PEGuaranteeAddress2"]
      """  PEGuaranteeAddress2  """  
      self.PEGuaranteeAddress3:str = obj["PEGuaranteeAddress3"]
      """  PEGuaranteeAddress3  """  
      self.PEGuaranteeCity:str = obj["PEGuaranteeCity"]
      """  PEGuaranteeCity  """  
      self.PEGuaranteeState:str = obj["PEGuaranteeState"]
      """  PEGuaranteeState  """  
      self.PEGuaranteeZip:str = obj["PEGuaranteeZip"]
      """  PEGuaranteeZip  """  
      self.PEGuaranteeCountry:str = obj["PEGuaranteeCountry"]
      """  PEGuaranteeCountry  """  
      self.PEGuaranteeTaxID:str = obj["PEGuaranteeTaxID"]
      """  PEGuaranteeTaxID  """  
      self.PEGuaranteePhoneNum:str = obj["PEGuaranteePhoneNum"]
      """  PEGuaranteePhoneNum  """  
      self.PEBOEStatus:str = obj["PEBOEStatus"]
      """  PEBOEStatus  """  
      self.PEBOEIsMultiGen:bool = obj["PEBOEIsMultiGen"]
      """  PEBOEIsMultiGen  """  
      self.PERefDocID:str = obj["PERefDocID"]
      """  PE Reference Document ID  """  
      self.PEReasonCode:str = obj["PEReasonCode"]
      """  PE Reason Code  """  
      self.PEReasonDesc:str = obj["PEReasonDesc"]
      """  PE Reason Description  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  TW GUI Code Seller  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  TW GUI Code Buyer  """  
      self.TWGUIExportDocumentName:str = obj["TWGUIExportDocumentName"]
      """  Document Name  """  
      self.TWGUIExportRemarks:str = obj["TWGUIExportRemarks"]
      """  Remarks  """  
      self.TWGUIExportVerification:str = obj["TWGUIExportVerification"]
      """  Verification  """  
      self.PEDebitNoteReasonCode:str = obj["PEDebitNoteReasonCode"]
      """  PEDebitNoteReasonCode  """  
      self.PEDebitNote:bool = obj["PEDebitNote"]
      """  PEDebitNote  """  
      self.MXPartPmt:bool = obj["MXPartPmt"]
      """  MXPartPmt  """  
      self.CNTaxInvoiceType:int = obj["CNTaxInvoiceType"]
      """  Tax Invoice Type  """  
      self.MXExportOperationType:str = obj["MXExportOperationType"]
      """  MXExportOperationType  """  
      self.MXExportCustDocCode:str = obj["MXExportCustDocCode"]
      """  MXExportCustDocCode  """  
      self.MXExportCertOriginNum:str = obj["MXExportCertOriginNum"]
      """  MXExportCertOriginNum  """  
      self.MXExportConfNum:str = obj["MXExportConfNum"]
      """  MXExportConfNum  """  
      self.MXExportCertOrigin:bool = obj["MXExportCertOrigin"]
      """  MXExportCertOrigin  """  
      self.MXIncoterm:str = obj["MXIncoterm"]
      """  MXIncoterm  """  
      self.AGDocConcept:int = obj["AGDocConcept"]
      """  AGDocConcept  """  
      self.EInvRefNum:str = obj["EInvRefNum"]
      """  Electronic Invoice reference number  """  
      self.ExportDocRefNum:str = obj["ExportDocRefNum"]
      """  Export document reference number  """  
      self.ExportDocDate:str = obj["ExportDocDate"]
      """  Export document date  """  
      self.INTaxTransactionID:str = obj["INTaxTransactionID"]
      """  Tax Transaction ID  """  
      self.MXMovingReasonFlag:bool = obj["MXMovingReasonFlag"]
      """  MXMovingReasonFlag  """  
      self.MXMovingReason:str = obj["MXMovingReason"]
      """  MXMovingReason  """  
      self.MXNumRegIdTrib:str = obj["MXNumRegIdTrib"]
      """  MXNumRegIdTrib  """  
      self.MXResidenCountryNum:int = obj["MXResidenCountryNum"]
      """  MXResidenCountryNum  """  
      self.MXPurchaseType:str = obj["MXPurchaseType"]
      """  MXPurchaseType  """  
      self.MXConfirmationCode:str = obj["MXConfirmationCode"]
      """  MXConfirmationCode  """  
      self.MXExternalCode:str = obj["MXExternalCode"]
      """  MXExternalCode  """  
      self.ServiceInvoice:bool = obj["ServiceInvoice"]
      """  This invoice was created via an integration with a third-party field service.  """  
      self.MXDomesticTransfer:bool = obj["MXDomesticTransfer"]
      """  MXDomesticTransfer  """  
      self.MXCancellationMode:str = obj["MXCancellationMode"]
      """  MXCancellationMode  """  
      self.INShippingPortCode:str = obj["INShippingPortCode"]
      """  Shipping Port Code  """  
      self.INExportProcedure:str = obj["INExportProcedure"]
      """  Export Procedure  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.DigitalSignature:str = obj["DigitalSignature"]
      """  DigitalSignature  """  
      self.SignedOn:str = obj["SignedOn"]
      """  SignedOn  """  
      self.SignedBy:str = obj["SignedBy"]
      """  SignedBy  """  
      self.FirstPrintDate:str = obj["FirstPrintDate"]
      """  FirstPrintDate  """  
      self.DocCopyNum:int = obj["DocCopyNum"]
      """  DocCopyNum  """  
      self.DepositBalance:int = obj["DepositBalance"]
      """  DepositBalance  """  
      self.DocDepositBalance:int = obj["DocDepositBalance"]
      """  DocDepositBalance  """  
      self.Rpt1DepositBalance:int = obj["Rpt1DepositBalance"]
      """  Rpt1DepositBalance  """  
      self.Rpt2DepositBalance:int = obj["Rpt2DepositBalance"]
      """  Rpt2DepositBalance  """  
      self.Rpt3DepositBalance:int = obj["Rpt3DepositBalance"]
      """  Rpt3DepositBalance  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this invoice record is associated with.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case related to this invoice.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this invoice.  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  Description	Indicates that the credit hold was overridden for this invoice.	The date and time the user override the invoice credit hold.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The user id that override the invoice credit hold.  """  
      self.CreditHold:bool = obj["CreditHold"]
      """  Indicates the invoice is on credit hold.  Applicable to miscellaneous invoices only.  """  
      self.PEXMLType:int = obj["PEXMLType"]
      """  Peru Electronic Invoice XML Type  """  
      self.COCreditMemoReasonCode:str = obj["COCreditMemoReasonCode"]
      """  COCreditMemoReasonCode  """  
      self.CODebitMemoReasonCode:str = obj["CODebitMemoReasonCode"]
      """  CODebitMemoReasonCode  """  
      self.COReasonDesc:str = obj["COReasonDesc"]
      """  COReasonDesc  """  
      self.CODebitNote:bool = obj["CODebitNote"]
      """  CODebitNote  """  
      self.PEDetractionTranNum:int = obj["PEDetractionTranNum"]
      """  PEDetractionTranNum  """  
      self.PEProductCode:str = obj["PEProductCode"]
      """  PEProductCode  """  
      self.PECollectionGroupID:str = obj["PECollectionGroupID"]
      """  PECollectionGroupID  """  
      self.PECaptionCode:str = obj["PECaptionCode"]
      """  PE Caption Code  """  
      self.PECaption:str = obj["PECaption"]
      """  PE Caption Code Description  """  
      self.PERefDocumentType:str = obj["PERefDocumentType"]
      """  PE Reference DocumentType 1  """  
      self.PERefDocumentNumber:str = obj["PERefDocumentNumber"]
      """  PE Reference Document Number 1  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PERefDocumentType2:str = obj["PERefDocumentType2"]
      """  PE Reference DocumentType 2  """  
      self.PERefDocumentType3:str = obj["PERefDocumentType3"]
      """  PE Reference DocumentType 3  """  
      self.PERefDocumentType4:str = obj["PERefDocumentType4"]
      """  PE Reference DocumentType 4  """  
      self.PERefDocumentType5:str = obj["PERefDocumentType5"]
      """  PE Reference DocumentType 5  """  
      self.PERefDocumentNumber2:str = obj["PERefDocumentNumber2"]
      """  PE Reference Document Number 2  """  
      self.PERefDocumentNumber3:str = obj["PERefDocumentNumber3"]
      """  PE Reference Document Number 3  """  
      self.PERefDocumentNumber4:str = obj["PERefDocumentNumber4"]
      """  PE Reference Document Number 4  """  
      self.PERefDocumentNumber5:str = obj["PERefDocumentNumber5"]
      """  PE Reference Document Number 5  """  
      self.ELIEInvoice:bool = obj["ELIEInvoice"]
      """  E-invoice  """  
      self.ELIEInvStatus:int = obj["ELIEInvStatus"]
      """  Status of E-invoice (1 - Open, 2 - Generated, 3 - Sent, 4 - Error).  """  
      self.ELIEInvUpdatedBy:str = obj["ELIEInvUpdatedBy"]
      """  User Id of the person generated E-invoice.  """  
      self.ELIEInvException:str = obj["ELIEInvException"]
      """  E-invoice error description.  """  
      self.ELIEInvUpdatedOn:str = obj["ELIEInvUpdatedOn"]
      """  Date and Time of E-invoice generation.  """  
      self.COOperType:str = obj["COOperType"]
      """  COOperType  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Invoice is for Central Collection.  """  
      self.CColChildCompany:str = obj["CColChildCompany"]
      """  Company that created this invoice.  """  
      self.CColParentCompany:str = obj["CColParentCompany"]
      """  Central Collection company.  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the invoicing company.  """  
      self.CColChildInvoiceNum:int = obj["CColChildInvoiceNum"]
      """  Invoice number on the invoicing company.  """  
      self.CColInvoiceNum:int = obj["CColInvoiceNum"]
      """  Invoice number on central collection company  """  
      self.CColChildLegalNumber:str = obj["CColChildLegalNumber"]
      """  Legal number on the invoicing company invoice.  """  
      self.CColLegalNumber:str = obj["CColLegalNumber"]
      """  Legal number on central collection company.  """  
      self.CColInvoiceRef:int = obj["CColInvoiceRef"]
      """  Invoice reference on the Invoicing Company.  """  
      self.CColInvBal:int = obj["CColInvBal"]
      """  Invoice Balance in the Central Collection company.  """  
      self.DocCColInvBal:int = obj["DocCColInvBal"]
      """  Central Collection Doc Invoice Balance.  """  
      self.CColInvAmt:int = obj["CColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.DocCColInvAmt:int = obj["DocCColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.Rpt1CColInvBal:int = obj["Rpt1CColInvBal"]
      """  Rpt 1 Parent Invoice Balance  """  
      self.Rpt2CColInvBal:int = obj["Rpt2CColInvBal"]
      """  Rpt 2 Parent Invoice Balance  """  
      self.Rpt3CColInvBal:int = obj["Rpt3CColInvBal"]
      """  Rpt 3 Parent Invoice Balance  """  
      self.Rpt1CColInvAmt:int = obj["Rpt1CColInvAmt"]
      """  Rpt 1 Child Invoice Amount  """  
      self.Rpt2CColInvAmt:int = obj["Rpt2CColInvAmt"]
      """  Rpt 2 Child Invoice Amount  """  
      self.Rpt3CColInvAmt:int = obj["Rpt3CColInvAmt"]
      """  Rpt 3 Child Invoice Amount  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.ELIEInvTerminalName:str = obj["ELIEInvTerminalName"]
      """  User terminal name  """  
      self.ELIEInvTerminalIP:str = obj["ELIEInvTerminalIP"]
      """  User terminal IP  """  
      self.Description:str = obj["Description"]
      """  GL Description  """  
      self.WithholdAcctToInterim:bool = obj["WithholdAcctToInterim"]
      """  WithholdAcctToInterim  """  
      self.CColOpenInvoice:bool = obj["CColOpenInvoice"]
      """  Indicates if the Central Collection parent invoice is open.  """  
      self.AGQRCodeData:str = obj["AGQRCodeData"]
      """  AGQRCodeData  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.ELIEInvID:str = obj["ELIEInvID"]
      """  EInvoice ID  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallLine:int = obj["CallLine"]
      """  this is a link to the service call line that this invoice is for.  Linetype = "CALL"  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.MXCancelReasonCode:str = obj["MXCancelReasonCode"]
      """  MXCancelReasonCode  """  
      self.MXSubstInvoiceNum:int = obj["MXSubstInvoiceNum"]
      """  MXSubstInvoiceNum  """  
      self.MXExportType:str = obj["MXExportType"]
      """  MXExportType  """  
      self.MXGlobalInvoicePeriod:str = obj["MXGlobalInvoicePeriod"]
      """  MXGlobalInvoicePeriod  """  
      self.MXGlobalInvoiceMonth:str = obj["MXGlobalInvoiceMonth"]
      """  MXGlobalInvoiceMonth  """  
      self.ELIEInvServiceProviderStatus:int = obj["ELIEInvServiceProviderStatus"]
      """  ELIEInvServiceProviderStatus  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.ABAmt:int = obj["ABAmt"]
      """  Total advanced billing amount.  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      """  Indicates if changes can occur after the document has been printed  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.ARPNHeadNum:int = obj["ARPNHeadNum"]
      """  ARPNHead's HeadNum  """  
      self.ARPromNoteID:str = obj["ARPromNoteID"]
      """  when InvcHead.PIPayment = O then populate ARPaymentInstrumentID with a value of PI.  """  
      self.AutoGenPN:bool = obj["AutoGenPN"]
      """  Auto generate payment instruments  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BankForPI:str = obj["BankForPI"]
      """  Used for Bill of Exchange.  Indicates the bank to use when a payment instrument for the invoice is created.  """  
      self.BankForPIName:str = obj["BankForPIName"]
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID for the bill to customer (InvcHead.CustNum).  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CNGTIAction:str = obj["CNGTIAction"]
      self.CNGTIAddress:str = obj["CNGTIAddress"]
      self.CNGTIBankAccount:str = obj["CNGTIBankAccount"]
      self.CNGTIComment:str = obj["CNGTIComment"]
      self.CNGTICustomerName:str = obj["CNGTICustomerName"]
      self.CNGTIExportAddress:str = obj["CNGTIExportAddress"]
      self.CNGTIGrossInvcAmt:int = obj["CNGTIGrossInvcAmt"]
      """  CSF China, Gross Invoice Amount  """  
      self.CNGTIInvoiceAmt:int = obj["CNGTIInvoiceAmt"]
      """  CSF China, Total invoice amount = InvcHead.InvoiceAmt - InvcHead.WithholdAmt  """  
      self.CNGTINote:str = obj["CNGTINote"]
      self.CNGTIShipToNum:str = obj["CNGTIShipToNum"]
      self.CNGTIStatus1:str = obj["CNGTIStatus1"]
      self.CNGTIStatus2:bool = obj["CNGTIStatus2"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.COIFRSCalculation:bool = obj["COIFRSCalculation"]
      """  IFRS Calculation. If the checkbox is not checked then all the elements below are disabled. If the checkbox is checked, then some elements below become enabled showing default values so that the NPV can be calculated  """  
      self.COIFRSEnabled:bool = obj["COIFRSEnabled"]
      """  If true then Colombia IFRS Net Present Value calculation is enabled  """  
      self.COIFRSFinancialCharge:int = obj["COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.COIFRSInterestRate:int = obj["COIFRSInterestRate"]
      self.COIFRSNumberOfPeriods:int = obj["COIFRSNumberOfPeriods"]
      """  Number of Periods for payment  """  
      self.COIFRSPresentValue:int = obj["COIFRSPresentValue"]
      """  Present Value  """  
      self.CollectionsInv:bool = obj["CollectionsInv"]
      """  Indicates if Invoice is in Collections (Peru localization)  """  
      self.ContactEmailAddr:str = obj["ContactEmailAddr"]
      """  Contact email address.  """  
      self.ContactFaxNum:str = obj["ContactFaxNum"]
      """  Contact fax number  """  
      self.ContactName:str = obj["ContactName"]
      """  Contact name  """  
      self.ContactPhoneNum:str = obj["ContactPhoneNum"]
      """  Contact phone number  """  
      self.ConvertedFromDep:bool = obj["ConvertedFromDep"]
      """  record converted from deposit  """  
      self.COOperTypeDesc:str = obj["COOperTypeDesc"]
      self.CountryIntrastat:bool = obj["CountryIntrastat"]
      """  True if the Country set for the current company contains an Intrastat code.  """  
      self.CumulativeBalance:int = obj["CumulativeBalance"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CurrentInstanceNum:int = obj["CurrentInstanceNum"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DepBal:int = obj["DepBal"]
      """  Deposit balance from CashHed  """  
      self.DepositCreditEnabled:bool = obj["DepositCreditEnabled"]
      """  Deposit credit enabled flag.  """  
      self.DirectDebiting:bool = obj["DirectDebiting"]
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """  The flag to indicate if Invoice Header Apply Date is supposed to be Read Only  """  
      self.DispBalDN:int = obj["DispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DisplayBillAddr:str = obj["DisplayBillAddr"]
      """  Bill to address in list format.  """  
      self.DisplayCreditCardNum:str = obj["DisplayCreditCardNum"]
      """  Display field for the masked credit card number  """  
      self.DisplayCurrencyID:str = obj["DisplayCurrencyID"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DNPmtAmt:int = obj["DNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocABAmt:int = obj["DocABAmt"]
      """  Document Total advanced billing amount.  """  
      self.DocCOIFRSFinancialCharge:int = obj["DocCOIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.DocCOIFRSPresentValue:int = obj["DocCOIFRSPresentValue"]
      """  Present Value  """  
      self.DocCumulativeBalance:int = obj["DocCumulativeBalance"]
      self.DocDepBal:int = obj["DocDepBal"]
      """  Document deposit amount from cashhead.  """  
      self.DocDispBalDN:int = obj["DocDispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocDNPmtAmt:int = obj["DocDNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocDspPrepDeposit:int = obj["DocDspPrepDeposit"]
      self.DocDspTaxAmt:int = obj["DocDspTaxAmt"]
      self.DocPESUNATDepAmt:int = obj["DocPESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.DocRemainTaxAmt:int = obj["DocRemainTaxAmt"]
      self.DocReverseTaxAmt:int = obj["DocReverseTaxAmt"]
      self.DocSATaxAmt:int = obj["DocSATaxAmt"]
      self.DocSourceRecurBalance:int = obj["DocSourceRecurBalance"]
      self.DocSubTotal:int = obj["DocSubTotal"]
      """  Document sub total  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document Total tax amount from InvcTax for Collection type 'Invoice'  """  
      self.DocVr:int = obj["DocVr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in document currency.  """  
      self.DocWHTaxAmt:int = obj["DocWHTaxAmt"]
      self.DspABAmt:int = obj["DspABAmt"]
      """  Display advance billing amount  """  
      self.DspDepBal:int = obj["DspDepBal"]
      """  Display deposit balance.  """  
      self.DspDepCr:int = obj["DspDepCr"]
      """  Display deposit credit.  """  
      self.DspDigitalSignature:str = obj["DspDigitalSignature"]
      self.DspDocABAmt:int = obj["DspDocABAmt"]
      """  Display document advance billing amount  """  
      self.DspDocDepBal:int = obj["DspDocDepBal"]
      """  Display document deposit balance  """  
      self.DspDocDepCr:int = obj["DspDocDepCr"]
      """  Display document deposit credit.  """  
      self.DspDocInvoiceAmt:int = obj["DspDocInvoiceAmt"]
      """  Display document invoice amount  """  
      self.DspDocInvoiceBal:int = obj["DspDocInvoiceBal"]
      """  Display document invoice balance  """  
      self.DspDocRounding:int = obj["DspDocRounding"]
      """  Display Invoice Doc Rounding  """  
      self.DspDocSubTotal:int = obj["DspDocSubTotal"]
      """  display document sub total  """  
      self.DspInvoiceAmt:int = obj["DspInvoiceAmt"]
      """  Display invoice amount  """  
      self.DspInvoiceBal:int = obj["DspInvoiceBal"]
      """  Display Invoice Balance.  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display invoice reference  """  
      self.DspPayDiscDays:str = obj["DspPayDiscDays"]
      self.DspPrepDeposit:int = obj["DspPrepDeposit"]
      self.DspRounding:int = obj["DspRounding"]
      """  Display Rounding in Base  """  
      self.dspSoldToCustID:str = obj["dspSoldToCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.DspSubTotal:int = obj["DspSubTotal"]
      """  Display sub total  """  
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      """  Indicates if assign legal number option is available.  """  
      self.EnableCentralCollection:bool = obj["EnableCentralCollection"]
      self.EnableSOCCDefaults:bool = obj["EnableSOCCDefaults"]
      """  Flag to determine if UseSOCCDefaults should be enabled.  """  
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Indicates if TranDocTypeID is available for input.  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      """  Indicates if the void legal number option is available  """  
      self.ERSInvoice:bool = obj["ERSInvoice"]
      """  It will be displayed to identify invoices automatically generated due ERS shipments.  """  
      self.ExchangeRateDate:str = obj["ExchangeRateDate"]
      """  Indicates which date to be used to calculate the exchange rate, I for Invoice Date, A for Apply Date.  """  
      self.GenedFromRMA:bool = obj["GenedFromRMA"]
      """  Flag for update of InvcHead to allow when group id is "RMACRREQ"  """  
      self.HasBank:bool = obj["HasBank"]
      """  CustBank record exists for customer  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      """  Indicates if a legal number configuration exists for ar invoices/credit memos  """  
      self.InPriceLn:bool = obj["InPriceLn"]
      """  In case if Invoice Header Tax Liability is not assigned this flag indicates if any of Invoice lines has Tax inclusive Tax Liability assinged  """  
      self.IntInvoiceType:str = obj["IntInvoiceType"]
      """  Integration invoice type.  Used for setting of InvoiceType.  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  InvoiceType description  """  
      self.IsDK:bool = obj["IsDK"]
      """  Denmark localization external field  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsLatestRecurrence:bool = obj["IsLatestRecurrence"]
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.IsPIUnappliedReceipt:bool = obj["IsPIUnappliedReceipt"]
      """  Indicates if the UR Invoice was created from an On Account PI instead of an on account cash receipt.  """  
      self.IsPMForGenPIType:bool = obj["IsPMForGenPIType"]
      self.LatestInvoice:int = obj["LatestInvoice"]
      self.LegalNumberMessage:str = obj["LegalNumberMessage"]
      """  Stores the message when a legal number is generated.  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.MXCancellationID:str = obj["MXCancellationID"]
      """  MXCancellationID  """  
      self.MXCancellationStatus:str = obj["MXCancellationStatus"]
      """  MXCancellationStatus  """  
      self.NeedConfirmTaxes:bool = obj["NeedConfirmTaxes"]
      """  It indicates that this Invoice has taxes, for which the confirmation is required.  """  
      self.NextDiscDate:str = obj["NextDiscDate"]
      """  This field is to display in Cash Receipt Entry the Discount Date that the payment will take.  """  
      self.NextInvoiceDate:str = obj["NextInvoiceDate"]
      """  NextInvoiceDate = InvcRecurringCycle.LastDate + RecurringCycle.Interval in RecurringCycle.Modifier units  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number from the 1st line item.  """  
      self.PaySchedEnabled:bool = obj["PaySchedEnabled"]
      """  Pay schedule enabled flag  """  
      self.PEBOEChangeStatusTo:str = obj["PEBOEChangeStatusTo"]
      """  Indicates what the user will change the status to  """  
      self.PEBOEStatusDesc:str = obj["PEBOEStatusDesc"]
      self.PECollectionsDate:str = obj["PECollectionsDate"]
      """  Peru CSF: Collections date  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEInCollections:bool = obj["PEInCollections"]
      """  Peru CSF: No if the invoice is moved out of collections, Yes if the invoice is moved into colletions.  """  
      self.PERefDocumentTypeDesc:str = obj["PERefDocumentTypeDesc"]
      """  PE Document Type Description  """  
      self.PERefDocumentTypeDesc2:str = obj["PERefDocumentTypeDesc2"]
      """  PE Document Type Description 2  """  
      self.PERefDocumentTypeDesc3:str = obj["PERefDocumentTypeDesc3"]
      """  PE Document Type Description 3  """  
      self.PERefDocumentTypeDesc4:str = obj["PERefDocumentTypeDesc4"]
      """  PE Document Type Description 4  """  
      self.PERefDocumentTypeDesc5:str = obj["PERefDocumentTypeDesc5"]
      """  PE Document Type Description 5  """  
      self.PIBankAcctID:str = obj["PIBankAcctID"]
      """  PI - Bank account  """  
      self.PICustBankDtl:bool = obj["PICustBankDtl"]
      """  PI Customer bank required  """  
      self.PIInitiation:str = obj["PIInitiation"]
      """  PI Initiation - generated or received  """  
      self.PrepDepositEnabled:bool = obj["PrepDepositEnabled"]
      """  Prep Deposit enabled flag.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      """  The description of the proposed Tax Region  """  
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.Recurring:bool = obj["Recurring"]
      """  Recurring flag  """  
      self.RemainTaxAmt:int = obj["RemainTaxAmt"]
      self.ReminderSeq:int = obj["ReminderSeq"]
      self.ReversalDocAmt:int = obj["ReversalDocAmt"]
      """  Accumulate all reversal amounts of Credit Memos with the reference to the invoice  """  
      self.ReverseTaxAmt:int = obj["ReverseTaxAmt"]
      self.Rpt1ABAmt:int = obj["Rpt1ABAmt"]
      self.Rpt1COIFRSFinancialCharge:int = obj["Rpt1COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt1COIFRSPresentValue:int = obj["Rpt1COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt1CumulativeBalance:int = obj["Rpt1CumulativeBalance"]
      self.Rpt1DepBal:int = obj["Rpt1DepBal"]
      self.Rpt1DspABAmt:int = obj["Rpt1DspABAmt"]
      self.Rpt1DspDepBal:int = obj["Rpt1DspDepBal"]
      self.Rpt1DspDepCr:int = obj["Rpt1DspDepCr"]
      self.Rpt1DspInvoiceAmt:int = obj["Rpt1DspInvoiceAmt"]
      self.Rpt1DspInvoiceBal:int = obj["Rpt1DspInvoiceBal"]
      self.Rpt1DspPrepDeposit:int = obj["Rpt1DspPrepDeposit"]
      self.Rpt1DspRounding:int = obj["Rpt1DspRounding"]
      self.Rpt1DspSubTotal:int = obj["Rpt1DspSubTotal"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt1RemainTaxAmt:int = obj["Rpt1RemainTaxAmt"]
      self.Rpt1ReverseTaxAmt:int = obj["Rpt1ReverseTaxAmt"]
      self.Rpt1SATaxAmt:int = obj["Rpt1SATaxAmt"]
      self.Rpt1SourceRecurBalance:int = obj["Rpt1SourceRecurBalance"]
      self.Rpt1SubTotal:int = obj["Rpt1SubTotal"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt1Vr:int = obj["Rpt1Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt1 currency.  """  
      self.Rpt1WHTaxAmt:int = obj["Rpt1WHTaxAmt"]
      self.Rpt2ABAmt:int = obj["Rpt2ABAmt"]
      self.Rpt2COIFRSFinancialCharge:int = obj["Rpt2COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt2COIFRSPresentValue:int = obj["Rpt2COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt2CumulativeBalance:int = obj["Rpt2CumulativeBalance"]
      self.Rpt2DepBal:int = obj["Rpt2DepBal"]
      self.Rpt2DspABAmt:int = obj["Rpt2DspABAmt"]
      self.Rpt2DspDepBal:int = obj["Rpt2DspDepBal"]
      self.Rpt2DspDepCr:int = obj["Rpt2DspDepCr"]
      self.Rpt2DspInvoiceAmt:int = obj["Rpt2DspInvoiceAmt"]
      self.Rpt2DspInvoiceBal:int = obj["Rpt2DspInvoiceBal"]
      self.Rpt2DspPrepDeposit:int = obj["Rpt2DspPrepDeposit"]
      self.Rpt2DspRounding:int = obj["Rpt2DspRounding"]
      self.Rpt2DspSubTotal:int = obj["Rpt2DspSubTotal"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt2RemainTaxAmt:int = obj["Rpt2RemainTaxAmt"]
      self.Rpt2ReverseTaxAmt:int = obj["Rpt2ReverseTaxAmt"]
      self.Rpt2SATaxAmt:int = obj["Rpt2SATaxAmt"]
      self.Rpt2SourceRecurBalance:int = obj["Rpt2SourceRecurBalance"]
      self.Rpt2SubTotal:int = obj["Rpt2SubTotal"]
      self.Rpt2Taxamt:int = obj["Rpt2Taxamt"]
      self.Rpt2Vr:int = obj["Rpt2Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt2 currency.  """  
      self.Rpt2WHTaxAmt:int = obj["Rpt2WHTaxAmt"]
      self.Rpt3ABAmt:int = obj["Rpt3ABAmt"]
      self.Rpt3COIFRSFinancialCharge:int = obj["Rpt3COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt3COIFRSPresentValue:int = obj["Rpt3COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt3CumulativeBalance:int = obj["Rpt3CumulativeBalance"]
      self.Rpt3DepBal:int = obj["Rpt3DepBal"]
      self.Rpt3DspABAmt:int = obj["Rpt3DspABAmt"]
      self.Rpt3DspDepBal:int = obj["Rpt3DspDepBal"]
      self.Rpt3DspDepCr:int = obj["Rpt3DspDepCr"]
      self.Rpt3DspInvoiceAmt:int = obj["Rpt3DspInvoiceAmt"]
      self.Rpt3DspInvoiceBal:int = obj["Rpt3DspInvoiceBal"]
      self.Rpt3DspPrepDeposit:int = obj["Rpt3DspPrepDeposit"]
      self.Rpt3DspRounding:int = obj["Rpt3DspRounding"]
      self.Rpt3DspSubTotal:int = obj["Rpt3DspSubTotal"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.Rpt3RemainTaxAmt:int = obj["Rpt3RemainTaxAmt"]
      self.Rpt3ReverseTaxAmt:int = obj["Rpt3ReverseTaxAmt"]
      self.Rpt3SATaxAmt:int = obj["Rpt3SATaxAmt"]
      self.Rpt3SourceRecurBalance:int = obj["Rpt3SourceRecurBalance"]
      self.Rpt3SubTotal:int = obj["Rpt3SubTotal"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt3Vr:int = obj["Rpt3Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt3 currency.  """  
      self.Rpt3WHTaxAmt:int = obj["Rpt3WHTaxAmt"]
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st entry in SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd entry in SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd entry in SalesRepList.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th entry in SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th entry in SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.SATaxAmt:int = obj["SATaxAmt"]
      self.Selected:bool = obj["Selected"]
      """  Boolean for selection of invoices in grid  """  
      self.SkipRecurring:bool = obj["SkipRecurring"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SourceInvoiceNum:int = obj["SourceInvoiceNum"]
      self.SourceLastDate:str = obj["SourceLastDate"]
      self.SourceRecurBalance:int = obj["SourceRecurBalance"]
      self.SubTotal:int = obj["SubTotal"]
      """  Sub total for invoice  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  The system transaction type - ARInvoice or CreditMemo.  Used to filter combo list for TranDocTypeID.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax amount from InvcTax  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.TaxRgnLineChange:bool = obj["TaxRgnLineChange"]
      """  The flag to indicate if the user is supposed to be asked about Tax Liability change  """  
      self.TotalInstanceNum:int = obj["TotalInstanceNum"]
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.UseSOCCDefaults:bool = obj["UseSOCCDefaults"]
      """  If true, the credit card info will come from the sales order.  """  
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.VNInvDescription:str = obj["VNInvDescription"]
      self.VNInvoiceType:str = obj["VNInvoiceType"]
      self.Vr:int = obj["Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in base currency.  """  
      self.WHTaxAmt:int = obj["WHTaxAmt"]
      self.XRateLabel:str = obj["XRateLabel"]
      """  Currency label  """  
      self.zEnableCreditHold:bool = obj["zEnableCreditHold"]
      self.AgingDays:int = obj["AgingDays"]
      """  The number of days the invoice is past due.  """  
      self.ELIEInvProhibitedStatuses:str = obj["ELIEInvProhibitedStatuses"]
      """   The list of prohibited statuses.for the Invoice
For examle, if contains 2 (EINVOICE_STATUS_GENERATED) then Generate E-invoice is not allowed.
if contains 2 (EINVOICE_STATUS_SENT) then Sending Invoice via Service provider is not allowed  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AGInvoicingPointDescription:str = obj["AGInvoicingPointDescription"]
      self.ARSystLNReqForInvc:bool = obj["ARSystLNReqForInvc"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrRateGrpDescription:str = obj["CurrRateGrpDescription"]
      self.CustomerInactive:bool = obj["CustomerInactive"]
      self.CustomerMXGeneralPublic:bool = obj["CustomerMXGeneralPublic"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerELISendingOption:int = obj["CustomerELISendingOption"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MXPurchaseTypeCodeDesc:str = obj["MXPurchaseTypeCodeDesc"]
      self.MXSubstInvoiceMXFiscalFolio:str = obj["MXSubstInvoiceMXFiscalFolio"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OurBankPayerRef:str = obj["OurBankPayerRef"]
      self.OurBankBankIdentifier:str = obj["OurBankBankIdentifier"]
      self.OurBankTypeCode:str = obj["OurBankTypeCode"]
      self.OurBankBankAcctID:str = obj["OurBankBankAcctID"]
      self.OurBankCheckingAccount:str = obj["OurBankCheckingAccount"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.OurBankIBANCode:str = obj["OurBankIBANCode"]
      self.OurBankLocalBIC:str = obj["OurBankLocalBIC"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PlantName:str = obj["PlantName"]
      self.ProjectDescription:str = obj["ProjectDescription"]
      self.RecurringCycleMaximumValue:bool = obj["RecurringCycleMaximumValue"]
      self.SoldToCustNumInactive:bool = obj["SoldToCustNumInactive"]
      self.SoldToCustNumCustID:str = obj["SoldToCustNumCustID"]
      self.SoldToCustNumName:str = obj["SoldToCustNumName"]
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.XbSystOCRCalcType:bool = obj["XbSystOCRCalcType"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcMiscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this misc. charge.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Miscellaneous Charge code  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  Miscellaneous line amount. Base Currency.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  Miscellaneous line amount. Document Currency.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Misc. record. Defaults from the MiscChg master.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  Includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  OrgInvcLine  """  
      self.OrgInvcSeq:int = obj["OrgInvcSeq"]
      """  OrgInvcSeq  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ICPONum:int = obj["ICPONum"]
      """  ICPONum  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  ICPOLine  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  ICPOSeqNum  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol from InvcHead  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol.  """  
      self.DspDocMiscAmt:int = obj["DspDocMiscAmt"]
      """  Display document misc. amt  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Display misc. amt  """  
      self.GroupID:str = obj["GroupID"]
      """  Group ID for the invoice  """  
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceLineLineDesc:str = obj["InvoiceLineLineDesc"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.PayDueDate:str = obj["PayDueDate"]
      """  Specifies the due date of the Scheduled payment.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DspDocPayAmount:int = obj["DspDocPayAmount"]
      """  Display Document Payment Amount (Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.)  """  
      self.DspPayAmount:int = obj["DspPayAmount"]
      """  Display Payment Amount (Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.)  """  
      self.Rpt1DspPayAmount:int = obj["Rpt1DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2DspPayAmount:int = obj["Rpt2DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3DspPayAmount:int = obj["Rpt3DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency Switch used to determine what currency to display amounts in.  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Part of the foreign key used to relate back to a InvcDtl or InvcMisc record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution Date  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Tax Rate Date  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.RateTextCode:str = obj["RateTextCode"]
      """  Legal Text code  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  OrgInvcLine  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ConfirmationDate:str = obj["ConfirmationDate"]
      """  ConfirmationDate  """  
      self.ApplyConfirmationDate:str = obj["ApplyConfirmationDate"]
      """  ApplyConfirmationDate  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  TranDocTypeID  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  LegalNumber  """  
      self.TaxConfirm:bool = obj["TaxConfirm"]
      """  TaxConfirm  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  AllocDepInvcNum  """  
      self.AllocDepInvcLine:int = obj["AllocDepInvcLine"]
      """  AllocDepInvcLine  """  
      self.AllocDepRateCode:str = obj["AllocDepRateCode"]
      """  AllocDepRateCode  """  
      self.AllocDepECAcqSeq:int = obj["AllocDepECAcqSeq"]
      """  AllocDepECAcqSeq  """  
      self.AllocDepTaxBal:int = obj["AllocDepTaxBal"]
      """  AllocDepTaxBal  """  
      self.DocAllocTaxBal:int = obj["DocAllocTaxBal"]
      """  DocAllocTaxBal  """  
      self.Rpt1AllocDepTaxBal:int = obj["Rpt1AllocDepTaxBal"]
      """  Rpt1AllocDepTaxBal  """  
      self.Rpt2AllocDepTaxBal:int = obj["Rpt2AllocDepTaxBal"]
      """  Rpt2AllocDepTaxBal  """  
      self.Rpt3AllocDepTaxBal:int = obj["Rpt3AllocDepTaxBal"]
      """  Rpt3AllocDepTaxBal  """  
      self.TaxReverseDate:str = obj["TaxReverseDate"]
      """  TaxReverseDate  """  
      self.ReverseByInvoiceNum:int = obj["ReverseByInvoiceNum"]
      """  ReverseByInvoiceNum  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.ConfirmDate:str = obj["ConfirmDate"]
      """  Date when confirmation of this tax was done.  """  
      self.ConfirmDocType:str = obj["ConfirmDocType"]
      """  Transaction Document Type for Confirmation.  """  
      self.ConfirmLegalNumber:str = obj["ConfirmLegalNumber"]
      """  Legal Number for Confirmation.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch used to determine what currency to display amounts in.  """  
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Description - Collection Type  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DspDocFixedAmount:int = obj["DspDocFixedAmount"]
      """  Display Fixed Amount in document currency  """  
      self.DspDocReportableAmt:int = obj["DspDocReportableAmt"]
      """  Display document reportable amt  """  
      self.DspDocTaxableAmt:int = obj["DspDocTaxableAmt"]
      """  Display documents taxable amt  """  
      self.DspDocTaxAmt:int = obj["DspDocTaxAmt"]
      """  Display document tax amt  """  
      self.DspDocTaxAmtVar:int = obj["DspDocTaxAmtVar"]
      self.DspFixedAmount:int = obj["DspFixedAmount"]
      """  Displaed  Fixed part of the amount of the tax in base currency  """  
      self.DspReportableAmt:int = obj["DspReportableAmt"]
      """  Display reportable amt  """  
      self.DspTaxableAmt:int = obj["DspTaxableAmt"]
      """  Display taxable amount  """  
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      """  Display tax amt  """  
      self.DspTaxAmtVar:int = obj["DspTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      """  Group associated to the invoice  """  
      self.NeedConfirmation:bool = obj["NeedConfirmation"]
      """  It indicates that for this tax need confirmation.  """  
      self.RateCodeAmt:int = obj["RateCodeAmt"]
      """  store the value of the rate.  """  
      self.Rpt1DspFixedAmount:int = obj["Rpt1DspFixedAmount"]
      self.Rpt1DspReportableAmt:int = obj["Rpt1DspReportableAmt"]
      self.Rpt1DspTaxableAmt:int = obj["Rpt1DspTaxableAmt"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt1DspTaxAmtVar:int = obj["Rpt1DspTaxAmtVar"]
      self.Rpt2DspFixedAmount:int = obj["Rpt2DspFixedAmount"]
      self.Rpt2DspReportableAmt:int = obj["Rpt2DspReportableAmt"]
      self.Rpt2DspTaxableAmt:int = obj["Rpt2DspTaxableAmt"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt2DspTaxAmtVar:int = obj["Rpt2DspTaxAmtVar"]
      self.Rpt3DspFixedAmount:int = obj["Rpt3DspFixedAmount"]
      self.Rpt3DspReportableAmt:int = obj["Rpt3DspReportableAmt"]
      self.Rpt3DspTaxableAmt:int = obj["Rpt3DspTaxableAmt"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.Rpt3DspTaxAmtVar:int = obj["Rpt3DspTaxAmtVar"]
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales tax code description  """  
      self.TaxTotal:int = obj["TaxTotal"]
      """  Total of the taxes for an invoice  """  
      self.ApplyConfirmDate:str = obj["ApplyConfirmDate"]
      """  Apply Date of tax confirmation process.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceLineLineDesc:str = obj["InvoiceLineLineDesc"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.SalesTaxDescDescription:str = obj["SalesTaxDescDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.LegalNumberID:str = obj["LegalNumberID"]
      self.TransYear:int = obj["TransYear"]
      self.TransYearSuffix:str = obj["TransYearSuffix"]
      self.DspTransYear:str = obj["DspTransYear"]
      self.ShowDspTransYear:bool = obj["ShowDspTransYear"]
      """  Indicates if DspTransYear should be displayed when prompting for a manual number.  """  
      self.Prefix:str = obj["Prefix"]
      self.PrefixList:str = obj["PrefixList"]
      """  The list of prefixes that can be selected by the user for manual numbers.  """  
      self.NumberSuffix:str = obj["NumberSuffix"]
      """  The suffix portion of the legal number.  """  
      self.EnablePrefix:bool = obj["EnablePrefix"]
      """  Indicates if the prefix can be entered by the user.  """  
      self.EnableSuffix:bool = obj["EnableSuffix"]
      """  Indicates if the suffix (number) can be entered by the user.  """  
      self.NumberOption:str = obj["NumberOption"]
      self.DocumentDate:str = obj["DocumentDate"]
      self.GenerationType:str = obj["GenerationType"]
      self.Description:str = obj["Description"]
      self.TransPeriod:int = obj["TransPeriod"]
      self.PeriodPrefix:str = obj["PeriodPrefix"]
      """  Prefix for the period  """  
      self.ShowTransPeriod:bool = obj["ShowTransPeriod"]
      self.LegalNumber:str = obj["LegalNumber"]
      """  Used when the full legal number is entered  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.TranDocTypeID2:str = obj["TranDocTypeID2"]
      self.GenerationOption:str = obj["GenerationOption"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_MXInvcHeadFiscalTextRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.FiscalTextSeq:int = obj["FiscalTextSeq"]
      """  FiscalTextSeq  """  
      self.TaxProv:str = obj["TaxProv"]
      """  TaxProv  """  
      self.Rule:str = obj["Rule"]
      """  Rule  """  
      self.FiscalText:str = obj["FiscalText"]
      """  FiscalText  """  
      self.IncludeInXML:bool = obj["IncludeInXML"]
      """  IncludeInXML  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_MXInvcRefRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.RefInvoiceNum:int = obj["RefInvoiceNum"]
      """  RefInvoiceNum  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.InvoiceRelationType:str = obj["InvoiceRelationType"]
      """  Invoice Relation Type  """  
      self.ApplyDate:str = obj["ApplyDate"]
      self.CreditMemo:bool = obj["CreditMemo"]
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      self.HoldInvoice:bool = obj["HoldInvoice"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.InvoiceType:str = obj["InvoiceType"]
      self.TempRefInvoiceNum:str = obj["TempRefInvoiceNum"]
      self.CustID:str = obj["CustID"]
      """  Customer ID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass




#########################################################################
# Custom Schemas:
#########################################################################
class AGLoadElecInvcResults_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Target invoice number  """  
      pass

class AGLoadElecInvcResults_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_AGElecInvcErrorTableset] = obj["returnObj"]
      pass

class AGRegenElecInvoice_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Target invoice number  """  
      pass

class AGRegenElecInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.message:str = obj["parameters"]
      pass

      """  output parameters  """  

class AddRMALineTax_input:
   """ Required : 
   iInvoiceNum
   iInvoiceLine
   """  
   def __init__(self, obj):
      self.iInvoiceNum:int = obj["iInvoiceNum"]
      self.iInvoiceLine:int = obj["iInvoiceLine"]
      pass

class AddRMALineTax_output:
   def __init__(self, obj):
      pass

class AssignLegalNumber_input:
   """ Required : 
   ipInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class AssignLegalNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opLegalNumMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CalcInvcGrpTotal_input:
   """ Required : 
   cGroupId
   """  
   def __init__(self, obj):
      self.cGroupId:str = obj["cGroupId"]
      pass

class CalcInvcGrpTotal_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class CalculateCOIFRS_PV_input:
   """ Required : 
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class CalculateCOIFRS_PV_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CashRecGetInvoices_input:
   """ Required : 
   payDay
   whereClause
   """  
   def __init__(self, obj):
      self.payDay:str = obj["payDay"]
      """  Payment date.  """  
      self.whereClause:str = obj["whereClause"]
      """  Where clause for Cash Receipt.  """  
      pass

class CashRecGetInvoices_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_InvcHeadListTableset] = obj["returnObj"]
      pass

class ChangeCOOperType_input:
   """ Required : 
   coOperType
   ds
   """  
   def __init__(self, obj):
      self.coOperType:str = obj["coOperType"]
      """  Proposed input value  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeCOOperType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDueDate_input:
   """ Required : 
   invoiceNum
   newDueDate
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  The invoice number  """  
      self.newDueDate:str = obj["newDueDate"]
      """  The proposed due date  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeDueDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeIncotermCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeIncotermCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMXExportOperationType_input:
   """ Required : 
   ipExportOperationType
   ds
   """  
   def __init__(self, obj):
      self.ipExportOperationType:str = obj["ipExportOperationType"]
      """  Proposed input value of ExportOperationType  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeMXExportOperationType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMXProdServCode_input:
   """ Required : 
   ipMXProdServCode
   ds
   """  
   def __init__(self, obj):
      self.ipMXProdServCode:str = obj["ipMXProdServCode"]
      """  Proposed input value of Product or Service Code  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeMXProdServCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMXPurchaseType_input:
   """ Required : 
   ipMXPurchaseType
   ds
   """  
   def __init__(self, obj):
      self.ipMXPurchaseType:str = obj["ipMXPurchaseType"]
      """  Proposed input value of Type of Purchase  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeMXPurchaseType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMXSubstInvoiceNum_input:
   """ Required : 
   ipMXSubstInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.ipMXSubstInvoiceNum:int = obj["ipMXSubstInvoiceNum"]
      """  Proposed input value of Type of Purchase  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeMXSubstInvoiceNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMYIndustryCode_input:
   """ Required : 
   ipInvoiceNum
   ipInvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  invoice number  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  invoice line  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class ChangeMYIndustryCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckAmortSchedules_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class CheckAmortSchedules_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opGenMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCommodityCode_input:
   """ Required : 
   ipWarning
   ipGroupID
   """  
   def __init__(self, obj):
      self.ipWarning:bool = obj["ipWarning"]
      self.ipGroupID:str = obj["ipGroupID"]
      pass

class CheckCommodityCode_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      """  true => checked  """  
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCreditAgingWarningsDefaultDelim_input:
   """ Required : 
   ipInvoiceNumbers
   NewSoldToCustID
   """  
   def __init__(self, obj):
      self.ipInvoiceNumbers:str = obj["ipInvoiceNumbers"]
      """  Invocie numbers list  """  
      self.NewSoldToCustID:str = obj["NewSoldToCustID"]
      """  Customers IDs list  """  
      pass

class CheckCreditAgingWarningsDefaultDelim_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.responseMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCreditAgingWarnings_input:
   """ Required : 
   ipInvoiceNumbers
   NewSoldToCustID
   """  
   def __init__(self, obj):
      self.ipInvoiceNumbers:str = obj["ipInvoiceNumbers"]
      self.NewSoldToCustID:str = obj["NewSoldToCustID"]
      pass

class CheckCreditAgingWarnings_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.responseMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckCustomerTaxID_input:
   """ Required : 
   custID
   """  
   def __init__(self, obj):
      self.custID:str = obj["custID"]
      pass

class CheckCustomerTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckDocumentIsLocked_input:
   """ Required : 
   keyValue
   showError
   """  
   def __init__(self, obj):
      self.keyValue:str = obj["keyValue"]
      """  InvoiceNum  """  
      self.showError:bool = obj["showError"]
      """  true/false to show error message box if doc is locked  """  
      pass

class CheckDocumentIsLocked_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.isLocked:bool = obj["isLocked"]
      pass

      """  output parameters  """  

class CheckGroupBankRefs_input:
   """ Required : 
   groupID
   forcedCheck
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  GroupID  """  
      self.forcedCheck:bool = obj["forcedCheck"]
      """  The flag that references should be foredly checked  """  
      pass

class CheckGroupBankRefs_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.emptyRefInvoicesList:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckGroupForRemainingAmortBal_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  The group ID  """  
      pass

class CheckGroupForRemainingAmortBal_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invoiceNumList:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckGroupISRCodeLine_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  The group ID  """  
      pass

class CheckGroupISRCodeLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckGroupIsLocked_input:
   """ Required : 
   keyValue
   showError
   """  
   def __init__(self, obj):
      self.keyValue:str = obj["keyValue"]
      """  GroupID  """  
      self.showError:bool = obj["showError"]
      """  true/false to show error message box if group is locked  """  
      pass

class CheckGroupIsLocked_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.isLocked:bool = obj["isLocked"]
      self.lockedStatus:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckGroupTaxID_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      pass

class CheckGroupTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckISRCodeDefinition_input:
   """ Required : 
   iInvoiceNum
   """  
   def __init__(self, obj):
      self.iInvoiceNum:int = obj["iInvoiceNum"]
      pass

class CheckISRCodeDefinition_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      """  true - all ok  """  
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckInvoicePI_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number  """  
      pass

class CheckInvoicePI_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.msgWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckLtrOfCredit_input:
   """ Required : 
   iInvoiceNum
   cARLOCID
   dTotalCharges
   """  
   def __init__(self, obj):
      self.iInvoiceNum:int = obj["iInvoiceNum"]
      """  Invoice number  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  Letter of Credit ID  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  OrderHed.TotalCharges  """  
      pass

class CheckLtrOfCredit_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckMXInvcRef_input:
   """ Required : 
   invoiceNum
   invoiceRef
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceRef:int = obj["invoiceRef"]
      pass

class CheckMXInvcRef_output:
   def __init__(self, obj):
      pass

class CheckNegativeInvcBalance_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current GroupID  """  
      pass

class CheckNegativeInvcBalance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.warningMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckShipToTaxID_input:
   """ Required : 
   custNum
   shipToNum
   """  
   def __init__(self, obj):
      self.custNum:int = obj["custNum"]
      self.shipToNum:str = obj["shipToNum"]
      pass

class CheckShipToTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckVATFormat_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class CheckVATFormat_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CopyInvoiceLines_input:
   """ Required : 
   sourceInvoiceNum
   destInvoiceNum
   recalculateTaxes
   reverseSignQty
   ds
   ARInvoiceDS
   """  
   def __init__(self, obj):
      self.sourceInvoiceNum:int = obj["sourceInvoiceNum"]
      """  Invoice num which should be cancelled  """  
      self.destInvoiceNum:int = obj["destInvoiceNum"]
      """  Destination invoice number  """  
      self.recalculateTaxes:bool = obj["recalculateTaxes"]
      self.reverseSignQty:bool = obj["reverseSignQty"]
      self.ds:list[Erp_Tablesets_ARInvGetLinesTableset] = obj["ds"]
      self.ARInvoiceDS:list[Erp_Tablesets_ARInvoiceTableset] = obj["ARInvoiceDS"]
      pass

class CopyInvoiceLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ARInvoiceDS:list[Erp_Tablesets_ARInvoiceTableset] = obj["ARInvoiceDS"]
      pass

      """  output parameters  """  

class CreateCorrectionInvoiceByParamsTH_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   invoiceDate
   applyDate
   cmReason
   creditMemoTranDocTypeID
   arInvoiceTranDocTypeID
   arInvoiceRecalculateTaxes
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:int = obj["sourceInvoiceNum"]
      """  Invoice num which should be corrected  """  
      self.invoiceDate:str = obj["invoiceDate"]
      """  Invoice date for correction invoices  """  
      self.applyDate:str = obj["applyDate"]
      """  Apply date for correction invoices  """  
      self.cmReason:str = obj["cmReason"]
      """  CM Reason for correction invoices  """  
      self.creditMemoTranDocTypeID:str = obj["creditMemoTranDocTypeID"]
      """  Transaction document type for correction reversed invoice  """  
      self.arInvoiceTranDocTypeID:str = obj["arInvoiceTranDocTypeID"]
      """  Transaction document type for correction invoice  """  
      self.arInvoiceRecalculateTaxes:bool = obj["arInvoiceRecalculateTaxes"]
      """  Flag 'Recalculate Taxes' type for correction invoice  """  
      pass

class CreateCorrectionInvoiceByParamsTH_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNewCreditMemoInvoiceNum:int = obj["parameters"]
      self.opNewARInvoiceNum:int = obj["parameters"]
      pass

      """  output parameters  """  

class CreateCorrectionInvoiceTH_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   invcHeadListTableset
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:int = obj["sourceInvoiceNum"]
      """  Invoice num which should be corrected  """  
      self.invcHeadListTableset:list[Erp_Tablesets_InvcHeadListTableset] = obj["invcHeadListTableset"]
      pass

class CreateCorrectionInvoiceTH_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invcHeadListTableset:list[Erp_Tablesets_InvcHeadListTableset] = obj["invcHeadListTableset"]
      self.opNewCreditMemoInvoiceNum:int = obj["parameters"]
      self.opNewARInvoiceNum:int = obj["parameters"]
      pass

      """  output parameters  """  

class CreateCorrectionInvoice_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   newInvoiceDate
   newDocType
   recalculateTaxes
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:int = obj["sourceInvoiceNum"]
      """  Invoice num which should be corrected  """  
      self.newInvoiceDate:str = obj["newInvoiceDate"]
      """  Date of new invoice  """  
      self.newDocType:str = obj["newDocType"]
      """  Document Type for the new invoice  """  
      self.recalculateTaxes:bool = obj["recalculateTaxes"]
      """  Flag to indicate if is necessary to recalculate taxes  """  
      pass

class CreateCorrectionInvoice_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.opNewInvoiceNum:int = obj["parameters"]
      pass

      """  output parameters  """  

class CreateInvFromDep_input:
   """ Required : 
   groupID
   payments
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Group to generate invoices for.  """  
      self.payments:str = obj["payments"]
      """  The list of deposit payments  """  
      pass

class CreateInvFromDep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invoices:str = obj["parameters"]
      self.errors:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class CreateInvcDtlTGLC_input:
   """ Required : 
   groupID
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Group ID  """  
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number  """  
      self.invoiceLine:int = obj["invoiceLine"]
      """  Invoice line number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class CreateInvcDtlTGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateInvcGrp_input:
   """ Required : 
   sFromGroupID
   sToGrouID
   """  
   def __init__(self, obj):
      self.sFromGroupID:str = obj["sFromGroupID"]
      """  string Original GroupID  """  
      self.sToGrouID:str = obj["sToGrouID"]
      """  string new GroupID value  """  
      pass

class CreateInvcGrp_output:
   def __init__(self, obj):
      pass

class CurrSymbolByInvcNum_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  The invoice number  """  
      pass

class CurrSymbolByInvcNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vCurrCode:str = obj["parameters"]
      self.vCurrSymbol:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeleteAmortizationSchedule_input:
   """ Required : 
   ipResetDefRevFlag
   ds
   """  
   def __init__(self, obj):
      self.ipResetDefRevFlag:bool = obj["ipResetDefRevFlag"]
      """  indicates if the invcdtl.DeferredRev is to be reset  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class DeleteAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeleteByID_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class DeleteByID_output:
   def __init__(self, obj):
      pass

class DeleteMaster_input:
   """ Required : 
   ds
   cGroupID
   keyValue
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current APInvGrp GroupID  """  
      self.keyValue:str = obj["keyValue"]
      """  VendorNum  """  
      pass

class DeleteMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class DeselectSelectedDropShipments_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["ds"]
      pass

class DeselectSelectedDropShipments_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["returnObj"]
      pass

class ETCAfterAddressValidationOTS_input:
   """ Required : 
   ds
   ds1
   InvoiceNum
   InvoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.ds1:list[Erp_Tablesets_ETCAddrValidationTableset] = obj["ds1"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvcDtl.InvoiceNum  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvcDtl.InvoiceLine  """  
      pass

class ETCAfterAddressValidationOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ETCValidateAddress_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvcHead.InvoiceNum  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvcDtl.InvoiceLine  """  
      pass

class ETCValidateAddress_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ETCAddrValidationTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.StatusFlag:bool = obj["StatusFlag"]
      self.ErrorFlag:bool = obj["ErrorFlag"]
      self.ErrorMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class EnableARDates_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.EnApplyDate:bool = obj["EnApplyDate"]
      self.EnShipDate:bool = obj["EnShipDate"]
      self.EnTaxPDate:bool = obj["EnTaxPDate"]
      self.EnTaxRDate:bool = obj["EnTaxRDate"]
      self.EnCurrRDate:bool = obj["EnCurrRDate"]
      self.EnTaxRCDate:bool = obj["EnTaxRCDate"]
      pass

      """  output parameters  """  

class Erp_Tablesets_AGElecInvcErrorTableset:
   def __init__(self, obj):
      self.AGElectronicInvcError:list[Erp_Tablesets_AGElectronicInvcErrorRow] = obj["AGElectronicInvcError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_AGElectronicInvcErrorRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.ErrorSeq:int = obj["ErrorSeq"]
      """  ErrorSeq  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  ErrorMessage  """  
      self.StackTrace:str = obj["StackTrace"]
      """  StackTrace  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetClaimCreditsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.COSPosted:bool = obj["COSPosted"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocDiscount:int = obj["DocDiscount"]
      self.DocExtPrice:int = obj["DocExtPrice"]
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      self.HDCaseNum:int = obj["HDCaseNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.IUM:str = obj["IUM"]
      self.OurShipQty:int = obj["OurShipQty"]
      self.PartNum:str = obj["PartNum"]
      self.PricePerCode:str = obj["PricePerCode"]
      self.QuoteLine:int = obj["QuoteLine"]
      self.QuoteNum:int = obj["QuoteNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.SalesUM:str = obj["SalesUM"]
      self.SellingShipQty:int = obj["SellingShipQty"]
      self.ShipDate:str = obj["ShipDate"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetClaimCreditsTableset:
   def __init__(self, obj):
      self.ARInvGetClaimCredits:list[Erp_Tablesets_ARInvGetClaimCreditsRow] = obj["ARInvGetClaimCredits"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetDepRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.GroupID:str = obj["GroupID"]
      self.HeadNum:int = obj["HeadNum"]
      self.CustID:str = obj["CustID"]
      self.CheckRef:str = obj["CheckRef"]
      self.DocTranAmt:int = obj["DocTranAmt"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.TranDate:str = obj["TranDate"]
      self.OrderNum:int = obj["OrderNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetDepTableset:
   def __init__(self, obj):
      self.ARInvGetDep:list[Erp_Tablesets_ARInvGetDepRow] = obj["ARInvGetDep"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetDropShipTableset:
   def __init__(self, obj):
      self.ARSelectedDropShip:list[Erp_Tablesets_ARSelectedDropShipRow] = obj["ARSelectedDropShip"]
      self.ARUninvoicedDropShip:list[Erp_Tablesets_ARUninvoicedDropShipRow] = obj["ARUninvoicedDropShip"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetFSCallsRow:
   def __init__(self, obj):
      self.CallCode:str = obj["CallCode"]
      self.CallNum:int = obj["CallNum"]
      self.CallPriority:str = obj["CallPriority"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocTotActCall:int = obj["DocTotActCall"]
      self.EntryPerson:str = obj["EntryPerson"]
      self.ShipToName:str = obj["ShipToName"]
      self.ShipToNum:str = obj["ShipToNum"]
      self.CallLine:int = obj["CallLine"]
      """  Call Line  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Num  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetFSCallsTableset:
   def __init__(self, obj):
      self.ARInvGetFSCalls:list[Erp_Tablesets_ARInvGetFSCallsRow] = obj["ARInvGetFSCalls"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetFSContRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.ContractNum:int = obj["ContractNum"]
      self.ContractType:str = obj["ContractType"]
      self.CustNum:int = obj["CustNum"]
      self.OrderNum:int = obj["OrderNum"]
      self.OrderLine:int = obj["OrderLine"]
      self.EntryDate:str = obj["EntryDate"]
      self.ContractCode:str = obj["ContractCode"]
      self.PrcConNum:int = obj["PrcConNum"]
      self.ShipToNum:str = obj["ShipToNum"]
      self.ContVoid:bool = obj["ContVoid"]
      self.ShpConNum:int = obj["ShpConNum"]
      self.ActiveDate:str = obj["ActiveDate"]
      self.ExpireDate:str = obj["ExpireDate"]
      self.Duration:int = obj["Duration"]
      self.Modifier:str = obj["Modifier"]
      self.Material:bool = obj["Material"]
      self.Labor:bool = obj["Labor"]
      self.Misc:bool = obj["Misc"]
      self.Invoiced:bool = obj["Invoiced"]
      self.PackNum:int = obj["PackNum"]
      self.PackLine:int = obj["PackLine"]
      self.OnSite:bool = obj["OnSite"]
      self.RecurringInv:bool = obj["RecurringInv"]
      self.RecurringFreq:str = obj["RecurringFreq"]
      self.PricePer:str = obj["PricePer"]
      self.LastInvGen:bool = obj["LastInvGen"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.TaxCatID:str = obj["TaxCatID"]
      self.CustName:str = obj["CustName"]
      self.ShipToName:str = obj["ShipToName"]
      self.ContractTotal:int = obj["ContractTotal"]
      self.DocContractTotal:int = obj["DocContractTotal"]
      self.PrcConName:str = obj["PrcConName"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ContractTotal:int = obj["Rpt1ContractTotal"]
      self.Rpt2ContractTotal:int = obj["Rpt2ContractTotal"]
      self.Rpt3ContractTotal:int = obj["Rpt3ContractTotal"]
      self.RenewalNbr:int = obj["RenewalNbr"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetFSContTableset:
   def __init__(self, obj):
      self.ARInvGetFSCont:list[Erp_Tablesets_ARInvGetFSContRow] = obj["ARInvGetFSCont"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetLinesRow:
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.Part:str = obj["Part"]
      self.PartDescription:str = obj["PartDescription"]
      self.SellingShipQty:int = obj["SellingShipQty"]
      self.SalesUM:str = obj["SalesUM"]
      self.UnitPrice:int = obj["UnitPrice"]
      self.Discount:int = obj["Discount"]
      self.DocLineTotal:int = obj["DocLineTotal"]
      self.PackNum:int = obj["PackNum"]
      self.PackLine:int = obj["PackLine"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetLinesTableset:
   def __init__(self, obj):
      self.ARInvGetLines:list[Erp_Tablesets_ARInvGetLinesRow] = obj["ARInvGetLines"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetMilestoneRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.ProjectID:str = obj["ProjectID"]
      self.MilestoneID:str = obj["MilestoneID"]
      self.Complete:bool = obj["Complete"]
      self.Description:str = obj["Description"]
      self.BillingType:str = obj["BillingType"]
      self.BillingTypeDescription:str = obj["BillingTypeDescription"]
      self.BillingRequired:bool = obj["BillingRequired"]
      self.BillingAmount:int = obj["BillingAmount"]
      self.OrderNum:int = obj["OrderNum"]
      self.OrderLine:int = obj["OrderLine"]
      self.ProjectName:str = obj["ProjectName"]
      self.CustID:str = obj["CustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetMilestoneTableset:
   def __init__(self, obj):
      self.ARInvGetMilestone:list[Erp_Tablesets_ARInvGetMilestoneRow] = obj["ARInvGetMilestone"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetPBRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.TmpInvcNum:int = obj["TmpInvcNum"]
      """  Temporary invoice number  """  
      self.ConReference:str = obj["ConReference"]
      """  Contract Reference  """  
      self.ConInvMeth:str = obj["ConInvMeth"]
      """  Invoicing Method  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Customer Name  """  
      self.CustNum:int = obj["CustNum"]
      """  Customer Number  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetPBTableset:
   def __init__(self, obj):
      self.ARInvGetPB:list[Erp_Tablesets_ARInvGetPBRow] = obj["ARInvGetPB"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetRMARow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.SellingShipQty:int = obj["SellingShipQty"]
      self.SalesUM:str = obj["SalesUM"]
      self.OurShipQty:int = obj["OurShipQty"]
      self.IUM:str = obj["IUM"]
      self.PricePerCode:str = obj["PricePerCode"]
      self.PartNum:str = obj["PartNum"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.DocExtPrice:int = obj["DocExtPrice"]
      self.COSPosted:bool = obj["COSPosted"]
      self.DocDiscount:int = obj["DocDiscount"]
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      self.ShipDate:str = obj["ShipDate"]
      self.RMANum:int = obj["RMANum"]
      self.RMALine:int = obj["RMALine"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetRMATableset:
   def __init__(self, obj):
      self.ARInvGetRMA:list[Erp_Tablesets_ARInvGetRMARow] = obj["ARInvGetRMA"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetRecInvSourceRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  "Only used when InvoiceType = ""Adv"" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If ""No"" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files. "  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetRecInvSourceTableset:
   def __init__(self, obj):
      self.ARInvGetRecInvSource:list[Erp_Tablesets_ARInvGetRecInvSourceRow] = obj["ARInvGetRecInvSource"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvGetShipRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number  """  
      self.CustID:str = obj["CustID"]
      """  Customer ID  """  
      self.BillFreq:str = obj["BillFreq"]
      """  customer billing frequency  """  
      self.ConsolidateSO:bool = obj["ConsolidateSO"]
      """  Consolidate sales orders  """  
      self.OneInvPerPS:bool = obj["OneInvPerPS"]
      """  One invoice per pack slip flag  """  
      self.ShipDate:str = obj["ShipDate"]
      """  Ship date  """  
      self.SalesOrder:int = obj["SalesOrder"]
      """  Sales Order Number  """  
      self.SalesOrderDate:str = obj["SalesOrderDate"]
      """  sales order date  """  
      self.PONum:str = obj["PONum"]
      self.GenerateInvoiceFlag:bool = obj["GenerateInvoiceFlag"]
      """  Generate invoice flag  """  
      self.PendingStatus:bool = obj["PendingStatus"]
      """  Pending status flag  """  
      self.ShippedStatus:bool = obj["ShippedStatus"]
      """  Shipped status flag  """  
      self.InvoicedStatus:bool = obj["InvoicedStatus"]
      """  Invoiced status flag  """  
      self.VoidedStatus:bool = obj["VoidedStatus"]
      """  Voided status flag.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Customer name  """  
      self.BTCustID:str = obj["BTCustID"]
      """  CustID associated with ShipHead.BTCustNum.  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  CustName associated with ShipHead.BTCustNum  """  
      self.ReadyToInvoice:bool = obj["ReadyToInvoice"]
      """  Indicate which invoices are due to be invoiced  """  
      self.PendingOrdCmp:bool = obj["PendingOrdCmp"]
      """  Pending Order Completion.  True, when a shipped (ShipHead.ReadyToInvoice = true) packing slip references one or more Open Sales Orders where the Sales Order is flagged for "Invoice when Complete"  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvGetShipTableset:
   def __init__(self, obj):
      self.ARInvGetShip:list[Erp_Tablesets_ARInvGetShipRow] = obj["ARInvGetShip"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvPayActivityRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.GroupID:str = obj["GroupID"]
      """  The data entry "Group" to which is transaction is assigned. This is not user maintainable. It is duplicated from the corresponding CashHead record.  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The foreign key that relates this detail record to a CashHead record. Duplicated from CashHead.HeadNum when record is created. Not applicable to user interface.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  The open A/R invoice # that the transaction applies against. Not used by the MisPay trantype. In the case of PayInv, or CMemo transaction this must be a valid InvcHead record where InvcHead.CreditMemo = No. In case of "Adjust" transactions this can be either a invoice or a credit memo reference. Note: The "Apply Credit Memo" program automatically creates an additional CashDtl records for each invoice to which the credit memo is applied.  In this additional record this field contains the credit memo's number.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  Applicable to CMemo transaction types only. The "Apply Credit Memo" program creates two CashDtl records for each invoice that a credit memo is applied to. One record for the <credit> to the invoice and a second record for the debit to the credit memo. In the first record this field is the InvoiceNum of the Credit memo. In the second record it is the InvoiceNum of the invoice that the credit memo was applied to.  """  
      self.TranType:str = obj["TranType"]
      """   Identifies the type of transaction. Adjust = Adjustment, CMemo = Credit Memo Transfer, PrePay = Pre Payment, MisPay = Misc Payment, PayInv = Payment on Invoices. This is  duplicated from the CashHead.TranType, not user maintainable.
Note: For currency gain/loss it will be "Adjust". Both the Debit/Credit GL# will be used. Debit is A/R account. Credit is gain/loss account.  """  
      self.Posted:bool = obj["Posted"]
      """  A flag that indicates if this transaction has been posted. A posted transaction cannot be maintained; it is considered as being committed. This flag is not directly set by the user for each transaction. Instead it is set via a "post function" which processes all the transactions in the batch.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year. This is not entered by the user on each record. Instead as part of the posting process it is duplicated in from the CashBatc.FiscalYear. Therefore each batch is posted to a single fiscal period.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period for the transaction. Not directly entered by the user. Duplicated from the CashBatc.FiscalPeriod at time of posting.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Indicates if this transaction has been posted to the General Ledger Module.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction Date. Duplicated from the CashBatc.TranDate. Not user maintainable. This is refreshed as part of the post process.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The customer's Check number of the receipt transaction. Duplicated from CashHead.CheckRef. This is a mandatory field used only for Cash Receipt type of translations.  Primarily used as a reference. The only validation is that it can't be blank.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.TranAmt:int = obj["TranAmt"]
      """   Amount of transaction that is being applied.  Default as the lesser of IncvHead.InvoiceBal or CashHead.Outstanding.
Notes on sign of field: For Cash receipt transaction it carries a positive sign. For Adjustments it carries the sign entered by the user (negatives reduce A/R). For disbursement of a credit memo against invoices (CMEMO) the transactions against the invoice carry a negative sign and the transactions generated against the credit memo carry a positive sign.
For records based in Debit Note applied  it carries a negative sign.  """  
      self.DocTranAmt:int = obj["DocTranAmt"]
      """   Amount of transaction that is being applied.  Default as the lesser of IncvHead.InvoiceBal or CashHead.Outstanding.
Notes on sign of field: For Cash receipt transaction, it carries a positive sign. For Adjustments it carries the sign entered by the user (negatives reduce A/R). For disbursement of a credit memo against invoices (CMEMO) the transactions against the invoice carry a negative sign and the transactions generated against the credit memo carry a positive sign.  """  
      self.CustNum:int = obj["CustNum"]
      """  Contains the Customer number that the transaction is for.  This must be valid in the Customer table.  Not entered for miscellaneous receipts.  """  
      self.Discount:int = obj["Discount"]
      """   Prompt Payment Discount given for this invoice. Only applicable for PayInv trantype.  The (TranAmt - Discount) reduces the Outstanding amount of the CashHead.TranAmt left to be applied.
This can't be > TranAmt.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """   Prompt Payment Discount given for this invoice. Only applicable for PayInv trantype.  The (TranAmt - Discount) reduces the Outstanding amount of the CashHead.TranAmt left to be applied.
This can't be > TranAmt.  """  
      self.Comment:str = obj["Comment"]
      """  Allows user to enter comments about the transaction. This is only applicable with TranType = "Adjust".  """  
      self.Reference:str = obj["Reference"]
      """  Allows user to enter a short descriptive reference for the transaction. This is useful with Miscellaneous Cash Receipts.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this CashDtl, only differs from cashead when the invoice is locked.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.GLRefType:str = obj["GLRefType"]
      """  Link to the related GLRefTyp.RefType.  """  
      self.GLRefCode:str = obj["GLRefCode"]
      """  Link to the related Code in GLRefCod.RefCode  """  
      self.DebitNote:bool = obj["DebitNote"]
      """  The internally set flag to indicate if this detail line of the Cash payment is Debit Note type.  """  
      self.DNComments:str = obj["DNComments"]
      """  Debit Note Detail Comments.  """  
      self.DNAmount:int = obj["DNAmount"]
      """  The total debit note value applied for the invoice selected for the payment during the payment transaction.  """  
      self.DocDnAmount:int = obj["DocDnAmount"]
      """  The total debit note value applied for the invoice selected for the payment during the payment transaction.  """  
      self.GainLossType:str = obj["GainLossType"]
      """  "R" for realized or "U" for unrealized Gain/Loss  """  
      self.RevalueDate:str = obj["RevalueDate"]
      """  Revaluation date that generated the gain/loss record  """  
      self.RevalueBal:int = obj["RevalueBal"]
      """  Invoice Balance at the time of revaluation  """  
      self.DocRevalueBal:int = obj["DocRevalueBal"]
      """  Document currency Invoice Balance at the time of revaluation  """  
      self.Rpt1RevalueBal:int = obj["Rpt1RevalueBal"]
      """  Reporting currency Invoice Balance at the time of revaluation  """  
      self.Rpt2RevalueBal:int = obj["Rpt2RevalueBal"]
      """  Reporting currency Invoice Balance at the time of revaluation  """  
      self.Rpt3RevalueBal:int = obj["Rpt3RevalueBal"]
      """  Reporting currency Invoice Balance at the time of revaluation  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.RefCode:str = obj["RefCode"]
      self.DocToRef:bool = obj["DocToRef"]
      self.RefToBase:bool = obj["RefToBase"]
      self.RefToBaseRate:int = obj["RefToBaseRate"]
      self.DispInvAmt:int = obj["DispInvAmt"]
      self.DispInvDiscount:int = obj["DispInvDiscount"]
      self.DispTranType:str = obj["DispTranType"]
      self.DispRef:str = obj["DispRef"]
      self.DispCustAmt:int = obj["DispCustAmt"]
      self.DispCustDiscount:int = obj["DispCustDiscount"]
      self.DispCurrencyCode:str = obj["DispCurrencyCode"]
      self.DocCurrencySymbol:str = obj["DocCurrencySymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.DocDispInvAmt:int = obj["DocDispInvAmt"]
      self.Rpt1DispInvAmt:int = obj["Rpt1DispInvAmt"]
      self.Rpt2DispInvAmt:int = obj["Rpt2DispInvAmt"]
      self.Rpt3DispInvAmt:int = obj["Rpt3DispInvAmt"]
      self.Rpt1DispInvDiscount:int = obj["Rpt1DispInvDiscount"]
      self.DocDispInvDiscount:int = obj["DocDispInvDiscount"]
      self.Rpt2DispInvDiscount:int = obj["Rpt2DispInvDiscount"]
      self.Rpt3DispInvDiscount:int = obj["Rpt3DispInvDiscount"]
      self.BOEInvoiceNum:int = obj["BOEInvoiceNum"]
      """  Bill of Exchange invoice number - Peru CSF  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvPaySchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Payment schedule company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice number  """  
      self.LineNumber:int = obj["LineNumber"]
      """  Line number  """  
      self.PayDate:str = obj["PayDate"]
      """  Pay date  """  
      self.PayAmt:int = obj["PayAmt"]
      """  Pay amount.  """  
      self.DocPayAmt:int = obj["DocPayAmt"]
      """  Doc pay amount  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch  """  
      self.CurrencySymbol:str = obj["CurrencySymbol"]
      """  CurrencySymbol  """  
      self.PassFlag:bool = obj["PassFlag"]
      """  Pass flag  """  
      self.MaxPayAmt:int = obj["MaxPayAmt"]
      """  Maximum payment amount  """  
      self.MaxDocPayAmt:int = obj["MaxDocPayAmt"]
      """  Maximum document payment amount  """  
      self.DocCurrencySymbol:str = obj["DocCurrencySymbol"]
      """  Document currency symbol.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1PayAmt:int = obj["Rpt1PayAmt"]
      self.Rpt2PayAmt:int = obj["Rpt2PayAmt"]
      self.Rpt3PayAmt:int = obj["Rpt3PayAmt"]
      self.CurrencyID:str = obj["CurrencyID"]
      self.DocCurrencyID:str = obj["DocCurrencyID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARInvPaySchedTableset:
   def __init__(self, obj):
      self.ARInvPayActivity:list[Erp_Tablesets_ARInvPayActivityRow] = obj["ARInvPayActivity"]
      self.ARInvPaySched:list[Erp_Tablesets_ARInvPaySchedRow] = obj["ARInvPaySched"]
      self.PaymentTotals:list[Erp_Tablesets_PaymentTotalsRow] = obj["PaymentTotals"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvRemindersTableset:
   def __init__(self, obj):
      self.InvcReminder:list[Erp_Tablesets_InvcReminderRow] = obj["InvcReminder"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvcDtlPackTableset:
   def __init__(self, obj):
      self.InvcDtlPack:list[Erp_Tablesets_InvcDtlPackRow] = obj["InvcDtlPack"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARInvoiceTableset:
   def __init__(self, obj):
      self.InvcHead:list[Erp_Tablesets_InvcHeadRow] = obj["InvcHead"]
      self.InvcHeadAttch:list[Erp_Tablesets_InvcHeadAttchRow] = obj["InvcHeadAttch"]
      self.AllocDeposit:list[Erp_Tablesets_AllocDepositRow] = obj["AllocDeposit"]
      self.CentralCollectionPayment:list[Erp_Tablesets_CentralCollectionPaymentRow] = obj["CentralCollectionPayment"]
      self.InvcDtl:list[Erp_Tablesets_InvcDtlRow] = obj["InvcDtl"]
      self.InvcDtlAttch:list[Erp_Tablesets_InvcDtlAttchRow] = obj["InvcDtlAttch"]
      self.InvcChrg:list[Erp_Tablesets_InvcChrgRow] = obj["InvcChrg"]
      self.InvcDeferredRev:list[Erp_Tablesets_InvcDeferredRevRow] = obj["InvcDeferredRev"]
      self.InvcDtlRASch:list[Erp_Tablesets_InvcDtlRASchRow] = obj["InvcDtlRASch"]
      self.InvcMisc:list[Erp_Tablesets_InvcMiscRow] = obj["InvcMisc"]
      self.InvcTax:list[Erp_Tablesets_InvcTaxRow] = obj["InvcTax"]
      self.InvcDtlTGLC:list[Erp_Tablesets_InvcDtlTGLCRow] = obj["InvcDtlTGLC"]
      self.InvcSched:list[Erp_Tablesets_InvcSchedRow] = obj["InvcSched"]
      self.MXInvcHeadFiscalText:list[Erp_Tablesets_MXInvcHeadFiscalTextRow] = obj["MXInvcHeadFiscalText"]
      self.MXInvcRef:list[Erp_Tablesets_MXInvcRefRow] = obj["MXInvcRef"]
      self.HedTaxSum:list[Erp_Tablesets_HedTaxSumRow] = obj["HedTaxSum"]
      self.LegalNumGenOpts:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["LegalNumGenOpts"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ARSelectedDropShipRow:
   def __init__(self, obj):
      self.BTCustID:str = obj["BTCustID"]
      self.BTCustomerName:str = obj["BTCustomerName"]
      self.Company:str = obj["Company"]
      self.CustID:str = obj["CustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.InvoicedStatus:bool = obj["InvoicedStatus"]
      self.PackSlip:str = obj["PackSlip"]
      self.PurPoint:str = obj["PurPoint"]
      self.ShipDate:str = obj["ShipDate"]
      self.ShippedStatus:bool = obj["ShippedStatus"]
      self.UnselectDropShipment:bool = obj["UnselectDropShipment"]
      self.VendorNum:int = obj["VendorNum"]
      self.VendorID:str = obj["VendorID"]
      """  VendorID  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ARUninvoicedDropShipRow:
   def __init__(self, obj):
      self.BTCustID:str = obj["BTCustID"]
      self.BTCustomerName:str = obj["BTCustomerName"]
      self.Company:str = obj["Company"]
      self.CustID:str = obj["CustID"]
      self.CustomerName:str = obj["CustomerName"]
      self.InvoicedStatus:bool = obj["InvoicedStatus"]
      self.PackSlip:str = obj["PackSlip"]
      self.PurPoint:str = obj["PurPoint"]
      self.SelectDropShipment:bool = obj["SelectDropShipment"]
      self.ShipDate:str = obj["ShipDate"]
      self.ShippedStatus:bool = obj["ShippedStatus"]
      self.VendorNum:int = obj["VendorNum"]
      self.VendorID:str = obj["VendorID"]
      """  VendorID  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_AllocDepositRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.PrePayType:int = obj["PrePayType"]
      """   0 - Prepaid Invoiced Deposit  
1 - Cash Deposit
2 - Reverse Cash Deposit  """  
      self.DepInvoiceNum:int = obj["DepInvoiceNum"]
      """  Deposit Invoice Number  """  
      self.DepGroupID:str = obj["DepGroupID"]
      """  Group ID of deposit payment  """  
      self.DepHeadNum:int = obj["DepHeadNum"]
      """  Identification of Deposit Payment  """  
      self.DepApplyDate:str = obj["DepApplyDate"]
      """  Apply Date of Deposit Invoice  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order Number  """  
      self.PrePayStatus:int = obj["PrePayStatus"]
      """   0 - Unrecognized              
1 - Partial Recognized
2 - Full Recognized  """  
      self.DocAllocAmt:int = obj["DocAllocAmt"]
      """  Allocated Amount  """  
      self.AllocAmt:int = obj["AllocAmt"]
      self.Rpt1AllocAmt:int = obj["Rpt1AllocAmt"]
      self.Rpt2AllocAmt:int = obj["Rpt2AllocAmt"]
      self.Rpt3AllocAmt:int = obj["Rpt3AllocAmt"]
      self.DocAllocBal:int = obj["DocAllocBal"]
      """  Allocated Balance  """  
      self.AllocBal:int = obj["AllocBal"]
      self.Rpt1AllocBal:int = obj["Rpt1AllocBal"]
      self.Rpt2AllocBal:int = obj["Rpt2AllocBal"]
      self.Rpt3AllocBal:int = obj["Rpt3AllocBal"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total Tax Amount of Deposit  """  
      self.TaxAmt:int = obj["TaxAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.DocAllocTaxBal:int = obj["DocAllocTaxBal"]
      """  Remaining Tax Amount of Deposit  """  
      self.AllocTaxBal:int = obj["AllocTaxBal"]
      self.Rpt1AllocTaxBal:int = obj["Rpt1AllocTaxBal"]
      self.Rpt2AllocTaxBal:int = obj["Rpt2AllocTaxBal"]
      self.Rpt3AllocTaxBal:int = obj["Rpt3AllocTaxBal"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Shipment Invoice Number for which this Deposit is allocated  """  
      self.DepCheckRef:str = obj["DepCheckRef"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch used to determine what currency to display amounts in.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      self.DocumentAmt:int = obj["DocumentAmt"]
      self.DocDocumentAmt:int = obj["DocDocumentAmt"]
      self.Rpt1DocumentAmt:int = obj["Rpt1DocumentAmt"]
      self.Rpt2DocumentAmt:int = obj["Rpt2DocumentAmt"]
      self.Rpt3DocumentAmt:int = obj["Rpt3DocumentAmt"]
      self.CustNum:int = obj["CustNum"]
      self.Reference:str = obj["Reference"]
      self.MovementNum:int = obj["MovementNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_CentralCollectionPaymentRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier  """  
      self.GroupID:str = obj["GroupID"]
      """  GroupID of CashDtl or ARPNDtl depending on the value of the Source Field  """  
      self.HeadNum:int = obj["HeadNum"]
      """  Cash Receipt or Payment Instrument Number  in the central collection company.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  InvoiceRef of CashDtl or ARPNDtl Depending on the value of the Source Field  """  
      self.Source:int = obj["Source"]
      """  Source of the data. 0 = CashDtl  1=ARPNDtl (Payment Instrument)  """  
      self.CheckRef:str = obj["CheckRef"]
      """  The customer's Check number of the receipt transaction in the central collection company or the ARPromNoteID if a Payment Instrument Payment.  """  
      self.TranType:str = obj["TranType"]
      """  Identifies the type of transaction.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction Date  in the central collection company.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.TranAmt:int = obj["TranAmt"]
      """  Amount of transaction  """  
      self.DocTranAmt:int = obj["DocTranAmt"]
      """  Document Amount of transaction  """  
      self.Rpt1TranAmt:int = obj["Rpt1TranAmt"]
      """  Reporting 1 Amount of transaction  """  
      self.Rpt2TranAmt:int = obj["Rpt2TranAmt"]
      """  Reporting 2 Amount of transaction  """  
      self.Rpt3TranAmt:int = obj["Rpt3TranAmt"]
      """  Reporting 3 Amount of transaction  """  
      self.DiscountAmt:int = obj["DiscountAmt"]
      """  Discount amount  """  
      self.DocDiscountAmt:int = obj["DocDiscountAmt"]
      """  Document Discount amount  """  
      self.Rpt1DiscountAmt:int = obj["Rpt1DiscountAmt"]
      """  Reporting 1 Discount amount  """  
      self.Rpt2DiscountAmt:int = obj["Rpt2DiscountAmt"]
      """  Reporting 2 Discount amount  """  
      self.Rpt3DiscountAmt:int = obj["Rpt3DiscountAmt"]
      """  Reporting 3 Discount amount  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  The date that the record was last changed  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """  Indicates if the record is a credit memo.  """  
      self.ApplyHeadNum:int = obj["ApplyHeadNum"]
      """  Number of the unallocated deposit payment applied in the central collection Company.  """  
      self.CColCheckRef:str = obj["CColCheckRef"]
      """  Check Reference in the central collection company.  """  
      self.ReverseRef:int = obj["ReverseRef"]
      """  Reference to cash receipt which had been reversed.  """  
      self.ReverseDate:str = obj["ReverseDate"]
      """  Date when cash receipt had been reversed  """  
      self.PIStage:str = obj["PIStage"]
      """  Payment Instrument Stage  """  
      self.PICancelDate:str = obj["PICancelDate"]
      """  Date that the payment instrument was cancel  """  
      self.AdjustmentRef:int = obj["AdjustmentRef"]
      """  Reference to cash receipt which had been adjusted in the central collection company.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.DispTranType:str = obj["DispTranType"]
      """  Identifies the type of transaction.  """  
      self.DocDspDiscountAmt:int = obj["DocDspDiscountAmt"]
      """  Document Discount amount.  """  
      self.DocDspTranAmt:int = obj["DocDspTranAmt"]
      """  Document Amount of transaction.  """  
      self.DspDiscountAmt:int = obj["DspDiscountAmt"]
      """  Discount amount.  """  
      self.DspTranAmt:int = obj["DspTranAmt"]
      """  Amount of transaction.  """  
      self.Rpt1DspTranAmt:int = obj["Rpt1DspTranAmt"]
      """  Reporting 1 Amount of transaction.  """  
      self.Rpt2DspDiscountAmt:int = obj["Rpt2DspDiscountAmt"]
      """  Reporting 2 Discount amount.  """  
      self.Rpt2DspTranAmt:int = obj["Rpt2DspTranAmt"]
      """  Reporting 2 Amount of transaction.  """  
      self.Rpt3DspDiscountAmt:int = obj["Rpt3DspDiscountAmt"]
      """  Reporting 3 Discount amount.  """  
      self.Rpt3DspTranAmt:int = obj["Rpt3DspTranAmt"]
      """  Reporting 3 Amount of transaction.  """  
      self.Rpt1DspDiscountAmt:int = obj["Rpt1DspDiscountAmt"]
      """  Reporting 1 Discount amount.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ETCAddrValidationTableset:
   def __init__(self, obj):
      self.ETCAddress:list[Erp_Tablesets_ETCAddressRow] = obj["ETCAddress"]
      self.ETCMessage:list[Erp_Tablesets_ETCMessageRow] = obj["ETCMessage"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_ETCAddressRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.City:str = obj["City"]
      """  City name  """  
      self.Country:str = obj["Country"]
      """  Country name  """  
      self.Line1:str = obj["Line1"]
      """  Address line 1  """  
      self.Line2:str = obj["Line2"]
      """  Address line 2  """  
      self.Line3:str = obj["Line3"]
      """  Address line 3  """  
      self.PostalCode:str = obj["PostalCode"]
      """  Postal or ZIP code  """  
      self.Region:str = obj["Region"]
      """  State or province name  """  
      self.AddrSource:str = obj["AddrSource"]
      """  This is an additional field that will be required to designate the type of address that is being validated (customer, plant, etc)  """  
      self.AddrSourceID:str = obj["AddrSourceID"]
      """  This is an additional field to contain an appropriate piece of data to be used with the AddrSource for display in the UI to clarify for the user what data the validated address relates to. Such as AddrSource = Customer and AddrSourceID = ?Addison?  """  
      self.UpdateAddr:bool = obj["UpdateAddr"]
      """  This is an additional field that will be set if the user has indicated that the Vantage address should be updated from the address validation results.  """  
      self.TransactionID:str = obj["TransactionID"]
      """  This value will come from Avalara ValidateResult TransactionID and identifies a unique specific request/response set. It will be used to tie the ETCValidAddress and ETCMessage rows to ETCAddress.  """  
      self.UpdateAllowed:bool = obj["UpdateAllowed"]
      """  This field will be set if by the process calling address validation to indicate whether the user should have the option to update the original address within the address validation UI.  """  
      self.RequestID:str = obj["RequestID"]
      """  Programmatically assign unique key to tie the ETCAddress table, the ETCValidAddress table and the ETCMessages table together.  """  
      self.AddressCode:str = obj["AddressCode"]
      """  Programmatically determined value used internally by the adapter. Defaults to the hash code of the Address object.  """  
      self.AddressType:str = obj["AddressType"]
      """  The type of address that was coded (PO Box, Rural Route, and so on), using the input address. This probably needs Code/desc data  Avalara will return F = Firm or company address; G = General Delivery address; H= High-rise or business complex; P = PO Box address; R = Rural route address; S = Street or residential address  """  
      self.CarrierRoute:str = obj["CarrierRoute"]
      """  The carrier route associated with the input address (USA). This probably needs Code/desc data  Avalara will return B = PO Box; C = City Delivery; G= General Delivery; H = Highway Contract; R = Rural route.  """  
      self.ValidCity:str = obj["ValidCity"]
      """  City name  """  
      self.ValidCountry:str = obj["ValidCountry"]
      """  Country name  """  
      self.County:str = obj["County"]
      """  County name  """  
      self.FipsCode:str = obj["FipsCode"]
      """  Federal Information Processing Standards Code (USA). This is a unique code representing each geographic combination of state, county, and city. The code is made up of the Federal Information Processing Code (FIPS) that uniquely identifies each state, county, and city in the U.S. See Federal Information Processing Standards (FIPS) Codes for more details. Digits 1-2 are the state code, digits 3-5 are the county code and digits 6-10 are the city code.  """  
      self.ValidLine1:str = obj["ValidLine1"]
      """  Line one of the valid address returned by the tax integration.  """  
      self.ValidLine2:str = obj["ValidLine2"]
      """  Line two of the valid address returned by the tax integration.  """  
      self.ValidLine3:str = obj["ValidLine3"]
      """  Line three of the valid address returned by the tax integration.  """  
      self.ValidLine4:str = obj["ValidLine4"]
      """  Line four of the valid address returned by the tax integration.  """  
      self.ValidPostalCode:str = obj["ValidPostalCode"]
      """  Postal code returned by the tax integration.  """  
      self.PostNet:str = obj["PostNet"]
      """  A 12-digit POSTNet barcode (USA). Digits 1-5 = ZIP code, digits 6-9 = Plus4 Code, digits 10-11 = delivery point, digit 12 = check digit  """  
      self.ValidRegion:str = obj["ValidRegion"]
      """  State or province name or abbreviation returned by the tax integration.  """  
      self.ResultCode:str = obj["ResultCode"]
      """  This needs Code/desc data.  Avalara will return a single code for each address validation request. We will include the result code in each ETCValidAddress row. Success = Operation Succeeded; Warning = Warnings occured, operation succeeded, Error = Errors occured, operation failed; Exception = Unexpected exceptions occurred, operation failed.  """  
      self.ResultSeq:int = obj["ResultSeq"]
      """  This is an additional field to set a unique sequence for each ValidMessage returned for a specific TransactionId.  """  
      self.CarrierRouteDesc:str = obj["CarrierRouteDesc"]
      """  Carrier Route description  """  
      self.AddressTypeDesc:str = obj["AddressTypeDesc"]
      """  Address type description  """  
      self.OTSCountry:str = obj["OTSCountry"]
      self.CountryNum:int = obj["CountryNum"]
      """  A  unique integer assigned by the system to new countries by the  maintenance program. This field is used as the foreign key to identify the country in other files such as Customer, or vendor. The end user should never need to know about the value of this field.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.ACWPercentage:int = obj["ACWPercentage"]
      """   Auto consume window percentage: this is a percentage to calculate the auto consume window days  that scheduling engine will take in consideration to look for available quantity to consume.
The purpose of this is to look ahead for a few days that will save more time than building the goods, so unless we get the full qty “current date” we need to use the window to look for the remaining.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_ETCMessageRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.Details:str = obj["Details"]
      self.Helplink:str = obj["Helplink"]
      """  URL to help page for this message  """  
      self.Name:str = obj["Name"]
      """  Gets the name of the message  """  
      self.RefersTo:str = obj["RefersTo"]
      """  The item the message refers to, if applicable. Used to indicate a missing or incorrect value  """  
      self.Severity:str = obj["Severity"]
      """  This probably needs Code/desc data  Avalara will return Success = Operation Succeeded; Warning = Warnings occured, operation succeeded, Error = Errors occured, operation failed; Exception = Unexpected exceptions occurred, operation failed.  """  
      self.Source:str = obj["Source"]
      """  source of the message  """  
      self.Summary:str = obj["Summary"]
      """  concise summary of the message  """  
      self.TransactionID:str = obj["TransactionID"]
      """  This value will come from Avalara ValidateResult TransactionID and identifies a unique specific request/response set. It will be used to tie the ETCMessage row to ETCAddress.  """  
      self.AddrSource:str = obj["AddrSource"]
      """  This is an additional field that will be required to designate the type of address that is being validated (customer, plant, etc)  """  
      self.AddrSourceID:str = obj["AddrSourceID"]
      """  This is an additional field to contain an appropriate piece of data to be used with the AddrSource for display in the UI to clarify for the user what data the validated address relates to. Such as AddrSource = Customer and AddrSourceID = ?Addison?  """  
      self.RequestID:str = obj["RequestID"]
      """  Programitically assigned.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_HedTaxSumRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency display switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Document reportable amount.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Document taxable amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document tax amount.  """  
      self.HedNum:int = obj["HedNum"]
      """  Order or Quote number this tax summary relates to.  """  
      self.Percent:int = obj["Percent"]
      """  Tax percent  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax amount  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax code  """  
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales Tax description  """  
      self.GroupID:str = obj["GroupID"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.RateCode:str = obj["RateCode"]
      """  Rate Code on the Header Tax Summary  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  Invoice Number of allocated Deposits  """  
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      """  Rate Code Description on the Header Tax Summary  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcChrgRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number - the invoice the finance charge was calculated for.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.FromDate:str = obj["FromDate"]
      """  From Date  """  
      self.ToDate:str = obj["ToDate"]
      """  To Date  """  
      self.ChargeAmt:int = obj["ChargeAmt"]
      """  Miscellaneous Charge Amount. Base Currency.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      """  Unique Identifier for the Finance Charges  """  
      self.ChargePercent:int = obj["ChargePercent"]
      """  The percentage that shall be applied to the invoice amount when calculating the interest.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  """  
      self.SourceInvoiceNum:int = obj["SourceInvoiceNum"]
      """  The invoice the finance charge was calculated for.  """  
      self.DocChargeAmt:int = obj["DocChargeAmt"]
      """  Miscellaneous Charge Amount. Document Currency.  """  
      self.Rpt1ChargeAmt:int = obj["Rpt1ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ChargeAmt:int = obj["Rpt2ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ChargeAmt:int = obj["Rpt3ChargeAmt"]
      """  Reporting currency value of this field  """  
      self.ReminderPreview:bool = obj["ReminderPreview"]
      """  This is a bool flag that indicates that the record was created not a as part of finance charges, but as a part of reminder letter functionality and will be used for printing only.  """  
      self.LetterNum:int = obj["LetterNum"]
      """  Reminder Letter num.  """  
      self.Manual:bool = obj["Manual"]
      """  The field specifies, whether the charge was generated by the program or entered manually in AR iNvoice Entry.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OutstandingBalance:int = obj["OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Base Currency.  """  
      self.DocOutstandingBalance:int = obj["DocOutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Document Currency.  """  
      self.Rpt1OutstandingBalance:int = obj["Rpt1OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.Rpt2OutstandingBalance:int = obj["Rpt2OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.Rpt3OutstandingBalance:int = obj["Rpt3OutstandingBalance"]
      """  Oustanding Balance at the time the finance charge was calculated.  Reporting Currency.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      self.DspChargeAmt:int = obj["DspChargeAmt"]
      self.DspDocChargeAmt:int = obj["DspDocChargeAmt"]
      self.GroupID:str = obj["GroupID"]
      """  Group ID for the invoice  """  
      self.Rpt1DspChargeAmt:int = obj["Rpt1DspChargeAmt"]
      self.Rpt2DspChargeAmt:int = obj["Rpt2DspChargeAmt"]
      self.Rpt3DspChargeAmt:int = obj["Rpt3DspChargeAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcCustTrkRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  From InvcHead.Company  """  
      self.CustNum:int = obj["CustNum"]
      """  From InvcHead.CustNum  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  From InvcHead.InvoiceNum  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  From InvcHead.InvoiceSuffix  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  From InvcHead.InvoiceDate  """  
      self.DueDate:str = obj["DueDate"]
      """  From InvcHead.DueDate  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  From InvcHead.OpenInvoice  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  From InvcHead.InvoiceType  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  From InvcHead.DocInvoiceamt  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  From InvcHead.DocInvoiceBal  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  From InvcHead.CurrencyCode  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  From InvcHead.LegalNumber  """  
      self.PONum:str = obj["PONum"]
      """  From InvcHead.PONum  """  
      self.CheckRef:str = obj["CheckRef"]
      """  From InvcHead.CheckRef  """  
      self.BillConNum:int = obj["BillConNum"]
      """  From InvcHead.BillConNum  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  From InvcHead.EntryPerson  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  From InvcHead.InvoiceHeld  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  From InvcHead.InvoiceAmt  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  From InvcHead.InvoiceBal  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  From InvcDtl.InvoiceLine  """  
      self.PartNum:str = obj["PartNum"]
      """  From InvcDtl.PartNum  """  
      self.LineDesc:str = obj["LineDesc"]
      """  From InvcDtl.LineDec  """  
      self.POLine:str = obj["POLine"]
      """  From InvcDtl.POLine  """  
      self.OrderNum:int = obj["OrderNum"]
      """  From InvcDtl.OrderNum  """  
      self.OrderLine:int = obj["OrderLine"]
      """  From InvcDtl.OrderLine  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  From InvcDt.ShipToNum  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  From InvcDtl.ShpConNum  """  
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      """  From InvcDtl.ProdCodeDescription  """  
      self.LineTotal:int = obj["LineTotal"]
      """  From InvcDtl.LineTotal  """  
      self.DocLineTotal:int = obj["DocLineTotal"]
      """  From InvcDtl.DocLineTotal  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  from InvcDtl.RevisionNum  """  
      self.XPartNum:str = obj["XPartNum"]
      """  from InvcDtl.XPartNum  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  from InvcDtl.XRevisionNum  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  Sold to customer number.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to cust id.  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For Debit Note type invoice this is the Debit Note Number assigned by the customer.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.ExtPrice:int = obj["ExtPrice"]
      self.DocExtPrice:int = obj["DocExtPrice"]
      self.Discount:int = obj["Discount"]
      self.DocDiscount:int = obj["DocDiscount"]
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      self.AdvanceBillCredit:int = obj["AdvanceBillCredit"]
      self.DocAdvanceBillCredit:int = obj["DocAdvanceBillCredit"]
      self.CreditMemo:bool = obj["CreditMemo"]
      self.CustID:str = obj["CustID"]
      """  Bill to customer ID.  """  
      self.CustName:str = obj["CustName"]
      """  Bill to customer name.  """  
      self.ShipToName:str = obj["ShipToName"]
      """  The name for the ship to location.  """  
      self.LineAmount:int = obj["LineAmount"]
      """  From InvcDtl.ExtPrice  """  
      self.DocLineAmount:int = obj["DocLineAmount"]
      """  From InvcDtl.DocExtPrice  """  
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      self.Rpt1AdvanceBillCredit:int = obj["Rpt1AdvanceBillCredit"]
      self.Rpt2AdvanceBillCredit:int = obj["Rpt2AdvanceBillCredit"]
      self.Rpt3AdvanceBillCredit:int = obj["Rpt3AdvanceBillCredit"]
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      self.Rpt1LineAmount:int = obj["Rpt1LineAmount"]
      self.Rpt2LineAmount:int = obj["Rpt2LineAmount"]
      self.Rpt3LineAmount:int = obj["Rpt3LineAmount"]
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  From InvcDtl.ShipToCustNum  """  
      self.ContractRef:str = obj["ContractRef"]
      self.AllocDepBal:int = obj["AllocDepBal"]
      self.DocAllocDepBal:int = obj["DocAllocDepBal"]
      self.Rpt1AllocDepBal:int = obj["Rpt1AllocDepBal"]
      self.Rpt2AllocDepBal:int = obj["Rpt2AllocDepBal"]
      self.Rpt3AllocDepBal:int = obj["Rpt3AllocDepBal"]
      self.TaxAmt:int = obj["TaxAmt"]
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.AllocDepTaxBal:int = obj["AllocDepTaxBal"]
      self.DocAllocDepTaxBal:int = obj["DocAllocDepTaxBal"]
      self.Rpt1AllocDepTaxBal:int = obj["Rpt1AllocDepTaxBal"]
      self.Rpt2AllocDepTaxBal:int = obj["Rpt2AllocDepTaxBal"]
      self.Rpt3AllocDepTaxBal:int = obj["Rpt3AllocDepTaxBal"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcCustTrkTableset:
   def __init__(self, obj):
      self.InvcCustTrk:list[Erp_Tablesets_InvcCustTrkRow] = obj["InvcCustTrk"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_InvcDeferredRevRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.Revenue:int = obj["Revenue"]
      self.Recognized:int = obj["Recognized"]
      self.Unrecognized:int = obj["Unrecognized"]
      self.Distributed:int = obj["Distributed"]
      self.Remaining:int = obj["Remaining"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.GroupID:str = obj["GroupID"]
      self.DocRevenue:int = obj["DocRevenue"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.Rpt1Revenue:int = obj["Rpt1Revenue"]
      self.Rpt2Revenue:int = obj["Rpt2Revenue"]
      self.Rpt3Revenue:int = obj["Rpt3Revenue"]
      self.DocDistributed:int = obj["DocDistributed"]
      self.Rpt1Distributed:int = obj["Rpt1Distributed"]
      self.Rpt2Distributed:int = obj["Rpt2Distributed"]
      self.Rpt3Distributed:int = obj["Rpt3Distributed"]
      self.DocRecognized:int = obj["DocRecognized"]
      self.Rpt1Recognized:int = obj["Rpt1Recognized"]
      self.Rpt2Recognized:int = obj["Rpt2Recognized"]
      self.Rpt3Recognized:int = obj["Rpt3Recognized"]
      self.DocRemaining:int = obj["DocRemaining"]
      self.Rpt1Remaining:int = obj["Rpt1Remaining"]
      self.Rpt2Remaining:int = obj["Rpt2Remaining"]
      self.Rpt3Remaining:int = obj["Rpt3Remaining"]
      self.Rpt1Unrecognized:int = obj["Rpt1Unrecognized"]
      self.Rpt2Unrecognized:int = obj["Rpt2Unrecognized"]
      self.Rpt3Unrecognized:int = obj["Rpt3Unrecognized"]
      self.DocUnrecognized:int = obj["DocUnrecognized"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlPackRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records. The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this detail record is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  The packing slip line number that is being invoiced.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order number.  This is not maintainable by the user.  The system duplicates it from the InvcHead.OrderNum.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  The associated sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Contains the release number of the order line item that is being invoiced.  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Number. This field should be set according to the linked Shipment Line.  """  
      self.OurOrderQty:int = obj["OurOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.OurReqQty.  """  
      self.OurShipQty:int = obj["OurShipQty"]
      """  Our Quantity Shipped/billed.  Can be defaulted from ShipDtl.OurShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.SellingOrderQty:int = obj["SellingOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.SellingReqQty.  """  
      self.SellingShipQty:int = obj["SellingShipQty"]
      """  Selling Quantity Shipped/billed.  Can be defaulted from ShipDtl.SellingShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.MXSellingShipQty:int = obj["MXSellingShipQty"]
      """  MXSellingShipQty  """  
      self.MtlUnitCost:int = obj["MtlUnitCost"]
      """  Material Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.LbrUnitCost:int = obj["LbrUnitCost"]
      """  Labor Unit Cost. The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.BurUnitCost:int = obj["BurUnitCost"]
      """  Burden Unit Cost. The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS). It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.SubUnitCost:int = obj["SubUnitCost"]
      """  Subcontract Unit Cost.  If shipped from inventory then it is zero. (Subcontract cost is combined with material cost on part master) The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.MtlBurUnitCost:int = obj["MtlBurUnitCost"]
      """  Material Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.JCMtlUnitCost:int = obj["JCMtlUnitCost"]
      """  Job Closing Material Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCLbrUnitCost:int = obj["JCLbrUnitCost"]
      """  Job Closing Labor Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCBurUnitCost:int = obj["JCBurUnitCost"]
      """  Job Closing Burden Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCSubUnitCost:int = obj["JCSubUnitCost"]
      """  Job Closing Subcontract Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCMtlBurUnitCost:int = obj["JCMtlBurUnitCost"]
      """  Job Closing Material Burden Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlRASchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.AmortSeq:int = obj["AmortSeq"]
      """  Internal identifier used to keep the records unique.  Each invoice line that is amortized will have a record for each period in which an amortization occurs.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The id of the fiscal calendar this record is related to.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  The fiscal year.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  The fiscal year suffix.  Allows for additional breakdown/definition of fiscal years, for example, by quarters.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  The fiscal period number in the fiscal year.  """  
      self.AmortDate:str = obj["AmortDate"]
      """  This is the date when the percentage of revenue will be recognized.  """  
      self.AmortPercent:int = obj["AmortPercent"]
      """  This is the percentage of total revenue to be recognized.  """  
      self.AmortAmt:int = obj["AmortAmt"]
      """  Amortization Amount of the invoice.  """  
      self.Rpt1AmortAmt:int = obj["Rpt1AmortAmt"]
      """  The amount to be recognized in the first reporting currency.  """  
      self.Rpt2AmortAmt:int = obj["Rpt2AmortAmt"]
      """  The amortization amount in the reporting currency.  """  
      self.Rpt3AmortAmt:int = obj["Rpt3AmortAmt"]
      """  The amortization in reporting currency.  """  
      self.DocAmortAmount:int = obj["DocAmortAmount"]
      """  The amortization amount in document currency.  """  
      self.Hold:bool = obj["Hold"]
      """  Indicates if this amortization period is on hold.  """  
      self.HoldReasonCode:str = obj["HoldReasonCode"]
      """  Descriptive code assigned by user which uniquely identifies a reason code master record and identifies why a amortization period is on hold.  """  
      self.HoldText:str = obj["HoldText"]
      """  Descriptive text further explaining why an amortization period is on hold.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if the revenue has been recognized for this line.  """  
      self.PostedDate:str = obj["PostedDate"]
      """  The date when the revenue was recognized.  """  
      self.ContractNum:int = obj["ContractNum"]
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgAmortSeq:int = obj["OrgAmortSeq"]
      """  Internal identifier used to Keep the records unique. Each invoice line that is amortized will have a record for each period in which an amortization occurs.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CustID:str = obj["CustID"]
      self.DocAmortAmt:int = obj["DocAmortAmt"]
      self.DocDspAmortAmt:int = obj["DocDspAmortAmt"]
      self.DocDspRevenueAmt:int = obj["DocDspRevenueAmt"]
      self.DocRevenueAmt:int = obj["DocRevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in document currency.  """  
      self.DspAmortAmt:int = obj["DspAmortAmt"]
      self.DspRevenueAmt:int = obj["DspRevenueAmt"]
      self.GroupID:str = obj["GroupID"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice Date is coming from the InvcHead.  """  
      self.ReadyToPost:bool = obj["ReadyToPost"]
      self.RevenueAmt:int = obj["RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount).  """  
      self.Rpt1DspAmortAmt:int = obj["Rpt1DspAmortAmt"]
      self.Rpt1DspRevenueAmt:int = obj["Rpt1DspRevenueAmt"]
      self.Rpt1RevenueAmt:int = obj["Rpt1RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Rpt2DspAmortAmt:int = obj["Rpt2DspAmortAmt"]
      self.Rpt2DspRevenueAmt:int = obj["Rpt2DspRevenueAmt"]
      self.Rpt2RevenueAmt:int = obj["Rpt2RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Rpt3DspAmortAmt:int = obj["Rpt3DspAmortAmt"]
      self.Rpt3DspRevenueAmt:int = obj["Rpt3DspRevenueAmt"]
      self.Rpt3RevenueAmt:int = obj["Rpt3RevenueAmt"]
      """  The full revenue amount taken from the invoice line (ExtPrince - Discount) in reporting currency.  """  
      self.Selected:bool = obj["Selected"]
      """  Flag to indicate if the record has been selected for the Hold/Unhold Amortization Periods process.  """  
      self.SeqDuration:str = obj["SeqDuration"]
      """  Displays the Amortization Seq in relation to the total Duration periods (i.e. AmortSeq/Duration).  """  
      self.TotalAmortAmt:int = obj["TotalAmortAmt"]
      """  Total Amortization Amount of all the periods displayed on the grid in base currency.  """  
      self.IsLocked:bool = obj["IsLocked"]
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an Schedule line is already in review journal or in posting process.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table.  The system generates this number during entry of new detail records.  The system determines next available number by finding the last InvcDtl record for the Invoice and adding 1 to it.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT" and line for service calls  "CALL".  """  
      self.ContractNum:int = obj["ContractNum"]
      """  Contract Number of the related Service Contract when the LineType field is "CONTRACT"  """  
      self.XPartNum:str = obj["XPartNum"]
      """  An optional field that is used if the customer has a different Part number than the internal part number.  This field is defaulted from the OrderDtl or ShipDtl files.  """  
      self.XRevisionNum:str = obj["XRevisionNum"]
      """  Optional field that contains the customers revision.  Default from the ShipDtl.XRevisionNum for shipment lines or from OrderDtl.XRevisionNum, otherwise left blank.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number used to identify line item part.  This would be used as "Our" part number if there is a difference between us and the customers part numbering scheme.  Defaults from the OrderDtl.PartNum or the ShipDtl.PartNum.  """  
      self.LineDesc:str = obj["LineDesc"]
      """  Description of the line item.  Defaults from ShipDtl.LineDesc, OrderDtl.LineDesc or Part.PartDescription.  """  
      self.IUM:str = obj["IUM"]
      """  Unit Of Measure.  Defaulted from ShipDtl.IUM, OrderRel.IUM or Part.IUM.  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Our Current Revision Number for this Part.  """  
      self.POLine:str = obj["POLine"]
      """  Contains the line reference of the item on the customers PO. This is for reference and printing purposes.  Defaults from the OrderDtl.POLine.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this customer is exempt from sales tax for this line item.  If field is non-blank it is considered exempt.  This code is totally user definable and no validation is required.  This field will be printed on the Tax report if this item is reportable.  When the value is changed from blank to non-blank or vice versa tax calculation logic kicks in to calculate the sales tax info in the InvcTax file.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this record.  Defaults from the OrderDtl if related to an Order or from the Part Master.  """  
      self.Commissionable:bool = obj["Commissionable"]
      """   Indicates if this line is commissionable for the related sales rep's.
Defaults from the OrderDtl.  Note: "Deposit" invoice is always No.  """  
      self.DiscountPercent:int = obj["DiscountPercent"]
      """   Unit price discount percent.  User can enter a percentage and the system calculates the  discount amount.
NOT MAINTAINABLE & zero if Advance Bill.  """  
      self.UnitPrice:int = obj["UnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocUnitPrice:int = obj["DocUnitPrice"]
      """  Unit Price.  Can be defaulted from the OrderDtl.UnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.PricePerCode:str = obj["PricePerCode"]
      """   Indicates the pricing per quantity.  It can be "E" = per each,
"C" = per hundred,  "M" = per thousand.  Used to calculate the extended unit price for the line item.  The logic is to divide the InvcDtl.ShipQty by the appropriate "per" value and then multiply by unit price.  Use the OrderDtl.PricePerCode as default if referenced to an order else use Part.PricePerCode as a default.  If Part record does not exist then default as "E".  """  
      self.OurOrderQty:int = obj["OurOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.OurReqQty.  """  
      self.ExtPrice:int = obj["ExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocExtPrice:int = obj["DocExtPrice"]
      """  Extended Price for the invoice line item.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.Discount:int = obj["Discount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocDiscount:int = obj["DocDiscount"]
      """   A flat discount amount for the line item.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * UnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, UnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  Contains the foreign key to the ProdGrup file.  Can be blank or must be valid.  Defaults from the OrderDtl or Part file.  """  
      self.OurShipQty:int = obj["OurShipQty"]
      """  Our Quantity Shipped/billed.  Can be defaulted from ShipDtl.OurShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.PackNum:int = obj["PackNum"]
      """  Packing slip number that this detail record is linked with.  """  
      self.PackLine:int = obj["PackLine"]
      """  The packing slip line number that is being invoiced.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order number.  This is not maintainable by the user.  The system duplicates it from the InvcHead.OrderNum.  """  
      self.OrderLine:int = obj["OrderLine"]
      """  The associated sales order line number.  """  
      self.OrderRelNum:int = obj["OrderRelNum"]
      """  Contains the release number of the order line item that is being invoiced.  """  
      self.ShipToCustNum:int = obj["ShipToCustNum"]
      """  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  """  
      self.ShipToNum:str = obj["ShipToNum"]
      """  Customer Ship To ID for the item.  Defaults from the Customer, OrderRel or ShipDtl records.  If invoice details reference only one ship to then the ship to info is printed as heading info. otherwise a "See Below" message is printed and the Ship To info is printed as part of the invoice detail body.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  Ship date of the invoice line item.  Defaults from the ShipHead or from the invoice date when not referencing a packing slip.  When printed on the invoice it is printed as part of the heading if only one date exists else it is printed as part of the detail line.  """  
      self.ShipViaCode:str = obj["ShipViaCode"]
      """  ShipVia for the invoice detail lines.  Contains the Foreign key to the SHIPVIA master file. Can be left blank or must be valid.  Default from the OrderRel, ShipHead, Customer or ShipTo.  If invoice contains only a single ship via then it is printed as part of the heading; otherwise, it prints as part of the line item detail.  """  
      self.AdvanceBillCredit:int = obj["AdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.DocAdvanceBillCredit:int = obj["DocAdvanceBillCredit"]
      """  The amount this line item that is reduced by due to prior advanced billings.  This is only valid for "Shipment" or Miscellaneous" types.  It is defaulted from the OrderDtl.AdvanceBillBal.  This value reduces the OrderDtl.AdvanceBillBal.  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal number that is used to link the invoice to the Customer master file.  This is not maintainable, it is duplicated from the InvcHead.CustNum field.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to enter comments about the invoice line item.  These are printed on the invoice.  When invoice is referenced to a sales order line then this is defaulted from OrderDtl.InvoiceComment.  """  
      self.ShpConNum:int = obj["ShpConNum"]
      """  Contains the key value for the shipping contact in the CUSTCNT table.  Can be blank or must be valid in the CUSTCNT table.  Use the Customer.PrimSCon as a default or from OrderRel record.  """  
      self.MtlUnitCost:int = obj["MtlUnitCost"]
      """  Material Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.LbrUnitCost:int = obj["LbrUnitCost"]
      """  Labor Unit Cost. The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.BurUnitCost:int = obj["BurUnitCost"]
      """  Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced. If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.SubUnitCost:int = obj["SubUnitCost"]
      """  Subcontract Unit Cost.  If shipped from inventory then it is zero. (Subcontract cost is combined with material cost on part master) The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process. Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.MtlBurUnitCost:int = obj["MtlBurUnitCost"]
      """  Material Burden Unit Cost.  The cost is initially captured on the PartTran record for the shipments (MFG-CUS, STK-CUS).  It is duplicated from the PartTran when invoiced.  If shipped from inventory then it is the cost captured from the part master at time of shipment.  If shipped from job it is calculated during the Calculate WIP/COS period end process.  Note: the Calculate WIP/COS will also update this cost for invoiced job shipments which had been invoiced prior to having the costs calculated.  """  
      self.COSPostingReqd:bool = obj["COSPostingReqd"]
      """  Answers the question, "Does this InvcDtl need to have cost of sales posted to G/L?"  If the Manufacturing System is not using a A/R clearing account (XASyst.ARClearingDiv = "") then the costs were already posted to the Cost Of Sales account by the COS/WIP procedure (JCP80.W), so there are no costs to move.  """  
      self.COSPosted:bool = obj["COSPosted"]
      """   If the amount of this InvcDtl was posted to the A/R clearing account (COSPostingReq = Yes), then at sometime the amount needs to be moved to the COS account.   When the costs are moved, this flag is set to Yes.
When a product is shipped it's costs are put in A/R Clearing.  When it's invoiced the costs are ready to be moved to COS.  The Capture WIP/COS Activity procedure (JCP80.W) moves these costs.  """  
      self.ContractCode:str = obj["ContractCode"]
      """  A unique code that identifies the Service Contract when the Line Type is "CONTRACT"  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallCode:str = obj["CallCode"]
      """  A unique code that identifies the type of service call.  Link to GL accounts when LineType = "CALL"  """  
      self.RMANum:int = obj["RMANum"]
      """   The related RMA number. Note: This only applies to Credit Memos.
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.RMALine:int = obj["RMALine"]
      """   The related RMA Line number.  This along with the RMANum provides the foreign key to the related RMADtl record.
(See InvcDtl.RMANum)  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  A Cod which uniquely identfies SalesCat record. Can't be blank.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """   Fiscal year that clearing/cos entry was posted to in G/L.
Note: The Fiscal Year, Period, Journal Code, JournalNum pertain only to records which were used to post to the ARClearing/COS. This condition is indicated if  COSPostingReqd = Yes.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """   Fiscal period that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """   Journal Code of the related GLJrnDtl.
Note: This is set as the Inventory Journal code defined in the inventory configuration options.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal # that entry was posted to.
Note: applicable only when posted to G/L.  """  
      self.SellingOrderQty:int = obj["SellingOrderQty"]
      """  The planned order release quantity.  This is not maintainable.  If and only if an order is referenced then it is set equal to the OrderRel.SellingReqQty.  """  
      self.SellingShipQty:int = obj["SellingShipQty"]
      """  Selling Quantity Shipped/billed.  Can be defaulted from ShipDtl.SellingShipQty.  Not maintainable & Zero for ProgressBill.  """  
      self.SalesUM:str = obj["SalesUM"]
      """  Selling Unit Of Measure.  Defaulted from ShipDtl.SUM, OrderDtl.SUM or Part.SUM.  """  
      self.SellingFactor:int = obj["SellingFactor"]
      """   This value is used to convert quantity when there is a difference in the customers unit of measure and how it is stocked in inventory. Example is sold in pounds, stocked in sheets.

Formula: Inventory Qty * Conversion Factor = Selling Qty.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project Id that links the invoice detail  to the Project table.  """  
      self.MilestoneID:str = obj["MilestoneID"]
      """  Milestone id that links the invoice detail  to the ProjectMilestone.  """  
      self.ListPrice:int = obj["ListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied.  Will default from the OrderDtl.ListPrice.  """  
      self.DocListPrice:int = obj["DocListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocListPrice.  """  
      self.OrdBasedPrice:int = obj["OrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied.  Will default from the OrderDtl.OrdBasedPrice.  """  
      self.DocOrdBasedPrice:int = obj["DocOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocOrdBasedPrice.  """  
      self.AdvGainLoss:int = obj["AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.SellingFactorDirection:str = obj["SellingFactorDirection"]
      """  Indicates how Factor is used in calculations.  If M (multiply), the Factor is multiplied, if  D (divide) the factor is divided.  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Sales representative commission rate.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Sales representative commission rate.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Sales representative commission rate.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Sales representative commission rate.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Sales representative commission rate.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Sales representative commission percentage.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Sales representative commission percentage.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Sales representative commission percentage.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Sales representative commission percentage.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Sales representative commission percentage.  """  
      self.BTCustNum:int = obj["BTCustNum"]
      """  Bill To Customer Number used for consolidated invoices  """  
      self.JCMtlUnitCost:int = obj["JCMtlUnitCost"]
      """  Job Closing Material Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCLbrUnitCost:int = obj["JCLbrUnitCost"]
      """  Job Closing Labor Unit Cost. The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCBurUnitCost:int = obj["JCBurUnitCost"]
      """  Job Closing Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCSubUnitCost:int = obj["JCSubUnitCost"]
      """  Job Closing Subcontract Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.JCMtlBurUnitCost:int = obj["JCMtlBurUnitCost"]
      """  Job Closing Material Burden Unit Cost.  The cost is captured on the final Job Assembley. It is  duplicated from the JobAsmbl when the job is closed.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this invoice line.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AR invoice line.  """  
      self.OverrideReverseCharge:bool = obj["OverrideReverseCharge"]
      """  Indicates if the user overrides the Reverse Charge Method.  """  
      self.RevChargeApplied:bool = obj["RevChargeApplied"]
      """  Indicates if Reverse Charge tax line has been applied.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the InvcTax records tied to this line are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the line before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.Rpt1AdvanceBillCredit:int = obj["Rpt1AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2AdvanceBillCredit:int = obj["Rpt2AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3AdvanceBillCredit:int = obj["Rpt3AdvanceBillCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1Discount:int = obj["Rpt1Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt2Discount:int = obj["Rpt2Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt3Discount:int = obj["Rpt3Discount"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExtPrice:int = obj["Rpt1ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtPrice:int = obj["Rpt2ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtPrice:int = obj["Rpt3ExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1ListPrice:int = obj["Rpt1ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2ListPrice:int = obj["Rpt2ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3ListPrice:int = obj["Rpt3ListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1OrdBasedPrice:int = obj["Rpt1OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2OrdBasedPrice:int = obj["Rpt2OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3OrdBasedPrice:int = obj["Rpt3OrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitPrice:int = obj["Rpt1UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitPrice:int = obj["Rpt2UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitPrice:int = obj["Rpt3UnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1AdvGainLoss:int = obj["Rpt1AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2AdvGainLoss:int = obj["Rpt2AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3AdvGainLoss:int = obj["Rpt3AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.UseOTS:bool = obj["UseOTS"]
      """   Indicates if the One Time Shipto information is to be used.
Note: This can only be true when if the OTSName is not blank. 
UI disables this when Customer.AllowQTS = False,  """  
      self.OTSName:str = obj["OTSName"]
      """  One Time Shipto Name of the ShipTo.  """  
      self.OTSAddress1:str = obj["OTSAddress1"]
      """  One Time Shipto first line of the ShipTo address.  """  
      self.OTSAddress2:str = obj["OTSAddress2"]
      """  One Time Shipto  second line of the ShipTo address.  """  
      self.OTSAddress3:str = obj["OTSAddress3"]
      """  One Time Shipto  third line of the ShipTo address.  """  
      self.OTSCity:str = obj["OTSCity"]
      """  City portion of the One Time Shipto  address.  """  
      self.OTSState:str = obj["OTSState"]
      """  The state or province portion of the One Time Shipto  address.  """  
      self.OTSZIP:str = obj["OTSZIP"]
      """  The zip or postal code portion of the One Time ShipTo  address.  """  
      self.OTSResaleID:str = obj["OTSResaleID"]
      """  The State Tax Identification Number of the One Time Shipto.  """  
      self.OTSTaxRegionCode:str = obj["OTSTaxRegionCode"]
      """  Contains the TaxRgn.TaxRegionCode value of the One Time ShipTo tax region for purposes of Sales Tax calculations.  """  
      self.OTSContact:str = obj["OTSContact"]
      """  One Time Ship To Contact Name  """  
      self.OTSFaxNum:str = obj["OTSFaxNum"]
      """  Fax number for the One Time ShipTo.  """  
      self.OTSPhoneNum:str = obj["OTSPhoneNum"]
      """  Phone number for the One Time ShipTo  """  
      self.OTSCountryNum:int = obj["OTSCountryNum"]
      """  One Time Shipping adress country Number.  """  
      self.Plant:str = obj["Plant"]
      """  Value is copied from PartTran for PE  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  value is copied from PartTran for PE  """  
      self.CallLine:int = obj["CallLine"]
      """  value is copied from PartTran for PE  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  Drop Shipment Pack Line  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Drop shipment Packing Slip.  """  
      self.FinChargeCode:str = obj["FinChargeCode"]
      """  FK to the Finance Charges table  """  
      self.ABTUID:str = obj["ABTUID"]
      """  Reference to the ABT, it is GUID, used in PostingEngine  """  
      self.InUnitPrice:int = obj["InUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.DocInUnitPrice:int = obj["DocInUnitPrice"]
      """  Unit Price including taxes.  Can be defaulted from the OrderDtl.InUnitPrice.  Always zero and not maintainable if this is a progress billing type of invoice.  """  
      self.InExtPrice:int = obj["InExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.DocInExtPrice:int = obj["DocInExtPrice"]
      """  Extended Price for the invoice line item including taxes.  If not a ProgressBill or "Deposit" invoice then it is not maintainable and is calculated as the (ShipQty/PricePer) * UnitPrice.  If it is a ProgressBill or "Deposit Invoice"  then the ShipQty and UnitPrice fields are zero and the user is allowed entry to this field.  """  
      self.InDiscount:int = obj["InDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.DocInDiscount:int = obj["DocInDiscount"]
      """   A flat discount amount for the line item including taxes.  It can be zero.  This is calculated using the DiscountPercent * (ShipQty * InUnitPrice)).  This field can also be directly updated by the user, however it is refreshed whenever the DiscountPercent, InUnitPrice or ShipQty fields are changed.  Discount CANNOT EXCEED THE EXTENDED LINE AMOUNT.  Note a discount entered here reduces the "net" sale amount, while miscellaneous amounts are not.
NOT MAINTAINABLE & Zero if ProgressBill.  """  
      self.InTotalMiscChrg:int = obj["InTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.DocInTotalMiscChrg:int = obj["DocInTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line (includes taxes).  """  
      self.InListPrice:int = obj["InListPrice"]
      """  This is the unit price returned by the price list before quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InListPrice.  """  
      self.DocInListPrice:int = obj["DocInListPrice"]
      """  This is the list price in customer currency.  Will default from the OrderDtl.DocInListPrice.  """  
      self.InOrdBasedPrice:int = obj["InOrdBasedPrice"]
      """  This is the unit price after quantity based or order value based discounts are applied (includes taxes).  Will default from the OrderDtl.InOrdBasedPrice.  """  
      self.DocInOrdBasedPrice:int = obj["DocInOrdBasedPrice"]
      """  This is the order based price in customer currency.  Will default from the OrderDtl.DocInOrdBasedPrice.  """  
      self.Rpt1InDiscount:int = obj["Rpt1InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt2InDiscount:int = obj["Rpt2InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt3InDiscount:int = obj["Rpt3InDiscount"]
      """  Reporting currency value of this field  """  
      self.Rpt1InExtPrice:int = obj["Rpt1InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtPrice:int = obj["Rpt2InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtPrice:int = obj["Rpt3InExtPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InListPrice:int = obj["Rpt1InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InListPrice:int = obj["Rpt2InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InListPrice:int = obj["Rpt3InListPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InOrdBasedPrice:int = obj["Rpt1InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InOrdBasedPrice:int = obj["Rpt2InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InOrdBasedPrice:int = obj["Rpt3InOrdBasedPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt1InTotalMiscChrg:int = obj["Rpt1InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2InTotalMiscChrg:int = obj["Rpt2InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3InTotalMiscChrg:int = obj["Rpt3InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1InUnitPrice:int = obj["Rpt1InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2InUnitPrice:int = obj["Rpt2InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3InUnitPrice:int = obj["Rpt3InUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the Invoice Detail was created by the Correction (Reversing) logic.  """  
      self.AssetNum:str = obj["AssetNum"]
      """  Asset number of the linked Asset Disposal transaction.  """  
      self.DisposalNum:int = obj["DisposalNum"]
      """  Unique number to identify the linked Asset Disposal transaction.  """  
      self.PBLineType:str = obj["PBLineType"]
      """   Project Billing transactuion type with following options:
MWA = Measured Work, 
LBD = Employee Labor (Direct Labor), 
LBC = Contract Labor, 
MTL = Material, 
SUB = Subcontract, 
MSC = Other,
RET = Retention, 
FLBR = Fee Labor
FMTL = Fee Material,
FSUB = Fee Subcontract, 
FMSC = Fee ODC,
FPRJ = Fee of total project,
FRET = Fee retention,
BDN  = Burden,
CEIL = Reduce by Ceiling,
CLFR = Close ? Fee retention,
CLPR = Close ? Project Retention (CP)
CLSR = Close Billing schedule - Reverse retention
CLSA = Close Project ? Unassigned activities  """  
      self.InvoiceLineRef:int = obj["InvoiceLineRef"]
      """  Invoice line reference  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """  Invoice Number Reference  """  
      self.LotNum:str = obj["LotNum"]
      """  Lot Number.  This field should be set according to the linked Shipment Line.  """  
      self.PBInvoiceLine:int = obj["PBInvoiceLine"]
      """  Reference to the draft invoice line created in Invoice Preparation  """  
      self.RAID:int = obj["RAID"]
      """  Contains the value of the AC_RAHead.RAID client accommodation.  """  
      self.RADtlID:int = obj["RADtlID"]
      """  Contains the value of the AC_RADtl.RADtlID client detail accommodation.  """  
      self.DeferredRev:bool = obj["DeferredRev"]
      """  Indicates if revenue is deferred for contracts assigned to this group.  """  
      self.RACode:str = obj["RACode"]
      """  Revenue Amortization Code.  """  
      self.DefRevStart:str = obj["DefRevStart"]
      """  Starting date the revenue is deferred.  """  
      self.ChargeDefRev:bool = obj["ChargeDefRev"]
      """  When Yes the decision to defer revenue on an invoice line was made after the invoice was posted and the deferred revenue account has not yet been charged.  This flag is used internally to determine whether or not a journal clearing the sales and charging the deferrred revenue account needs to be created.  """  
      self.RenewalNbr:int = obj["RenewalNbr"]
      """  Contract renewal number. If the value is zero then the contract is not for a renewal.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DefRevPosted:bool = obj["DefRevPosted"]
      """  DefRevPosted  """  
      self.LinkedInvcUnitPrice:int = obj["LinkedInvcUnitPrice"]
      """  Unit price of Invoice linked to Bill of Exchange in original currency.  """  
      self.DspWithholdAmt:int = obj["DspWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.DocDspWithholdAmt:int = obj["DocDspWithholdAmt"]
      """  Withholding Tax Amount in document currency  """  
      self.Rpt1DspWithholdAmt:int = obj["Rpt1DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt2DspWithholdAmt:int = obj["Rpt2DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.Rpt3DspWithholdAmt:int = obj["Rpt3DspWithholdAmt"]
      """  Withholding tax amount in reporting currency  """  
      self.LinkedCurrencyCode:str = obj["LinkedCurrencyCode"]
      """  Currency code from linked Invoice Header  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.PEBOEHeadNum:int = obj["PEBOEHeadNum"]
      """  PEBOEHeadNum  """  
      self.MXSellingShipQty:int = obj["MXSellingShipQty"]
      """  MXSellingShipQty  """  
      self.MXUnitPrice:int = obj["MXUnitPrice"]
      """  MXUnitPrice  """  
      self.DocMXUnitPrice:int = obj["DocMXUnitPrice"]
      """  DocMXUnitPrice  """  
      self.Rpt1MXUnitPrice:int = obj["Rpt1MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt2MXUnitPrice:int = obj["Rpt2MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.Rpt3MXUnitPrice:int = obj["Rpt3MXUnitPrice"]
      """  Reporting currency value of this field  """  
      self.CustCostCenter:str = obj["CustCostCenter"]
      """  CustCostCenter  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DefRevEndDate:str = obj["DefRevEndDate"]
      """  DefRevEndDate  """  
      self.EntityUseCode:str = obj["EntityUseCode"]
      """  EntityUseCode  """  
      self.Reclassified:bool = obj["Reclassified"]
      """  Indicates tha this invoice Line was reclassified.  """  
      self.PartiallyDefer:bool = obj["PartiallyDefer"]
      """  Enables the user the ability to override the Percent or Amount of revenue to be deferred  """  
      self.DeferredPercent:int = obj["DeferredPercent"]
      """  Percentage of revenue to be deferred for this line item  """  
      self.Reclass:bool = obj["Reclass"]
      """  Enables the user the ability tp reclassify deferred revenue and select a reclassification code and reason code.  """  
      self.DeferredOnly:bool = obj["DeferredOnly"]
      """  Defines if the reclassification posting will only reclass the deferred revenue, or if the recognized revenue will be reclassed as well  """  
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      """  Reclassification Code. This field will be required if Reclass is checked.  """  
      self.ReclassReasonCode:str = obj["ReclassReasonCode"]
      """  Reason Code for reclassification from Reason Code Maintanance that have type 'Deferred Revenue'. This field will be required if reclass is checked.  """  
      self.ReclassComments:str = obj["ReclassComments"]
      """  Internal comments for reclassification entered by the user.  """  
      self.DeferredRevAmt:int = obj["DeferredRevAmt"]
      """  Deferred Revenue Amount in base currency  """  
      self.DocDeferredRevAmt:int = obj["DocDeferredRevAmt"]
      """  Deferred Revenue Amount in document currency  """  
      self.Rpt1DeferredRevAmt:int = obj["Rpt1DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt2DeferredRevAmt:int = obj["Rpt2DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.Rpt3DeferredRevAmt:int = obj["Rpt3DeferredRevAmt"]
      """  Reporting currency value of Deferred Revenue Amount  """  
      self.ChargeReclass:bool = obj["ChargeReclass"]
      """  ChargeReclass  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.DropShipPONum:int = obj["DropShipPONum"]
      """  DropShipPONum  """  
      self.DocInAdvanceBillCredit:int = obj["DocInAdvanceBillCredit"]
      """  DocInAdvanceBillCredit  """  
      self.InAdvanceBillCredit:int = obj["InAdvanceBillCredit"]
      """  InAdvanceBillCredit  """  
      self.Rpt1InAdvanceBillCredit:int = obj["Rpt1InAdvanceBillCredit"]
      """  Rpt1InAdvanceBillCredit  """  
      self.Rpt2InAdvanceBillCredit:int = obj["Rpt2InAdvanceBillCredit"]
      """  Rpt2InAdvanceBillCredit  """  
      self.Rpt3InAdvanceBillCredit:int = obj["Rpt3InAdvanceBillCredit"]
      """  Rpt3InAdvanceBillCredit  """  
      self.MYIndustryCode:str = obj["MYIndustryCode"]
      """  MYIndustryCode  """  
      self.DockingStation:str = obj["DockingStation"]
      """  The dockingstation of the shipto address.  For future use.  """  
      self.ConsolidateLines:bool = obj["ConsolidateLines"]
      """  ConsolidateLines  """  
      self.MXCustomsDuty:str = obj["MXCustomsDuty"]
      """  MXCustomsDuty  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this line item detail record is associated with.  """  
      self.QuoteLine:int = obj["QuoteLine"]
      """  Quote Line number from which this invoice line was created from.  """  
      self.EpicorFSA:bool = obj["EpicorFSA"]
      """  True if transaction is related to Epicor FSA  """  
      self.MXCustomsUMFrom:str = obj["MXCustomsUMFrom"]
      """  MXCustomsUMFrom  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PETaxExempt:str = obj["PETaxExempt"]
      """  PETaxExempt  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the Invoicing Company.  """  
      self.CColOrderLine:int = obj["CColOrderLine"]
      """  Order number line the Invoicing Company.  """  
      self.CColOrderRel:int = obj["CColOrderRel"]
      """  Order number release the Invoicing Company.  """  
      self.CColInvoiceLineRef:int = obj["CColInvoiceLineRef"]
      """  Invoice Line reference on the Invoicing Company.  """  
      self.CColPackNum:int = obj["CColPackNum"]
      """  Packing slip number on the Invoicing Company.  """  
      self.CColPackLine:int = obj["CColPackLine"]
      """  Packing slip line number on the Invoicing Company.  """  
      self.CColDropShipPackSlip:str = obj["CColDropShipPackSlip"]
      """  Drop shipment packing slip number on the Invoicing Company.  """  
      self.CColDropShipPackSlipLine:int = obj["CColDropShipPackSlipLine"]
      """  Drop shipment packing slip line number on the Invoicing Company.  """  
      self.CColShipToCustID:str = obj["CColShipToCustID"]
      """  Ship To Customer ID from the Invoice Line in the subsidiary company.  """  
      self.CColShipToNum:str = obj["CColShipToNum"]
      """  Ship To from the Invoice Line in the subsidiary company.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.ServiceSource:str = obj["ServiceSource"]
      """  Indicates where invoice detail was created from when created from a service call job. Not maintainable. “Summarized Labor”, “Summarized Material”, “Labor”, “Material”  """  
      self.OTSTaxValidationStatus:int = obj["OTSTaxValidationStatus"]
      """  OTSTaxValidationStatus  """  
      self.OTSTaxValidationDate:str = obj["OTSTaxValidationDate"]
      """  OTSTaxValidationDate  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  AssemblySeq related to JobMtl or JobOper used to create invoice line from service call job  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  Job Mtl seq used to create invoice line from service call job  """  
      self.OprSeq:int = obj["OprSeq"]
      """  Job subcontract oper seq used to create invoice line from service call job  """  
      self.LaborType:str = obj["LaborType"]
      """  Indicates the labor type of the LaborDtl used to create invoice from service call job.  """  
      self.BillableLaborHrs:int = obj["BillableLaborHrs"]
      """  LaborDtl hours summed by labor rate. Used to create invoice line from labor related to service call job.  """  
      self.BillableLaborRate:int = obj["BillableLaborRate"]
      """  Billable rate used to create invoice line from labor related to service call job. In base currency.  """  
      self.ServiceSourceType:str = obj["ServiceSourceType"]
      """  Indicates the type of service call transaction data used to create the invoice detail from a service call job. MT (material), LB (labor), SC (subcontract), MC (misc charge), SM (summarized material), SL (summarized labor), SS (summarized subcontract) No summarization for MC.  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.AdvBillEnabled:bool = obj["AdvBillEnabled"]
      """  Adv bill enabled flag  """  
      self.AllowTaxCodeUpd:bool = obj["AllowTaxCodeUpd"]
      self.AllowUpdPartDefer:bool = obj["AllowUpdPartDefer"]
      """  This flag not allow updating PartiallyDefer in 'Posted Invoice Update' if  AR Invoice Line was  marked as Partially Defer in AR Invoice Entry.  """  
      self.BillToCustID:str = obj["BillToCustID"]
      """  CustID associated with the InvcDtl.BTCustNum field.  """  
      self.BTCustName:str = obj["BTCustName"]
      """  Customer Name associated with the InvcDtl.BTCustNum field.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CheckAmortAmounts:bool = obj["CheckAmortAmounts"]
      """  Used internally to determine when the user needs to be prompted to recalculate the amortization schedules.  This is not intended for use by the customers.  """  
      self.CNGTIDescription1:str = obj["CNGTIDescription1"]
      self.CNGTIDescription2:str = obj["CNGTIDescription2"]
      self.CNGTIDescription3:str = obj["CNGTIDescription3"]
      self.CNGTIDiscountTaxAmount:int = obj["CNGTIDiscountTaxAmount"]
      """  CSF China, discount tax amount  """  
      self.CNGTIIUM:str = obj["CNGTIIUM"]
      self.CNGTINetAmount:int = obj["CNGTINetAmount"]
      self.CNGTIPartDescription:str = obj["CNGTIPartDescription"]
      self.CNGTISpecification:str = obj["CNGTISpecification"]
      self.CNGTITaxAmount:int = obj["CNGTITaxAmount"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.CNGTITaxPercent:int = obj["CNGTITaxPercent"]
      self.CNGTITotalAmount:int = obj["CNGTITotalAmount"]
      self.CNGTIUnitPrice:int = obj["CNGTIUnitPrice"]
      """  CSF China, Unit price = if InvcHead.InPrice then InvcDtl.InUnitPrice else InvcDtl.UnitPrice  """  
      self.ContractSuspended:bool = obj["ContractSuspended"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency code from InvcHead.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CustID:str = obj["CustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.CustName:str = obj["CustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.CustomerName:str = obj["CustomerName"]
      """  Invoice Detail Customer Name  """  
      self.DeleteRASchedule:bool = obj["DeleteRASchedule"]
      """  Intended for internal use.  This is set to yes when the user answers yes to the prompt asking if they want to delete schedules after they unchecked the deferred revenue flag.  """  
      self.DispGLAcct:str = obj["DispGLAcct"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DispPONum:str = obj["DispPONum"]
      """  PO number for display.  """  
      self.DispShipToAddr:str = obj["DispShipToAddr"]
      """  Ship to display address  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol.  """  
      self.DocDspUnitPrice:int = obj["DocDspUnitPrice"]
      self.DocLessDiscount:int = obj["DocLessDiscount"]
      """  Document discount amount  """  
      self.DocLineTax:int = obj["DocLineTax"]
      """  Doc line tax  """  
      self.DocLineTotal:int = obj["DocLineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.DocPEDetAmt:int = obj["DocPEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.DropShipment:bool = obj["DropShipment"]
      """  Drop Shipment  """  
      self.DspAdvanceBillCredit:int = obj["DspAdvanceBillCredit"]
      """  Display advance bill credit  """  
      self.DspDiscount:int = obj["DspDiscount"]
      """  Display discount  """  
      self.DspDocAdvanceBillCredit:int = obj["DspDocAdvanceBillCredit"]
      """  Display documents advance bill credit  """  
      self.DspDocDiscount:int = obj["DspDocDiscount"]
      """  Display document discount  """  
      self.DspDocExtPrice:int = obj["DspDocExtPrice"]
      """  Display document ext price  """  
      self.DspDocLessDiscount:int = obj["DspDocLessDiscount"]
      """  Display document less discount  """  
      self.DspDocLineTax:int = obj["DspDocLineTax"]
      """  Display document line tax  """  
      self.DspDocLineTotal:int = obj["DspDocLineTotal"]
      """  Display document line total  """  
      self.DspDocTotalMiscChrg:int = obj["DspDocTotalMiscChrg"]
      """  Display document total misc. charge  """  
      self.DspExtPrice:int = obj["DspExtPrice"]
      """  Display ext price  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display Invoice Reference  """  
      self.DspLessDiscount:int = obj["DspLessDiscount"]
      """  Display less discount  """  
      self.DspLineTax:int = obj["DspLineTax"]
      """  Display line tax  """  
      self.DspLineTotal:int = obj["DspLineTotal"]
      """  Display line total  """  
      self.DspOurShipQty:int = obj["DspOurShipQty"]
      """  Display our ship qty  """  
      self.DspSellingShipQty:int = obj["DspSellingShipQty"]
      """  Display selling ship qty  """  
      self.DspTaxExempt:str = obj["DspTaxExempt"]
      self.DspTotalMiscChrg:int = obj["DspTotalMiscChrg"]
      """  Display total misc. charges  """  
      self.DspUnitPrice:int = obj["DspUnitPrice"]
      self.DueDate:str = obj["DueDate"]
      """  Invoice head due date.  """  
      self.EmpID:str = obj["EmpID"]
      """  FSA Technician  """  
      self.EnableDspWithholdAmt:bool = obj["EnableDspWithholdAmt"]
      self.EnableRMADelete:bool = obj["EnableRMADelete"]
      self.EnableRMAUpdate:bool = obj["EnableRMAUpdate"]
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEmpID:str = obj["FSAEmpID"]
      """  Employee created in ERP and processed on FSA as Service Technician, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.FSAWarrantyCode:str = obj["FSAWarrantyCode"]
      """  Warranty created in ERP and processed on FSA, stored on FSAExtData db table.  """  
      self.GLTranAmt:int = obj["GLTranAmt"]
      """  GL Journal Source Transaction Amount  """  
      self.GLTranDate:str = obj["GLTranDate"]
      """  GL Journal Source Transaction Date  """  
      self.GroupID:str = obj["GroupID"]
      """  Group associated to the invoice  """  
      self.InPrice:bool = obj["InPrice"]
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.InvLegalNum:str = obj["InvLegalNum"]
      """  Invoice Header Legal Number  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice Date from InvcHead.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice header type  """  
      self.IsCommisBtnSensitive:bool = obj["IsCommisBtnSensitive"]
      """  Is commission button sensitive  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsTaxBtnSensitive:bool = obj["IsTaxBtnSensitive"]
      """  Tax buton sensitive or not.  """  
      self.LessDiscount:int = obj["LessDiscount"]
      """  display discount  """  
      self.LineTax:int = obj["LineTax"]
      """  Line tax amount  """  
      self.LineTotal:int = obj["LineTotal"]
      """  ExtPrice-disc+misc charges.  """  
      self.LinkedCurrencySymbol:str = obj["LinkedCurrencySymbol"]
      self.NoShipTaxRgnInfo:bool = obj["NoShipTaxRgnInfo"]
      """  The flag based on the user responce to indicate if Ship To to be chnaged on Invoice detail record without tax information from Ship To because of the different tax pricing  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Open invoice flag from InvcHead.  """  
      self.OrderUM:str = obj["OrderUM"]
      """  OrderUM display  """  
      self.OrigTaxCat:str = obj["OrigTaxCat"]
      """  original tax category  """  
      self.PEDetAmt:int = obj["PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEVATExemptionReason:str = obj["PEVATExemptionReason"]
      """  PE VAT Exemption Reason  """  
      self.Posted:bool = obj["Posted"]
      """  Posted flag from the InvcHead.  """  
      self.RADesc:str = obj["RADesc"]
      self.RASchedExists:bool = obj["RASchedExists"]
      """  Intended for internal use.  Indicates whether or not revenue amortization schedules exist.  """  
      self.RemoveManAdTax:bool = obj["RemoveManAdTax"]
      """  The internal flag to indicate if the logic is supposed to remove manual and/or manually added tax records per User request if the Line Tax Exempt field is populated  """  
      self.Rpt1DspAdvanceBillCredit:int = obj["Rpt1DspAdvanceBillCredit"]
      self.Rpt1DspDiscount:int = obj["Rpt1DspDiscount"]
      self.Rpt1DspExtPrice:int = obj["Rpt1DspExtPrice"]
      self.Rpt1DspLessDiscount:int = obj["Rpt1DspLessDiscount"]
      self.Rpt1DspLineTax:int = obj["Rpt1DspLineTax"]
      self.Rpt1DspLineTotal:int = obj["Rpt1DspLineTotal"]
      self.Rpt1DspTotalMiscChrg:int = obj["Rpt1DspTotalMiscChrg"]
      self.Rpt1DspUnitPrice:int = obj["Rpt1DspUnitPrice"]
      self.Rpt1LineTax:int = obj["Rpt1LineTax"]
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt1PEDetAmt:int = obj["Rpt1PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt2DspAdvanceBillCredit:int = obj["Rpt2DspAdvanceBillCredit"]
      self.Rpt2DspDiscount:int = obj["Rpt2DspDiscount"]
      self.Rpt2DspExtPrice:int = obj["Rpt2DspExtPrice"]
      self.Rpt2DspLessDiscount:int = obj["Rpt2DspLessDiscount"]
      self.Rpt2DspLineTax:int = obj["Rpt2DspLineTax"]
      self.Rpt2DspLineTotal:int = obj["Rpt2DspLineTotal"]
      self.Rpt2DspTotalMiscChrg:int = obj["Rpt2DspTotalMiscChrg"]
      self.Rpt2DspUnitPrice:int = obj["Rpt2DspUnitPrice"]
      self.Rpt2LineTax:int = obj["Rpt2LineTax"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt2PEDetAmt:int = obj["Rpt2PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt3DspAdvanceBillCredit:int = obj["Rpt3DspAdvanceBillCredit"]
      self.Rpt3DspDiscount:int = obj["Rpt3DspDiscount"]
      self.Rpt3DspExtPrice:int = obj["Rpt3DspExtPrice"]
      self.Rpt3DspLessDiscount:int = obj["Rpt3DspLessDiscount"]
      self.Rpt3DspLineTax:int = obj["Rpt3DspLineTax"]
      self.Rpt3DspLineTotal:int = obj["Rpt3DspLineTotal"]
      self.Rpt3DspTotalMiscChrg:int = obj["Rpt3DspTotalMiscChrg"]
      self.Rpt3DspUnitPrice:int = obj["Rpt3DspUnitPrice"]
      self.Rpt3LineTax:int = obj["Rpt3LineTax"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt3PEDetAmt:int = obj["Rpt3PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st sales rep of the invoice.  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd sales rep of the invoice header.  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd sales rep code of the invoice header.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th sales rep code of the invoice header.  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th salesrep code of the invoice header.  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.ShipToContactEMailAddress:str = obj["ShipToContactEMailAddress"]
      self.ShipToContactFaxNum:str = obj["ShipToContactFaxNum"]
      self.ShipToContactName:str = obj["ShipToContactName"]
      self.ShipToContactPhoneNum:str = obj["ShipToContactPhoneNum"]
      self.ShpLegalNum:str = obj["ShpLegalNum"]
      """  Ship Head Legal Number  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  CustID associated with the InvcDtl.CustNum field.  """  
      self.SoldToCustName:str = obj["SoldToCustName"]
      """  Customer Name associated with the InvcDtl.CustNum field.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Terms code from InvcHead.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.AllowReclassify:bool = obj["AllowReclassify"]
      """  This flag allow updating Reclassification data.  """  
      self.LineAmtRecalcd:bool = obj["LineAmtRecalcd"]
      """  The flag to indicate if the amount  is re-calculated to doc/base/rpt currencies after entered and no need to re-calculate on save.  """  
      self.IsExtrastatSensitive:bool = obj["IsExtrastatSensitive"]
      """  Set to true if extra trade statistics is enabled.  """  
      self.TrackInventoryByRevision:bool = obj["TrackInventoryByRevision"]
      """  Indicates if inventory for this part is tracked by revision number.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.CallCodeCallDescription:str = obj["CallCodeCallDescription"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContractCodeContractDescription:str = obj["ContractCodeContractDescription"]
      self.ContractNumSuspended:bool = obj["ContractNumSuspended"]
      self.CustCntName:str = obj["CustCntName"]
      self.CustCntMiddleName:str = obj["CustCntMiddleName"]
      self.CustCntFirstName:str = obj["CustCntFirstName"]
      self.CustCntFaxNum:str = obj["CustCntFaxNum"]
      self.CustCntCorpName:str = obj["CustCntCorpName"]
      self.CustCntPhoneNum:str = obj["CustCntPhoneNum"]
      self.CustCntLastName:str = obj["CustCntLastName"]
      self.CustNumCustID:str = obj["CustNumCustID"]
      self.CustNumName:str = obj["CustNumName"]
      self.CustNumAllowShipTo3:bool = obj["CustNumAllowShipTo3"]
      self.CustNumBTName:str = obj["CustNumBTName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MilestoneIDDescription:str = obj["MilestoneIDDescription"]
      self.MXProdServCodeDesc:str = obj["MXProdServCodeDesc"]
      self.OrderLineLineDesc:str = obj["OrderLineLineDesc"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OTSCntryEUMember:bool = obj["OTSCntryEUMember"]
      self.OTSCntryISOCode:str = obj["OTSCntryISOCode"]
      self.OTSCntryDescription:str = obj["OTSCntryDescription"]
      self.PackLineLineDesc:str = obj["PackLineLineDesc"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackInventoryByRevision:bool = obj["PartNumTrackInventoryByRevision"]
      self.ProdCodeDescription:str = obj["ProdCodeDescription"]
      self.ProjectIDDescription:str = obj["ProjectIDDescription"]
      self.ReclassCodeDescription:str = obj["ReclassCodeDescription"]
      self.ReclassReasonDescription:str = obj["ReclassReasonDescription"]
      self.RMALineLineDesc:str = obj["RMALineLineDesc"]
      self.SalesCatIDDescription:str = obj["SalesCatIDDescription"]
      self.ShipToCustCustID:str = obj["ShipToCustCustID"]
      self.ShipToCustName:str = obj["ShipToCustName"]
      self.ShipToCustBTName:str = obj["ShipToCustBTName"]
      self.ShipToNumInactive:bool = obj["ShipToNumInactive"]
      self.ShipToNumName:str = obj["ShipToNumName"]
      self.ShipViaCodeDescription:str = obj["ShipViaCodeDescription"]
      self.ShipViaCodeWebDesc:str = obj["ShipViaCodeWebDesc"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcDtlTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadCancellationListRow:
   def __init__(self, obj):
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.RecalculateTaxes:bool = obj["RecalculateTaxes"]
      self.ReverseSign:bool = obj["ReverseSign"]
      self.SysRowID:str = obj["SysRowID"]
      self.SystemTranType:str = obj["SystemTranType"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.ApplyDate:str = obj["ApplyDate"]
      self.CMReason:str = obj["CMReason"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadCancellationListTHRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      self.CMReason:str = obj["CMReason"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.RecalculateTaxes:bool = obj["RecalculateTaxes"]
      self.ReverseSign:bool = obj["ReverseSign"]
      self.SysRowID:str = obj["SysRowID"]
      self.SystemTranType:str = obj["SystemTranType"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Indicates if invoice is "open".  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The latest transaction date (CashDtl) which was available when the invoice was closed. This is used to improve record selection performance when selecting invoices that were open as of a certain date. (Used by the aged invoice report). This is updated during the CashReceipt posting process, Adjustment entry or Apply Credit memos programs..  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """   Indicates the type of document. Yes = Credit Memo No= Invoice. This value can't be changed after the record has been created.
Credit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign but will entered as a positive.
Credit Memos created by invoice entry also set the InvoiceSuffix field = "CM"  """  
      self.UnappliedCash:bool = obj["UnappliedCash"]
      """  An internal flag that represents Credit Memo was due to Unapplied Receipts. Created by the Cash Receipts Entry program.   This is only applicable with CreditMemo = Yes.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The Check reference number that the Unapplied Receipt Credit Memo was created from. Cash receipts entry sets this field equal to the CashHead.CheckRef when it creates the Unapplied Receipt Credit Memo.  Primarily used as a reference.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  An internally assigned field that further identifies an invoice. This field will be displayed as a suffix to the invoice number.  The possible values are "CM" = Credit memo created by invoice entry, UR = Unapplied Receipt Credit Memo,  DN = Debit Note, and FC = Finance Charge invoice.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the BatchID of the "current " batch that the user is working with.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the receivables file.    Only invoices that have been Posted (true) will be included as part of the open receivables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns the next available #. The next available # is the greater of last # on file plus one or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices:  "Shp" = Invoice for Shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments, "Mis" = Miscellaneous.  The setting of this field affects invoice entry:  "Shipments" - These are generated by the "Get Shipments function" and is not selectable directly by the user.  "Advanced"  - Must have a sales order reference. The detail lines on this type of invoice update the OrderDtl.AdvanceBillBal. Also the user indicates if this should be considered as deferred revenue. Which changes which G/L accounts are used for the line item credits.  "Deposit" - invoices are used to request a "deposit" on an order. A Sales Order is mandatory. No line items or Miscellaneous records are allowed. The user enters a flat amount on the header (InvcHead.PrePayAmt) which will be printed in the body of the invoice. This also updates the OrderHed.PrePayBal field.   "Miscellaneous" - These invoices may or may not reference a Sales Order.  If Invoice is generated in Project Billing then there are following options: "PFF" - Fixed Fee project;  "PCP" - Cost Plus project;  "PTM" - Time and Material project;  "PPP" - Progress Payment project.  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  Only used when InvoiceType = "Adv" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If "No" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order #. This is a mandatory entry for all InvoiceType except "Miscellaneous". If entered it must be valid in the OrderHed file. The OrderHed supplies the invoice with many defaults, including; CustNum, PONum, TermsCode,  FOB, RepRate, RepSplit, SalesRepList, InvoiceComments  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal # that is used to link the invoice to the Customer master file.  This field is not directly maintained by the user.  In most cases it will be duplicated from the referenced OrderHed. For "Miscellaneous" invoices the user can enter either a Sales Order Number or a Customer ID which will supply the CustNum.  """  
      self.PONum:str = obj["PONum"]
      """  Customer's PO#.   This is a reference field which will be printed on the invoice. Defaults from the OrderHed.PONum.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.FOB:str = obj["FOB"]
      """  Defaults from sales order ORderHed.FOB  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the TERMS master file.  Defaults from OrderHed if OrderNum > 0 else from the Customer master. This IS A MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related InvcGrp or based on ShipDate of Packing Slip. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the InvcBatc or during the "get shipments" function it is determined based on the ShipDate of the packing slip or when the invoice date is changed. It is overrideable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Once posted, maintenance is not allowed.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DepositCredit:int = obj["DepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.DocDepositCredit:int = obj["DocDepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the invoice. Up to five codes can be  established. This field is not directly maintainable.  Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The defaults are based on the OrderHed.SalesRepList if a valid Order is referenced or first one is defaulted from the Customer master if ship to is blank else from the ShipTo.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """   This field is maintainable/viewable only for Credit Memos. It represents the invoice # that this credit memo relates to. It can be left blank. If entered it must be a valid InvcHead record where the InvcHead.CreditMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the credit memos next to their corresponding invoice. Therefore, this field will always have a value.

For Invoices it is equal to the InvoiceNum.

For Credit memos where they are not related to an invoice it is also set equal to the credit memo's InvoiceNum. In this later case when InvcHead.Credit = Yes and InvcHead.InvoiceNum = InvcHead.InvoiceRef the InvoiceRef is reset to zero before being displayed, then when written back to the database it is set = to the InvoiceNum if the user did not enter a related invoice.  """  
      self.RefCancelled:int = obj["RefCancelled"]
      """  Value of this field is reference to invoice which has been cancelled by current invoice.  """  
      self.RefCancelledBy:int = obj["RefCancelledBy"]
      """  Value of this field is reference to invoice that cancelled this invoice.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.PayDiscDate:str = obj["PayDiscDate"]
      """  Prompt payment discount date. This is calculated based on the Invoice date + Terms.DiscountDays. Not user maintainable. This will default into the cash receipt record if the scheduled due amount is being paid in full.  """  
      self.PayDiscAmt:int = obj["PayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.DocPayDiscAmt:int = obj["DocPayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.BillConNum:int = obj["BillConNum"]
      """  Contains the key  value for the Billing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMBCON as the default.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number. If ARSyst.ARVoucherInvoices = Yes then this value will be printed on the Invoice.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between invoiced with standard lines which are for parts "PART"  and lines for service calls  "CALL" .  """  
      self.RMANum:int = obj["RMANum"]
      """   The RMA number which generated this Credit Memo.
Note: This only applies to Credit Memos. 
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.Plant:str = obj["Plant"]
      """  The Site that the invoice is relate to.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identifier  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the Debit Note invoices this field contains the detail comments for the Debit Note. For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For the Debit Note invoice this field contains A Debit Note number assigned by the customer. The Debit Note number is supposed to be unique for the customer.  """  
      self.DebitNote:bool = obj["DebitNote"]
      """   Indicates the type of documents. Yes = Debit Note. This value can't be changed (the record is created on Invoice payment posting).
Debit Notes  also have the InvoiceSuffix field = "DN".  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  This is populated from ShipHead.CustNum representing the Sold To customer.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  Default is false.  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.RepComm1:int = obj["RepComm1"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm2:int = obj["RepComm2"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm3:int = obj["RepComm3"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm4:int = obj["RepComm4"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm5:int = obj["RepComm5"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepSales1:int = obj["RepSales1"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales2:int = obj["RepSales2"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales3:int = obj["RepSales3"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales4:int = obj["RepSales4"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales5:int = obj["RepSales5"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.CMType:str = obj["CMType"]
      """  Indicates if the Credit Memo is for a Rebate  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding in Base is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding in Customer currency  """  
      self.Rpt1DepositCredit:int = obj["Rpt1DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2DepositCredit:int = obj["Rpt2DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3DepositCredit:int = obj["Rpt3DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayDiscAmt:int = obj["Rpt1PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayDiscAmt:int = obj["Rpt2PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayDiscAmt:int = obj["Rpt3PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.DocDepApplied:int = obj["DocDepApplied"]
      """  Amount of deposit applied  """  
      self.Rpt1DepGainLoss:int = obj["Rpt1DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2DepGainLoss:int = obj["Rpt2DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3DepGainLoss:int = obj["Rpt3DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.LastChrgCalcDate:str = obj["LastChrgCalcDate"]
      """  The last date finance/late charges have been calculated for this invoice.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction document type id.  """  
      self.TotFinChrg:int = obj["TotFinChrg"]
      """  Total Finance Charge amount.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  Indicates if the document has been printed.  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.BlockedFinChrg:bool = obj["BlockedFinChrg"]
      """  Blocks certain invoice from generating finance/later charge.  """  
      self.BlockedFinChrgReason:str = obj["BlockedFinChrgReason"]
      """  Reason why invoice has been blocked generating finance/later charge and only is enabled if the invoice is blocked.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.BlockedRemLetters:bool = obj["BlockedRemLetters"]
      """  Blocks certain invoice from being printed on reminder letters.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.BlockedRemLettersReason:str = obj["BlockedRemLettersReason"]
      """  Reason why invoice has been blocked from being printed on reminder letters and only is enabled if the invoice is blocked.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  The actual ship date for the packing slip. Default as system date.  """  
      self.CurrRateDate:str = obj["CurrRateDate"]
      """  Currency Rate Date  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.UseAltBillTo:bool = obj["UseAltBillTo"]
      """  If TRUE taxes will be calculated based on the Alternate Bill To, if FALSE it will proceed normally.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be se to Yes if the Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden Finland Localization field - Banking Reference  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.ReversalDocAmount:int = obj["ReversalDocAmount"]
      """  Reversal Doucment Amount  """  
      self.OrigDueDate:str = obj["OrigDueDate"]
      """  Original Due Date at posting time  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The reference to CashHead.HeadNum.Used in deposit invoices  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.ContractRef:str = obj["ContractRef"]
      """  The free text field which can contain reference (such as Contract)  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash receipts. For Shipment Invoices it comes from Packing Slip. For Deposit Invoices created based on deposit payments it is actual bank money are received to. For other  Invoice types, default comes from 1) Sales Order 2) Bill To Customer 3) System default (Company).  """  
      self.ContractDate:str = obj["ContractDate"]
      """  Addition to Contract  """  
      self.PBProjectID:str = obj["PBProjectID"]
      """  If the invoice was generated in Project Billing then it is reference to the project.  """  
      self.DepositAmt:int = obj["DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment  """  
      self.GUIExportBillNumber:str = obj["GUIExportBillNumber"]
      """   Taiwan Localization
Export Bill Number  """  
      self.DocDepositAmt:int = obj["DocDepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in document currency  """  
      self.GUIDateOfExport:str = obj["GUIDateOfExport"]
      """   Taiwan Localization
Date of Export  """  
      self.Rpt1DepositAmt:int = obj["Rpt1DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt1 currency  """  
      self.GUIExportType:str = obj["GUIExportType"]
      """   Taiwan Localization
Export Type  """  
      self.Rpt2DepositAmt:int = obj["Rpt2DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt2 currency  """  
      self.GUIExportMark:str = obj["GUIExportMark"]
      """   Taiwan Localization
Export Mark  """  
      self.Rpt3DepositAmt:int = obj["Rpt3DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt23currency  """  
      self.GUIExportBillType:str = obj["GUIExportBillType"]
      """   Taiwan Localization
Export Bill Type  """  
      self.DepUnallocatedAmt:int = obj["DepUnallocatedAmt"]
      """  Deposit unallocated amount in base currency  """  
      self.SummarizationDate:str = obj["SummarizationDate"]
      """  Day when a company sums up accounts receivables for each customer.  """  
      self.DocDepUnallocatedAmt:int = obj["DocDepUnallocatedAmt"]
      """  Deposit unallocated amount in document currency  """  
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Rpt1DepUnallocatedAmt:int = obj["Rpt1DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt1 currency  """  
      self.BillingNumber:str = obj["BillingNumber"]
      """  Billing Number to be generated from Legal Numbering upon printing of billing statement.  """  
      self.Rpt2DepUnallocatedAmt:int = obj["Rpt2DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt2 currency  """  
      self.ReadyToBill:bool = obj["ReadyToBill"]
      """  Only records ready to bill will be printed in the Billing Statement  """  
      self.Rpt3DepUnallocatedAmt:int = obj["Rpt3DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.CustAgentName:str = obj["CustAgentName"]
      """  Customer Agent Name  """  
      self.CustAgentTaxRegNo:str = obj["CustAgentTaxRegNo"]
      """  Customer Agent Tax Region Number  """  
      self.ExportType:str = obj["ExportType"]
      """  Export Type: 0-No Export, 1-Normal Export(S04), 2-Material Export(S05), 3-Service Export(S06)  """  
      self.ExportReportNo:str = obj["ExportReportNo"]
      """  Export Report Number  """  
      self.RealEstateNo:str = obj["RealEstateNo"]
      """  Real Estate Number  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.RevisionDate:str = obj["RevisionDate"]
      """  RevisionDate  """  
      self.RevisionNum:int = obj["RevisionNum"]
      """  RevisionNum  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  TWGenerationType  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  TWGUIGroup  """  
      self.TWPeriodPrefix:str = obj["TWPeriodPrefix"]
      """  TWPeriodPrefix  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Invoice is for Central Collection.  """  
      self.DocCColInvBal:int = obj["DocCColInvBal"]
      """  Central Collection Doc Invoice Balance.  """  
      self.SubTotal:int = obj["SubTotal"]
      """  Sub total for invoice  """  
      self.DocSubTotal:int = obj["DocSubTotal"]
      """  Document sub total  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax amount from InvcTax  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document Total tax amount from InvcTax for Collection type 'Invoice'  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st entry in SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd entry in SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd entry in SalesRepList.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th entry in SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th entry in SalesRepList  """  
      self.ContactName:str = obj["ContactName"]
      """  Contact name  """  
      self.ContactFaxNum:str = obj["ContactFaxNum"]
      """  Contact fax number  """  
      self.ContactPhoneNum:str = obj["ContactPhoneNum"]
      """  Contact phone number  """  
      self.DisplayBillAddr:str = obj["DisplayBillAddr"]
      """  Bill to address in list format.  """  
      self.UseSOCCDefaults:bool = obj["UseSOCCDefaults"]
      """  If true, the credit card info will come from the sales order.  """  
      self.DisplayCreditCardNum:str = obj["DisplayCreditCardNum"]
      """  Display field for the masked credit card number  """  
      self.XRateLabel:str = obj["XRateLabel"]
      """  Currency label  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.DepositCreditEnabled:bool = obj["DepositCreditEnabled"]
      """  Deposit credit enabled flag.  """  
      self.PaySchedEnabled:bool = obj["PaySchedEnabled"]
      """  Pay schedule enabled flag  """  
      self.ContactEmailAddr:str = obj["ContactEmailAddr"]
      """  Contact email address.  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  InvoiceType description  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DspSubTotal:int = obj["DspSubTotal"]
      """  Display sub total  """  
      self.DspDocSubTotal:int = obj["DspDocSubTotal"]
      """  display document sub total  """  
      self.DspInvoiceAmt:int = obj["DspInvoiceAmt"]
      """  Display invoice amount  """  
      self.DspDocInvoiceAmt:int = obj["DspDocInvoiceAmt"]
      """  Display document invoice amount  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number from the 1st line item.  """  
      self.EnableSOCCDefaults:bool = obj["EnableSOCCDefaults"]
      """  Flag to determine if UseSOCCDefaults should be enabled.  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display invoice reference  """  
      self.GenedFromRMA:bool = obj["GenedFromRMA"]
      """  Flag for update of InvcHead to allow when group id is "RMACRREQ"  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.dspSoldToCustID:str = obj["dspSoldToCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID for the bill to customer (InvcHead.CustNum).  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.DispBalDN:int = obj["DispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DocDispBalDN:int = obj["DocDispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DNPmtAmt:int = obj["DNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocDNPmtAmt:int = obj["DocDNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DspInvoiceBal:int = obj["DspInvoiceBal"]
      """  Display Invoice Balance.  """  
      self.DspDocInvoiceBal:int = obj["DspDocInvoiceBal"]
      """  Display document invoice balance  """  
      self.DspDocRounding:int = obj["DspDocRounding"]
      """  Display Invoice Doc Rounding  """  
      self.DspRounding:int = obj["DspRounding"]
      """  Display Rounding in Base  """  
      self.Rpt1DspInvoiceAmt:int = obj["Rpt1DspInvoiceAmt"]
      self.Rpt2DspInvoiceAmt:int = obj["Rpt2DspInvoiceAmt"]
      self.Rpt3DspInvoiceAmt:int = obj["Rpt3DspInvoiceAmt"]
      self.Rpt1DspInvoiceBal:int = obj["Rpt1DspInvoiceBal"]
      self.Rpt2DspInvoiceBal:int = obj["Rpt2DspInvoiceBal"]
      self.Rpt3DspInvoiceBal:int = obj["Rpt3DspInvoiceBal"]
      self.Rpt1DspRounding:int = obj["Rpt1DspRounding"]
      self.Rpt2DspRounding:int = obj["Rpt2DspRounding"]
      self.Rpt3DspRounding:int = obj["Rpt3DspRounding"]
      self.Rpt1DspSubTotal:int = obj["Rpt1DspSubTotal"]
      self.Rpt2DspSubTotal:int = obj["Rpt2DspSubTotal"]
      self.Rpt3DspSubTotal:int = obj["Rpt3DspSubTotal"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2Taxamt:int = obj["Rpt2Taxamt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt1SubTotal:int = obj["Rpt1SubTotal"]
      self.Rpt2SubTotal:int = obj["Rpt2SubTotal"]
      self.Rpt3SubTotal:int = obj["Rpt3SubTotal"]
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      """  Indicates if assign legal number option is available.  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      """  Indicates if the void legal number option is available  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      """  Indicates if a legal number configuration exists for ar invoices/credit memos  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      """  Indicates if changes can occur after the document has been printed  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  The system transaction type - ARInvoice or CreditMemo.  Used to filter combo list for TranDocTypeID.  """  
      self.NextDiscDate:str = obj["NextDiscDate"]
      """  This field is to display in Cash Receipt Entry the Discount Date that the payment will take.  """  
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Indicates if TranDocTypeID is available for input.  """  
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.ReminderSeq:int = obj["ReminderSeq"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.DocDspTaxAmt:int = obj["DocDspTaxAmt"]
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.DisplayCurrencyID:str = obj["DisplayCurrencyID"]
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.ReversalDocAmt:int = obj["ReversalDocAmt"]
      """  Accumulate all reversal amounts of Credit Memos with the reference to the invoice  """  
      self.ERSInvoice:bool = obj["ERSInvoice"]
      """  It will be displayed to identify invoices automatically generated due ERS shipments.  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.ARPromNoteID:str = obj["ARPromNoteID"]
      """  when InvcHead.PIPayment = O then populate ARPaymentInstrumentID with a value of PI.  """  
      self.DepBal:int = obj["DepBal"]
      """  Deposit balance from CashHed  """  
      self.DocDepBal:int = obj["DocDepBal"]
      """  Document deposit amount from cashhead.  """  
      self.Rpt1DepBal:int = obj["Rpt1DepBal"]
      self.Rpt2DepBal:int = obj["Rpt2DepBal"]
      self.Rpt3DepBal:int = obj["Rpt3DepBal"]
      self.DspDepBal:int = obj["DspDepBal"]
      """  Display deposit balance.  """  
      self.DspDocDepBal:int = obj["DspDocDepBal"]
      """  Display document deposit balance  """  
      self.Rpt1DspDepBal:int = obj["Rpt1DspDepBal"]
      self.Rpt2DspDepBal:int = obj["Rpt2DspDepBal"]
      self.Rpt3DspDepBal:int = obj["Rpt3DspDepBal"]
      self.DspDepCr:int = obj["DspDepCr"]
      """  Display deposit credit.  """  
      self.DspDocDepCr:int = obj["DspDocDepCr"]
      """  Display document deposit credit.  """  
      self.Rpt1DspDepCr:int = obj["Rpt1DspDepCr"]
      self.Rpt2DspDepCr:int = obj["Rpt2DspDepCr"]
      self.Rpt3DspDepCr:int = obj["Rpt3DspDepCr"]
      self.Vr:int = obj["Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in base currency.  """  
      self.DocVr:int = obj["DocVr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in document currency.  """  
      self.SATaxAmt:int = obj["SATaxAmt"]
      self.DocSATaxAmt:int = obj["DocSATaxAmt"]
      self.Rpt1SATaxAmt:int = obj["Rpt1SATaxAmt"]
      self.Rpt2SATaxAmt:int = obj["Rpt2SATaxAmt"]
      self.Rpt3SATaxAmt:int = obj["Rpt3SATaxAmt"]
      self.Rpt1Vr:int = obj["Rpt1Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt1 currency.  """  
      self.WHTaxAmt:int = obj["WHTaxAmt"]
      self.DocWHTaxAmt:int = obj["DocWHTaxAmt"]
      self.Rpt1WHTaxAmt:int = obj["Rpt1WHTaxAmt"]
      self.Rpt2WHTaxAmt:int = obj["Rpt2WHTaxAmt"]
      self.Rpt3WHTaxAmt:int = obj["Rpt3WHTaxAmt"]
      self.Rpt2Vr:int = obj["Rpt2Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt2 currency.  """  
      self.Rpt3Vr:int = obj["Rpt3Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt3 currency.  """  
      self.DspABAmt:int = obj["DspABAmt"]
      """  Display advance billing amount  """  
      self.DspDocABAmt:int = obj["DspDocABAmt"]
      """  Display document advance billing amount  """  
      self.Rpt1DspABAmt:int = obj["Rpt1DspABAmt"]
      self.Rpt2DspABAmt:int = obj["Rpt2DspABAmt"]
      self.Rpt3DspABAmt:int = obj["Rpt3DspABAmt"]
      self.ABAmt:int = obj["ABAmt"]
      """  Total advanced billing amount.  """  
      self.DocABAmt:int = obj["DocABAmt"]
      """  Document Total advanced billing amount.  """  
      self.Rpt1ABAmt:int = obj["Rpt1ABAmt"]
      self.Rpt2ABAmt:int = obj["Rpt2ABAmt"]
      self.Rpt3ABAmt:int = obj["Rpt3ABAmt"]
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """  The flag to indicate if Invoice Header Apply Date is supposed to be Read Only  """  
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      """  The credit card description. For example, American Express, Visa, Master Card, Discover, etc.  """  
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      """  Description of the currency  """  
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      """  A symbol that identifies the currency. Used on Forms and displays  """  
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      """  This is the updatable version of CurrencyCode.  This currency cannot be a record already in the currency table.  """  
      self.CurrRateGrpDescription:str = obj["CurrRateGrpDescription"]
      """  Description  """  
      self.CustomerName:str = obj["CustomerName"]
      """  The full name of the customer.  """  
      self.CustomerBTName:str = obj["CustomerBTName"]
      """  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      """  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  """  
      self.FOBDescription:str = obj["FOBDescription"]
      """  Full description of the FOB Code.  """  
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      """  Journal  Description.  """  
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      """  The member's name on the credit card.  """  
      self.OurBankIBANCode:str = obj["OurBankIBANCode"]
      """  IBAN Code  """  
      self.OurBankPayerRef:str = obj["OurBankPayerRef"]
      """  Payer Reference  """  
      self.OurBankDescription:str = obj["OurBankDescription"]
      """  Full description of the bank account.  """  
      self.OurBankCheckingAccount:str = obj["OurBankCheckingAccount"]
      """  The account number for the bank account. Used for reference only.  """  
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      """   Indicates that invoices for the customer is summarized and sent as a sum to the bank without specifying the individual invoices.
A single bank transaction is created for the payment but what?s actually sent to the bank will be determined by the electronic interface plug-in program.
Only enabled if type is set to ?Electronic Interface?  """  
      self.PayMethodType:int = obj["PayMethodType"]
      """  Indicated the type of payment with the following options:
 0 = Manual (default)
 1 = Electronic Interface
 2 = Check Printing
 3 = Payment Instrument Type 1
 4 = Payment Instrument Type 2  """  
      self.PayMethodName:str = obj["PayMethodName"]
      """  Name of the payment method  """  
      self.PlantName:str = obj["PlantName"]
      """  The Plant name. Used on shipping reports.  """  
      self.ProjectDescription:str = obj["ProjectDescription"]
      """  Full description of Project Management Code.  """  
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      """  Description  """  
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      """  Full description for the Tax Region.  """  
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      """  Full description of the terms which prints on sales orders and invoices.  """  
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      """  Description  """  
      self.NeedConfirmTaxes:bool = obj["NeedConfirmTaxes"]
      """  It indicates that this Invoice has taxes, for which the confirmation is required.  """  
      self.Selected:bool = obj["Selected"]
      """  Boolean for selection of invoices in grid  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadListTableset:
   def __init__(self, obj):
      self.InvcHeadList:list[Erp_Tablesets_InvcHeadListRow] = obj["InvcHeadList"]
      self.InvcHeadCancellationList:list[Erp_Tablesets_InvcHeadCancellationListRow] = obj["InvcHeadCancellationList"]
      self.InvcHeadCancellationListTH:list[Erp_Tablesets_InvcHeadCancellationListTHRow] = obj["InvcHeadCancellationListTH"]
      self.InvcHeadTransferList:list[Erp_Tablesets_InvcHeadTransferListRow] = obj["InvcHeadTransferList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_InvcHeadRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenInvoice:bool = obj["OpenInvoice"]
      """  Indicates if invoice is "open".  """  
      self.ClosedDate:str = obj["ClosedDate"]
      """  The latest transaction date (CashDtl) which was available when the invoice was closed. This is used to improve record selection performance when selecting invoices that were open as of a certain date. (Used by the aged invoice report). This is updated during the CashReceipt posting process, Adjustment entry or Apply Credit memos programs..  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """   Indicates the type of document. Yes = Credit Memo No= Invoice. This value can't be changed after the record has been created.
Credit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign but will entered as a positive.
Credit Memos created by invoice entry also set the InvoiceSuffix field = "CM"  """  
      self.UnappliedCash:bool = obj["UnappliedCash"]
      """  An internal flag that represents Credit Memo was due to Unapplied Receipts. Created by the Cash Receipts Entry program.   This is only applicable with CreditMemo = Yes.  """  
      self.CheckRef:str = obj["CheckRef"]
      """   The Check reference number that the Unapplied Receipt Credit Memo was created from. Cash receipts entry sets this field equal to the CashHead.CheckRef when it creates the Unapplied Receipt Credit Memo.  Primarily used as a reference.
This is used when TranType = PrePay, MisPay or PayInv.  """  
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      """  An internally assigned field that further identifies an invoice. This field will be displayed as a suffix to the invoice number.  The possible values are "CM" = Credit memo created by invoice entry, UR = Unapplied Receipt Credit Memo,  DN = Debit Note, and FC = Finance Charge invoice.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the BatchID of the "current " batch that the user is working with.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the receivables file.    Only invoices that have been Posted (true) will be included as part of the open receivables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns the next available #. The next available # is the greater of last # on file plus one or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices:  "Shp" = Invoice for Shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments, "Mis" = Miscellaneous.  The setting of this field affects invoice entry:  "Shipments" - These are generated by the "Get Shipments function" and is not selectable directly by the user.  "Advanced"  - Must have a sales order reference. The detail lines on this type of invoice update the OrderDtl.AdvanceBillBal. Also the user indicates if this should be considered as deferred revenue. Which changes which G/L accounts are used for the line item credits.  "Deposit" - invoices are used to request a "deposit" on an order. A Sales Order is mandatory. No line items or Miscellaneous records are allowed. The user enters a flat amount on the header (InvcHead.PrePayAmt) which will be printed in the body of the invoice. This also updates the OrderHed.PrePayBal field.   "Miscellaneous" - These invoices may or may not reference a Sales Order.  If Invoice is generated in Project Billing then there are following options: "PFF" - Fixed Fee project;  "PCP" - Cost Plus project;  "PTM" - Time and Material project;  "PPP" - Progress Payment project.  """  
      self.DeferredRevenue:bool = obj["DeferredRevenue"]
      """  Only used when InvoiceType = "Adv" (Advanced Billing).  Indicates if the detail line amounts are to be considered as sales or deferred revenue.  If "No" then the G/L accounts on the detail lines are the Sales Accounts otherwise they will be set to the Deferred Revenue accounts established in the ARSyst/ARAcct files.  """  
      self.OrderNum:int = obj["OrderNum"]
      """  Sales Order #. This is a mandatory entry for all InvoiceType except "Miscellaneous". If entered it must be valid in the OrderHed file. The OrderHed supplies the invoice with many defaults, including; CustNum, PONum, TermsCode,  FOB, RepRate, RepSplit, SalesRepList, InvoiceComments  """  
      self.CustNum:int = obj["CustNum"]
      """  The CustNum field is the internal # that is used to link the invoice to the Customer master file.  This field is not directly maintained by the user.  In most cases it will be duplicated from the referenced OrderHed. For "Miscellaneous" invoices the user can enter either a Sales Order Number or a Customer ID which will supply the CustNum.  """  
      self.PONum:str = obj["PONum"]
      """  Customer's PO#.   This is a reference field which will be printed on the invoice. Defaults from the OrderHed.PONum.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.FOB:str = obj["FOB"]
      """  Defaults from sales order ORderHed.FOB  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the TERMS master file.  Defaults from OrderHed if OrderNum > 0 else from the Customer master. This IS A MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related InvcGrp or based on ShipDate of Packing Slip. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the InvcBatc or during the "get shipments" function it is determined based on the ShipDate of the packing slip or when the invoice date is changed. It is overrideable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Once posted, maintenance is not allowed.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall order. These will copied into the Invoice detail file as defaults.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DepositCredit:int = obj["DepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.DocDepositCredit:int = obj["DocDepositCredit"]
      """  Amount to be credited against the invoice total due to deposit payments against the sales order. This can be defaulted from OrderHed.DepositBal. This will be printed on the invoice as a separate line "Less Deposit of:"  This value updates the OrderHed.DepositBal. Do not allow OrderHed.DepositBal to become negative.  """  
      self.SalesRepList:str = obj["SalesRepList"]
      """  Stores the Sales Rep Codes for the invoice. Up to five codes can be  established. This field is not directly maintainable.  Instead temp widgets are used for entry of each individual code and then put together as one comma delimited string field and assigned to this field.  This field will have a Word index, it then will make reporting and data base integrity checking much easier through the use of the "contains phrase" when retrieving records. These codes can be left blank or must be valid in the SalesRep master. The defaults are based on the OrderHed.SalesRepList if a valid Order is referenced or first one is defaulted from the Customer master if ship to is blank else from the ShipTo.  """  
      self.InvoiceRef:int = obj["InvoiceRef"]
      """   This field is maintainable/viewable only for Credit Memos. It represents the invoice # that this credit memo relates to. It can be left blank. If entered it must be a valid InvcHead record where the InvcHead.CreditMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the credit memos next to their corresponding invoice. Therefore, this field will always have a value.

For Invoices it is equal to the InvoiceNum.

For Credit memos where they are not related to an invoice it is also set equal to the credit memo's InvoiceNum. In this later case when InvcHead.Credit = Yes and InvcHead.InvoiceNum = InvcHead.InvoiceRef the InvoiceRef is reset to zero before being displayed, then when written back to the database it is set = to the InvoiceNum if the user did not enter a related invoice.  """  
      self.RefCancelled:int = obj["RefCancelled"]
      """  Value of this field is reference to invoice which has been cancelled by current invoice.  """  
      self.RefCancelledBy:int = obj["RefCancelledBy"]
      """  Value of this field is reference to invoice that cancelled this invoice.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.PayDiscDate:str = obj["PayDiscDate"]
      """  Prompt payment discount date. This is calculated based on the Invoice date + Terms.DiscountDays. Not user maintainable. This will default into the cash receipt record if the scheduled due amount is being paid in full.  """  
      self.PayDiscAmt:int = obj["PayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.DocPayDiscAmt:int = obj["DocPayDiscAmt"]
      """  Amount of discount that would be given if paid on or before the specified PayDiscDate. Calculated using the Terms.DiscountPercent X Invoice total amount.  """  
      self.BillConNum:int = obj["BillConNum"]
      """  Contains the key  value for the Billing Contact. This can be blank or it must be valid in the CUSTCNT  table. Use the CUSTOMER.PRIMBCON as the default.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No.  This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  The Manufacturing System sets this flag when creating invoices for order line items which had been flagged for "Time & Material Invoicing" (OrderDtl.TMBilling)  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number. If ARSyst.ARVoucherInvoices = Yes then this value will be printed on the Invoice.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.LineType:str = obj["LineType"]
      """  Used to differentiate between invoiced with standard lines which are for parts "PART"  and lines for service calls  "CALL" .  """  
      self.RMANum:int = obj["RMANum"]
      """   The RMA number which generated this Credit Memo.
Note: This only applies to Credit Memos. 
It is assigned as part of the Request Credit process for an RMA and is not directly maintainable by Invoice Entry.  """  
      self.Plant:str = obj["Plant"]
      """  The Site that the invoice is relate to.  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  The member's name on the credit card.  """  
      self.CardNumber:str = obj["CardNumber"]
      """  The credit card account identifier.  """  
      self.CardType:str = obj["CardType"]
      """  A code assigned by the user to uniquely identify a Credit Card Type master. This can't be blank.  """  
      self.ExpirationMonth:int = obj["ExpirationMonth"]
      """  The expiration month of the credit card.  """  
      self.ExpirationYear:int = obj["ExpirationYear"]
      """  The expiration year of the credit card.  """  
      self.CardID:str = obj["CardID"]
      """  Optional field, a 4-digit, non-embossed code on face of American Express Card assigned for fraud prevention.  """  
      self.CardmemberReference:str = obj["CardmemberReference"]
      """  Up to 17 alphnumeric characters provided by customer. This is used to track information on customer spending (e.g., cost center, project code). This field is especially critical, since inaccurate information will affect the general ledger. If no reference number is provided, leave this field blank.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identifier  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.DNComments:str = obj["DNComments"]
      """  For the Debit Note invoices this field contains the detail comments for the Debit Note. For the regular invoices this field contains the list of Debit Notes related to this invoice.  """  
      self.DNCustNbr:str = obj["DNCustNbr"]
      """  For the Debit Note invoice this field contains A Debit Note number assigned by the customer. The Debit Note number is supposed to be unique for the customer.  """  
      self.DebitNote:bool = obj["DebitNote"]
      """   Indicates the type of documents. Yes = Debit Note. This value can't be changed (the record is created on Invoice payment posting).
Debit Notes  also have the InvoiceSuffix field = "DN".  """  
      self.SoldToCustNum:int = obj["SoldToCustNum"]
      """  This is populated from ShipHead.CustNum representing the Sold To customer.  """  
      self.Consolidated:bool = obj["Consolidated"]
      """  Default is false.  This is only set to true if this invoice was generated via Get Shipments and shipments were combined based on common Bill To customer.  This is used by ARInvoice Entry to properly enable/disable Bill To customer field (InvcHead.CustNum) and to identify the record as a consolidated Invoice.  """  
      self.BillToInvoiceAddress:bool = obj["BillToInvoiceAddress"]
      """  If InvcHead.CustNum (BillTo) is different from InvcHead.SoldToCustNum (SoldTo), then this field defaults to the CustBillTo (Alt BillTo). InvoiceAddress status and SoldToInvoiceAddress is set to the opposite status.  """  
      self.SoldToInvoiceAddress:bool = obj["SoldToInvoiceAddress"]
      """  Always the opposite status of BillToInvoiceAddress.  If true, Invoice address for printing will use the Bill To address on the Sold-to customer.  If false, will use the Bill To address of the Bill to customer.  """  
      self.ProcessCard:str = obj["ProcessCard"]
      """  Stores the encrypted credit card number  """  
      self.RepComm1:int = obj["RepComm1"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm2:int = obj["RepComm2"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm3:int = obj["RepComm3"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm4:int = obj["RepComm4"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepComm5:int = obj["RepComm5"]
      """  Contains the total commission amount for the corresponding sales rep (SalesRepList). This total is NOT MAINTAINABLE. It is updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain this total;  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount) * RepSplit) * RepRate).  """  
      self.RepRate1:int = obj["RepRate1"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate2:int = obj["RepRate2"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate3:int = obj["RepRate3"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate4:int = obj["RepRate4"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepRate5:int = obj["RepRate5"]
      """  Establishes the default commission rates used for invoice line items. Defaults to OrderHed.RepRate if related to sales order.  """  
      self.RepSales1:int = obj["RepSales1"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales2:int = obj["RepSales2"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales3:int = obj["RepSales3"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales4:int = obj["RepSales4"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSales5:int = obj["RepSales5"]
      """  An array of five elements containing the total invoice sales amount for the corresponding sales reps (SalesRepList). These totals are NOT MAINTAINABLE. They are updated via write triggers on the InvcDtl record.  The following basic formula is used to maintain these totals:  If InvcDtl.Commissionable = Yes then the sales amount to accumulate is calculated as (((ShipQty/PriceFactor) * UnitPrice) - Discount . NOTE: miscellaneous charges/credits are NOT part of the sales total.  """  
      self.RepSplit1:int = obj["RepSplit1"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit2:int = obj["RepSplit2"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit3:int = obj["RepSplit3"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit4:int = obj["RepSplit4"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.RepSplit5:int = obj["RepSplit5"]
      """  Default Split percent for the invoice detail lines.  If related to a sales order then defaults to the OrderHed.RepSplit.  """  
      self.CMType:str = obj["CMType"]
      """  Indicates if the Credit Memo is for a Rebate  """  
      self.CCStreetAddr:str = obj["CCStreetAddr"]
      """  Address used during AVS validation for credit transactions  """  
      self.CCZip:str = obj["CCZip"]
      """  Zip used during AVS validation in credit transactions  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.AutoPrintReady:bool = obj["AutoPrintReady"]
      """  Field to use for the BAM to Auto-Print the Crystal Report or Bartender Labels associated to this table.  """  
      self.EDIReady:bool = obj["EDIReady"]
      """  Defines if this document is marked as EDI Ready  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding in Base is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding in Customer currency  """  
      self.Rpt1DepositCredit:int = obj["Rpt1DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt2DepositCredit:int = obj["Rpt2DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt3DepositCredit:int = obj["Rpt3DepositCredit"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayDiscAmt:int = obj["Rpt1PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayDiscAmt:int = obj["Rpt2PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayDiscAmt:int = obj["Rpt3PayDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.DocDepApplied:int = obj["DocDepApplied"]
      """  Amount of deposit applied  """  
      self.Rpt1DepGainLoss:int = obj["Rpt1DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2DepGainLoss:int = obj["Rpt2DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3DepGainLoss:int = obj["Rpt3DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  Unique identifier of the Tax Region assigned by the user.  """  
      self.LastChrgCalcDate:str = obj["LastChrgCalcDate"]
      """  The last date finance/late charges have been calculated for this invoice.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction document type id.  """  
      self.TotFinChrg:int = obj["TotFinChrg"]
      """  Total Finance Charge amount.  """  
      self.DocumentPrinted:bool = obj["DocumentPrinted"]
      """  Indicates if the document has been printed.  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.BlockedFinChrg:bool = obj["BlockedFinChrg"]
      """  Blocks certain invoice from generating finance/later charge.  """  
      self.BlockedFinChrgReason:str = obj["BlockedFinChrgReason"]
      """  Reason why invoice has been blocked generating finance/later charge and only is enabled if the invoice is blocked.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.BlockedRemLetters:bool = obj["BlockedRemLetters"]
      """  Blocks certain invoice from being printed on reminder letters.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.BlockedRemLettersReason:str = obj["BlockedRemLettersReason"]
      """  Reason why invoice has been blocked from being printed on reminder letters and only is enabled if the invoice is blocked.  """  
      self.ShipDate:str = obj["ShipDate"]
      """  The actual ship date for the packing slip. Default as system date.  """  
      self.CurrRateDate:str = obj["CurrRateDate"]
      """  Currency Rate Date  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.UseAltBillTo:bool = obj["UseAltBillTo"]
      """  If TRUE taxes will be calculated based on the Alternate Bill To, if FALSE it will proceed normally.  """  
      self.InPrice:bool = obj["InPrice"]
      """  Indicates that the tax is included in the unit price  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be se to Yes if the Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden Finland Localization field - Banking Reference  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.ReversalDocAmount:int = obj["ReversalDocAmount"]
      """  Reversal Doucment Amount  """  
      self.OrigDueDate:str = obj["OrigDueDate"]
      """  Original Due Date at posting time  """  
      self.HeadNum:int = obj["HeadNum"]
      """  The reference to CashHead.HeadNum.Used in deposit invoices  """  
      self.ARLOCID:str = obj["ARLOCID"]
      """  Letter of Credit ID.  """  
      self.ContractRef:str = obj["ContractRef"]
      """  The free text field which can contain reference (such as Contract)  """  
      self.OurBank:str = obj["OurBank"]
      """  Bank for Cash receipts. For Shipment Invoices it comes from Packing Slip. For Deposit Invoices created based on deposit payments it is actual bank money are received to. For other  Invoice types, default comes from 1) Sales Order 2) Bill To Customer 3) System default (Company).  """  
      self.ContractDate:str = obj["ContractDate"]
      """  Addition to Contract  """  
      self.PBProjectID:str = obj["PBProjectID"]
      """  If the invoice was generated in Project Billing then it is reference to the project.  """  
      self.DepositAmt:int = obj["DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment  """  
      self.GUIExportBillNumber:str = obj["GUIExportBillNumber"]
      """   Taiwan Localization
Export Bill Number  """  
      self.DocDepositAmt:int = obj["DocDepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in document currency  """  
      self.GUIDateOfExport:str = obj["GUIDateOfExport"]
      """   Taiwan Localization
Date of Export  """  
      self.Rpt1DepositAmt:int = obj["Rpt1DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt1 currency  """  
      self.GUIExportType:str = obj["GUIExportType"]
      """   Taiwan Localization
Export Type  """  
      self.Rpt2DepositAmt:int = obj["Rpt2DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt2 currency  """  
      self.GUIExportMark:str = obj["GUIExportMark"]
      """   Taiwan Localization
Export Mark  """  
      self.Rpt3DepositAmt:int = obj["Rpt3DepositAmt"]
      """  Deposit amount is transaction amount of deposit payment in Rpt23currency  """  
      self.GUIExportBillType:str = obj["GUIExportBillType"]
      """   Taiwan Localization
Export Bill Type  """  
      self.DepUnallocatedAmt:int = obj["DepUnallocatedAmt"]
      """  Deposit unallocated amount in base currency  """  
      self.SummarizationDate:str = obj["SummarizationDate"]
      """  Day when a company sums up accounts receivables for each customer.  """  
      self.DocDepUnallocatedAmt:int = obj["DocDepUnallocatedAmt"]
      """  Deposit unallocated amount in document currency  """  
      self.BillingDate:str = obj["BillingDate"]
      """  Date when a company bills the customer  """  
      self.Rpt1DepUnallocatedAmt:int = obj["Rpt1DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt1 currency  """  
      self.BillingNumber:str = obj["BillingNumber"]
      """  Billing Number to be generated from Legal Numbering upon printing of billing statement.  """  
      self.Rpt2DepUnallocatedAmt:int = obj["Rpt2DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt2 currency  """  
      self.ReadyToBill:bool = obj["ReadyToBill"]
      """  Only records ready to bill will be printed in the Billing Statement  """  
      self.Rpt3DepUnallocatedAmt:int = obj["Rpt3DepUnallocatedAmt"]
      """  Deposit unallocated amount in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.XRefContractNum:str = obj["XRefContractNum"]
      """  Cross Reference Contract Number.  """  
      self.XRefContractDate:str = obj["XRefContractDate"]
      """  Cross Reference Contract Date.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.CustAgentName:str = obj["CustAgentName"]
      """  Customer Agent Name  """  
      self.CustAgentTaxRegNo:str = obj["CustAgentTaxRegNo"]
      """  Customer Agent Tax Region Number  """  
      self.ExportType:str = obj["ExportType"]
      """  Export Type: 0-No Export, 1-Normal Export(S04), 2-Material Export(S05), 3-Service Export(S06)  """  
      self.ExportReportNo:str = obj["ExportReportNo"]
      """  Export Report Number  """  
      self.RealEstateNo:str = obj["RealEstateNo"]
      """  Real Estate Number  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.CycleCode:str = obj["CycleCode"]
      """  CycleCode  """  
      self.Duration:int = obj["Duration"]
      """  Duration  """  
      self.EndDate:str = obj["EndDate"]
      """  EndDate  """  
      self.MaxValueAmt:int = obj["MaxValueAmt"]
      """  MaxValueAmt  """  
      self.DocMaxValueAmt:int = obj["DocMaxValueAmt"]
      """  DocMaxValueAmt  """  
      self.Rpt1MaxValueAmt:int = obj["Rpt1MaxValueAmt"]
      """  Rpt1MaxValueAmt  """  
      self.Rpt2MaxValueAmt:int = obj["Rpt2MaxValueAmt"]
      """  Rpt2MaxValueAmt  """  
      self.Rpt3MaxValueAmt:int = obj["Rpt3MaxValueAmt"]
      """  Rpt3MaxValueAmt  """  
      self.HoldInvoice:bool = obj["HoldInvoice"]
      """  HoldInvoice  """  
      self.CopyLatestInvoice:bool = obj["CopyLatestInvoice"]
      """  CopyLatestInvoice  """  
      self.OverrideEndDate:bool = obj["OverrideEndDate"]
      """  OverrideEndDate  """  
      self.CycleInactive:bool = obj["CycleInactive"]
      """  CycleInactive  """  
      self.RecurSource:bool = obj["RecurSource"]
      """  RecurSource  """  
      self.InstanceNum:int = obj["InstanceNum"]
      """  InstanceNum  """  
      self.RecurBalance:int = obj["RecurBalance"]
      """  RecurBalance  """  
      self.DocRecurBalance:int = obj["DocRecurBalance"]
      """  DocRecurBalance  """  
      self.Rpt1RecurBalance:int = obj["Rpt1RecurBalance"]
      """  Rpt1RecurBalance  """  
      self.Rpt2RecurBalance:int = obj["Rpt2RecurBalance"]
      """  Rpt2RecurBalance  """  
      self.Rpt3RecurBalance:int = obj["Rpt3RecurBalance"]
      """  Rpt3RecurBalance  """  
      self.LastDate:str = obj["LastDate"]
      """  LastDate  """  
      self.RecurringState:str = obj["RecurringState"]
      """  RecurringState  """  
      self.IsRecurring:bool = obj["IsRecurring"]
      """  IsRecurring  """  
      self.InvoiceNumList:str = obj["InvoiceNumList"]
      """  InvoiceNumList  """  
      self.IsAddedToGTI:bool = obj["IsAddedToGTI"]
      """  IsAddedToGTI  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CHISRCodeLine:str = obj["CHISRCodeLine"]
      """  CHISRCodeLine  """  
      self.CMReason:str = obj["CMReason"]
      """  CMReason  """  
      self.THIsImmatAdjustment:bool = obj["THIsImmatAdjustment"]
      """  THIsImmatAdjustment  """  
      self.AGAuthorizationCode:str = obj["AGAuthorizationCode"]
      """  AGAuthorizationCode  """  
      self.AGAuthorizationDate:str = obj["AGAuthorizationDate"]
      """  AGAuthorizationDate  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGDocumentLetter:str = obj["AGDocumentLetter"]
      """  AGDocumentLetter  """  
      self.AGInvoicingPoint:str = obj["AGInvoicingPoint"]
      """  AGInvoicingPoint  """  
      self.AGLegalNumber:str = obj["AGLegalNumber"]
      """  AGLegalNumber  """  
      self.AGPrintingControlType:str = obj["AGPrintingControlType"]
      """  AGPrintingControlType  """  
      self.RevisionDate:str = obj["RevisionDate"]
      """  RevisionDate  """  
      self.RevisionNum:int = obj["RevisionNum"]
      """  RevisionNum  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.TWGenerationType:str = obj["TWGenerationType"]
      """  TWGenerationType  """  
      self.TWGUIGroup:str = obj["TWGUIGroup"]
      """  TWGUIGroup  """  
      self.TWPeriodPrefix:str = obj["TWPeriodPrefix"]
      """  TWPeriodPrefix  """  
      self.InvInCollections:bool = obj["InvInCollections"]
      """  Indicates if the Invoice is in Collections status  """  
      self.CollectionsCust:bool = obj["CollectionsCust"]
      """   Indicates if the Customer of the Invoice is in Collections
(Peru Localization)  """  
      self.CounterARForm:int = obj["CounterARForm"]
      """  A counter of the number of times an AR Invoice has been transmitted via EDI.  The counter is automatically incremented each time the EDIReady flag changes from False to True.  """  
      self.PostedRecog:bool = obj["PostedRecog"]
      """  flag indicates if Revenue of the invoice has been already posted  """  
      self.CNConfirmDate:str = obj["CNConfirmDate"]
      """  Confirmation Date  """  
      self.MXSATSeal:str = obj["MXSATSeal"]
      """  MXSATSeal  """  
      self.MXSerie:str = obj["MXSerie"]
      """  MXSerie  """  
      self.MXTaxRcptType:str = obj["MXTaxRcptType"]
      """  MXTaxRcptType  """  
      self.MXFiscalFolio:str = obj["MXFiscalFolio"]
      """  MXFiscalFolio  """  
      self.MXTotalPayments:int = obj["MXTotalPayments"]
      """  MXTotalPayments  """  
      self.MXFolio:str = obj["MXFolio"]
      """  MXFolio  """  
      self.MXCertifiedTimestamp:str = obj["MXCertifiedTimestamp"]
      """  MXCertifiedTimestamp  """  
      self.MXSATCertificateSN:str = obj["MXSATCertificateSN"]
      """  MXSATCertificateSN  """  
      self.MXDigitalSeal:str = obj["MXDigitalSeal"]
      """  MXDigitalSeal  """  
      self.MXPostedTimeStamp:str = obj["MXPostedTimeStamp"]
      """  MXPostedTimeStamp  """  
      self.MXCertificate:str = obj["MXCertificate"]
      """  MXCertificate  """  
      self.MXApprovalYear:int = obj["MXApprovalYear"]
      """  MXApprovalYear  """  
      self.MXCBB:str = obj["MXCBB"]
      """  MXCBB  """  
      self.MXApprovalNum:int = obj["MXApprovalNum"]
      """  MXApprovalNum  """  
      self.MXOriginalStringTFD:str = obj["MXOriginalStringTFD"]
      """  MXOriginalStringTFD  """  
      self.MXPaymentNum:int = obj["MXPaymentNum"]
      """  MXPaymentNum  """  
      self.MXPaidAs:str = obj["MXPaidAs"]
      """  MXPaidAs  """  
      self.MXCertificateSN:str = obj["MXCertificateSN"]
      """  MXCertificateSN  """  
      self.MXOriginalAmount:int = obj["MXOriginalAmount"]
      """  MXOriginalAmount  """  
      self.MXAccountNumber:str = obj["MXAccountNumber"]
      """  MXAccountNumber  """  
      self.MXOriginalDate:str = obj["MXOriginalDate"]
      """  MXOriginalDate  """  
      self.MXOriginalSeries:str = obj["MXOriginalSeries"]
      """  MXOriginalSeries  """  
      self.MXOriginalFolio:str = obj["MXOriginalFolio"]
      """  MXOriginalFolio  """  
      self.MXTaxRegime:str = obj["MXTaxRegime"]
      """  MXTaxRegime  """  
      self.MXOriginalString:str = obj["MXOriginalString"]
      """  MXOriginalString  """  
      self.MXPaymentName:str = obj["MXPaymentName"]
      """  MXPaymentName  """  
      self.EInvoice:bool = obj["EInvoice"]
      """  EInvoice  """  
      self.EInvStatus:int = obj["EInvStatus"]
      """  EInvStatus  """  
      self.EInvTimestamp:str = obj["EInvTimestamp"]
      """  EInvTimestamp  """  
      self.EInvUpdatedBy:str = obj["EInvUpdatedBy"]
      """  EInvUpdatedBy  """  
      self.EInvException:str = obj["EInvException"]
      """  EInvException  """  
      self.WithTaxConfirm:bool = obj["WithTaxConfirm"]
      """  Flagged that this invoice has taxes which were necessary or is necessary now.  """  
      self.UseAltBillToID:bool = obj["UseAltBillToID"]
      """  UseAltBillToID  """  
      self.MXCancelledDate:str = obj["MXCancelledDate"]
      """  MXCancelledDate  """  
      self.Overpaid:bool = obj["Overpaid"]
      """  Overpaid  """  
      self.OrdExchangeRate:int = obj["OrdExchangeRate"]
      """  OrdExchangeRate  """  
      self.PEAPPayNum:int = obj["PEAPPayNum"]
      """  PEAPPayNum  """  
      self.PEBankNumber:str = obj["PEBankNumber"]
      """  PEBankNumber  """  
      self.PECharges:int = obj["PECharges"]
      """  PECharges  """  
      self.PECommissions:int = obj["PECommissions"]
      """  PECommissions  """  
      self.PEDetTaxAmt:int = obj["PEDetTaxAmt"]
      """  PEDetTaxAmt  """  
      self.PEDetTaxCurrencyCode:str = obj["PEDetTaxCurrencyCode"]
      """  PEDetTaxCurrencyCode  """  
      self.PEDischargeAmt:int = obj["PEDischargeAmt"]
      """  PEDischargeAmt  """  
      self.PEDischargeDate:str = obj["PEDischargeDate"]
      """  PEDischargeDate  """  
      self.PEInterest:int = obj["PEInterest"]
      """  PEInterest  """  
      self.PENoPayPenalty:int = obj["PENoPayPenalty"]
      """  PENoPayPenalty  """  
      self.PESUNATDepAmt:int = obj["PESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.PESUNATDepDate:str = obj["PESUNATDepDate"]
      """  CSF Peru - SUNAT Deposit Date  """  
      self.PESUNATDepNum:str = obj["PESUNATDepNum"]
      """  CSF Peru -  SUNAT Deposit Number  """  
      self.PEBOEPosted:bool = obj["PEBOEPosted"]
      """  PEBOEPosted  """  
      self.DocPEInterest:int = obj["DocPEInterest"]
      """  DocPEInterest  """  
      self.DocPECommissions:int = obj["DocPECommissions"]
      """  DocPECommissions  """  
      self.DocPECharges:int = obj["DocPECharges"]
      """  DocPECharges  """  
      self.DocPENoPayPenalty:int = obj["DocPENoPayPenalty"]
      """  DocPENoPayPenalty  """  
      self.DocPEDischargeAmt:int = obj["DocPEDischargeAmt"]
      """  DocPEDischargeAmt  """  
      self.DocPEDetTaxAmt:int = obj["DocPEDetTaxAmt"]
      """  DocPEDetTaxAmt  """  
      self.Rpt1PEInterest:int = obj["Rpt1PEInterest"]
      """  Rpt1PEInterest  """  
      self.Rpt1PECommissions:int = obj["Rpt1PECommissions"]
      """  Rpt1PECommissions  """  
      self.Rpt1PECharges:int = obj["Rpt1PECharges"]
      """  Rpt1PECharges  """  
      self.Rpt1PENoPayPenalty:int = obj["Rpt1PENoPayPenalty"]
      """  Rpt1PENoPayPenalty  """  
      self.Rpt1PEDischargeAmt:int = obj["Rpt1PEDischargeAmt"]
      """  Rpt1PEDischargeAmt  """  
      self.Rpt2PEInterest:int = obj["Rpt2PEInterest"]
      """  Rpt2PEInterest  """  
      self.Rpt2PECommissions:int = obj["Rpt2PECommissions"]
      """  Rpt2PECommissions  """  
      self.Rpt2PECharges:int = obj["Rpt2PECharges"]
      """  Rpt2PECharges  """  
      self.Rpt2PENoPayPenalty:int = obj["Rpt2PENoPayPenalty"]
      """  Rpt2PENoPayPenalty  """  
      self.Rpt2PEDischargeAmt:int = obj["Rpt2PEDischargeAmt"]
      """  Rpt2PEDischargeAmt  """  
      self.Rpt3PEInterest:int = obj["Rpt3PEInterest"]
      """  Rpt3PEInterest  """  
      self.Rpt3PECommissions:int = obj["Rpt3PECommissions"]
      """  Rpt3PECommissions  """  
      self.Rpt3PECharges:int = obj["Rpt3PECharges"]
      """  Rpt3PECharges  """  
      self.Rpt3PENoPayPenalty:int = obj["Rpt3PENoPayPenalty"]
      """  Rpt3PENoPayPenalty  """  
      self.Rpt3PEDischargeAmt:int = obj["Rpt3PEDischargeAmt"]
      """  Rpt3PEDischargeAmt  """  
      self.OurSupplierCode:str = obj["OurSupplierCode"]
      """  Our Supplier Code  """  
      self.PEGuaranteeName:str = obj["PEGuaranteeName"]
      """  PEGuaranteeName  """  
      self.PEGuaranteeAddress1:str = obj["PEGuaranteeAddress1"]
      """  PEGuaranteeAddress1  """  
      self.PEGuaranteeAddress2:str = obj["PEGuaranteeAddress2"]
      """  PEGuaranteeAddress2  """  
      self.PEGuaranteeAddress3:str = obj["PEGuaranteeAddress3"]
      """  PEGuaranteeAddress3  """  
      self.PEGuaranteeCity:str = obj["PEGuaranteeCity"]
      """  PEGuaranteeCity  """  
      self.PEGuaranteeState:str = obj["PEGuaranteeState"]
      """  PEGuaranteeState  """  
      self.PEGuaranteeZip:str = obj["PEGuaranteeZip"]
      """  PEGuaranteeZip  """  
      self.PEGuaranteeCountry:str = obj["PEGuaranteeCountry"]
      """  PEGuaranteeCountry  """  
      self.PEGuaranteeTaxID:str = obj["PEGuaranteeTaxID"]
      """  PEGuaranteeTaxID  """  
      self.PEGuaranteePhoneNum:str = obj["PEGuaranteePhoneNum"]
      """  PEGuaranteePhoneNum  """  
      self.PEBOEStatus:str = obj["PEBOEStatus"]
      """  PEBOEStatus  """  
      self.PEBOEIsMultiGen:bool = obj["PEBOEIsMultiGen"]
      """  PEBOEIsMultiGen  """  
      self.PERefDocID:str = obj["PERefDocID"]
      """  PE Reference Document ID  """  
      self.PEReasonCode:str = obj["PEReasonCode"]
      """  PE Reason Code  """  
      self.PEReasonDesc:str = obj["PEReasonDesc"]
      """  PE Reason Description  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  TW GUI Code Seller  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  TW GUI Code Buyer  """  
      self.TWGUIExportDocumentName:str = obj["TWGUIExportDocumentName"]
      """  Document Name  """  
      self.TWGUIExportRemarks:str = obj["TWGUIExportRemarks"]
      """  Remarks  """  
      self.TWGUIExportVerification:str = obj["TWGUIExportVerification"]
      """  Verification  """  
      self.PEDebitNoteReasonCode:str = obj["PEDebitNoteReasonCode"]
      """  PEDebitNoteReasonCode  """  
      self.PEDebitNote:bool = obj["PEDebitNote"]
      """  PEDebitNote  """  
      self.MXPartPmt:bool = obj["MXPartPmt"]
      """  MXPartPmt  """  
      self.CNTaxInvoiceType:int = obj["CNTaxInvoiceType"]
      """  Tax Invoice Type  """  
      self.MXExportOperationType:str = obj["MXExportOperationType"]
      """  MXExportOperationType  """  
      self.MXExportCustDocCode:str = obj["MXExportCustDocCode"]
      """  MXExportCustDocCode  """  
      self.MXExportCertOriginNum:str = obj["MXExportCertOriginNum"]
      """  MXExportCertOriginNum  """  
      self.MXExportConfNum:str = obj["MXExportConfNum"]
      """  MXExportConfNum  """  
      self.MXExportCertOrigin:bool = obj["MXExportCertOrigin"]
      """  MXExportCertOrigin  """  
      self.MXIncoterm:str = obj["MXIncoterm"]
      """  MXIncoterm  """  
      self.AGDocConcept:int = obj["AGDocConcept"]
      """  AGDocConcept  """  
      self.EInvRefNum:str = obj["EInvRefNum"]
      """  Electronic Invoice reference number  """  
      self.ExportDocRefNum:str = obj["ExportDocRefNum"]
      """  Export document reference number  """  
      self.ExportDocDate:str = obj["ExportDocDate"]
      """  Export document date  """  
      self.INTaxTransactionID:str = obj["INTaxTransactionID"]
      """  Tax Transaction ID  """  
      self.MXMovingReasonFlag:bool = obj["MXMovingReasonFlag"]
      """  MXMovingReasonFlag  """  
      self.MXMovingReason:str = obj["MXMovingReason"]
      """  MXMovingReason  """  
      self.MXNumRegIdTrib:str = obj["MXNumRegIdTrib"]
      """  MXNumRegIdTrib  """  
      self.MXResidenCountryNum:int = obj["MXResidenCountryNum"]
      """  MXResidenCountryNum  """  
      self.MXPurchaseType:str = obj["MXPurchaseType"]
      """  MXPurchaseType  """  
      self.MXConfirmationCode:str = obj["MXConfirmationCode"]
      """  MXConfirmationCode  """  
      self.MXExternalCode:str = obj["MXExternalCode"]
      """  MXExternalCode  """  
      self.ServiceInvoice:bool = obj["ServiceInvoice"]
      """  This invoice was created via an integration with a third-party field service.  """  
      self.MXDomesticTransfer:bool = obj["MXDomesticTransfer"]
      """  MXDomesticTransfer  """  
      self.MXCancellationMode:str = obj["MXCancellationMode"]
      """  MXCancellationMode  """  
      self.INShippingPortCode:str = obj["INShippingPortCode"]
      """  Shipping Port Code  """  
      self.INExportProcedure:str = obj["INExportProcedure"]
      """  Export Procedure  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.DigitalSignature:str = obj["DigitalSignature"]
      """  DigitalSignature  """  
      self.SignedOn:str = obj["SignedOn"]
      """  SignedOn  """  
      self.SignedBy:str = obj["SignedBy"]
      """  SignedBy  """  
      self.FirstPrintDate:str = obj["FirstPrintDate"]
      """  FirstPrintDate  """  
      self.DocCopyNum:int = obj["DocCopyNum"]
      """  DocCopyNum  """  
      self.DepositBalance:int = obj["DepositBalance"]
      """  DepositBalance  """  
      self.DocDepositBalance:int = obj["DocDepositBalance"]
      """  DocDepositBalance  """  
      self.Rpt1DepositBalance:int = obj["Rpt1DepositBalance"]
      """  Rpt1DepositBalance  """  
      self.Rpt2DepositBalance:int = obj["Rpt2DepositBalance"]
      """  Rpt2DepositBalance  """  
      self.Rpt3DepositBalance:int = obj["Rpt3DepositBalance"]
      """  Rpt3DepositBalance  """  
      self.QuoteNum:int = obj["QuoteNum"]
      """  Quote number to which this invoice record is associated with.  """  
      self.HDCaseNum:int = obj["HDCaseNum"]
      """  The help desk case related to this invoice.  """  
      self.CreditOverride:bool = obj["CreditOverride"]
      """  Indicates that the credit hold was overridden for this invoice.  """  
      self.CreditOverrideDate:str = obj["CreditOverrideDate"]
      """  Description	Indicates that the credit hold was overridden for this invoice.	The date and time the user override the invoice credit hold.  """  
      self.CreditOverrideUserID:str = obj["CreditOverrideUserID"]
      """  The user id that override the invoice credit hold.  """  
      self.CreditHold:bool = obj["CreditHold"]
      """  Indicates the invoice is on credit hold.  Applicable to miscellaneous invoices only.  """  
      self.PEXMLType:int = obj["PEXMLType"]
      """  Peru Electronic Invoice XML Type  """  
      self.COCreditMemoReasonCode:str = obj["COCreditMemoReasonCode"]
      """  COCreditMemoReasonCode  """  
      self.CODebitMemoReasonCode:str = obj["CODebitMemoReasonCode"]
      """  CODebitMemoReasonCode  """  
      self.COReasonDesc:str = obj["COReasonDesc"]
      """  COReasonDesc  """  
      self.CODebitNote:bool = obj["CODebitNote"]
      """  CODebitNote  """  
      self.PEDetractionTranNum:int = obj["PEDetractionTranNum"]
      """  PEDetractionTranNum  """  
      self.PEProductCode:str = obj["PEProductCode"]
      """  PEProductCode  """  
      self.PECollectionGroupID:str = obj["PECollectionGroupID"]
      """  PECollectionGroupID  """  
      self.PECaptionCode:str = obj["PECaptionCode"]
      """  PE Caption Code  """  
      self.PECaption:str = obj["PECaption"]
      """  PE Caption Code Description  """  
      self.PERefDocumentType:str = obj["PERefDocumentType"]
      """  PE Reference DocumentType 1  """  
      self.PERefDocumentNumber:str = obj["PERefDocumentNumber"]
      """  PE Reference Document Number 1  """  
      self.PEDetrGoodServiceCode:str = obj["PEDetrGoodServiceCode"]
      """  PE Detraction good or service code  """  
      self.PERefDocumentType2:str = obj["PERefDocumentType2"]
      """  PE Reference DocumentType 2  """  
      self.PERefDocumentType3:str = obj["PERefDocumentType3"]
      """  PE Reference DocumentType 3  """  
      self.PERefDocumentType4:str = obj["PERefDocumentType4"]
      """  PE Reference DocumentType 4  """  
      self.PERefDocumentType5:str = obj["PERefDocumentType5"]
      """  PE Reference DocumentType 5  """  
      self.PERefDocumentNumber2:str = obj["PERefDocumentNumber2"]
      """  PE Reference Document Number 2  """  
      self.PERefDocumentNumber3:str = obj["PERefDocumentNumber3"]
      """  PE Reference Document Number 3  """  
      self.PERefDocumentNumber4:str = obj["PERefDocumentNumber4"]
      """  PE Reference Document Number 4  """  
      self.PERefDocumentNumber5:str = obj["PERefDocumentNumber5"]
      """  PE Reference Document Number 5  """  
      self.ELIEInvoice:bool = obj["ELIEInvoice"]
      """  E-invoice  """  
      self.ELIEInvStatus:int = obj["ELIEInvStatus"]
      """  Status of E-invoice (1 - Open, 2 - Generated, 3 - Sent, 4 - Error).  """  
      self.ELIEInvUpdatedBy:str = obj["ELIEInvUpdatedBy"]
      """  User Id of the person generated E-invoice.  """  
      self.ELIEInvException:str = obj["ELIEInvException"]
      """  E-invoice error description.  """  
      self.ELIEInvUpdatedOn:str = obj["ELIEInvUpdatedOn"]
      """  Date and Time of E-invoice generation.  """  
      self.COOperType:str = obj["COOperType"]
      """  COOperType  """  
      self.CentralCollection:bool = obj["CentralCollection"]
      """  Flag that indicates if the Invoice is for Central Collection.  """  
      self.CColChildCompany:str = obj["CColChildCompany"]
      """  Company that created this invoice.  """  
      self.CColParentCompany:str = obj["CColParentCompany"]
      """  Central Collection company.  """  
      self.CColOrderNum:int = obj["CColOrderNum"]
      """  Order number on the invoicing company.  """  
      self.CColChildInvoiceNum:int = obj["CColChildInvoiceNum"]
      """  Invoice number on the invoicing company.  """  
      self.CColInvoiceNum:int = obj["CColInvoiceNum"]
      """  Invoice number on central collection company  """  
      self.CColChildLegalNumber:str = obj["CColChildLegalNumber"]
      """  Legal number on the invoicing company invoice.  """  
      self.CColLegalNumber:str = obj["CColLegalNumber"]
      """  Legal number on central collection company.  """  
      self.CColInvoiceRef:int = obj["CColInvoiceRef"]
      """  Invoice reference on the Invoicing Company.  """  
      self.CColInvBal:int = obj["CColInvBal"]
      """  Invoice Balance in the Central Collection company.  """  
      self.DocCColInvBal:int = obj["DocCColInvBal"]
      """  Central Collection Doc Invoice Balance.  """  
      self.CColInvAmt:int = obj["CColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.DocCColInvAmt:int = obj["DocCColInvAmt"]
      """  Invoice Amount on the Invoicing Company.  """  
      self.Rpt1CColInvBal:int = obj["Rpt1CColInvBal"]
      """  Rpt 1 Parent Invoice Balance  """  
      self.Rpt2CColInvBal:int = obj["Rpt2CColInvBal"]
      """  Rpt 2 Parent Invoice Balance  """  
      self.Rpt3CColInvBal:int = obj["Rpt3CColInvBal"]
      """  Rpt 3 Parent Invoice Balance  """  
      self.Rpt1CColInvAmt:int = obj["Rpt1CColInvAmt"]
      """  Rpt 1 Child Invoice Amount  """  
      self.Rpt2CColInvAmt:int = obj["Rpt2CColInvAmt"]
      """  Rpt 2 Child Invoice Amount  """  
      self.Rpt3CColInvAmt:int = obj["Rpt3CColInvAmt"]
      """  Rpt 3 Child Invoice Amount  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.ELIEInvTerminalName:str = obj["ELIEInvTerminalName"]
      """  User terminal name  """  
      self.ELIEInvTerminalIP:str = obj["ELIEInvTerminalIP"]
      """  User terminal IP  """  
      self.Description:str = obj["Description"]
      """  GL Description  """  
      self.WithholdAcctToInterim:bool = obj["WithholdAcctToInterim"]
      """  WithholdAcctToInterim  """  
      self.CColOpenInvoice:bool = obj["CColOpenInvoice"]
      """  Indicates if the Central Collection parent invoice is open.  """  
      self.AGQRCodeData:str = obj["AGQRCodeData"]
      """  AGQRCodeData  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.ELIEInvID:str = obj["ELIEInvID"]
      """  EInvoice ID  """  
      self.CallNum:int = obj["CallNum"]
      """  this is a link to the service call that this invoice is for.  Linetype = "CALL"  """  
      self.CallLine:int = obj["CallLine"]
      """  this is a link to the service call line that this invoice is for.  Linetype = "CALL"  """  
      self.JobNum:str = obj["JobNum"]
      """  Associates the Call Line record back its linked jobnum  """  
      self.MXCancelReasonCode:str = obj["MXCancelReasonCode"]
      """  MXCancelReasonCode  """  
      self.MXSubstInvoiceNum:int = obj["MXSubstInvoiceNum"]
      """  MXSubstInvoiceNum  """  
      self.MXExportType:str = obj["MXExportType"]
      """  MXExportType  """  
      self.MXGlobalInvoicePeriod:str = obj["MXGlobalInvoicePeriod"]
      """  MXGlobalInvoicePeriod  """  
      self.MXGlobalInvoiceMonth:str = obj["MXGlobalInvoiceMonth"]
      """  MXGlobalInvoiceMonth  """  
      self.ELIEInvServiceProviderStatus:int = obj["ELIEInvServiceProviderStatus"]
      """  ELIEInvServiceProviderStatus  """  
      self.IncotermCode:str = obj["IncotermCode"]
      """  Incoterm Code  """  
      self.IncotermLocation:str = obj["IncotermLocation"]
      """  Incoterm Location  """  
      self.CovenantDiscPercent:int = obj["CovenantDiscPercent"]
      """  CovenantDiscPercent  """  
      self.TotalCovenantDiscount:int = obj["TotalCovenantDiscount"]
      """  TotalCovenantDiscount  """  
      self.DocCovenantDiscount:int = obj["DocCovenantDiscount"]
      """  DocCovenantDiscount  """  
      self.Rpt1CovenantDiscount:int = obj["Rpt1CovenantDiscount"]
      """  Rpt1CovenantDiscount  """  
      self.Rpt2CovenantDiscount:int = obj["Rpt2CovenantDiscount"]
      """  Rpt2CovenantDiscount  """  
      self.Rpt3CovenantDiscount:int = obj["Rpt3CovenantDiscount"]
      """  Rpt3CovenantDiscount  """  
      self.TotalInCovenantDiscount:int = obj["TotalInCovenantDiscount"]
      """  TotalInCovenantDiscount  """  
      self.DocInCovenantDiscount:int = obj["DocInCovenantDiscount"]
      """  DocInCovenantDiscount  """  
      self.Rpt1InCovenantDiscount:int = obj["Rpt1InCovenantDiscount"]
      """  Rpt1InCovenantDiscount  """  
      self.Rpt2InCovenantDiscount:int = obj["Rpt2InCovenantDiscount"]
      """  Rpt2InCovenantDiscount  """  
      self.ABAmt:int = obj["ABAmt"]
      """  Total advanced billing amount.  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      """  Indicates if changes can occur after the document has been printed  """  
      self.Rpt3InCovenantDiscount:int = obj["Rpt3InCovenantDiscount"]
      """  Rpt3InCovenantDiscount  """  
      self.ARPNHeadNum:int = obj["ARPNHeadNum"]
      """  ARPNHead's HeadNum  """  
      self.ARPromNoteID:str = obj["ARPromNoteID"]
      """  when InvcHead.PIPayment = O then populate ARPaymentInstrumentID with a value of PI.  """  
      self.AutoGenPN:bool = obj["AutoGenPN"]
      """  Auto generate payment instruments  """  
      self.AvailBTCustList:str = obj["AvailBTCustList"]
      """  Delimited list of available bill to customers.  """  
      self.BankForPI:str = obj["BankForPI"]
      """  Used for Bill of Exchange.  Indicates the bank to use when a payment instrument for the invoice is created.  """  
      self.BankForPIName:str = obj["BankForPIName"]
      self.BTCustID:str = obj["BTCustID"]
      """  Customer ID for the bill to customer (InvcHead.CustNum).  """  
      self.BTCustomerName:str = obj["BTCustomerName"]
      """  Bill to customer name.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CNGTIAction:str = obj["CNGTIAction"]
      self.CNGTIAddress:str = obj["CNGTIAddress"]
      self.CNGTIBankAccount:str = obj["CNGTIBankAccount"]
      self.CNGTIComment:str = obj["CNGTIComment"]
      self.CNGTICustomerName:str = obj["CNGTICustomerName"]
      self.CNGTIExportAddress:str = obj["CNGTIExportAddress"]
      self.CNGTIGrossInvcAmt:int = obj["CNGTIGrossInvcAmt"]
      """  CSF China, Gross Invoice Amount  """  
      self.CNGTIInvoiceAmt:int = obj["CNGTIInvoiceAmt"]
      """  CSF China, Total invoice amount = InvcHead.InvoiceAmt - InvcHead.WithholdAmt  """  
      self.CNGTINote:str = obj["CNGTINote"]
      self.CNGTIShipToNum:str = obj["CNGTIShipToNum"]
      self.CNGTIStatus1:str = obj["CNGTIStatus1"]
      self.CNGTIStatus2:bool = obj["CNGTIStatus2"]
      self.CNGTITaxCode:str = obj["CNGTITaxCode"]
      self.COIFRSCalculation:bool = obj["COIFRSCalculation"]
      """  IFRS Calculation. If the checkbox is not checked then all the elements below are disabled. If the checkbox is checked, then some elements below become enabled showing default values so that the NPV can be calculated  """  
      self.COIFRSEnabled:bool = obj["COIFRSEnabled"]
      """  If true then Colombia IFRS Net Present Value calculation is enabled  """  
      self.COIFRSFinancialCharge:int = obj["COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.COIFRSInterestRate:int = obj["COIFRSInterestRate"]
      self.COIFRSNumberOfPeriods:int = obj["COIFRSNumberOfPeriods"]
      """  Number of Periods for payment  """  
      self.COIFRSPresentValue:int = obj["COIFRSPresentValue"]
      """  Present Value  """  
      self.CollectionsInv:bool = obj["CollectionsInv"]
      """  Indicates if Invoice is in Collections (Peru localization)  """  
      self.ContactEmailAddr:str = obj["ContactEmailAddr"]
      """  Contact email address.  """  
      self.ContactFaxNum:str = obj["ContactFaxNum"]
      """  Contact fax number  """  
      self.ContactName:str = obj["ContactName"]
      """  Contact name  """  
      self.ContactPhoneNum:str = obj["ContactPhoneNum"]
      """  Contact phone number  """  
      self.ConvertedFromDep:bool = obj["ConvertedFromDep"]
      """  record converted from deposit  """  
      self.COOperTypeDesc:str = obj["COOperTypeDesc"]
      self.CountryIntrastat:bool = obj["CountryIntrastat"]
      """  True if the Country set for the current company contains an Intrastat code.  """  
      self.CumulativeBalance:int = obj["CumulativeBalance"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currncy switch used to determine what currency to display amounts in.  """  
      self.CurrentInstanceNum:int = obj["CurrentInstanceNum"]
      self.CustAllowOTS:bool = obj["CustAllowOTS"]
      self.CustOnCreditHold:bool = obj["CustOnCreditHold"]
      self.DepBal:int = obj["DepBal"]
      """  Deposit balance from CashHed  """  
      self.DepositCreditEnabled:bool = obj["DepositCreditEnabled"]
      """  Deposit credit enabled flag.  """  
      self.DirectDebiting:bool = obj["DirectDebiting"]
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """  The flag to indicate if Invoice Header Apply Date is supposed to be Read Only  """  
      self.DispBalDN:int = obj["DispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DisplayBillAddr:str = obj["DisplayBillAddr"]
      """  Bill to address in list format.  """  
      self.DisplayCreditCardNum:str = obj["DisplayCreditCardNum"]
      """  Display field for the masked credit card number  """  
      self.DisplayCurrencyID:str = obj["DisplayCurrencyID"]
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DNPmtAmt:int = obj["DNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocABAmt:int = obj["DocABAmt"]
      """  Document Total advanced billing amount.  """  
      self.DocCOIFRSFinancialCharge:int = obj["DocCOIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.DocCOIFRSPresentValue:int = obj["DocCOIFRSPresentValue"]
      """  Present Value  """  
      self.DocCumulativeBalance:int = obj["DocCumulativeBalance"]
      self.DocDepBal:int = obj["DocDepBal"]
      """  Document deposit amount from cashhead.  """  
      self.DocDispBalDN:int = obj["DocDispBalDN"]
      """  The net of Invoice Balance and unposted Debit Note value(s) applied to the invoice during one particular Cash Receipt application.  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocDNPmtAmt:int = obj["DocDNPmtAmt"]
      """  The unposted Debit Note value(s) applied to the invoice during the particular invoice payment transaction.  """  
      self.DocDspPrepDeposit:int = obj["DocDspPrepDeposit"]
      self.DocDspTaxAmt:int = obj["DocDspTaxAmt"]
      self.DocPESUNATDepAmt:int = obj["DocPESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.DocRemainTaxAmt:int = obj["DocRemainTaxAmt"]
      self.DocReverseTaxAmt:int = obj["DocReverseTaxAmt"]
      self.DocSATaxAmt:int = obj["DocSATaxAmt"]
      self.DocSourceRecurBalance:int = obj["DocSourceRecurBalance"]
      self.DocSubTotal:int = obj["DocSubTotal"]
      """  Document sub total  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document Total tax amount from InvcTax for Collection type 'Invoice'  """  
      self.DocVr:int = obj["DocVr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in document currency.  """  
      self.DocWHTaxAmt:int = obj["DocWHTaxAmt"]
      self.DspABAmt:int = obj["DspABAmt"]
      """  Display advance billing amount  """  
      self.DspDepBal:int = obj["DspDepBal"]
      """  Display deposit balance.  """  
      self.DspDepCr:int = obj["DspDepCr"]
      """  Display deposit credit.  """  
      self.DspDigitalSignature:str = obj["DspDigitalSignature"]
      self.DspDocABAmt:int = obj["DspDocABAmt"]
      """  Display document advance billing amount  """  
      self.DspDocDepBal:int = obj["DspDocDepBal"]
      """  Display document deposit balance  """  
      self.DspDocDepCr:int = obj["DspDocDepCr"]
      """  Display document deposit credit.  """  
      self.DspDocInvoiceAmt:int = obj["DspDocInvoiceAmt"]
      """  Display document invoice amount  """  
      self.DspDocInvoiceBal:int = obj["DspDocInvoiceBal"]
      """  Display document invoice balance  """  
      self.DspDocRounding:int = obj["DspDocRounding"]
      """  Display Invoice Doc Rounding  """  
      self.DspDocSubTotal:int = obj["DspDocSubTotal"]
      """  display document sub total  """  
      self.DspInvoiceAmt:int = obj["DspInvoiceAmt"]
      """  Display invoice amount  """  
      self.DspInvoiceBal:int = obj["DspInvoiceBal"]
      """  Display Invoice Balance.  """  
      self.DspInvoiceRef:int = obj["DspInvoiceRef"]
      """  Display invoice reference  """  
      self.DspPayDiscDays:str = obj["DspPayDiscDays"]
      self.DspPrepDeposit:int = obj["DspPrepDeposit"]
      self.DspRounding:int = obj["DspRounding"]
      """  Display Rounding in Base  """  
      self.dspSoldToCustID:str = obj["dspSoldToCustID"]
      """  If SoldTo and Alt-Bill to are the same, this displays as null.  """  
      self.DspSubTotal:int = obj["DspSubTotal"]
      """  Display sub total  """  
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      """  Indicates if assign legal number option is available.  """  
      self.EnableCentralCollection:bool = obj["EnableCentralCollection"]
      self.EnableSOCCDefaults:bool = obj["EnableSOCCDefaults"]
      """  Flag to determine if UseSOCCDefaults should be enabled.  """  
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Indicates if TranDocTypeID is available for input.  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      """  Indicates if the void legal number option is available  """  
      self.ERSInvoice:bool = obj["ERSInvoice"]
      """  It will be displayed to identify invoices automatically generated due ERS shipments.  """  
      self.ExchangeRateDate:str = obj["ExchangeRateDate"]
      """  Indicates which date to be used to calculate the exchange rate, I for Invoice Date, A for Apply Date.  """  
      self.GenedFromRMA:bool = obj["GenedFromRMA"]
      """  Flag for update of InvcHead to allow when group id is "RMACRREQ"  """  
      self.HasBank:bool = obj["HasBank"]
      """  CustBank record exists for customer  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      """  Indicates if a legal number configuration exists for ar invoices/credit memos  """  
      self.InPriceLn:bool = obj["InPriceLn"]
      """  In case if Invoice Header Tax Liability is not assigned this flag indicates if any of Invoice lines has Tax inclusive Tax Liability assinged  """  
      self.IntInvoiceType:str = obj["IntInvoiceType"]
      """  Integration invoice type.  Used for setting of InvoiceType.  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  InvoiceType description  """  
      self.IsDK:bool = obj["IsDK"]
      """  Denmark localization external field  """  
      self.IsIntrastatSensitive:bool = obj["IsIntrastatSensitive"]
      """  Set to true if intrastat is enabled.  """  
      self.IsLatestRecurrence:bool = obj["IsLatestRecurrence"]
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.IsPIUnappliedReceipt:bool = obj["IsPIUnappliedReceipt"]
      """  Indicates if the UR Invoice was created from an On Account PI instead of an on account cash receipt.  """  
      self.IsPMForGenPIType:bool = obj["IsPMForGenPIType"]
      self.LatestInvoice:int = obj["LatestInvoice"]
      self.LegalNumberMessage:str = obj["LegalNumberMessage"]
      """  Stores the message when a legal number is generated.  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.MXCancellationID:str = obj["MXCancellationID"]
      """  MXCancellationID  """  
      self.MXCancellationStatus:str = obj["MXCancellationStatus"]
      """  MXCancellationStatus  """  
      self.NeedConfirmTaxes:bool = obj["NeedConfirmTaxes"]
      """  It indicates that this Invoice has taxes, for which the confirmation is required.  """  
      self.NextDiscDate:str = obj["NextDiscDate"]
      """  This field is to display in Cash Receipt Entry the Discount Date that the payment will take.  """  
      self.NextInvoiceDate:str = obj["NextInvoiceDate"]
      """  NextInvoiceDate = InvcRecurringCycle.LastDate + RecurringCycle.Interval in RecurringCycle.Modifier units  """  
      self.PackSlipNum:int = obj["PackSlipNum"]
      """  Pack slip number from the 1st line item.  """  
      self.PaySchedEnabled:bool = obj["PaySchedEnabled"]
      """  Pay schedule enabled flag  """  
      self.PEBOEChangeStatusTo:str = obj["PEBOEChangeStatusTo"]
      """  Indicates what the user will change the status to  """  
      self.PEBOEStatusDesc:str = obj["PEBOEStatusDesc"]
      self.PECollectionsDate:str = obj["PECollectionsDate"]
      """  Peru CSF: Collections date  """  
      self.PEDetrGoodServiceCodeDesc:str = obj["PEDetrGoodServiceCodeDesc"]
      """  PE Detraction good or service code description  """  
      self.PEDspCurrencySymbol:str = obj["PEDspCurrencySymbol"]
      self.PEInCollections:bool = obj["PEInCollections"]
      """  Peru CSF: No if the invoice is moved out of collections, Yes if the invoice is moved into colletions.  """  
      self.PERefDocumentTypeDesc:str = obj["PERefDocumentTypeDesc"]
      """  PE Document Type Description  """  
      self.PERefDocumentTypeDesc2:str = obj["PERefDocumentTypeDesc2"]
      """  PE Document Type Description 2  """  
      self.PERefDocumentTypeDesc3:str = obj["PERefDocumentTypeDesc3"]
      """  PE Document Type Description 3  """  
      self.PERefDocumentTypeDesc4:str = obj["PERefDocumentTypeDesc4"]
      """  PE Document Type Description 4  """  
      self.PERefDocumentTypeDesc5:str = obj["PERefDocumentTypeDesc5"]
      """  PE Document Type Description 5  """  
      self.PIBankAcctID:str = obj["PIBankAcctID"]
      """  PI - Bank account  """  
      self.PICustBankDtl:bool = obj["PICustBankDtl"]
      """  PI Customer bank required  """  
      self.PIInitiation:str = obj["PIInitiation"]
      """  PI Initiation - generated or received  """  
      self.PrepDepositEnabled:bool = obj["PrepDepositEnabled"]
      """  Prep Deposit enabled flag.  """  
      self.ProposedTaxRgn:str = obj["ProposedTaxRgn"]
      """  The description of the proposed Tax Region  """  
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.Recurring:bool = obj["Recurring"]
      """  Recurring flag  """  
      self.RemainTaxAmt:int = obj["RemainTaxAmt"]
      self.ReminderSeq:int = obj["ReminderSeq"]
      self.ReversalDocAmt:int = obj["ReversalDocAmt"]
      """  Accumulate all reversal amounts of Credit Memos with the reference to the invoice  """  
      self.ReverseTaxAmt:int = obj["ReverseTaxAmt"]
      self.Rpt1ABAmt:int = obj["Rpt1ABAmt"]
      self.Rpt1COIFRSFinancialCharge:int = obj["Rpt1COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt1COIFRSPresentValue:int = obj["Rpt1COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt1CumulativeBalance:int = obj["Rpt1CumulativeBalance"]
      self.Rpt1DepBal:int = obj["Rpt1DepBal"]
      self.Rpt1DspABAmt:int = obj["Rpt1DspABAmt"]
      self.Rpt1DspDepBal:int = obj["Rpt1DspDepBal"]
      self.Rpt1DspDepCr:int = obj["Rpt1DspDepCr"]
      self.Rpt1DspInvoiceAmt:int = obj["Rpt1DspInvoiceAmt"]
      self.Rpt1DspInvoiceBal:int = obj["Rpt1DspInvoiceBal"]
      self.Rpt1DspPrepDeposit:int = obj["Rpt1DspPrepDeposit"]
      self.Rpt1DspRounding:int = obj["Rpt1DspRounding"]
      self.Rpt1DspSubTotal:int = obj["Rpt1DspSubTotal"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt1RemainTaxAmt:int = obj["Rpt1RemainTaxAmt"]
      self.Rpt1ReverseTaxAmt:int = obj["Rpt1ReverseTaxAmt"]
      self.Rpt1SATaxAmt:int = obj["Rpt1SATaxAmt"]
      self.Rpt1SourceRecurBalance:int = obj["Rpt1SourceRecurBalance"]
      self.Rpt1SubTotal:int = obj["Rpt1SubTotal"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt1Vr:int = obj["Rpt1Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt1 currency.  """  
      self.Rpt1WHTaxAmt:int = obj["Rpt1WHTaxAmt"]
      self.Rpt2ABAmt:int = obj["Rpt2ABAmt"]
      self.Rpt2COIFRSFinancialCharge:int = obj["Rpt2COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt2COIFRSPresentValue:int = obj["Rpt2COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt2CumulativeBalance:int = obj["Rpt2CumulativeBalance"]
      self.Rpt2DepBal:int = obj["Rpt2DepBal"]
      self.Rpt2DspABAmt:int = obj["Rpt2DspABAmt"]
      self.Rpt2DspDepBal:int = obj["Rpt2DspDepBal"]
      self.Rpt2DspDepCr:int = obj["Rpt2DspDepCr"]
      self.Rpt2DspInvoiceAmt:int = obj["Rpt2DspInvoiceAmt"]
      self.Rpt2DspInvoiceBal:int = obj["Rpt2DspInvoiceBal"]
      self.Rpt2DspPrepDeposit:int = obj["Rpt2DspPrepDeposit"]
      self.Rpt2DspRounding:int = obj["Rpt2DspRounding"]
      self.Rpt2DspSubTotal:int = obj["Rpt2DspSubTotal"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt2RemainTaxAmt:int = obj["Rpt2RemainTaxAmt"]
      self.Rpt2ReverseTaxAmt:int = obj["Rpt2ReverseTaxAmt"]
      self.Rpt2SATaxAmt:int = obj["Rpt2SATaxAmt"]
      self.Rpt2SourceRecurBalance:int = obj["Rpt2SourceRecurBalance"]
      self.Rpt2SubTotal:int = obj["Rpt2SubTotal"]
      self.Rpt2Taxamt:int = obj["Rpt2Taxamt"]
      self.Rpt2Vr:int = obj["Rpt2Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt2 currency.  """  
      self.Rpt2WHTaxAmt:int = obj["Rpt2WHTaxAmt"]
      self.Rpt3ABAmt:int = obj["Rpt3ABAmt"]
      self.Rpt3COIFRSFinancialCharge:int = obj["Rpt3COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt3COIFRSPresentValue:int = obj["Rpt3COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt3CumulativeBalance:int = obj["Rpt3CumulativeBalance"]
      self.Rpt3DepBal:int = obj["Rpt3DepBal"]
      self.Rpt3DspABAmt:int = obj["Rpt3DspABAmt"]
      self.Rpt3DspDepBal:int = obj["Rpt3DspDepBal"]
      self.Rpt3DspDepCr:int = obj["Rpt3DspDepCr"]
      self.Rpt3DspInvoiceAmt:int = obj["Rpt3DspInvoiceAmt"]
      self.Rpt3DspInvoiceBal:int = obj["Rpt3DspInvoiceBal"]
      self.Rpt3DspPrepDeposit:int = obj["Rpt3DspPrepDeposit"]
      self.Rpt3DspRounding:int = obj["Rpt3DspRounding"]
      self.Rpt3DspSubTotal:int = obj["Rpt3DspSubTotal"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.Rpt3RemainTaxAmt:int = obj["Rpt3RemainTaxAmt"]
      self.Rpt3ReverseTaxAmt:int = obj["Rpt3ReverseTaxAmt"]
      self.Rpt3SATaxAmt:int = obj["Rpt3SATaxAmt"]
      self.Rpt3SourceRecurBalance:int = obj["Rpt3SourceRecurBalance"]
      self.Rpt3SubTotal:int = obj["Rpt3SubTotal"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.Rpt3Vr:int = obj["Rpt3Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in Rpt3 currency.  """  
      self.Rpt3WHTaxAmt:int = obj["Rpt3WHTaxAmt"]
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.SalesRepCode1:str = obj["SalesRepCode1"]
      """  1st entry in SalesRepList  """  
      self.SalesRepCode2:str = obj["SalesRepCode2"]
      """  2nd entry in SalesRepList  """  
      self.SalesRepCode3:str = obj["SalesRepCode3"]
      """  3rd entry in SalesRepList.  """  
      self.SalesRepCode4:str = obj["SalesRepCode4"]
      """  4th entry in SalesRepList  """  
      self.SalesRepCode5:str = obj["SalesRepCode5"]
      """  5th entry in SalesRepList  """  
      self.SalesRepName1:str = obj["SalesRepName1"]
      """  1st sales rep name  """  
      self.SalesRepName2:str = obj["SalesRepName2"]
      """  2nd sales rep name  """  
      self.SalesRepName3:str = obj["SalesRepName3"]
      """  3rd sales rep name  """  
      self.SalesRepName4:str = obj["SalesRepName4"]
      """  4th sales rep name  """  
      self.SalesRepName5:str = obj["SalesRepName5"]
      """  5th sales rep name  """  
      self.SATaxAmt:int = obj["SATaxAmt"]
      self.Selected:bool = obj["Selected"]
      """  Boolean for selection of invoices in grid  """  
      self.SkipRecurring:bool = obj["SkipRecurring"]
      self.SoldToAddressList:str = obj["SoldToAddressList"]
      """  Sold to address list.  """  
      self.SoldToCustID:str = obj["SoldToCustID"]
      """  Sold to customer id  """  
      self.SoldToCustomerName:str = obj["SoldToCustomerName"]
      """  Sold to customer name.  """  
      self.SourceInvoiceNum:int = obj["SourceInvoiceNum"]
      self.SourceLastDate:str = obj["SourceLastDate"]
      self.SourceRecurBalance:int = obj["SourceRecurBalance"]
      self.SubTotal:int = obj["SubTotal"]
      """  Sub total for invoice  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  The system transaction type - ARInvoice or CreditMemo.  Used to filter combo list for TranDocTypeID.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total tax amount from InvcTax  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.TaxRgnLineChange:bool = obj["TaxRgnLineChange"]
      """  The flag to indicate if the user is supposed to be asked about Tax Liability change  """  
      self.TotalInstanceNum:int = obj["TotalInstanceNum"]
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.UseSOCCDefaults:bool = obj["UseSOCCDefaults"]
      """  If true, the credit card info will come from the sales order.  """  
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.VNInvDescription:str = obj["VNInvDescription"]
      self.VNInvoiceType:str = obj["VNInvoiceType"]
      self.Vr:int = obj["Vr"]
      """  Difference between Deposit Amount from invoice header and Total Line Amount in base currency.  """  
      self.WHTaxAmt:int = obj["WHTaxAmt"]
      self.XRateLabel:str = obj["XRateLabel"]
      """  Currency label  """  
      self.zEnableCreditHold:bool = obj["zEnableCreditHold"]
      self.AgingDays:int = obj["AgingDays"]
      """  The number of days the invoice is past due.  """  
      self.ELIEInvProhibitedStatuses:str = obj["ELIEInvProhibitedStatuses"]
      """   The list of prohibited statuses.for the Invoice
For examle, if contains 2 (EINVOICE_STATUS_GENERATED) then Generate E-invoice is not allowed.
if contains 2 (EINVOICE_STATUS_SENT) then Sending Invoice via Service provider is not allowed  """  
      self.EnableIncotermLocation:bool = obj["EnableIncotermLocation"]
      """  Flag indicating whether to enable Incoterm Location  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AGInvoicingPointDescription:str = obj["AGInvoicingPointDescription"]
      self.ARSystLNReqForInvc:bool = obj["ARSystLNReqForInvc"]
      self.CardTypeDescription:str = obj["CardTypeDescription"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrRateGrpDescription:str = obj["CurrRateGrpDescription"]
      self.CustomerInactive:bool = obj["CustomerInactive"]
      self.CustomerMXGeneralPublic:bool = obj["CustomerMXGeneralPublic"]
      self.CustomerCustID:str = obj["CustomerCustID"]
      self.CustomerBTName:str = obj["CustomerBTName"]
      self.CustomerName:str = obj["CustomerName"]
      self.CustomerELISendingOption:int = obj["CustomerELISendingOption"]
      self.FOBDescription:str = obj["FOBDescription"]
      self.IncotermsDescription:str = obj["IncotermsDescription"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.MXPurchaseTypeCodeDesc:str = obj["MXPurchaseTypeCodeDesc"]
      self.MXSubstInvoiceMXFiscalFolio:str = obj["MXSubstInvoiceMXFiscalFolio"]
      self.OrderNumCurrencyCode:str = obj["OrderNumCurrencyCode"]
      self.OrderNumCardMemberName:str = obj["OrderNumCardMemberName"]
      self.OurBankPayerRef:str = obj["OurBankPayerRef"]
      self.OurBankBankIdentifier:str = obj["OurBankBankIdentifier"]
      self.OurBankTypeCode:str = obj["OurBankTypeCode"]
      self.OurBankBankAcctID:str = obj["OurBankBankAcctID"]
      self.OurBankCheckingAccount:str = obj["OurBankCheckingAccount"]
      self.OurBankBankName:str = obj["OurBankBankName"]
      self.OurBankIBANCode:str = obj["OurBankIBANCode"]
      self.OurBankLocalBIC:str = obj["OurBankLocalBIC"]
      self.OurBankDescription:str = obj["OurBankDescription"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PlantName:str = obj["PlantName"]
      self.ProjectDescription:str = obj["ProjectDescription"]
      self.RecurringCycleMaximumValue:bool = obj["RecurringCycleMaximumValue"]
      self.SoldToCustNumInactive:bool = obj["SoldToCustNumInactive"]
      self.SoldToCustNumCustID:str = obj["SoldToCustNumCustID"]
      self.SoldToCustNumName:str = obj["SoldToCustNumName"]
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      self.TaxRegionDescription:str = obj["TaxRegionDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.XbSystOCRCalcType:bool = obj["XbSystOCRCalcType"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcHeadTransferListRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CreditMemo:bool = obj["CreditMemo"]
      """  Indicates the type of document. Yes = credit memo, No = Invoice. This value can't be cahgned after the record has been created. Credit memos affect the way detail quantities and amounts are stored in the database. They will always be sotred with a negative sign but will be entered as positive.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode  """  
      self.CustomerCustID:str = obj["CustomerCustID"]
      """  A user defined external customer ID. This must be unique within the file. This ID may be used in certain screen displays or reports wehre a full customer name is nappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change it. This change is allowed because the system i snot using the Cust ID as a foreign key in any other file. Rather, it uses the CustNum field.  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records. This field has a positive  sign (credit memos are negative).  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is copied from the InvcGrp record.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices thata are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld= false. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted. The manufacturing system sets this flag when creating invoices for order line items which had been flagged for "Time & material invoiceing" (OrderDtl.TMBilling).  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  If this field is left blank the system assigns teh next available number on the file or the XaSyst.StartInvNum.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  There are four types of invoices: "Shp" = invoice shipment, "Adv" = Advanced Billing, "Dep" = For Deposit Payments and "Mis" = Miscellaneous. The setting of this field affects invoice entry.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The legal number for the record. This number is created based on the setup parameters in the LegalNumber table.  """  
      self.SelectedForAction:bool = obj["SelectedForAction"]
      """  Preserves the Selected satus of the rows.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcMiscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this misc. charge.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Miscellaneous Charge code  """  
      self.Description:str = obj["Description"]
      """  Description  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  Miscellaneous line amount. Base Currency.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  Miscellaneous line amount. Document Currency.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Misc. record. Defaults from the MiscChg master.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  Includes taxes  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  Includes taxes  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  OrgInvcLine  """  
      self.OrgInvcSeq:int = obj["OrgInvcSeq"]
      """  OrgInvcSeq  """  
      self.MXProdServCode:str = obj["MXProdServCode"]
      """  MXProdServCode  """  
      self.ICPONum:int = obj["ICPONum"]
      """  ICPONum  """  
      self.ICPOLine:int = obj["ICPOLine"]
      """  ICPOLine  """  
      self.ICPOSeqNum:int = obj["ICPOSeqNum"]
      """  ICPOSeqNum  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol from InvcHead  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol.  """  
      self.DspDocMiscAmt:int = obj["DspDocMiscAmt"]
      """  Display document misc. amt  """  
      self.DspMiscAmt:int = obj["DspMiscAmt"]
      """  Display misc. amt  """  
      self.GroupID:str = obj["GroupID"]
      """  Group ID for the invoice  """  
      self.Rpt1DspMiscAmt:int = obj["Rpt1DspMiscAmt"]
      self.Rpt2DspMiscAmt:int = obj["Rpt2DspMiscAmt"]
      self.Rpt3DspMiscAmt:int = obj["Rpt3DspMiscAmt"]
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceLineLineDesc:str = obj["InvoiceLineLineDesc"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcRecurrRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      self.Company:str = obj["Company"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      self.DueDate:str = obj["DueDate"]
      self.InstanceNum:int = obj["InstanceNum"]
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.InvoiceRef:int = obj["InvoiceRef"]
      self.InvoiceSuffix:str = obj["InvoiceSuffix"]
      self.LegalNumber:str = obj["LegalNumber"]
      self.Posted:bool = obj["Posted"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcReminderRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Unique Invoice number  """  
      self.GroupCode:str = obj["GroupCode"]
      """  Reminder Group Code  """  
      self.Sequence:int = obj["Sequence"]
      """  Reminder Sequence  """  
      self.GenDate:str = obj["GenDate"]
      """  The date when the letter was generated.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the invoice.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  InvoiceType  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date is duplicated from the InvcGrp record.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LetterNum:int = obj["LetterNum"]
      """  Unique Letter Num.  """  
      self.FinChargeAmt:int = obj["FinChargeAmt"]
      """  Financial charge amount  """  
      self.Payments:int = obj["Payments"]
      """  Number of Payments  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CustNum:int = obj["CustNum"]
      self.CustID:str = obj["CustID"]
      self.FinChargeCode:str = obj["FinChargeCode"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.PayDueDate:str = obj["PayDueDate"]
      """  Specifies the due date of the Scheduled payment.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DspDocPayAmount:int = obj["DspDocPayAmount"]
      """  Display Document Payment Amount (Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.)  """  
      self.DspPayAmount:int = obj["DspPayAmount"]
      """  Display Payment Amount (Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.)  """  
      self.Rpt1DspPayAmount:int = obj["Rpt1DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2DspPayAmount:int = obj["Rpt2DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3DspPayAmount:int = obj["Rpt3DspPayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency Switch used to determine what currency to display amounts in.  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_InvcTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Foreign key to the InvcHead.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Part of the foreign key used to relate back to a InvcDtl or InvcMisc record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  InvcDtl.TaxCode and InvcDtl/InvcMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount ((Qty*unitprice)-discount) or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable Amount for this line item/Misc charge. This value is set as an accumulation of non-exempt sales amount from the line and its associated miscellaneous records.  It could be tax exempt for two reasons, either the customer is exempt (invcdtl.TaxExempt > blank) or the item is exempt. In either case the detail amounts would not be added into the taxable amount.  To see if the item is exempt use the InvcDt/InvcMisc.TaxCat and the InvcTax.TaxCode to find a record in the SalesTxC. If a record is  found then it is exempt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount. This is user maintainable and also defaulted when/if the user changes the tax code, tax percent or the taxable amount or the tax classification changes to non-taxable when the InvcDtl.TaxCat is changed.  They can override the calculated figure to provide for any tax calculations other than the simple percent of taxable. No tax is calculated when the InvcDtl.TaxExempt <> blank or a record is found in the SalesTxC file indicating that this item is not taxable. Otherwise it is calculated as TaxableAmt * Percent.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  Userid of user who made the last change to this record.  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  The date that the record was last changed  """  
      self.ChangeTime:int = obj["ChangeTime"]
      """  The time that the record was last change (seconds since midnight)  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution Date  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Tax Rate Date  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.RateTextCode:str = obj["RateTextCode"]
      """  Legal Text code  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.OrgInvcLine:int = obj["OrgInvcLine"]
      """  OrgInvcLine  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ConfirmationDate:str = obj["ConfirmationDate"]
      """  ConfirmationDate  """  
      self.ApplyConfirmationDate:str = obj["ApplyConfirmationDate"]
      """  ApplyConfirmationDate  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  TranDocTypeID  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  LegalNumber  """  
      self.TaxConfirm:bool = obj["TaxConfirm"]
      """  TaxConfirm  """  
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  AllocDepInvcNum  """  
      self.AllocDepInvcLine:int = obj["AllocDepInvcLine"]
      """  AllocDepInvcLine  """  
      self.AllocDepRateCode:str = obj["AllocDepRateCode"]
      """  AllocDepRateCode  """  
      self.AllocDepECAcqSeq:int = obj["AllocDepECAcqSeq"]
      """  AllocDepECAcqSeq  """  
      self.AllocDepTaxBal:int = obj["AllocDepTaxBal"]
      """  AllocDepTaxBal  """  
      self.DocAllocTaxBal:int = obj["DocAllocTaxBal"]
      """  DocAllocTaxBal  """  
      self.Rpt1AllocDepTaxBal:int = obj["Rpt1AllocDepTaxBal"]
      """  Rpt1AllocDepTaxBal  """  
      self.Rpt2AllocDepTaxBal:int = obj["Rpt2AllocDepTaxBal"]
      """  Rpt2AllocDepTaxBal  """  
      self.Rpt3AllocDepTaxBal:int = obj["Rpt3AllocDepTaxBal"]
      """  Rpt3AllocDepTaxBal  """  
      self.TaxReverseDate:str = obj["TaxReverseDate"]
      """  TaxReverseDate  """  
      self.ReverseByInvoiceNum:int = obj["ReverseByInvoiceNum"]
      """  ReverseByInvoiceNum  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  Exempt Reason Code  """  
      self.ConfirmDate:str = obj["ConfirmDate"]
      """  Date when confirmation of this tax was done.  """  
      self.ConfirmDocType:str = obj["ConfirmDocType"]
      """  Transaction Document Type for Confirmation.  """  
      self.ConfirmLegalNumber:str = obj["ConfirmLegalNumber"]
      """  Legal Number for Confirmation.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency switch used to determine what currency to display amounts in.  """  
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Description - Collection Type  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DspDocFixedAmount:int = obj["DspDocFixedAmount"]
      """  Display Fixed Amount in document currency  """  
      self.DspDocReportableAmt:int = obj["DspDocReportableAmt"]
      """  Display document reportable amt  """  
      self.DspDocTaxableAmt:int = obj["DspDocTaxableAmt"]
      """  Display documents taxable amt  """  
      self.DspDocTaxAmt:int = obj["DspDocTaxAmt"]
      """  Display document tax amt  """  
      self.DspDocTaxAmtVar:int = obj["DspDocTaxAmtVar"]
      self.DspFixedAmount:int = obj["DspFixedAmount"]
      """  Displaed  Fixed part of the amount of the tax in base currency  """  
      self.DspReportableAmt:int = obj["DspReportableAmt"]
      """  Display reportable amt  """  
      self.DspTaxableAmt:int = obj["DspTaxableAmt"]
      """  Display taxable amount  """  
      self.DspTaxAmt:int = obj["DspTaxAmt"]
      """  Display tax amt  """  
      self.DspTaxAmtVar:int = obj["DspTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      """  Group associated to the invoice  """  
      self.NeedConfirmation:bool = obj["NeedConfirmation"]
      """  It indicates that for this tax need confirmation.  """  
      self.RateCodeAmt:int = obj["RateCodeAmt"]
      """  store the value of the rate.  """  
      self.Rpt1DspFixedAmount:int = obj["Rpt1DspFixedAmount"]
      self.Rpt1DspReportableAmt:int = obj["Rpt1DspReportableAmt"]
      self.Rpt1DspTaxableAmt:int = obj["Rpt1DspTaxableAmt"]
      self.Rpt1DspTaxAmt:int = obj["Rpt1DspTaxAmt"]
      self.Rpt1DspTaxAmtVar:int = obj["Rpt1DspTaxAmtVar"]
      self.Rpt2DspFixedAmount:int = obj["Rpt2DspFixedAmount"]
      self.Rpt2DspReportableAmt:int = obj["Rpt2DspReportableAmt"]
      self.Rpt2DspTaxableAmt:int = obj["Rpt2DspTaxableAmt"]
      self.Rpt2DspTaxAmt:int = obj["Rpt2DspTaxAmt"]
      self.Rpt2DspTaxAmtVar:int = obj["Rpt2DspTaxAmtVar"]
      self.Rpt3DspFixedAmount:int = obj["Rpt3DspFixedAmount"]
      self.Rpt3DspReportableAmt:int = obj["Rpt3DspReportableAmt"]
      self.Rpt3DspTaxableAmt:int = obj["Rpt3DspTaxableAmt"]
      self.Rpt3DspTaxAmt:int = obj["Rpt3DspTaxAmt"]
      self.Rpt3DspTaxAmtVar:int = obj["Rpt3DspTaxAmtVar"]
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales tax code description  """  
      self.TaxTotal:int = obj["TaxTotal"]
      """  Total of the taxes for an invoice  """  
      self.ApplyConfirmDate:str = obj["ApplyConfirmDate"]
      """  Apply Date of tax confirmation process.  """  
      self.ChangeDateTime:str = obj["ChangeDateTime"]
      """  The date and time that the record was last changed  """  
      self.FSAAction:str = obj["FSAAction"]
      """  Has the Transaction Type field set in FSA and is stored on FSAExtData db table.  """  
      self.FSACallCode:str = obj["FSACallCode"]
      """  Is the Call Type created on ERP and mapped through System External Key table with Service Type in FSA, stored on FSAExtData db table.  """  
      self.FSAContractCode:str = obj["FSAContractCode"]
      """  Contract Code created on ERP and processed by FSA, stored on FSAExtData db table.  """  
      self.FSAContractNum:int = obj["FSAContractNum"]
      """  Contract created in ERP generated on FSA as Service Agreement, stored on FSAExtData db table.  """  
      self.FSAEquipmentInstallID:int = obj["FSAEquipmentInstallID"]
      """  Resource ID for Equipment in FSAOffice ( this can be found in the Equipment information/Administrative tab in the Resource ID). Stored on FSAExtData db table.  """  
      self.FSAEquipmentPartNum:str = obj["FSAEquipmentPartNum"]
      """  Part created as equipment in ERP and Installed through FSA process, stored in FSAExtData.  """  
      self.FSAServiceOrderNum:int = obj["FSAServiceOrderNum"]
      """  Service Order number generated on FSA, stored on FSAExtData db table.  """  
      self.FSAServiceOrderResourceNum:int = obj["FSAServiceOrderResourceNum"]
      """  Service Order Resource generated on FSA, stored on FSAExtData db table.  """  
      self.WarrantyCode:str = obj["WarrantyCode"]
      """  Warranty linked to part and processed by FSA, stored on FSAExtData db table.  """  
      self.IntExternalKey:str = obj["IntExternalKey"]
      """  Unique identifier of related integration record.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceLineLineDesc:str = obj["InvoiceLineLineDesc"]
      self.InvoiceNumCardMemberName:str = obj["InvoiceNumCardMemberName"]
      self.InvoiceNumTermsCode:str = obj["InvoiceNumTermsCode"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.SalesTaxDescDescription:str = obj["SalesTaxDescDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.LegalNumberID:str = obj["LegalNumberID"]
      self.TransYear:int = obj["TransYear"]
      self.TransYearSuffix:str = obj["TransYearSuffix"]
      self.DspTransYear:str = obj["DspTransYear"]
      self.ShowDspTransYear:bool = obj["ShowDspTransYear"]
      """  Indicates if DspTransYear should be displayed when prompting for a manual number.  """  
      self.Prefix:str = obj["Prefix"]
      self.PrefixList:str = obj["PrefixList"]
      """  The list of prefixes that can be selected by the user for manual numbers.  """  
      self.NumberSuffix:str = obj["NumberSuffix"]
      """  The suffix portion of the legal number.  """  
      self.EnablePrefix:bool = obj["EnablePrefix"]
      """  Indicates if the prefix can be entered by the user.  """  
      self.EnableSuffix:bool = obj["EnableSuffix"]
      """  Indicates if the suffix (number) can be entered by the user.  """  
      self.NumberOption:str = obj["NumberOption"]
      self.DocumentDate:str = obj["DocumentDate"]
      self.GenerationType:str = obj["GenerationType"]
      self.Description:str = obj["Description"]
      self.TransPeriod:int = obj["TransPeriod"]
      self.PeriodPrefix:str = obj["PeriodPrefix"]
      """  Prefix for the period  """  
      self.ShowTransPeriod:bool = obj["ShowTransPeriod"]
      self.LegalNumber:str = obj["LegalNumber"]
      """  Used when the full legal number is entered  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.TranDocTypeID2:str = obj["TranDocTypeID2"]
      self.GenerationOption:str = obj["GenerationOption"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_MXInvcHeadFiscalTextRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.FiscalTextSeq:int = obj["FiscalTextSeq"]
      """  FiscalTextSeq  """  
      self.TaxProv:str = obj["TaxProv"]
      """  TaxProv  """  
      self.Rule:str = obj["Rule"]
      """  Rule  """  
      self.FiscalText:str = obj["FiscalText"]
      """  FiscalText  """  
      self.IncludeInXML:bool = obj["IncludeInXML"]
      """  IncludeInXML  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_MXInvcRefRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.RefInvoiceNum:int = obj["RefInvoiceNum"]
      """  RefInvoiceNum  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  CreatedBy  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  CreatedOn  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.InvoiceRelationType:str = obj["InvoiceRelationType"]
      """  Invoice Relation Type  """  
      self.ApplyDate:str = obj["ApplyDate"]
      self.CreditMemo:bool = obj["CreditMemo"]
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      self.HoldInvoice:bool = obj["HoldInvoice"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.InvoiceType:str = obj["InvoiceType"]
      self.TempRefInvoiceNum:str = obj["TempRefInvoiceNum"]
      self.CustID:str = obj["CustID"]
      """  Customer ID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PEDetractionsTableset:
   def __init__(self, obj):
      self.PEHedTaxSum:list[Erp_Tablesets_PEHedTaxSumRow] = obj["PEHedTaxSum"]
      self.PEInvcTax:list[Erp_Tablesets_PEInvcTaxRow] = obj["PEInvcTax"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_PEHedTaxSumRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.TaxCode:str = obj["TaxCode"]
      """  Tax code  """  
      self.RateCode:str = obj["RateCode"]
      """  Rate Code on the Header Tax Summary  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Currency display switch  """  
      self.DisplaySymbol:str = obj["DisplaySymbol"]
      """  Currency display symbol  """  
      self.DocDisplaySymbol:str = obj["DocDisplaySymbol"]
      """  Document display symbol  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Document reportable amount.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Document taxable amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Document tax amount.  """  
      self.HedNum:int = obj["HedNum"]
      """  Order or Quote number this tax summary relates to.  """  
      self.Percent:int = obj["Percent"]
      """  Tax percent  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax amount  """  
      self.TaxDescription:str = obj["TaxDescription"]
      """  Sales Tax description  """  
      self.GroupID:str = obj["GroupID"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      self.AllocDepInvcNum:int = obj["AllocDepInvcNum"]
      """  Invoice Number of allocated Deposits  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PEInvcTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax Code  """  
      self.RateCode:str = obj["RateCode"]
      """  Rate Code  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  EC Acquisition Sequence  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Reportable Amount  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  Reportable Amount in Document Currency  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable Amount in Document Currency  """  
      self.Percent:int = obj["Percent"]
      """  Percent  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax Amount  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Tax Amount in Document Currency  """  
      self.Manual:bool = obj["Manual"]
      """  Manually Added Tax  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type  """  
      self.Timing:int = obj["Timing"]
      """  Timing  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exempt Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exempt Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution Date  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Tax Rate Date  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Default Taxable Amount  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Default Taxable Amount  in Document Currency  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Default Tax Amount  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Default Tax Amount in Document Currency  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  Manually Added Tax  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Detractions Tax Amount  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Amount  """  
      self.TextCode:str = obj["TextCode"]
      """  Text Code  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Tax Amount Variance  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Tax Amount Variance in Document Currency  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PaymentTotalsRow:
   def __init__(self, obj):
      self.CashRcv:int = obj["CashRcv"]
      self.DocCashRcv:int = obj["DocCashRcv"]
      self.DocDscTaken:int = obj["DocDscTaken"]
      self.DocGainReal:int = obj["DocGainReal"]
      self.DocGainUnreal:int = obj["DocGainUnreal"]
      self.DscTaken:int = obj["DscTaken"]
      self.GainReal:int = obj["GainReal"]
      self.GainUnreal:int = obj["GainUnreal"]
      self.RevalDate:str = obj["RevalDate"]
      self.Rpt1CashRcv:int = obj["Rpt1CashRcv"]
      self.Rpt1DscTaken:int = obj["Rpt1DscTaken"]
      self.Rpt1GainReal:int = obj["Rpt1GainReal"]
      self.Rpt1GainUnreal:int = obj["Rpt1GainUnreal"]
      self.Rpt2CashRcv:int = obj["Rpt2CashRcv"]
      self.Rpt2DscTaken:int = obj["Rpt2DscTaken"]
      self.Rpt2GainReal:int = obj["Rpt2GainReal"]
      self.Rpt2GainUnreal:int = obj["Rpt2GainUnreal"]
      self.Rpt3CashRcv:int = obj["Rpt3CashRcv"]
      self.Rpt3DscTaken:int = obj["Rpt3DscTaken"]
      self.Rpt3GainReal:int = obj["Rpt3GainReal"]
      self.Rpt3GainUnreal:int = obj["Rpt3GainUnreal"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RebateInvRow:
   def __init__(self, obj):
      self.Active:bool = obj["Active"]
      self.Company:str = obj["Company"]
      self.CustNum:int = obj["CustNum"]
      self.RebateDesc:str = obj["RebateDesc"]
      self.RebateID:str = obj["RebateID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RebateInvTableset:
   def __init__(self, obj):
      self.RebateInv:list[Erp_Tablesets_RebateInvRow] = obj["RebateInv"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_RecurringInvTableset:
   def __init__(self, obj):
      self.InvcRecurr:list[Erp_Tablesets_InvcRecurrRow] = obj["InvcRecurr"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_UpdExtARInvoiceTableset:
   def __init__(self, obj):
      self.InvcHead:list[Erp_Tablesets_InvcHeadRow] = obj["InvcHead"]
      self.InvcHeadAttch:list[Erp_Tablesets_InvcHeadAttchRow] = obj["InvcHeadAttch"]
      self.AllocDeposit:list[Erp_Tablesets_AllocDepositRow] = obj["AllocDeposit"]
      self.CentralCollectionPayment:list[Erp_Tablesets_CentralCollectionPaymentRow] = obj["CentralCollectionPayment"]
      self.InvcDtl:list[Erp_Tablesets_InvcDtlRow] = obj["InvcDtl"]
      self.InvcDtlAttch:list[Erp_Tablesets_InvcDtlAttchRow] = obj["InvcDtlAttch"]
      self.InvcChrg:list[Erp_Tablesets_InvcChrgRow] = obj["InvcChrg"]
      self.InvcDeferredRev:list[Erp_Tablesets_InvcDeferredRevRow] = obj["InvcDeferredRev"]
      self.InvcDtlRASch:list[Erp_Tablesets_InvcDtlRASchRow] = obj["InvcDtlRASch"]
      self.InvcMisc:list[Erp_Tablesets_InvcMiscRow] = obj["InvcMisc"]
      self.InvcTax:list[Erp_Tablesets_InvcTaxRow] = obj["InvcTax"]
      self.InvcDtlTGLC:list[Erp_Tablesets_InvcDtlTGLCRow] = obj["InvcDtlTGLC"]
      self.InvcSched:list[Erp_Tablesets_InvcSchedRow] = obj["InvcSched"]
      self.MXInvcHeadFiscalText:list[Erp_Tablesets_MXInvcHeadFiscalTextRow] = obj["MXInvcHeadFiscalText"]
      self.MXInvcRef:list[Erp_Tablesets_MXInvcRefRow] = obj["MXInvcRef"]
      self.HedTaxSum:list[Erp_Tablesets_HedTaxSumRow] = obj["HedTaxSum"]
      self.LegalNumGenOpts:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["LegalNumGenOpts"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class GenerateAmortizationScheduleRowMod_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GenerateAmortizationScheduleRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GenerateAmortizationSchedule_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GenerateAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GenerateRebateInv_input:
   """ Required : 
   invoiceType
   groupID
   ds
   vExDate
   vUseDate
   pCurrList
   pRateList
   """  
   def __init__(self, obj):
      self.invoiceType:str = obj["invoiceType"]
      self.groupID:str = obj["groupID"]
      self.ds:list[Erp_Tablesets_RebateInvTableset] = obj["ds"]
      self.vExDate:str = obj["vExDate"]
      self.vUseDate:int = obj["vUseDate"]
      self.pCurrList:str = obj["pCurrList"]
      self.pRateList:str = obj["pRateList"]
      pass

class GenerateRebateInv_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMsg:str = obj["parameters"]
      self.vExDate:str = obj["parameters"]
      self.vUseDate:int = obj["parameters"]
      self.pCurrList:str = obj["parameters"]
      self.pRateList:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetARUninvoicedDropShipments_input:
   """ Required : 
   GroupID
   CustNums
   PlantChoice
   BillToFlag
   OnlyNotInvoiced
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustNums:str = obj["CustNums"]
      """  A list customer numbers  """  
      self.PlantChoice:str = obj["PlantChoice"]
      """  Current or All  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.OnlyNotInvoiced:bool = obj["OnlyNotInvoiced"]
      """  All or Only Not Invoiced for better performance  """  
      pass

class GetARUninvoicedDropShipments_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["returnObj"]
      pass

class GetAvailBoEStatuses_input:
   """ Required : 
   IPCurrentStage
   """  
   def __init__(self, obj):
      self.IPCurrentStage:str = obj["IPCurrentStage"]
      pass

class GetAvailBoEStatuses_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetAvailNOEInvoiceTranDocTypes_input:
   """ Required : 
   ipEInvoice
   ipSysTranType
   ipCreditMemo
   ipBTCustID
   ipInvType
   """  
   def __init__(self, obj):
      self.ipEInvoice:bool = obj["ipEInvoice"]
      """  E-Invoice flag  """  
      self.ipSysTranType:str = obj["ipSysTranType"]
      """  System Transaction Type  """  
      self.ipCreditMemo:bool = obj["ipCreditMemo"]
      """  Is Credit Memo  """  
      self.ipBTCustID:str = obj["ipBTCustID"]
      """  Bill To Customer ID  """  
      self.ipInvType:str = obj["ipInvType"]
      """  Invoice Type  """  
      pass

class GetAvailNOEInvoiceTranDocTypes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opListAvailTranDocTypes:str = obj["parameters"]
      self.opDefTranDocType:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetAvailTranDocTypes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.AvailTypes:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetByBOEInvoiceNum_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  The invoice num  """  
      pass

class GetByBOEInvoiceNum_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class GetByID_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetByID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class GetBySysRowID_input:
   """ Required : 
   id
   """  
   def __init__(self, obj):
      self.id:str = obj["id"]
      pass

class GetBySysRowID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class GetBySysRowIDs_input:
   """ Required : 
   ids
   """  
   def __init__(self, obj):
      self.ids:str = obj["ids"]
      pass

class GetBySysRowIDs_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class GetCancellationInvoice_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   newInvoiceDate
   newDocType
   recalculateTaxes
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:int = obj["sourceInvoiceNum"]
      """  Invoice num which should be cancelled  """  
      self.newInvoiceDate:str = obj["newInvoiceDate"]
      """  Date of new invoice  """  
      self.newDocType:str = obj["newDocType"]
      self.recalculateTaxes:bool = obj["recalculateTaxes"]
      pass

class GetCancellationInvoice_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class GetClaimCreditsSearch_input:
   """ Required : 
   custList
   """  
   def __init__(self, obj):
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      pass

class GetClaimCreditsSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetClaimCreditsTableset] = obj["returnObj"]
      pass

class GetClaimCredits_input:
   """ Required : 
   GroupID
   custList
   invList
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      self.invList:str = obj["invList"]
      """  A list of ~ delimited invoice numbers.  """  
      pass

class GetClaimCredits_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.claimCreditsMessage:str = obj["parameters"]
      self.InvoicesCreated:bool = obj["InvoicesCreated"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetCodeDescList_input:
   """ Required : 
   tableName
   fieldName
   """  
   def __init__(self, obj):
      self.tableName:str = obj["tableName"]
      self.fieldName:str = obj["fieldName"]
      pass

class GetCodeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetCurrencyBase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opCurrencyBase:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetDefaultAccount_input:
   """ Required : 
   groupID
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Group ID  """  
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number  """  
      self.invoiceLine:int = obj["invoiceLine"]
      """  Invoice line number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetDefaultAccount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDefaultDepPayDates_input:
   """ Required : 
   dayInterval
   """  
   def __init__(self, obj):
      self.dayInterval:int = obj["dayInterval"]
      pass

class GetDefaultDepPayDates_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.FromDate:str = obj["parameters"]
      self.ToDate:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetDefaultDepPayToDate_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetDefaultDocType_input:
   """ Required : 
   creditMemo
   custNum
   invoiceType
   """  
   def __init__(self, obj):
      self.creditMemo:bool = obj["creditMemo"]
      self.custNum:int = obj["custNum"]
      self.invoiceType:str = obj["invoiceType"]
      pass

class GetDefaultDocType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.TranDocTypeDescription:str = obj["parameters"]
      self.TranDocTypeID:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetDepositsToConvert_input:
   """ Required : 
   custNums
   fromDate
   toDate
   """  
   def __init__(self, obj):
      self.custNums:str = obj["custNums"]
      """  A list customer numbers  """  
      self.fromDate:str = obj["fromDate"]
      """  The earliest date of deposit payments  """  
      self.toDate:str = obj["toDate"]
      """  The last date of deposit payments  """  
      pass

class GetDepositsToConvert_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetDepTableset] = obj["returnObj"]
      pass

class GetDfltTranDocTypeID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetDfltTranDocTypeID_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      """  Default Transaction document for AR Invoice  """  
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDropShipments_input:
   """ Required : 
   ds
   GroupID
   CustList
   Plant
   BillToFlag
   consolidatePS
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["ds"]
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer numbers.  """  
      self.Plant:str = obj["Plant"]
      """  the string "CURRENT" or "ALL".  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.consolidatePS:bool = obj["consolidatePS"]
      """  If true, consolidate all selected invoices with existing  """  
      pass

class GetDropShipments_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["ds"]
      self.Invoices:str = obj["parameters"]
      self.Errors:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetEInvoiceOperatorStatus_input:
   """ Required : 
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      pass

class GetEInvoiceOperatorStatus_output:
   def __init__(self, obj):
      pass

class GetFSCallLineJob_input:
   """ Required : 
   GroupID
   CustList
   CodeList
   CallList
   Plant
   jobNumList
   summarize
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer numbers.  """  
      self.CodeList:str = obj["CodeList"]
      """  A list of ~ delimited service type codes.  """  
      self.CallList:str = obj["CallList"]
      """  A list of ~ delimited service call numbers  """  
      self.Plant:str = obj["Plant"]
      """  the string "CURRENT" or "ALL".  """  
      self.jobNumList:str = obj["jobNumList"]
      """  Selected CallLine Job(s)  """  
      self.summarize:bool = obj["summarize"]
      """  the detail job will be summarized  """  
      pass

class GetFSCallLineJob_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.NumInvs:int = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.JobNums:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetFSCallsJob_input:
   """ Required : 
   GroupID
   CustList
   CodeList
   CallList
   Plant
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer numbers.  """  
      self.CodeList:str = obj["CodeList"]
      """  A list of ~ delimited service type codes.  """  
      self.CallList:str = obj["CallList"]
      """  A list of ~ delimited service call numbers  """  
      self.Plant:str = obj["Plant"]
      """  the string "CURRENT" or "ALL".  """  
      pass

class GetFSCallsJob_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.NumInvs:int = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.JobNums:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetInvcRecurr_input:
   """ Required : 
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      self.ds:list[Erp_Tablesets_RecurringInvTableset] = obj["ds"]
      pass

class GetInvcRecurr_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_RecurringInvTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetInvoiceLines_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number which lines will be retrieved  """  
      pass

class GetInvoiceLines_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetLinesTableset] = obj["returnObj"]
      pass

class GetInvoiceReminders_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number which reminders will be retrieved  """  
      pass

class GetInvoiceReminders_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvRemindersTableset] = obj["returnObj"]
      pass

class GetLegalNumByInvcRefNum_input:
   """ Required : 
   intInvoiceNum
   """  
   def __init__(self, obj):
      self.intInvoiceNum:int = obj["intInvoiceNum"]
      pass

class GetLegalNumByInvcRefNum_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetLegalNumGenOpts_input:
   """ Required : 
   ds
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice number  """  
      pass

class GetLegalNumGenOpts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opPromptForNum:bool = obj["opPromptForNum"]
      pass

      """  output parameters  """  

class GetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_InvcHeadListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetMXExportType_input:
   """ Required : 
   invoiceNum
   mxExportOperationType
   custNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number  """  
      self.mxExportOperationType:str = obj["mxExportOperationType"]
      """  mxExportOperationType  """  
      self.custNum:int = obj["custNum"]
      """  custNum  """  
      pass

class GetMXExportType_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetMXTaxRcptType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.mxTaxRcptType:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetMilestoneBilling_input:
   """ Required : 
   GroupID
   custList
   selectedItems_Key1
   selectedItems
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      self.selectedItems_Key1:str = obj["selectedItems_Key1"]
      """  A list of ~ delimited project numbers.  """  
      self.selectedItems:str = obj["selectedItems"]
      """  A list of ~ delimited project/milestone numbers.  """  
      pass

class GetMilestoneBilling_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.InvoicesCreated:bool = obj["InvoicesCreated"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetMilestoneSearch_input:
   """ Required : 
   GroupID
   custList
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      pass

class GetMilestoneSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetMilestoneTableset] = obj["returnObj"]
      pass

class GetNewCentralCollectionPayment_input:
   """ Required : 
   ds
   groupID
   headNum
   invoiceNum
   invoiceRef
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.groupID:str = obj["groupID"]
      self.headNum:int = obj["headNum"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceRef:int = obj["invoiceRef"]
      pass

class GetNewCentralCollectionPayment_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewDepositType_input:
   """ Required : 
   GroupID
   DepositBillType
   ds
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.DepositBillType:str = obj["DepositBillType"]
      """  Deposit Billing type. Valid types are
            DEPOSIT-BILL- Deposit invoice.
            DEPOSIT-MEMO- Deposit credit memo invoice.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetNewDepositType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcChrg_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewInvcChrg_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcDtlAttch_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewInvcDtlAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcDtlRASch_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewInvcDtlRASch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcDtlTGLC_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewInvcDtlTGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcDtl_input:
   """ Required : 
   ds
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetNewInvcDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcHeadAttch_input:
   """ Required : 
   ds
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetNewInvcHeadAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcHeadBOE_input:
   """ Required : 
   inGroupID
   ds
   """  
   def __init__(self, obj):
      self.inGroupID:str = obj["inGroupID"]
      """  Group for this invoice.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetNewInvcHeadBOE_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcHeadType_input:
   """ Required : 
   GroupID
   InvoiceType
   ds
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice type. Valid types are
            MISC-BILL   - Miscellaneous invoice.
            ADV-BILL    - Advanced billing.
            CREDIT-MEMO - Credit memo invoice.
            ADV-MEMO    - Advanced billing credit  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetNewInvcHeadType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcHead_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetNewInvcHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcMisc_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewInvcMisc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcSched_input:
   """ Required : 
   ds
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetNewInvcSched_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvcTax_input:
   """ Required : 
   ds
   invoiceNum
   invoiceLine
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewInvcTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewInvoiceManual_input:
   """ Required : 
   GroupID
   InvoiceNum
   InvoiceType
   ds
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice type. Valid types are
            MISC-BILL   - Miscellaneous invoice.
            ADV-BILL    - Advanced billing.
            CREDIT-MEMO - Credit memo invoice.
            ADV-MEMO    - Advanced billing credit  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetNewInvoiceManual_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewMXInvcHeadFiscalText_input:
   """ Required : 
   ds
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetNewMXInvcHeadFiscalText_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewMXInvcRef_input:
   """ Required : 
   ds
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class GetNewMXInvcRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNextInvoiceDate_input:
   """ Required : 
   date
   firstDayOfWeek
   modifier
   cycleInterval
   billingDay
   """  
   def __init__(self, obj):
      self.date:str = obj["date"]
      self.firstDayOfWeek:int = obj["firstDayOfWeek"]
      self.modifier:str = obj["modifier"]
      self.cycleInterval:int = obj["cycleInterval"]
      self.billingDay:int = obj["billingDay"]
      pass

class GetNextInvoiceDate_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetPBInvcSearch_input:
   """ Required : 
   ipGroupID
   ipPrjList
   ipInvTypes
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group to generate invoices for.  """  
      self.ipPrjList:str = obj["ipPrjList"]
      """  A list of ~ delimited projects.  """  
      self.ipInvTypes:str = obj["ipInvTypes"]
      """  A list of , delimited invoice types.  """  
      pass

class GetPBInvcSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetPBTableset] = obj["returnObj"]
      pass

class GetPBInvoices_input:
   """ Required : 
   ipGroupID
   ipPrjList
   ipInvTypes
   filterByProject
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group to generate invoices for.  """  
      self.ipPrjList:str = obj["ipPrjList"]
      """  A list of ~ delimited Temp Invoice Numbers and Project (Ex: 11,Project1~12,Project2) OR A list of ~ delimited Projects if is filter by Project (Ex: Project1~Project2).  """  
      self.ipInvTypes:str = obj["ipInvTypes"]
      """  A list of , delimited invoice types.  """  
      self.filterByProject:bool = obj["filterByProject"]
      """  True when filter is by project, false if filter is by project and by invoice.  """  
      pass

class GetPBInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opInvcList:str = obj["parameters"]
      self.opErrorList:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetPackDetails_input:
   """ Required : 
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.invoiceLine:int = obj["invoiceLine"]
      """  Invoice Line number.  """  
      pass

class GetPackDetails_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvcDtlPackTableset] = obj["returnObj"]
      pass

class GetPartNum_input:
   """ Required : 
   partNum
   """  
   def __init__(self, obj):
      self.partNum:str = obj["partNum"]
      pass

class GetPartNum_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetPaymentDataForViewing_input:
   """ Required : 
   InvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  The invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetPaymentDataForViewing_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvPaySchedTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetRMACreditsSearch_input:
   """ Required : 
   custList
   """  
   def __init__(self, obj):
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      pass

class GetRMACreditsSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetRMATableset] = obj["returnObj"]
      pass

class GetRMACredits_input:
   """ Required : 
   GroupID
   custList
   invList
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      self.invList:str = obj["invList"]
      """  A list of ~ delimited invoice numbers.  """  
      pass

class GetRMACredits_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.rMAMessage:str = obj["parameters"]
      self.InvoicesCreated:bool = obj["InvoicesCreated"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetRebateInvList_input:
   """ Required : 
   invoiceType
   """  
   def __init__(self, obj):
      self.invoiceType:str = obj["invoiceType"]
      pass

class GetRebateInvList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_RebateInvTableset] = obj["returnObj"]
      pass

class GetRecurBillSearch_input:
   """ Required : 
   custList
   """  
   def __init__(self, obj):
      self.custList:str = obj["custList"]
      """  A list of ~ delimited customer numbers.  """  
      pass

class GetRecurBillSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetFSContTableset] = obj["returnObj"]
      pass

class GetRecurBill_input:
   """ Required : 
   GroupID
   CustList
   contractList
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer IDs.  """  
      self.contractList:str = obj["contractList"]
      """  A list of ~ delimited contract numbers.  """  
      pass

class GetRecurBill_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.InvoicesCreated:bool = obj["InvoicesCreated"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.agingContractMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetRecurringInvoices_input:
   """ Required : 
   groupId
   custList
   cycleCodeList
   firstDayOfWeek
   selectedList
   billToFlag
   ds
   """  
   def __init__(self, obj):
      self.groupId:str = obj["groupId"]
      self.custList:str = obj["custList"]
      self.cycleCodeList:str = obj["cycleCodeList"]
      self.firstDayOfWeek:int = obj["firstDayOfWeek"]
      self.selectedList:str = obj["selectedList"]
      self.billToFlag:bool = obj["billToFlag"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetRecurringInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.invoices:str = obj["parameters"]
      self.errors:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.msgLOCErrors:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.invoicesSkippedMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetRecurringSourceInvoicesSearch_input:
   """ Required : 
   custList
   cycleCodeList
   billToFlag
   InvcDate
   """  
   def __init__(self, obj):
      self.custList:str = obj["custList"]
      self.cycleCodeList:str = obj["cycleCodeList"]
      self.billToFlag:bool = obj["billToFlag"]
      self.InvcDate:str = obj["InvcDate"]
      pass

class GetRecurringSourceInvoicesSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetRecInvSourceTableset] = obj["returnObj"]
      pass

class GetRowsContactTracker_input:
   """ Required : 
   whereClauseInvcHead
   whereClauseInvcHeadAttch
   whereClauseInvcDtl
   whereClauseInvcDtlAttch
   whereClauseInvcMisc
   whereClauseInvcTax
   whereClauseARIHeadTax
   contactName
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseInvcHead:str = obj["whereClauseInvcHead"]
      """  Where clause for InvcHead table.  """  
      self.whereClauseInvcHeadAttch:str = obj["whereClauseInvcHeadAttch"]
      """  Where clause for InvcHeadAttch table.  """  
      self.whereClauseInvcDtl:str = obj["whereClauseInvcDtl"]
      """  Where clause for InvcDtl table.  """  
      self.whereClauseInvcDtlAttch:str = obj["whereClauseInvcDtlAttch"]
      """  Where clause for InvcDtlAttch table.  """  
      self.whereClauseInvcMisc:str = obj["whereClauseInvcMisc"]
      """  Where clause for InvcMisc table.  """  
      self.whereClauseInvcTax:str = obj["whereClauseInvcTax"]
      """  Where clause for InvcTax table.  """  
      self.whereClauseARIHeadTax:str = obj["whereClauseARIHeadTax"]
      """  Where clause for ARIHeadTax table.  """  
      self.contactName:str = obj["contactName"]
      """  Contact to return data for.  """  
      self.pageSize:int = obj["pageSize"]
      """  Page size.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Absolute page.  """  
      pass

class GetRowsContactTracker_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_InvcCustTrkTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRowsCustomerTracker_input:
   """ Required : 
   whereClauseInvcHead
   whereClauseInvcHeadAttch
   whereClauseInvcDtl
   whereClauseInvcDtlAttch
   whereClauseInvcMisc
   whereClauseInvcTax
   whereClauseARIHeadTax
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseInvcHead:str = obj["whereClauseInvcHead"]
      """  Where clause for InvcHead table.  """  
      self.whereClauseInvcHeadAttch:str = obj["whereClauseInvcHeadAttch"]
      """  Where clause for InvcHeadAttch table.  """  
      self.whereClauseInvcDtl:str = obj["whereClauseInvcDtl"]
      """  Where clause for InvcDtl table.  """  
      self.whereClauseInvcDtlAttch:str = obj["whereClauseInvcDtlAttch"]
      """  Where clause for InvcDtlAttch table.  """  
      self.whereClauseInvcMisc:str = obj["whereClauseInvcMisc"]
      """  Where clause for InvcMisc table.  """  
      self.whereClauseInvcTax:str = obj["whereClauseInvcTax"]
      """  Where clause for InvcTax table.  """  
      self.whereClauseARIHeadTax:str = obj["whereClauseARIHeadTax"]
      """  Where clause for ARIHeadTax table.  """  
      self.pageSize:int = obj["pageSize"]
      """  Page size.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Absolute page.  """  
      pass

class GetRowsCustomerTracker_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_InvcCustTrkTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetRows_input:
   """ Required : 
   whereClauseInvcHead
   whereClauseInvcHeadAttch
   whereClauseAllocDeposit
   whereClauseCentralCollectionPayment
   whereClauseInvcDtl
   whereClauseInvcDtlAttch
   whereClauseInvcChrg
   whereClauseInvcDeferredRev
   whereClauseInvcDtlRASch
   whereClauseInvcMisc
   whereClauseInvcTax
   whereClauseInvcDtlTGLC
   whereClauseInvcSched
   whereClauseMXInvcHeadFiscalText
   whereClauseMXInvcRef
   whereClauseHedTaxSum
   whereClauseLegalNumGenOpts
   whereClauseTaxConnectStatus
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseInvcHead:str = obj["whereClauseInvcHead"]
      self.whereClauseInvcHeadAttch:str = obj["whereClauseInvcHeadAttch"]
      self.whereClauseAllocDeposit:str = obj["whereClauseAllocDeposit"]
      self.whereClauseCentralCollectionPayment:str = obj["whereClauseCentralCollectionPayment"]
      self.whereClauseInvcDtl:str = obj["whereClauseInvcDtl"]
      self.whereClauseInvcDtlAttch:str = obj["whereClauseInvcDtlAttch"]
      self.whereClauseInvcChrg:str = obj["whereClauseInvcChrg"]
      self.whereClauseInvcDeferredRev:str = obj["whereClauseInvcDeferredRev"]
      self.whereClauseInvcDtlRASch:str = obj["whereClauseInvcDtlRASch"]
      self.whereClauseInvcMisc:str = obj["whereClauseInvcMisc"]
      self.whereClauseInvcTax:str = obj["whereClauseInvcTax"]
      self.whereClauseInvcDtlTGLC:str = obj["whereClauseInvcDtlTGLC"]
      self.whereClauseInvcSched:str = obj["whereClauseInvcSched"]
      self.whereClauseMXInvcHeadFiscalText:str = obj["whereClauseMXInvcHeadFiscalText"]
      self.whereClauseMXInvcRef:str = obj["whereClauseMXInvcRef"]
      self.whereClauseHedTaxSum:str = obj["whereClauseHedTaxSum"]
      self.whereClauseLegalNumGenOpts:str = obj["whereClauseLegalNumGenOpts"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRows_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetServiceCallLineSearch_input:
   """ Required : 
   customerList
   callCodeList
   """  
   def __init__(self, obj):
      self.customerList:str = obj["customerList"]
      """  Sustomer IDs list via the default separator  """  
      self.callCodeList:str = obj["callCodeList"]
      """  Call Type Codes list via the default separator  """  
      pass

class GetServiceCallLineSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetFSCallsTableset] = obj["returnObj"]
      pass

class GetServiceCallSearch_input:
   """ Required : 
   customerList
   callCodeList
   """  
   def __init__(self, obj):
      self.customerList:str = obj["customerList"]
      """  Sustomer IDs list via the default separator  """  
      self.callCodeList:str = obj["callCodeList"]
      """  Call Type Codes list via the default separator  """  
      pass

class GetServiceCallSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetFSCallsTableset] = obj["returnObj"]
      pass

class GetShipDateOnChangeofInvDate_input:
   """ Required : 
   InvoiceNum
   currShipDate
   currInvoiceDate
   currApplyDate
   NewInvoiceDate
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.currShipDate:str = obj["currShipDate"]
      self.currInvoiceDate:str = obj["currInvoiceDate"]
      self.currApplyDate:str = obj["currApplyDate"]
      self.NewInvoiceDate:str = obj["NewInvoiceDate"]
      pass

class GetShipDateOnChangeofInvDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.dShipDate:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetShipHead_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class GetShipHead_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetShipmentsConsolidatedPS_input:
   """ Required : 
   GroupID
   CustList
   PackSlips
   Plant
   BillToFlag
   overBillDay
   consolidatePS
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer numbers.  """  
      self.PackSlips:str = obj["PackSlips"]
      """  As of the initial release, null  """  
      self.Plant:str = obj["Plant"]
      """  the string "CURRENT" or "ALL".  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.overBillDay:bool = obj["overBillDay"]
      """  If true, create all selected invoices irrespective of the billing days  """  
      self.consolidatePS:bool = obj["consolidatePS"]
      """  If true, consolidate all selected invoices with existing  """  
      pass

class GetShipmentsConsolidatedPS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.Invoices:str = obj["parameters"]
      self.Errors:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetShipmentsSearchWithFilters_input:
   """ Required : 
   GroupID
   CustNums
   PlantChoice
   BillToFlag
   onlyReadyToInvoice
   onlyNotInvoiced
   onlyNotVoided
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustNums:str = obj["CustNums"]
      """  A list customer numbers  """  
      self.PlantChoice:str = obj["PlantChoice"]
      """  Current or All  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.onlyReadyToInvoice:bool = obj["onlyReadyToInvoice"]
      """  Include only shipments marked as ready to invoice  """  
      self.onlyNotInvoiced:bool = obj["onlyNotInvoiced"]
      """  Include only shipments that hasn't been invoiced already  """  
      self.onlyNotVoided:bool = obj["onlyNotVoided"]
      """  Include only shipments that hasn't been voided  """  
      pass

class GetShipmentsSearchWithFilters_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetShipTableset] = obj["returnObj"]
      pass

class GetShipmentsSearch_input:
   """ Required : 
   GroupID
   CustNums
   PlantChoice
   BillToFlag
   OnlyNotInvoiced
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustNums:str = obj["CustNums"]
      """  A list customer numbers  """  
      self.PlantChoice:str = obj["PlantChoice"]
      """  Current or All  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.OnlyNotInvoiced:bool = obj["OnlyNotInvoiced"]
      """  All or Only Not Invoiced for better performance  """  
      pass

class GetShipmentsSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetShipTableset] = obj["returnObj"]
      pass

class GetShipments_input:
   """ Required : 
   GroupID
   CustList
   PackSlips
   Plant
   BillToFlag
   overBillDay
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group to generate invoices for.  """  
      self.CustList:str = obj["CustList"]
      """  A list of ~ delimited customer numbers.  """  
      self.PackSlips:str = obj["PackSlips"]
      """  As of the initial release, null  """  
      self.Plant:str = obj["Plant"]
      """  the string "CURRENT" or "ALL".  """  
      self.BillToFlag:bool = obj["BillToFlag"]
      """  If true, customers are bill to's. If false they are sold to's.  """  
      self.overBillDay:bool = obj["overBillDay"]
      """  If true, create all selected invoices irrespective of the billing days  """  
      pass

class GetShipments_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.Invoices:str = obj["parameters"]
      self.Errors:str = obj["parameters"]
      self.msgNumInvoices:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class GetSumOfInvoiceBalForInvoiceList_input:
   """ Required : 
   sInvoiceList
   """  
   def __init__(self, obj):
      self.sInvoiceList:str = obj["sInvoiceList"]
      """  List of invoices  """  
      pass

class GetSumOfInvoiceBalForInvoiceList_output:
   def __init__(self, obj):
      self.returnObj:int = obj["returnObj"]
      pass

class GetSystemTranDocTypeDescID_input:
   """ Required : 
   systemTranID
   """  
   def __init__(self, obj):
      self.systemTranID:str = obj["systemTranID"]
      """  System Transaction ID  """  
      pass

class GetSystemTranDocTypeDescID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.TranDocTypeDescription:str = obj["parameters"]
      self.TranDocTypeID:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetTaxRegInPrice_input:
   """ Required : 
   ipCompanyID
   ipInvoiceNum
   ipCustNum
   ipShipToNum
   """  
   def __init__(self, obj):
      self.ipCompanyID:str = obj["ipCompanyID"]
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      self.ipCustNum:int = obj["ipCustNum"]
      self.ipShipToNum:str = obj["ipShipToNum"]
      pass

class GetTaxRegInPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opInPriceQuestion:bool = obj["opInPriceQuestion"]
      pass

      """  output parameters  """  

class GetvalidEAD_input:
   """ Required : 
   inTransType
   inDateLabel
   proposedDate
   """  
   def __init__(self, obj):
      self.inTransType:str = obj["inTransType"]
      self.inDateLabel:str = obj["inDateLabel"]
      self.proposedDate:str = obj["proposedDate"]
      pass

class GetvalidEAD_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.proposedDate:str = obj["parameters"]
      self.cMessageText:str = obj["parameters"]
      pass

      """  output parameters  """  

class Ice_BOUpdErrorRow:
   def __init__(self, obj):
      self.TableName:str = obj["TableName"]
      self.ErrorLevel:str = obj["ErrorLevel"]
      self.ErrorType:str = obj["ErrorType"]
      self.ErrorText:str = obj["ErrorText"]
      self.ErrorSysRowID:str = obj["ErrorSysRowID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      pass

class Ice_BOUpdErrorTableset:
   def __init__(self, obj):
      self.BOUpdError:list[Ice_BOUpdErrorRow] = obj["BOUpdError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class InvcGrpExists_input:
   """ Required : 
   GroupID
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      """  Group for this invoice.  """  
      pass

class InvcGrpExists_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.result:bool = obj["result"]
      pass

      """  output parameters  """  

class IsConvertedFromDep_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number.  """  
      pass

class IsConvertedFromDep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.converted:bool = obj["converted"]
      pass

      """  output parameters  """  

class IsPMForGenPIType_input:
   """ Required : 
   ipPMUID
   """  
   def __init__(self, obj):
      self.ipPMUID:int = obj["ipPMUID"]
      """  Payment Method  """  
      pass

class IsPMForGenPIType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ipIsGenPIType:bool = obj["ipIsGenPIType"]
      pass

      """  output parameters  """  

class KineticGetPaymentDataForViewing_input:
   """ Required : 
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  The invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class KineticGetPaymentDataForViewing_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvPaySchedTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class LoadRecordsPEInvcTax_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group ID  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      pass

class LoadRecordsPEInvcTax_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_PEDetractionsTableset] = obj["returnObj"]
      pass

class LookupMXInvcRef_input:
   """ Required : 
   invoiceNum
   invoiceRef
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      self.invoiceRef:int = obj["invoiceRef"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class LookupMXInvcRef_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class MassGenerateBOEInvcDtl_input:
   """ Required : 
   ipInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      pass

class MassGenerateBOEInvcDtl_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      self.massGenErrorMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class MassInvoiceDelete_input:
   """ Required : 
   lds
   cGroupID
   """  
   def __init__(self, obj):
      self.lds:list[Erp_Tablesets_InvcHeadListTableset] = obj["lds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current APInvGrp GroupID  """  
      pass

class MassInvoiceDelete_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.lds:list[Erp_Tablesets_InvcHeadListTableset] = obj["lds"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class OnChangeARLOCID_input:
   """ Required : 
   ipARLOCID
   ipInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.ipARLOCID:str = obj["ipARLOCID"]
      """  The Letter of Credit ID value  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Current Invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeARLOCID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opTermsCodeValue:str = obj["parameters"]
      self.opTermsCodeMsg:str = obj["parameters"]
      self.opBTCustIDValue:str = obj["parameters"]
      self.opBTCustIDMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeAllocatedDepositAmt_input:
   """ Required : 
   ipInvoiceNum
   ipDepInvoiceNum
   ipDepGroupID
   ipDepHeadNum
   ipAllocatedAmt
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice number  """  
      self.ipDepInvoiceNum:int = obj["ipDepInvoiceNum"]
      """  Deposit invoice number  """  
      self.ipDepGroupID:str = obj["ipDepGroupID"]
      """  Group ID of deposit payment  """  
      self.ipDepHeadNum:int = obj["ipDepHeadNum"]
      """  Deposit payment  """  
      self.ipAllocatedAmt:int = obj["ipAllocatedAmt"]
      """  Allocated amount  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeAllocatedDepositAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeBOEStatus_input:
   """ Required : 
   inInvoiceNum
   inNewStatus
   ds
   """  
   def __init__(self, obj):
      self.inInvoiceNum:int = obj["inInvoiceNum"]
      """  Invoice Number.  """  
      self.inNewStatus:str = obj["inNewStatus"]
      """  The new status  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeBOEStatus_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opWarning:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeBlockedFin_input:
   """ Required : 
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeBlockedFin_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeCentralCollection_input:
   """ Required : 
   ipProposedCentralCollection
   ds
   """  
   def __init__(self, obj):
      self.ipProposedCentralCollection:bool = obj["ipProposedCentralCollection"]
      """  Central Collection value  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeCentralCollection_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeCycleCode_input:
   """ Required : 
   InvoiceNum
   pCycleCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.pCycleCode:str = obj["pCycleCode"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeCycleCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeDeferredPercent_input:
   """ Required : 
   ipDeferredPercent
   ds
   """  
   def __init__(self, obj):
      self.ipDeferredPercent:int = obj["ipDeferredPercent"]
      """  Proposed value deferred percent  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeDeferredPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeDueDate_input:
   """ Required : 
   invoiceNum
   newDueDateStr
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  The invoice number  """  
      self.newDueDateStr:str = obj["newDueDateStr"]
      """  The proposed due date  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeDueDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeHoldReason_input:
   """ Required : 
   ipReason
   ds
   """  
   def __init__(self, obj):
      self.ipReason:str = obj["ipReason"]
      """  proposed reason code  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeHoldReason_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeHold_input:
   """ Required : 
   ipHold
   ds
   """  
   def __init__(self, obj):
      self.ipHold:bool = obj["ipHold"]
      """  proposed hold value  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeHold_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeInvDtlUseOTS_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeInvDtlUseOTS_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeInvcSchedAmount_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

class OnChangeInvcSchedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OnChangeInvcSchedDays_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

class OnChangeInvcSchedDays_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OnChangeInvcSchedDueDate_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

class OnChangeInvcSchedDueDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OnChangeInvcSchedPercent_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

class OnChangeInvcSchedPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_ARInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class OnChangeLineCommodityCode_input:
   """ Required : 
   newCommodityCode
   ds
   """  
   def __init__(self, obj):
      self.newCommodityCode:str = obj["newCommodityCode"]
      """  New Commodity Code  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineCommodityCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineDefRev_input:
   """ Required : 
   ipDefRev
   ds
   """  
   def __init__(self, obj):
      self.ipDefRev:bool = obj["ipDefRev"]
      """  Input deferred revenue option  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineDefRev_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opOutMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class OnChangeLineDspWithholdAmt_input:
   """ Required : 
   newDspWithholdAmt
   ds
   """  
   def __init__(self, obj):
      self.newDspWithholdAmt:int = obj["newDspWithholdAmt"]
      """  Proposed withhold amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineDspWithholdAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineInvoiceRef_input:
   """ Required : 
   NewInvoiceRef
   ds
   """  
   def __init__(self, obj):
      self.NewInvoiceRef:int = obj["NewInvoiceRef"]
      """  Proposed invoice reference.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineInvoiceRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfAmortDate_input:
   """ Required : 
   ipAmortDate
   ds
   """  
   def __init__(self, obj):
      self.ipAmortDate:str = obj["ipAmortDate"]
      """  Proposed Amortization Date  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfAmortDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfDefRevStart_input:
   """ Required : 
   ipDefRevStart
   ipInvoiceNum
   ipInvoiceLine
   """  
   def __init__(self, obj):
      self.ipDefRevStart:str = obj["ipDefRevStart"]
      """  Deferred Revenue Start Date  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  invoice number  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  Invoice line number  """  
      pass

class OnChangeOfDefRevStart_output:
   def __init__(self, obj):
      pass

class OnChangeOfImmaterialAdjustment_input:
   """ Required : 
   newIsImmatAdjustment
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.newIsImmatAdjustment:bool = obj["newIsImmatAdjustment"]
      """  Proposed THIsImmatAdjustment  """  
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfImmaterialAdjustment_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfLineShipToCustID_input:
   """ Required : 
   newShipToCustID
   ds
   """  
   def __init__(self, obj):
      self.newShipToCustID:str = obj["newShipToCustID"]
      """  Proposed Customer ShipTo ID.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfLineShipToCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfMXCancellationMode_input:
   """ Required : 
   mXCancellationMode
   ds
   """  
   def __init__(self, obj):
      self.mXCancellationMode:str = obj["mXCancellationMode"]
      """  Proposed input value  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfMXCancellationMode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfRACode_input:
   """ Required : 
   ipRACode
   ds
   """  
   def __init__(self, obj):
      self.ipRACode:str = obj["ipRACode"]
      """  Deferred Revenue Code  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfRACode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfRevisionDate_input:
   """ Required : 
   invoiceNum
   newRevisionDate
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Current Invoice Number  """  
      self.newRevisionDate:str = obj["newRevisionDate"]
      """  New Revision Date  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfRevisionDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeOfTransApplyDate_input:
   """ Required : 
   invoiceNum
   newTransApplyDate
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.newTransApplyDate:str = obj["newTransApplyDate"]
      """  Proposed Transferred Invoice Apply Date.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeOfTransApplyDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangePECodeInvcDtl_input:
   """ Required : 
   codeType
   ds
   """  
   def __init__(self, obj):
      self.codeType:str = obj["codeType"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangePECodeInvcDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangePECodeInvcHead_input:
   """ Required : 
   codeType
   ds
   """  
   def __init__(self, obj):
      self.codeType:str = obj["codeType"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangePECodeInvcHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangePartiallyDefer_input:
   """ Required : 
   ipPartiallyDefer
   ds
   """  
   def __init__(self, obj):
      self.ipPartiallyDefer:bool = obj["ipPartiallyDefer"]
      """  Proposed value Partially Defer  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangePartiallyDefer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeReclassCode_input:
   """ Required : 
   ipReclassCodeID
   ds
   """  
   def __init__(self, obj):
      self.ipReclassCodeID:str = obj["ipReclassCodeID"]
      """  Proposed value Reclass Code ID  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeReclassCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeReclassReasonCode_input:
   """ Required : 
   ipReclassReasonCode
   ds
   """  
   def __init__(self, obj):
      self.ipReclassReasonCode:str = obj["ipReclassReasonCode"]
      """  Proposed value Reclass Reason Code  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeReclassReasonCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeReclass_input:
   """ Required : 
   ipReclass
   ds
   """  
   def __init__(self, obj):
      self.ipReclass:bool = obj["ipReclass"]
      """  Proposed value Reclass  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeReclass_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeRecurring_input:
   """ Required : 
   InvoiceNum
   pRecurring
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      self.pRecurring:bool = obj["pRecurring"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeRecurring_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeTranDocTypeID_input:
   """ Required : 
   ipTranDocTypeID
   ds
   """  
   def __init__(self, obj):
      self.ipTranDocTypeID:str = obj["ipTranDocTypeID"]
      """  TranDocTypeID supplied  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeTranDocTypeID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeUnrecognizedAmt_input:
   """ Required : 
   ipProposedAmount
   ds
   """  
   def __init__(self, obj):
      self.ipProposedAmount:int = obj["ipProposedAmount"]
      """  Proposed Unrecognized Amount  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeUnrecognizedAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeUseAltBillTo_input:
   """ Required : 
   useAltBillTo
   ds
   """  
   def __init__(self, obj):
      self.useAltBillTo:bool = obj["useAltBillTo"]
      """  value of the checkbox  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeUseAltBillTo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangedCODebitNote_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangedCODebitNote_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofApplyDateEx_input:
   """ Required : 
   InvoiceNum
   NewApplyDate
   recalcamts
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewApplyDate:str = obj["NewApplyDate"]
      """  Proposed Apply Date.  """  
      self.recalcamts:str = obj["recalcamts"]
      """  Recalc amount and taxes.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofApplyDateEx_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofApplyDate_input:
   """ Required : 
   InvoiceNum
   NewApplyDate
   recalcamts
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewApplyDate:str = obj["NewApplyDate"]
      """  Proposed Apply Date.  """  
      self.recalcamts:str = obj["recalcamts"]
      """  Recalc amount and taxes.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofApplyDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofChrgAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   SeqNum
   NewChrgAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Fin charge sequence number.  """  
      self.NewChrgAmt:int = obj["NewChrgAmt"]
      """  Fin charge proposed amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofChrgAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofContact_input:
   """ Required : 
   InvoiceNum
   NewContact
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewContact:int = obj["NewContact"]
      """  Proposed Contact.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofContact_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofCurrency_input:
   """ Required : 
   InvoiceNum
   NewCurrencyCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewCurrencyCode:str = obj["NewCurrencyCode"]
      """  The New currency code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofCurrency_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofCustomer_input:
   """ Required : 
   InvoiceNum
   NewCustomerID
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewCustomerID:str = obj["NewCustomerID"]
      """  Proposed customer Number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofCustomer_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofDepAmt_input:
   """ Required : 
   invoiceNum
   depositAmt
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.depositAmt:int = obj["depositAmt"]
      """  DepositAmt  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofDepAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofDeposit_input:
   """ Required : 
   InvoiceNum
   DspCredit
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.DspCredit:int = obj["DspCredit"]
      """  DspCredit.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofDeposit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofExchangeRate_input:
   """ Required : 
   InvoiceNum
   NewExchangeRate
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewExchangeRate:int = obj["NewExchangeRate"]
      """  The New exchange rate.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofExchangeRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofFOB_input:
   """ Required : 
   InvoiceNum
   NewFOB
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewFOB:str = obj["NewFOB"]
      """  Proposed FOB.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofFOB_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofFixedAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewTaxAmt:int = obj["NewTaxAmt"]
      """  Proposed Tax amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofFixedAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofInvDateEx_input:
   """ Required : 
   InvoiceNum
   NewInvoiceDate
   recalcamts
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewInvoiceDate:str = obj["NewInvoiceDate"]
      """  Proposed invoice Date.  """  
      self.recalcamts:str = obj["recalcamts"]
      """  Recalc amount and taxes.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofInvDateEx_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cMessageText:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofInvDate_input:
   """ Required : 
   InvoiceNum
   NewInvoiceDate
   recalcamts
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewInvoiceDate:str = obj["NewInvoiceDate"]
      """  Proposed invoice Date.  """  
      self.recalcamts:str = obj["recalcamts"]
      """  Recalc amount and taxes.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofInvDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofInvoiceAddress_input:
   """ Required : 
   FieldName
   FieldValue
   ds
   """  
   def __init__(self, obj):
      self.FieldName:str = obj["FieldName"]
      """  Either BillTo/SoldToInvoiceAddress.  """  
      self.FieldValue:bool = obj["FieldValue"]
      """  True or false.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofInvoiceAddress_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofInvoiceRef_input:
   """ Required : 
   InvoiceNum
   NewInvoiceRef
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewInvoiceRef:int = obj["NewInvoiceRef"]
      """  Proposed invoice reference.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofInvoiceRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineAdvBill_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewAdvBillAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewAdvBillAmt:int = obj["NewAdvBillAmt"]
      """  Proposed advanced billing amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineAdvBill_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineContact_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewContact
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewContact:int = obj["NewContact"]
      """  Proposed Contact number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineContact_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineDesc_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewPartDesc
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewPartDesc:str = obj["NewPartDesc"]
      """  Proposed part description.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineDesc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineDiscAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewDiscAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewDiscAmt:int = obj["NewDiscAmt"]
      """  Proposed discount amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineDiscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineDiscPerc_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewDiscPerc
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewDiscPerc:int = obj["NewDiscPerc"]
      """  Proposed discount percent.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineDiscPerc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineExemptTax_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      pass

class OnChangeofLineExemptTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.AskManualQuestion:bool = obj["AskManualQuestion"]
      pass

      """  output parameters  """  

class OnChangeofLineExtPrice_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewExtAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewExtAmt:int = obj["NewExtAmt"]
      """  Proposed discount amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineExtPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineInvoiceLineRef_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   newInvoiceLineRef
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.newInvoiceLineRef:int = obj["newInvoiceLineRef"]
      """  Proposed Invoice Line Reference number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineInvoiceLineRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineOrderLine_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewOrderLine
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewOrderLine:int = obj["NewOrderLine"]
      """  Proposed order line number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineOrderLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineOrderRelease_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewOrderRel
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewOrderRel:int = obj["NewOrderRel"]
      """  Proposed order release number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineOrderRelease_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLinePartNum_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewPartNum
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewPartNum:str = obj["NewPartNum"]
      """  Proposed part number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLinePartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLinePricePerCode_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewPricePer
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewPricePer:str = obj["NewPricePer"]
      """  Proposed price per code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLinePricePerCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineProdCode_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewProdCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewProdCode:str = obj["NewProdCode"]
      """  Proposed product code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineProdCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineQty_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewQty
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewQty:int = obj["NewQty"]
      """  Proposed quantity.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineRevNum_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewRevNum
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewRevNum:str = obj["NewRevNum"]
      """  Proposed revision number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineRevNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineSalesUM_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewSalesUM
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewSalesUM:str = obj["NewSalesUM"]
      """  Proposed sales UM.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineSalesUM_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineShipDate_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewShipDate
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewShipDate:str = obj["NewShipDate"]
      """  Proposed ship date.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineShipDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineShipToNum_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewShipToNum
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewShipToNum:str = obj["NewShipToNum"]
      """  Proposed ship to number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineShipToNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineShipVia_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewShipVia
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewShipVia:str = obj["NewShipVia"]
      """  Proposed ship via.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineShipVia_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineTaxCat_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewTaxCat
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewTaxCat:str = obj["NewTaxCat"]
      """  Proposed tax category.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineTaxCat_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineTaxExempt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewTaxExempt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewTaxExempt:str = obj["NewTaxExempt"]
      """  Proposed tax exempt.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineTaxExempt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineTaxRgn_input:
   """ Required : 
   iTaxRegionCode
   ds
   """  
   def __init__(self, obj):
      self.iTaxRegionCode:str = obj["iTaxRegionCode"]
      """  Proposed tax category.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineTaxRgn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineUnitPrice_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   NewUnitPrice
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.NewUnitPrice:int = obj["NewUnitPrice"]
      """  Proposed unit price.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLinkedInvcUnitPrice_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   newLinkedUnitPrice
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.newLinkedUnitPrice:int = obj["newLinkedUnitPrice"]
      """  Proposed unit price.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLinkedInvcUnitPrice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLockRate_input:
   """ Required : 
   InvoiceNum
   NewLockRate
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewLockRate:bool = obj["NewLockRate"]
      """  Proposed invoice lock rate.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLockRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofManualTax_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewManualTax
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewManualTax:bool = obj["NewManualTax"]
      """  Proposed Manual tax.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofManualTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofMiscAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   SeqNum
   NewMiscAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Misc charge sequence number.  """  
      self.NewMiscAmt:int = obj["NewMiscAmt"]
      """  Misc charge proposed amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofMiscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofMiscCode_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   SeqNum
   NewMiscCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Misc charge sequence number.  """  
      self.NewMiscCode:str = obj["NewMiscCode"]
      """  New miscellaneous code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofMiscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofMiscPrcnt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   SeqNum
   NewPrcnt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Misc charge sequence number.  """  
      self.NewPrcnt:int = obj["NewPrcnt"]
      """  Misc charge proposed percentage.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofMiscPrcnt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofOrderNum_input:
   """ Required : 
   InvoiceNum
   NewOrderNum
   checkForResponse
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewOrderNum:int = obj["NewOrderNum"]
      """  Proposed Order number.  """  
      self.checkForResponse:bool = obj["checkForResponse"]
      """  Continue process based on user response  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofOrderNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.responseMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPECharges_input:
   """ Required : 
   ipInvoiceNum
   ipPECharges
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipPECharges:int = obj["ipPECharges"]
      """  Bank PECharges amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPECharges_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPECommissions_input:
   """ Required : 
   ipInvoiceNum
   ipPECommissions
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipPECommissions:int = obj["ipPECommissions"]
      """  Bank PECommissions amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPECommissions_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPEDischargeAmt_input:
   """ Required : 
   ipInvoiceNum
   ipPEDischargeAmt
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipPEDischargeAmt:int = obj["ipPEDischargeAmt"]
      """  Bank PEDischargeAmt amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPEDischargeAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPEInterest_input:
   """ Required : 
   ipInvoiceNum
   ipPEInterest
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipPEInterest:int = obj["ipPEInterest"]
      """  Bank PEInterest amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPEInterest_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPENoPayPenalty_input:
   """ Required : 
   ipInvoiceNum
   ipPENoPayPenalty
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipPENoPayPenalty:int = obj["ipPENoPayPenalty"]
      """  Bank PENoPayPenalty amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPENoPayPenalty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPayMethod_input:
   """ Required : 
   ds
   InvoiceNum
   newPayMethod
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  The invoice number.  """  
      self.newPayMethod:str = obj["newPayMethod"]
      """  The Proposed Payment method PMUID.  """  
      pass

class OnChangeofPayMethod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPlant_input:
   """ Required : 
   InvoiceNum
   NewPlant
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewPlant:str = obj["NewPlant"]
      """  Proposed Plant.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPlant_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofPrepDeposit_input:
   """ Required : 
   ipInvoiceNum
   dspPrepDeposit
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.dspPrepDeposit:int = obj["dspPrepDeposit"]
      """  DspPrepDeposit.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofPrepDeposit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofRateCode_input:
   """ Required : 
   invoiceNum
   invoiceLine
   taxCode
   newRateCode
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.invoiceLine:int = obj["invoiceLine"]
      """  Invoice line number.  """  
      self.taxCode:str = obj["taxCode"]
      """  Invoice line tax code.  """  
      self.newRateCode:str = obj["newRateCode"]
      """  Invoice line tax rate code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofRateCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofRateGrpCode_input:
   """ Required : 
   InvoiceNum
   NewRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewRateGrpCode:str = obj["NewRateGrpCode"]
      """  The New currency code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofRateGrpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofRevisionNum_input:
   """ Required : 
   newRevisionNum
   InvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.newRevisionNum:int = obj["newRevisionNum"]
      """  Proposed RevisionNum  """  
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofRevisionNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofSalesRep_input:
   """ Required : 
   InvoiceNum
   RepIndexNum
   NewRepCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.RepIndexNum:int = obj["RepIndexNum"]
      """  The index number for the rep.  If it is the 2nd rep
            in the list then 2 would be passed.  If it is a new rep then the last line number
            plus one would be passed. The maximum index number is 5.  """  
      self.NewRepCode:str = obj["NewRepCode"]
      """  Proposed sales rep code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofSalesRep_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofShipDate_input:
   """ Required : 
   InvoiceNum
   NewShipDate
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewShipDate:str = obj["NewShipDate"]
      """  Proposed Ship Date.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofShipDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofSoldToCustID_input:
   """ Required : 
   NewSoldToCustID
   checkForResponse
   ds
   """  
   def __init__(self, obj):
      self.NewSoldToCustID:str = obj["NewSoldToCustID"]
      """  Proposed sold to custid  """  
      self.checkForResponse:bool = obj["checkForResponse"]
      """  Continue process based on user response  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofSoldToCustID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.responseMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewTaxAmt:int = obj["NewTaxAmt"]
      """  Proposed Tax amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxCode_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   RateCode
   NewTaxCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewTaxCode:str = obj["NewTaxCode"]
      """  Invoice line tax code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxLock_input:
   """ Required : 
   invoiceNum
   newLockRate
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.newLockRate:bool = obj["newLockRate"]
      """  Proposed invoice tax lock rate.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxLock_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxPDate_input:
   """ Required : 
   InvoiceNum
   NewTaxPDate
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewTaxPDate:str = obj["NewTaxPDate"]
      """  Proposed Tax Point Date.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxPDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxPercent_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewPercent
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewPercent:int = obj["NewPercent"]
      """  Proposed Tax percent.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRateDate_input:
   """ Required : 
   invoiceNum
   newTaxRateDate
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number.  """  
      self.newTaxRateDate:str = obj["newTaxRateDate"]
      """  Proposed Tax Rate Date.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxRateDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRateGrpCode_input:
   """ Required : 
   InvoiceNum
   NewRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewRateGrpCode:str = obj["NewRateGrpCode"]
      """  The New currency code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxRateGrpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxReportAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewRptAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewRptAmt:int = obj["NewRptAmt"]
      """  Proposed reportable amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxReportAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRgn_input:
   """ Required : 
   invoiceNum
   taxRegionCode
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number  """  
      self.taxRegionCode:str = obj["taxRegionCode"]
      """  Proposed Tax Region Code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxRgn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxableAmt_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   TaxCode
   RateCode
   NewTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice line number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Invoice line tax code.  """  
      self.RateCode:str = obj["RateCode"]
      """  Invoice line tax rate code.  """  
      self.NewTaxableAmt:int = obj["NewTaxableAmt"]
      """  Proposed Taxable amount.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTermsCode_input:
   """ Required : 
   InvoiceNum
   NewTermsCode
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewTermsCode:str = obj["NewTermsCode"]
      """  Proposed Terms code.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTermsCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class OnChangeofUseSOCCDefaults_input:
   """ Required : 
   InvoiceNum
   UseSOCC
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.UseSOCC:bool = obj["UseSOCC"]
      """  Use sales order credit card defaults.  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class OnChangeofUseSOCCDefaults_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PopulateInvcHeadTransferList_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      pass

class PopulateInvcHeadTransferList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PrePostBOEChangeStatus_input:
   """ Required : 
   ipGLTransType
   ipBOEInvoiceNum
   ipEditList
   """  
   def __init__(self, obj):
      self.ipGLTransType:str = obj["ipGLTransType"]
      """  GL transaction Type.  """  
      self.ipBOEInvoiceNum:int = obj["ipBOEInvoiceNum"]
      """  BOE Invoice Number.  """  
      self.ipEditList:bool = obj["ipEditList"]
      """  to print Edit List.  """  
      pass

class PrePostBOEChangeStatus_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ipGroupID:str = obj["parameters"]
      self.GLMessage:str = obj["parameters"]
      self.GLWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class PrePostBOEInvoice_input:
   """ Required : 
   ipBOEInvoiceNum
   ipTCOnline
   """  
   def __init__(self, obj):
      self.ipBOEInvoiceNum:int = obj["ipBOEInvoiceNum"]
      """  BOE Invoice Number.  """  
      self.ipTCOnline:bool = obj["ipTCOnline"]
      """  Tax Connect status.  """  
      pass

class PrePostBOEInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.GLMessage:str = obj["parameters"]
      self.GLWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class PrePrintInvoices_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group ID  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Num  """  
      pass

class PrePrintInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errors:str = obj["parameters"]
      pass

      """  output parameters  """  

class PreUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class PreUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.requiresUserInput:bool = obj["requiresUserInput"]
      pass

      """  output parameters  """  

class RMALineTax_input:
   """ Required : 
   InvoiceNum
   InvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.InvoiceNum:int = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RMALineTax_output:
   def __init__(self, obj):
      pass

class RecalcAmortAmountRowMod_input:
   """ Required : 
   ipProposedPct
   ds
   """  
   def __init__(self, obj):
      self.ipProposedPct:int = obj["ipProposedPct"]
      """  proposed amortization percent  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RecalcAmortAmountRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RecalcAmortAmount_input:
   """ Required : 
   ipProposedPct
   ds
   """  
   def __init__(self, obj):
      self.ipProposedPct:int = obj["ipProposedPct"]
      """  proposed amortization percent  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RecalcAmortAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RecalcAmortPercentRowMod_input:
   """ Required : 
   ipProposedAmt
   ds
   """  
   def __init__(self, obj):
      self.ipProposedAmt:int = obj["ipProposedAmt"]
      """  proposed amortization amount  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RecalcAmortPercentRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RecalcAmortPercent_input:
   """ Required : 
   ipProposedAmt
   ds
   """  
   def __init__(self, obj):
      self.ipProposedAmt:int = obj["ipProposedAmt"]
      """  proposed amortization amount  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RecalcAmortPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RecalcDeferredTotals_input:
   """ Required : 
   ipInvoiceNum
   ipInvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  invoice number  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  invoice line  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RecalcDeferredTotals_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RemoveMXInvcRef_input:
   """ Required : 
   invoiceNum
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      pass

class RemoveMXInvcRef_output:
   def __init__(self, obj):
      pass

class RestoreAmortizationScheduleRowMod_input:
   """ Required : 
   ipInvoiceNum
   ipInvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  invoice line number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RestoreAmortizationScheduleRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class RestoreAmortizationSchedule_input:
   """ Required : 
   ipInvoiceNum
   ipInvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  invoice line number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class RestoreAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SelectUninvoicedDropShipments_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["ds"]
      pass

class SelectUninvoicedDropShipments_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvGetDropShipTableset] = obj["returnObj"]
      pass

class SetReadyToCalcEx_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   ipCalcAll
   ipCalledFromUI
   ds
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  ipGroupID  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  ipInvoiceNum  """  
      self.ipCalcAll:bool = obj["ipCalcAll"]
      """  ipCalcAll  """  
      self.ipCalledFromUI:bool = obj["ipCalledFromUI"]
      """  ipCalledFromUI  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class SetReadyToCalcEx_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SetReadyToCalc_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   ipCalcAll
   ds
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  ipGroupID  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  ipInvoiceNum  """  
      self.ipCalcAll:bool = obj["ipCalcAll"]
      """  ipCalcAll  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class SetReadyToCalc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class TransferSelectedInvoices_input:
   """ Required : 
   sTransferGroup
   ds
   """  
   def __init__(self, obj):
      self.sTransferGroup:str = obj["sTransferGroup"]
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      pass

class TransferSelectedInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_InvcHeadListTableset] = obj["ds"]
      self.grpTotalInvAmt:int = obj["parameters"]
      pass

      """  output parameters  """  

class UpdateBOEStatus_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class UpdateBOEStatus_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateEInvoiceStatus_input:
   """ Required : 
   ipInvoiceNum
   ipEInvoiceFlag
   ipStatus
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Current invoice num  """  
      self.ipEInvoiceFlag:bool = obj["ipEInvoiceFlag"]
      """  Whether current invoice is eInvoice or not  """  
      self.ipStatus:int = obj["ipStatus"]
      """  New eInvoice Status  """  
      pass

class UpdateEInvoiceStatus_output:
   def __init__(self, obj):
      pass

class UpdateExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtARInvoiceTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtARInvoiceTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class UpdateMXCancellationID_input:
   """ Required : 
   ttInvcHead
   """  
   def __init__(self, obj):
      self.ttInvcHead:list[Erp_Tablesets_InvcHeadRow] = obj["ttInvcHead"]
      pass

class UpdateMXCancellationID_output:
   def __init__(self, obj):
      pass

class UpdateMXGlobalInvoicePeriod_input:
   """ Required : 
   invoiceNum
   fiscalPeriod
   mxGeneralPublic
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number  """  
      self.fiscalPeriod:int = obj["fiscalPeriod"]
      """  Fiscal Period  """  
      self.mxGeneralPublic:bool = obj["mxGeneralPublic"]
      """  Customer mxGeneralPublic  """  
      pass

class UpdateMXGlobalInvoicePeriod_output:
   def __init__(self, obj):
      pass

class UpdateMXInvcRef_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class UpdateMXInvcRef_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateMasterRowMod_input:
   """ Required : 
   ds
   cGroupID
   cTableName
   runCheckAmortSched
   runChkLtrOfCredit
   genAmortSched
   lRASchedExists
   ipInvoiceNum
   ipInvoiceLine
   cARLOCID
   suppressUserPrompts
   dTotalCharges
   lGetDefaultAccount
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current GroupID on Invoice  """  
      self.cTableName:str = obj["cTableName"]
      """  Indicates the tableName that triggered the update  """  
      self.runCheckAmortSched:bool = obj["runCheckAmortSched"]
      """  Indicates whether the chkAmortSchedCore method should be called  """  
      self.runChkLtrOfCredit:bool = obj["runChkLtrOfCredit"]
      """  Indicates whether the chkLtrOfCredit method should be called  """  
      self.genAmortSched:bool = obj["genAmortSched"]
      """  Indicates whether Amortization schedules should be either restored or generated  """  
      self.lRASchedExists:bool = obj["lRASchedExists"]
      """  value of current InvcDtl.RASchedExists field  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  current invoice num used to call chkLtrOfCredCore  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  current invoice line  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  current ARLOCID used to call chkLtrOfCredCore  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  Indicates if user prompts should be suppressed  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  InvcHead.InvoiceAmt used in call to CheckLtrOfCredit  """  
      self.lGetDefaultAccount:bool = obj["lGetDefaultAccount"]
      """  Set the global variable to get the default account if the product code or part are dirty  """  
      pass

class UpdateMasterRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.genAmortSched:bool = obj["genAmortSched"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.opGenMessage:str = obj["parameters"]
      self.opLtrCrdMsg:str = obj["parameters"]
      self.lUpdateRan:bool = obj["lUpdateRan"]
      pass

      """  output parameters  """  

class UpdateMasterUsingPasteInsertRowMod_input:
   """ Required : 
   ds
   cGroupID
   cTableName
   runCheckAmortSched
   runChkLtrOfCredit
   genAmortSched
   lRASchedExists
   ipInvoiceNum
   ipInvoiceLine
   cARLOCID
   suppressUserPrompts
   dTotalCharges
   lGetDefaultAccount
   pasteInsertColumnsToValidate
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current GroupID on Invoice  """  
      self.cTableName:str = obj["cTableName"]
      """  Indicates the tableName that triggered the update  """  
      self.runCheckAmortSched:bool = obj["runCheckAmortSched"]
      """  Indicates whether the chkAmortSchedCore method should be called  """  
      self.runChkLtrOfCredit:bool = obj["runChkLtrOfCredit"]
      """  Indicates whether the chkLtrOfCredit method should be called  """  
      self.genAmortSched:bool = obj["genAmortSched"]
      """  Indicates whether Amortization schedules should be either restored or generated  """  
      self.lRASchedExists:bool = obj["lRASchedExists"]
      """  value of current InvcDtl.RASchedExists field  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  current invoice num used to call chkLtrOfCredCore  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  current invoice line  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  current ARLOCID used to call chkLtrOfCredCore  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  Indicates if user prompts should be suppressed  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  InvcHead.InvoiceAmt used in call to CheckLtrOfCredit  """  
      self.lGetDefaultAccount:bool = obj["lGetDefaultAccount"]
      """  Set the global variable to get the default account if the product code or part are dirty  """  
      self.pasteInsertColumnsToValidate:str = obj["pasteInsertColumnsToValidate"]
      """  Set the columns to validate before update the records only when it is using paste insert process.  """  
      pass

class UpdateMasterUsingPasteInsertRowMod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.genAmortSched:bool = obj["genAmortSched"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.opGenMessage:str = obj["parameters"]
      self.opLtrCrdMsg:str = obj["parameters"]
      self.lUpdateRan:bool = obj["lUpdateRan"]
      pass

      """  output parameters  """  

class UpdateMasterUsingPasteInsert_input:
   """ Required : 
   ds
   cGroupID
   cTableName
   runCheckAmortSched
   runChkLtrOfCredit
   genAmortSched
   lRASchedExists
   ipInvoiceNum
   ipInvoiceLine
   cARLOCID
   suppressUserPrompts
   dTotalCharges
   lGetDefaultAccount
   pasteInsertColumnsToValidate
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current GroupID on Invoice  """  
      self.cTableName:str = obj["cTableName"]
      """  Indicates the tableName that triggered the update  """  
      self.runCheckAmortSched:bool = obj["runCheckAmortSched"]
      """  Indicates whether the chkAmortSchedCore method should be called  """  
      self.runChkLtrOfCredit:bool = obj["runChkLtrOfCredit"]
      """  Indicates whether the chkLtrOfCredit method should be called  """  
      self.genAmortSched:bool = obj["genAmortSched"]
      """  Indicates whether Amortization schedules should be either restored or generated  """  
      self.lRASchedExists:bool = obj["lRASchedExists"]
      """  value of current InvcDtl.RASchedExists field  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  current invoice num used to call chkLtrOfCredCore  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  current invoice line  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  current ARLOCID used to call chkLtrOfCredCore  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  Indicates if user prompts should be suppressed  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  InvcHead.InvoiceAmt used in call to CheckLtrOfCredit  """  
      self.lGetDefaultAccount:bool = obj["lGetDefaultAccount"]
      """  Set the global variable to get the default account if the product code or part are dirty  """  
      self.pasteInsertColumnsToValidate:str = obj["pasteInsertColumnsToValidate"]
      """  Set the columns to validate before update the records only when it is using paste insert process.  """  
      pass

class UpdateMasterUsingPasteInsert_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.genAmortSched:bool = obj["genAmortSched"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.opGenMessage:str = obj["parameters"]
      self.opLtrCrdMsg:str = obj["parameters"]
      self.lUpdateRan:bool = obj["lUpdateRan"]
      pass

      """  output parameters  """  

class UpdateMaster_input:
   """ Required : 
   ds
   cGroupID
   cTableName
   runCheckAmortSched
   runChkLtrOfCredit
   genAmortSched
   lRASchedExists
   ipInvoiceNum
   ipInvoiceLine
   cARLOCID
   suppressUserPrompts
   dTotalCharges
   lGetDefaultAccount
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current GroupID on Invoice  """  
      self.cTableName:str = obj["cTableName"]
      """  Indicates the tableName that triggered the update  """  
      self.runCheckAmortSched:bool = obj["runCheckAmortSched"]
      """  Indicates whether the chkAmortSchedCore method should be called  """  
      self.runChkLtrOfCredit:bool = obj["runChkLtrOfCredit"]
      """  Indicates whether the chkLtrOfCredit method should be called  """  
      self.genAmortSched:bool = obj["genAmortSched"]
      """  Indicates whether Amortization schedules should be either restored or generated  """  
      self.lRASchedExists:bool = obj["lRASchedExists"]
      """  value of current InvcDtl.RASchedExists field  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  current invoice num used to call chkLtrOfCredCore  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  current invoice line  """  
      self.cARLOCID:str = obj["cARLOCID"]
      """  current ARLOCID used to call chkLtrOfCredCore  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  Indicates if user prompts should be suppressed  """  
      self.dTotalCharges:int = obj["dTotalCharges"]
      """  InvcHead.InvoiceAmt used in call to CheckLtrOfCredit  """  
      self.lGetDefaultAccount:bool = obj["lGetDefaultAccount"]
      """  Set the global variable to get the default account if the product code or part are dirty  """  
      pass

class UpdateMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.genAmortSched:bool = obj["genAmortSched"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.opGenMessage:str = obj["parameters"]
      self.opLtrCrdMsg:str = obj["parameters"]
      self.lUpdateRan:bool = obj["lUpdateRan"]
      pass

      """  output parameters  """  

class UpdatePEInvcTaxSummary_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   ipTaxCode
   ipRateCode
   ds
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group ID.  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipTaxCode:str = obj["ipTaxCode"]
      """  Tax Code.  """  
      self.ipRateCode:str = obj["ipRateCode"]
      """  Tax Code.  """  
      self.ds:list[Erp_Tablesets_PEDetractionsTableset] = obj["ds"]
      pass

class UpdatePEInvcTaxSummary_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PEDetractionsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdatePEInvcTax_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   ipInvoiceLine
   ipTaxCode
   ipMode
   ds
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group ID.  """  
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      """  Invoice line number.  """  
      self.ipTaxCode:str = obj["ipTaxCode"]
      """  Tax Code.  """  
      self.ipMode:str = obj["ipMode"]
      """  Mode  """  
      self.ds:list[Erp_Tablesets_PEDetractionsTableset] = obj["ds"]
      pass

class UpdatePEInvcTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_PEDetractionsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateTaxLiability_input:
   """ Required : 
   invoiceNum
   taxRegionCode
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      self.taxRegionCode:str = obj["taxRegionCode"]
      pass

class UpdateTaxLiability_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class Update_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class Update_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class Update_ttInvcHead_input:
   """ Required : 
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.invoiceNum:int = obj["invoiceNum"]
      """  invoice number  """  
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

class Update_ttInvcHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateGroupID_input:
   """ Required : 
   sGroupID
   """  
   def __init__(self, obj):
      self.sGroupID:str = obj["sGroupID"]
      pass

class ValidateGroupID_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class ValidateLegalNum_input:
   """ Required : 
   inInvoiceNum
   """  
   def __init__(self, obj):
      self.inInvoiceNum:int = obj["inInvoiceNum"]
      """  Invoice to validate  """  
      pass

class ValidateLegalNum_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      """  Validation Message  """  
      pass

class ValidateOTSTaxID_input:
   """ Required : 
   ds
   manualValidation
   hmrcFraudPrevHeader
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.manualValidation:bool = obj["manualValidation"]
      self.hmrcFraudPrevHeader:str = obj["hmrcFraudPrevHeader"]
      pass

class ValidateOTSTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_ARInvoiceTableset] = obj["ds"]
      self.opMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class VoidLegalNumber_input:
   """ Required : 
   ipInvoiceNum
   ipVoidedReason
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:int = obj["ipInvoiceNum"]
      """  Invoice number  """  
      self.ipVoidedReason:str = obj["ipVoidedReason"]
      """  Reason for the void  """  
      pass

class VoidLegalNumber_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_ARInvoiceTableset] = obj["returnObj"]
      pass

class createNewMXInvcHeadFiscalText_input:
   """ Required : 
   custNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.custNum:int = obj["custNum"]
      """  Customer  """  
      self.invoiceNum:int = obj["invoiceNum"]
      """  Invoice Number  """  
      pass

class createNewMXInvcHeadFiscalText_output:
   def __init__(self, obj):
      pass

class fillAllocDeposit_output:
   def __init__(self, obj):
      pass

