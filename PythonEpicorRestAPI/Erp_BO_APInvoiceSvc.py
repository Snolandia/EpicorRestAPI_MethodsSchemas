import asyncio
import aiohttp
import configEpicorSchemas



# Title: Erp.BO.APInvoiceSvc
# Description: AP Invoice Service
# Version: v1



#########################################################################
# OData methods:
#########################################################################
async def getServiceDocument(epicorHeaders = None):
   """  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => application/json
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/",headers=creds) as resp:
           return await resp.json()

async def get_metadata(epicorHeaders = None):
   """  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: Returns metadata document => content
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/$metadata",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvoices items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvoices
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices",headers=creds) as resp:
           return await resp.json()

async def post_APInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvHedRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvHedRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum(Company, VendorNum, InvoiceNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvoice item
   Description: Calls GetByID to retrieve the APInvoice item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvHedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvoices_Company_VendorNum_InvoiceNum(Company, VendorNum, InvoiceNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvoice for the service
   Description: Calls UpdateExt to update APInvoice. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvHedRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvoices_Company_VendorNum_InvoiceNum(Company, VendorNum, InvoiceNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvoice item
   Description: Call UpdateExt to delete APInvoice item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvoice
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPInvExps(Company, VendorNum, InvoiceNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APIHAPInvExps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APIHAPInvExps1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPInvExps",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvExp item
   Description: Calls GetByID to retrieve the APIHAPInvExp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvExp1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPInvMscs(Company, VendorNum, InvoiceNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APIHAPInvMscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APIHAPInvMscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPInvMscs",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvMsc item
   Description: Calls GetByID to retrieve the APIHAPInvMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvMsc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPLnTaxes(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APIHAPLnTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APIHAPLnTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPLnTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APIHAPLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPLnTax item
   Description: Calls GetByID to retrieve the APIHAPLnTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPLnTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APIHAPLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvDtls(Company, VendorNum, InvoiceNum, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvDtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvDtls",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtl item
   Description: Calls GetByID to retrieve the APInvDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvHedMscTaxes(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvHedMscTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvHedMscTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvHedMscTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvHedMscTaxes_Company_VendorNum_InvoiceNum_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvHedMscTax item
   Description: Calls GetByID to retrieve the APInvHedMscTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvHedMscTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvHedMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvHedMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvScheds(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvScheds items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvScheds1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvScheds",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvScheds_Company_VendorNum_InvoiceNum_PaySeq(Company, VendorNum, InvoiceNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvSched item
   Description: Calls GetByID to retrieve the APInvSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvSched1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvScheds(" + Company + "," + VendorNum + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvTaxes(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvTaxes_Company_VendorNum_InvoiceNum_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvTax item
   Description: Calls GetByID to retrieve the APInvTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_PESUNATDtls(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PESUNATDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PESUNATDtls1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PESUNATDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/PESUNATDtls",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_PESUNATDtls_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PESUNATDtl item
   Description: Calls GetByID to retrieve the PESUNATDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PESUNATDtl1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PESUNATDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/PESUNATDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_EntityGLCs(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get EntityGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_EntityGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/EntityGLCs",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, VendorNum, InvoiceNum, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_PEAPInvTaxes(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get PEAPInvTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PEAPInvTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PEAPInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/PEAPInvTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_PEAPInvTaxes_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PEAPInvTax item
   Description: Calls GetByID to retrieve the PEAPInvTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PEAPInvTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PEAPInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/PEAPInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvHedAttches(Company, VendorNum, InvoiceNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvHedAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvHedAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvHedAttches",headers=creds) as resp:
           return await resp.json()

async def get_APInvoices_Company_VendorNum_InvoiceNum_APInvHedAttches_Company_VendorNum_InvoiceNum_DrawingSeq(Company, VendorNum, InvoiceNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvHedAttch item
   Description: Calls GetByID to retrieve the APInvHedAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvHedAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvoices(" + Company + "," + VendorNum + "," + InvoiceNum + ")/APInvHedAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExps(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APIHAPInvExps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APIHAPInvExps
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps",headers=creds) as resp:
           return await resp.json()

async def post_APIHAPInvExps(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APIHAPInvExps
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvExp item
   Description: Calls GetByID to retrieve the APIHAPInvExp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APIHAPInvExp for the service
   Description: Calls UpdateExt to update APIHAPInvExp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APIHAPInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APIHAPInvExp item
   Description: Call UpdateExt to delete APIHAPInvExp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APIHAPInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_APIHAPInvExpTGLCs(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APIHAPInvExpTGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APIHAPInvExpTGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/APIHAPInvExpTGLCs",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_APIHAPInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_TGLCTranNum(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, TGLCTranNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvExpTGLC item
   Description: Calls GetByID to retrieve the APIHAPInvExpTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvExpTGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param TGLCTranNum: Desc: TGLCTranNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/APIHAPInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + TGLCTranNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExpTGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APIHAPInvExpTGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APIHAPInvExpTGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExpTGLCs",headers=creds) as resp:
           return await resp.json()

async def post_APIHAPInvExpTGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APIHAPInvExpTGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpTGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpTGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExpTGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_TGLCTranNum(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, TGLCTranNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvExpTGLC item
   Description: Calls GetByID to retrieve the APIHAPInvExpTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param TGLCTranNum: Desc: TGLCTranNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + TGLCTranNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APIHAPInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_TGLCTranNum(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, TGLCTranNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APIHAPInvExpTGLC for the service
   Description: Calls UpdateExt to update APIHAPInvExpTGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APIHAPInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param TGLCTranNum: Desc: TGLCTranNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APIHAPInvExpTGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + TGLCTranNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APIHAPInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_TGLCTranNum(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, TGLCTranNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APIHAPInvExpTGLC item
   Description: Call UpdateExt to delete APIHAPInvExpTGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APIHAPInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param TGLCTranNum: Desc: TGLCTranNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + TGLCTranNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvMscs(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APIHAPInvMscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APIHAPInvMscs
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs",headers=creds) as resp:
           return await resp.json()

async def post_APIHAPInvMscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APIHAPInvMscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APIHAPInvMscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APIHAPInvMscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPInvMsc item
   Description: Calls GetByID to retrieve the APIHAPInvMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APIHAPInvMsc for the service
   Description: Calls UpdateExt to update APIHAPInvMsc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APIHAPInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APIHAPInvMscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APIHAPInvMsc item
   Description: Call UpdateExt to delete APIHAPInvMsc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APIHAPInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_RcvMiscs(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get RcvMiscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_RcvMiscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.RcvMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")/RcvMiscs",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_RcvMiscs_Company_VendorNum_PurPoint_PackSlip_MiscSeq(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, PurPoint, PackSlip, MiscSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the RcvMisc item
   Description: Calls GetByID to retrieve the RcvMisc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_RcvMisc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param PurPoint: Desc: PurPoint   Required: True   Allow empty value : True
      :param PackSlip: Desc: PackSlip   Required: True   Allow empty value : True
      :param MiscSeq: Desc: MiscSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.RcvMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")/RcvMiscs(" + Company + "," + VendorNum + "," + PurPoint + "," + PackSlip + "," + MiscSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_RcvMiscs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get RcvMiscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_RcvMiscs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.RcvMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/RcvMiscs",headers=creds) as resp:
           return await resp.json()

async def post_RcvMiscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_RcvMiscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.RcvMiscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.RcvMiscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/RcvMiscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_RcvMiscs_Company_VendorNum_PurPoint_PackSlip_MiscSeq(Company, VendorNum, PurPoint, PackSlip, MiscSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the RcvMisc item
   Description: Calls GetByID to retrieve the RcvMisc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_RcvMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param PurPoint: Desc: PurPoint   Required: True   Allow empty value : True
      :param PackSlip: Desc: PackSlip   Required: True   Allow empty value : True
      :param MiscSeq: Desc: MiscSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.RcvMiscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/RcvMiscs(" + Company + "," + VendorNum + "," + PurPoint + "," + PackSlip + "," + MiscSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_RcvMiscs_Company_VendorNum_PurPoint_PackSlip_MiscSeq(Company, VendorNum, PurPoint, PackSlip, MiscSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update RcvMisc for the service
   Description: Calls UpdateExt to update RcvMisc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_RcvMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param PurPoint: Desc: PurPoint   Required: True   Allow empty value : True
      :param PackSlip: Desc: PackSlip   Required: True   Allow empty value : True
      :param MiscSeq: Desc: MiscSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.RcvMiscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/RcvMiscs(" + Company + "," + VendorNum + "," + PurPoint + "," + PackSlip + "," + MiscSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_RcvMiscs_Company_VendorNum_PurPoint_PackSlip_MiscSeq(Company, VendorNum, PurPoint, PackSlip, MiscSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete RcvMisc item
   Description: Call UpdateExt to delete RcvMisc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_RcvMisc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param PurPoint: Desc: PurPoint   Required: True   Allow empty value : True
      :param PackSlip: Desc: PackSlip   Required: True   Allow empty value : True
      :param MiscSeq: Desc: MiscSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/RcvMiscs(" + Company + "," + VendorNum + "," + PurPoint + "," + PackSlip + "," + MiscSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APIHAPLnTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APIHAPLnTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APIHAPLnTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APIHAPLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPLnTaxes",headers=creds) as resp:
           return await resp.json()

async def post_APIHAPLnTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APIHAPLnTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APIHAPLnTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APIHAPLnTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPLnTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APIHAPLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APIHAPLnTax item
   Description: Calls GetByID to retrieve the APIHAPLnTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APIHAPLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APIHAPLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APIHAPLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APIHAPLnTax for the service
   Description: Calls UpdateExt to update APIHAPLnTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APIHAPLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APIHAPLnTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APIHAPLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APIHAPLnTax item
   Description: Call UpdateExt to delete APIHAPLnTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APIHAPLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APIHAPLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvDtls
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls",headers=creds) as resp:
           return await resp.json()

async def post_APInvDtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtl item
   Description: Calls GetByID to retrieve the APInvDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine(Company, VendorNum, InvoiceNum, InvoiceLine, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvDtl for the service
   Description: Calls UpdateExt to update APInvDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine(Company, VendorNum, InvoiceNum, InvoiceLine, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvDtl item
   Description: Call UpdateExt to delete APInvDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlDEASches(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvDtlDEASches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvDtlDEASches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlDEASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlDEASches",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlDEASches_Company_VendorNum_InvoiceNum_InvoiceLine_AmortSeq(Company, VendorNum, InvoiceNum, InvoiceLine, AmortSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlDEASch item
   Description: Calls GetByID to retrieve the APInvDtlDEASch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlDEASch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlDEASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlDEASches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvExps(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvExps items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvExps1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvExps",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvExp item
   Description: Calls GetByID to retrieve the APInvExp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvExp1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvJobs(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvJobs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvJobs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvJobRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvJobs",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvJobs_Company_VendorNum_InvoiceNum_InvoiceLine_JobNum_AssemblySeq_MtlSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, JobNum, AssemblySeq, MtlSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvJob item
   Description: Calls GetByID to retrieve the APInvJob item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvJob1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvJobRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvJobs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvMscs(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvMscs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvMscs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvMscs",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvMsc item
   Description: Calls GetByID to retrieve the APInvMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvMsc1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvPBs(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvPBs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvPBs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvPBRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvPBs",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvPBs_Company_VendorNum_InvoiceNum_InvoiceLine_RoleCd(Company, VendorNum, InvoiceNum, InvoiceLine, RoleCd, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvPB item
   Description: Calls GetByID to retrieve the APInvPB item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvPB1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param RoleCd: Desc: RoleCd   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvPBRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvPBs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + RoleCd + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APLnTaxes(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APLnTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APLnTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APLnTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APLnTax item
   Description: Calls GetByID to retrieve the APLnTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APLnTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlTGLCs(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvDtlTGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvDtlTGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlTGLCs",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlTGLCs_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlTGLC item
   Description: Calls GetByID to retrieve the APInvDtlTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlTGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlTGLCs(" + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlAttches(Company, VendorNum, InvoiceNum, InvoiceLine, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvDtlAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvDtlAttches1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlAttches",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtls_Company_VendorNum_InvoiceNum_InvoiceLine_APInvDtlAttches_Company_VendorNum_InvoiceNum_InvoiceLine_DrawingSeq(Company, VendorNum, InvoiceNum, InvoiceLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlAttch item
   Description: Calls GetByID to retrieve the APInvDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlAttch1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + ")/APInvDtlAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlDEASches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvDtlDEASches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvDtlDEASches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlDEASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlDEASches",headers=creds) as resp:
           return await resp.json()

async def post_APInvDtlDEASches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvDtlDEASches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvDtlDEASchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvDtlDEASchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlDEASches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlDEASches_Company_VendorNum_InvoiceNum_InvoiceLine_AmortSeq(Company, VendorNum, InvoiceNum, InvoiceLine, AmortSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlDEASch item
   Description: Calls GetByID to retrieve the APInvDtlDEASch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlDEASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlDEASchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlDEASches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvDtlDEASches_Company_VendorNum_InvoiceNum_InvoiceLine_AmortSeq(Company, VendorNum, InvoiceNum, InvoiceLine, AmortSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvDtlDEASch for the service
   Description: Calls UpdateExt to update APInvDtlDEASch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvDtlDEASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvDtlDEASchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlDEASches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvDtlDEASches_Company_VendorNum_InvoiceNum_InvoiceLine_AmortSeq(Company, VendorNum, InvoiceNum, InvoiceLine, AmortSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvDtlDEASch item
   Description: Call UpdateExt to delete APInvDtlDEASch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvDtlDEASch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param AmortSeq: Desc: AmortSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlDEASches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + AmortSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvExps(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvExps items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvExps
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps",headers=creds) as resp:
           return await resp.json()

async def post_APInvExps(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvExps
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvExpRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvExpRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvExp item
   Description: Calls GetByID to retrieve the APInvExp item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvExpRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvExp for the service
   Description: Calls UpdateExt to update APInvExp. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvExpRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvExp item
   Description: Call UpdateExt to delete APInvExp item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvExp
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_APInvExpTGLCs(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvExpTGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvExpTGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/APInvExpTGLCs",headers=creds) as resp:
           return await resp.json()

async def get_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_APInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvExpTGLC item
   Description: Calls GetByID to retrieve the APInvExpTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvExpTGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/APInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_GlbAPIETGLCs(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get GlbAPIETGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_GlbAPIETGLCs1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.GlbAPIETGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/GlbAPIETGLCs",headers=creds) as resp:
           return await resp.json()

async def get_APInvExps_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_GlbAPIETGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the GlbAPIETGLC item
   Description: Calls GetByID to retrieve the GlbAPIETGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_GlbAPIETGLC1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.GlbAPIETGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExps(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + ")/GlbAPIETGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvExpTGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvExpTGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvExpTGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExpTGLCs",headers=creds) as resp:
           return await resp.json()

async def post_APInvExpTGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvExpTGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvExpTGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvExpTGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExpTGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvExpTGLC item
   Description: Calls GetByID to retrieve the APInvExpTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvExpTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvExpTGLC for the service
   Description: Calls UpdateExt to update APInvExpTGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvExpTGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvExpTGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvExpTGLC item
   Description: Call UpdateExt to delete APInvExpTGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvExpTGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvExpTGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_GlbAPIETGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get GlbAPIETGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_GlbAPIETGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.GlbAPIETGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/GlbAPIETGLCs",headers=creds) as resp:
           return await resp.json()

async def post_GlbAPIETGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_GlbAPIETGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.GlbAPIETGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.GlbAPIETGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/GlbAPIETGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GlbAPIETGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the GlbAPIETGLC item
   Description: Calls GetByID to retrieve the GlbAPIETGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_GlbAPIETGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.GlbAPIETGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/GlbAPIETGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_GlbAPIETGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update GlbAPIETGLC for the service
   Description: Calls UpdateExt to update GlbAPIETGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_GlbAPIETGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.GlbAPIETGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/GlbAPIETGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_GlbAPIETGLCs_Company_VendorNum_InvoiceNum_InvoiceLine_InvExpSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, InvExpSeq, SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete GlbAPIETGLC item
   Description: Call UpdateExt to delete GlbAPIETGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_GlbAPIETGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param InvExpSeq: Desc: InvExpSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/GlbAPIETGLCs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + InvExpSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvJobs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvJobs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvJobs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvJobRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvJobs",headers=creds) as resp:
           return await resp.json()

async def post_APInvJobs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvJobs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvJobRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvJobRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvJobs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvJobs_Company_VendorNum_InvoiceNum_InvoiceLine_JobNum_AssemblySeq_MtlSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, JobNum, AssemblySeq, MtlSeq, SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvJob item
   Description: Calls GetByID to retrieve the APInvJob item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvJob
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvJobRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvJobs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvJobs_Company_VendorNum_InvoiceNum_InvoiceLine_JobNum_AssemblySeq_MtlSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, JobNum, AssemblySeq, MtlSeq, SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvJob for the service
   Description: Calls UpdateExt to update APInvJob. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvJob
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvJobRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvJobs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvJobs_Company_VendorNum_InvoiceNum_InvoiceLine_JobNum_AssemblySeq_MtlSeq_SysRowID(Company, VendorNum, InvoiceNum, InvoiceLine, JobNum, AssemblySeq, MtlSeq, SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvJob item
   Description: Call UpdateExt to delete APInvJob item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvJob
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param JobNum: Desc: JobNum   Required: True   Allow empty value : True
      :param AssemblySeq: Desc: AssemblySeq   Required: True
      :param MtlSeq: Desc: MtlSeq   Required: True
      :param SysRowID: Desc: SysRowID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvJobs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + JobNum + "," + AssemblySeq + "," + MtlSeq + "," + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvMscs(select = None, expand = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvMscs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvMscs
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs",headers=creds) as resp:
           return await resp.json()

async def post_APInvMscs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvMscs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvMscRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvMscRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, expand = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvMsc item
   Description: Calls GetByID to retrieve the APInvMsc item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param expand: Desc: Odata expand to child
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvMscRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvMsc for the service
   Description: Calls UpdateExt to update APInvMsc. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvMscRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvMsc item
   Description: Call UpdateExt to delete APInvMsc item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvMsc
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvLnMscTaxes(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID for the service
   Description: Get APInvLnMscTaxes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_APInvLnMscTaxes1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvLnMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")/APInvLnMscTaxes",headers=creds) as resp:
           return await resp.json()

async def get_APInvMscs_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvLnMscTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvLnMscTax item
   Description: Calls GetByID to retrieve the APInvLnMscTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvLnMscTax1
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvLnMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvMscs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + ")/APInvLnMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvLnMscTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvLnMscTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvLnMscTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvLnMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvLnMscTaxes",headers=creds) as resp:
           return await resp.json()

async def post_APInvLnMscTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvLnMscTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvLnMscTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvLnMscTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvLnMscTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvLnMscTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvLnMscTax item
   Description: Calls GetByID to retrieve the APInvLnMscTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvLnMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvLnMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvLnMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvLnMscTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvLnMscTax for the service
   Description: Calls UpdateExt to update APInvLnMscTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvLnMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvLnMscTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvLnMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvLnMscTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvLnMscTax item
   Description: Call UpdateExt to delete APInvLnMscTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvLnMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvLnMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvPBs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvPBs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvPBs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvPBRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvPBs",headers=creds) as resp:
           return await resp.json()

async def post_APInvPBs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvPBs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvPBRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvPBRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvPBs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvPBs_Company_VendorNum_InvoiceNum_InvoiceLine_RoleCd(Company, VendorNum, InvoiceNum, InvoiceLine, RoleCd, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvPB item
   Description: Calls GetByID to retrieve the APInvPB item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvPB
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param RoleCd: Desc: RoleCd   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvPBRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvPBs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + RoleCd + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvPBs_Company_VendorNum_InvoiceNum_InvoiceLine_RoleCd(Company, VendorNum, InvoiceNum, InvoiceLine, RoleCd, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvPB for the service
   Description: Calls UpdateExt to update APInvPB. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvPB
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param RoleCd: Desc: RoleCd   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvPBRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvPBs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + RoleCd + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvPBs_Company_VendorNum_InvoiceNum_InvoiceLine_RoleCd(Company, VendorNum, InvoiceNum, InvoiceLine, RoleCd, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvPB item
   Description: Call UpdateExt to delete APInvPB item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvPB
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param RoleCd: Desc: RoleCd   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvPBs(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + RoleCd + ")",headers=creds) as resp:
           return await resp.json()

async def get_APLnTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APLnTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APLnTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APLnTaxes",headers=creds) as resp:
           return await resp.json()

async def post_APLnTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APLnTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APLnTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APLnTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APLnTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APLnTax item
   Description: Calls GetByID to retrieve the APLnTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APLnTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APLnTax for the service
   Description: Calls UpdateExt to update APLnTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APLnTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APLnTaxes_Company_VendorNum_InvoiceNum_InvoiceLine_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, InvoiceLine, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APLnTax item
   Description: Call UpdateExt to delete APLnTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APLnTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APLnTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlTGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvDtlTGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvDtlTGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlTGLCs",headers=creds) as resp:
           return await resp.json()

async def post_APInvDtlTGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvDtlTGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvDtlTGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvDtlTGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlTGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlTGLCs_SysRowID(SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlTGLC item
   Description: Calls GetByID to retrieve the APInvDtlTGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlTGLC
      :param SysRowID: Desc: SysRowID   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlTGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlTGLCs(" + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvDtlTGLCs_SysRowID(SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvDtlTGLC for the service
   Description: Calls UpdateExt to update APInvDtlTGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvDtlTGLC
      :param SysRowID: Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvDtlTGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlTGLCs(" + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvDtlTGLCs_SysRowID(SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvDtlTGLC item
   Description: Call UpdateExt to delete APInvDtlTGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvDtlTGLC
      :param SysRowID: Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlTGLCs(" + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvDtlAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvDtlAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlAttches",headers=creds) as resp:
           return await resp.json()

async def post_APInvDtlAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvDtlAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvDtlAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvDtlAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvDtlAttches_Company_VendorNum_InvoiceNum_InvoiceLine_DrawingSeq(Company, VendorNum, InvoiceNum, InvoiceLine, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvDtlAttch item
   Description: Calls GetByID to retrieve the APInvDtlAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvDtlAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvDtlAttches_Company_VendorNum_InvoiceNum_InvoiceLine_DrawingSeq(Company, VendorNum, InvoiceNum, InvoiceLine, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvDtlAttch for the service
   Description: Calls UpdateExt to update APInvDtlAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvDtlAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvDtlAttches_Company_VendorNum_InvoiceNum_InvoiceLine_DrawingSeq(Company, VendorNum, InvoiceNum, InvoiceLine, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvDtlAttch item
   Description: Call UpdateExt to delete APInvDtlAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvDtlAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param InvoiceLine: Desc: InvoiceLine   Required: True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvDtlAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + InvoiceLine + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvHedMscTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvHedMscTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvHedMscTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedMscTaxes",headers=creds) as resp:
           return await resp.json()

async def post_APInvHedMscTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvHedMscTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvHedMscTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvHedMscTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedMscTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvHedMscTaxes_Company_VendorNum_InvoiceNum_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvHedMscTax item
   Description: Calls GetByID to retrieve the APInvHedMscTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvHedMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvHedMscTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvHedMscTaxes_Company_VendorNum_InvoiceNum_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvHedMscTax for the service
   Description: Calls UpdateExt to update APInvHedMscTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvHedMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvHedMscTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvHedMscTaxes_Company_VendorNum_InvoiceNum_MscNum_APInvMscSysRowID_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, MscNum, APInvMscSysRowID, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvHedMscTax item
   Description: Call UpdateExt to delete APInvHedMscTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvHedMscTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param MscNum: Desc: MscNum   Required: True
      :param APInvMscSysRowID: Desc: APInvMscSysRowID   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedMscTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + MscNum + "," + APInvMscSysRowID + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvScheds(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvScheds items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvScheds
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvScheds",headers=creds) as resp:
           return await resp.json()

async def post_APInvScheds(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvScheds
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvSchedRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvSchedRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvScheds", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvScheds_Company_VendorNum_InvoiceNum_PaySeq(Company, VendorNum, InvoiceNum, PaySeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvSched item
   Description: Calls GetByID to retrieve the APInvSched item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param PaySeq: Desc: PaySeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvSchedRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvScheds(" + Company + "," + VendorNum + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvScheds_Company_VendorNum_InvoiceNum_PaySeq(Company, VendorNum, InvoiceNum, PaySeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvSched for the service
   Description: Calls UpdateExt to update APInvSched. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvSchedRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvScheds(" + Company + "," + VendorNum + "," + InvoiceNum + "," + PaySeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvScheds_Company_VendorNum_InvoiceNum_PaySeq(Company, VendorNum, InvoiceNum, PaySeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvSched item
   Description: Call UpdateExt to delete APInvSched item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvSched
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param PaySeq: Desc: PaySeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvScheds(" + Company + "," + VendorNum + "," + InvoiceNum + "," + PaySeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvTaxes",headers=creds) as resp:
           return await resp.json()

async def post_APInvTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvTaxes_Company_VendorNum_InvoiceNum_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, TaxCode, RateCode, ECAcquisitionSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvTax item
   Description: Calls GetByID to retrieve the APInvTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvTaxes_Company_VendorNum_InvoiceNum_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, TaxCode, RateCode, ECAcquisitionSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvTax for the service
   Description: Calls UpdateExt to update APInvTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvTaxes_Company_VendorNum_InvoiceNum_TaxCode_RateCode_ECAcquisitionSeq(Company, VendorNum, InvoiceNum, TaxCode, RateCode, ECAcquisitionSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvTax item
   Description: Call UpdateExt to delete APInvTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param TaxCode: Desc: TaxCode   Required: True   Allow empty value : True
      :param RateCode: Desc: RateCode   Required: True   Allow empty value : True
      :param ECAcquisitionSeq: Desc: ECAcquisitionSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + TaxCode + "," + RateCode + "," + ECAcquisitionSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_PESUNATDtls(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PESUNATDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PESUNATDtls
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PESUNATDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PESUNATDtls",headers=creds) as resp:
           return await resp.json()

async def post_PESUNATDtls(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PESUNATDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PESUNATDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PESUNATDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PESUNATDtls", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PESUNATDtls_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PESUNATDtl item
   Description: Calls GetByID to retrieve the PESUNATDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PESUNATDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PESUNATDtlRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PESUNATDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PESUNATDtls_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PESUNATDtl for the service
   Description: Calls UpdateExt to update PESUNATDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PESUNATDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PESUNATDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PESUNATDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PESUNATDtls_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PESUNATDtl item
   Description: Call UpdateExt to delete PESUNATDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PESUNATDtl
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PESUNATDtls(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_EntityGLCs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get EntityGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_EntityGLCs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/EntityGLCs",headers=creds) as resp:
           return await resp.json()

async def post_EntityGLCs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_EntityGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/EntityGLCs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def patch_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update EntityGLC for the service
   Description: Calls UpdateExt to update EntityGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company, RelatedToFile, Key1, Key2, Key3, Key4, Key5, Key6, GLControlType, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete EntityGLC item
   Description: Call UpdateExt to delete EntityGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_EntityGLC
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param RelatedToFile: Desc: RelatedToFile   Required: True   Allow empty value : True
      :param Key1: Desc: Key1   Required: True   Allow empty value : True
      :param Key2: Desc: Key2   Required: True   Allow empty value : True
      :param Key3: Desc: Key3   Required: True   Allow empty value : True
      :param Key4: Desc: Key4   Required: True   Allow empty value : True
      :param Key5: Desc: Key5   Required: True   Allow empty value : True
      :param Key6: Desc: Key6   Required: True   Allow empty value : True
      :param GLControlType: Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")",headers=creds) as resp:
           return await resp.json()

async def get_PEAPInvTaxes(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get PEAPInvTaxes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PEAPInvTaxes
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PEAPInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PEAPInvTaxes",headers=creds) as resp:
           return await resp.json()

async def post_PEAPInvTaxes(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PEAPInvTaxes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PEAPInvTaxRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PEAPInvTaxRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PEAPInvTaxes", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_PEAPInvTaxes_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the PEAPInvTax item
   Description: Calls GetByID to retrieve the PEAPInvTax item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PEAPInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PEAPInvTaxRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PEAPInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_PEAPInvTaxes_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update PEAPInvTax for the service
   Description: Calls UpdateExt to update PEAPInvTax. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PEAPInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PEAPInvTaxRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PEAPInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_PEAPInvTaxes_Company_VendorNum_InvoiceNum_LineNum(Company, VendorNum, InvoiceNum, LineNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete PEAPInvTax item
   Description: Call UpdateExt to delete PEAPInvTax item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PEAPInvTax
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param LineNum: Desc: LineNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/PEAPInvTaxes(" + Company + "," + VendorNum + "," + InvoiceNum + "," + LineNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_APInvHedAttches(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get APInvHedAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_APInvHedAttches
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedAttches",headers=creds) as resp:
           return await resp.json()

async def post_APInvHedAttches(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_APInvHedAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.APInvHedAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.APInvHedAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedAttches", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_APInvHedAttches_Company_VendorNum_InvoiceNum_DrawingSeq(Company, VendorNum, InvoiceNum, DrawingSeq, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the APInvHedAttch item
   Description: Calls GetByID to retrieve the APInvHedAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_APInvHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.APInvHedAttchRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def patch_APInvHedAttches_Company_VendorNum_InvoiceNum_DrawingSeq(Company, VendorNum, InvoiceNum, DrawingSeq, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update APInvHedAttch for the service
   Description: Calls UpdateExt to update APInvHedAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_APInvHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.APInvHedAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + DrawingSeq + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_APInvHedAttches_Company_VendorNum_InvoiceNum_DrawingSeq(Company, VendorNum, InvoiceNum, DrawingSeq, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete APInvHedAttch item
   Description: Call UpdateExt to delete APInvHedAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_APInvHedAttch
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param VendorNum: Desc: VendorNum   Required: True
      :param InvoiceNum: Desc: InvoiceNum   Required: True   Allow empty value : True
      :param DrawingSeq: Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/APInvHedAttches(" + Company + "," + VendorNum + "," + InvoiceNum + "," + DrawingSeq + ")",headers=creds) as resp:
           return await resp.json()

async def get_AdditionalForms_ParametersViews(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get AdditionalForms_ParametersViews items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_AdditionalForms_ParametersViews
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.AdditionalForms_ParametersViewRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/AdditionalForms_ParametersViews",headers=creds) as resp:
           return await resp.json()

async def post_AdditionalForms_ParametersViews(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_AdditionalForms_ParametersViews
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.AdditionalForms_ParametersViewRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.AdditionalForms_ParametersViewRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/AdditionalForms_ParametersViews", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_AdditionalForms_ParametersViews_SysRowID(SysRowID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the AdditionalForms_ParametersView item
   Description: Calls GetByID to retrieve the AdditionalForms_ParametersView item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_AdditionalForms_ParametersView
      :param SysRowID: Desc: SysRowID   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.AdditionalForms_ParametersViewRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/AdditionalForms_ParametersViews(" + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_AdditionalForms_ParametersViews_SysRowID(SysRowID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update AdditionalForms_ParametersView for the service
   Description: Calls UpdateExt to update AdditionalForms_ParametersView. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_AdditionalForms_ParametersView
      :param SysRowID: Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.AdditionalForms_ParametersViewRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/AdditionalForms_ParametersViews(" + SysRowID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_AdditionalForms_ParametersViews_SysRowID(SysRowID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete AdditionalForms_ParametersView item
   Description: Call UpdateExt to delete AdditionalForms_ParametersView item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_AdditionalForms_ParametersView
      :param SysRowID: Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/AdditionalForms_ParametersViews(" + SysRowID + ")",headers=creds) as resp:
           return await resp.json()

async def get_LegalNumGenOpts(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get LegalNumGenOpts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_LegalNumGenOpts
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.LegalNumGenOptsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/LegalNumGenOpts",headers=creds) as resp:
           return await resp.json()

async def post_LegalNumGenOpts(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_LegalNumGenOpts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/LegalNumGenOpts", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the LegalNumGenOpt item
   Description: Calls GetByID to retrieve the LegalNumGenOpt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")",headers=creds) as resp:
           return await resp.json()

async def patch_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update LegalNumGenOpt for the service
   Description: Calls UpdateExt to update LegalNumGenOpt. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.LegalNumGenOptsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_LegalNumGenOpts_Company_LegalNumberID(Company, LegalNumberID, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete LegalNumGenOpt item
   Description: Call UpdateExt to delete LegalNumGenOpt item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_LegalNumGenOpt
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param LegalNumberID: Desc: LegalNumberID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/LegalNumGenOpts(" + Company + "," + LegalNumberID + ")",headers=creds) as resp:
           return await resp.json()

async def get_SupplierXRefs(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get SupplierXRefs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_SupplierXRefs
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.SupplierXRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/SupplierXRefs",headers=creds) as resp:
           return await resp.json()

async def post_SupplierXRefs(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_SupplierXRefs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.SupplierXRefRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.SupplierXRefRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/SupplierXRefs", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_SupplierXRefs_Company_PartNum_VendNum_VendPartNum_MfgNum_MfgPartNum(Company, PartNum, VendNum, VendPartNum, MfgNum, MfgPartNum, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the SupplierXRef item
   Description: Calls GetByID to retrieve the SupplierXRef item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_SupplierXRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param VendNum: Desc: VendNum   Required: True
      :param VendPartNum: Desc: VendPartNum   Required: True   Allow empty value : True
      :param MfgNum: Desc: MfgNum   Required: True
      :param MfgPartNum: Desc: MfgPartNum   Required: True   Allow empty value : True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.SupplierXRefRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/SupplierXRefs(" + Company + "," + PartNum + "," + VendNum + "," + VendPartNum + "," + MfgNum + "," + MfgPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def patch_SupplierXRefs_Company_PartNum_VendNum_VendPartNum_MfgNum_MfgPartNum(Company, PartNum, VendNum, VendPartNum, MfgNum, MfgPartNum, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update SupplierXRef for the service
   Description: Calls UpdateExt to update SupplierXRef. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_SupplierXRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param VendNum: Desc: VendNum   Required: True
      :param VendPartNum: Desc: VendPartNum   Required: True   Allow empty value : True
      :param MfgNum: Desc: MfgNum   Required: True
      :param MfgPartNum: Desc: MfgPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.SupplierXRefRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/SupplierXRefs(" + Company + "," + PartNum + "," + VendNum + "," + VendPartNum + "," + MfgNum + "," + MfgPartNum + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_SupplierXRefs_Company_PartNum_VendNum_VendPartNum_MfgNum_MfgPartNum(Company, PartNum, VendNum, VendPartNum, MfgNum, MfgPartNum, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete SupplierXRef item
   Description: Call UpdateExt to delete SupplierXRef item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_SupplierXRef
      :param Company: Desc: Company   Required: True   Allow empty value : True
      :param PartNum: Desc: PartNum   Required: True   Allow empty value : True
      :param VendNum: Desc: VendNum   Required: True
      :param VendPartNum: Desc: VendPartNum   Required: True   Allow empty value : True
      :param MfgNum: Desc: MfgNum   Required: True
      :param MfgPartNum: Desc: MfgPartNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/SupplierXRefs(" + Company + "," + PartNum + "," + VendNum + "," + VendPartNum + "," + MfgNum + "," + MfgPartNum + ")",headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetRows for the service
   Description: Get TaxConnectStatus items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_TaxConnectStatus
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/TaxConnectStatus",headers=creds) as resp:
           return await resp.json()

async def post_TaxConnectStatus(requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_TaxConnectStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/TaxConnectStatus", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_TaxConnectStatus_Company(Company, select = None, filter = None, epicorHeaders = None):
   """  
   Summary: Calls GetByID to retrieve the TaxConnectStatu item
   Description: Calls GetByID to retrieve the TaxConnectStatu item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def patch_TaxConnectStatus_Company(Company, requestBody, epicorHeaders = None):
   """  
   Summary: Calls UpdateExt to update TaxConnectStatu for the service
   Description: Calls UpdateExt to update TaxConnectStatu. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.TaxConnectStatusRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.patch(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/TaxConnectStatus(" + Company + ")", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def delete_TaxConnectStatus_Company(Company, epicorHeaders = None):
   """  
   Summary: Call UpdateExt to delete TaxConnectStatu item
   Description: Call UpdateExt to delete TaxConnectStatu item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_TaxConnectStatu
      :param Company: Desc: Company   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.delete(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/TaxConnectStatus(" + Company + ")",headers=creds) as resp:
           return await resp.json()

async def get_List(select = None, filter = None, orderby = None, top = None, skip = None, inlinecount = None, epicorHeaders = None):
   """  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      :param select: Desc: Odata select comma delimited list of fields
      :param filter: Desc: Odata filter results
      :param orderby: Desc: Odata sort results
      :param top: Desc: Odata top results
      :param skip: Desc: Odata skip results
      :param inlinecount: Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.APInvHedListRow
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()




#########################################################################
# Custom methods:
#########################################################################
async def get_GetRows(whereClauseAPInvHed, whereClauseAPInvHedAttch, whereClauseAPIHAPInvExp, whereClauseAPIHAPInvExpTGLC, whereClauseAPIHAPInvMsc, whereClauseRcvMisc, whereClauseAPIHAPLnTax, whereClauseAPInvDtl, whereClauseAPInvDtlAttch, whereClauseAPInvDtlDEASch, whereClauseAPInvExp, whereClauseAPInvExpTGLC, whereClauseGlbAPIETGLC, whereClauseAPInvJob, whereClauseAPInvMsc, whereClauseAPInvLnMscTax, whereClauseAPInvPB, whereClauseAPLnTax, whereClauseAPInvDtlTGLC, whereClauseAPInvHedMscTax, whereClauseAPInvSched, whereClauseAPInvTax, whereClausePESUNATDtl, whereClauseEntityGLC, whereClausePEAPInvTax, whereClauseAdditionalForms_ParametersView, whereClauseLegalNumGenOpts, whereClauseSupplierXRef, whereClauseTaxConnectStatus, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvHed=" + whereClauseAPInvHed
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvHedAttch=" + whereClauseAPInvHedAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPIHAPInvExp=" + whereClauseAPIHAPInvExp
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPIHAPInvExpTGLC=" + whereClauseAPIHAPInvExpTGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPIHAPInvMsc=" + whereClauseAPIHAPInvMsc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseRcvMisc=" + whereClauseRcvMisc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPIHAPLnTax=" + whereClauseAPIHAPLnTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvDtl=" + whereClauseAPInvDtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvDtlAttch=" + whereClauseAPInvDtlAttch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvDtlDEASch=" + whereClauseAPInvDtlDEASch
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvExp=" + whereClauseAPInvExp
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvExpTGLC=" + whereClauseAPInvExpTGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseGlbAPIETGLC=" + whereClauseGlbAPIETGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvJob=" + whereClauseAPInvJob
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvMsc=" + whereClauseAPInvMsc
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvLnMscTax=" + whereClauseAPInvLnMscTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvPB=" + whereClauseAPInvPB
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPLnTax=" + whereClauseAPLnTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvDtlTGLC=" + whereClauseAPInvDtlTGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvHedMscTax=" + whereClauseAPInvHedMscTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvSched=" + whereClauseAPInvSched
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAPInvTax=" + whereClauseAPInvTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePESUNATDtl=" + whereClausePESUNATDtl
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseEntityGLC=" + whereClauseEntityGLC
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClausePEAPInvTax=" + whereClausePEAPInvTax
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseAdditionalForms_ParametersView=" + whereClauseAdditionalForms_ParametersView
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseLegalNumGenOpts=" + whereClauseLegalNumGenOpts
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseSupplierXRef=" + whereClauseSupplierXRef
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClauseTaxConnectStatus=" + whereClauseTaxConnectStatus
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetByID(vendorNum, invoiceNum, epicorHeaders = None):
   """  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "vendorNum=" + vendorNum
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "invoiceNum=" + invoiceNum

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetList(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_SelectUninvoicedLateCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SelectUninvoicedLateCosts
   Description: Method to call to select Late Costs Lines
   OperationID: SelectUninvoicedLateCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SelectUninvoicedLateCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SelectUninvoicedLateCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeselectSelectedLateCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeselectSelectedLateCosts
   Description: Method to call to deselect selected Late Cost Lines
   OperationID: DeselectSelectedLateCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeselectSelectedLateCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeselectSelectedLateCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvoiceSelectedLateCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvoiceSelectedLateCosts
   Description: Method to call to invoice selected Late Cost Lines
   OperationID: InvoiceSelectedLateCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvoiceSelectedLateCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvoiceSelectedLateCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateRcvMiscSumBeforeDeleteLateCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateRcvMiscSumBeforeDeleteLateCost
   Description: This Method will check if the sum of DocActualAmt values of records in RcvMisc table for an specific packslip and packline won't be negative after deleting the current late cost
   OperationID: ValidateRcvMiscSumBeforeDeleteLateCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateRcvMiscSumBeforeDeleteLateCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRcvMiscSumBeforeDeleteLateCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateRcvMiscBeforeDeleteLateCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateRcvMiscBeforeDeleteLateCost
   Description: This Method will check if the sum of DocActualAmt values of records in RcvMisc table for an specific packslip and packline won't be negative after deleting the current late cost
   OperationID: ValidateRcvMiscBeforeDeleteLateCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateRcvMiscBeforeDeleteLateCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRcvMiscBeforeDeleteLateCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateLateCostBeforeAllocate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateLateCostBeforeAllocate
   Description: This Method will check if the current late cost selected will not create a negative RcvMisc and send a warning message.
   OperationID: ValidateLateCostBeforeAllocate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateLateCostBeforeAllocate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateLateCostBeforeAllocate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceNumber
   Description: This method will change the invoice number on the invoice specified by the vendorNum and oldInvoiceNum values.
   OperationID: ChangeInvoiceNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHed
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHedAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHedAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvHedAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHedAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHedAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPIHAPInvExp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPIHAPInvExp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPIHAPInvExp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPIHAPInvExp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPIHAPInvExp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPIHAPInvExpTGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPIHAPInvExpTGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPIHAPInvExpTGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPIHAPInvExpTGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPIHAPInvExpTGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPIHAPInvMsc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPIHAPInvMsc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPIHAPInvMsc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPIHAPInvMsc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPIHAPInvMsc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewRcvMisc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewRcvMisc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewRcvMisc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewRcvMisc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewRcvMisc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPIHAPLnTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPIHAPLnTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPIHAPLnTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPIHAPLnTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPIHAPLnTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlAttch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvDtlAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlDEASch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlDEASch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvDtlDEASch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlDEASch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlDEASch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvExp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvExp
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvExp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvExp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvExp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvExpTGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvExpTGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvExpTGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvExpTGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvExpTGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewGlbAPIETGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewGlbAPIETGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewGlbAPIETGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewGlbAPIETGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewGlbAPIETGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvJob(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvJob
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvMsc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvMsc
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvMsc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvMsc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvMsc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvLnMscTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvLnMscTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvLnMscTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvLnMscTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvLnMscTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvPB(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvPB
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvPB
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvPB_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvPB_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPLnTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPLnTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPLnTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPLnTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPLnTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlTGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlTGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvDtlTGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlTGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlTGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHedMscTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHedMscTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvHedMscTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHedMscTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHedMscTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvSched(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvSched
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvSched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvSched_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvSched_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewAPInvTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPESUNATDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPESUNATDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPESUNATDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPESUNATDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPESUNATDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewEntityGLC(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewEntityGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewEntityGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewEntityGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewEntityGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewPEAPInvTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewPEAPInvTax
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPEAPInvTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPEAPInvTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPEAPInvTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteByID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowID(id, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "id=" + id

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def get_GetBySysRowIDs(ids, epicorHeaders = None):
   """  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "ids=" + ids

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_Update(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckPaymentMethod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckPaymentMethod
   Description: Check for the correct Payment Method assigned.
   OperationID: CheckPaymentMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckPaymentMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckPaymentMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckRateGrpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckRateGrpCode
   Description: Update APInvoice Detail information when the RateGrp is changed.
   OperationID: CheckRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckRevChrgBeforeUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckRevChrgBeforeUpdate
   Description: Before updating the APInvDtl record, CheckRevChrgBeforeUpdate will have to be called.
The CheckRevChrgBeforeUpdate method will pass back opMessage.
- If opMessage is not equal to null then a Yes/No question will have to be asked to the
user displaying the message in opMessage.
- If the user answers "Yes", then call the Update method to continue else stop update.
   OperationID: CheckRevChrgBeforeUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckRevChrgBeforeUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckRevChrgBeforeUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckTaxRateGrpCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckTaxRateGrpCode
   Description: Update APInvoice Detail information when the TaxRateGrp is changed.
   OperationID: CheckTaxRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckTaxRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckTaxRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckTaxRgn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckTaxRgn
   Description: Update APInvoice Detail information when the Tax Liability is changed.
   OperationID: CheckTaxRgn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckTaxRgn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckTaxRgn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRecurInvoiceSourceSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRecurInvoiceSourceSearch
   Description: Gets list of Recurring Source Invoices
   OperationID: GetRecurInvoiceSourceSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRecurInvoiceSourceSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRecurInvoiceSourceSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDMRDMSourceSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDMRDMSourceSearch
   Description: Get list of DMR Debit Memos.
   OperationID: GetDMRDMSourceSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDMRDMSourceSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDMRDMSourceSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNotInvRecSourceSearch(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNotInvRecSourceSearch
   Description: Get List of Not Invoicing Receipts
   OperationID: GetNotInvRecSourceSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNotInvRecSourceSearch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNotInvRecSourceSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNotInvRecFilterSearch(epicorHeaders = None):
   """  
   Summary: Invoke method GetNotInvRecFilterSearch
   Description: Return Get Not Invoiced Receipts screen values
   OperationID: GetNotInvRecFilterSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNotInvRecFilterSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ValidateGNRIClearingCreation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateGNRIClearingCreation
   Description: Method to validate if Mass Creation of GRNI documents Invoice can be created in the current group
   OperationID: ValidateGNRIClearingCreation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateGNRIClearingCreation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateGNRIClearingCreation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDMRDMFilterSearch(epicorHeaders = None):
   """  
   Summary: Invoke method GetDMRDMFilterSearch
   Description: Return Get DMR Debit Memo Screen Values
   OperationID: GetDMRDMFilterSearch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDMRDMFilterSearch_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CreateCorrectionInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateCorrectionInvoice
   Description: Creates a correction invoice from a another invoice.
   OperationID: CreateCorrectionInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateCorrectionInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateCorrectionInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateCancellationInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateCancellationInvoice
   Description: Creates a cancellation invoice from a another invoice.
   OperationID: CreateCancellationInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateCancellationInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateCancellationInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateJobMtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateJobMtl
   Description: Purpose:
Parameters:  none
Notes:
<param name="ds">The APInvoice data set</param>
   OperationID: CreateJobMtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateJobMtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateJobMtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteMaster
   OperationID: DeleteMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeselectSelectedRcptLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeselectSelectedRcptLines
   Description: Method to call to deselected selected lines.  This method will run through each
APSelectedRcptLines where the DeselectLine flag is true and remove it from the
APSelectedRcptLines table.  Also, if the APUninvoicedReceipts record for the receipt line
being delesected is currently in the dataset, it will add the line back to the
APUninvoicedRcptLines table.
   OperationID: DeselectSelectedRcptLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeselectSelectedRcptLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeselectSelectedRcptLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DecodeISRCodeLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DecodeISRCodeLine
   Description: Decode ISR Code Line and return data for filling Invoice Header
At this time this method is specific to Switzerland localization
   OperationID: DecodeISRCodeLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DecodeISRCodeLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DecodeISRCodeLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_EnableAPDates(epicorHeaders = None):
   """  
   Summary: Invoke method EnableAPDates
   Description: This method return wish dates have to be enable on AP Invoice.
   OperationID: EnableAPDates
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/EnableAPDates_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GenerateRebateInv(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateRebateInv
   Description: Method to call to generate rebates.
   OperationID: GenerateRebateInv
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateRebateInv_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateRebateInv_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRebateInvList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRebateInvList
   Description: Method to call to get a rebate list
   OperationID: GetRebateInvList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRebateInvList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRebateInvList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPInvPOMisc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPInvPOMisc
   Description: Method to call to retrieve the POMisc records that can be added to an AP Invoice Header
or an AP Invoice Line.  This method will create the available po misc charges for the invoice
and all lines of the invoice.
   OperationID: GetAPInvPOMisc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPInvPOMisc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPInvPOMisc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPUninvoicedReceipts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPUninvoicedReceipts
   Description: Method to call to get uninvoiced receipts for Receipt billing.
   OperationID: GetAPUninvoicedReceipts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPUninvoicedReceipts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPUninvoicedReceipts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPUninvoicedReceiptsSelectAll(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPUninvoicedReceiptsSelectAll
   Description: Method to call to get uninvoiced receipts for Receipt billing and select them for invoicing.
   OperationID: GetAPUninvoicedReceiptsSelectAll
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPUninvoicedReceiptsSelectAll_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPUninvoicedReceiptsSelectAll_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAvailTranDocTypes(epicorHeaders = None):
   """  
   Summary: Invoke method GetAvailTranDocTypes
   Description: Method to call to get available tran doc types.
   OperationID: GetAvailTranDocTypes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAvailTranDocTypes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_GetCodeDescList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetCodeDescList
   Description: Method to call to get a Code Description list.
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDMRCorrInvRequests(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDMRCorrInvRequests
   Description: Method to call to get DMR Correction Invoice Requests.
   OperationID: GetDMRCorrInvRequests
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDMRCorrInvRequests_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDMRCorrInvRequests_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDMRDebitMemos(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDMRDebitMemos
   Description: Method to call to get DMR Debit Memos for invoicing.
   OperationID: GetDMRDebitMemos
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDMRDebitMemos_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDMRDebitMemos_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetvalidEAD(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetvalidEAD
   OperationID: GetvalidEAD
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetvalidEAD_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetvalidEAD_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLegalNumberOpts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLegalNumberOpts
   Description: This method will return a record in the LegalNumGenOpts datatable that will
be used to generate a legal number.
   OperationID: GetLegalNumberOpts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLegalNumberOpts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLegalNumberOpts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLegalNumforDebitMemo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLegalNumforDebitMemo
   Description: Method for generating legal numbers for generated Debit Memo.
   OperationID: GetLegalNumforDebitMemo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLegalNumforDebitMemo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLegalNumforDebitMemo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_VoidLegalNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method VoidLegalNumber
   Description: Voids the legal number.
   OperationID: VoidLegalNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/VoidLegalNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/VoidLegalNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListForAssetAdd(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListForAssetAdd
   Description: Method to return invoice headers for asset addition UI
   OperationID: GetListForAssetAdd
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListForAssetAdd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListForAssetAdd_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetApInvHeadListLoaded(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetApInvHeadListLoaded
   OperationID: GetApInvHeadListLoaded
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetApInvHeadListLoaded_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetApInvHeadListLoaded_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def get_GetListForLandingPage(whereClause, pageSize, absolutePage, epicorHeaders = None):
   """  
   Summary: Invoke method GetListForLandingPage
   Description: This method called from Kinetic UI
   OperationID: Get_GetListForLandingPage
      :param whereClause: Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      :param pageSize: Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      :param absolutePage: Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListForLandingPage_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  

   firstParam = True
   params = ""
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "whereClause=" + whereClause
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "pageSize=" + pageSize
   if(firstParam):
      params += "?"
      firstParam = False
   else:
      params += "&"
   params += "absolutePage=" + absolutePage

   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.get(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List" + params,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlAdvance(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlAdvance
   Description: Method to call when adding a new Advance Billing line AP Invoice Detail record
   OperationID: GetNewAPInvDtlAdvance
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlAdvance_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlAdvance_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlAsset(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlAsset
   Description: Method to call when adding a new Asset line AP Invoice Detail record
   OperationID: GetNewAPInvDtlAsset
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlAsset_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlAsset_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlDMRCredit(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlDMRCredit
   Description: Method to call when adding a new DMR Credit line AP Invoice Detail record
   OperationID: GetNewAPInvDtlDMRCredit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlDMRCredit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlDMRCredit_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlJobMiscellaneous(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlJobMiscellaneous
   Description: Method to call when adding a new Job Miscellaneous line AP Invoice Detail record
   OperationID: GetNewAPInvDtlJobMiscellaneous
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlJobMiscellaneous_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlJobMiscellaneous_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlMiscellaneous(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlMiscellaneous
   Description: Method to call when adding a new Miscellaneous line AP Invoice Detail record
   OperationID: GetNewAPInvDtlMiscellaneous
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlMiscellaneous_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlMiscellaneous_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlUnreceived(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlUnreceived
   Description: Method to call when adding a new Unreceived Billing line AP Invoice Detail record
   OperationID: GetNewAPInvDtlUnreceived
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlUnreceived_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlUnreceived_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHedBOE(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHedBOE
   Description: Method to call when adding a new BOE AP Invoice record
   OperationID: GetNewAPInvHedBOE
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHedBOE_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHedBOE_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHedInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHedInvoice
   Description: Method to call when adding a new Debit Memo AP Invoice record
   OperationID: GetNewAPInvHedInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHedInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHedInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvHedDebitMemo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvHedDebitMemo
   Description: Method to call when adding a new Debit Memo AP Invoice record
   OperationID: GetNewAPInvHedDebitMemo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvHedDebitMemo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvHedDebitMemo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewManualGRNIClearing(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewManualGRNIClearing
   Description: Method to call when adding a new Manual GRNI Clearing record
   OperationID: GetNewManualGRNIClearing
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewManualGRNIClearing_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewManualGRNIClearing_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewHdrCharge(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewHdrCharge
   Description: Method to call when adding a new Header/Late Cost charge
   OperationID: GetNewHdrCharge
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewHdrCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewHdrCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPIHAPInvMscPlasticPackTaxCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPIHAPInvMscPlasticPackTaxCost
   Description: Method to call when adding a new Header/Late Cost charge for Plastic Packaging Tax Report
   OperationID: GetNewAPIHAPInvMscPlasticPackTaxCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPIHAPInvMscPlasticPackTaxCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPIHAPInvMscPlasticPackTaxCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetNewAPInvDtlDEASchPopulated(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetNewAPInvDtlDEASchPopulated
   Description: Inserts a new row into the DataSet with fields populated depending on parent Invoice Line
   OperationID: GetNewAPInvDtlDEASchPopulated
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewAPInvDtlDEASchPopulated_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewAPInvDtlDEASchPopulated_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPercentFixedAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPercentFixedAmt
   OperationID: GetPercentFixedAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPercentFixedAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPercentFixedAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRefInvoicesForBOE(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRefInvoicesForBOE
   Description: This procedure returns the invoices for BOE selection
   OperationID: GetRefInvoicesForBOE
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRefInvoicesForBOE_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRefInvoicesForBOE_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetLinePurPointFilterString(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetLinePurPointFilterString
   Description: Purpose: Used to get additional filter to get the list of purchase points on line level
   OperationID: GetLinePurPointFilterString
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetLinePurPointFilterString_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetLinePurPointFilterString_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetListBOEReferences(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetListBOEReferences
   OperationID: GetListBOEReferences
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetListBOEReferences_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetListBOEReferences_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPOFilterString(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPOFilterString
   Description: Purpose: Used to get additional filter to get the list of purchase orders
   OperationID: GetPOFilterString
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPOFilterString_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPOFilterString_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetValueExchageRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetValueExchageRate
   Description: This method returns the Exchange Rate information for the selected Currency.  The system
may not have an exchange rate between the APInvoice and Base so it may use an middle Currency
so that it will go APInvoice Currency -> Ref Currency -> Base Currency
   OperationID: GetValueExchageRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetValueExchageRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetValueExchageRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GLAllocation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GLAllocation
   Description: Method to call when peforming G/L allocation. This method uses the AllocationID
and AllocationAmount fields from APInvDtl to create the allocation records.  After
this method runs, the APInvDtl and APInvExp records will be passed back.  It is expected
that the AllocationID and AllocationAmount fields will be entered separately from the
other APInvDtl fields since the fields are used only for this method and are not written
to the APInvDtl database table.
   OperationID: GLAllocation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GLAllocation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GLAllocation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvoiceSelectedLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvoiceSelectedLines
   Description: Method to call to invoice the selected receipt lines.  This method will run through each
APSelectedRcptLines and create an APInvDtl record.  After this method is called, the
GetRows method should be called to get the invoice lines that were created.
   OperationID: InvoiceSelectedLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvoiceSelectedLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvoiceSelectedLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_IsCorrectionInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method IsCorrectionInvoice
   OperationID: IsCorrectionInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/IsCorrectionInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/IsCorrectionInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MassGenerateBOEapInvDtl(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MassGenerateBOEapInvDtl
   Description: Create multiple ApInvDtl for a BOE ApInvHed from multiple selected invoices.
   OperationID: MassGenerateBOEapInvDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MassGenerateBOEapInvDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MassGenerateBOEapInvDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_MatchLoggedInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method MatchLoggedInvoice
   OperationID: MatchLoggedInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/MatchLoggedInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/MatchLoggedInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineInvoiceRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineInvoiceRef
   Description: This method should be called before the pInvDtl invoice reference has been updated.
Specific to Bill of Exchange invoices.
   OperationID: OnChangeLineInvoiceRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineInvoiceRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineInvoiceRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofApplyDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofApplyDate
   Description: This method should be called to validate the new apply date entered by the user.
   OperationID: OnChangeofApplyDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofApplyDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofApplyDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofApplyDateEx(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofApplyDateEx
   Description: This method should be called to validate the new apply date entered by the user.
   OperationID: OnChangeofApplyDateEx
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofApplyDateEx_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofApplyDateEx_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofApplyDateWithDateCheck(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofApplyDateWithDateCheck
   Description: This method should be called to validate the new apply date entered by the user.
This method will additionally return a message to present to the user if the date is greater than
the client today date.
   OperationID: OnChangeofApplyDateWithDateCheck
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofApplyDateWithDateCheck_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofApplyDateWithDateCheck_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxPoint(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxPoint
   Description: This method should be called to validate the new tax rate date entered by the user.
   OperationID: OnChangeofTaxPoint
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTaxRateDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTaxRateDate
   Description: This method should be called to validate the new tax rate date entered by the user.
   OperationID: OnChangeofTaxRateDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTaxRateDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTaxRateDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofTransApplyDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofTransApplyDate
   Description: This method should be called to validate the new apply date entered by the user for transferred invoice.
   OperationID: OnChangeofTransApplyDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofTransApplyDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofTransApplyDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeTranDocTypeID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeTranDocTypeID
   Description: Sets default values when the TranDocTypeID changes
   OperationID: OnChangeTranDocTypeID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTranDocTypeID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTranDocTypeID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeVendBankID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeVendBankID
   Description: Call this method when the user enters the ttApInv.BankID
   OperationID: OnChangeVendBankID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeVendBankID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeVendBankID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnLCFlagOfLineMiscChargeChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnLCFlagOfLineMiscChargeChange
   Description: Verifies if a Miscellaneous Charge can be marked as Landed Cost.
   OperationID: OnLCFlagOfLineMiscChargeChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnLCFlagOfLineMiscChargeChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnLCFlagOfLineMiscChargeChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnShipmentIDChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnShipmentIDChange
   Description: Verifies if a Shipment ID (ContainerHeader.ContainerID) is valid.
   OperationID: OnShipmentIDChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnShipmentIDChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnShipmentIDChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnTHRefVendorIDChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnTHRefVendorIDChange
   Description: Verify selected TH Reference Customer
   OperationID: OnTHRefVendorIDChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnTHRefVendorIDChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnTHRefVendorIDChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnTHRefInvoiceNumChange(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnTHRefInvoiceNumChange
   Description: Verify selected Reference Invoice NUmber
   OperationID: OnTHRefInvoiceNumChange
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnTHRefInvoiceNumChange_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnTHRefInvoiceNumChange_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnTHRefInvoiceNumChangeWithUnknownSupplier(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnTHRefInvoiceNumChangeWithUnknownSupplier
   Description: Verify selected Reference Invoice NUmber
   OperationID: OnTHRefInvoiceNumChangeWithUnknownSupplier
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnTHRefInvoiceNumChangeWithUnknownSupplier_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnTHRefInvoiceNumChangeWithUnknownSupplier_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreSetAllocationAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreSetAllocationAmt
   Description: This method sets the amount to be allocated
on condition of the currency switch
   OperationID: PreSetAllocationAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreSetAllocationAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreSetAllocationAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SelectUninvoicedRcptLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SelectUninvoicedRcptLines
   Description: Method to call to selected uninvoiced lines.  This method will run through each
APUninvoicedRcptLines where the SelectLine flag is true, move the record to the
APSelectedRcptLines table and remove it from the APUninvoicedRcptLines table.  This
method can also be called for the SelectAll functionality.  In that case all APUninvoicedRcptLines
must have the SelectLine flag set to true before calling the method.
   OperationID: SelectUninvoicedRcptLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SelectUninvoicedRcptLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SelectUninvoicedRcptLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CompletePrecalcWHTax(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CompletePrecalcWHTax
   Description: Pre-calculate missing APInxTax records which will be used for WH taxes created on Payment time
<param name="ipGroupID">ipGroupID </param>
   OperationID: CompletePrecalcWHTax
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CompletePrecalcWHTax_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CompletePrecalcWHTax_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SetReadyToCalc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SetReadyToCalc
   Description: CALCULATE VANTAGE\TAX CONNECT TAX CALCULATIONS UI NEEDS TO CALL A SAVE BEFORE CALLING THIS PROCEDURE
<param name="ipGroupID">ipGroupID </param><param name="ipInvoiceNum">ipInvoiceNum </param><param name="ipVendorNum">ipVendorNum </param><param name="ipCalcAll">ipCalcAll</param><param name="ipCalledFromUI">ipCalledFromUI</param><param name="ds">APInvoice dataset</param>
   OperationID: SetReadyToCalc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SetReadyToCalc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetReadyToCalc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SubCDataBtnClicked(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SubCDataBtnClicked
   Description: Purpose:
Parameters:  none
Notes:
<param name="ipVendorNum">Vendor Num</param><param name="ipInvoiceNum">Invoice Num</param><param name="ipInvoiceLine">Invoice Line</param><param name="ds">APInvoice dataset</param>
   OperationID: SubCDataBtnClicked
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SubCDataBtnClicked_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SubCDataBtnClicked_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_TransferInvoiceToGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method TransferInvoiceToGroup
   Description: Method to call when transferring an invoice to a different group.
   OperationID: TransferInvoiceToGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TransferInvoiceToGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TransferInvoiceToGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdAPInvoiceMatched(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdAPInvoiceMatched
   Description: Updates an AP Invoice using a Logged Invoice.
   OperationID: UpdAPInvoiceMatched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdAPInvoiceMatched_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdAPInvoiceMatched_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMaster
   OperationID: UpdateMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdGetLogAPInv(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdGetLogAPInv
   OperationID: UpdGetLogAPInv
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdGetLogAPInv_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdGetLogAPInv_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UsePurchaseCode(epicorHeaders = None):
   """  
   Summary: Invoke method UsePurchaseCode
   Description: Method to call to determine if Purchase Codes are in use or not.  They are
only in use when Financial Integration is implemented with Purchase Types.
   OperationID: UsePurchaseCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/UsePurchaseCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_ValidateBankRefs(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateBankRefs
   Description: Validate Banking References
   OperationID: ValidateBankRefs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateBankRefs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateBankRefs_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateInvoiceID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateInvoiceID
   Description: Validate InvoiceID and return a true if a logged invoice exist for it.
   OperationID: ValidateInvoiceID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateInvoiceID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateInvoiceID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateTaxRateCodes(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateTaxRateCodes
   Description: Method to call when changing the rate code on a tax record.  Validates the rate and tax code
   OperationID: ValidateTaxRateCodes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateTaxRateCodes_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateTaxRateCodes_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCycleCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCycleCode
   Description: Method to call when changing the CycleCode
   OperationID: OnChangeCycleCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCycleCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCycleCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeRecurring(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeRecurring
   Description: Method to call when changing the CycleCode
   OperationID: OnChangeRecurring
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeRecurring_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeRecurring_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateRecurInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateRecurInvoice
   Description: Creates Recurring invoices from Source.
   OperationID: CreateRecurInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateRecurInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateRecurInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPInvcRecurr(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPInvcRecurr
   Description: Invoices Recurring
   OperationID: GetAPInvcRecurr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPInvcRecurr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPInvcRecurr_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPInvRecurInfo(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPInvRecurInfo
   OperationID: GetAPInvRecurInfo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPInvRecurInfo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPInvRecurInfo_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineDefferedExp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineDefferedExp
   Description: Occurs when Invoice Line Deferred Expense switch changed
   OperationID: OnChangeLineDefferedExp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineDefferedExp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineDefferedExp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineCommodityCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineCommodityCode
   Description: Validate entered Commodity Code
   OperationID: OnChangeLineCommodityCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineCommodityCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineCommodityCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineDEACode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineDEACode
   Description: Occurs when Invoice Line DEA Code changed
   OperationID: OnChangeLineDEACode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineDEACode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineDEACode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeLineDEAStartDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeLineDEAStartDate
   Description: Occurs when Invoice Line DEA Start Date changed
   OperationID: OnChangeLineDEAStartDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeLineDEAStartDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeLineDEAStartDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GenerateAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateAmortizationSchedule
   Description: Generates Amortization Schedule
   OperationID: GenerateAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteAmortizationSchedule
   Description: Deletes Amortization Schedule
   OperationID: DeleteAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeDEAScheduleLineAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeDEAScheduleLineAmount
   Description: Occurs when DEA Schedule Line Amortization Amount changed
   OperationID: OnChangeDEAScheduleLineAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeDEAScheduleLineAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeDEAScheduleLineAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeDEAScheduleLineFiscalPeriod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeDEAScheduleLineFiscalPeriod
   Description: Occurs when DEA Schedule Line Fiscal Period changed
   OperationID: OnChangeDEAScheduleLineFiscalPeriod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeDEAScheduleLineFiscalPeriod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeDEAScheduleLineFiscalPeriod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AutocompleteAmortizationSchedule(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AutocompleteAmortizationSchedule
   Description: Applies Remaining Amount to the last Schedule Line
   OperationID: AutocompleteAmortizationSchedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AutocompleteAmortizationSchedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AutocompleteAmortizationSchedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalculateAmortizationTotals(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalculateAmortizationTotals
   Description: Calculates Deferred Expense Amortization Total Amounts
   OperationID: CalculateAmortizationTotals
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalculateAmortizationTotals_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalculateAmortizationTotals_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDefaultAmortizationAccounts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDefaultAmortizationAccounts
   Description: Gets Default Deferred Expense Amortization Accounts
   OperationID: GetDefaultAmortizationAccounts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDefaultAmortizationAccounts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDefaultAmortizationAccounts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeleteAmortizationSchedulesOfGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeleteAmortizationSchedulesOfGroup
   Description: Deletes Amortization Schedules for all Invoice Lines of the Group
   OperationID: DeleteAmortizationSchedulesOfGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteAmortizationSchedulesOfGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteAmortizationSchedulesOfGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GenerateAmortizationSchedulesForGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GenerateAmortizationSchedulesForGroup
   Description: Generates Amortization Schedules for all Invoice Lines of the Group
   OperationID: GenerateAmortizationSchedulesForGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GenerateAmortizationSchedulesForGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GenerateAmortizationSchedulesForGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_RestoreAmortizationSchedulesOfGroup(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method RestoreAmortizationSchedulesOfGroup
   Description: Restores default Amortization Schedules for all Invoice Lines of the Group
   OperationID: RestoreAmortizationSchedulesOfGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RestoreAmortizationSchedulesOfGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RestoreAmortizationSchedulesOfGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateAllDeferredLinesAreScheduled(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateAllDeferredLinesAreScheduled
   Description: Validates that all Deferred Expense Lines are scheduled. If no than throws Exception
   OperationID: ValidateAllDeferredLinesAreScheduled
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateAllDeferredLinesAreScheduled_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateAllDeferredLinesAreScheduled_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateAllDeferredLinesHaveGLAccount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateAllDeferredLinesHaveGLAccount
   Description: Validates that all Deferred Expense Lines have GLAccount selected. If no then throws Exception
   OperationID: ValidateAllDeferredLinesHaveGLAccount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateAllDeferredLinesHaveGLAccount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateAllDeferredLinesHaveGLAccount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPUninvoicedReceiptLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPUninvoicedReceiptLines
   OperationID: GetAPUninvoicedReceiptLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPUninvoicedReceiptLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPUninvoicedReceiptLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPUninvoicedDropShipmentLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPUninvoicedDropShipmentLines
   Description: Retrieves lines for a DropShipment
   OperationID: GetAPUninvoicedDropShipmentLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPUninvoicedDropShipmentLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPUninvoicedDropShipmentLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeofLineTaxRgn(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeofLineTaxRgn
   Description: This method should be called when the Tax Region on the invoice detail record is changed.
   OperationID: OnChangeofLineTaxRgn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeofLineTaxRgn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeofLineTaxRgn_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAllowMultInvcReceiptsValue(epicorHeaders = None):
   """  
   Summary: Invoke method GetAllowMultInvcReceiptsValue
   Description: This methos return APsyst.AllowMultInvcReceipt value.
   OperationID: GetAllowMultInvcReceiptsValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAllowMultInvcReceiptsValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_CreateNotInvRcptInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateNotInvRcptInvoice
   Description: Method to create Not Invoiced Receipts
   OperationID: CreateNotInvRcptInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateNotInvRcptInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateNotInvRcptInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PostGRNIClearingInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PostGRNIClearingInvoices
   Description: Create COS and WIP:ADJ-PUR transactions and performs variance calculation.
   OperationID: PostGRNIClearingInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PostGRNIClearingInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PostGRNIClearingInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateNotPostedInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateNotPostedInvoices
   Description: Method to validate if exists an invoiced receipt with unposted invoice
   OperationID: ValidateNotPostedInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateNotPostedInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateNotPostedInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPInvHedTransferList(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPInvHedTransferList
   Description: This method populates the APInvHedTransferList table on the loaded group.
   OperationID: GetAPInvHedTransferList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPInvHedTransferList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPInvHedTransferList_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateGroupID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateGroupID
   Description: Determines if a group id exists in the database.
   OperationID: ValidateGroupID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateGroupID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateGroupID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CreateAPInvGrp(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CreateAPInvGrp
   Description: Creates a new APInvGrp to transfer Invoices to.
   OperationID: CreateAPInvGrp
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateAPInvGrp_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateAPInvGrp_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetDfltDocumentType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetDfltDocumentType
   Description: GetDfltDocumentType
   OperationID: GetDfltDocumentType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDfltDocumentType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDfltDocumentType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_OnChangeCorrTranDocTypeID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method OnChangeCorrTranDocTypeID
   Description: Sets default values when the TranDocTypeID changes
   OperationID: OnChangeCorrTranDocTypeID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCorrTranDocTypeID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCorrTranDocTypeID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateTaxAdjustment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateTaxAdjustment
   Description: Commits the DataSet changes to the data store.
   OperationID: UpdateTaxAdjustment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateTaxAdjustment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateTaxAdjustment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreUpdate
   Description: This method will validate if a Invoice requires user Input for Legal Numbers
   OperationID: PreUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidatePLInvoiceReference(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidatePLInvoiceReference
   Description: CSF Poland. Validate unique of PLInvoiceReference for selected supplier
   OperationID: ValidatePLInvoiceReference
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidatePLInvoiceReference_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidatePLInvoiceReference_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_PreInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method PreInvoice
   Description: Pre-check for UpdateExt to validate and return invoice data
   OperationID: PreInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_UpdateMasterExt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method UpdateMasterExt
   Description: It wraps the UpdateExt to refresh and return up-to-date invoice data
   OperationID: UpdateMasterExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateMasterExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateMasterExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckVendorTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckVendorTaxID
   Description: Supplier Tax Id check
   OperationID: CheckVendorTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckVendorTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckVendorTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckGroupTaxID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckGroupTaxID
   Description: Check for Vendor TaxId in Payments Group
   OperationID: CheckGroupTaxID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckGroupTaxID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckGroupTaxID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetPlasticPackTaxCostLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetPlasticPackTaxCostLines
   Description: Method to get plastic packaging tax cost lines.
   OperationID: GetPlasticPackTaxCostLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPlasticPackTaxCostLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPlasticPackTaxCostLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPLateCosts(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPLateCosts
   Description: Method to call to get Late Costs from PO Receipts or Containers.
   OperationID: GetAPLateCosts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPLateCosts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPLateCosts_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPLateCostLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPLateCostLines
   Description: Method to call to get Late Costs Lines for selected PO Receipt or container
   OperationID: GetAPLateCostLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPLateCostLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPLateCostLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvokeLocateGroupID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvokeLocateGroupID
   Description: Find Group Id for invoice. For Locate INv. group form.
   OperationID: InvokeLocateGroupID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvokeLocateGroupID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvokeLocateGroupID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_TransferAPInvoices(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method TransferAPInvoices
   Description: Transfer Selected AP Invoices between groups.
   OperationID: TransferAPInvoices
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TransferAPInvoices_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TransferAPInvoices_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateOriginalInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateOriginalInvoice
   Description: Validate Invoice Number - find an invoice by number or inform that the number is incorrect (for the Create Cancellation Invoice form).
   OperationID: ValidateOriginalInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateOriginalInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateOriginalInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_SelectUninvoicedRcptLines_AdditionalActions(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method SelectUninvoicedRcptLines_AdditionalActions
   Description: Set rowMods before Uninvoiced Rcpt Lines Selection
   OperationID: SelectUninvoicedRcptLines_AdditionalActions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/SelectUninvoicedRcptLines_AdditionalActions_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/SelectUninvoicedRcptLines_AdditionalActions_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_DeselectSelectedRcptLines_AdditionalActions(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method DeselectSelectedRcptLines_AdditionalActions
   Description: Set RowMods before Deselect Selected Rcpt Lines
   OperationID: DeselectSelectedRcptLines_AdditionalActions
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeselectSelectedRcptLines_AdditionalActions_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeselectSelectedRcptLines_AdditionalActions_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_InvokeInvoiceSelectedLines(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method InvokeInvoiceSelectedLines
   Description: Invoke InvoiceSelectedLines with additional actions.
   OperationID: InvokeInvoiceSelectedLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/InvokeInvoiceSelectedLines_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/InvokeInvoiceSelectedLines_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AddPOMiscChrgToInvoiceHead(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AddPOMiscChrgToInvoiceHead
   Description: Method to call when adding a po miscellaneous charge to an ap invoice line.
   OperationID: AddPOMiscChrgToInvoiceHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddPOMiscChrgToInvoiceHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddPOMiscChrgToInvoiceHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AddPOMiscChrgToInvoiceLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AddPOMiscChrgToInvoiceLine
   Description: Method to call when adding a po miscellaneous charge to an ap invoice line.
   OperationID: AddPOMiscChrgToInvoiceLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddPOMiscChrgToInvoiceLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddPOMiscChrgToInvoiceLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_AllocateLateCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AllocateLateCost
   Description: Method to allocate late cost.
   OperationID: AllocateLateCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AllocateLateCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AllocateLateCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForTracker(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForTracker
   Description: Optimized method to retrieve large number of APInvHed Records.
   OperationID: GetRowsForTracker
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForTracker_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForTracker_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetRowsForTrackerSite(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetRowsForTrackerSite
   Description: Optimized method to retrieve large number of APInvHed Records.
   OperationID: GetRowsForTrackerSite
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowsForTrackerSite_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowsForTrackerSite_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetSiteIsLegalEntity(epicorHeaders = None):
   """  
   Summary: Invoke method GetSiteIsLegalEntity
   OperationID: GetSiteIsLegalEntity
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetSiteIsLegalEntity_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List",headers=creds) as resp:
           return await resp.json()

async def post_AssignLegalNumber(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method AssignLegalNumber
   Description: Assigns a legal number to the invoice.
   OperationID: AssignLegalNumber
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AssignLegalNumber_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AssignLegalNumber_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CalculateCOIFRS_PV(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CalculateCOIFRS_PV
   Description: Calculate IFRS Present Value
   OperationID: CalculateCOIFRS_PV
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalculateCOIFRS_PV_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalculateCOIFRS_PV_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_Update_ttAPInvHed(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Update_ttAPInvHed
   Description: Calculate IFRS Present Value
   OperationID: Update_ttAPInvHed
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_ttAPInvHed_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_ttAPInvHed_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPInvSchedPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPInvSchedPercent
   Description: Method to update Amount values in the APInvSched record and update last APInvSched record when it's needed.
   OperationID: ChangeAPInvSchedPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPInvSchedPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPInvSchedPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPInvSchedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPInvSchedAmount
   Description: Method to update Precent value in the APInvSched record and update last APInvSched record when it's needed.
   OperationID: ChangeAPInvSchedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPInvSchedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPInvSchedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPInvSchedDays(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPInvSchedDays
   Description: Method to update DueDate value in the APInvSched record and update following APInvSched records when it's needed.
   OperationID: ChangeAPInvSchedDays
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPInvSchedDays_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPInvSchedDays_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPInvSchedDueDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPInvSchedDueDate
   Description: Method to update PayDays value in the APInvSched record and update following APInvSched records when it's needed.
   OperationID: ChangeAPInvSchedDueDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPInvSchedDueDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPInvSchedDueDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAdjustmentValue(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAdjustmentValue
   Description: Method to call when changing the adjustment value on the invoice detail.
It is used only for correction invoice in adjustment line.
   OperationID: ChangeAdjustmentValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAdjustmentValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAdjustmentValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAdvancePayAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAdvancePayAmt
   Description: Method to call when changing the advance pay amount on the invoice detail.  Updates APInvDtl
with default values based on the new pay amount.
   OperationID: ChangeAdvancePayAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAdvancePayAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAdvancePayAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAssemblySeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAssemblySeq
   Description: Method to call when changing the assembly sequence on the job miscellaneous charge.
Validates the assembly sequence and updates APInvJob with values from the new assembly sequence.
   OperationID: ChangeAssemblySeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAssemblySeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAssemblySeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCostPerCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCostPerCode
   Description: Method to call when changing the cost per code on the invoice detail.  Updates APInvDtl
with default values based on the new code.
   OperationID: ChangeCostPerCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCostPerCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCostPerCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCurrency(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCurrency
   Description: Method to call when changing the currency on the invoice.  Validates the currency code and
updates APInvHed with default values based on the currency.
   OperationID: ChangeCurrency
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCurrency_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCurrency_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeCurrencyMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeCurrencyMaster
   Description: Method to call when changing the currency on the invoice.  Validates the currency code and
updates APInvHed with default values based on the currency.
   OperationID: ChangeCurrencyMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeCurrencyMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeCurrencyMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeExpHeaderAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeExpHeaderAmt
   Description: This method recalculates base/document and report currencies amount of Header
GL Expence distribution amount changed by the user
   OperationID: ChangeExpHeaderAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeExpHeaderAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeExpHeaderAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeExpLineAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeExpLineAmt
   Description: This method recalculates base/document and report currencies amount of Line
GL Expence distribution amount changed by the user
   OperationID: ChangeExpLineAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeExpLineAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeExpLineAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetAPInvoiceRelationshipMap(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetAPInvoiceRelationshipMap
   Description: Returns a serialized json string to show a Relationship Map for AP Invoice
   OperationID: GetAPInvoiceRelationshipMap
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetAPInvoiceRelationshipMap_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAPInvoiceRelationshipMap_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGLAccountDesc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGLAccountDesc
   Description: This method gets the GL Account Description from the GLAcctDisp Table
   OperationID: GetGLAccountDesc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGLAccountDesc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGLAccountDesc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_GetGBLGLAccountDesc(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method GetGBLGLAccountDesc
   Description: This method gets the Global GL Account Description from the GLBGLAcctDisp Table
   OperationID: GetGBLGLAccountDesc
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetGBLGLAccountDesc_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetGBLGLAccountDesc_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeExtCompanyID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeExtCompanyID
   Description: This method resets the regular Expense and Multi-Company G/L Accounts and the
Reference Codes when the External Company ID changes.  This should only be called
when updating APInvExp and not the APIHAPInvExp.
   OperationID: ChangeExtCompanyID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeExtCompanyID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeExtCompanyID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeExtCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeExtCost
   Description: Method to call when changing the ext cost on the invoice detail.  Validates the
ext cost and updates APInvDtl with default values based on the new cost.
   OperationID: ChangeExtCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeExtCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeExtCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFixedAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFixedAmount
   Description: Method to call when changing the fixed amount on a tax record.  Updates APInvTax
tax amounts based on the new fixed amount.
   OperationID: ChangeFixedAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFixedAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFixedAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFixedHedMscAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFixedHedMscAmount
   Description: Method to call when changing the fixed amount on a header tax record.  Updates APInvHedMscTax
tax amounts based on the new fixed amount.
   OperationID: ChangeFixedHedMscAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFixedHedMscAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFixedHedMscAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFixedLineAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFixedLineAmount
   Description: Method to call when changing the fixed amount on a line tax record.  Updates APLnTax
tax amounts based on the new fixed amount.
   OperationID: ChangeFixedLineAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFixedLineAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFixedLineAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFixedLnMscAmount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFixedLnMscAmount
   Description: Method to call when changing the fixed amount on a line tax record.  Updates APInvLnMscTax
tax amounts based on the new fixed amount.
   OperationID: ChangeFixedLnMscAmount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFixedLnMscAmount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFixedLnMscAmount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeGUITaxBasisAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeGUITaxBasisAmt
   Description: Method to call when changing the Tax Basis Amount - Taiwan Localization on an invoice record.  Updates APInvHed
amounts based on the new invoice vendor amount.
   OperationID: ChangeGUITaxBasisAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeGUITaxBasisAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeGUITaxBasisAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceDate
   Description: Method to call when changing the invoice date on the invoice.  Updates APInvHed
with default values based on the new date.
   OperationID: ChangeInvoiceDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceDateEx(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceDateEx
   Description: Method to call when changing the invoice date on the invoice.  Updates APInvHed
with default values based on the new date.
   OperationID: ChangeInvoiceDateEx
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceDateEx_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceDateEx_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceDateWithDateCheck(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceDateWithDateCheck
   Description: Method to call when changing the invoice date on the invoice.  Updates APInvHed
with default values based on the new date.
This method will additionally return a message to present to the user if the date is greater than
the client today date.
   OperationID: ChangeInvoiceDateWithDateCheck
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceDateWithDateCheck_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceDateWithDateCheck_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeDueDate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeDueDate
   Description: Method to call when changing the Due date on the invoice.
   OperationID: ChangeDueDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeDueDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeDueDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoicePurPoint(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoicePurPoint
   Description: Method to call when changing the Purchase Point on the invoice.
   OperationID: ChangeInvoicePurPoint
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoicePurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoicePurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceRef
   Description: Method to call when changing the invoice reference.  Validates the
invoice reference number id and updates APInvHed with values from the new invoice reference.
   OperationID: ChangeInvoiceRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeInvoiceVendorAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeInvoiceVendorAmt
   Description: Method to call when changing the invoice vendor amount on an invoice record.  Updates APInvHed
amounts based on the new invoice vendor amount.
   OperationID: ChangeInvoiceVendorAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeInvoiceVendorAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeInvoiceVendorAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMiscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMiscCode
   Description: ///
   OperationID: ChangeJobMiscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMiscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMiscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobMiscProject(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobMiscProject
   Description: Method to call when changing the projectID.  Updates APInvJob
   OperationID: ChangeJobMiscProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobMiscProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobMiscProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeJobNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeJobNum
   Description: Method to call when changing the job number on the job miscellaneous charge.
Validates the job number and updates APInvJob with values from the new job.
   OperationID: ChangeJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeLineDiscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeLineDiscAmt
   Description: Method to call when changing the discount amount on the invoice detail.  Updates APInvDtl
with default values based on the new discount amount.
   OperationID: ChangeLineDiscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeLineDiscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeLineDiscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeLOCID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeLOCID
   Description: Method to call when changing the LOC ID on the invoice.  Validates the LOC ID and
updates APInvHed with default values based on the new code.
   OperationID: ChangeLOCID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeLOCID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeLOCID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeLOCIDInvPosted(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeLOCIDInvPosted
   Description: Method to call when changing the LOC ID on Posted AP Invoice Maintenance EXCLUSIVE.
Validates the proposed LOC ID vs Vendor and Currency, then updates APInvHed
with default values based on the new code.
   OperationID: ChangeLOCIDInvPosted
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeLOCIDInvPosted_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeLOCIDInvPosted_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeLockRate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeLockRate
   Description: Method to call when changing the lock rate flag on the invoice.  Updates
APInvHed.EnableExchangeRate field.
   OperationID: ChangeLockRate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeLockRate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeLockRate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeManualTaxCalculation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeManualTaxCalculation
   Description: Method to call when changing the manual tax calculation value on a tax record.  Updates APInvTax
tax amounts based on the new value of the flag.
   OperationID: ChangeManualTaxCalculation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeManualTaxCalculation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeManualTaxCalculation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeManualTaxHedMscCalculation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeManualTaxHedMscCalculation
   Description: Method to call when changing the manual tax calculation value on a header misc charge tax record.  Updates APInvHedMscTax
tax amounts based on the new value of the flag back to system-calculated tax.
   OperationID: ChangeManualTaxHedMscCalculation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeManualTaxHedMscCalculation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeManualTaxHedMscCalculation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeManualTaxLineCalculation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeManualTaxLineCalculation
   Description: Method to call when changing the manual tax calculation value on a line tax record.  Updates APLnTax
tax amounts based on the new value of the flag back to system-calculated tax.
   OperationID: ChangeManualTaxLineCalculation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeManualTaxLineCalculation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeManualTaxLineCalculation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeManualTaxLnMscCalculation(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeManualTaxLnMscCalculation
   Description: Method to call when changing the manual tax calculation value on a line misc charge tax record.  Updates APInvLnMscTax
tax amounts based on the new value of the flag back to system-calculated tax.
   OperationID: ChangeManualTaxLnMscCalculation
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeManualTaxLnMscCalculation_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeManualTaxLnMscCalculation_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscAmt
   Description: Method to call when changing the miscellanous amount on a miscellaneous charge.  This method
can be called for both the APInvMsc table and APIHAPInvMsc table.
Updates the respective miscellanous charge table with default values based on the new amount.
   OperationID: ChangeMiscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscCode
   Description: Method to call when changing the miscellanous code on a miscellaneous charge.  This method
can be called for both the APInvMsc table and APIHAPInvMsc table.  Validates the code and
updates the respective miscellanous charge table with default values based on the new code.
   OperationID: ChangeMiscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscLCFlag(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscLCFlag
   Description: Method to call when changing the LCFLag on a miscellaneous charge.  This method
can be called for both the APInvMsc table and APIHAPInvMsc table.  Validates the
code if can be flagged as Landed Cost Charge.
   OperationID: ChangeMiscLCFlag
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscLCFlag_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscLCFlag_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_Change1099Code(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method Change1099Code
   Description: Method to change 1099 Code on AP Invoice Line, displays the correct description.
   OperationID: Change1099Code
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Change1099Code_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Change1099Code_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPIHAPInvMsc1099Code(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPIHAPInvMsc1099Code
   Description: Method to change 1099 Code on AP Invoice Header Misc Charge, displays the correct description.
   OperationID: ChangeAPIHAPInvMsc1099Code
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPIHAPInvMsc1099Code_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPIHAPInvMsc1099Code_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFormType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFormType
   Description: Method to change 1099 Form Type on AP Invoice Line, displays the correct description.
   OperationID: ChangeFormType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFormType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFormType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeAPIHAPInvMscFormType(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeAPIHAPInvMscFormType
   Description: Method to change 1099 Form Type on AP Invoice Header Misc Charge, displays the correct description.
   OperationID: ChangeAPIHAPInvMscFormType
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeAPIHAPInvMscFormType_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeAPIHAPInvMscFormType_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMiscPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMiscPercent
   Description: This method recalculates Misc Charges Amounts when Percentage was changed.
   OperationID: ChangeMiscPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMiscPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMiscPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMtlSeq(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMtlSeq
   Description: Method to call when changing the material sequence on the job miscellaneous charge.
Validates the material sequence and updates APInvJob with values from the new material sequence.
   OperationID: ChangeMtlSeq
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMtlSeq_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMtlSeq_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeMultiCompany(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeMultiCompany
   Description: This method resets the External Company ID, regular and Multi-Company G/L Accounts
and the Reference Codes when the Multi-Company flag changes.
   OperationID: ChangeMultiCompany
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeMultiCompany_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeMultiCompany_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeOverrideRevCharge(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeOverrideRevCharge
   Description: Method to call when changing the override reverse charge.  If override flag
is unchecked then default the original value of RevChargeMethod back.
   OperationID: ChangeOverrideRevCharge
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeOverrideRevCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeOverrideRevCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePartNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePartNum
   Description: Method to call when changing the part number on a detail record.  Updates APInvDtl
with defaults from the part.
   OperationID: ChangePartNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePartNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePartNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePBDtlValue(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePBDtlValue
   Description: Purpose:
Parameters:  none
Notes:
<param name="proposedInvDtlValue">The proposed value</param><param name="ds">The APInvoice data set</param>
   OperationID: ChangePBDtlValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePBDtlValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePBDtlValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePBMtlCharge(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePBMtlCharge
   Description: Purpose:
Parameters:  none
Notes:
<param name="proposedMtlChrg">The proposed value</param><param name="ds">The APInvoice data set</param>
   OperationID: ChangePBMtlCharge
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePBMtlCharge_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePBMtlCharge_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePhaseID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePhaseID
   Description: Method to call when changing the phase on a detail record.  Updates APInvJob
with defaults from the part.
   OperationID: ChangePhaseID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePhaseID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePhaseID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePMUID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePMUID
   Description: Method to call when changing the Payment Method.
   OperationID: ChangePMUID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePMUID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePMUID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePMUIDMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePMUIDMaster
   Description: Method to call when changing the Payment Method.
   OperationID: ChangePMUIDMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePMUIDMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePMUIDMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateCreateCancellationInvoice(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateCreateCancellationInvoice
   Description: This Method will check if the invoice can be cancelled if is not central payment or Intercompany.
   OperationID: ValidateCreateCancellationInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateCreateCancellationInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateCreateCancellationInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateWBSPhase(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateWBSPhase
   Description: Method to call to validate the WBS Phase.
   OperationID: ValidateWBSPhase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateWBSPhase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateWBSPhase_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ValidateUnreceivedLineForPOBeforeChangePOLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ValidateUnreceivedLineForPOBeforeChangePOLine
   Description: This Method will check if the current PO line already has an unreceived line Invoice created and send a warning message if so.
   OperationID: ValidateUnreceivedLineForPOBeforeChangePOLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateUnreceivedLineForPOBeforeChangePOLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateUnreceivedLineForPOBeforeChangePOLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePOLine(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePOLine
   Description: Method to call when changing the po line on a detail record.  Validates the po line and
updates APInvDtl with defaults from the purchase order line.
   OperationID: ChangePOLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePOLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePOLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePONum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePONum
   Description: Method to call when changing the po number on a detail record.  Validates the po number
and updates APInvDtl with defaults from the purchase order.
   OperationID: ChangePONum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePONum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePONum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePORelNum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePORelNum
   Description: Method to call when changing the po release number on a detail record.  Validates the
po release number and updates APInvDtl with defaults from the purchase order release.
   OperationID: ChangePORelNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePORelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePORelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePrePayment(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePrePayment
   Description: Method to call when changing the number of a prepayment invoice on the invoice header.
   OperationID: ChangePrePayment
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePrePayment_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePrePayment_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangePrePaymentAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangePrePaymentAmt
   Description: Method to call when changing the prepayment amount.
   OperationID: ChangePrePaymentAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangePrePaymentAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangePrePaymentAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRateCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRateCode
   Description: Method to call when changing the tax percent on a tax record.  Updates APInvTax
tax amounts based on the new tax percent.
   OperationID: ChangeRateCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRateCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRateCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRateCodeMaster(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRateCodeMaster
   Description: Method to call when changing the rate code on a tax record.  Validates the rate and tax code
   OperationID: ChangeRateCodeMaster
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRateCodeMaster_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRateCodeMaster_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRateHedMscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRateHedMscCode
   Description: Method to call when changing the rate code on a tax record related to Invoice Header Misc Charge.  Validates the rate and tax code
   OperationID: ChangeRateHedMscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRateHedMscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRateHedMscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRateLineCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRateLineCode
   Description: Method to call when changing the rate code on a tax record related to Invoice Line.  Validates the rate and tax code
   OperationID: ChangeRateLineCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRateLineCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRateLineCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRateLnMscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRateLnMscCode
   Description: Method to call when changing the rate code on a tax record related to Invoice Line Misc Charge.  Validates the rate and tax code
   OperationID: ChangeRateLnMscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRateLnMscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRateLnMscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRefPONum(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRefPONum
   Description: Method to call when changing the po number reference on the invoice.  Validates the
po number reference and updates APInvHed with default values based on the po number.
   OperationID: ChangeRefPONum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRefPONum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRefPONum_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeReportableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeReportableAmt
   Description: Method to call when changing the taxable amount on a tax record.  Updates APInvTax
tax amounts based on the new taxable amount.
   OperationID: ChangeReportableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeReportableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeReportableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeReportableHedMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeReportableHedMscAmt
   Description: Method to call when changing the reportable amount on invoice header misc charge tax record.  Updates APInvHedMscTax
reportable amounts based on the new reportable amount.
   OperationID: ChangeReportableHedMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeReportableHedMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeReportableHedMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeReportableLineAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeReportableLineAmt
   Description: Method to call when changing the reportable amount on invoice line tax record.  Updates APLnTax
reportable amounts based on the new reportable amount.
   OperationID: ChangeReportableLineAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeReportableLineAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeReportableLineAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeReportableLnMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeReportableLnMscAmt
   Description: Method to call when changing the reportable amount on invoice line misc charge tax record.  Updates APInvLnMscTax
reportable amounts based on the new reportable amount.
   OperationID: ChangeReportableLnMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeReportableLnMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeReportableLnMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeRevChargeMethod(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeRevChargeMethod
   Description: Method to call when changing the reverse charge method.  If override flag
is true then check if the proposed method is valid.
   OperationID: ChangeRevChargeMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeRevChargeMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeRevChargeMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxableAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxableAmt
   Description: Method to call when changing the taxable amount on a tax record.  Updates APInvTax
tax amounts based on the new taxable amount.
   OperationID: ChangeTaxableAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxableAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxableAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxableHedMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxableHedMscAmt
   Description: Method to call when changing the taxable amount on invoice header tax record.  Updates APInvHedMscTax
taxable amounts based on the new taxable amount.
   OperationID: ChangeTaxableHedMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxableHedMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxableHedMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxableLineAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxableLineAmt
   Description: Method to call when changing the taxable amount on invoice line tax record.  Updates APLnTax
taxable amounts based on the new taxable amount.
   OperationID: ChangeTaxableLineAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxableLineAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxableLineAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxableLnMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxableLnMscAmt
   Description: Method to call when changing the taxable amount on invoice line tax record.  Updates APInvLnMscTax
taxable amounts based on the new taxable amount.
   OperationID: ChangeTaxableLnMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxableLnMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxableLnMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxAmt
   Description: Method to call when changing the fixed tax amount on a tax record.  Updates APInvTax
tax amounts based on the new tax amount.
   OperationID: ChangeTaxAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxHedMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxHedMscAmt
   Description: Method to call when changing the tax amount on a invoice header misc charge tax record.  Updates APInvHedMscTax
tax amounts based on the new tax amount.
   OperationID: ChangeTaxHedMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxHedMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxHedMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLineAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLineAmt
   Description: Method to call when changing the tax amount on a invoice line tax record.  Updates APLnTax
tax amounts based on the new tax amount.
   OperationID: ChangeTaxLineAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLineAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLineAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLnMscAmt(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLnMscAmt
   Description: Method to call when changing the tax amount on a invoice line misc charge tax record.  Updates APInvLnMscTax
tax amounts based on the new tax amount.
   OperationID: ChangeTaxLnMscAmt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLnMscAmt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLnMscAmt_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxCatID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxCatID
   Description: Method to call when changing the Tax Category ID
   OperationID: ChangeTaxCatID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxCatID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxCatID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxCode
   Description: Method to call when changing the tax code on a tax record.  Validates the tax code and
updates APInvTax tax amounts based on the new tax code.
   OperationID: ChangeTaxCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxHedMscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxHedMscCode
   Description: Method to call when changing the tax code on a Invoice Header Misc charge tax record.  Validates the tax code and
updates APInvHedMscTax tax amounts based on the new tax code.
   OperationID: ChangeTaxHedMscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxHedMscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxHedMscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLineCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLineCode
   Description: Method to call when changing the tax code on a Invoice Line tax record.  Validates the tax code and
updates APLnTax tax amounts based on the new tax code.
   OperationID: ChangeTaxLineCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLineCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLineCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLnMscCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLnMscCode
   Description: Method to call when changing the tax code on a Invoice Line Misc charge tax record.  Validates the tax code and
updates APLnTax tax amounts based on the new tax code.
   OperationID: ChangeTaxLnMscCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLnMscCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLnMscCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxDeductable(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxDeductable
   Description: Method to call when changing the tax deductible on a tax record.  Updates APInvTax
tax amounts based on the new tax percent.
   OperationID: ChangeTaxDeductable
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxDeductable_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxDeductable_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxHedMscDeductible(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxHedMscDeductible
   Description: Method to call when changing the tax deductible amount on a AP Invoice header msc charge tax record deductible amount.
   OperationID: ChangeTaxHedMscDeductible
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxHedMscDeductible_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxHedMscDeductible_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLineDeductible(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLineDeductible
   Description: Method to call when changing the tax deductible on a AP Invoice line tax record.
   OperationID: ChangeTaxLineDeductible
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLineDeductible_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLineDeductible_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLnMscDeductible(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLnMscDeductible
   Description: Method to call when changing the tax deductible amount on a AP Invoice line msc charge tax record.
   OperationID: ChangeTaxLnMscDeductible
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLnMscDeductible_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLnMscDeductible_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLock(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLock
   Description: Method to call when changing the lock rate flag on the invoice.  Updates
APInvHed.EnableTaxExRate field.
   OperationID: ChangeTaxLock
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLock_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLock_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxPercent
   Description: Method to call when changing the tax percent on a tax record.  Updates APInvTax
tax amounts based on the new tax percent.
   OperationID: ChangeTaxPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxHedMscPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxHedMscPercent
   Description: Method to call when changing the tax percent on a AP Invoice header misc charge tax record.  Updates APInvHedMscTax
tax amounts based on the new tax percent only when one tax record exists.
   OperationID: ChangeTaxHedMscPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxHedMscPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxHedMscPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLinePercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLinePercent
   Description: Method to call when changing the tax percent on a AP Invoice line tax record.  Updates APLnTax
tax amounts based on the new tax percent only when one tax record exists.
   OperationID: ChangeTaxLinePercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLinePercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLinePercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTaxLnMscPercent(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTaxLnMscPercent
   Description: Method to call when changing the tax percent on a AP Invoice line misc charge tax record.  Updates APInvLnMscTax
tax amounts based on the new tax percent only when one tax record exists.
   OperationID: ChangeTaxLnMscPercent
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTaxLnMscPercent_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTaxLnMscPercent_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeTermsCode(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeTermsCode
   Description: Method to call when changing the terms code on the invoice.  Validates the terms code and
updates APInvHed with default values based on the new code.
   OperationID: ChangeTermsCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeTermsCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeTermsCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeFixedDiscount(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeFixedDiscount
   Description: Method to call when changing the DiscountAmt on the invoice.
   OperationID: ChangeFixedDiscount
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeFixedDiscount_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeFixedDiscount_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeUnitCost(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeUnitCost
   Description: Method to call when changing the unit cost on the invoice detail.  Updates APInvDtl
with default values based on the new unit cost.
   OperationID: ChangeUnitCost
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeUnitCost_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeUnitCost_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeVendorID(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeVendorID
   Description: Method to call when changing the vendor id on the invoice.  Validates the vendor id and
updates APInvHed with values from the new vendor.
   OperationID: ChangeVendorID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeVendorID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeVendorID_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_ChangeVendorQty(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method ChangeVendorQty
   Description: Method to call when changing the vendor quantity on the invoice detail.  Updates APInvDtl
with default values based on the new quantity.
   OperationID: ChangeVendorQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ChangeVendorQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ChangeVendorQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckBankRef(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckBankRef
   Description: Before updating the APInvHed record, CheckBankRef will be called to check if the
bank reference conforms to format standards.  If not, the user will be
presented with a warning message and allowed to continue with the save.
At this time this method is specific to Finland/Sweden localization
   OperationID: CheckBankRef
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckBankRef_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckBankRef_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckBankReference(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckBankReference
   Description: Banking Reference check for required AP invoice
   OperationID: CheckBankReference
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckBankReference_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckBankReference_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckCPayBeforeUpdate(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckCPayBeforeUpdate
   Description: Before updating the APInvHed record, CheckCPayBeforeUpdate will have to be called.
The CheckCPayBeforeUpdate method will pass back opMessage.
- If opMessage is not equal to null then a Yes/No question will have to be asked to the
user displaying the message in opMessage.
- If the user answers "Yes", then call the Update method to continue else stop update.
   OperationID: CheckCPayBeforeUpdate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckCPayBeforeUpdate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckCPayBeforeUpdate_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckDocumentIsLocked(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckDocumentIsLocked
   Description: Method to call when it is necessary to check if document is lock, before doing smth.
   OperationID: CheckDocumentIsLocked
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckDocumentIsLocked_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckDocumentIsLocked_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLegalNumsDisplay(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLegalNumsDisplay
   Description: Method for retrieving logical variable which shows is it neccessary to generate legal numbers for Debit Memos.
   OperationID: CheckLegalNumsDisplay
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLegalNumsDisplay_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLegalNumsDisplay_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLinePurPoint(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLinePurPoint
   Description: Purpose: Used to check whether purcase point can be set in line
Parameters:
<param name="purPoint">The purchase pint</param><param name="ds">The APInvoice data set</param>
   OperationID: CheckLinePurPoint
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLinePurPoint_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLinePurPoint_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()

async def post_CheckLineSubTotal(requestBody, epicorHeaders = None):
   """  
   Summary: Invoke method CheckLineSubTotal
   Description: Purpose:
Parameters:  none
Notes:
<param name="ipVendNum">The group id</param><param name="ipInvNum">The group id</param><param name="ipInvLine">The group id</param><param name="ipRoleCd">The group id</param><param name="ipProposedValue">The group id</param>
   OperationID: CheckLineSubTotal
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckLineSubTotal_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckLineSubTotal_output
      500 Desc: Internal server error. Server is unable to process the request.
   """  


   creds = configEpicorSchemas.epicorCreds
   if(epicorHeaders != None):
         creds = epicorHeaders

   async with aiohttp.ClientSession() as session:
       async with session.post(configEpicorSchemas.epicorURL + "Erp.BO.APInvoiceSvc/List", json=requestBody,headers=creds) as resp:
           return await resp.json()




#########################################################################
# OData Schemas:
#########################################################################
class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APIHAPInvExpRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APIHAPInvExpRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APIHAPInvExpTGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APIHAPInvExpTGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APIHAPInvMscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APIHAPInvMscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APIHAPLnTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APIHAPLnTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvDtlAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvDtlAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvDtlDEASchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvDtlDEASchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvDtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvDtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvDtlTGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvDtlTGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvExpRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvExpRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvExpTGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvExpTGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvHedAttchRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvHedAttchRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvHedListRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvHedListRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvHedMscTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvHedMscTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvHedRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvHedRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvJobRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvJobRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvLnMscTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvLnMscTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvMscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvMscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvPBRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvPBRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvSchedRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvSchedRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APInvTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APInvTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_APLnTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_APLnTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_AdditionalForms_ParametersViewRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_AdditionalForms_ParametersViewRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_EntityGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_GlbAPIETGLCRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_GlbAPIETGLCRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PEAPInvTaxRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PEAPInvTaxRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PESUNATDtlRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_PESUNATDtlRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_RcvMiscRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_RcvMiscRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_SupplierXRefRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_SupplierXRefRow] = obj["value"]
      pass

class Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.odatametadata:str = obj["odatametadata"]
      self.value:list[Erp_Tablesets_TaxConnectStatusRow] = obj["value"]
      pass

class Erp_Tablesets_APIHAPInvExpRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number to which this record is related.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine to which this record is related.  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  An internally assigned number used as part of the unique key to the record.  """  
      self.ExpAmt:int = obj["ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.RefType:str = obj["RefType"]
      """  Link to the related GLRefTyp.RefType. Not displayed.  """  
      self.RefCode:str = obj["RefCode"]
      """  Link to the related Code in GLRefCod.RefCode  """  
      self.RefCodeDesc:str = obj["RefCodeDesc"]
      """  THIS SHOULD BE DELETED WITH SONOMA! GL Reference Code description.  """  
      self.Rpt1ExpAmt:int = obj["Rpt1ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt2ExpAmt:int = obj["Rpt2ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt3ExpAmt:int = obj["Rpt3ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.DocExpAmt:int = obj["DocExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.NonDedTax:bool = obj["NonDedTax"]
      """  Non-Deductible Tax  """  
      self.NonDedTaxRelatedToSchema:str = obj["NonDedTaxRelatedToSchema"]
      """  Non-Deductible Tax Related table schema  """  
      self.NonDedTaxRelatedToTable:str = obj["NonDedTaxRelatedToTable"]
      """  Non-Deductible Tax Related table.  """  
      self.NonDedTaxRelatedToSysRowID:str = obj["NonDedTaxRelatedToSysRowID"]
      """  Non-Deductible Tax SysRowID  """  
      self.RefDisplayAccount:str = obj["RefDisplayAccount"]
      self.ScrExpAmt:int = obj["ScrExpAmt"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.EnableRefCode:bool = obj["EnableRefCode"]
      self.RefCodeList:str = obj["RefCodeList"]
      self.Posted:bool = obj["Posted"]
      self.GroupID:str = obj["GroupID"]
      self.RefCodeStatus:str = obj["RefCodeStatus"]
      """  Indicates if Reference Code is (M)andatory, (O)ptional, (E)xcluded or Blank.  Enable Reference Code if "M" or "O".  """  
      self.DispGLAcct:str = obj["DispGLAcct"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocScrExpAmt:int = obj["DocScrExpAmt"]
      self.Rpt1ScrExpAmt:int = obj["Rpt1ScrExpAmt"]
      self.Rpt2ScrExpAmt:int = obj["Rpt2ScrExpAmt"]
      self.Rpt3ScrExpAmt:int = obj["Rpt3ScrExpAmt"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.GLAccount:str = obj["GLAccount"]
      """  The column to make GL Control on user interface work properly.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPInvExpTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  InvExpSeq of APInvExp  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum of APInvExp  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPInvMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  Duplicated  from the related APInvHed record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the InvcDetl record for the Invoice and the adding 1 to it.  """  
      self.MscNum:int = obj["MscNum"]
      """  Number automatically assigned by invoice entry which is used along with VendorNum, InvoiceNum and InvoiceLine to uniquely identify the miscellaneous record within the invoice.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Code that relates this invoice miscellaneous charge to the PurMisc master. Entered via a DDSL widget.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. Defaulted from PurMisc.Description.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  miscellaneous amount.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  miscellaneous amount in the vendor currency.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that this miscellaneous record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  PO line number that this miscellaneous record is related to. If related to the PO Header then this field is zero.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence number of the Miscellaneous Charge  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """   Identifies Tax Category for this Misc. item.
Defaults from PurMisc.TaxCatID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbMscNum:int = obj["GlbMscNum"]
      """  Global Invoice Miscellaneous Charge identifier.  Used in Consolidated Purchasing.  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  Reference to the APInvExp record that contains the gl distribution for this charge.  """  
      self.LCFlag:bool = obj["LCFlag"]
      """  Indicates if the AP Miscellaneous Charge is for Landed Cost.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Container Shipment ID (also known as the ContainerID).  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID of the associated receipt's indirect cost.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip # of the associated receipt's indirect cost.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.LCVendorNum:int = obj["LCVendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  This field, together with the PackSlip and PurPoint, is used to link the APInvMsc to the RcvMisc record that references this misc charge as a Landed Cost's Indirect Cost.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Like PurMisc.LCDisburseMethod. Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  miscellaneous amount including taxes.  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  miscellaneous amount in the vendor currency including taxes.  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  NoTaxRecalc  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  Code1099ID  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Gen1099Code  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.PlasticPackTaxReportID:str = obj["PlasticPackTaxReportID"]
      """  The Plastic Packaging Tax Report ID.  """  
      self.AllocBasis:int = obj["AllocBasis"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocAllocAmt:int = obj["DocAllocAmt"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.DocUnallocAmt:int = obj["DocUnallocAmt"]
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.LCEnabled:bool = obj["LCEnabled"]
      self.Posted:bool = obj["Posted"]
      self.RecordSource:str = obj["RecordSource"]
      self.Rpt1AllocAmt:int = obj["Rpt1AllocAmt"]
      self.Rpt1ScrMiscAmt:int = obj["Rpt1ScrMiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt1UnallocAmt:int = obj["Rpt1UnallocAmt"]
      self.Rpt2AllocAmt:int = obj["Rpt2AllocAmt"]
      self.Rpt2ScrMiscAmt:int = obj["Rpt2ScrMiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt2UnallocAmt:int = obj["Rpt2UnallocAmt"]
      self.Rpt3AllocAmt:int = obj["Rpt3AllocAmt"]
      self.Rpt3ScrMiscAmt:int = obj["Rpt3ScrMiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.Rpt3UnallocAmt:int = obj["Rpt3UnallocAmt"]
      self.ScrDocMiscAmt:int = obj["ScrDocMiscAmt"]
      self.ScrMiscAmt:int = obj["ScrMiscAmt"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.UnallocAmt:int = obj["UnallocAmt"]
      self.AllocAmt:int = obj["AllocAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.Code1099Description:str = obj["Code1099Description"]
      self.FormTypeDescription:str = obj["FormTypeDescription"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.MiscCodeLCDisburseMethod:str = obj["MiscCodeLCDisburseMethod"]
      self.MiscCodeLCAmount:int = obj["MiscCodeLCAmount"]
      self.MiscCodeLCCurrencyCode:str = obj["MiscCodeLCCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPLnTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisableManual:bool = obj["DisableManual"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.DocScrTaxAmtVar:int = obj["DocScrTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlDEASchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine  """  
      self.AmortSeq:int = obj["AmortSeq"]
      """  Internal identifier used to keep the records unique  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  FiscalCalendarID  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  FiscalYear  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  FiscalYearSuffix  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  FiscalPeriod  """  
      self.AmortDate:str = obj["AmortDate"]
      """  Amortization Date  """  
      self.AmortPercent:int = obj["AmortPercent"]
      """  Amortization Percent  """  
      self.AmortAmt:int = obj["AmortAmt"]
      """  Amortization Amount  """  
      self.Rpt1AmortAmt:int = obj["Rpt1AmortAmt"]
      """  Amortization Amount in Rpt1 Currency  """  
      self.Rpt2AmortAmt:int = obj["Rpt2AmortAmt"]
      """  Amortization Amount in Rpt2 Currency  """  
      self.Rpt3AmortAmt:int = obj["Rpt3AmortAmt"]
      """  Amortization Amount in Rpt3 Currency  """  
      self.DocAmortAmount:int = obj["DocAmortAmount"]
      """  Amortization Amount in Doc Currency  """  
      self.Hold:bool = obj["Hold"]
      """  Indicates if this amortization period is on hold  """  
      self.HoldReasonCode:str = obj["HoldReasonCode"]
      """  Descriptive code assigned by user which uniquely identifies a reason code master record and identifies why an amortization period is on hold  """  
      self.HoldText:str = obj["HoldText"]
      """  Descriptive text further explaining why an amortization period is on hold  """  
      self.Posted:bool = obj["Posted"]
      """  Posted  """  
      self.PostedDate:str = obj["PostedDate"]
      """  Posted Date  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  TranDocTypeID  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  LegalNumber  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      self.DocAmortAmt:int = obj["DocAmortAmt"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DspAmortAmt:int = obj["DspAmortAmt"]
      self.DocDspAmortAmt:int = obj["DocDspAmortAmt"]
      self.Rpt1DspAmortAmt:int = obj["Rpt1DspAmortAmt"]
      self.Rpt2DspAmortAmt:int = obj["Rpt2DspAmortAmt"]
      self.Rpt3DspAmortAmt:int = obj["Rpt3DspAmortAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company, VendorNum and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the APInvDtl record for the Invoice and the adding 1 to it.  """  
      self.LineType:str = obj["LineType"]
      """  Indicates the type of invoice line. "R" = Invoiced for Receipt of goods, "A" - Advance Billing,  "M" - Misc. Billing, "U" - Unreceived goods, "J" - Job Miscellaneous charge A/P invoice, "S" - Asset Invoice Line.  Not directly entered,  set by invoice entry by the user selecting the appropriate menu option.  """  
      self.UnitCost:int = obj["UnitCost"]
      """  item's unit cost in the vendors unit of measure.  Default can be obtained from the PODetail.UnitCost if related.  """  
      self.DocUnitCost:int = obj["DocUnitCost"]
      """  item's unit cost in the vendors unit of measure and currency.  Default can be obtained from the PODetail.DocUnitCost if related.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number used to identify line item part.  """  
      self.PONum:int = obj["PONum"]
      """   Purchase Order Number that this invoice line item is related to. If packing slip is referenced then it is set = to RcvDtl.PONum and can't be changed.  If entered it must be a valid POHeader record.
A reference is made to the purchase order using PONUM, POLine and PORelNum fields. If any one of these fields are entered then they all must be entered and be valid.  """  
      self.POLine:int = obj["POLine"]
      """  The PO line # that invoice is for. Defaulted from the RvcDtl if referenced to packing slip document.. Only applicable when PO is referenced.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase Order Release # which is being invoiced. Defaulted from RcvDtl if related to a packing slip. If entered it Must be valid.  """  
      self.Description:str = obj["Description"]
      """  Invoice line description.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job that this invoice is related to. Set to the RcvDtl.JobNum.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Job Assembly Sequence that this invoice line is related to. Set to RcvDtl.AssemblySeq.  """  
      self.JobSeqType:str = obj["JobSeqType"]
      """  Indicates if this invoice line is related to a job material (jobmtl) or job subcontract (JobOper) record. Valid values are "M" = material or "S" = subcontract. This is set to RvcDtl.JobSeqType.  """  
      self.JobSeq:int = obj["JobSeq"]
      """  Seq # of specific material or subcontract operation record to which this line item is costed against. Defaults from the RcvDtl.JobSeq. Only applicable for a receipts to job.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendor's purchase point ID. This is used as part of the foreign key to reference the RcvHead/RcvDtl records.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendor's packing slip that this A\P invoice detail line is associated with. This Along with PackLine provides a relationship to the receipt document detail (RcvDtl)  """  
      self.PackLine:int = obj["PackLine"]
      """  The Pack Slip line of the RcvDtl record  to which this A\P detail record is related to.  """  
      self.VendorQty:int = obj["VendorQty"]
      """  Total Invoiced Quantity for the line item.  This is stored in the Vendors Unit of Measure.  Can be defaulted from the packing slip detail if referenced (RcvDtl.POReceiptQty)  """  
      self.PUM:str = obj["PUM"]
      """  Unit of Measure code for the vendor's quantity. Defaulted in the following hierarchy: from the RcvDel.PUM if packing slip is referenced, from PODetail.PUM if PO is referenced, from Part.PUM if valid part or finally from XaSyst.DefaultUM.  """  
      self.OurQty:int = obj["OurQty"]
      """  Invoiced Quantity for the line item in our unit of measure. This can be defaulted from the packing slip detail if referenced (RcvDtl.ReceiptQty)  """  
      self.IUM:str = obj["IUM"]
      """  Unit of Measure code for invoiced quantity in our unit of measure. Defaulted in the following hierarchy: from the RcvDel.IUM if packing slip is referenced, from PODetail.IUM if PO is referenced, from Part.IUM if valid part or finally from XaSyst.DefaultUM.  """  
      self.CostPerCode:str = obj["CostPerCode"]
      """   Indicates the costing per quantity. It can be "E" = per each,
"C" = per hundred,  "M" = per thousand. Used to calculate the extended unit cost for the line item. The logic is to divide the APInvDtl.VendorQty by the appropriate "per" value and then multiply by unit cost.  Use the PODetail.CostPerCode if related to a PO else use Part.PricePerCode if valid part. Else default as "E".
Valid database values are "E" = Each, "C" = per 100 or "M" = per 1,000.  """  
      self.VenPartNum:str = obj["VenPartNum"]
      """  Vendor's part number. Optional, defaults from the RcvDtl, PODetail or blank.  """  
      self.ExtCost:int = obj["ExtCost"]
      """  Extended Cost for the invoice line item. Calculated as the (VendorQty/CostPer) * UnitCost or can be directly maintained in which case it recalculates the UnitCost value.  """  
      self.DocExtCost:int = obj["DocExtCost"]
      """  Extended Cost for the invoice line item in Vendors currency. Calculated as the (VendorQty/CostPer) * UnitCost or can be directly maintained in which case it recalculates the UnitCost value.  """  
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line in vendors currency.  """  
      self.LineComment:str = obj["LineComment"]
      """  Used to establish invoice comments about the invoice line.  """  
      self.MatchDate:str = obj["MatchDate"]
      """  Mirror image of related RCVHead.ReceiptDate.  Only applies to LineType = U. Updated during the Invoice/Receipt match posting process if GLSyst.PostInvtyWipCos = No.  This date is used as the journal date and to determine the fiscal period when the Invoice/Receipt process is responsible for generating the GL entries. (See CaMatchingDiv description)  """  
      self.MatchFiscalYear:int = obj["MatchFiscalYear"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.MatchFiscalPeriod:int = obj["MatchFiscalPeriod"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this item is exempt from sales tax for this line item.  If field is non-blank it is considered exempt.  This code is totally user definable and no validation is required.  This field is intended to be used for analysis purposes.  When the value is changed from blank to non-blank or vice versa tax calculation logic kicks in to calculate the sales tax info.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this line item.  Defaults from the Part Master.  """  
      self.AdvancePayAmt:int = obj["AdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments.    It is defaulted from the PODetail.AdvancePayBal.  This value reduces the PODetail.AdvancePayBal.  """  
      self.DocAdvancePayAmt:int = obj["DocAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments.   It is defaulted from the PODetail.AdvancePayBal.  This value reduces the PODetail.AdvancePayBal.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  Purchase Code.  """  
      self.LineDiscAmt:int = obj["LineDiscAmt"]
      """  Discount amount for this line  """  
      self.DocLineDiscAmt:int = obj["DocLineDiscAmt"]
      """  Discount amount (Vendors Currency) for this line  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.AdvGainLoss:int = obj["AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.MultiCompany:bool = obj["MultiCompany"]
      """  Flag to indicate that G/L entries appearing under this invoice line will have multi-company journals entered at the target external company.  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this invoice line.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AP invoice line.  """  
      self.OverrideReverseCharge:bool = obj["OverrideReverseCharge"]
      """  Indicates if the user overrides the Reverse Charge Method.  """  
      self.RevChargeApplied:bool = obj["RevChargeApplied"]
      """  Indicates if Reverse Charge tax line has been applied.  """  
      self.Rpt1AdvancePayAmt:int = obj["Rpt1AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2AdvancePayAmt:int = obj["Rpt2AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3AdvancePayAmt:int = obj["Rpt3AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExtCost:int = obj["Rpt1ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtCost:int = obj["Rpt2ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtCost:int = obj["Rpt3ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt1LineDiscAmt:int = obj["Rpt1LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2LineDiscAmt:int = obj["Rpt2LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3LineDiscAmt:int = obj["Rpt3LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitCost:int = obj["Rpt1UnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitCost:int = obj["Rpt2UnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitCost:int = obj["Rpt3UnitCost"]
      """  Reporting currency value of this field  """  
      self.DocAdvPayAppld:int = obj["DocAdvPayAppld"]
      """  Amount of advance payment applied  """  
      self.Rpt1AdvGainLoss:int = obj["Rpt1AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2AdvGainLoss:int = obj["Rpt2AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3AdvGainLoss:int = obj["Rpt3AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.MatchFiscalYearSuffix:str = obj["MatchFiscalYearSuffix"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.MatchFiscalCalendarID:str = obj["MatchFiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  The Tax Region for this invoice.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Supplier Shipment ID (also known as the ContainerID).  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  Drop Shipment Pack Line  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Drop shipment Packing Slip.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the InvcTax records tied to this line are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.AssetNum:str = obj["AssetNum"]
      """  Asset number of the linked Asset Addition transaction.  """  
      self.AdditionNum:int = obj["AdditionNum"]
      """  Addition Number or sequence of the linked Asset Addition transaction.  """  
      self.InvoiceLineRef:int = obj["InvoiceLineRef"]
      """  Used in a correction invoice to store reference to the original invoice line.  """  
      self.DocAssetInvoiceBal:int = obj["DocAssetInvoiceBal"]
      """  This is the current invoice line balance (in vendor currency) left to be consumed in the asset addition process.  An asset invoice line can be linked to one or more assets and each asset addition linking to this invoice line will reduce the balance of this DocAssetInvoiceBal.  When this field reaches zero then this invoice line cannot be linked in the asset addition anymore.  """  
      self.AssetBalOurQty:int = obj["AssetBalOurQty"]
      """  This is the Invoiced Quantity balance left to be consumed in the asset addition process.  An asset invoice line can be linked to one or more assets and each asset addition linking to this invoice line will reduce the balance qty of this AssetBalOurQty.  When this field reaches zero then this invoice line cannot be linked in the asset addition anymore.  This qty is expressed in our unit of measure.  """  
      self.AssetQtyIUM:str = obj["AssetQtyIUM"]
      """  Unit of Measure code for asset invoiced quantity balance in our unit of measure.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  The DMR Number that requires supplier credit.  """  
      self.DMRActionNum:int = obj["DMRActionNum"]
      """  The Action Number for the DMR that requires supplier credit.  """  
      self.CreatedFromExpense:bool = obj["CreatedFromExpense"]
      """  Indicates if this invoice line was created from an EmpExpense record.  """  
      self.InUnitCost:int = obj["InUnitCost"]
      """  item's unit cost in the vendors unit of measure including taxes.  """  
      self.DocInUnitCost:int = obj["DocInUnitCost"]
      """  item's unit cost in the vendors unit of measure and currency including taxes.  """  
      self.Rpt1InUnitCost:int = obj["Rpt1InUnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2InUnitCost:int = obj["Rpt2InUnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3InUnitCost:int = obj["Rpt3InUnitCost"]
      """  Reporting currency value of this field  """  
      self.InExtCost:int = obj["InExtCost"]
      """  Extended Cost for the invoice line item including taxes.  """  
      self.DocInExtCost:int = obj["DocInExtCost"]
      """   Extended Cost for the invoice line item in Vendors currency
including taxes  """  
      self.Rpt1InExtCost:int = obj["Rpt1InExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtCost:int = obj["Rpt2InExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtCost:int = obj["Rpt3InExtCost"]
      """  Reporting currency value of this field  """  
      self.InTotalMiscChrg:int = obj["InTotalMiscChrg"]
      """  Rolled up total of all misc. charge records for this invoice detail line including taxes.  """  
      self.DocInTotalMiscChrg:int = obj["DocInTotalMiscChrg"]
      """  Rolled up total of all misc. charge records for this invoice detail line in vendors currency including taxes.  """  
      self.Rpt1InTotalMiscChrg:int = obj["Rpt1InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2InTotalMiscChrg:int = obj["Rpt2InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3InTotalMiscChrg:int = obj["Rpt3InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.InAdvancePayAmt:int = obj["InAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments (incl taxes).  """  
      self.DocInAdvancePayAmt:int = obj["DocInAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments (incl taxes).  """  
      self.Rpt1InAdvancePayAmt:int = obj["Rpt1InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InAdvancePayAmt:int = obj["Rpt2InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InAdvancePayAmt:int = obj["Rpt3InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.InLineDiscAmt:int = obj["InLineDiscAmt"]
      """  Discount amount for this line including taxes  """  
      self.DocInLineDiscAmt:int = obj["DocInLineDiscAmt"]
      """  Discount amount (Vendors Currency) for this line including taxes  """  
      self.Rpt1InLineDiscAmt:int = obj["Rpt1InLineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InLineDiscAmt:int = obj["Rpt2InLineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InLineDiscAmt:int = obj["Rpt3InLineDiscAmt"]
      self.NoTaxRecal:bool = obj["NoTaxRecal"]
      """  Indicates if no tax recalculation by the system is  supposed to be done since with "In Price" tax calculation the tax lines were adjusted or new tax lines added manually  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ScrWithholdAmt:int = obj["ScrWithholdAmt"]
      """  Withholding Tax Amount  """  
      self.DocScrWithholdAmt:int = obj["DocScrWithholdAmt"]
      """  Withholding Tax Amount in document currency  """  
      self.Rpt1ScrWithholdAmt:int = obj["Rpt1ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.Rpt2ScrWithholdAmt:int = obj["Rpt2ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.Rpt3ScrWithholdAmt:int = obj["Rpt3ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  Invoice Reference Number  """  
      self.APTranNo:int = obj["APTranNo"]
      """  AP Transaction Number  """  
      self.DocAdvPayAppliedAmt:int = obj["DocAdvPayAppliedAmt"]
      """  DocAdvPayAppliedAmt  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  1099 Code, defaults from Supplier  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Generated 1099 Code where this invoice was calculated in the 1099 Form  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DeferredExp:bool = obj["DeferredExp"]
      """  DeferredExp  """  
      self.DEACode:str = obj["DEACode"]
      """  DEACode  """  
      self.DEAAmt:int = obj["DEAAmt"]
      """  DEAAmt  """  
      self.DEAStartDate:str = obj["DEAStartDate"]
      """  DEAStartDate  """  
      self.DEAEndDate:str = obj["DEAEndDate"]
      """  DEAEndDate  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.ExternalPONum:str = obj["ExternalPONum"]
      """  This field is used to store the AVP Purchase Order Number.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.MYImportNum:str = obj["MYImportNum"]
      """  Malaysia Import Declaration Number  """  
      self.FinalInvoice:bool = obj["FinalInvoice"]
      """  Flag that indicates if the invoice is the final one for the last partial receipt.  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.TotalTax:int = obj["TotalTax"]
      """  Total Tax Amount  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """  Total Tax Amount  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """  Reporting currency value of this field  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """  Total Self-Assess Tax Amount  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """  Total Self-Assess Tax Amount  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """  Reporting currency value of this field  """  
      self.TotalDedTax:int = obj["TotalDedTax"]
      """  Total Deductible Tax Amount  """  
      self.DocTotalDedTax:int = obj["DocTotalDedTax"]
      """  Total Deductible Tax Amount  """  
      self.Rpt1TotalDedTax:int = obj["Rpt1TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalDedTax:int = obj["Rpt2TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalDedTax:int = obj["Rpt3TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.PBInvNum:int = obj["PBInvNum"]
      """  Project Billing Invoice Number  """  
      self.CancellationDtl:bool = obj["CancellationDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Cancellation logic.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.ExtSysType:str = obj["ExtSysType"]
      """  Used for integrations - system type for URL specified in ExtSysURL - B = BisTrack / L = LumberTrack / F = FiberTrack / blank = Building Supply  """  
      self.ExtSysURL:str = obj["ExtSysURL"]
      """  URL for drill back to an integrated external system  """  
      self.AdjustmentValue:int = obj["AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.AllocationAmount:int = obj["AllocationAmount"]
      self.AllocationDesc:str = obj["AllocationDesc"]
      self.AllocationID:str = obj["AllocationID"]
      self.AllowGLDistAdd:bool = obj["AllowGLDistAdd"]
      self.AllowGLDistAllocation:bool = obj["AllowGLDistAllocation"]
      self.AllowGLDistDelete:bool = obj["AllowGLDistDelete"]
      self.AllowJobMiscAdd:bool = obj["AllowJobMiscAdd"]
      self.AllowJobMiscDelete:bool = obj["AllowJobMiscDelete"]
      self.AllowJobMiscUpdate:bool = obj["AllowJobMiscUpdate"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencyID:str = obj["CurrencyID"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DEACodeDesc:str = obj["DEACodeDesc"]
      self.DEAScheduled:bool = obj["DEAScheduled"]
      """  Is Deferred Expense Amortization Scheduled  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      self.Distributed:int = obj["Distributed"]
      """  DEA Distributed Amount  """  
      self.DocAdjustmentValue:int = obj["DocAdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.DocAllocationAmount:int = obj["DocAllocationAmount"]
      self.DocDistributed:int = obj["DocDistributed"]
      """  DEA Distributed Amount in Doc Currency  """  
      self.DocDspLineTotal:int = obj["DocDspLineTotal"]
      self.DocExpense:int = obj["DocExpense"]
      """  DEA Expense Amount in Doc Currency  """  
      self.DocGLLineTotal:int = obj["DocGLLineTotal"]
      self.DocInTaxAmt:int = obj["DocInTaxAmt"]
      self.DocLineExpenses:int = obj["DocLineExpenses"]
      self.DocLineSubtotal:int = obj["DocLineSubtotal"]
      self.DocLineTotal:int = obj["DocLineTotal"]
      self.DocNonDeducTaxExpense:int = obj["DocNonDeducTaxExpense"]
      self.DocOrgExtCost:int = obj["DocOrgExtCost"]
      """  Value of original Ext Cost in document currency. Used for adjustment lines.  """  
      self.DocPEDetAmt:int = obj["DocPEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.DocRecognized:int = obj["DocRecognized"]
      """  DEA Recognized Amount in Doc Currency  """  
      self.DocRemaining:int = obj["DocRemaining"]
      """  DEA Remaining Amount in Doc Currency  """  
      self.DocScrInvoiceBal:int = obj["DocScrInvoiceBal"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.DocScrUnitCost:int = obj["DocScrUnitCost"]
      self.DocTotDistribAmt:int = obj["DocTotDistribAmt"]
      """  This is the value of the lines that have been entered. In Document Currency  """  
      self.DocUnrecognized:int = obj["DocUnrecognized"]
      """  DEA Unrecognized Amount in Doc Currency  """  
      self.DocVariance:int = obj["DocVariance"]
      self.DropShipment:bool = obj["DropShipment"]
      """  Drop Shipment  """  
      self.DspAllocationAmount:int = obj["DspAllocationAmount"]
      self.DspLineTotal:int = obj["DspLineTotal"]
      self.EnableDiscountAmt:bool = obj["EnableDiscountAmt"]
      self.EnableIntrastat:bool = obj["EnableIntrastat"]
      """  Indicates if intrastat is available for the line.  """  
      self.EnableIntrastatDsp:bool = obj["EnableIntrastatDsp"]
      """  Indicates if intrastat is available for to be diplayed for the line. Used by AP invoice tracker  """  
      self.EnablePurchaseCode:bool = obj["EnablePurchaseCode"]
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Override Reverse Charge check box should be enabled.  """  
      self.EnableScrWithholdAmt:bool = obj["EnableScrWithholdAmt"]
      self.EnableShipmentID:bool = obj["EnableShipmentID"]
      self.EnableSubCData:bool = obj["EnableSubCData"]
      self.EnableSupplierXRef:bool = obj["EnableSupplierXRef"]
      """  Use this field to enable\disable the Supplier Part XRef button  """  
      self.Expense:int = obj["Expense"]
      """  DEA Expense Amount  """  
      self.GLAccount:str = obj["GLAccount"]
      self.GLLineTotal:int = obj["GLLineTotal"]
      self.GridVenPartNum:str = obj["GridVenPartNum"]
      """  The VenPartNum field for the datagrid.  For display purposes only.  """  
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.InTaxAmt:int = obj["InTaxAmt"]
      self.IsAdvance:bool = obj["IsAdvance"]
      """  To determine if line have Advance Billing Line  """  
      self.JPTaxAdjustment:bool = obj["JPTaxAdjustment"]
      """  Japan Tax Adjustment Line  """  
      self.LineExpenses:int = obj["LineExpenses"]
      self.LineSubtotal:int = obj["LineSubtotal"]
      self.LineTotal:int = obj["LineTotal"]
      self.LineTypeDescription:str = obj["LineTypeDescription"]
      self.NonDeducTaxExpense:int = obj["NonDeducTaxExpense"]
      self.OrgExtCost:int = obj["OrgExtCost"]
      """  Value of original Ext Cost in base currency. Used for adjustment lines.  """  
      self.PEDetAmt:int = obj["PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.POCostPerCode:str = obj["POCostPerCode"]
      self.PODocUnitCost:int = obj["PODocUnitCost"]
      self.POLineDesc:str = obj["POLineDesc"]
      self.POPartNum:str = obj["POPartNum"]
      self.POPUM:str = obj["POPUM"]
      self.POReceivedQty:int = obj["POReceivedQty"]
      self.PORelIUM:str = obj["PORelIUM"]
      """  PO Rel Our UOM  """  
      self.PORelOurQty:int = obj["PORelOurQty"]
      """  PO Rel Our Quantity  """  
      self.PORelQty:int = obj["PORelQty"]
      self.Posted:bool = obj["Posted"]
      self.POUnitCost:int = obj["POUnitCost"]
      self.POVenPartNum:str = obj["POVenPartNum"]
      self.POWarn:str = obj["POWarn"]
      self.Print1099:bool = obj["Print1099"]
      """  Print 1099  """  
      self.RcptDestination:str = obj["RcptDestination"]
      self.RcptIUM:str = obj["RcptIUM"]
      """  Receipt Our UOM  """  
      self.RcptOurQty:int = obj["RcptOurQty"]
      """  Receipt Our Quantity  """  
      self.RcptPartDescription:str = obj["RcptPartDescription"]
      self.RcptPartNum:str = obj["RcptPartNum"]
      self.RcptPUM:str = obj["RcptPUM"]
      self.RcptReceiptDate:str = obj["RcptReceiptDate"]
      self.RcptVendorQty:int = obj["RcptVendorQty"]
      self.RcptVenPartNum:str = obj["RcptVenPartNum"]
      self.RecalcGLAcct:bool = obj["RecalcGLAcct"]
      self.Recognized:int = obj["Recognized"]
      """  DEA Recognized Amount  """  
      self.Remaining:int = obj["Remaining"]
      """  DEA Remaining Amount  """  
      self.RevChargeMethodDesc:str = obj["RevChargeMethodDesc"]
      """  Reverse Charge Method description  """  
      self.Rpt1AdjustmentValue:int = obj["Rpt1AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt1AllocationAmount:int = obj["Rpt1AllocationAmount"]
      self.Rpt1Distributed:int = obj["Rpt1Distributed"]
      """  DEA Distributed Amount in Rpt1 Currency  """  
      self.Rpt1DspLineTotal:int = obj["Rpt1DspLineTotal"]
      self.Rpt1Expense:int = obj["Rpt1Expense"]
      """  DEA Expense Amount in Rpt1 Currency  """  
      self.Rpt1GLLineTotal:int = obj["Rpt1GLLineTotal"]
      self.Rpt1InTaxAmt:int = obj["Rpt1InTaxAmt"]
      self.Rpt1LineExpenses:int = obj["Rpt1LineExpenses"]
      self.Rpt1LineSubTotal:int = obj["Rpt1LineSubTotal"]
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt1NonDeducTaxExpense:int = obj["Rpt1NonDeducTaxExpense"]
      self.Rpt1OrgExtCost:int = obj["Rpt1OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt1PEDetAmt:int = obj["Rpt1PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt1POUnitCost:int = obj["Rpt1POUnitCost"]
      self.Rpt1Recognized:int = obj["Rpt1Recognized"]
      """  DEA Recognized Amount in Rpt1 Currency  """  
      self.Rpt1Remaining:int = obj["Rpt1Remaining"]
      """  DEA Remaining Amount in Rpt1 Currency  """  
      self.Rpt1ScrExtCost:int = obj["Rpt1ScrExtCost"]
      self.Rpt1ScrInvoiceBal:int = obj["Rpt1ScrInvoiceBal"]
      self.Rpt1ScrLineDiscAmt:int = obj["Rpt1ScrLineDiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalMiscChrg:int = obj["Rpt1ScrTotalMiscChrg"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt1ScrUnitCost:int = obj["Rpt1ScrUnitCost"]
      self.Rpt1TotDistribAmt:int = obj["Rpt1TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 1.  """  
      self.Rpt1Unrecognized:int = obj["Rpt1Unrecognized"]
      """  DEA Unrecognized Amount in Rpt1 Currency  """  
      self.Rpt1Variance:int = obj["Rpt1Variance"]
      self.Rpt2AdjustmentValue:int = obj["Rpt2AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt2AllocationAmount:int = obj["Rpt2AllocationAmount"]
      self.Rpt2Distributed:int = obj["Rpt2Distributed"]
      """  DEA Distributed Amount in Rpt2 Currency  """  
      self.Rpt2DspLineTotal:int = obj["Rpt2DspLineTotal"]
      self.Rpt2Expense:int = obj["Rpt2Expense"]
      """  DEA Expense Amount in Rpt2 Currency  """  
      self.Rpt2GLLineTotal:int = obj["Rpt2GLLineTotal"]
      self.Rpt2InTaxAmt:int = obj["Rpt2InTaxAmt"]
      self.Rpt2LineExpenses:int = obj["Rpt2LineExpenses"]
      self.Rpt2LineSubtotal:int = obj["Rpt2LineSubtotal"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt2NonDeducTaxExpense:int = obj["Rpt2NonDeducTaxExpense"]
      self.Rpt2OrgExtCost:int = obj["Rpt2OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt2PEDetAmt:int = obj["Rpt2PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt2POUnitCost:int = obj["Rpt2POUnitCost"]
      self.Rpt2Recognized:int = obj["Rpt2Recognized"]
      """  DEA Recognized Amount in Rpt2 Currency  """  
      self.Rpt2Remaining:int = obj["Rpt2Remaining"]
      """  DEA Remaining Amount in Rpt2 Currency  """  
      self.Rpt2ScrExtCost:int = obj["Rpt2ScrExtCost"]
      self.Rpt2ScrInvoiceBal:int = obj["Rpt2ScrInvoiceBal"]
      self.Rpt2ScrLineDiscAmt:int = obj["Rpt2ScrLineDiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalMiscChrg:int = obj["Rpt2ScrTotalMiscChrg"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt2ScrUnitCost:int = obj["Rpt2ScrUnitCost"]
      self.Rpt2TotDistribAmt:int = obj["Rpt2TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 2.  """  
      self.Rpt2Unrecognized:int = obj["Rpt2Unrecognized"]
      """  DEA Unrecognized Amount in Rpt2 Currency  """  
      self.Rpt2Variance:int = obj["Rpt2Variance"]
      self.Rpt3AdjustmentValue:int = obj["Rpt3AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt3AllocationAmount:int = obj["Rpt3AllocationAmount"]
      self.Rpt3Distributed:int = obj["Rpt3Distributed"]
      """  DEA Distributed Amount in Rpt3 Currency  """  
      self.Rpt3DspLineTotal:int = obj["Rpt3DspLineTotal"]
      self.Rpt3Expense:int = obj["Rpt3Expense"]
      """  DEA Expense Amount in Rpt3 Currency  """  
      self.Rpt3GLLineTotal:int = obj["Rpt3GLLineTotal"]
      self.Rpt3InTaxAmt:int = obj["Rpt3InTaxAmt"]
      self.Rpt3LineExpenses:int = obj["Rpt3LineExpenses"]
      self.Rpt3LineSubtotal:int = obj["Rpt3LineSubtotal"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt3NonDeducTaxExpense:int = obj["Rpt3NonDeducTaxExpense"]
      self.Rpt3OrgExtCost:int = obj["Rpt3OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt3PEDetAmt:int = obj["Rpt3PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt3POUnitCost:int = obj["Rpt3POUnitCost"]
      self.Rpt3Recognized:int = obj["Rpt3Recognized"]
      """  DEA Recognized Amount in Rpt3 Currency  """  
      self.Rpt3Remaining:int = obj["Rpt3Remaining"]
      """  DEA Remaining Amount in Rpt3 Currency  """  
      self.Rpt3ScrExtCost:int = obj["Rpt3ScrExtCost"]
      self.Rpt3ScrInvoiceBal:int = obj["Rpt3ScrInvoiceBal"]
      self.Rpt3ScrLineDiscAmt:int = obj["Rpt3ScrLineDiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalMiscChrg:int = obj["Rpt3ScrTotalMiscChrg"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.Rpt3ScrUnitCost:int = obj["Rpt3ScrUnitCost"]
      self.Rpt3TotDistribAmt:int = obj["Rpt3TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 3.  """  
      self.Rpt3Unrecognized:int = obj["Rpt3Unrecognized"]
      """  DEA Unrecognized Amount in Rpt3 Currency  """  
      self.Rpt3Variance:int = obj["Rpt3Variance"]
      self.ScrDocExtCost:int = obj["ScrDocExtCost"]
      self.ScrDocLineDiscAmt:int = obj["ScrDocLineDiscAmt"]
      self.ScrDocTotalMiscChrg:int = obj["ScrDocTotalMiscChrg"]
      self.ScrExtCost:int = obj["ScrExtCost"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrInvoiceRef:str = obj["ScrInvoiceRef"]
      """  Invoice ref for BOE  """  
      self.ScrLineDiscAmt:int = obj["ScrLineDiscAmt"]
      self.ScrLineType:str = obj["ScrLineType"]
      self.ScrOurQty:int = obj["ScrOurQty"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalMiscChrg:int = obj["ScrTotalMiscChrg"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.ScrUnitCost:int = obj["ScrUnitCost"]
      self.ScrVendorQty:int = obj["ScrVendorQty"]
      self.TotDistribAmt:int = obj["TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Base Currency  """  
      self.Unrecognized:int = obj["Unrecognized"]
      """  DEA Unrecognized Amount  """  
      self.UpdateExtCreateLineGL:bool = obj["UpdateExtCreateLineGL"]
      """  Indicates if line GL should be automatically created when running UpdateExt.  """  
      self.UsePurchaseCode:bool = obj["UsePurchaseCode"]
      self.Variance:int = obj["Variance"]
      self.UpdateExtOverrideRcpts:bool = obj["UpdateExtOverrideRcpts"]
      """  Indicates that  if LineType=R, then override standard UpdateExt logic to create APInvDtl data directly, as is done in the UI.  Before/AfterGetNew, Before/AfterUpdate will not run.  """  
      self.RelatedToRcvDtlSysRowID:str = obj["RelatedToRcvDtlSysRowID"]
      """  SysRowID of the related RcvDtl row for receipt line,  LineType = R  """  
      self.EnableAttributeSetBtn:bool = obj["EnableAttributeSetBtn"]
      self.DEPayStatCodeDescr:str = obj["DEPayStatCodeDescr"]
      """  DEPayStatCode Description  """  
      self.DEDenominationDescr:str = obj["DEDenominationDescr"]
      """  DEDenomination Description  """  
      self.PORevisionNum:str = obj["PORevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.RcptRevisionNum:str = obj["RcptRevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.AssetNumAssetDescription:str = obj["AssetNumAssetDescription"]
      self.Code1099Description:str = obj["Code1099Description"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContainerIDContainerDescription:str = obj["ContainerIDContainerDescription"]
      self.FormTypeDescription:str = obj["FormTypeDescription"]
      self.GLPurchPurchDesc:str = obj["GLPurchPurchDesc"]
      self.InvoiceNumDebitMemo:bool = obj["InvoiceNumDebitMemo"]
      self.InvoiceNumPosted:bool = obj["InvoiceNumPosted"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.InvoiceNumCurrencyCode:str = obj["InvoiceNumCurrencyCode"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.POLineLineDesc:str = obj["POLineLineDesc"]
      self.POLineVenPartNum:str = obj["POLineVenPartNum"]
      self.POLinePartNum:str = obj["POLinePartNum"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.vrPONumShipToConName:str = obj["vrPONumShipToConName"]
      self.vrPONumShipName:str = obj["vrPONumShipName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvExpRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number to which this record is related.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine to which this record is related.  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  An internally assigned number used as part of the unique key to the record.  """  
      self.ExpAmt:int = obj["ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.RefType:str = obj["RefType"]
      """  Link to the related GLRefTyp.RefType. Not displayed.  """  
      self.RefCode:str = obj["RefCode"]
      """  Link to the related Code in GLRefCod.RefCode  """  
      self.RefCodeDesc:str = obj["RefCodeDesc"]
      """  THIS SHOULD BE DELETED WITH SONOMA! GL Reference Code description.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvExpSeq:int = obj["GlbInvExpSeq"]
      """  Global Invoice Expense identifier.  Used in Consolidated Purchasing.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.ExtRefType:str = obj["ExtRefType"]
      """  Multi-Company G/L Reference Type from the external company.  This is used by the Multi-Company Journal.  """  
      self.ExtRefCode:str = obj["ExtRefCode"]
      """  Multi-Company G/L Reference Code from the external company.  This is used by the Multi-Company Journal.  """  
      self.MultiCompany:bool = obj["MultiCompany"]
      """  Flag to indicate that a separate journal entry will be created at the target company for the Multi-Company G/L Account entered in this journal line.  """  
      self.Rpt1ExpAmt:int = obj["Rpt1ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt2ExpAmt:int = obj["Rpt2ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt3ExpAmt:int = obj["Rpt3ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.DocExpAmt:int = obj["DocExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.NonDedTax:bool = obj["NonDedTax"]
      """  Non-Deductible Tax  """  
      self.NonDedTaxRelatedToSchema:str = obj["NonDedTaxRelatedToSchema"]
      """  Non-Deductible Tax Related table schema  """  
      self.NonDedTaxRelatedToTable:str = obj["NonDedTaxRelatedToTable"]
      """  Non-Deductible Tax Related table.  """  
      self.NonDedTaxRelatedToSysRowID:str = obj["NonDedTaxRelatedToSysRowID"]
      """  Non-Deductible Tax SysRowID  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.AllowUpdate:bool = obj["AllowUpdate"]
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  """  
      self.COACode:str = obj["COACode"]
      """  CoaCode for GLAccount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrExpAmt:int = obj["DocScrExpAmt"]
      self.EnableExtRefCode:bool = obj["EnableExtRefCode"]
      self.EnableMultiCompany:bool = obj["EnableMultiCompany"]
      """  Flag to indicate if the MultiCompany check box needs to be enabled.  """  
      self.EnableRefCode:bool = obj["EnableRefCode"]
      self.ExpDispGLAcct:str = obj["ExpDispGLAcct"]
      self.ExpGlbDispGLAcct:str = obj["ExpGlbDispGLAcct"]
      self.ExtCOACode:str = obj["ExtCOACode"]
      """  CoaCode for ExtGLAccount  """  
      self.ExtGLAccount:str = obj["ExtGLAccount"]
      """  External GL Account  """  
      self.ExtGLAccountDesc:str = obj["ExtGLAccountDesc"]
      """  External GL Account Description  """  
      self.ExtRefAcctChart:str = obj["ExtRefAcctChart"]
      self.ExtRefAcctDept:str = obj["ExtRefAcctDept"]
      self.ExtRefAcctDiv:str = obj["ExtRefAcctDiv"]
      self.ExtRefCodeList:str = obj["ExtRefCodeList"]
      self.ExtRefCodeStatus:str = obj["ExtRefCodeStatus"]
      self.ExtRefDisplayAccount:str = obj["ExtRefDisplayAccount"]
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  """  
      self.GLAccountDesc:str = obj["GLAccountDesc"]
      """  GLAccount description  """  
      self.GroupID:str = obj["GroupID"]
      self.Posted:bool = obj["Posted"]
      self.RefCodeList:str = obj["RefCodeList"]
      self.RefCodeStatus:str = obj["RefCodeStatus"]
      """  Indicates if Reference Code is (M)andatory, (O)ptional, (E)xcluded or Blank.  Enable Reference Code if "M" or "O".  """  
      self.Rpt1ScrExpAmt:int = obj["Rpt1ScrExpAmt"]
      self.Rpt2ScrExpAmt:int = obj["Rpt2ScrExpAmt"]
      self.Rpt3ScrExpAmt:int = obj["Rpt3ScrExpAmt"]
      self.ScrExpAmt:int = obj["ScrExpAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.ExtRefCodeRefCodeDesc:str = obj["ExtRefCodeRefCodeDesc"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvExpTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  InvExpSeq of APInvExp table  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum of APInvExp table  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenPayable:bool = obj["OpenPayable"]
      """  Indicates if this is an "open" Payable.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """   Indicates the type of document. Yes = Debit Memo,  No= Invoice. This value can't be changed after the record has been created.
Debit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign, but are entered as a positive.
The system uses this field to test for Debit Memos,  indicated by "DM" following the invoice number.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total sales tax amount for this invoice. Totals the TaxAmt from the APInvTax records of this invoice.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earliest unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the GroupID of the "current" group that the user is working with.  It is used as a selection criteria during the posting process.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the open payables file.    Only invoices that have been Posted (true) will be included as part of the open payables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related APInvGrp. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the APInvGrp or when the invoice date is changed.  It is overridable.  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  This field represents the invoice # that this debit memo relates to. It can be left blank. If entered it must be a valid APInvHed record where the InvcHead.DebitMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the debit memos next to their corresponding invoice. Therefore, this field will always have a value.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount.(Vendors Currency) This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  This is NOT the same thing as putting an invoice on PaymentHold.  """  
      self.PayHold:bool = obj["PayHold"]
      """  Indicates if this invoice should be held  from having any further payments made against it.  If "yes" then invoice  can't be selected in check processing.  """  
      self.Description:str = obj["Description"]
      """  A short description that can be used to explain what this invoice is for. Ex: Rent, Auto Lease Payment.  This description is defaulted into the APTran.Description field when payments are made against the invoice.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.CPay:bool = obj["CPay"]
      """  Flag to indicate if the invoice should be paid at the Central Payment Parent Company.  Used in Centralized Payment process.  """  
      self.CPayInvoiceBal:int = obj["CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company. Carries a true sign. (Credit memos are negative).  """  
      self.CPayDocInvoiceBal:int = obj["CPayDocInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Vendors currency).  Carries a true sign. (Credit memos are negative).  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal Year Suffix is duplicated from the related APInvGrp. This is also refreshed if the ApplyDate is changed.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be set to Yes if the AP Invoice was created by the Correction (Reversing) logic.  """  
      self.PrePayment:bool = obj["PrePayment"]
      """  Indicates that this is pre-payment invoice.  """  
      self.APLOCID:str = obj["APLOCID"]
      """  Letter of Credit ID.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document Type ID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice Type  """  
      self.PLInvoiceReference:str = obj["PLInvoiceReference"]
      """  PLInvoiceReference  """  
      self.ScrInvoiceVendorAmt:int = obj["ScrInvoiceVendorAmt"]
      self.ScrDocInvoiceVendorAmt:int = obj["ScrDocInvoiceVendorAmt"]
      self.ScrInvoiceAmt:int = obj["ScrInvoiceAmt"]
      self.ScrDocInvoiceAmt:int = obj["ScrDocInvoiceAmt"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrDocInvoiceBal:int = obj["ScrDocInvoiceBal"]
      self.ScrUnpostedBal:int = obj["ScrUnpostedBal"]
      self.ScrDocUnpostedBal:int = obj["ScrDocUnpostedBal"]
      self.InvoiceVariance:int = obj["InvoiceVariance"]
      self.DocInvoiceVariance:int = obj["DocInvoiceVariance"]
      self.CPayOpenPayable:bool = obj["CPayOpenPayable"]
      """  Indicates if the CPay invoice is still an open payable at Corporate  """  
      self.VendorNumName:str = obj["VendorNumName"]
      """  Supplier Name  """  
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      """  Supplier ID  """  
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.Rpt1ScrInvoiceAmt:int = obj["Rpt1ScrInvoiceAmt"]
      self.Rpt2ScrInvoiceAmt:int = obj["Rpt2ScrInvoiceAmt"]
      self.Rpt3ScrInvoiceAmt:int = obj["Rpt3ScrInvoiceAmt"]
      self.Rpt1InvoiceVariance:int = obj["Rpt1InvoiceVariance"]
      self.Rpt2InvoiceVariance:int = obj["Rpt2InvoiceVariance"]
      self.Rpt3InvoiceVariance:int = obj["Rpt3InvoiceVariance"]
      self.Rpt1ScrInvoiceVendorAmt:int = obj["Rpt1ScrInvoiceVendorAmt"]
      self.Rpt2ScrInvoiceVendorAmt:int = obj["Rpt2ScrInvoiceVendorAmt"]
      self.Rpt3ScrInvoiceVendorAmt:int = obj["Rpt3ScrInvoiceVendorAmt"]
      self.IsLcked:bool = obj["IsLcked"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedMscTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.MscNum:int = obj["MscNum"]
      """  MscNum  """  
      self.APInvMscSysRowID:str = obj["APInvMscSysRowID"]
      """  APInvMscSysRowID  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  ECAcquisitionSeq  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  TaxableAmt  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  DocTaxableAmt  """  
      self.Percent:int = obj["Percent"]
      """  Percent  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  TaxAmt  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  DocTaxAmt  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  ReportableAmt  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  DocReportableAmt  """  
      self.Manual:bool = obj["Manual"]
      """  Manual  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  SysCalcTaxableAmt  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  SysCalcDocTaxableAmt  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  SysCalcReportableAmt  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  SysCalcDocReportableAmt  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  GlbCompany  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  GlbVendorNum  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  GlbInvoiceNum  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  GlbTaxCode  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  GlbECAcquisitionSeq  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  ReverseCharge  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Rpt1ReportableAmt  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Rpt2ReportableAmt  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Rpt3ReportableAmt  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Rpt1TaxableAmt  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Rpt2TaxableAmt  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Rpt3TaxableAmt  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Rpt1TaxAmt  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Rpt2TaxAmt  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Rpt3TaxAmt  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  Rpt1SysCalcTaxableAmt  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  Rpt1SysCalcReportableAmt  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  Rpt2SysCalcTaxableAmt  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  Rpt2SysCalcReportableAmt  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  Rpt3SysCalcTaxableAmt  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  Rpt3SysCalcReportableAmt  """  
      self.CollectionType:int = obj["CollectionType"]
      """  CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Timing  """  
      self.ExemptType:int = obj["ExemptType"]
      """  ExemptType  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  ExemptPercent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  ResolutionNum  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  ResolutionDate  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  TaxRateDate  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  DefTaxableAmt  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  DocDefTaxableAmt  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Rpt1DefTaxableAmt  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Rpt2DefTaxableAmt  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Rpt3DefTaxableAmt  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  DefTaxAmt  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  DocDefTaxAmt  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Rpt1DefTaxAmt  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Rpt2DefTaxAmt  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Rpt3DefTaxAmt  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  ManAdd  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  DedTaxAmt  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  DocDedTaxAmt  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Rpt1DedTaxAmt  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Rpt2DedTaxAmt  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Rpt3DedTaxAmt  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  FixedAmount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  DocFixedAmount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Rpt1FixedAmount  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Rpt2FixedAmount  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Rpt3FixedAmount  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  GlbRateCode  """  
      self.TextCode:str = obj["TextCode"]
      """  TextCode  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  TaxAmtVar  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  DocTaxAmtVar  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Rpt1TaxAmtVar  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Rpt2TaxAmtVar  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Rpt3TaxAmtVar  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  DefTaxDate  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  TaxFuture  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  STPProcessed  """  
      self.SummaryOnly:bool = obj["SummaryOnly"]
      """  SummaryOnly  """  
      self.DevInt1:int = obj["DevInt1"]
      """  DevInt1  """  
      self.DevInt2:int = obj["DevInt2"]
      """  DevInt2  """  
      self.DevDec1:int = obj["DevDec1"]
      """  DevDec1  """  
      self.DevDec2:int = obj["DevDec2"]
      """  DevDec2  """  
      self.DevDec3:int = obj["DevDec3"]
      """  DevDec3  """  
      self.DevDec4:int = obj["DevDec4"]
      """  DevDec4  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  DevLog1  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  DevLog2  """  
      self.DevChar1:str = obj["DevChar1"]
      """  DevChar1  """  
      self.DevChar2:str = obj["DevChar2"]
      """  DevChar2  """  
      self.DevDate1:str = obj["DevDate1"]
      """  DevDate1  """  
      self.DevDate2:str = obj["DevDate2"]
      """  DevDate2  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.GroupID:str = obj["GroupID"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.DisableManual:bool = obj["DisableManual"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenPayable:bool = obj["OpenPayable"]
      """  Indicates if this is an "open" Payable.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """   Indicates the type of document. Yes = Debit Memo,  No= Invoice. This value can't be changed after the record has been created.
Debit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign, but are entered as a positive.
The system uses this field to test for Debit Memos,  indicated by "DM" following the invoice number.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the PurTerms master file.  Defaulted from Vendor.TermsCode.  This is MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total sales tax amount for this invoice. Totals the TaxAmt from the APInvTax records of this invoice.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total sales tax amount for this invoice. Totals the DocTaxAmt from the APInvTax records of this invoice.  """  
      self.DiscountDate:str = obj["DiscountDate"]
      """  Prompt payment discount due date. The date according to the terms when you are allowed to take the prompt payment discount (if any) given by the vendor. This date is NOT directly maintainable. It is calculated using the InvoiceDate + PurTerms.DiscountDays. If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then this is not applicable and is set to ? (null value).  """  
      self.DiscountAmt:int = obj["DiscountAmt"]
      """  Discount amount that can be taken if paid by the DiscountDate.  This is calculated by the System via APInvHed write trigger. Formula ((PurTerms.DiscountPercent/100)*APInvHed.InvoiceBal on AIn.  If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then it is not applicable and is set to zero.  """  
      self.DocDiscountAmt:int = obj["DocDiscountAmt"]
      """  Discount amount(Vendors Currency) that can be taken if paid by the DiscountDate.  This is calculated by the System via APInvHed write trigger. Formula ((PurTerms.DiscountPercent/100)*APInvHed.InvoiceBal on AIn.  If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then it is not applicable and is set to zero.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earliest unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts.(Vendors Currency) Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Bad name.  Actually this indicates if the invoice was created by the  open invoice load program.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the GroupID of the "current" group that the user is working with.  It is used as a selection criteria during the posting process.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the open payables file.    Only invoices that have been Posted (true) will be included as part of the open payables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related APInvGrp. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the APInvGrp or when the invoice date is changed.  It is overridable.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  This field represents the invoice # that this debit memo relates to. It can be left blank. If entered it must be a valid APInvHed record where the InvcHead.DebitMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the debit memos next to their corresponding invoice. Therefore, this field will always have a value.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall invoice.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount.(Vendors Currency) This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceVendorAmt:int = obj["DocInvoiceVendorAmt"]
      """  A user entered verification amount.  DOCUMENT CURRENCY ONLY, a corresponding base currency field exists but is only used for external G/L interfacing.  This field is sign flipped for debit memos.  The calculated Invoice Amount (DocInvoiceAmt) must match this amount before the invoice can be posted.  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance.(Vendors currency)  Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts(Vendors currency). This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  This is NOT the same thing as putting an invoice on PaymentHold.  """  
      self.PayHold:bool = obj["PayHold"]
      """  Indicates if this invoice should be held  from having any further payments made against it.  If "yes" then invoice  can't be selected in check processing.  """  
      self.Description:str = obj["Description"]
      """  A short description that can be used to explain what this invoice is for. Ex: Rent, Auto Lease Payment.  This description is defaulted into the APTran.Description field when payments are made against the invoice.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.REFPONum:int = obj["REFPONum"]
      """  Reference PO number(optional when CM is present). Used to identify the PO that this Invoice is for.  If the Reference PO has a lock exchange rate then that is the rate that will be used on this AP  invoice,  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  The Tax Region for this invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.UpdateTax:bool = obj["UpdateTax"]
      """  Controls the running of the Tax calculation logic which is found in the InvcHead write trigger.  """  
      self.InvoiceVendorAmt:int = obj["InvoiceVendorAmt"]
      """  For use by external G/L interfacing.  This field is sign flipped for debit memos.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identification of the Invoice.  """  
      self.FixedAmt:bool = obj["FixedAmt"]
      """  Allows user to control discount amount manually or automatically  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.CPay:bool = obj["CPay"]
      """  Flag to indicate if the invoice should be paid at the Central Payment Parent Company.  Used in Centralized Payment process.  """  
      self.CPayLinked:bool = obj["CPayLinked"]
      """  Flag to indicate if the invoice is linked from the source company invoice flagged for Central Payment.  """  
      self.CPayLegalNumber:str = obj["CPayLegalNumber"]
      """  This is the original Legal Number from the source invoice.  This is used in the Centralized Payment process.  """  
      self.CPayCheckNum:int = obj["CPayCheckNum"]
      """  Reference Check number of the latest payment made by the Central Payment Parent Company for this invoice.  """  
      self.CPayCheckDate:str = obj["CPayCheckDate"]
      """  Reference Check Date of the latest payment made by the Central Payment Parent Company for this invoice.  """  
      self.CPayInvoiceBal:int = obj["CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company. Carries a true sign. (Credit memos are negative).  """  
      self.CPayDocInvoiceBal:int = obj["CPayDocInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Vendors currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.GLControlType:str = obj["GLControlType"]
      """  The GL Control Type this invoice is assigned to.  This combined with GLControlCode links the invoice to a specific GLControl record which supplies the G/L account of the appropriate payables. Defaults to value 'APAcct'.  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  The GL Control Code this invoice is assigned to.  This combined with GLControlType links the invoice to a specific GLControl record which supplies the G/L account of the appropriate payables. Defaults to EntityGLC type of 'APAcct' assigned to the supplier.  """  
      self.Rpt1DiscountAmt:int = obj["Rpt1DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DiscountAmt:int = obj["Rpt2DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DiscountAmt:int = obj["Rpt3DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceVendorAmt:int = obj["Rpt1InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceVendorAmt:int = obj["Rpt2InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceVendorAmt:int = obj["Rpt3InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.Rpt1CPayInvoiceBal:int = obj["Rpt1CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rpt2CPayInvoiceBal:int = obj["Rpt2CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rpt3CPayInvoiceBal:int = obj["Rpt3CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.AllowOverrideLI:bool = obj["AllowOverrideLI"]
      """  Identifies whether or not the amounts on a logged invoice can be overridden during AP Invoice Entry.  If set to false, the AP Invoice and Tax values must match the values on the Logged Invoice.  If set to true, the logged invoice is voided.  """  
      self.MatchedFromLI:bool = obj["MatchedFromLI"]
      """  Identifies if an invoice was matched from a logged invoice.  If yes, the invoice was matched.  If no, the invoice was not matched.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal Year Suffix is duplicated from the related APInvGrp. This is also refreshed if the ApplyDate is changed.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the line before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be set to Yes if the AP Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden and Finland Localization Field - Banking Reference  """  
      self.SEPayCode:str = obj["SEPayCode"]
      """  Sweden and Finland Localization Field - Payment Code  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.PrePayment:bool = obj["PrePayment"]
      """  Indicates that this is pre-payment invoice.  """  
      self.APLOCID:str = obj["APLOCID"]
      """  Letter of Credit ID.  """  
      self.Plant:str = obj["Plant"]
      """  Site ID (Used Primary for Thailand Localization)  """  
      self.GUIImportTaxBasis:int = obj["GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis  """  
      self.DocGUIImportTaxBasis:int = obj["DocGUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in document currrency  """  
      self.Rpt1GUIImportTaxBasis:int = obj["Rpt1GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt1 currency  """  
      self.Rpt2GUIImportTaxBasis:int = obj["Rpt2GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt2 currency  """  
      self.Rpt3GUIImportTaxBasis:int = obj["Rpt3GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.Linked:bool = obj["Linked"]
      """  Linked flag  """  
      self.ClaimRef:str = obj["ClaimRef"]
      """  The claim reference from the expense group that generated the invoice.  """  
      self.EmpID:str = obj["EmpID"]
      """  The employee from the group of expenses that created the invoice.  """  
      self.InBankFile:bool = obj["InBankFile"]
      """  Indicates that Invoice has been selected for payment in a bankfile  """  
      self.CNConfirmDate:str = obj["CNConfirmDate"]
      """  Credit Note Confirmation Date  """  
      self.BankID:str = obj["BankID"]
      """  Unique ID of the vendor's bank.  """  
      self.SelfLegalNumber:str = obj["SelfLegalNumber"]
      """  Legal Number for the self assessment.  """  
      self.SelfTranDocTypeID:str = obj["SelfTranDocTypeID"]
      """  Transaction Document Type for the self assessment.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.CardCode:str = obj["CardCode"]
      """   Denmark Localization
Card (payment) code  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BankGiroAcctNbr:str = obj["BankGiroAcctNbr"]
      """   Denmark Localization
Account Number  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.SupAgentName:str = obj["SupAgentName"]
      """  Supplier Agent Name  """  
      self.SupAgentTaxRegNo:str = obj["SupAgentTaxRegNo"]
      """  Supplier Agent Tax Region Number  """  
      self.NonDeductCode:str = obj["NonDeductCode"]
      """  Non Deductable Code  """  
      self.AssetTypeCode:str = obj["AssetTypeCode"]
      """  Asset Type Code  """  
      self.Cash:bool = obj["Cash"]
      """  Cash  """  
      self.CreditCard:bool = obj["CreditCard"]
      """  Credit Card  """  
      self.Normal:bool = obj["Normal"]
      """  Normal  """  
      self.CardID:str = obj["CardID"]
      """  Card ID  """  
      self.CardHolderTaxID:str = obj["CardHolderTaxID"]
      """  Card Holder Tax ID  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  Card Member Name  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.NonDeductAmt:int = obj["NonDeductAmt"]
      """  Non Deductable Amount  """  
      self.NonDeductDocAmt:int = obj["NonDeductDocAmt"]
      """  Non Deductable Doc Amount  """  
      self.NonDeductRpt1Amt:int = obj["NonDeductRpt1Amt"]
      """  Non Deductable Rpt1 Amount  """  
      self.NonDeductRpt2Amt:int = obj["NonDeductRpt2Amt"]
      """  Non Deductable Rpt2 Amount  """  
      self.NonDeductRpt3Amt:int = obj["NonDeductRpt3Amt"]
      """  Non Deductable Rpt3 Amount  """  
      self.NonDeductVATAmt:int = obj["NonDeductVATAmt"]
      """  Non Deductable VAT Amount  """  
      self.NonDeductVATDocAmt:int = obj["NonDeductVATDocAmt"]
      """  Non Deductable VAT Doc Amount  """  
      self.NonDeductVATRpt1Amt:int = obj["NonDeductVATRpt1Amt"]
      """  Non Deductable VAT Rpt1 Amount  """  
      self.NonDeductVATRpt2Amt:int = obj["NonDeductVATRpt2Amt"]
      """  Non Deductable VAT Rpt2 Amount  """  
      self.NonDeductVATRpt3Amt:int = obj["NonDeductVATRpt3Amt"]
      """  Non Deductable VAT Rpt3 Amount  """  
      self.ImportNum:str = obj["ImportNum"]
      """  Stores the number of the import document.  """  
      self.ImportedFrom:str = obj["ImportedFrom"]
      """  Country of Import  """  
      self.ImportedDate:str = obj["ImportedDate"]
      """  Date of import.  """  
      self.AdvTaxInv:bool = obj["AdvTaxInv"]
      """   Indicates that this is Advanced Tax invoice received from
supplier  """  
      self.InPrice:bool = obj["InPrice"]
      """   Indicates that the tax is included in the unit price
for this AP Invoice  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document Type ID  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  In case of Tax Inclusive Pricing if system-calculated Header related taxes are changed/deleted/added  by the user - this field is set to true by the system.  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Assigned as "I" when Recurring Invoice has Inactive status.  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.PaymentNumber:str = obj["PaymentNumber"]
      """  PaymentNumber  """  
      self.CycleCode:str = obj["CycleCode"]
      """  CycleCode  """  
      self.Duration:int = obj["Duration"]
      """  Duration  """  
      self.EndDate:str = obj["EndDate"]
      """  EndDate  """  
      self.MaxValueAmt:int = obj["MaxValueAmt"]
      """  MaxValueAmt  """  
      self.DocMaxValueAmt:int = obj["DocMaxValueAmt"]
      """  DocMaxValueAmt  """  
      self.Rpt1MaxValueAmt:int = obj["Rpt1MaxValueAmt"]
      """  Rpt1MaxValueAmt  """  
      self.Rpt2MaxValueAmt:int = obj["Rpt2MaxValueAmt"]
      """  Rpt2MaxValueAmt  """  
      self.Rpt3MaxValueAmt:int = obj["Rpt3MaxValueAmt"]
      """  Rpt3MaxValueAmt  """  
      self.HoldInvoice:bool = obj["HoldInvoice"]
      """  HoldInvoice  """  
      self.CopyLatestInvoice:bool = obj["CopyLatestInvoice"]
      """  CopyLatestInvoice  """  
      self.OverrideEndDate:bool = obj["OverrideEndDate"]
      """  OverrideEndDate  """  
      self.CycleInactive:bool = obj["CycleInactive"]
      """  CycleInactive  """  
      self.RecurSource:bool = obj["RecurSource"]
      """  RecurSource  """  
      self.InstanceNum:int = obj["InstanceNum"]
      """  InstanceNum  """  
      self.RecurBalance:int = obj["RecurBalance"]
      """  RecurBalance  """  
      self.DocRecurBalance:int = obj["DocRecurBalance"]
      """  DocRecurBalance  """  
      self.Rpt1RecurBalance:int = obj["Rpt1RecurBalance"]
      """  Rpt1RecurBalance  """  
      self.Rpt2RecurBalance:int = obj["Rpt2RecurBalance"]
      """  Rpt2RecurBalance  """  
      self.Rpt3RecurBalance:int = obj["Rpt3RecurBalance"]
      """  Rpt3RecurBalance  """  
      self.LastDate:str = obj["LastDate"]
      """  LastDate  """  
      self.IsRecurring:bool = obj["IsRecurring"]
      """  IsRecurring  """  
      self.InvoiceNumList:str = obj["InvoiceNumList"]
      """  InvoiceNumList  """  
      self.IsMaxValue:bool = obj["IsMaxValue"]
      """  IsMaxValue  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CHISRCodeLine:str = obj["CHISRCodeLine"]
      """  CHISRCodeLine  """  
      self.DMReason:str = obj["DMReason"]
      """  DMReason  """  
      self.UrgentPayment:bool = obj["UrgentPayment"]
      """  UrgentPayment  """  
      self.AGDocPageNum:str = obj["AGDocPageNum"]
      """  AGDocPageNum  """  
      self.AGCAICAEMark:str = obj["AGCAICAEMark"]
      """  AGCAICAEMark  """  
      self.AGCAICAENum:str = obj["AGCAICAENum"]
      """  AGCAICAENum  """  
      self.AGCAICAEExpirationDate:str = obj["AGCAICAEExpirationDate"]
      """  AGCAICAEExpirationDate  """  
      self.AGAvTaxCreditFlag:bool = obj["AGAvTaxCreditFlag"]
      """  AGAvTaxCreditFlag  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGCustomsClearanceNum:str = obj["AGCustomsClearanceNum"]
      """  AGCustomsClearanceNum  """  
      self.AGCustomsCode:str = obj["AGCustomsCode"]
      """  AGCustomsCode  """  
      self.AGDestinationCode:str = obj["AGDestinationCode"]
      """  AGDestinationCode  """  
      self.HeadNum:int = obj["HeadNum"]
      """  Header Number  """  
      self.TranType:str = obj["TranType"]
      """  TranType  """  
      self.TaxSvcID:str = obj["TaxSvcID"]
      """  'Type + - (OrderNum, InvoiceNum,  QuoteNum or TCDocID)'. Depending on the type, where Type is O=order, Q = quote, I = invoice, T=tax service doc ID (this is used to create an TaxSvcHead for tax reoconciliation when Tax Connect has a record with no corresponding Epicor record). Example: O-1234 is order type and order number 1234; Q-1234 is quote type and quote number 1234, etc.  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.APChkGrpID:str = obj["APChkGrpID"]
      """  AP Checking Group ID  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice Type  """  
      self.PEComputationalCost:str = obj["PEComputationalCost"]
      """  Indicates a computational cost for the invoice  """  
      self.ReferencedByBOE:str = obj["ReferencedByBOE"]
      """  Referenced By BOE  """  
      self.PEDUARefNum:str = obj["PEDUARefNum"]
      """  DUA Reference Number used on Peru Localiation  """  
      self.CustomsNumber:str = obj["CustomsNumber"]
      """  CustomsNumber  """  
      self.ReceivedDate:str = obj["ReceivedDate"]
      """  ReceivedDate  """  
      self.CustOverride:int = obj["CustOverride"]
      """  CustOverride  """  
      self.PrePaymentNum:str = obj["PrePaymentNum"]
      """  Invoice Number of Invoice Pre-Payment which should be automatically applied to this one during posting process.  """  
      self.PrePaymentAmt:int = obj["PrePaymentAmt"]
      """  Pre-Payment amount in Base Currency.  """  
      self.DocPrePaymentAmt:int = obj["DocPrePaymentAmt"]
      """  Pre-Payment amount in Document Currency.  """  
      self.Rpt1PrePaymentAmt:int = obj["Rpt1PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.Rpt2PrePaymentAmt:int = obj["Rpt2PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.Rpt3PrePaymentAmt:int = obj["Rpt3PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.PEAPPayNum:int = obj["PEAPPayNum"]
      """  CSF Peru - AP Payment Number  """  
      self.PEDetTaxAmt:int = obj["PEDetTaxAmt"]
      """  SCF Peru - Detractions Tax Amount  """  
      self.PEDetTaxCurrencyCode:str = obj["PEDetTaxCurrencyCode"]
      """  Peru Detraction Tax Currency Code  """  
      self.PESUNATDepAmt:int = obj["PESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.DocPESUNATDepAmt:int = obj["DocPESUNATDepAmt"]
      """  Peru Document SUNAT Deposit Amount  """  
      self.PESUNATDepDate:str = obj["PESUNATDepDate"]
      """  CSF Peru - SUNAT Deposit Date  """  
      self.PESUNATDepNum:str = obj["PESUNATDepNum"]
      """  CSF Peru -  SUNAT Deposit Number  """  
      self.PESUNATNum:str = obj["PESUNATNum"]
      """  SUNAT Reference Number. Once a payment is made, the SUNAT returns a reference number used as the receipt number for the payment.  """  
      self.DocPEDetTaxAmt:int = obj["DocPEDetTaxAmt"]
      """  Document Tax Amount used in Peru detractions  """  
      self.MXFiscalFolio:str = obj["MXFiscalFolio"]
      """  MXFiscalFolio  """  
      self.PEBOEIsMultiGen:bool = obj["PEBOEIsMultiGen"]
      """  PEBOEIsMultiGen  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.PrePayHeadNum:int = obj["PrePayHeadNum"]
      """  PrePayHeadNum  """  
      self.MXRetentionCode:str = obj["MXRetentionCode"]
      """  MXRetentionCode  """  
      self.PERefDocID:str = obj["PERefDocID"]
      """  PE Reference Document ID  """  
      self.PEReasonCode:str = obj["PEReasonCode"]
      """  PE Reason Code  """  
      self.PEReasonDesc:str = obj["PEReasonDesc"]
      """  PE Reason Description  """  
      self.MYImportNum:str = obj["MYImportNum"]
      """  Malaysia Import Declaration Number  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  TW GUI Code Seller  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  TW GUI Code Buyer  """  
      self.MXTARCode:str = obj["MXTARCode"]
      """  MXTARCode  """  
      self.GRNIClearing:bool = obj["GRNIClearing"]
      """  Flag that indicates if the invoice is a GRNI document.  """  
      self.PEFiscalCreditOperStatus:int = obj["PEFiscalCreditOperStatus"]
      """  CSF Peru - Fiscal Credit Operation Status  """  
      self.PEInternatTaxAgr:str = obj["PEInternatTaxAgr"]
      """  CSF Peru - International Tax agreement  """  
      self.PERentType:str = obj["PERentType"]
      """  CSF Peru - Rent type  """  
      self.PEPurchaseType:str = obj["PEPurchaseType"]
      """  CSF Peru - Purchase  type  """  
      self.THRefInvoiceNum:str = obj["THRefInvoiceNum"]
      """  TH Reference Invoice Num  """  
      self.THRefVendorNum:int = obj["THRefVendorNum"]
      """  TH Reference Vendor Num  """  
      self.JPSummarizationDate:str = obj["JPSummarizationDate"]
      """  Day when a company sums up accounts payable for supplier  """  
      self.JPBillingDate:str = obj["JPBillingDate"]
      """  Date of a Payment Statement  """  
      self.JPBillingNumber:str = obj["JPBillingNumber"]
      """  Legal Number of Payment Statement  """  
      self.SelfInvoice:bool = obj["SelfInvoice"]
      """  SelfInvoice  """  
      self.Printed:bool = obj["Printed"]
      """  Printed  """  
      self.PurPoint:str = obj["PurPoint"]
      """  PurPoint  """  
      self.PLInvoiceReference:str = obj["PLInvoiceReference"]
      """  PLInvoiceReference  """  
      self.INPortCode:str = obj["INPortCode"]
      """  INPortCode  """  
      self.RefCancelledby:str = obj["RefCancelledby"]
      """  Indicates which invoice number has cancelled this invoice.  """  
      self.CancellationInv:bool = obj["CancellationInv"]
      """  Indicates if this invoice is a cancellation invoice.  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.WithholdAcctToInterim:bool = obj["WithholdAcctToInterim"]
      """  WithholdAcctToInterim  """  
      self.APTaxRoundOption:int = obj["APTaxRoundOption"]
      """  APTaxRoundOption  """  
      self.SourcePlant:str = obj["SourcePlant"]
      """  Source Plant used for multi site GL  """  
      self.ExtSysType:str = obj["ExtSysType"]
      """  Used for integrations - system type for URL specified in ExtSysURL - B = BisTrack / L = LumberTrack / F = FiberTrack / blank = Building Supply  """  
      self.ExtSysURL:str = obj["ExtSysURL"]
      """  URL for drill back to an integrated external system  """  
      self.CHQRIBAN:str = obj["CHQRIBAN"]
      """  CHQRIBAN  """  
      self.CHQRReference:str = obj["CHQRReference"]
      """  CHQRReference  """  
      self.EDIInvoice:bool = obj["EDIInvoice"]
      """  Set to True for any invoice that is created via EDI  """  
      self.AllowMultInvcReceipts:bool = obj["AllowMultInvcReceipts"]
      """  This external field will hold Company.AllowMultInvcReceipts flag.  """  
      self.ApplyAPPrePayAuto:bool = obj["ApplyAPPrePayAuto"]
      """  Apply AP Pre Payment Automatically.  """  
      self.BankName:str = obj["BankName"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  The base currency symbol  """  
      self.BillAddressList:str = obj["BillAddressList"]
      """  The bill address in list format  """  
      self.CanChangeTaxLiab:bool = obj["CanChangeTaxLiab"]
      self.COIFRSCalculation:bool = obj["COIFRSCalculation"]
      """  IFRS Calculation. If the checkbox is not checked then all the elements below are disabled. If the checkbox is checked, then some elements below become enabled showing default values so that the NPV can be calculated  """  
      self.COIFRSEnabled:bool = obj["COIFRSEnabled"]
      """  If true then Colombia IFRS Net Present Value calculation is enabled  """  
      self.COIFRSFinancialCharge:int = obj["COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.COIFRSInterestRate:int = obj["COIFRSInterestRate"]
      self.COIFRSNumberOfPeriods:int = obj["COIFRSNumberOfPeriods"]
      """  Number of Periods for payment  """  
      self.COIFRSPresentValue:int = obj["COIFRSPresentValue"]
      """  Present Value  """  
      self.CPayIMReceived:bool = obj["CPayIMReceived"]
      """  Flag to indicate if the CPay invoice has been received/trasferred to the corporate.  """  
      self.CPayOpenPayable:bool = obj["CPayOpenPayable"]
      """  Indicates if the CPay invoice is still an open payable at Corporate  """  
      self.CumulativeBalance:int = obj["CumulativeBalance"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrInstanceNum:int = obj["CurrInstanceNum"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  The document currency symbol  """  
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """   The flag to indicate if Invoice Header Apply Date is supposed to be Read Only
(There are any detail/misc lines and not DMR Debit Memo invoice)  """  
      self.DocCOIFRSFinancialCharge:int = obj["DocCOIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.DocCOIFRSPresentValue:int = obj["DocCOIFRSPresentValue"]
      """  Present Value  """  
      self.DocCumulativeBalance:int = obj["DocCumulativeBalance"]
      self.DocInvoiceVariance:int = obj["DocInvoiceVariance"]
      """  The doc invoice variance amount  """  
      self.DocMiscChrgNonDeducTax:int = obj["DocMiscChrgNonDeducTax"]
      self.DocMiscChrgVariance:int = obj["DocMiscChrgVariance"]
      self.DocScrHdrExpTotal:int = obj["DocScrHdrExpTotal"]
      self.DocSourceRecurBalance:int = obj["DocSourceRecurBalance"]
      self.DspGuiImportTaxBasis:int = obj["DspGuiImportTaxBasis"]
      """   Taiwan Localization           
Display Field for Gui Import Tax Basis  """  
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      self.EnableCPay:bool = obj["EnableCPay"]
      """  Indicates when to enable the CPay field.  """  
      self.EnableDueDate:bool = obj["EnableDueDate"]
      self.EnableExchangeRate:bool = obj["EnableExchangeRate"]
      self.EnableLockRate:bool = obj["EnableLockRate"]
      self.EnableTaxExRate:bool = obj["EnableTaxExRate"]
      self.EnableTaxLock:bool = obj["EnableTaxLock"]
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Enable setting of Transaction Document Type  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      self.ExchangeRateDate:str = obj["ExchangeRateDate"]
      """  Indicates which date to be used to calculate the exchange rate, I for Invoice Date, A for Apply Date.  """  
      self.GuiTaxBasisFlag:bool = obj["GuiTaxBasisFlag"]
      """   Taiwan Localization           
The flag to indicate if GUITaxBasis prompt is available  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      self.IBANCode:str = obj["IBANCode"]
      """  IBAN Code  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  for Bill of Exchange  """  
      self.InvoiceVariance:int = obj["InvoiceVariance"]
      """  The invoice variance amount  """  
      self.IsLatestRecurrence:bool = obj["IsLatestRecurrence"]
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.IsOnlyMiscRecords:bool = obj["IsOnlyMiscRecords"]
      """  Is Only Misc lines exits  """  
      self.LACTaxCalcEnabled:bool = obj["LACTaxCalcEnabled"]
      """  LAC Tax Calculation Enabled  """  
      self.LatestInvoice:int = obj["LatestInvoice"]
      self.LatestInvString:str = obj["LatestInvString"]
      self.LegalNumberMessage:str = obj["LegalNumberMessage"]
      self.LineOrMscChrgExists:bool = obj["LineOrMscChrgExists"]
      """  Indicates if lines or misc charges exist for the invoice  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.MiscChrgNonDeducTax:int = obj["MiscChrgNonDeducTax"]
      self.MiscChrgVariance:int = obj["MiscChrgVariance"]
      self.NextInvoiceDate:str = obj["NextInvoiceDate"]
      """  NextInvoiceDate = InvcRecurringCycle.LastDate + RecurringCycle.Interval in RecurringCycle.Modifier units  """  
      self.NoChangeRecur:bool = obj["NoChangeRecur"]
      self.PayMethod:str = obj["PayMethod"]
      """  Pay Method Type  """  
      self.PEFiscalCreditOperStatusDsp:str = obj["PEFiscalCreditOperStatusDsp"]
      """  CSF Peru - Fiscal Credit Operation Status  """  
      self.PEIsNRInvc:bool = obj["PEIsNRInvc"]
      """  Peru Localization Field, Field to disable Non-Resident Inovices Fields.  """  
      self.PLVendorAutoInvoiceNum:bool = obj["PLVendorAutoInvoiceNum"]
      """  CSF Poland. Vendor uses Invoice reference number  """  
      self.PostInvtyWipCos:bool = obj["PostInvtyWipCos"]
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.Recurring:bool = obj["Recurring"]
      """  Recurring Source flag  """  
      self.RecurringState:str = obj["RecurringState"]
      self.Rpt1COIFRSFinancialCharge:int = obj["Rpt1COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt1COIFRSPresentValue:int = obj["Rpt1COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt1CumulativeBalance:int = obj["Rpt1CumulativeBalance"]
      self.Rpt1InvoiceVariance:int = obj["Rpt1InvoiceVariance"]
      self.Rpt1MiscChrgNonDeducTax:int = obj["Rpt1MiscChrgNonDeducTax"]
      self.Rpt1MiscChrgVariance:int = obj["Rpt1MiscChrgVariance"]
      self.Rpt1ScrDiscountAmt:int = obj["Rpt1ScrDiscountAmt"]
      self.Rpt1ScrHdrExpTotal:int = obj["Rpt1ScrHdrExpTotal"]
      self.Rpt1ScrHdrMiscChrgTotal:int = obj["Rpt1ScrHdrMiscChrgTotal"]
      self.Rpt1ScrInvLineTotal:int = obj["Rpt1ScrInvLineTotal"]
      self.Rpt1ScrInvoiceAmt:int = obj["Rpt1ScrInvoiceAmt"]
      self.Rpt1ScrInvoiceBal:int = obj["Rpt1ScrInvoiceBal"]
      self.Rpt1ScrInvoiceVendorAmt:int = obj["Rpt1ScrInvoiceVendorAmt"]
      self.Rpt1ScrLACTaxAmt:int = obj["Rpt1ScrLACTaxAmt"]
      """  Rpt1 Scr LAC Tax Amt  """  
      self.Rpt1ScrRounding:int = obj["Rpt1ScrRounding"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTotBOEWithholding:int = obj["Rpt1ScrTotBOEWithholding"]
      self.Rpt1ScrTotDedTaxAmt:int = obj["Rpt1ScrTotDedTaxAmt"]
      self.Rpt1ScrTotInvoiceAmt:int = obj["Rpt1ScrTotInvoiceAmt"]
      self.Rpt1ScrTotReportableAmt:int = obj["Rpt1ScrTotReportableAmt"]
      self.Rpt1ScrTotSelfAmt:int = obj["Rpt1ScrTotSelfAmt"]
      self.Rpt1ScrTotTaxableAmt:int = obj["Rpt1ScrTotTaxableAmt"]
      self.Rpt1ScrTotWithholdingAmt:int = obj["Rpt1ScrTotWithholdingAmt"]
      self.Rpt1ScrUnpostedBal:int = obj["Rpt1ScrUnpostedBal"]
      self.Rpt1SourceRecurBalance:int = obj["Rpt1SourceRecurBalance"]
      self.Rpt2COIFRSFinancialCharge:int = obj["Rpt2COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt2COIFRSPresentValue:int = obj["Rpt2COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt2CumulativeBalance:int = obj["Rpt2CumulativeBalance"]
      self.Rpt2InvoiceVariance:int = obj["Rpt2InvoiceVariance"]
      self.Rpt2MiscChrgNonDeducTax:int = obj["Rpt2MiscChrgNonDeducTax"]
      self.Rpt2MiscChrgVariance:int = obj["Rpt2MiscChrgVariance"]
      self.Rpt2ScrDiscountAmt:int = obj["Rpt2ScrDiscountAmt"]
      self.Rpt2ScrHdrExpTotal:int = obj["Rpt2ScrHdrExpTotal"]
      self.Rpt2ScrHdrMiscChrgTotal:int = obj["Rpt2ScrHdrMiscChrgTotal"]
      self.Rpt2ScrInvLineTotal:int = obj["Rpt2ScrInvLineTotal"]
      self.Rpt2ScrInvoiceAmt:int = obj["Rpt2ScrInvoiceAmt"]
      self.Rpt2ScrInvoiceBal:int = obj["Rpt2ScrInvoiceBal"]
      self.Rpt2ScrInvoiceVendorAmt:int = obj["Rpt2ScrInvoiceVendorAmt"]
      self.Rpt2ScrLACTaxAmt:int = obj["Rpt2ScrLACTaxAmt"]
      """  Rpt2 Scr LAC Tax Amt  """  
      self.Rpt2ScrRounding:int = obj["Rpt2ScrRounding"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTotBOEWithholding:int = obj["Rpt2ScrTotBOEWithholding"]
      self.Rpt2ScrTotDedTaxAmt:int = obj["Rpt2ScrTotDedTaxAmt"]
      self.Rpt2ScrTotInvoiceAmt:int = obj["Rpt2ScrTotInvoiceAmt"]
      self.Rpt2ScrTotReportableAmt:int = obj["Rpt2ScrTotReportableAmt"]
      self.Rpt2ScrTotSelfAmt:int = obj["Rpt2ScrTotSelfAmt"]
      self.Rpt2ScrTotTaxableAmt:int = obj["Rpt2ScrTotTaxableAmt"]
      self.Rpt2ScrTotWithholdingAmt:int = obj["Rpt2ScrTotWithholdingAmt"]
      self.Rpt2ScrUnpostedBal:int = obj["Rpt2ScrUnpostedBal"]
      self.Rpt2SourceRecurBalance:int = obj["Rpt2SourceRecurBalance"]
      self.Rpt3COIFRSFinancialCharge:int = obj["Rpt3COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt3COIFRSPresentValue:int = obj["Rpt3COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt3CumulativeBalance:int = obj["Rpt3CumulativeBalance"]
      self.Rpt3InvoiceVariance:int = obj["Rpt3InvoiceVariance"]
      self.Rpt3MiscChrgNonDeducTax:int = obj["Rpt3MiscChrgNonDeducTax"]
      self.Rpt3MiscChrgVariance:int = obj["Rpt3MiscChrgVariance"]
      self.Rpt3ScrDiscountAmt:int = obj["Rpt3ScrDiscountAmt"]
      self.Rpt3ScrHdrExpTotal:int = obj["Rpt3ScrHdrExpTotal"]
      self.Rpt3ScrHdrMiscChrgTotal:int = obj["Rpt3ScrHdrMiscChrgTotal"]
      self.Rpt3ScrInvLineTotal:int = obj["Rpt3ScrInvLineTotal"]
      self.Rpt3ScrInvoiceAmt:int = obj["Rpt3ScrInvoiceAmt"]
      self.Rpt3ScrInvoiceBal:int = obj["Rpt3ScrInvoiceBal"]
      self.Rpt3ScrInvoiceVendorAmt:int = obj["Rpt3ScrInvoiceVendorAmt"]
      self.Rpt3ScrLACTaxAmt:int = obj["Rpt3ScrLACTaxAmt"]
      """  Rpt3 Scr LAC Tax Amt  """  
      self.Rpt3ScrRounding:int = obj["Rpt3ScrRounding"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTotBOEWithholding:int = obj["Rpt3ScrTotBOEWithholding"]
      self.Rpt3ScrTotDedTaxAmt:int = obj["Rpt3ScrTotDedTaxAmt"]
      self.Rpt3ScrTotInvoiceAmt:int = obj["Rpt3ScrTotInvoiceAmt"]
      self.Rpt3ScrTotReportableAmt:int = obj["Rpt3ScrTotReportableAmt"]
      self.Rpt3ScrTotSelfAmt:int = obj["Rpt3ScrTotSelfAmt"]
      self.Rpt3ScrTotTaxableAmt:int = obj["Rpt3ScrTotTaxableAmt"]
      self.Rpt3ScrTotWithholdingAmt:int = obj["Rpt3ScrTotWithholdingAmt"]
      self.Rpt3ScrUnpostedBal:int = obj["Rpt3ScrUnpostedBal"]
      self.Rpt3SourceRecurBalance:int = obj["Rpt3SourceRecurBalance"]
      self.RptScrTotWithholdingAmt:int = obj["RptScrTotWithholdingAmt"]
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.ScrDiscountAmt:int = obj["ScrDiscountAmt"]
      self.ScrDocDiscountAmt:int = obj["ScrDocDiscountAmt"]
      self.ScrDocHdrMiscChrgTotal:int = obj["ScrDocHdrMiscChrgTotal"]
      self.ScrDocInvLineTotal:int = obj["ScrDocInvLineTotal"]
      self.ScrDocInvoiceAmt:int = obj["ScrDocInvoiceAmt"]
      self.ScrDocInvoiceBal:int = obj["ScrDocInvoiceBal"]
      self.ScrDocInvoiceVendorAmt:int = obj["ScrDocInvoiceVendorAmt"]
      self.ScrDocRounding:int = obj["ScrDocRounding"]
      self.ScrDocTaxAmt:int = obj["ScrDocTaxAmt"]
      self.ScrDocTotBOEWithholding:int = obj["ScrDocTotBOEWithholding"]
      self.ScrDocTotDedTaxAmt:int = obj["ScrDocTotDedTaxAmt"]
      self.ScrDocTotInvoiceAmt:int = obj["ScrDocTotInvoiceAmt"]
      self.ScrDocTotReportableAmt:int = obj["ScrDocTotReportableAmt"]
      self.ScrDocTotSelfAmt:int = obj["ScrDocTotSelfAmt"]
      self.ScrDocTotTaxableAmt:int = obj["ScrDocTotTaxableAmt"]
      self.ScrDocTotWithholdingAmt:int = obj["ScrDocTotWithholdingAmt"]
      self.ScrDocUnpostedBal:int = obj["ScrDocUnpostedBal"]
      self.ScrHdrExpTotal:int = obj["ScrHdrExpTotal"]
      self.ScrHdrMiscChrgTotal:int = obj["ScrHdrMiscChrgTotal"]
      self.ScrInvLineTotal:int = obj["ScrInvLineTotal"]
      self.ScrInvoiceAmt:int = obj["ScrInvoiceAmt"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrInvoiceRef:str = obj["ScrInvoiceRef"]
      self.ScrInvoiceVendorAmt:int = obj["ScrInvoiceVendorAmt"]
      self.ScrLACDocTaxAmt:int = obj["ScrLACDocTaxAmt"]
      """  Scr LAC Doc Tax Amt  """  
      self.ScrLACTaxAmt:int = obj["ScrLACTaxAmt"]
      """  Scr LAC Tax Amt  """  
      self.ScrRounding:int = obj["ScrRounding"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      """  The screen tax amount  """  
      self.ScrTotBOEWithholding:int = obj["ScrTotBOEWithholding"]
      """  Total of withholdings of all BOE Lines.  """  
      self.ScrTotDedTaxAmt:int = obj["ScrTotDedTaxAmt"]
      self.ScrTotInvoiceAmt:int = obj["ScrTotInvoiceAmt"]
      """  Shall be the sum of column 'Tax Amount' for all lines with collection method 'Invoice'  """  
      self.ScrTotReportableAmt:int = obj["ScrTotReportableAmt"]
      self.ScrTotSelfAmt:int = obj["ScrTotSelfAmt"]
      """  shall be the sum of column 'Tax Amount' for all lines with collection method 'Self-Assessed' or mehtod 'Self-Assessed'  """  
      self.ScrTotTaxableAmt:int = obj["ScrTotTaxableAmt"]
      self.ScrTotWithholdingAmt:int = obj["ScrTotWithholdingAmt"]
      """  shall be the sum of column 'Tax Amount' for all lines with collection  method 'Withholding'  """  
      self.ScrUnpostedBal:int = obj["ScrUnpostedBal"]
      self.SkipRecurring:bool = obj["SkipRecurring"]
      self.SourceInvoiceNum:str = obj["SourceInvoiceNum"]
      """  Recurrent Invoices functionality  """  
      self.SourceLastDate:str = obj["SourceLastDate"]
      self.SourceRecurBalance:int = obj["SourceRecurBalance"]
      self.SwiftCode:str = obj["SwiftCode"]
      """  Swift Code  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  System Transaction Type: APInvoice/DebitMemo  is used in the filter of TranDocType combo-box.  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.TaxLinesExist:bool = obj["TaxLinesExist"]
      self.TaxRateLinesExist:bool = obj["TaxRateLinesExist"]
      self.TotalInstanceNum:int = obj["TotalInstanceNum"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      """  Link to TranDocType table, can be removed when path filed TranDocTypeID is replaced with actual one.  """  
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.VendorInactive:bool = obj["VendorInactive"]
      """  Indicates if the vendor on the invoice is active or not.  """  
      self.VendorPayHold:bool = obj["VendorPayHold"]
      """  Indicates if the vendor on the invoice is in a pay hold state.  """  
      self.VNDateReceived:str = obj["VNDateReceived"]
      self.VNInvoiceType:str = obj["VNInvoiceType"]
      self.XRateLabel:str = obj["XRateLabel"]
      """  Exchange Rate Label  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      self.FormattedVendorNameAddress:str = obj["FormattedVendorNameAddress"]
      """  Formatted Supplier Name and Address  """  
      self.SiteIsLegalEntity:bool = obj["SiteIsLegalEntity"]
      """  Site is a LegalEntity  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AGCustomsDescription:str = obj["AGCustomsDescription"]
      self.AGDestinationDescription:str = obj["AGDestinationDescription"]
      self.APInvRecurringCycleInactive:bool = obj["APInvRecurringCycleInactive"]
      self.APInvRecurringCycleDescription:str = obj["APInvRecurringCycleDescription"]
      self.APLOCIDDescription:str = obj["APLOCIDDescription"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.RateGrpCodeDescription:str = obj["RateGrpCodeDescription"]
      self.SourcePlantName:str = obj["SourcePlantName"]
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.TermsCodeTermsType:str = obj["TermsCodeTermsType"]
      self.THRefVendorNumName:str = obj["THRefVendorNumName"]
      self.THRefVendorNumVendorID:str = obj["THRefVendorNumVendorID"]
      self.VendBankPMUID:int = obj["VendBankPMUID"]
      self.VendBankCardCode:str = obj["VendBankCardCode"]
      self.VendBankBankAcctNumber:str = obj["VendBankBankAcctNumber"]
      self.VendBankIBANCode:str = obj["VendBankIBANCode"]
      self.VendBankBankGiroAcctNbr:str = obj["VendBankBankGiroAcctNbr"]
      self.VendBankSwiftNum:str = obj["VendBankSwiftNum"]
      self.VendBankLocalBIC:str = obj["VendBankLocalBIC"]
      self.VendBankBankName:str = obj["VendBankBankName"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.XbSystAPTaxLnLevel:bool = obj["XbSystAPTaxLnLevel"]
      self.XbSystIsDiscountforDebitM:bool = obj["XbSystIsDiscountforDebitM"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvJobRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvDtl record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvDtl record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Copied from the related APINDtl record.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this record is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  The MtlSeq of the JObMtl record that this is related to.  """  
      self.ExtCost:int = obj["ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt1ExtCost:int = obj["Rpt1ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt2ExtCost:int = obj["Rpt2ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt3ExtCost:int = obj["Rpt3ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.DocExtCost:int = obj["DocExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID, entered for miscellaneous invoice lines only..  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase, entered for miscellaneous invoice lines only.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The purchasing misc charge code used to link to the Job Misc Charge entry to a WBS Phase JobMtl sequence.  """  
      self.ProjProcessed:bool = obj["ProjProcessed"]
      """  Logical field to indicate if this record has been read by project analysis process.  """  
      self.AsOfDate:str = obj["AsOfDate"]
      """  Used By Project Analysis Process  """  
      self.AsOfSeq:int = obj["AsOfSeq"]
      """  Used By Project Analysis Process  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EmpID:str = obj["EmpID"]
      """  Specifies the employee identifier associated with the job material record.  """  
      self.EmpExpenseNum:int = obj["EmpExpenseNum"]
      """  Specifies the employee expense number associated with the job material record.  """  
      self.PartTranSysRowID:str = obj["PartTranSysRowID"]
      """  PartTranSysRowID  """  
      self.AddedJobMtlSeq:int = obj["AddedJobMtlSeq"]
      """  Used to temporarily hold the JobMtl.MtlSeq if a new JobMtl was created during the while the user is making changes to the ApInvJob record in AP Invoice entry. The value is cleared once the APInvJob changes are saved.  """  
      self.CallLine:int = obj["CallLine"]
      self.CallNum:int = obj["CallNum"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrExtCost:int = obj["DocScrExtCost"]
      self.EnableMaterialComplete:bool = obj["EnableMaterialComplete"]
      self.GroupID:str = obj["GroupID"]
      self.JobMtlDescription:str = obj["JobMtlDescription"]
      self.JobMtlMiscCodeDesc:str = obj["JobMtlMiscCodeDesc"]
      self.JobMtlPartNum:str = obj["JobMtlPartNum"]
      self.JobMtlTotalCost:int = obj["JobMtlTotalCost"]
      self.JobMtlUnitCost:int = obj["JobMtlUnitCost"]
      self.JobType:str = obj["JobType"]
      self.MaterialComplete:bool = obj["MaterialComplete"]
      self.MtlQuestion:str = obj["MtlQuestion"]
      self.PhaseDescription:str = obj["PhaseDescription"]
      self.Posted:bool = obj["Posted"]
      self.Rpt1ScrExtCost:int = obj["Rpt1ScrExtCost"]
      self.Rpt2ScrExtCost:int = obj["Rpt2ScrExtCost"]
      self.Rpt3ScrExtCost:int = obj["Rpt3ScrExtCost"]
      self.ScrExtCost:int = obj["ScrExtCost"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvLnMscTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.MscNum:int = obj["MscNum"]
      """  MscNum  """  
      self.APInvMscSysRowID:str = obj["APInvMscSysRowID"]
      """  APInvMscSysRowID  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deductible Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deductible Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.GroupID:str = obj["GroupID"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisableManual:bool = obj["DisableManual"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  Duplicated  from the related APInvHed record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the InvcDetl record for the Invoice and the adding 1 to it.  """  
      self.MscNum:int = obj["MscNum"]
      """  Number automatically assigned by invoice entry which is used along with VendorNum, InvoiceNum and InvoiceLine to uniquely identify the miscellaneous record within the invoice.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Code that relates this invoice miscellaneous charge to the PurMisc master. Entered via a DDSL widget.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. Defaulted from PurMisc.Description.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  miscellaneous amount.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  miscellaneous amount in the vendor currency.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that this miscellaneous record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  PO line number that this miscellaneous record is related to. If related to the PO Header then this field is zero.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence number of the Miscellaneous Charge  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """   Identifies Tax Category for this Misc. item.
Defaults from PurMisc.TaxCatID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbMscNum:int = obj["GlbMscNum"]
      """  Global Invoice Miscellaneous Charge identifier.  Used in Consolidated Purchasing.  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  Reference to the APInvExp record that contains the gl distribution for this charge.  """  
      self.LCFlag:bool = obj["LCFlag"]
      """  Indicates if the AP Miscellaneous Charge is for Landed Cost.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Container Shipment ID (also known as the ContainerID).  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID of the associated receipt's indirect cost.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip # of the associated receipt's indirect cost.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.LCVendorNum:int = obj["LCVendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  This field, together with the PackSlip and PurPoint, is used to link the APInvMsc to the RcvMisc record that references this misc charge as a Landed Cost's Indirect Cost.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Like PurMisc.LCDisburseMethod. Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  miscellaneous amount including taxes.  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  miscellaneous amount in the vendor currency including taxes.  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  NoTaxRecalc  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  Code1099ID  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Gen1099Code  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.PlasticPackTaxReportID:str = obj["PlasticPackTaxReportID"]
      """  The Plastic Packaging Tax Report ID.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.LCEnabled:bool = obj["LCEnabled"]
      self.Posted:bool = obj["Posted"]
      self.RecordSource:str = obj["RecordSource"]
      self.Rpt1ScrMiscAmt:int = obj["Rpt1ScrMiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt2ScrMiscAmt:int = obj["Rpt2ScrMiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt3ScrMiscAmt:int = obj["Rpt3ScrMiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.ScrDocMiscAmt:int = obj["ScrDocMiscAmt"]
      self.ScrMiscAmt:int = obj["ScrMiscAmt"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.Selected:bool = obj["Selected"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.MiscCodeLCCurrencyCode:str = obj["MiscCodeLCCurrencyCode"]
      self.MiscCodeLCDisburseMethod:str = obj["MiscCodeLCDisburseMethod"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.MiscCodeLCAmount:int = obj["MiscCodeLCAmount"]
      self.POLineVenPartNum:str = obj["POLineVenPartNum"]
      self.POLineLineDesc:str = obj["POLineLineDesc"]
      self.POLinePartNum:str = obj["POLinePartNum"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvPBRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  A  unique integer assigned by the system to new vendors by the  maintenance program. This field is used as the foreign key to identify the vendor in other files such as CheckHed, or POHeader. The end user should never need to know about the value of this field.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company, VendorNum and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the APInvDtl record for the Invoice and the adding 1 to it.  """  
      self.RoleCd:str = obj["RoleCd"]
      """  Project Role Code  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.HoursChg:int = obj["HoursChg"]
      """  This is the hours that the subcontract supplier is charging for the work.  """  
      self.MtlChg:int = obj["MtlChg"]
      """  This is the material costs associated with the subcontract operation. In base currency.  """  
      self.DocMtlChg:int = obj["DocMtlChg"]
      """  This is the material costs associated with the subcontract operation. In document currency.  """  
      self.Rpt1MtlChg:int = obj["Rpt1MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 1.  """  
      self.Rpt2MtlChg:int = obj["Rpt2MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 2.  """  
      self.Rpt3MtlChg:int = obj["Rpt3MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 3.  """  
      self.InvDtlValue:int = obj["InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Base currency  """  
      self.DocInvDtlValue:int = obj["DocInvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In document currency  """  
      self.Rpt1InvDtlValue:int = obj["Rpt1InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 1.  """  
      self.Rpt2InvDtlValue:int = obj["Rpt2InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 2.  """  
      self.Rpt3InvDtlValue:int = obj["Rpt3InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 3.  """  
      self.PBInvNum:int = obj["PBInvNum"]
      """  The Project Billing Invoice Number where these charges were processed.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ScrMtlChg:int = obj["ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In base currency. Used for data entry. The BL will flip the sign if necessary for the MtlChg db field.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Holds the same value as APInvHed CurrencyCode  """  
      self.ScrDocMtlChg:int = obj["ScrDocMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In document  currency. Used for data entry  """  
      self.Rpt1ScrMtlChg:int = obj["Rpt1ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 1. Used for data entry. The BL will flip the sign if necessary for the Rpt1MtlChg db field.  """  
      self.Rpt2ScrMtlChg:int = obj["Rpt2ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 2. Used for data entry.  """  
      self.Rpt3ScrMtlChg:int = obj["Rpt3ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 3. Used for data entry.  """  
      self.ScrInvDtlValue:int = obj["ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Base currency. Used for data entry.  """  
      self.ScrDocInvDtlValue:int = obj["ScrDocInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Document currency. Used for data entry.  """  
      self.Rpt1ScrInvDtlValue:int = obj["Rpt1ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 1. Used for data entry.  """  
      self.Rpt2ScrInvDtlValue:int = obj["Rpt2ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 2. Used for data entry.  """  
      self.Rpt3ScrInvDtlValue:int = obj["Rpt3ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 3. Used for data entry.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Same as APInvHed.CurrencySwitch  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """  Indicates if this invoice is a debit memo  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RoleCdRoleDescription:str = obj["RoleCdRoleDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayDueDate:str = obj["PayDueDate"]
      """  Specifies the due date of the Scheduled payment.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment’s Percentage.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  UserID of who created record.  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  Date record was created  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID of who changed record.  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date record was changed  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbPaySeq:int = obj["GlbPaySeq"]
      """  Global PaySeq identifier.  Used in Consolidated Purchasing.  """  
      self.GroupID:str = obj["GroupID"]
      self.ScrPayAmount:int = obj["ScrPayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocScrPayAmount:int = obj["DocScrPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment’s Percentage.  """  
      self.Rpt1ScrPayAmount:int = obj["Rpt1ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2ScrPayAmount:int = obj["Rpt2ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3ScrPayAmount:int = obj["Rpt3ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.SummaryOnly:bool = obj["SummaryOnly"]
      """   flag to indicate if this record is used only to total detail records,
no update allowed.  """  
      self.DevInt1:int = obj["DevInt1"]
      """  When AP Misc. Payment / Prepayment has related TaxDtl records, and related Prepayment APInvTax record is created this field contains Payment HeadNum  """  
      self.DevInt2:int = obj["DevInt2"]
      """  When AP Misc. Payment / Prepayment has related TaxDtl records, and related Prepayment APInvTax record is created this field contains Pre-Payment APTranNo  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Indicates if the record is created as reversing  for Prepayment related tax record  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  For reversing prepayment  tax records this field is populated with Prepayment invoice number  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.EnableSuperGRate:bool = obj["EnableSuperGRate"]
      self.GroupID:str = obj["GroupID"]
      self.Posted:bool = obj["Posted"]
      self.RateType:int = obj["RateType"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      """  Display field for Rpt1ScrFixedAmount  """  
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      """  Display field for Rpt2FixedAmount  """  
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      """  Display field for Rpt3rFixedAmount  """  
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrDocDedTaxAmt:int = obj["ScrDocDedTaxAmt"]
      self.ScrDocFixedAmount:int = obj["ScrDocFixedAmount"]
      """  Display field for DocFixedAmount  """  
      self.ScrDocReportableAmt:int = obj["ScrDocReportableAmt"]
      self.ScrDocTaxableAmt:int = obj["ScrDocTaxableAmt"]
      self.ScrDocTaxAmt:int = obj["ScrDocTaxAmt"]
      self.ScrDocTaxAmtVar:int = obj["ScrDocTaxAmtVar"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      """  Display field for FixedAmount  """  
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.ExemptReasonCodeDesc:str = obj["ExemptReasonCodeDesc"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APLnTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type description  """  
      self.DisableManual:bool = obj["DisableManual"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.DocScrTaxAmtVar:int = obj["DocScrTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrDocFixedAmount:int = obj["ScrDocFixedAmount"]
      """  Display Fixed Amount in document currency.  """  
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      """  Display Fixed Amount in base currency.  """  
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.ExemptReasonCodeDesc:str = obj["ExemptReasonCodeDesc"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_AdditionalForms_ParametersViewRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.SelectedInvoiceNum:str = obj["SelectedInvoiceNum"]
      self.SelectedInvoiceNumForCorrection:str = obj["SelectedInvoiceNumForCorrection"]
      self.SelectedVendorNumForCorrection:int = obj["SelectedVendorNumForCorrection"]
      self.VendorNumToCorrect:int = obj["VendorNumToCorrect"]
      self.NewInvoiceNumForChange:str = obj["NewInvoiceNumForChange"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.GLControlType:str = obj["GLControlType"]
      """  Identifier of the GL Control Type.  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  GL Control Identifier.  """  
      self.BusinessEntity:str = obj["BusinessEntity"]
      """  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.GlobalEntityGLC:bool = obj["GlobalEntityGLC"]
      """  Marks this EntityGLC as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BankAcctID:str = obj["BankAcctID"]
      """  BankAcctID of the related BankAcct record.  """  
      self.BankFeeID:str = obj["BankFeeID"]
      self.CallCode:str = obj["CallCode"]
      """  CallCode of the related FSCallCd record.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      self.ClassCode:str = obj["ClassCode"]
      """  ClassCode of the related FAClass record.  """  
      self.ClassID:str = obj["ClassID"]
      """  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  """  
      self.ContractCode:str = obj["ContractCode"]
      """  ContractCode of the related FSContCd record.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode of the related Currency record.  """  
      self.CustNum:int = obj["CustNum"]
      """  CustNum of the related Customer record  """  
      self.DeductionID:str = obj["DeductionID"]
      """  DeductionID of PRClsDed or PRDeduct.  """  
      self.EmpID:str = obj["EmpID"]
      """  EmpID of the related PREmpMas record.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  ExpenseCode of PayTLbr, LabExpCd  """  
      self.ExtSystemID:str = obj["ExtSystemID"]
      """  ExtSystemID of ExtCompany table  """  
      self.FromPlant:str = obj["FromPlant"]
      """  FromPlant value of the related PlntTranDef record.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  GroupCode of the related FAGroup record.  """  
      self.GroupID:str = obj["GroupID"]
      self.HeadNum:int = obj["HeadNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.JCDept:str = obj["JCDept"]
      """  JCDept of the related JCDept record.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode of the related MiscChrg or PurMisc record.  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum of the related Part record.  """  
      self.PayTypeID:str = obj["PayTypeID"]
      """  PayTypeID of PayType  """  
      self.PerConName:str = obj["PerConName"]
      self.PIStatus:str = obj["PIStatus"]
      """  PI Status  """  
      self.Plant:str = obj["Plant"]
      """  Plant of the related PlantConfCtrl record.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  ProdCode of the related ProdGrup record.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  ProjectID of the related Project record.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  PurchCode of the related GLPurch record.  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode of the related GLRate record.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  ReasonCode of the related Reason record.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  ReasonType of the related Reason record.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  SalesCatID of the related SalesCat record.  """  
      self.Shift:int = obj["Shift"]
      """  Shift value of the related JCShift record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode of the related SalesTax record.  """  
      self.TaxTblID:str = obj["TaxTblID"]
      """  TaxTblID of PRTaxMas or PRClsTax.  """  
      self.ToPlant:str = obj["ToPlant"]
      """  ToPlant value of the related PlntTranDef record.  """  
      self.TransferMethod:str = obj["TransferMethod"]
      """  TransferMethod of ExtCompany table  """  
      self.TypeID:str = obj["TypeID"]
      """  Type ID  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum of the related Vendor record.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  WarehouseCode of the related Warehse record.  """  
      self.ExpenseTypeCode:str = obj["ExpenseTypeCode"]
      self.IsFiltered:bool = obj["IsFiltered"]
      self.OprTypeCode:str = obj["OprTypeCode"]
      self.CashDeskID:str = obj["CashDeskID"]
      self.TIN:str = obj["TIN"]
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      self.BitFlag:int = obj["BitFlag"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GlbAPIETGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.LegalNumberID:str = obj["LegalNumberID"]
      self.TransYear:int = obj["TransYear"]
      self.TransYearSuffix:str = obj["TransYearSuffix"]
      self.DspTransYear:str = obj["DspTransYear"]
      self.ShowDspTransYear:bool = obj["ShowDspTransYear"]
      """  Indicates if DspTransYear should be displayed when prompting for a manual number.  """  
      self.Prefix:str = obj["Prefix"]
      self.PrefixList:str = obj["PrefixList"]
      """  The list of prefixes that can be selected by the user for manual numbers.  """  
      self.NumberSuffix:str = obj["NumberSuffix"]
      """  The suffix portion of the legal number.  """  
      self.EnablePrefix:bool = obj["EnablePrefix"]
      """  Indicates if the prefix can be entered by the user.  """  
      self.EnableSuffix:bool = obj["EnableSuffix"]
      """  Indicates if the suffix (number) can be entered by the user.  """  
      self.NumberOption:str = obj["NumberOption"]
      self.DocumentDate:str = obj["DocumentDate"]
      self.GenerationType:str = obj["GenerationType"]
      self.Description:str = obj["Description"]
      self.TransPeriod:int = obj["TransPeriod"]
      self.PeriodPrefix:str = obj["PeriodPrefix"]
      """  Prefix for the period  """  
      self.ShowTransPeriod:bool = obj["ShowTransPeriod"]
      self.LegalNumber:str = obj["LegalNumber"]
      """  Used when the full legal number is entered  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.TranDocTypeID2:str = obj["TranDocTypeID2"]
      self.GenerationOption:str = obj["GenerationOption"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PEAPInvTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Indicates the Company ID.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Indicates the Supplier Number  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Indicates the Invoice Number  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Indicates the Tax Code  """  
      self.RateCode:str = obj["RateCode"]
      """  Indicates the Tax Rate Code  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  EC Acquisition Sequence  """  
      self.LineNum:int = obj["LineNum"]
      """  Indicates the Line Number  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Indicates the Resolution Number.  """  
      self.TextCode:str = obj["TextCode"]
      """  Indicates the Text Code  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  Manually added tax  """  
      self.Manual:bool = obj["Manual"]
      """  Manually added tax  """  
      self.Percent:int = obj["Percent"]
      """  Indicates the Percentage value  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Indicates the Reportable Amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Indicates the Taxable Amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Indicates the Tax Amount  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Default Taxable Amount  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Default Tax Amount  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Detractions Tax Amount  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Indicates the Fixed Amount  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Indicates the CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Indicates the Tax Timing parameter  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Indicates the Tax Rate Date  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Indicates the Resolution Date  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Indicates the Document Tax Amount  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      """  Indicates the Group ID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PESUNATDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.LineNum:int = obj["LineNum"]
      """  Line Number  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax Code  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax Amount  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RcvMiscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip #.  """  
      self.MiscSeq:int = obj["MiscSeq"]
      """  Unique Number automatically assigned within the Company/VendorNum/PurPoint/PackSlip to uniquely identify each Indirect Costs for this receipt.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Miscellaneous Charge ID that is flagged for Landed Cost  """  
      self.ExcludeFromLC:bool = obj["ExcludeFromLC"]
      """  Flag to indicate if the Indirect Cost is to be excluded from the Landed Cost calculation.  Disabled when IncTransValue is checked.  """  
      self.IncTransValue:bool = obj["IncTransValue"]
      """  Flag to indicate if the Indirect Cost is to be included in the Transaction Value (statistical value) which is used to calculate duties.  Disabled when the ExcludeFromLC is checked.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.ActualAmt:int = obj["ActualAmt"]
      """  Actual Miscellaneous Charge Amount.  """  
      self.DocActualAmt:int = obj["DocActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.CommentText:str = obj["CommentText"]
      """  Receipt Indirect Cost Comments  """  
      self.Rpt1ActualAmt:int = obj["Rpt1ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt2ActualAmt:int = obj["Rpt2ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt3ActualAmt:int = obj["Rpt3ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date that will be used to get the exchange rate if the indirect cost is not associated with an invoice miscellaneous charge.  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier of the currency rate group.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvMsc record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line from corresponding APInvMsc record.  """  
      self.MscNum:int = obj["MscNum"]
      """  The unique sequence number identifying the AP invoice miscellaneous charge.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.APInvVendorNum:int = obj["APInvVendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.PackLine:int = obj["PackLine"]
      """  Reference to RcvDtl.PackLine. An integer that uniquely identifies a detail record within a Packing slip.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Receipt Misc. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.Taxable:bool = obj["Taxable"]
      """  Indicates if the Indirect Cost is taxable  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  This flag determines whether any manual taxes were created for a line miscellaneous charge, if this is set to True then the tax engine will not calculate any miscellaneous charge tax information.  """  
      self.InActualAmt:int = obj["InActualAmt"]
      """  Actual Miscellaneous Charge Amount.  """  
      self.DocInActualAmt:int = obj["DocInActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified.  """  
      self.Rpt1InActualAmt:int = obj["Rpt1InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt2InActualAmt:int = obj["Rpt2InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt3InActualAmt:int = obj["Rpt3InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """  Exchange rate that will be used for this indirect cost.  """  
      self.RateLabel:str = obj["RateLabel"]
      """  Label for the exchange rate  """  
      self.TotDedTaxAmt:int = obj["TotDedTaxAmt"]
      """  Total dedicated Tax amount.  """  
      self.TotSATaxAmt:int = obj["TotSATaxAmt"]
      """  Total Self Assessed Tax amount  """  
      self.TotTaxAmt:int = obj["TotTaxAmt"]
      """  Total tax amount  """  
      self.AllowLCUpdate:bool = obj["AllowLCUpdate"]
      """  Flag to indicate if landed cost info can be updated.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Currency.CurrSymbol for currency "BASE"  """  
      self.ScrActualAmt:int = obj["ScrActualAmt"]
      """  Actual Miscellaneous Charge Amount - Screen value.  """  
      self.Rpt1ScrActualAmt:int = obj["Rpt1ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value.  """  
      self.Rpt2ScrActualAmt:int = obj["Rpt2ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value.  """  
      self.Rpt3ScrActualAmt:int = obj["Rpt3ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value  """  
      self.DocScrActualAmt:int = obj["DocScrActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified - Screen value  """  
      self.BitFlag:int = obj["BitFlag"]
      self.APInvVendorName:str = obj["APInvVendorName"]
      self.APInvVendorVendorID:str = obj["APInvVendorVendorID"]
      self.CurrencyCurrSymbol:str = obj["CurrencyCurrSymbol"]
      self.CurrencyCurrencyID:str = obj["CurrencyCurrencyID"]
      self.CurrencyDocumentDesc:str = obj["CurrencyDocumentDesc"]
      self.CurrencyCurrDesc:str = obj["CurrencyCurrDesc"]
      self.CurrencyCurrName:str = obj["CurrencyCurrName"]
      self.PurMiscLCDisburseMethod:str = obj["PurMiscLCDisburseMethod"]
      self.PurMiscLCCurrencyCode:str = obj["PurMiscLCCurrencyCode"]
      self.PurMiscDescription:str = obj["PurMiscDescription"]
      self.PurMiscLCAmount:int = obj["PurMiscLCAmount"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.RcvHeadReceiptDate:str = obj["RcvHeadReceiptDate"]
      self.RcvHeadInPrice:bool = obj["RcvHeadInPrice"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorName:str = obj["VendorName"]
      self.VendorVendorID:str = obj["VendorVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_SupplierXRefRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.MfgID:str = obj["MfgID"]
      self.MfgName:str = obj["MfgName"]
      self.MfgNum:int = obj["MfgNum"]
      self.MfgPartNum:str = obj["MfgPartNum"]
      self.PartNum:str = obj["PartNum"]
      self.POReference:bool = obj["POReference"]
      self.Receipt:bool = obj["Receipt"]
      self.VendNum:int = obj["VendNum"]
      self.VendPartNum:str = obj["VendPartNum"]
      self.Invoice:bool = obj["Invoice"]
      self.RcvXRefNum:int = obj["RcvXRefNum"]
      """  RcvXRefNum  """  
      self.Inspected:bool = obj["Inspected"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass




#########################################################################
# Custom Schemas:
#########################################################################
class AddPOMiscChrgToInvoiceHead_input:
   """ Required : 
   invHedVendorNum
   invHedInvoiceNum
   poMiscMiscCode
   poMiscPONum
   poMiscSeqNum
   ds
   """  
   def __init__(self, obj):
      self.invHedVendorNum:int = obj["invHedVendorNum"]
      """  The vendor number of the invoice line to add the charge to  """  
      self.invHedInvoiceNum:str = obj["invHedInvoiceNum"]
      """  The invoice number of the invoice line to add the charge to  """  
      self.poMiscMiscCode:str = obj["poMiscMiscCode"]
      """  The miscellaneous code on the po misc charge record to create the
            invoice miscellaneous charge from.  """  
      self.poMiscPONum:int = obj["poMiscPONum"]
      """  The PO number of the invoice line to add the charge to.  """  
      self.poMiscSeqNum:int = obj["poMiscSeqNum"]
      """  The SeqNum of the po misc charge record.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class AddPOMiscChrgToInvoiceHead_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class AddPOMiscChrgToInvoiceLine_input:
   """ Required : 
   InvDtlVendorNum
   InvDtlInvoiceNum
   InvDtlInvoiceLine
   POMiscPOLine
   POMiscSeqNum
   ds
   """  
   def __init__(self, obj):
      self.InvDtlVendorNum:int = obj["InvDtlVendorNum"]
      """  The vendor number of the invoice line to add the charge to  """  
      self.InvDtlInvoiceNum:str = obj["InvDtlInvoiceNum"]
      """  The invoice number of the invoice line to add the charge to  """  
      self.InvDtlInvoiceLine:int = obj["InvDtlInvoiceLine"]
      """  The line number of the invoice line to add the charge to  """  
      self.POMiscPOLine:int = obj["POMiscPOLine"]
      """  The po line of the po misc charge record  """  
      self.POMiscSeqNum:int = obj["POMiscSeqNum"]
      """  The SeqNum of the po misc charge record  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class AddPOMiscChrgToInvoiceLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class AllocateLateCost_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      pass

class AllocateLateCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      pass

      """  output parameters  """  

class AssignLegalNumber_input:
   """ Required : 
   inGroupID
   inVendor
   inInvNum
   ds
   """  
   def __init__(self, obj):
      self.inGroupID:str = obj["inGroupID"]
      """  The group id  """  
      self.inVendor:int = obj["inVendor"]
      """  The vendor num  """  
      self.inInvNum:str = obj["inInvNum"]
      """  The invoice number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class AssignLegalNumber_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opLegalNumMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class AutocompleteAmortizationSchedule_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class AutocompleteAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CalculateAmortizationTotals_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CalculateAmortizationTotals_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CalculateCOIFRS_PV_input:
   """ Required : 
   vendorNum
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  VendorNum  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  invoice number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CalculateCOIFRS_PV_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class Change1099Code_input:
   """ Required : 
   formTypeID
   proposedCode1099ID
   ds
   """  
   def __init__(self, obj):
      self.formTypeID:str = obj["formTypeID"]
      """  The proposed 1099 Code  """  
      self.proposedCode1099ID:str = obj["proposedCode1099ID"]
      """  The proposed 1099 Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class Change1099Code_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeAPIHAPInvMsc1099Code_input:
   """ Required : 
   formTypeID
   proposedCode1099ID
   ds
   """  
   def __init__(self, obj):
      self.formTypeID:str = obj["formTypeID"]
      """  The proposed 1099 Code  """  
      self.proposedCode1099ID:str = obj["proposedCode1099ID"]
      """  The proposed 1099 Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeAPIHAPInvMsc1099Code_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeAPIHAPInvMscFormType_input:
   """ Required : 
   formType
   ds
   """  
   def __init__(self, obj):
      self.formType:str = obj["formType"]
      """  1099 Form Type  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeAPIHAPInvMscFormType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeAPInvSchedAmount_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

class ChangeAPInvSchedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class ChangeAPInvSchedDays_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

class ChangeAPInvSchedDays_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class ChangeAPInvSchedDueDate_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

class ChangeAPInvSchedDueDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class ChangeAPInvSchedPercent_input:
   """ Required : 
   PaySeqEdited
   ts
   """  
   def __init__(self, obj):
      self.PaySeqEdited:int = obj["PaySeqEdited"]
      """  Payment Sequence updated  """  
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

class ChangeAPInvSchedPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ts:list[Erp_Tablesets_APInvoiceTableset] = obj["ts"]
      pass

      """  output parameters  """  

class ChangeAdjustmentValue_input:
   """ Required : 
   proposedValue
   ds
   """  
   def __init__(self, obj):
      self.proposedValue:int = obj["proposedValue"]
      """  The proposed adjustment value  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeAdjustmentValue_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeAdvancePayAmt_input:
   """ Required : 
   ProposedAdvancePayAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedAdvancePayAmt:int = obj["ProposedAdvancePayAmt"]
      """  The proposed advance payment amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeAdvancePayAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeAssemblySeq_input:
   """ Required : 
   ProposedAssemblySeq
   ds
   """  
   def __init__(self, obj):
      self.ProposedAssemblySeq:int = obj["ProposedAssemblySeq"]
      """  The proposed assembly sequence  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeAssemblySeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCostPerCode_input:
   """ Required : 
   ProposedCostPerCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedCostPerCode:str = obj["ProposedCostPerCode"]
      """  The proposed cost per code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeCostPerCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCurrencyMaster_input:
   """ Required : 
   ProposedCurrencyCode
   vRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedCurrencyCode:str = obj["ProposedCurrencyCode"]
      """  The proposed currency code  """  
      self.vRateGrpCode:str = obj["vRateGrpCode"]
      """  Currency Rate Group selected for the APInvoice  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeCurrencyMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vExchangeRate:int = obj["parameters"]
      self.vXRateLabel:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeCurrency_input:
   """ Required : 
   ProposedCurrencyCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedCurrencyCode:str = obj["ProposedCurrencyCode"]
      """  The proposed currency code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeCurrency_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeDueDate_input:
   """ Required : 
   ProposedDueDate
   ds
   """  
   def __init__(self, obj):
      self.ProposedDueDate:str = obj["ProposedDueDate"]
      """  The proposed invoice date  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeDueDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeExpHeaderAmt_input:
   """ Required : 
   ProposedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedAmt:int = obj["ProposedAmt"]
      """  The proposed amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeExpHeaderAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeExpLineAmt_input:
   """ Required : 
   ProposedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedAmt:int = obj["ProposedAmt"]
      """  The proposed amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeExpLineAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeExtCompanyID_input:
   """ Required : 
   ProposedExtCompID
   ds
   """  
   def __init__(self, obj):
      self.ProposedExtCompID:str = obj["ProposedExtCompID"]
      """  The proposed External Company ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeExtCompanyID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeExtCost_input:
   """ Required : 
   ProposedExtCost
   ds
   """  
   def __init__(self, obj):
      self.ProposedExtCost:int = obj["ProposedExtCost"]
      """  The proposed ext cost  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeExtCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFixedAmount_input:
   """ Required : 
   ProposedFixedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedFixedAmt:int = obj["ProposedFixedAmt"]
      """  The proposed fixed amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFixedAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFixedDiscount_input:
   """ Required : 
   ProposedDiscountAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedDiscountAmt:int = obj["ProposedDiscountAmt"]
      """  The proposed discount amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFixedDiscount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFixedHedMscAmount_input:
   """ Required : 
   ProposedFixedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedFixedAmt:int = obj["ProposedFixedAmt"]
      """  The proposed fixed of line tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFixedHedMscAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFixedLineAmount_input:
   """ Required : 
   ProposedFixedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedFixedAmt:int = obj["ProposedFixedAmt"]
      """  The proposed fixed of line tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFixedLineAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFixedLnMscAmount_input:
   """ Required : 
   ProposedFixedAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedFixedAmt:int = obj["ProposedFixedAmt"]
      """  The proposed fixed of line tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFixedLnMscAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeFormType_input:
   """ Required : 
   formType
   ds
   """  
   def __init__(self, obj):
      self.formType:str = obj["formType"]
      """  1099 Form Type  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeFormType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeGUITaxBasisAmt_input:
   """ Required : 
   proposedGUITaxBasisAmt
   ds
   """  
   def __init__(self, obj):
      self.proposedGUITaxBasisAmt:int = obj["proposedGUITaxBasisAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeGUITaxBasisAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceDateEx_input:
   """ Required : 
   ProposedInvoiceDate
   recalcAmts
   ds
   """  
   def __init__(self, obj):
      self.ProposedInvoiceDate:str = obj["ProposedInvoiceDate"]
      """  The proposed invoice date  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoiceDateEx_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cMessageText:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceDateWithDateCheck_input:
   """ Required : 
   ProposedInvoiceDate
   recalcAmts
   ds
   """  
   def __init__(self, obj):
      self.ProposedInvoiceDate:str = obj["ProposedInvoiceDate"]
      """  The proposed invoice date  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoiceDateWithDateCheck_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.cMessageText:str = obj["parameters"]
      self.DateMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceDate_input:
   """ Required : 
   ProposedInvoiceDate
   recalcAmts
   ds
   """  
   def __init__(self, obj):
      self.ProposedInvoiceDate:str = obj["ProposedInvoiceDate"]
      """  The proposed invoice date  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoiceDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceNumber_input:
   """ Required : 
   vendorNum
   originalInvoiceNum
   newInvoiceNum
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  The supplier number  """  
      self.originalInvoiceNum:str = obj["originalInvoiceNum"]
      """  The original invoice number  """  
      self.newInvoiceNum:str = obj["newInvoiceNum"]
      """  The new invoice number  """  
      pass

class ChangeInvoiceNumber_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class ChangeInvoicePurPoint_input:
   """ Required : 
   purPoint
   ds
   """  
   def __init__(self, obj):
      self.purPoint:str = obj["purPoint"]
      """  New value of Purchase Point  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoicePurPoint_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceRef_input:
   """ Required : 
   ProposedInvoiceRef
   ds
   """  
   def __init__(self, obj):
      self.ProposedInvoiceRef:str = obj["ProposedInvoiceRef"]
      """  The proposed invoice reference number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoiceRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeInvoiceVendorAmt_input:
   """ Required : 
   ProposedInvoiceVendorAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedInvoiceVendorAmt:int = obj["ProposedInvoiceVendorAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeInvoiceVendorAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMiscCode_input:
   """ Required : 
   ProposedJobMisc
   ds
   """  
   def __init__(self, obj):
      self.ProposedJobMisc:str = obj["ProposedJobMisc"]
      """  The proposed job misc code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeJobMiscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobMiscProject_input:
   """ Required : 
   propProject
   ds
   """  
   def __init__(self, obj):
      self.propProject:str = obj["propProject"]
      """  The proposed project  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeJobMiscProject_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeJobNum_input:
   """ Required : 
   ProposedJobNum
   ds
   """  
   def __init__(self, obj):
      self.ProposedJobNum:str = obj["ProposedJobNum"]
      """  The proposed job number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeJobNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeLOCIDInvPosted_input:
   """ Required : 
   ProposedLOCID
   ds
   """  
   def __init__(self, obj):
      self.ProposedLOCID:str = obj["ProposedLOCID"]
      """  The proposed LOC ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeLOCIDInvPosted_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeLOCID_input:
   """ Required : 
   ProposedLOCID
   ds
   """  
   def __init__(self, obj):
      self.ProposedLOCID:str = obj["ProposedLOCID"]
      """  The proposed LOC ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeLOCID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outMsg:str = obj["parameters"]
      self.outTermsDiff:str = obj["parameters"]
      self.outLocTerms:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeLineDiscAmt_input:
   """ Required : 
   ProposedLineDiscAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedLineDiscAmt:int = obj["ProposedLineDiscAmt"]
      """  The proposed discount amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeLineDiscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeLockRate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeLockRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeManualTaxCalculation_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeManualTaxCalculation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeManualTaxHedMscCalculation_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeManualTaxHedMscCalculation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeManualTaxLineCalculation_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeManualTaxLineCalculation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeManualTaxLnMscCalculation_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeManualTaxLnMscCalculation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscAmt_input:
   """ Required : 
   ProposedMiscAmt
   TableName
   ds
   """  
   def __init__(self, obj):
      self.ProposedMiscAmt:int = obj["ProposedMiscAmt"]
      """  The proposed miscellanous amount  """  
      self.TableName:str = obj["TableName"]
      """  The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMiscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscCode_input:
   """ Required : 
   ProposedMiscCode
   TableName
   ds
   """  
   def __init__(self, obj):
      self.ProposedMiscCode:str = obj["ProposedMiscCode"]
      """  The proposed miscellanous code  """  
      self.TableName:str = obj["TableName"]
      """  The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMiscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscLCFlag_input:
   """ Required : 
   ipLCFlag
   TableName
   ds
   """  
   def __init__(self, obj):
      self.ipLCFlag:bool = obj["ipLCFlag"]
      """  The proposed Landed Cost Flag  """  
      self.TableName:str = obj["TableName"]
      """  The table the charge is for.  Values are "APInvMsc" or "APIHAPInvMsc"  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMiscLCFlag_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMiscPercent_input:
   """ Required : 
   proposedPrcnt
   tableName
   ds
   """  
   def __init__(self, obj):
      self.proposedPrcnt:int = obj["proposedPrcnt"]
      """  new Percentage value  """  
      self.tableName:str = obj["tableName"]
      """  name of table being passed in  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMiscPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMtlSeq_input:
   """ Required : 
   ProposedMtlSeq
   ds
   """  
   def __init__(self, obj):
      self.ProposedMtlSeq:int = obj["ProposedMtlSeq"]
      """  The proposed material sequence  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMtlSeq_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeMultiCompany_input:
   """ Required : 
   ProposedMulti
   ds
   """  
   def __init__(self, obj):
      self.ProposedMulti:bool = obj["ProposedMulti"]
      """  The proposed Multi-Company flag  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeMultiCompany_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeOverrideRevCharge_input:
   """ Required : 
   ProposedOverrideRC
   ds
   """  
   def __init__(self, obj):
      self.ProposedOverrideRC:bool = obj["ProposedOverrideRC"]
      """  The proposed Override Reverse Charge  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeOverrideRevCharge_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePBDtlValue_input:
   """ Required : 
   proposedInvDtlValue
   ds
   """  
   def __init__(self, obj):
      self.proposedInvDtlValue:int = obj["proposedInvDtlValue"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePBDtlValue_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePBMtlCharge_input:
   """ Required : 
   proposedMtlChrg
   ds
   """  
   def __init__(self, obj):
      self.proposedMtlChrg:int = obj["proposedMtlChrg"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePBMtlCharge_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePMUIDMaster_input:
   """ Required : 
   ipPaymentMethod
   ds
   """  
   def __init__(self, obj):
      self.ipPaymentMethod:int = obj["ipPaymentMethod"]
      """  Payment Method ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePMUIDMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePMUID_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePMUID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePOLine_input:
   """ Required : 
   ProposedPOLine
   ds
   """  
   def __init__(self, obj):
      self.ProposedPOLine:int = obj["ProposedPOLine"]
      """  The proposed po line  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePOLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePONum_input:
   """ Required : 
   ProposedPONum
   ds
   """  
   def __init__(self, obj):
      self.ProposedPONum:int = obj["ProposedPONum"]
      """  The proposed po number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePONum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePORelNum_input:
   """ Required : 
   ProposedPORelNum
   ds
   """  
   def __init__(self, obj):
      self.ProposedPORelNum:int = obj["ProposedPORelNum"]
      """  The proposed po release number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePORelNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePartNum_input:
   """ Required : 
   ProposedPartNum
   ds
   """  
   def __init__(self, obj):
      self.ProposedPartNum:str = obj["ProposedPartNum"]
      """  The proposed part number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePartNum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePhaseID_input:
   """ Required : 
   PropPhase
   ds
   """  
   def __init__(self, obj):
      self.PropPhase:str = obj["PropPhase"]
      """  The proposed phase number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePhaseID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePrePaymentAmt_input:
   """ Required : 
   prepaymentAmount
   ds
   """  
   def __init__(self, obj):
      self.prepaymentAmount:int = obj["prepaymentAmount"]
      """  The proposed prepayment amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePrePaymentAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangePrePayment_input:
   """ Required : 
   prepaymentNum
   ds
   """  
   def __init__(self, obj):
      self.prepaymentNum:str = obj["prepaymentNum"]
      """  The number of prepayment invoce  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangePrePayment_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRateCodeMaster_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  The proposed rate code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRateCodeMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRateCode_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRateCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRateHedMscCode_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  The proposed rate code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRateHedMscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRateLineCode_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  The proposed rate code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRateLineCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRateLnMscCode_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  The proposed rate code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRateLnMscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRefPONum_input:
   """ Required : 
   ProposedRefPONum
   confirmCheck
   ds
   """  
   def __init__(self, obj):
      self.ProposedRefPONum:int = obj["ProposedRefPONum"]
      """  The proposed po number reference  """  
      self.confirmCheck:bool = obj["confirmCheck"]
      """  Confirm Check  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRefPONum_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.confirmMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeReportableAmt_input:
   """ Required : 
   ProposedReportableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedReportableAmt:int = obj["ProposedReportableAmt"]
      """  The proposed reportable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeReportableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeReportableHedMscAmt_input:
   """ Required : 
   ProposedReportableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedReportableAmt:int = obj["ProposedReportableAmt"]
      """  The proposed reportable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeReportableHedMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeReportableLineAmt_input:
   """ Required : 
   ProposedReportableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedReportableAmt:int = obj["ProposedReportableAmt"]
      """  The proposed reportable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeReportableLineAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeReportableLnMscAmt_input:
   """ Required : 
   ProposedReportableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedReportableAmt:int = obj["ProposedReportableAmt"]
      """  The proposed reportable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeReportableLnMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeRevChargeMethod_input:
   """ Required : 
   ProposedRevChrgMethod
   ds
   """  
   def __init__(self, obj):
      self.ProposedRevChrgMethod:str = obj["ProposedRevChrgMethod"]
      """  The proposed Reverse Charge Method  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeRevChargeMethod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxAmt_input:
   """ Required : 
   ProposedTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxAmt:int = obj["ProposedTaxAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxCatID_input:
   """ Required : 
   ipTaxCatID
   ds
   """  
   def __init__(self, obj):
      self.ipTaxCatID:str = obj["ipTaxCatID"]
      """  The proposed Tax Category ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxCatID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxCode_input:
   """ Required : 
   ProposedTaxCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxCode:str = obj["ProposedTaxCode"]
      """  The proposed tax code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxDeductable_input:
   """ Required : 
   proposedTaxDeductable
   ds
   """  
   def __init__(self, obj):
      self.proposedTaxDeductable:int = obj["proposedTaxDeductable"]
      """  The proposed tax deductable  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxDeductable_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxHedMscAmt_input:
   """ Required : 
   ProposedTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxAmt:int = obj["ProposedTaxAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxHedMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxHedMscCode_input:
   """ Required : 
   ProposedTaxCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxCode:str = obj["ProposedTaxCode"]
      """  The proposed tax code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxHedMscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxHedMscDeductible_input:
   """ Required : 
   proposedTaxDeductable
   ds
   """  
   def __init__(self, obj):
      self.proposedTaxDeductable:int = obj["proposedTaxDeductable"]
      """  The proposed tax deductible  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxHedMscDeductible_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxHedMscPercent_input:
   """ Required : 
   ProposedTaxPercent
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxPercent:int = obj["ProposedTaxPercent"]
      """  The proposed tax percent  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxHedMscPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLineAmt_input:
   """ Required : 
   ProposedTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxAmt:int = obj["ProposedTaxAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLineAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLineCode_input:
   """ Required : 
   ProposedTaxCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxCode:str = obj["ProposedTaxCode"]
      """  The proposed tax code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLineCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLineDeductible_input:
   """ Required : 
   proposedTaxDeductable
   ds
   """  
   def __init__(self, obj):
      self.proposedTaxDeductable:int = obj["proposedTaxDeductable"]
      """  The proposed tax deductible  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLineDeductible_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLinePercent_input:
   """ Required : 
   ProposedTaxPercent
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxPercent:int = obj["ProposedTaxPercent"]
      """  The proposed tax percent  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLinePercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLnMscAmt_input:
   """ Required : 
   ProposedTaxAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxAmt:int = obj["ProposedTaxAmt"]
      """  The proposed tax amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLnMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLnMscCode_input:
   """ Required : 
   ProposedTaxCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxCode:str = obj["ProposedTaxCode"]
      """  The proposed tax code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLnMscCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLnMscDeductible_input:
   """ Required : 
   proposedTaxDeductable
   ds
   """  
   def __init__(self, obj):
      self.proposedTaxDeductable:int = obj["proposedTaxDeductable"]
      """  The proposed tax deductible  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLnMscDeductible_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLnMscPercent_input:
   """ Required : 
   ProposedTaxPercent
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxPercent:int = obj["ProposedTaxPercent"]
      """  The proposed tax percent  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLnMscPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxLock_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxLock_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxPercent_input:
   """ Required : 
   ProposedTaxPercent
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxPercent:int = obj["ProposedTaxPercent"]
      """  The proposed tax percent  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxPercent_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxableAmt_input:
   """ Required : 
   ProposedTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxableAmt:int = obj["ProposedTaxableAmt"]
      """  The proposed taxable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxableAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxableHedMscAmt_input:
   """ Required : 
   ProposedTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxableAmt:int = obj["ProposedTaxableAmt"]
      """  The proposed taxable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxableHedMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxableLineAmt_input:
   """ Required : 
   ProposedTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxableAmt:int = obj["ProposedTaxableAmt"]
      """  The proposed taxable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxableLineAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTaxableLnMscAmt_input:
   """ Required : 
   ProposedTaxableAmt
   ds
   """  
   def __init__(self, obj):
      self.ProposedTaxableAmt:int = obj["ProposedTaxableAmt"]
      """  The proposed taxable amount  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTaxableLnMscAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeTermsCode_input:
   """ Required : 
   ProposedTermsCode
   ds
   """  
   def __init__(self, obj):
      self.ProposedTermsCode:str = obj["ProposedTermsCode"]
      """  The proposed terms code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeTermsCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeUnitCost_input:
   """ Required : 
   ProposedUnitCost
   ds
   """  
   def __init__(self, obj):
      self.ProposedUnitCost:int = obj["ProposedUnitCost"]
      """  The proposed unit cost  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeUnitCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeVendorID_input:
   """ Required : 
   ProposedVendorID
   confirmCheck
   ds
   """  
   def __init__(self, obj):
      self.ProposedVendorID:str = obj["ProposedVendorID"]
      """  The proposed vendor id  """  
      self.confirmCheck:bool = obj["confirmCheck"]
      """  Confirm Check  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeVendorID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.confirmMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ChangeVendorQty_input:
   """ Required : 
   ProposedVendorQty
   ds
   """  
   def __init__(self, obj):
      self.ProposedVendorQty:int = obj["ProposedVendorQty"]
      """  The proposed vendor quantity  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ChangeVendorQty_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckBankRef_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckBankRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.OpMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckBankReference_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  Vendor Number.  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  Invoice Number.  """  
      pass

class CheckBankReference_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class CheckCPayBeforeUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckCPayBeforeUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.OpMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckDocumentIsLocked_input:
   """ Required : 
   keyValue
   keyValue2
   """  
   def __init__(self, obj):
      self.keyValue:str = obj["keyValue"]
      """  VendorNum  """  
      self.keyValue2:str = obj["keyValue2"]
      """  InvoiceNum  """  
      pass

class CheckDocumentIsLocked_output:
   def __init__(self, obj):
      pass

class CheckGroupTaxID_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      pass

class CheckGroupTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckLegalNumsDisplay_input:
   """ Required : 
   cGroupID
   """  
   def __init__(self, obj):
      self.cGroupID:str = obj["cGroupID"]
      """  The group id  """  
      pass

class CheckLegalNumsDisplay_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.lEnabled:bool = obj["lEnabled"]
      pass

      """  output parameters  """  

class CheckLinePurPoint_input:
   """ Required : 
   purPoint
   ds
   """  
   def __init__(self, obj):
      self.purPoint:str = obj["purPoint"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckLinePurPoint_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckLineSubTotal_input:
   """ Required : 
   ipVendNum
   ipInvNum
   ipInvLine
   ipRoleCd
   ipProposedValue
   """  
   def __init__(self, obj):
      self.ipVendNum:int = obj["ipVendNum"]
      self.ipInvNum:str = obj["ipInvNum"]
      self.ipInvLine:int = obj["ipInvLine"]
      self.ipRoleCd:str = obj["ipRoleCd"]
      self.ipProposedValue:int = obj["ipProposedValue"]
      pass

class CheckLineSubTotal_output:
   def __init__(self, obj):
      pass

class CheckPaymentMethod_input:
   """ Required : 
   ipPaymentMethod
   ds
   """  
   def __init__(self, obj):
      self.ipPaymentMethod:int = obj["ipPaymentMethod"]
      """  Payment Method ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckPaymentMethod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckRateGrpCode_input:
   """ Required : 
   ipRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.ipRateGrpCode:str = obj["ipRateGrpCode"]
      """  Currency Rate Group Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckRateGrpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckRevChrgBeforeUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckRevChrgBeforeUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.OpMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CheckTaxRateGrpCode_input:
   """ Required : 
   ipRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.ipRateGrpCode:str = obj["ipRateGrpCode"]
      """  Currency Rate Group Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckTaxRateGrpCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckTaxRgn_input:
   """ Required : 
   ipTaxRgnCode
   ds
   """  
   def __init__(self, obj):
      self.ipTaxRgnCode:str = obj["ipTaxRgnCode"]
      """  Currency Rate Group Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CheckTaxRgn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CheckVendorTaxID_input:
   """ Required : 
   vendorID
   """  
   def __init__(self, obj):
      self.vendorID:str = obj["vendorID"]
      pass

class CheckVendorTaxID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.errMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class CompletePrecalcWHTax_input:
   """ Required : 
   ipGroupID
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      pass

class CompletePrecalcWHTax_output:
   def __init__(self, obj):
      pass

class CreateAPInvGrp_input:
   """ Required : 
   sFromGroupID
   sToGrouID
   """  
   def __init__(self, obj):
      self.sFromGroupID:str = obj["sFromGroupID"]
      """  string Original GroupID  """  
      self.sToGrouID:str = obj["sToGrouID"]
      """  string new GroupID value  """  
      pass

class CreateAPInvGrp_output:
   def __init__(self, obj):
      pass

class CreateCancellationInvoice_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   sourceVendorNum
   newInvoiceNum
   newInvoiceDate
   newDocType
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:str = obj["sourceInvoiceNum"]
      """  Invoice num which should be cancel  """  
      self.sourceVendorNum:int = obj["sourceVendorNum"]
      """  Invoice vendor num  """  
      self.newInvoiceNum:str = obj["newInvoiceNum"]
      """  Invoice num provided by user  """  
      self.newInvoiceDate:str = obj["newInvoiceDate"]
      """  Date of new invoice  """  
      self.newDocType:str = obj["newDocType"]
      """  Document Type for the new invoice  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CreateCancellationInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.grpTotalInvAmt:int = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      pass

      """  output parameters  """  

class CreateCorrectionInvoice_input:
   """ Required : 
   groupID
   sourceInvoiceNum
   sourceVendorNum
   newInvoiceNum
   newInvoiceDate
   newDocType
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  Current group for new invoice  """  
      self.sourceInvoiceNum:str = obj["sourceInvoiceNum"]
      """  Invoice num which should be corrected  """  
      self.sourceVendorNum:int = obj["sourceVendorNum"]
      """  Invoice vendor num  """  
      self.newInvoiceNum:str = obj["newInvoiceNum"]
      """  Invoice num provided by user  """  
      self.newInvoiceDate:str = obj["newInvoiceDate"]
      """  Date of new invoice  """  
      self.newDocType:str = obj["newDocType"]
      """  Document Type for the new invoice  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CreateCorrectionInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.grpTotalInvAmt:int = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      pass

      """  output parameters  """  

class CreateJobMtl_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class CreateJobMtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class CreateNotInvRcptInvoice_input:
   """ Required : 
   ds
   selectionMode
   ipVendorList
   ipNewGroupID
   invoiceNum
   invoiceDate
   docTypeID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvGetNotInvRecSourceTableset] = obj["ds"]
      self.selectionMode:str = obj["selectionMode"]
      self.ipVendorList:str = obj["ipVendorList"]
      self.ipNewGroupID:str = obj["ipNewGroupID"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceDate:str = obj["invoiceDate"]
      self.docTypeID:str = obj["docTypeID"]
      pass

class CreateNotInvRcptInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvGetNotInvRecSourceTableset] = obj["ds"]
      self.opNewInvoiceNum:str = obj["parameters"]
      self.opErrMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class CreateRecurInvoice_input:
   """ Required : 
   ipVendorList
   ipCycleCodesList
   ipSelectedVendorNum
   ipSelectedInvoiceNum
   ipNewGroupID
   ipFirstDayOfWeek
   """  
   def __init__(self, obj):
      self.ipVendorList:str = obj["ipVendorList"]
      """  Vendors for which source invoices should be taken  """  
      self.ipCycleCodesList:str = obj["ipCycleCodesList"]
      """  Cycle Codes for which source invoices should be taken  """  
      self.ipSelectedVendorNum:str = obj["ipSelectedVendorNum"]
      """  Vendors of selected invoices  """  
      self.ipSelectedInvoiceNum:str = obj["ipSelectedInvoiceNum"]
      """  Numbers of selected invoice  """  
      self.ipNewGroupID:str = obj["ipNewGroupID"]
      """  Group ID for new invoice  """  
      self.ipFirstDayOfWeek:int = obj["ipFirstDayOfWeek"]
      """  First day of the week from Client system settings  """  
      pass

class CreateRecurInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opNewInvoiceNum:str = obj["parameters"]
      self.opErrMsg:str = obj["parameters"]
      self.inactiveVendorMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class DecodeISRCodeLine_input:
   """ Required : 
   ipISRCodeLine
   """  
   def __init__(self, obj):
      self.ipISRCodeLine:str = obj["ipISRCodeLine"]
      """  ISR Code Line for decoding  """  
      pass

class DecodeISRCodeLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opSlipType:str = obj["parameters"]
      self.opSlipCode:str = obj["parameters"]
      self.opAmount:int = obj["parameters"]
      self.opCurrencyCode:str = obj["parameters"]
      self.opCurrencyID:str = obj["parameters"]
      self.opISRRefNum:str = obj["parameters"]
      self.opVendorNum:int = obj["parameters"]
      self.opVendorID:str = obj["parameters"]
      self.opVendorName:str = obj["parameters"]
      pass

      """  output parameters  """  

class DeleteAmortizationSchedule_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class DeleteAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeleteAmortizationSchedulesOfGroup_input:
   """ Required : 
   groupID
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class DeleteAmortizationSchedulesOfGroup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeleteByID_input:
   """ Required : 
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class DeleteByID_output:
   def __init__(self, obj):
      pass

class DeleteMaster_input:
   """ Required : 
   ds
   cGroupID
   keyValue
   keyValue2
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current APInvGrp GroupID  """  
      self.keyValue:str = obj["keyValue"]
      """  VendorNum  """  
      self.keyValue2:str = obj["keyValue2"]
      """  InvoiceNum  """  
      pass

class DeleteMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      pass

      """  output parameters  """  

class DeselectSelectedLateCosts_input:
   """ Required : 
   ds
   vendorNum
   purPoint
   packSlip
   containerID
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      """  The APInvHed Vendor Number  """  
      self.purPoint:str = obj["purPoint"]
      """  The PurPoint of the current late cost  """  
      self.packSlip:str = obj["packSlip"]
      """  The PackSlip of the current late cost.  """  
      self.containerID:int = obj["containerID"]
      """  The ContainerID of the current late cost.  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  The current InvoiceNum.  """  
      pass

class DeselectSelectedLateCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeselectSelectedRcptLines_AdditionalActions_input:
   """ Required : 
   ds
   VendorNum
   PurPoint
   PackSlip
   isDropShip
   InvoiceNum
   iPONum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.VendorNum:int = obj["VendorNum"]
      self.PurPoint:str = obj["PurPoint"]
      self.PackSlip:str = obj["PackSlip"]
      self.isDropShip:bool = obj["isDropShip"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.iPONum:int = obj["iPONum"]
      pass

class DeselectSelectedRcptLines_AdditionalActions_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class DeselectSelectedRcptLines_input:
   """ Required : 
   ds
   VendorNum
   PurPoint
   PackSlip
   isDropShip
   InvoiceNum
   iPONum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.VendorNum:int = obj["VendorNum"]
      """  Current Vendor Num  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Current PurPoin  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Current Packslip  """  
      self.isDropShip:bool = obj["isDropShip"]
      """  isDropShip  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Current InvoiceNum  """  
      self.iPONum:int = obj["iPONum"]
      """  Current PONum  """  
      pass

class DeselectSelectedRcptLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class EnableAPDates_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.EnApplyDate:bool = obj["EnApplyDate"]
      self.EnTaxPDate:bool = obj["EnTaxPDate"]
      self.EnTaxRDate:bool = obj["EnTaxRDate"]
      pass

      """  output parameters  """  

class Erp_Tablesets_APIHAPInvExpRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number to which this record is related.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine to which this record is related.  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  An internally assigned number used as part of the unique key to the record.  """  
      self.ExpAmt:int = obj["ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.RefType:str = obj["RefType"]
      """  Link to the related GLRefTyp.RefType. Not displayed.  """  
      self.RefCode:str = obj["RefCode"]
      """  Link to the related Code in GLRefCod.RefCode  """  
      self.RefCodeDesc:str = obj["RefCodeDesc"]
      """  THIS SHOULD BE DELETED WITH SONOMA! GL Reference Code description.  """  
      self.Rpt1ExpAmt:int = obj["Rpt1ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt2ExpAmt:int = obj["Rpt2ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt3ExpAmt:int = obj["Rpt3ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.DocExpAmt:int = obj["DocExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.NonDedTax:bool = obj["NonDedTax"]
      """  Non-Deductible Tax  """  
      self.NonDedTaxRelatedToSchema:str = obj["NonDedTaxRelatedToSchema"]
      """  Non-Deductible Tax Related table schema  """  
      self.NonDedTaxRelatedToTable:str = obj["NonDedTaxRelatedToTable"]
      """  Non-Deductible Tax Related table.  """  
      self.NonDedTaxRelatedToSysRowID:str = obj["NonDedTaxRelatedToSysRowID"]
      """  Non-Deductible Tax SysRowID  """  
      self.RefDisplayAccount:str = obj["RefDisplayAccount"]
      self.ScrExpAmt:int = obj["ScrExpAmt"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.EnableRefCode:bool = obj["EnableRefCode"]
      self.RefCodeList:str = obj["RefCodeList"]
      self.Posted:bool = obj["Posted"]
      self.GroupID:str = obj["GroupID"]
      self.RefCodeStatus:str = obj["RefCodeStatus"]
      """  Indicates if Reference Code is (M)andatory, (O)ptional, (E)xcluded or Blank.  Enable Reference Code if "M" or "O".  """  
      self.DispGLAcct:str = obj["DispGLAcct"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocScrExpAmt:int = obj["DocScrExpAmt"]
      self.Rpt1ScrExpAmt:int = obj["Rpt1ScrExpAmt"]
      self.Rpt2ScrExpAmt:int = obj["Rpt2ScrExpAmt"]
      self.Rpt3ScrExpAmt:int = obj["Rpt3ScrExpAmt"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.GLAccount:str = obj["GLAccount"]
      """  The column to make GL Control on user interface work properly.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPInvExpTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  InvExpSeq of APInvExp  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum of APInvExp  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPInvMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  Duplicated  from the related APInvHed record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the InvcDetl record for the Invoice and the adding 1 to it.  """  
      self.MscNum:int = obj["MscNum"]
      """  Number automatically assigned by invoice entry which is used along with VendorNum, InvoiceNum and InvoiceLine to uniquely identify the miscellaneous record within the invoice.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Code that relates this invoice miscellaneous charge to the PurMisc master. Entered via a DDSL widget.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. Defaulted from PurMisc.Description.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  miscellaneous amount.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  miscellaneous amount in the vendor currency.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that this miscellaneous record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  PO line number that this miscellaneous record is related to. If related to the PO Header then this field is zero.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence number of the Miscellaneous Charge  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """   Identifies Tax Category for this Misc. item.
Defaults from PurMisc.TaxCatID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbMscNum:int = obj["GlbMscNum"]
      """  Global Invoice Miscellaneous Charge identifier.  Used in Consolidated Purchasing.  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  Reference to the APInvExp record that contains the gl distribution for this charge.  """  
      self.LCFlag:bool = obj["LCFlag"]
      """  Indicates if the AP Miscellaneous Charge is for Landed Cost.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Container Shipment ID (also known as the ContainerID).  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID of the associated receipt's indirect cost.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip # of the associated receipt's indirect cost.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.LCVendorNum:int = obj["LCVendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  This field, together with the PackSlip and PurPoint, is used to link the APInvMsc to the RcvMisc record that references this misc charge as a Landed Cost's Indirect Cost.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Like PurMisc.LCDisburseMethod. Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  miscellaneous amount including taxes.  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  miscellaneous amount in the vendor currency including taxes.  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  NoTaxRecalc  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  Code1099ID  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Gen1099Code  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.PlasticPackTaxReportID:str = obj["PlasticPackTaxReportID"]
      """  The Plastic Packaging Tax Report ID.  """  
      self.AllocBasis:int = obj["AllocBasis"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocAllocAmt:int = obj["DocAllocAmt"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.DocUnallocAmt:int = obj["DocUnallocAmt"]
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.LCEnabled:bool = obj["LCEnabled"]
      self.Posted:bool = obj["Posted"]
      self.RecordSource:str = obj["RecordSource"]
      self.Rpt1AllocAmt:int = obj["Rpt1AllocAmt"]
      self.Rpt1ScrMiscAmt:int = obj["Rpt1ScrMiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt1UnallocAmt:int = obj["Rpt1UnallocAmt"]
      self.Rpt2AllocAmt:int = obj["Rpt2AllocAmt"]
      self.Rpt2ScrMiscAmt:int = obj["Rpt2ScrMiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt2UnallocAmt:int = obj["Rpt2UnallocAmt"]
      self.Rpt3AllocAmt:int = obj["Rpt3AllocAmt"]
      self.Rpt3ScrMiscAmt:int = obj["Rpt3ScrMiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.Rpt3UnallocAmt:int = obj["Rpt3UnallocAmt"]
      self.ScrDocMiscAmt:int = obj["ScrDocMiscAmt"]
      self.ScrMiscAmt:int = obj["ScrMiscAmt"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.UnallocAmt:int = obj["UnallocAmt"]
      self.AllocAmt:int = obj["AllocAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.Code1099Description:str = obj["Code1099Description"]
      self.FormTypeDescription:str = obj["FormTypeDescription"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.MiscCodeLCDisburseMethod:str = obj["MiscCodeLCDisburseMethod"]
      self.MiscCodeLCAmount:int = obj["MiscCodeLCAmount"]
      self.MiscCodeLCCurrencyCode:str = obj["MiscCodeLCCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APIHAPLnTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisableManual:bool = obj["DisableManual"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.DocScrTaxAmtVar:int = obj["DocScrTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlDEASchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine  """  
      self.AmortSeq:int = obj["AmortSeq"]
      """  Internal identifier used to keep the records unique  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  FiscalCalendarID  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  FiscalYear  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  FiscalYearSuffix  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  FiscalPeriod  """  
      self.AmortDate:str = obj["AmortDate"]
      """  Amortization Date  """  
      self.AmortPercent:int = obj["AmortPercent"]
      """  Amortization Percent  """  
      self.AmortAmt:int = obj["AmortAmt"]
      """  Amortization Amount  """  
      self.Rpt1AmortAmt:int = obj["Rpt1AmortAmt"]
      """  Amortization Amount in Rpt1 Currency  """  
      self.Rpt2AmortAmt:int = obj["Rpt2AmortAmt"]
      """  Amortization Amount in Rpt2 Currency  """  
      self.Rpt3AmortAmt:int = obj["Rpt3AmortAmt"]
      """  Amortization Amount in Rpt3 Currency  """  
      self.DocAmortAmount:int = obj["DocAmortAmount"]
      """  Amortization Amount in Doc Currency  """  
      self.Hold:bool = obj["Hold"]
      """  Indicates if this amortization period is on hold  """  
      self.HoldReasonCode:str = obj["HoldReasonCode"]
      """  Descriptive code assigned by user which uniquely identifies a reason code master record and identifies why an amortization period is on hold  """  
      self.HoldText:str = obj["HoldText"]
      """  Descriptive text further explaining why an amortization period is on hold  """  
      self.Posted:bool = obj["Posted"]
      """  Posted  """  
      self.PostedDate:str = obj["PostedDate"]
      """  Posted Date  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  TranDocTypeID  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  LegalNumber  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      self.DocAmortAmt:int = obj["DocAmortAmt"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DspAmortAmt:int = obj["DspAmortAmt"]
      self.DocDspAmortAmt:int = obj["DocDspAmortAmt"]
      self.Rpt1DspAmortAmt:int = obj["Rpt1DspAmortAmt"]
      self.Rpt2DspAmortAmt:int = obj["Rpt2DspAmortAmt"]
      self.Rpt3DspAmortAmt:int = obj["Rpt3DspAmortAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company, VendorNum and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the APInvDtl record for the Invoice and the adding 1 to it.  """  
      self.LineType:str = obj["LineType"]
      """  Indicates the type of invoice line. "R" = Invoiced for Receipt of goods, "A" - Advance Billing,  "M" - Misc. Billing, "U" - Unreceived goods, "J" - Job Miscellaneous charge A/P invoice, "S" - Asset Invoice Line.  Not directly entered,  set by invoice entry by the user selecting the appropriate menu option.  """  
      self.UnitCost:int = obj["UnitCost"]
      """  item's unit cost in the vendors unit of measure.  Default can be obtained from the PODetail.UnitCost if related.  """  
      self.DocUnitCost:int = obj["DocUnitCost"]
      """  item's unit cost in the vendors unit of measure and currency.  Default can be obtained from the PODetail.DocUnitCost if related.  """  
      self.PartNum:str = obj["PartNum"]
      """  Part number used to identify line item part.  """  
      self.PONum:int = obj["PONum"]
      """   Purchase Order Number that this invoice line item is related to. If packing slip is referenced then it is set = to RcvDtl.PONum and can't be changed.  If entered it must be a valid POHeader record.
A reference is made to the purchase order using PONUM, POLine and PORelNum fields. If any one of these fields are entered then they all must be entered and be valid.  """  
      self.POLine:int = obj["POLine"]
      """  The PO line # that invoice is for. Defaulted from the RvcDtl if referenced to packing slip document.. Only applicable when PO is referenced.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase Order Release # which is being invoiced. Defaulted from RcvDtl if related to a packing slip. If entered it Must be valid.  """  
      self.Description:str = obj["Description"]
      """  Invoice line description.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job that this invoice is related to. Set to the RcvDtl.JobNum.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Job Assembly Sequence that this invoice line is related to. Set to RcvDtl.AssemblySeq.  """  
      self.JobSeqType:str = obj["JobSeqType"]
      """  Indicates if this invoice line is related to a job material (jobmtl) or job subcontract (JobOper) record. Valid values are "M" = material or "S" = subcontract. This is set to RvcDtl.JobSeqType.  """  
      self.JobSeq:int = obj["JobSeq"]
      """  Seq # of specific material or subcontract operation record to which this line item is costed against. Defaults from the RcvDtl.JobSeq. Only applicable for a receipts to job.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendor's purchase point ID. This is used as part of the foreign key to reference the RcvHead/RcvDtl records.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendor's packing slip that this A\P invoice detail line is associated with. This Along with PackLine provides a relationship to the receipt document detail (RcvDtl)  """  
      self.PackLine:int = obj["PackLine"]
      """  The Pack Slip line of the RcvDtl record  to which this A\P detail record is related to.  """  
      self.VendorQty:int = obj["VendorQty"]
      """  Total Invoiced Quantity for the line item.  This is stored in the Vendors Unit of Measure.  Can be defaulted from the packing slip detail if referenced (RcvDtl.POReceiptQty)  """  
      self.PUM:str = obj["PUM"]
      """  Unit of Measure code for the vendor's quantity. Defaulted in the following hierarchy: from the RcvDel.PUM if packing slip is referenced, from PODetail.PUM if PO is referenced, from Part.PUM if valid part or finally from XaSyst.DefaultUM.  """  
      self.OurQty:int = obj["OurQty"]
      """  Invoiced Quantity for the line item in our unit of measure. This can be defaulted from the packing slip detail if referenced (RcvDtl.ReceiptQty)  """  
      self.IUM:str = obj["IUM"]
      """  Unit of Measure code for invoiced quantity in our unit of measure. Defaulted in the following hierarchy: from the RcvDel.IUM if packing slip is referenced, from PODetail.IUM if PO is referenced, from Part.IUM if valid part or finally from XaSyst.DefaultUM.  """  
      self.CostPerCode:str = obj["CostPerCode"]
      """   Indicates the costing per quantity. It can be "E" = per each,
"C" = per hundred,  "M" = per thousand. Used to calculate the extended unit cost for the line item. The logic is to divide the APInvDtl.VendorQty by the appropriate "per" value and then multiply by unit cost.  Use the PODetail.CostPerCode if related to a PO else use Part.PricePerCode if valid part. Else default as "E".
Valid database values are "E" = Each, "C" = per 100 or "M" = per 1,000.  """  
      self.VenPartNum:str = obj["VenPartNum"]
      """  Vendor's part number. Optional, defaults from the RcvDtl, PODetail or blank.  """  
      self.ExtCost:int = obj["ExtCost"]
      """  Extended Cost for the invoice line item. Calculated as the (VendorQty/CostPer) * UnitCost or can be directly maintained in which case it recalculates the UnitCost value.  """  
      self.DocExtCost:int = obj["DocExtCost"]
      """  Extended Cost for the invoice line item in Vendors currency. Calculated as the (VendorQty/CostPer) * UnitCost or can be directly maintained in which case it recalculates the UnitCost value.  """  
      self.TotalMiscChrg:int = obj["TotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line.  """  
      self.DocTotalMiscChrg:int = obj["DocTotalMiscChrg"]
      """  Non-Maintainable.  Rolled up total of all misc. charge records for this invoice detail line in vendors currency.  """  
      self.LineComment:str = obj["LineComment"]
      """  Used to establish invoice comments about the invoice line.  """  
      self.MatchDate:str = obj["MatchDate"]
      """  Mirror image of related RCVHead.ReceiptDate.  Only applies to LineType = U. Updated during the Invoice/Receipt match posting process if GLSyst.PostInvtyWipCos = No.  This date is used as the journal date and to determine the fiscal period when the Invoice/Receipt process is responsible for generating the GL entries. (See CaMatchingDiv description)  """  
      self.MatchFiscalYear:int = obj["MatchFiscalYear"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.MatchFiscalPeriod:int = obj["MatchFiscalPeriod"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.TaxExempt:str = obj["TaxExempt"]
      """  Indicates if this item is exempt from sales tax for this line item.  If field is non-blank it is considered exempt.  This code is totally user definable and no validation is required.  This field is intended to be used for analysis purposes.  When the value is changed from blank to non-blank or vice versa tax calculation logic kicks in to calculate the sales tax info.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this line item.  Defaults from the Part Master.  """  
      self.AdvancePayAmt:int = obj["AdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments.    It is defaulted from the PODetail.AdvancePayBal.  This value reduces the PODetail.AdvancePayBal.  """  
      self.DocAdvancePayAmt:int = obj["DocAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments.   It is defaulted from the PODetail.AdvancePayBal.  This value reduces the PODetail.AdvancePayBal.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  Purchase Code.  """  
      self.LineDiscAmt:int = obj["LineDiscAmt"]
      """  Discount amount for this line  """  
      self.DocLineDiscAmt:int = obj["DocLineDiscAmt"]
      """  Discount amount (Vendors Currency) for this line  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.AdvGainLoss:int = obj["AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.MultiCompany:bool = obj["MultiCompany"]
      """  Flag to indicate that G/L entries appearing under this invoice line will have multi-company journals entered at the target external company.  """  
      self.RevChargeMethod:str = obj["RevChargeMethod"]
      """   Indicates what VAT Reverse Charge method needs to be applied for this invoice line.  The possible values are:
   "RCT"  -  "Reverse Charge with Threshold";
   "RCN"  -  "Reverse Charge with No Threshold"
Leave this field blank if no Reverse Charge should be applied in the AP invoice line.  """  
      self.OverrideReverseCharge:bool = obj["OverrideReverseCharge"]
      """  Indicates if the user overrides the Reverse Charge Method.  """  
      self.RevChargeApplied:bool = obj["RevChargeApplied"]
      """  Indicates if Reverse Charge tax line has been applied.  """  
      self.Rpt1AdvancePayAmt:int = obj["Rpt1AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2AdvancePayAmt:int = obj["Rpt2AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3AdvancePayAmt:int = obj["Rpt3AdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1ExtCost:int = obj["Rpt1ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2ExtCost:int = obj["Rpt2ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3ExtCost:int = obj["Rpt3ExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt1LineDiscAmt:int = obj["Rpt1LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2LineDiscAmt:int = obj["Rpt2LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3LineDiscAmt:int = obj["Rpt3LineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TotalMiscChrg:int = obj["Rpt1TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalMiscChrg:int = obj["Rpt2TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalMiscChrg:int = obj["Rpt3TotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnitCost:int = obj["Rpt1UnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnitCost:int = obj["Rpt2UnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnitCost:int = obj["Rpt3UnitCost"]
      """  Reporting currency value of this field  """  
      self.DocAdvPayAppld:int = obj["DocAdvPayAppld"]
      """  Amount of advance payment applied  """  
      self.Rpt1AdvGainLoss:int = obj["Rpt1AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt2AdvGainLoss:int = obj["Rpt2AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.Rpt3AdvGainLoss:int = obj["Rpt3AdvGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.MatchFiscalYearSuffix:str = obj["MatchFiscalYearSuffix"]
      """  Applies only to UnReceived Lines (LineType = U). Update via the Invoice/Receipt Match program when Inventory is NOT interfaced to G/L.  """  
      self.MatchFiscalCalendarID:str = obj["MatchFiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  The Tax Region for this invoice.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Supplier Shipment ID (also known as the ContainerID).  """  
      self.DropShipPackLine:int = obj["DropShipPackLine"]
      """  Drop Shipment Pack Line  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Drop shipment Packing Slip.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.TaxConnectCalc:bool = obj["TaxConnectCalc"]
      """  If true, the InvcTax records tied to this line are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  """  
      self.AssetNum:str = obj["AssetNum"]
      """  Asset number of the linked Asset Addition transaction.  """  
      self.AdditionNum:int = obj["AdditionNum"]
      """  Addition Number or sequence of the linked Asset Addition transaction.  """  
      self.InvoiceLineRef:int = obj["InvoiceLineRef"]
      """  Used in a correction invoice to store reference to the original invoice line.  """  
      self.DocAssetInvoiceBal:int = obj["DocAssetInvoiceBal"]
      """  This is the current invoice line balance (in vendor currency) left to be consumed in the asset addition process.  An asset invoice line can be linked to one or more assets and each asset addition linking to this invoice line will reduce the balance of this DocAssetInvoiceBal.  When this field reaches zero then this invoice line cannot be linked in the asset addition anymore.  """  
      self.AssetBalOurQty:int = obj["AssetBalOurQty"]
      """  This is the Invoiced Quantity balance left to be consumed in the asset addition process.  An asset invoice line can be linked to one or more assets and each asset addition linking to this invoice line will reduce the balance qty of this AssetBalOurQty.  When this field reaches zero then this invoice line cannot be linked in the asset addition anymore.  This qty is expressed in our unit of measure.  """  
      self.AssetQtyIUM:str = obj["AssetQtyIUM"]
      """  Unit of Measure code for asset invoiced quantity balance in our unit of measure.  """  
      self.DMRNum:int = obj["DMRNum"]
      """  The DMR Number that requires supplier credit.  """  
      self.DMRActionNum:int = obj["DMRActionNum"]
      """  The Action Number for the DMR that requires supplier credit.  """  
      self.CreatedFromExpense:bool = obj["CreatedFromExpense"]
      """  Indicates if this invoice line was created from an EmpExpense record.  """  
      self.InUnitCost:int = obj["InUnitCost"]
      """  item's unit cost in the vendors unit of measure including taxes.  """  
      self.DocInUnitCost:int = obj["DocInUnitCost"]
      """  item's unit cost in the vendors unit of measure and currency including taxes.  """  
      self.Rpt1InUnitCost:int = obj["Rpt1InUnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2InUnitCost:int = obj["Rpt2InUnitCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3InUnitCost:int = obj["Rpt3InUnitCost"]
      """  Reporting currency value of this field  """  
      self.InExtCost:int = obj["InExtCost"]
      """  Extended Cost for the invoice line item including taxes.  """  
      self.DocInExtCost:int = obj["DocInExtCost"]
      """   Extended Cost for the invoice line item in Vendors currency
including taxes  """  
      self.Rpt1InExtCost:int = obj["Rpt1InExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt2InExtCost:int = obj["Rpt2InExtCost"]
      """  Reporting currency value of this field  """  
      self.Rpt3InExtCost:int = obj["Rpt3InExtCost"]
      """  Reporting currency value of this field  """  
      self.InTotalMiscChrg:int = obj["InTotalMiscChrg"]
      """  Rolled up total of all misc. charge records for this invoice detail line including taxes.  """  
      self.DocInTotalMiscChrg:int = obj["DocInTotalMiscChrg"]
      """  Rolled up total of all misc. charge records for this invoice detail line in vendors currency including taxes.  """  
      self.Rpt1InTotalMiscChrg:int = obj["Rpt1InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt2InTotalMiscChrg:int = obj["Rpt2InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.Rpt3InTotalMiscChrg:int = obj["Rpt3InTotalMiscChrg"]
      """  Reporting currency value of this field  """  
      self.InAdvancePayAmt:int = obj["InAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments (incl taxes).  """  
      self.DocInAdvancePayAmt:int = obj["DocInAdvancePayAmt"]
      """  The amount this line item that is reduced by due to prior advanced payments (incl taxes).  """  
      self.Rpt1InAdvancePayAmt:int = obj["Rpt1InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InAdvancePayAmt:int = obj["Rpt2InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InAdvancePayAmt:int = obj["Rpt3InAdvancePayAmt"]
      """  Reporting currency value of this field  """  
      self.InLineDiscAmt:int = obj["InLineDiscAmt"]
      """  Discount amount for this line including taxes  """  
      self.DocInLineDiscAmt:int = obj["DocInLineDiscAmt"]
      """  Discount amount (Vendors Currency) for this line including taxes  """  
      self.Rpt1InLineDiscAmt:int = obj["Rpt1InLineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InLineDiscAmt:int = obj["Rpt2InLineDiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InLineDiscAmt:int = obj["Rpt3InLineDiscAmt"]
      self.NoTaxRecal:bool = obj["NoTaxRecal"]
      """  Indicates if no tax recalculation by the system is  supposed to be done since with "In Price" tax calculation the tax lines were adjusted or new tax lines added manually  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ScrWithholdAmt:int = obj["ScrWithholdAmt"]
      """  Withholding Tax Amount  """  
      self.DocScrWithholdAmt:int = obj["DocScrWithholdAmt"]
      """  Withholding Tax Amount in document currency  """  
      self.Rpt1ScrWithholdAmt:int = obj["Rpt1ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.Rpt2ScrWithholdAmt:int = obj["Rpt2ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.Rpt3ScrWithholdAmt:int = obj["Rpt3ScrWithholdAmt"]
      """  Withholding Tax Amount in reporting currency  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  Invoice Reference Number  """  
      self.APTranNo:int = obj["APTranNo"]
      """  AP Transaction Number  """  
      self.DocAdvPayAppliedAmt:int = obj["DocAdvPayAppliedAmt"]
      """  DocAdvPayAppliedAmt  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  1099 Code, defaults from Supplier  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Generated 1099 Code where this invoice was calculated in the 1099 Form  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.DEIsServices:bool = obj["DEIsServices"]
      """  DEIsServices  """  
      self.DEIsSecurityFinancialDerivative:bool = obj["DEIsSecurityFinancialDerivative"]
      """  DEIsSecurityFinancialDerivative  """  
      self.DEInternationalSecuritiesID:str = obj["DEInternationalSecuritiesID"]
      """  DEInternationalSecuritiesID  """  
      self.DEIsInvestment:bool = obj["DEIsInvestment"]
      """  DEIsInvestment  """  
      self.DEPayStatCode:str = obj["DEPayStatCode"]
      """  DEPayStatCode  """  
      self.DeferredExp:bool = obj["DeferredExp"]
      """  DeferredExp  """  
      self.DEACode:str = obj["DEACode"]
      """  DEACode  """  
      self.DEAAmt:int = obj["DEAAmt"]
      """  DEAAmt  """  
      self.DEAStartDate:str = obj["DEAStartDate"]
      """  DEAStartDate  """  
      self.DEAEndDate:str = obj["DEAEndDate"]
      """  DEAEndDate  """  
      self.DEDenomination:str = obj["DEDenomination"]
      """  DEDenomination  """  
      self.ExternalPONum:str = obj["ExternalPONum"]
      """  This field is used to store the AVP Purchase Order Number.  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.MYImportNum:str = obj["MYImportNum"]
      """  Malaysia Import Declaration Number  """  
      self.FinalInvoice:bool = obj["FinalInvoice"]
      """  Flag that indicates if the invoice is the final one for the last partial receipt.  """  
      self.CommodityCode:str = obj["CommodityCode"]
      """  CommodityCode  """  
      self.TotalTax:int = obj["TotalTax"]
      """  Total Tax Amount  """  
      self.DocTotalTax:int = obj["DocTotalTax"]
      """  Total Tax Amount  """  
      self.Rpt1TotalTax:int = obj["Rpt1TotalTax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalTax:int = obj["Rpt2TotalTax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalTax:int = obj["Rpt3TotalTax"]
      """  Reporting currency value of this field  """  
      self.TotalSATax:int = obj["TotalSATax"]
      """  Total Self-Assess Tax Amount  """  
      self.DocTotalSATax:int = obj["DocTotalSATax"]
      """  Total Self-Assess Tax Amount  """  
      self.Rpt1TotalSATax:int = obj["Rpt1TotalSATax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalSATax:int = obj["Rpt2TotalSATax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalSATax:int = obj["Rpt3TotalSATax"]
      """  Reporting currency value of this field  """  
      self.TotalDedTax:int = obj["TotalDedTax"]
      """  Total Deductible Tax Amount  """  
      self.DocTotalDedTax:int = obj["DocTotalDedTax"]
      """  Total Deductible Tax Amount  """  
      self.Rpt1TotalDedTax:int = obj["Rpt1TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.Rpt2TotalDedTax:int = obj["Rpt2TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.Rpt3TotalDedTax:int = obj["Rpt3TotalDedTax"]
      """  Reporting currency value of this field  """  
      self.PBInvNum:int = obj["PBInvNum"]
      """  Project Billing Invoice Number  """  
      self.CancellationDtl:bool = obj["CancellationDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Cancellation logic.  """  
      self.AttributeSetID:int = obj["AttributeSetID"]
      """  The unique identifier of the related Dynamic Attribute Set.  """  
      self.AttributeSetDescription:str = obj["AttributeSetDescription"]
      """  The Full Description of the Attribute Set.  """  
      self.AttributeSetShortDescription:str = obj["AttributeSetShortDescription"]
      """  The Short Description of the Attribute Set.  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.RevisionNum:str = obj["RevisionNum"]
      """  Revision number which is used to uniquely identify the revision of the part.  """  
      self.ExtSysType:str = obj["ExtSysType"]
      """  Used for integrations - system type for URL specified in ExtSysURL - B = BisTrack / L = LumberTrack / F = FiberTrack / blank = Building Supply  """  
      self.ExtSysURL:str = obj["ExtSysURL"]
      """  URL for drill back to an integrated external system  """  
      self.AdjustmentValue:int = obj["AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.AllocationAmount:int = obj["AllocationAmount"]
      self.AllocationDesc:str = obj["AllocationDesc"]
      self.AllocationID:str = obj["AllocationID"]
      self.AllowGLDistAdd:bool = obj["AllowGLDistAdd"]
      self.AllowGLDistAllocation:bool = obj["AllowGLDistAllocation"]
      self.AllowGLDistDelete:bool = obj["AllowGLDistDelete"]
      self.AllowJobMiscAdd:bool = obj["AllowJobMiscAdd"]
      self.AllowJobMiscDelete:bool = obj["AllowJobMiscDelete"]
      self.AllowJobMiscUpdate:bool = obj["AllowJobMiscUpdate"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencyID:str = obj["CurrencyID"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DEACodeDesc:str = obj["DEACodeDesc"]
      self.DEAScheduled:bool = obj["DEAScheduled"]
      """  Is Deferred Expense Amortization Scheduled  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      self.Distributed:int = obj["Distributed"]
      """  DEA Distributed Amount  """  
      self.DocAdjustmentValue:int = obj["DocAdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.DocAllocationAmount:int = obj["DocAllocationAmount"]
      self.DocDistributed:int = obj["DocDistributed"]
      """  DEA Distributed Amount in Doc Currency  """  
      self.DocDspLineTotal:int = obj["DocDspLineTotal"]
      self.DocExpense:int = obj["DocExpense"]
      """  DEA Expense Amount in Doc Currency  """  
      self.DocGLLineTotal:int = obj["DocGLLineTotal"]
      self.DocInTaxAmt:int = obj["DocInTaxAmt"]
      self.DocLineExpenses:int = obj["DocLineExpenses"]
      self.DocLineSubtotal:int = obj["DocLineSubtotal"]
      self.DocLineTotal:int = obj["DocLineTotal"]
      self.DocNonDeducTaxExpense:int = obj["DocNonDeducTaxExpense"]
      self.DocOrgExtCost:int = obj["DocOrgExtCost"]
      """  Value of original Ext Cost in document currency. Used for adjustment lines.  """  
      self.DocPEDetAmt:int = obj["DocPEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.DocRecognized:int = obj["DocRecognized"]
      """  DEA Recognized Amount in Doc Currency  """  
      self.DocRemaining:int = obj["DocRemaining"]
      """  DEA Remaining Amount in Doc Currency  """  
      self.DocScrInvoiceBal:int = obj["DocScrInvoiceBal"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.DocScrUnitCost:int = obj["DocScrUnitCost"]
      self.DocTotDistribAmt:int = obj["DocTotDistribAmt"]
      """  This is the value of the lines that have been entered. In Document Currency  """  
      self.DocUnrecognized:int = obj["DocUnrecognized"]
      """  DEA Unrecognized Amount in Doc Currency  """  
      self.DocVariance:int = obj["DocVariance"]
      self.DropShipment:bool = obj["DropShipment"]
      """  Drop Shipment  """  
      self.DspAllocationAmount:int = obj["DspAllocationAmount"]
      self.DspLineTotal:int = obj["DspLineTotal"]
      self.EnableDiscountAmt:bool = obj["EnableDiscountAmt"]
      self.EnableIntrastat:bool = obj["EnableIntrastat"]
      """  Indicates if intrastat is available for the line.  """  
      self.EnableIntrastatDsp:bool = obj["EnableIntrastatDsp"]
      """  Indicates if intrastat is available for to be diplayed for the line. Used by AP invoice tracker  """  
      self.EnablePurchaseCode:bool = obj["EnablePurchaseCode"]
      self.EnableRevCharge:bool = obj["EnableRevCharge"]
      """  Indicates if Override Reverse Charge check box should be enabled.  """  
      self.EnableScrWithholdAmt:bool = obj["EnableScrWithholdAmt"]
      self.EnableShipmentID:bool = obj["EnableShipmentID"]
      self.EnableSubCData:bool = obj["EnableSubCData"]
      self.EnableSupplierXRef:bool = obj["EnableSupplierXRef"]
      """  Use this field to enable\disable the Supplier Part XRef button  """  
      self.Expense:int = obj["Expense"]
      """  DEA Expense Amount  """  
      self.GLAccount:str = obj["GLAccount"]
      self.GLLineTotal:int = obj["GLLineTotal"]
      self.GridVenPartNum:str = obj["GridVenPartNum"]
      """  The VenPartNum field for the datagrid.  For display purposes only.  """  
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.InTaxAmt:int = obj["InTaxAmt"]
      self.IsAdvance:bool = obj["IsAdvance"]
      """  To determine if line have Advance Billing Line  """  
      self.JPTaxAdjustment:bool = obj["JPTaxAdjustment"]
      """  Japan Tax Adjustment Line  """  
      self.LineExpenses:int = obj["LineExpenses"]
      self.LineSubtotal:int = obj["LineSubtotal"]
      self.LineTotal:int = obj["LineTotal"]
      self.LineTypeDescription:str = obj["LineTypeDescription"]
      self.NonDeducTaxExpense:int = obj["NonDeducTaxExpense"]
      self.OrgExtCost:int = obj["OrgExtCost"]
      """  Value of original Ext Cost in base currency. Used for adjustment lines.  """  
      self.PEDetAmt:int = obj["PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.POCostPerCode:str = obj["POCostPerCode"]
      self.PODocUnitCost:int = obj["PODocUnitCost"]
      self.POLineDesc:str = obj["POLineDesc"]
      self.POPartNum:str = obj["POPartNum"]
      self.POPUM:str = obj["POPUM"]
      self.POReceivedQty:int = obj["POReceivedQty"]
      self.PORelIUM:str = obj["PORelIUM"]
      """  PO Rel Our UOM  """  
      self.PORelOurQty:int = obj["PORelOurQty"]
      """  PO Rel Our Quantity  """  
      self.PORelQty:int = obj["PORelQty"]
      self.Posted:bool = obj["Posted"]
      self.POUnitCost:int = obj["POUnitCost"]
      self.POVenPartNum:str = obj["POVenPartNum"]
      self.POWarn:str = obj["POWarn"]
      self.Print1099:bool = obj["Print1099"]
      """  Print 1099  """  
      self.RcptDestination:str = obj["RcptDestination"]
      self.RcptIUM:str = obj["RcptIUM"]
      """  Receipt Our UOM  """  
      self.RcptOurQty:int = obj["RcptOurQty"]
      """  Receipt Our Quantity  """  
      self.RcptPartDescription:str = obj["RcptPartDescription"]
      self.RcptPartNum:str = obj["RcptPartNum"]
      self.RcptPUM:str = obj["RcptPUM"]
      self.RcptReceiptDate:str = obj["RcptReceiptDate"]
      self.RcptVendorQty:int = obj["RcptVendorQty"]
      self.RcptVenPartNum:str = obj["RcptVenPartNum"]
      self.RecalcGLAcct:bool = obj["RecalcGLAcct"]
      self.Recognized:int = obj["Recognized"]
      """  DEA Recognized Amount  """  
      self.Remaining:int = obj["Remaining"]
      """  DEA Remaining Amount  """  
      self.RevChargeMethodDesc:str = obj["RevChargeMethodDesc"]
      """  Reverse Charge Method description  """  
      self.Rpt1AdjustmentValue:int = obj["Rpt1AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt1AllocationAmount:int = obj["Rpt1AllocationAmount"]
      self.Rpt1Distributed:int = obj["Rpt1Distributed"]
      """  DEA Distributed Amount in Rpt1 Currency  """  
      self.Rpt1DspLineTotal:int = obj["Rpt1DspLineTotal"]
      self.Rpt1Expense:int = obj["Rpt1Expense"]
      """  DEA Expense Amount in Rpt1 Currency  """  
      self.Rpt1GLLineTotal:int = obj["Rpt1GLLineTotal"]
      self.Rpt1InTaxAmt:int = obj["Rpt1InTaxAmt"]
      self.Rpt1LineExpenses:int = obj["Rpt1LineExpenses"]
      self.Rpt1LineSubTotal:int = obj["Rpt1LineSubTotal"]
      self.Rpt1LineTotal:int = obj["Rpt1LineTotal"]
      self.Rpt1NonDeducTaxExpense:int = obj["Rpt1NonDeducTaxExpense"]
      self.Rpt1OrgExtCost:int = obj["Rpt1OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt1PEDetAmt:int = obj["Rpt1PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt1POUnitCost:int = obj["Rpt1POUnitCost"]
      self.Rpt1Recognized:int = obj["Rpt1Recognized"]
      """  DEA Recognized Amount in Rpt1 Currency  """  
      self.Rpt1Remaining:int = obj["Rpt1Remaining"]
      """  DEA Remaining Amount in Rpt1 Currency  """  
      self.Rpt1ScrExtCost:int = obj["Rpt1ScrExtCost"]
      self.Rpt1ScrInvoiceBal:int = obj["Rpt1ScrInvoiceBal"]
      self.Rpt1ScrLineDiscAmt:int = obj["Rpt1ScrLineDiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalMiscChrg:int = obj["Rpt1ScrTotalMiscChrg"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt1ScrUnitCost:int = obj["Rpt1ScrUnitCost"]
      self.Rpt1TotDistribAmt:int = obj["Rpt1TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 1.  """  
      self.Rpt1Unrecognized:int = obj["Rpt1Unrecognized"]
      """  DEA Unrecognized Amount in Rpt1 Currency  """  
      self.Rpt1Variance:int = obj["Rpt1Variance"]
      self.Rpt2AdjustmentValue:int = obj["Rpt2AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt2AllocationAmount:int = obj["Rpt2AllocationAmount"]
      self.Rpt2Distributed:int = obj["Rpt2Distributed"]
      """  DEA Distributed Amount in Rpt2 Currency  """  
      self.Rpt2DspLineTotal:int = obj["Rpt2DspLineTotal"]
      self.Rpt2Expense:int = obj["Rpt2Expense"]
      """  DEA Expense Amount in Rpt2 Currency  """  
      self.Rpt2GLLineTotal:int = obj["Rpt2GLLineTotal"]
      self.Rpt2InTaxAmt:int = obj["Rpt2InTaxAmt"]
      self.Rpt2LineExpenses:int = obj["Rpt2LineExpenses"]
      self.Rpt2LineSubtotal:int = obj["Rpt2LineSubtotal"]
      self.Rpt2LineTotal:int = obj["Rpt2LineTotal"]
      self.Rpt2NonDeducTaxExpense:int = obj["Rpt2NonDeducTaxExpense"]
      self.Rpt2OrgExtCost:int = obj["Rpt2OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt2PEDetAmt:int = obj["Rpt2PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt2POUnitCost:int = obj["Rpt2POUnitCost"]
      self.Rpt2Recognized:int = obj["Rpt2Recognized"]
      """  DEA Recognized Amount in Rpt2 Currency  """  
      self.Rpt2Remaining:int = obj["Rpt2Remaining"]
      """  DEA Remaining Amount in Rpt2 Currency  """  
      self.Rpt2ScrExtCost:int = obj["Rpt2ScrExtCost"]
      self.Rpt2ScrInvoiceBal:int = obj["Rpt2ScrInvoiceBal"]
      self.Rpt2ScrLineDiscAmt:int = obj["Rpt2ScrLineDiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalMiscChrg:int = obj["Rpt2ScrTotalMiscChrg"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt2ScrUnitCost:int = obj["Rpt2ScrUnitCost"]
      self.Rpt2TotDistribAmt:int = obj["Rpt2TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 2.  """  
      self.Rpt2Unrecognized:int = obj["Rpt2Unrecognized"]
      """  DEA Unrecognized Amount in Rpt2 Currency  """  
      self.Rpt2Variance:int = obj["Rpt2Variance"]
      self.Rpt3AdjustmentValue:int = obj["Rpt3AdjustmentValue"]
      """  Fields to show difference in ExtCost between adjustment line and original line.  """  
      self.Rpt3AllocationAmount:int = obj["Rpt3AllocationAmount"]
      self.Rpt3Distributed:int = obj["Rpt3Distributed"]
      """  DEA Distributed Amount in Rpt3 Currency  """  
      self.Rpt3DspLineTotal:int = obj["Rpt3DspLineTotal"]
      self.Rpt3Expense:int = obj["Rpt3Expense"]
      """  DEA Expense Amount in Rpt3 Currency  """  
      self.Rpt3GLLineTotal:int = obj["Rpt3GLLineTotal"]
      self.Rpt3InTaxAmt:int = obj["Rpt3InTaxAmt"]
      self.Rpt3LineExpenses:int = obj["Rpt3LineExpenses"]
      self.Rpt3LineSubtotal:int = obj["Rpt3LineSubtotal"]
      self.Rpt3LineTotal:int = obj["Rpt3LineTotal"]
      self.Rpt3NonDeducTaxExpense:int = obj["Rpt3NonDeducTaxExpense"]
      self.Rpt3OrgExtCost:int = obj["Rpt3OrgExtCost"]
      """  Value of original Ext Cost in reporting currency. Used for adjustment lines.  """  
      self.Rpt3PEDetAmt:int = obj["Rpt3PEDetAmt"]
      """  CSF Peru - Field used to display Detraction Amount for Bill of Exchange Invoices.  """  
      self.Rpt3POUnitCost:int = obj["Rpt3POUnitCost"]
      self.Rpt3Recognized:int = obj["Rpt3Recognized"]
      """  DEA Recognized Amount in Rpt3 Currency  """  
      self.Rpt3Remaining:int = obj["Rpt3Remaining"]
      """  DEA Remaining Amount in Rpt3 Currency  """  
      self.Rpt3ScrExtCost:int = obj["Rpt3ScrExtCost"]
      self.Rpt3ScrInvoiceBal:int = obj["Rpt3ScrInvoiceBal"]
      self.Rpt3ScrLineDiscAmt:int = obj["Rpt3ScrLineDiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalMiscChrg:int = obj["Rpt3ScrTotalMiscChrg"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.Rpt3ScrUnitCost:int = obj["Rpt3ScrUnitCost"]
      self.Rpt3TotDistribAmt:int = obj["Rpt3TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Reportable currency 3.  """  
      self.Rpt3Unrecognized:int = obj["Rpt3Unrecognized"]
      """  DEA Unrecognized Amount in Rpt3 Currency  """  
      self.Rpt3Variance:int = obj["Rpt3Variance"]
      self.ScrDocExtCost:int = obj["ScrDocExtCost"]
      self.ScrDocLineDiscAmt:int = obj["ScrDocLineDiscAmt"]
      self.ScrDocTotalMiscChrg:int = obj["ScrDocTotalMiscChrg"]
      self.ScrExtCost:int = obj["ScrExtCost"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrInvoiceRef:str = obj["ScrInvoiceRef"]
      """  Invoice ref for BOE  """  
      self.ScrLineDiscAmt:int = obj["ScrLineDiscAmt"]
      self.ScrLineType:str = obj["ScrLineType"]
      self.ScrOurQty:int = obj["ScrOurQty"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalMiscChrg:int = obj["ScrTotalMiscChrg"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.ScrUnitCost:int = obj["ScrUnitCost"]
      self.ScrVendorQty:int = obj["ScrVendorQty"]
      self.TotDistribAmt:int = obj["TotDistribAmt"]
      """  This is the value of the lines that have been entered. In Base Currency  """  
      self.Unrecognized:int = obj["Unrecognized"]
      """  DEA Unrecognized Amount  """  
      self.UpdateExtCreateLineGL:bool = obj["UpdateExtCreateLineGL"]
      """  Indicates if line GL should be automatically created when running UpdateExt.  """  
      self.UsePurchaseCode:bool = obj["UsePurchaseCode"]
      self.Variance:int = obj["Variance"]
      self.UpdateExtOverrideRcpts:bool = obj["UpdateExtOverrideRcpts"]
      """  Indicates that  if LineType=R, then override standard UpdateExt logic to create APInvDtl data directly, as is done in the UI.  Before/AfterGetNew, Before/AfterUpdate will not run.  """  
      self.RelatedToRcvDtlSysRowID:str = obj["RelatedToRcvDtlSysRowID"]
      """  SysRowID of the related RcvDtl row for receipt line,  LineType = R  """  
      self.EnableAttributeSetBtn:bool = obj["EnableAttributeSetBtn"]
      self.DEPayStatCodeDescr:str = obj["DEPayStatCodeDescr"]
      """  DEPayStatCode Description  """  
      self.DEDenominationDescr:str = obj["DEDenominationDescr"]
      """  DEDenomination Description  """  
      self.PORevisionNum:str = obj["PORevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.RcptRevisionNum:str = obj["RcptRevisionNum"]
      """  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AssemblySeqDescription:str = obj["AssemblySeqDescription"]
      self.AssetNumAssetDescription:str = obj["AssetNumAssetDescription"]
      self.Code1099Description:str = obj["Code1099Description"]
      self.CommodityCodeDescription:str = obj["CommodityCodeDescription"]
      self.ContainerIDContainerDescription:str = obj["ContainerIDContainerDescription"]
      self.FormTypeDescription:str = obj["FormTypeDescription"]
      self.GLPurchPurchDesc:str = obj["GLPurchPurchDesc"]
      self.InvoiceNumDebitMemo:bool = obj["InvoiceNumDebitMemo"]
      self.InvoiceNumPosted:bool = obj["InvoiceNumPosted"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.InvoiceNumCurrencyCode:str = obj["InvoiceNumCurrencyCode"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.PartNumTrackInventoryAttributes:bool = obj["PartNumTrackInventoryAttributes"]
      self.PartNumTrackSerialNum:bool = obj["PartNumTrackSerialNum"]
      self.PartNumTrackLots:bool = obj["PartNumTrackLots"]
      self.PartNumPricePerCode:str = obj["PartNumPricePerCode"]
      self.PartNumIUM:str = obj["PartNumIUM"]
      self.PartNumSellingFactor:int = obj["PartNumSellingFactor"]
      self.PartNumTrackDimension:bool = obj["PartNumTrackDimension"]
      self.PartNumPartDescription:str = obj["PartNumPartDescription"]
      self.PartNumSalesUM:str = obj["PartNumSalesUM"]
      self.PartNumAttrClassID:str = obj["PartNumAttrClassID"]
      self.POLineLineDesc:str = obj["POLineLineDesc"]
      self.POLineVenPartNum:str = obj["POLineVenPartNum"]
      self.POLinePartNum:str = obj["POLinePartNum"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorPPName:str = obj["VendorPPName"]
      self.vrPONumShipToConName:str = obj["vrPONumShipToConName"]
      self.vrPONumShipName:str = obj["vrPONumShipName"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvDtlTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvExpRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number to which this record is related.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  InvoiceLine to which this record is related.  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  An internally assigned number used as part of the unique key to the record.  """  
      self.ExpAmt:int = obj["ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.RefType:str = obj["RefType"]
      """  Link to the related GLRefTyp.RefType. Not displayed.  """  
      self.RefCode:str = obj["RefCode"]
      """  Link to the related Code in GLRefCod.RefCode  """  
      self.RefCodeDesc:str = obj["RefCodeDesc"]
      """  THIS SHOULD BE DELETED WITH SONOMA! GL Reference Code description.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvExpSeq:int = obj["GlbInvExpSeq"]
      """  Global Invoice Expense identifier.  Used in Consolidated Purchasing.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.ExtRefType:str = obj["ExtRefType"]
      """  Multi-Company G/L Reference Type from the external company.  This is used by the Multi-Company Journal.  """  
      self.ExtRefCode:str = obj["ExtRefCode"]
      """  Multi-Company G/L Reference Code from the external company.  This is used by the Multi-Company Journal.  """  
      self.MultiCompany:bool = obj["MultiCompany"]
      """  Flag to indicate that a separate journal entry will be created at the target company for the Multi-Company G/L Account entered in this journal line.  """  
      self.Rpt1ExpAmt:int = obj["Rpt1ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt2ExpAmt:int = obj["Rpt2ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.Rpt3ExpAmt:int = obj["Rpt3ExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.DocExpAmt:int = obj["DocExpAmt"]
      """  G/L expense distribution Amount.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.NonDedTax:bool = obj["NonDedTax"]
      """  Non-Deductible Tax  """  
      self.NonDedTaxRelatedToSchema:str = obj["NonDedTaxRelatedToSchema"]
      """  Non-Deductible Tax Related table schema  """  
      self.NonDedTaxRelatedToTable:str = obj["NonDedTaxRelatedToTable"]
      """  Non-Deductible Tax Related table.  """  
      self.NonDedTaxRelatedToSysRowID:str = obj["NonDedTaxRelatedToSysRowID"]
      """  Non-Deductible Tax SysRowID  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.AllowUpdate:bool = obj["AllowUpdate"]
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  """  
      self.COACode:str = obj["COACode"]
      """  CoaCode for GLAccount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrExpAmt:int = obj["DocScrExpAmt"]
      self.EnableExtRefCode:bool = obj["EnableExtRefCode"]
      self.EnableMultiCompany:bool = obj["EnableMultiCompany"]
      """  Flag to indicate if the MultiCompany check box needs to be enabled.  """  
      self.EnableRefCode:bool = obj["EnableRefCode"]
      self.ExpDispGLAcct:str = obj["ExpDispGLAcct"]
      self.ExpGlbDispGLAcct:str = obj["ExpGlbDispGLAcct"]
      self.ExtCOACode:str = obj["ExtCOACode"]
      """  CoaCode for ExtGLAccount  """  
      self.ExtGLAccount:str = obj["ExtGLAccount"]
      """  External GL Account  """  
      self.ExtGLAccountDesc:str = obj["ExtGLAccountDesc"]
      """  External GL Account Description  """  
      self.ExtRefAcctChart:str = obj["ExtRefAcctChart"]
      self.ExtRefAcctDept:str = obj["ExtRefAcctDept"]
      self.ExtRefAcctDiv:str = obj["ExtRefAcctDiv"]
      self.ExtRefCodeList:str = obj["ExtRefCodeList"]
      self.ExtRefCodeStatus:str = obj["ExtRefCodeStatus"]
      self.ExtRefDisplayAccount:str = obj["ExtRefDisplayAccount"]
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  """  
      self.GLAccountDesc:str = obj["GLAccountDesc"]
      """  GLAccount description  """  
      self.GroupID:str = obj["GroupID"]
      self.Posted:bool = obj["Posted"]
      self.RefCodeList:str = obj["RefCodeList"]
      self.RefCodeStatus:str = obj["RefCodeStatus"]
      """  Indicates if Reference Code is (M)andatory, (O)ptional, (E)xcluded or Blank.  Enable Reference Code if "M" or "O".  """  
      self.Rpt1ScrExpAmt:int = obj["Rpt1ScrExpAmt"]
      self.Rpt2ScrExpAmt:int = obj["Rpt2ScrExpAmt"]
      self.Rpt3ScrExpAmt:int = obj["Rpt3ScrExpAmt"]
      self.ScrExpAmt:int = obj["ScrExpAmt"]
      self.BitFlag:int = obj["BitFlag"]
      self.ExtRefCodeRefCodeDesc:str = obj["ExtRefCodeRefCodeDesc"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvExpTGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  InvExpSeq of APInvExp table  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum of APInvExp table  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLBookCurrencyCode:str = obj["GLBookCurrencyCode"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetDMRDMFilterRow:
   def __init__(self, obj):
      self.SelectionMode:bool = obj["SelectionMode"]
      """  SelectionMode  """  
      self.SupplierLabel:str = obj["SupplierLabel"]
      """  SupplierLabel  """  
      self.Suppliers:str = obj["Suppliers"]
      """  Suppliers  """  
      self.SuppliersSelected:str = obj["SuppliersSelected"]
      """  SuppliersSelected  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetDMRDMSourceRow:
   def __init__(self, obj):
      self.CostPerCode:str = obj["CostPerCode"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DMRNum:int = obj["DMRNum"]
      self.ExtAmount:int = obj["ExtAmount"]
      self.IUM:str = obj["IUM"]
      self.OurUnitCost:int = obj["OurUnitCost"]
      self.PONum:int = obj["PONum"]
      self.Quantity:int = obj["Quantity"]
      self.ReceiptDate:str = obj["ReceiptDate"]
      self.RevisionNum:str = obj["RevisionNum"]
      self.SelectedForAction:bool = obj["SelectedForAction"]
      self.VendorNum:int = obj["VendorNum"]
      self.VendorQty:int = obj["VendorQty"]
      self.VendorName:str = obj["VendorName"]
      self.ActionNum:int = obj["ActionNum"]
      self.PartNum:str = obj["PartNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetDMRDMSourceTableset:
   def __init__(self, obj):
      self.APInvGetDMRDMFilter:list[Erp_Tablesets_APInvGetDMRDMFilterRow] = obj["APInvGetDMRDMFilter"]
      self.APInvGetDMRDMSource:list[Erp_Tablesets_APInvGetDMRDMSourceRow] = obj["APInvGetDMRDMSource"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvGetNotInvRecFilterRow:
   def __init__(self, obj):
      self.AmountTolerance:int = obj["AmountTolerance"]
      """  AmountTolerance  """  
      self.DaysOutstanding:int = obj["DaysOutstanding"]
      """  DaysOutstanding  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  InvoiceDate  """  
      self.PcntTolerance:int = obj["PcntTolerance"]
      """  PcntTolerance  """  
      self.SelectionMode:bool = obj["SelectionMode"]
      """  SelectionMode  """  
      self.SupplierLabel:str = obj["SupplierLabel"]
      """  SupplierLabel  """  
      self.Suppliers:str = obj["Suppliers"]
      """  Suppliers  """  
      self.SuppliersSelected:str = obj["SuppliersSelected"]
      """  SuppliersSelected  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  TranDocTypeID  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetNotInvRecSourceRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.DocLineAmount:int = obj["DocLineAmount"]
      self.DSNum:int = obj["DSNum"]
      self.DSPackSlip:str = obj["DSPackSlip"]
      self.FailedQty:int = obj["FailedQty"]
      self.IUM:str = obj["IUM"]
      self.PackSlip:str = obj["PackSlip"]
      """  Packing Slip  """  
      self.PartNum:str = obj["PartNum"]
      self.PassedQty:int = obj["PassedQty"]
      self.POLine:int = obj["POLine"]
      """  The PO line # which is being received. Only applicable for PO receipt transactions.  """  
      self.PONum:int = obj["PONum"]
      self.SelectedForAction:bool = obj["SelectedForAction"]
      self.VendorQty:int = obj["VendorQty"]
      self.VendorUnitCost:int = obj["VendorUnitCost"]
      self.PartDescription:str = obj["PartDescription"]
      """  Part description.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetNotInvRecSourceTableset:
   def __init__(self, obj):
      self.APInvGetNotInvRecFilter:list[Erp_Tablesets_APInvGetNotInvRecFilterRow] = obj["APInvGetNotInvRecFilter"]
      self.APInvGetNotInvRecSource:list[Erp_Tablesets_APInvGetNotInvRecSourceRow] = obj["APInvGetNotInvRecSource"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvGetRecInvSourceRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      self.DueDate:str = obj["DueDate"]
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  This is NOT the same thing as putting an invoice on PaymentHold.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.SupplierName:str = obj["SupplierName"]
      self.VendorNum:int = obj["VendorNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvGetRecInvSourceTableset:
   def __init__(self, obj):
      self.APInvGetRecInvSource:list[Erp_Tablesets_APInvGetRecInvSourceRow] = obj["APInvGetRecInvSource"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvHedAttchRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.DrawingSeq:int = obj["DrawingSeq"]
      self.XFileRefNum:int = obj["XFileRefNum"]
      self.SysRevID:int = obj["SysRevID"]
      self.SysRowID:str = obj["SysRowID"]
      self.ForeignSysRowID:str = obj["ForeignSysRowID"]
      self.DrawDesc:str = obj["DrawDesc"]
      self.FileName:str = obj["FileName"]
      self.PDMDocID:str = obj["PDMDocID"]
      self.DocTypeID:str = obj["DocTypeID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedListRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenPayable:bool = obj["OpenPayable"]
      """  Indicates if this is an "open" Payable.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """   Indicates the type of document. Yes = Debit Memo,  No= Invoice. This value can't be changed after the record has been created.
Debit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign, but are entered as a positive.
The system uses this field to test for Debit Memos,  indicated by "DM" following the invoice number.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total sales tax amount for this invoice. Totals the TaxAmt from the APInvTax records of this invoice.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earliest unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the GroupID of the "current" group that the user is working with.  It is used as a selection criteria during the posting process.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the open payables file.    Only invoices that have been Posted (true) will be included as part of the open payables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related APInvGrp. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the APInvGrp or when the invoice date is changed.  It is overridable.  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  This field represents the invoice # that this debit memo relates to. It can be left blank. If entered it must be a valid APInvHed record where the InvcHead.DebitMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the debit memos next to their corresponding invoice. Therefore, this field will always have a value.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount.(Vendors Currency) This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  This is NOT the same thing as putting an invoice on PaymentHold.  """  
      self.PayHold:bool = obj["PayHold"]
      """  Indicates if this invoice should be held  from having any further payments made against it.  If "yes" then invoice  can't be selected in check processing.  """  
      self.Description:str = obj["Description"]
      """  A short description that can be used to explain what this invoice is for. Ex: Rent, Auto Lease Payment.  This description is defaulted into the APTran.Description field when payments are made against the invoice.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.CPay:bool = obj["CPay"]
      """  Flag to indicate if the invoice should be paid at the Central Payment Parent Company.  Used in Centralized Payment process.  """  
      self.CPayInvoiceBal:int = obj["CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company. Carries a true sign. (Credit memos are negative).  """  
      self.CPayDocInvoiceBal:int = obj["CPayDocInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Vendors currency).  Carries a true sign. (Credit memos are negative).  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal Year Suffix is duplicated from the related APInvGrp. This is also refreshed if the ApplyDate is changed.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be set to Yes if the AP Invoice was created by the Correction (Reversing) logic.  """  
      self.PrePayment:bool = obj["PrePayment"]
      """  Indicates that this is pre-payment invoice.  """  
      self.APLOCID:str = obj["APLOCID"]
      """  Letter of Credit ID.  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document Type ID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice Type  """  
      self.PLInvoiceReference:str = obj["PLInvoiceReference"]
      """  PLInvoiceReference  """  
      self.ScrInvoiceVendorAmt:int = obj["ScrInvoiceVendorAmt"]
      self.ScrDocInvoiceVendorAmt:int = obj["ScrDocInvoiceVendorAmt"]
      self.ScrInvoiceAmt:int = obj["ScrInvoiceAmt"]
      self.ScrDocInvoiceAmt:int = obj["ScrDocInvoiceAmt"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrDocInvoiceBal:int = obj["ScrDocInvoiceBal"]
      self.ScrUnpostedBal:int = obj["ScrUnpostedBal"]
      self.ScrDocUnpostedBal:int = obj["ScrDocUnpostedBal"]
      self.InvoiceVariance:int = obj["InvoiceVariance"]
      self.DocInvoiceVariance:int = obj["DocInvoiceVariance"]
      self.CPayOpenPayable:bool = obj["CPayOpenPayable"]
      """  Indicates if the CPay invoice is still an open payable at Corporate  """  
      self.VendorNumName:str = obj["VendorNumName"]
      """  Supplier Name  """  
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      """  Supplier ID  """  
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      self.Rpt1ScrInvoiceAmt:int = obj["Rpt1ScrInvoiceAmt"]
      self.Rpt2ScrInvoiceAmt:int = obj["Rpt2ScrInvoiceAmt"]
      self.Rpt3ScrInvoiceAmt:int = obj["Rpt3ScrInvoiceAmt"]
      self.Rpt1InvoiceVariance:int = obj["Rpt1InvoiceVariance"]
      self.Rpt2InvoiceVariance:int = obj["Rpt2InvoiceVariance"]
      self.Rpt3InvoiceVariance:int = obj["Rpt3InvoiceVariance"]
      self.Rpt1ScrInvoiceVendorAmt:int = obj["Rpt1ScrInvoiceVendorAmt"]
      self.Rpt2ScrInvoiceVendorAmt:int = obj["Rpt2ScrInvoiceVendorAmt"]
      self.Rpt3ScrInvoiceVendorAmt:int = obj["Rpt3ScrInvoiceVendorAmt"]
      self.IsLcked:bool = obj["IsLcked"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedListTableset:
   def __init__(self, obj):
      self.APInvHedList:list[Erp_Tablesets_APInvHedListRow] = obj["APInvHedList"]
      self.APInvHedTransferList:list[Erp_Tablesets_APInvHedTransferListRow] = obj["APInvHedTransferList"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvHedMscTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.MscNum:int = obj["MscNum"]
      """  MscNum  """  
      self.APInvMscSysRowID:str = obj["APInvMscSysRowID"]
      """  APInvMscSysRowID  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  ECAcquisitionSeq  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  TaxableAmt  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  DocTaxableAmt  """  
      self.Percent:int = obj["Percent"]
      """  Percent  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  TaxAmt  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  DocTaxAmt  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  ReportableAmt  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  DocReportableAmt  """  
      self.Manual:bool = obj["Manual"]
      """  Manual  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  SysCalcTaxableAmt  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  SysCalcDocTaxableAmt  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  SysCalcReportableAmt  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  SysCalcDocReportableAmt  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  GlbCompany  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  GlbVendorNum  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  GlbInvoiceNum  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  GlbTaxCode  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  GlbECAcquisitionSeq  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  ReverseCharge  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Rpt1ReportableAmt  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Rpt2ReportableAmt  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Rpt3ReportableAmt  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Rpt1TaxableAmt  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Rpt2TaxableAmt  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Rpt3TaxableAmt  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Rpt1TaxAmt  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Rpt2TaxAmt  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Rpt3TaxAmt  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  Rpt1SysCalcTaxableAmt  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  Rpt1SysCalcReportableAmt  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  Rpt2SysCalcTaxableAmt  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  Rpt2SysCalcReportableAmt  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  Rpt3SysCalcTaxableAmt  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  Rpt3SysCalcReportableAmt  """  
      self.CollectionType:int = obj["CollectionType"]
      """  CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Timing  """  
      self.ExemptType:int = obj["ExemptType"]
      """  ExemptType  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  ExemptPercent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  ResolutionNum  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  ResolutionDate  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  TaxRateDate  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  DefTaxableAmt  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  DocDefTaxableAmt  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Rpt1DefTaxableAmt  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Rpt2DefTaxableAmt  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Rpt3DefTaxableAmt  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  DefTaxAmt  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  DocDefTaxAmt  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Rpt1DefTaxAmt  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Rpt2DefTaxAmt  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Rpt3DefTaxAmt  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  ManAdd  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  DedTaxAmt  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  DocDedTaxAmt  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Rpt1DedTaxAmt  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Rpt2DedTaxAmt  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Rpt3DedTaxAmt  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  FixedAmount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  DocFixedAmount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Rpt1FixedAmount  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Rpt2FixedAmount  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Rpt3FixedAmount  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  GlbRateCode  """  
      self.TextCode:str = obj["TextCode"]
      """  TextCode  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  TaxAmtVar  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  DocTaxAmtVar  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Rpt1TaxAmtVar  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Rpt2TaxAmtVar  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Rpt3TaxAmtVar  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  DefTaxDate  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  TaxFuture  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  STPProcessed  """  
      self.SummaryOnly:bool = obj["SummaryOnly"]
      """  SummaryOnly  """  
      self.DevInt1:int = obj["DevInt1"]
      """  DevInt1  """  
      self.DevInt2:int = obj["DevInt2"]
      """  DevInt2  """  
      self.DevDec1:int = obj["DevDec1"]
      """  DevDec1  """  
      self.DevDec2:int = obj["DevDec2"]
      """  DevDec2  """  
      self.DevDec3:int = obj["DevDec3"]
      """  DevDec3  """  
      self.DevDec4:int = obj["DevDec4"]
      """  DevDec4  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  DevLog1  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  DevLog2  """  
      self.DevChar1:str = obj["DevChar1"]
      """  DevChar1  """  
      self.DevChar2:str = obj["DevChar2"]
      """  DevChar2  """  
      self.DevDate1:str = obj["DevDate1"]
      """  DevDate1  """  
      self.DevDate2:str = obj["DevDate2"]
      """  DevDate2  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.GroupID:str = obj["GroupID"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.DisableManual:bool = obj["DisableManual"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.OpenPayable:bool = obj["OpenPayable"]
      """  Indicates if this is an "open" Payable.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """   Indicates the type of document. Yes = Debit Memo,  No= Invoice. This value can't be changed after the record has been created.
Debit memos affect the way detail quantities and amounts are stored in the database. They will always be stored with a negative sign, but are entered as a positive.
The system uses this field to test for Debit Memos,  indicated by "DM" following the invoice number.  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.TermsCode:str = obj["TermsCode"]
      """  Contains the foreign key to the PurTerms master file.  Defaulted from Vendor.TermsCode.  This is MANDATORY ENTRY. User maintainable via a combo-box for terms description.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Total sales tax amount for this invoice. Totals the TaxAmt from the APInvTax records of this invoice.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Total sales tax amount for this invoice. Totals the DocTaxAmt from the APInvTax records of this invoice.  """  
      self.DiscountDate:str = obj["DiscountDate"]
      """  Prompt payment discount due date. The date according to the terms when you are allowed to take the prompt payment discount (if any) given by the vendor. This date is NOT directly maintainable. It is calculated using the InvoiceDate + PurTerms.DiscountDays. If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then this is not applicable and is set to ? (null value).  """  
      self.DiscountAmt:int = obj["DiscountAmt"]
      """  Discount amount that can be taken if paid by the DiscountDate.  This is calculated by the System via APInvHed write trigger. Formula ((PurTerms.DiscountPercent/100)*APInvHed.InvoiceBal on AIn.  If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then it is not applicable and is set to zero.  """  
      self.DocDiscountAmt:int = obj["DocDiscountAmt"]
      """  Discount amount(Vendors Currency) that can be taken if paid by the DiscountDate.  This is calculated by the System via APInvHed write trigger. Formula ((PurTerms.DiscountPercent/100)*APInvHed.InvoiceBal on AIn.  If DebitMemo = Yes or PurTerms.NumberOfPayments > 1 then it is not applicable and is set to zero.  """  
      self.DueDate:str = obj["DueDate"]
      """  The due date of the earliest unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments which have multiple due dates and associated amounts. When invoices are first created this date will always be equal to the first entry in the DateDueList. Then as transactions are applied this "Current" Due Date is refreshed by figuring out which is the earliest unpaid scheduled payment.  """  
      self.PayDates:str = obj["PayDates"]
      """  Contains the "list" of due dates for the scheduled payments. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayAmounts:str = obj["PayAmounts"]
      """  The scheduled payment amounts. Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.DocPayAmounts:str = obj["DocPayAmounts"]
      """  The scheduled payment amounts.(Vendors Currency) Corresponds with the PayDates list. Delimited by the character defined in the "list-delim" variable.  """  
      self.GLPosted:bool = obj["GLPosted"]
      """  Bad name.  Actually this indicates if the invoice was created by the  open invoice load program.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with  during the data entry process. This field is not directly maintainable, it is assigned by the invoice entry program using the GroupID of the "current" group that the user is working with.  It is used as a selection criteria during the posting process.  """  
      self.Posted:bool = obj["Posted"]
      """  Indicates if this invoice has been Posted to the open payables file.    Only invoices that have been Posted (true) will be included as part of the open payables, that is they will not appear on reports or inquiries other than those used within invoice entry. Otherwise they are considered as still being in data entry. This field is always "no" when the invoice is created. It is set to "yes"  by the  "Post function". Once an invoice is posted it can't be maintained via data entry.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal Year is duplicated from the related APInvGrp. This is also refreshed if the InvoiceDate is changed.  """  
      self.FiscalPeriod:int = obj["FiscalPeriod"]
      """  Fiscal period of invoice. This is duplicated in from the APInvGrp or when the invoice date is changed.  It is overridable.  """  
      self.StartUp:bool = obj["StartUp"]
      """  An internal flag to indicate if this invoice was created by the Open Invoice Load program.  These records are not maintainable/viewable via invoice entry.  """  
      self.InvoiceRef:str = obj["InvoiceRef"]
      """  This field represents the invoice # that this debit memo relates to. It can be left blank. If entered it must be a valid APInvHed record where the InvcHead.DebitMemo = No. This field is also used to order the invoices when printing aging reports. The idea is to be able to print the debit memos next to their corresponding invoice. Therefore, this field will always have a value.  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID that entered the invoice. This is not maintainable by the user.  """  
      self.InvoiceComment:str = obj["InvoiceComment"]
      """  Used to establish invoice comments about the overall invoice.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount.(Vendors Currency) This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and of the miscellaneous charges/credits (APInvMsc) records.  This field has a true sign. (debit memos are negative).  """  
      self.DocInvoiceVendorAmt:int = obj["DocInvoiceVendorAmt"]
      """  A user entered verification amount.  DOCUMENT CURRENCY ONLY, a corresponding base currency field exists but is only used for external G/L interfacing.  This field is sign flipped for debit memos.  The calculated Invoice Amount (DocInvoiceAmt) must match this amount before the invoice can be posted.  """  
      self.InvoiceBal:int = obj["InvoiceBal"]
      """  Current outstanding balance. Carries a true sign. (Credit memos are negative).  """  
      self.DocInvoiceBal:int = obj["DocInvoiceBal"]
      """  Current outstanding balance.(Vendors currency)  Carries a true sign. (Credit memos are negative).  """  
      self.UnpostedBal:int = obj["UnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts. This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.DocUnpostedBal:int = obj["DocUnpostedBal"]
      """  Current outstanding balance which includes the unposted cash receipt amounts(Vendors currency). This balance is updated immediately as cash is applied to the invoice, while the InvoiceBal field is not updated until the cash is posted.  Used by cash receipts to validate  online that an invoice is not over paid. Carries a true sign. (Credit memos are negative).  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoiceHeld=No. This flag can be used for whatever the reason the user may wish to keep an invoice in a data entry group from being posted.  This is NOT the same thing as putting an invoice on PaymentHold.  """  
      self.PayHold:bool = obj["PayHold"]
      """  Indicates if this invoice should be held  from having any further payments made against it.  If "yes" then invoice  can't be selected in check processing.  """  
      self.Description:str = obj["Description"]
      """  A short description that can be used to explain what this invoice is for. Ex: Rent, Auto Lease Payment.  This description is defaulted into the APTran.Description field when payments are made against the invoice.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """   Exchange rate that will be used for this invoice.  Defaults from
CurrRate.CurrentRate. Conversion rates will be calculated as System Base = Foreign value * rate, Foreign value = system base * (1/rate). This is the dollar in foreign currency from the exchange rate tables in the newspapers.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.REFPONum:int = obj["REFPONum"]
      """  Reference PO number(optional when CM is present). Used to identify the PO that this Invoice is for.  If the Reference PO has a lock exchange rate then that is the rate that will be used on this AP  invoice,  """  
      self.TaxRegionCode:str = obj["TaxRegionCode"]
      """  The Tax Region for this invoice.  """  
      self.JournalNum:int = obj["JournalNum"]
      """   Journal number that invoice was posted to.  This can also be thought of as the Voucher Number.
Note: applicable only when posted to G/L.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  Journal that invoice was posted to.  """  
      self.UpdateTax:bool = obj["UpdateTax"]
      """  Controls the running of the Tax calculation logic which is found in the InvcHead write trigger.  """  
      self.InvoiceVendorAmt:int = obj["InvoiceVendorAmt"]
      """  For use by external G/L interfacing.  This field is sign flipped for debit memos.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record.  This number is created based on setup parameters in table LegalNumber.  """  
      self.ExternalID:str = obj["ExternalID"]
      """  External Identification of the Invoice.  """  
      self.FixedAmt:bool = obj["FixedAmt"]
      """  Allows user to control discount amount manually or automatically  """  
      self.XRefInvoiceNum:str = obj["XRefInvoiceNum"]
      """  Cross reference invoice number used when converting data from another ERP system when the previous system data has alphanumeric content.  This field is not used by MfgSys.  This field can be used in searches and can be added to screens through customization.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.DepGainLoss:int = obj["DepGainLoss"]
      """  Wherever the Less Advanced or Less Deposited is calculated, put any gain-loss difference into this field.  """  
      self.CPay:bool = obj["CPay"]
      """  Flag to indicate if the invoice should be paid at the Central Payment Parent Company.  Used in Centralized Payment process.  """  
      self.CPayLinked:bool = obj["CPayLinked"]
      """  Flag to indicate if the invoice is linked from the source company invoice flagged for Central Payment.  """  
      self.CPayLegalNumber:str = obj["CPayLegalNumber"]
      """  This is the original Legal Number from the source invoice.  This is used in the Centralized Payment process.  """  
      self.CPayCheckNum:int = obj["CPayCheckNum"]
      """  Reference Check number of the latest payment made by the Central Payment Parent Company for this invoice.  """  
      self.CPayCheckDate:str = obj["CPayCheckDate"]
      """  Reference Check Date of the latest payment made by the Central Payment Parent Company for this invoice.  """  
      self.CPayInvoiceBal:int = obj["CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company. Carries a true sign. (Credit memos are negative).  """  
      self.CPayDocInvoiceBal:int = obj["CPayDocInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Vendors currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rounding:int = obj["Rounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.GLControlType:str = obj["GLControlType"]
      """  The GL Control Type this invoice is assigned to.  This combined with GLControlCode links the invoice to a specific GLControl record which supplies the G/L account of the appropriate payables. Defaults to value 'APAcct'.  """  
      self.DocRounding:int = obj["DocRounding"]
      """  Rounding is occurred if multiplier or rule for Total amount is different with multiplier or rule for Total line amount, it is included in the 'Amount to Pay' and it is booked to the rounding account specified in the company setup when the invoice is posted  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  The GL Control Code this invoice is assigned to.  This combined with GLControlType links the invoice to a specific GLControl record which supplies the G/L account of the appropriate payables. Defaults to EntityGLC type of 'APAcct' assigned to the supplier.  """  
      self.Rpt1DiscountAmt:int = obj["Rpt1DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DiscountAmt:int = obj["Rpt2DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DiscountAmt:int = obj["Rpt3DiscountAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceAmt:int = obj["Rpt1InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceAmt:int = obj["Rpt2InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceAmt:int = obj["Rpt3InvoiceAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceBal:int = obj["Rpt1InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceBal:int = obj["Rpt2InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceBal:int = obj["Rpt3InvoiceBal"]
      """  Reporting currency value of this field  """  
      self.Rpt1InvoiceVendorAmt:int = obj["Rpt1InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InvoiceVendorAmt:int = obj["Rpt2InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InvoiceVendorAmt:int = obj["Rpt3InvoiceVendorAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1PayAmounts:str = obj["Rpt1PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmounts:str = obj["Rpt2PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmounts:str = obj["Rpt3PayAmounts"]
      """  Reporting currency value of this field  """  
      self.Rpt1Rounding:int = obj["Rpt1Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt2Rounding:int = obj["Rpt2Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt3Rounding:int = obj["Rpt3Rounding"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1UnpostedBal:int = obj["Rpt1UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt2UnpostedBal:int = obj["Rpt2UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.Rpt3UnpostedBal:int = obj["Rpt3UnpostedBal"]
      """  Reporting currency value of this field  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier  """  
      self.Rpt1CPayInvoiceBal:int = obj["Rpt1CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rpt2CPayInvoiceBal:int = obj["Rpt2CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.Rpt3CPayInvoiceBal:int = obj["Rpt3CPayInvoiceBal"]
      """  Current outstanding balance of the corresponding invoice created at the Central Payment Parent Company (Report currency).  Carries a true sign. (Credit memos are negative).  """  
      self.AllowOverrideLI:bool = obj["AllowOverrideLI"]
      """  Identifies whether or not the amounts on a logged invoice can be overridden during AP Invoice Entry.  If set to false, the AP Invoice and Tax values must match the values on the Logged Invoice.  If set to true, the logged invoice is voided.  """  
      self.MatchedFromLI:bool = obj["MatchedFromLI"]
      """  Identifies if an invoice was matched from a logged invoice.  If yes, the invoice was matched.  If no, the invoice was not matched.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal Year Suffix is duplicated from the related APInvGrp. This is also refreshed if the ApplyDate is changed.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.TaxPoint:str = obj["TaxPoint"]
      """  Tax Point  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date Used to calculate Tax Rates  """  
      self.ReadyToCalc:bool = obj["ReadyToCalc"]
      """  This flag will be used to indicate if the invoice is ready for calculations. When set to true, tax calculations will take place whenever a save takes place for any tables tied to the invoice which could affect taxes (InvcDtl, InvcHead, InvcMisc, etc). It defaults from ARSyst.InvcReadyToCalcDflt field when an invoice is created.  """  
      self.RecalcBeforePost:bool = obj["RecalcBeforePost"]
      """  used to force the recalc of an invoice before posting due to changes in tax connect data that could not be resolved at the time the change was made to the Epicor data.  """  
      self.GetDfltTaxIds:bool = obj["GetDfltTaxIds"]
      """  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the line before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  """  
      self.PMUID:int = obj["PMUID"]
      """  Unique identifier of the payment method  """  
      self.PayDiscDays:str = obj["PayDiscDays"]
      """  Contains the "list" of pay discount days for the scheduled discounts. Delimited by the character defined in the "List-Delim" variable.  """  
      self.PayDiscPer:str = obj["PayDiscPer"]
      """  The discount percents. Corresponds with the PayDisDays list. Delimited by the character defined in the "list-delim" variable.  """  
      self.WithholdAmt:int = obj["WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.DocWithholdAmt:int = obj["DocWithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt1WithholdAmt:int = obj["Rpt1WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt2WithholdAmt:int = obj["Rpt2WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.Rpt3WithholdAmt:int = obj["Rpt3WithholdAmt"]
      """  Withholding Tax Amount.  """  
      self.PayDiscPartPay:bool = obj["PayDiscPartPay"]
      """  Field to define when apply the discount percentage, can be when invoice is paid in full or Cash amount  """  
      self.PIPayment:str = obj["PIPayment"]
      """   Indicates if the invoice has been paid by a Payment Instrument.
Values:
blank = Not linked to a Payment Instrument
"O" = Paid by outstanding Payment Instrument
"C" = Paid by colledted Payment instument  """  
      self.CorrectionInv:bool = obj["CorrectionInv"]
      """  Will be set to Yes if the AP Invoice was created by the Correction (Reversing) logic.  """  
      self.TaxRateGrpCode:str = obj["TaxRateGrpCode"]
      """  Tax Rate Group Code  """  
      self.LockTaxRate:bool = obj["LockTaxRate"]
      """  Locks Tax Rate and allows user to edit the tax exchange rate  """  
      self.SEBankRef:str = obj["SEBankRef"]
      """  Sweden and Finland Localization Field - Banking Reference  """  
      self.SEPayCode:str = obj["SEPayCode"]
      """  Sweden and Finland Localization Field - Payment Code  """  
      self.GUIFormatCode:str = obj["GUIFormatCode"]
      """  Government Uniform Invoice Format Code (Taiwan Localization field)  """  
      self.GUITaxTypeCode:str = obj["GUITaxTypeCode"]
      """  Government Uniform Invoice Tax Type Code (Taiwan Localization field)  """  
      self.GUIDeductCode:str = obj["GUIDeductCode"]
      """  Government Uniform Invoice Deduct Code (Taiwan Localization field)  """  
      self.PrePayment:bool = obj["PrePayment"]
      """  Indicates that this is pre-payment invoice.  """  
      self.APLOCID:str = obj["APLOCID"]
      """  Letter of Credit ID.  """  
      self.Plant:str = obj["Plant"]
      """  Site ID (Used Primary for Thailand Localization)  """  
      self.GUIImportTaxBasis:int = obj["GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis  """  
      self.DocGUIImportTaxBasis:int = obj["DocGUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in document currrency  """  
      self.Rpt1GUIImportTaxBasis:int = obj["Rpt1GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt1 currency  """  
      self.Rpt2GUIImportTaxBasis:int = obj["Rpt2GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt2 currency  """  
      self.Rpt3GUIImportTaxBasis:int = obj["Rpt3GUIImportTaxBasis"]
      """   Taiwan Localization
Tax Amount Basis in Rpt3 currency  """  
      self.OvrDefTaxDate:bool = obj["OvrDefTaxDate"]
      """  Flag to indicate if the DefTaxDate will be overwritten when Tax Point change on Invoice Header.  """  
      self.Linked:bool = obj["Linked"]
      """  Linked flag  """  
      self.ClaimRef:str = obj["ClaimRef"]
      """  The claim reference from the expense group that generated the invoice.  """  
      self.EmpID:str = obj["EmpID"]
      """  The employee from the group of expenses that created the invoice.  """  
      self.InBankFile:bool = obj["InBankFile"]
      """  Indicates that Invoice has been selected for payment in a bankfile  """  
      self.CNConfirmDate:str = obj["CNConfirmDate"]
      """  Credit Note Confirmation Date  """  
      self.BankID:str = obj["BankID"]
      """  Unique ID of the vendor's bank.  """  
      self.SelfLegalNumber:str = obj["SelfLegalNumber"]
      """  Legal Number for the self assessment.  """  
      self.SelfTranDocTypeID:str = obj["SelfTranDocTypeID"]
      """  Transaction Document Type for the self assessment.  """  
      self.MainSite:bool = obj["MainSite"]
      """  Main Site  """  
      self.CardCode:str = obj["CardCode"]
      """   Denmark Localization
Card (payment) code  """  
      self.SiteCode:str = obj["SiteCode"]
      """  Site Code  """  
      self.BankGiroAcctNbr:str = obj["BankGiroAcctNbr"]
      """   Denmark Localization
Account Number  """  
      self.BranchID:str = obj["BranchID"]
      """  Branch ID  """  
      self.SupAgentName:str = obj["SupAgentName"]
      """  Supplier Agent Name  """  
      self.SupAgentTaxRegNo:str = obj["SupAgentTaxRegNo"]
      """  Supplier Agent Tax Region Number  """  
      self.NonDeductCode:str = obj["NonDeductCode"]
      """  Non Deductable Code  """  
      self.AssetTypeCode:str = obj["AssetTypeCode"]
      """  Asset Type Code  """  
      self.Cash:bool = obj["Cash"]
      """  Cash  """  
      self.CreditCard:bool = obj["CreditCard"]
      """  Credit Card  """  
      self.Normal:bool = obj["Normal"]
      """  Normal  """  
      self.CardID:str = obj["CardID"]
      """  Card ID  """  
      self.CardHolderTaxID:str = obj["CardHolderTaxID"]
      """  Card Holder Tax ID  """  
      self.CardMemberName:str = obj["CardMemberName"]
      """  Card Member Name  """  
      self.Excluded:bool = obj["Excluded"]
      """  Excluded  """  
      self.Deferred:bool = obj["Deferred"]
      """  Deferred  """  
      self.NonDeductAmt:int = obj["NonDeductAmt"]
      """  Non Deductable Amount  """  
      self.NonDeductDocAmt:int = obj["NonDeductDocAmt"]
      """  Non Deductable Doc Amount  """  
      self.NonDeductRpt1Amt:int = obj["NonDeductRpt1Amt"]
      """  Non Deductable Rpt1 Amount  """  
      self.NonDeductRpt2Amt:int = obj["NonDeductRpt2Amt"]
      """  Non Deductable Rpt2 Amount  """  
      self.NonDeductRpt3Amt:int = obj["NonDeductRpt3Amt"]
      """  Non Deductable Rpt3 Amount  """  
      self.NonDeductVATAmt:int = obj["NonDeductVATAmt"]
      """  Non Deductable VAT Amount  """  
      self.NonDeductVATDocAmt:int = obj["NonDeductVATDocAmt"]
      """  Non Deductable VAT Doc Amount  """  
      self.NonDeductVATRpt1Amt:int = obj["NonDeductVATRpt1Amt"]
      """  Non Deductable VAT Rpt1 Amount  """  
      self.NonDeductVATRpt2Amt:int = obj["NonDeductVATRpt2Amt"]
      """  Non Deductable VAT Rpt2 Amount  """  
      self.NonDeductVATRpt3Amt:int = obj["NonDeductVATRpt3Amt"]
      """  Non Deductable VAT Rpt3 Amount  """  
      self.ImportNum:str = obj["ImportNum"]
      """  Stores the number of the import document.  """  
      self.ImportedFrom:str = obj["ImportedFrom"]
      """  Country of Import  """  
      self.ImportedDate:str = obj["ImportedDate"]
      """  Date of import.  """  
      self.AdvTaxInv:bool = obj["AdvTaxInv"]
      """   Indicates that this is Advanced Tax invoice received from
supplier  """  
      self.InPrice:bool = obj["InPrice"]
      """   Indicates that the tax is included in the unit price
for this AP Invoice  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      """  Transaction Document Type ID  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  In case of Tax Inclusive Pricing if system-calculated Header related taxes are changed/deleted/added  by the user - this field is set to true by the system.  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Assigned as "I" when Recurring Invoice has Inactive status.  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.PaymentNumber:str = obj["PaymentNumber"]
      """  PaymentNumber  """  
      self.CycleCode:str = obj["CycleCode"]
      """  CycleCode  """  
      self.Duration:int = obj["Duration"]
      """  Duration  """  
      self.EndDate:str = obj["EndDate"]
      """  EndDate  """  
      self.MaxValueAmt:int = obj["MaxValueAmt"]
      """  MaxValueAmt  """  
      self.DocMaxValueAmt:int = obj["DocMaxValueAmt"]
      """  DocMaxValueAmt  """  
      self.Rpt1MaxValueAmt:int = obj["Rpt1MaxValueAmt"]
      """  Rpt1MaxValueAmt  """  
      self.Rpt2MaxValueAmt:int = obj["Rpt2MaxValueAmt"]
      """  Rpt2MaxValueAmt  """  
      self.Rpt3MaxValueAmt:int = obj["Rpt3MaxValueAmt"]
      """  Rpt3MaxValueAmt  """  
      self.HoldInvoice:bool = obj["HoldInvoice"]
      """  HoldInvoice  """  
      self.CopyLatestInvoice:bool = obj["CopyLatestInvoice"]
      """  CopyLatestInvoice  """  
      self.OverrideEndDate:bool = obj["OverrideEndDate"]
      """  OverrideEndDate  """  
      self.CycleInactive:bool = obj["CycleInactive"]
      """  CycleInactive  """  
      self.RecurSource:bool = obj["RecurSource"]
      """  RecurSource  """  
      self.InstanceNum:int = obj["InstanceNum"]
      """  InstanceNum  """  
      self.RecurBalance:int = obj["RecurBalance"]
      """  RecurBalance  """  
      self.DocRecurBalance:int = obj["DocRecurBalance"]
      """  DocRecurBalance  """  
      self.Rpt1RecurBalance:int = obj["Rpt1RecurBalance"]
      """  Rpt1RecurBalance  """  
      self.Rpt2RecurBalance:int = obj["Rpt2RecurBalance"]
      """  Rpt2RecurBalance  """  
      self.Rpt3RecurBalance:int = obj["Rpt3RecurBalance"]
      """  Rpt3RecurBalance  """  
      self.LastDate:str = obj["LastDate"]
      """  LastDate  """  
      self.IsRecurring:bool = obj["IsRecurring"]
      """  IsRecurring  """  
      self.InvoiceNumList:str = obj["InvoiceNumList"]
      """  InvoiceNumList  """  
      self.IsMaxValue:bool = obj["IsMaxValue"]
      """  IsMaxValue  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CHISRCodeLine:str = obj["CHISRCodeLine"]
      """  CHISRCodeLine  """  
      self.DMReason:str = obj["DMReason"]
      """  DMReason  """  
      self.UrgentPayment:bool = obj["UrgentPayment"]
      """  UrgentPayment  """  
      self.AGDocPageNum:str = obj["AGDocPageNum"]
      """  AGDocPageNum  """  
      self.AGCAICAEMark:str = obj["AGCAICAEMark"]
      """  AGCAICAEMark  """  
      self.AGCAICAENum:str = obj["AGCAICAENum"]
      """  AGCAICAENum  """  
      self.AGCAICAEExpirationDate:str = obj["AGCAICAEExpirationDate"]
      """  AGCAICAEExpirationDate  """  
      self.AGAvTaxCreditFlag:bool = obj["AGAvTaxCreditFlag"]
      """  AGAvTaxCreditFlag  """  
      self.AGUseGoodDefaultMark:bool = obj["AGUseGoodDefaultMark"]
      """  AGUseGoodDefaultMark  """  
      self.AGCustomsClearanceNum:str = obj["AGCustomsClearanceNum"]
      """  AGCustomsClearanceNum  """  
      self.AGCustomsCode:str = obj["AGCustomsCode"]
      """  AGCustomsCode  """  
      self.AGDestinationCode:str = obj["AGDestinationCode"]
      """  AGDestinationCode  """  
      self.HeadNum:int = obj["HeadNum"]
      """  Header Number  """  
      self.TranType:str = obj["TranType"]
      """  TranType  """  
      self.TaxSvcID:str = obj["TaxSvcID"]
      """  'Type + - (OrderNum, InvoiceNum,  QuoteNum or TCDocID)'. Depending on the type, where Type is O=order, Q = quote, I = invoice, T=tax service doc ID (this is used to create an TaxSvcHead for tax reoconciliation when Tax Connect has a record with no corresponding Epicor record). Example: O-1234 is order type and order number 1234; Q-1234 is quote type and quote number 1234, etc.  """  
      self.TWDeclareYear:int = obj["TWDeclareYear"]
      """  TWDeclareYear  """  
      self.TWDeclarePeriod:int = obj["TWDeclarePeriod"]
      """  TWDeclarePeriod  """  
      self.APChkGrpID:str = obj["APChkGrpID"]
      """  AP Checking Group ID  """  
      self.InvoiceType:str = obj["InvoiceType"]
      """  Invoice Type  """  
      self.PEComputationalCost:str = obj["PEComputationalCost"]
      """  Indicates a computational cost for the invoice  """  
      self.ReferencedByBOE:str = obj["ReferencedByBOE"]
      """  Referenced By BOE  """  
      self.PEDUARefNum:str = obj["PEDUARefNum"]
      """  DUA Reference Number used on Peru Localiation  """  
      self.CustomsNumber:str = obj["CustomsNumber"]
      """  CustomsNumber  """  
      self.ReceivedDate:str = obj["ReceivedDate"]
      """  ReceivedDate  """  
      self.CustOverride:int = obj["CustOverride"]
      """  CustOverride  """  
      self.PrePaymentNum:str = obj["PrePaymentNum"]
      """  Invoice Number of Invoice Pre-Payment which should be automatically applied to this one during posting process.  """  
      self.PrePaymentAmt:int = obj["PrePaymentAmt"]
      """  Pre-Payment amount in Base Currency.  """  
      self.DocPrePaymentAmt:int = obj["DocPrePaymentAmt"]
      """  Pre-Payment amount in Document Currency.  """  
      self.Rpt1PrePaymentAmt:int = obj["Rpt1PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.Rpt2PrePaymentAmt:int = obj["Rpt2PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.Rpt3PrePaymentAmt:int = obj["Rpt3PrePaymentAmt"]
      """  Pre-Payment amount in Reporting Currency.  """  
      self.PEAPPayNum:int = obj["PEAPPayNum"]
      """  CSF Peru - AP Payment Number  """  
      self.PEDetTaxAmt:int = obj["PEDetTaxAmt"]
      """  SCF Peru - Detractions Tax Amount  """  
      self.PEDetTaxCurrencyCode:str = obj["PEDetTaxCurrencyCode"]
      """  Peru Detraction Tax Currency Code  """  
      self.PESUNATDepAmt:int = obj["PESUNATDepAmt"]
      """  CSF Peru - SUNAT Deposit Amount  """  
      self.DocPESUNATDepAmt:int = obj["DocPESUNATDepAmt"]
      """  Peru Document SUNAT Deposit Amount  """  
      self.PESUNATDepDate:str = obj["PESUNATDepDate"]
      """  CSF Peru - SUNAT Deposit Date  """  
      self.PESUNATDepNum:str = obj["PESUNATDepNum"]
      """  CSF Peru -  SUNAT Deposit Number  """  
      self.PESUNATNum:str = obj["PESUNATNum"]
      """  SUNAT Reference Number. Once a payment is made, the SUNAT returns a reference number used as the receipt number for the payment.  """  
      self.DocPEDetTaxAmt:int = obj["DocPEDetTaxAmt"]
      """  Document Tax Amount used in Peru detractions  """  
      self.MXFiscalFolio:str = obj["MXFiscalFolio"]
      """  MXFiscalFolio  """  
      self.PEBOEIsMultiGen:bool = obj["PEBOEIsMultiGen"]
      """  PEBOEIsMultiGen  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.PrePayHeadNum:int = obj["PrePayHeadNum"]
      """  PrePayHeadNum  """  
      self.MXRetentionCode:str = obj["MXRetentionCode"]
      """  MXRetentionCode  """  
      self.PERefDocID:str = obj["PERefDocID"]
      """  PE Reference Document ID  """  
      self.PEReasonCode:str = obj["PEReasonCode"]
      """  PE Reason Code  """  
      self.PEReasonDesc:str = obj["PEReasonDesc"]
      """  PE Reason Description  """  
      self.MYImportNum:str = obj["MYImportNum"]
      """  Malaysia Import Declaration Number  """  
      self.TWGUIRegNumSeller:str = obj["TWGUIRegNumSeller"]
      """  TW GUI Code Seller  """  
      self.TWGUIRegNumBuyer:str = obj["TWGUIRegNumBuyer"]
      """  TW GUI Code Buyer  """  
      self.MXTARCode:str = obj["MXTARCode"]
      """  MXTARCode  """  
      self.GRNIClearing:bool = obj["GRNIClearing"]
      """  Flag that indicates if the invoice is a GRNI document.  """  
      self.PEFiscalCreditOperStatus:int = obj["PEFiscalCreditOperStatus"]
      """  CSF Peru - Fiscal Credit Operation Status  """  
      self.PEInternatTaxAgr:str = obj["PEInternatTaxAgr"]
      """  CSF Peru - International Tax agreement  """  
      self.PERentType:str = obj["PERentType"]
      """  CSF Peru - Rent type  """  
      self.PEPurchaseType:str = obj["PEPurchaseType"]
      """  CSF Peru - Purchase  type  """  
      self.THRefInvoiceNum:str = obj["THRefInvoiceNum"]
      """  TH Reference Invoice Num  """  
      self.THRefVendorNum:int = obj["THRefVendorNum"]
      """  TH Reference Vendor Num  """  
      self.JPSummarizationDate:str = obj["JPSummarizationDate"]
      """  Day when a company sums up accounts payable for supplier  """  
      self.JPBillingDate:str = obj["JPBillingDate"]
      """  Date of a Payment Statement  """  
      self.JPBillingNumber:str = obj["JPBillingNumber"]
      """  Legal Number of Payment Statement  """  
      self.SelfInvoice:bool = obj["SelfInvoice"]
      """  SelfInvoice  """  
      self.Printed:bool = obj["Printed"]
      """  Printed  """  
      self.PurPoint:str = obj["PurPoint"]
      """  PurPoint  """  
      self.PLInvoiceReference:str = obj["PLInvoiceReference"]
      """  PLInvoiceReference  """  
      self.INPortCode:str = obj["INPortCode"]
      """  INPortCode  """  
      self.RefCancelledby:str = obj["RefCancelledby"]
      """  Indicates which invoice number has cancelled this invoice.  """  
      self.CancellationInv:bool = obj["CancellationInv"]
      """  Indicates if this invoice is a cancellation invoice.  """  
      self.NettingID:int = obj["NettingID"]
      """  Id of the netting transaction that generated this document.  """  
      self.WithholdAcctToInterim:bool = obj["WithholdAcctToInterim"]
      """  WithholdAcctToInterim  """  
      self.APTaxRoundOption:int = obj["APTaxRoundOption"]
      """  APTaxRoundOption  """  
      self.SourcePlant:str = obj["SourcePlant"]
      """  Source Plant used for multi site GL  """  
      self.ExtSysType:str = obj["ExtSysType"]
      """  Used for integrations - system type for URL specified in ExtSysURL - B = BisTrack / L = LumberTrack / F = FiberTrack / blank = Building Supply  """  
      self.ExtSysURL:str = obj["ExtSysURL"]
      """  URL for drill back to an integrated external system  """  
      self.CHQRIBAN:str = obj["CHQRIBAN"]
      """  CHQRIBAN  """  
      self.CHQRReference:str = obj["CHQRReference"]
      """  CHQRReference  """  
      self.EDIInvoice:bool = obj["EDIInvoice"]
      """  Set to True for any invoice that is created via EDI  """  
      self.AllowMultInvcReceipts:bool = obj["AllowMultInvcReceipts"]
      """  This external field will hold Company.AllowMultInvcReceipts flag.  """  
      self.ApplyAPPrePayAuto:bool = obj["ApplyAPPrePayAuto"]
      """  Apply AP Pre Payment Automatically.  """  
      self.BankName:str = obj["BankName"]
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  The base currency symbol  """  
      self.BillAddressList:str = obj["BillAddressList"]
      """  The bill address in list format  """  
      self.CanChangeTaxLiab:bool = obj["CanChangeTaxLiab"]
      self.COIFRSCalculation:bool = obj["COIFRSCalculation"]
      """  IFRS Calculation. If the checkbox is not checked then all the elements below are disabled. If the checkbox is checked, then some elements below become enabled showing default values so that the NPV can be calculated  """  
      self.COIFRSEnabled:bool = obj["COIFRSEnabled"]
      """  If true then Colombia IFRS Net Present Value calculation is enabled  """  
      self.COIFRSFinancialCharge:int = obj["COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.COIFRSInterestRate:int = obj["COIFRSInterestRate"]
      self.COIFRSNumberOfPeriods:int = obj["COIFRSNumberOfPeriods"]
      """  Number of Periods for payment  """  
      self.COIFRSPresentValue:int = obj["COIFRSPresentValue"]
      """  Present Value  """  
      self.CPayIMReceived:bool = obj["CPayIMReceived"]
      """  Flag to indicate if the CPay invoice has been received/trasferred to the corporate.  """  
      self.CPayOpenPayable:bool = obj["CPayOpenPayable"]
      """  Indicates if the CPay invoice is still an open payable at Corporate  """  
      self.CumulativeBalance:int = obj["CumulativeBalance"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrInstanceNum:int = obj["CurrInstanceNum"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  The document currency symbol  """  
      self.DisableAplDate:bool = obj["DisableAplDate"]
      """   The flag to indicate if Invoice Header Apply Date is supposed to be Read Only
(There are any detail/misc lines and not DMR Debit Memo invoice)  """  
      self.DocCOIFRSFinancialCharge:int = obj["DocCOIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.DocCOIFRSPresentValue:int = obj["DocCOIFRSPresentValue"]
      """  Present Value  """  
      self.DocCumulativeBalance:int = obj["DocCumulativeBalance"]
      self.DocInvoiceVariance:int = obj["DocInvoiceVariance"]
      """  The doc invoice variance amount  """  
      self.DocMiscChrgNonDeducTax:int = obj["DocMiscChrgNonDeducTax"]
      self.DocMiscChrgVariance:int = obj["DocMiscChrgVariance"]
      self.DocScrHdrExpTotal:int = obj["DocScrHdrExpTotal"]
      self.DocSourceRecurBalance:int = obj["DocSourceRecurBalance"]
      self.DspGuiImportTaxBasis:int = obj["DspGuiImportTaxBasis"]
      """   Taiwan Localization           
Display Field for Gui Import Tax Basis  """  
      self.EnableAssignLegNum:bool = obj["EnableAssignLegNum"]
      self.EnableCPay:bool = obj["EnableCPay"]
      """  Indicates when to enable the CPay field.  """  
      self.EnableDueDate:bool = obj["EnableDueDate"]
      self.EnableExchangeRate:bool = obj["EnableExchangeRate"]
      self.EnableLockRate:bool = obj["EnableLockRate"]
      self.EnableTaxExRate:bool = obj["EnableTaxExRate"]
      self.EnableTaxLock:bool = obj["EnableTaxLock"]
      self.EnableTranDocType:bool = obj["EnableTranDocType"]
      """  Enable setting of Transaction Document Type  """  
      self.EnableVoidLegNum:bool = obj["EnableVoidLegNum"]
      self.ExchangeRateDate:str = obj["ExchangeRateDate"]
      """  Indicates which date to be used to calculate the exchange rate, I for Invoice Date, A for Apply Date.  """  
      self.GuiTaxBasisFlag:bool = obj["GuiTaxBasisFlag"]
      """   Taiwan Localization           
The flag to indicate if GUITaxBasis prompt is available  """  
      self.HasLegNumCnfg:bool = obj["HasLegNumCnfg"]
      self.IBANCode:str = obj["IBANCode"]
      """  IBAN Code  """  
      self.InvoiceTypeDesc:str = obj["InvoiceTypeDesc"]
      """  for Bill of Exchange  """  
      self.InvoiceVariance:int = obj["InvoiceVariance"]
      """  The invoice variance amount  """  
      self.IsLatestRecurrence:bool = obj["IsLatestRecurrence"]
      self.IsLcked:bool = obj["IsLcked"]
      """  shows is this invoice is blocked in RvLock.  """  
      self.IsOnlyMiscRecords:bool = obj["IsOnlyMiscRecords"]
      """  Is Only Misc lines exits  """  
      self.LACTaxCalcEnabled:bool = obj["LACTaxCalcEnabled"]
      """  LAC Tax Calculation Enabled  """  
      self.LatestInvoice:int = obj["LatestInvoice"]
      self.LatestInvString:str = obj["LatestInvString"]
      self.LegalNumberMessage:str = obj["LegalNumberMessage"]
      self.LineOrMscChrgExists:bool = obj["LineOrMscChrgExists"]
      """  Indicates if lines or misc charges exist for the invoice  """  
      self.LockStatus:str = obj["LockStatus"]
      """  locked means can not be posted: an invoice is already in review journal or in posting process.  """  
      self.MiscChrgNonDeducTax:int = obj["MiscChrgNonDeducTax"]
      self.MiscChrgVariance:int = obj["MiscChrgVariance"]
      self.NextInvoiceDate:str = obj["NextInvoiceDate"]
      """  NextInvoiceDate = InvcRecurringCycle.LastDate + RecurringCycle.Interval in RecurringCycle.Modifier units  """  
      self.NoChangeRecur:bool = obj["NoChangeRecur"]
      self.PayMethod:str = obj["PayMethod"]
      """  Pay Method Type  """  
      self.PEFiscalCreditOperStatusDsp:str = obj["PEFiscalCreditOperStatusDsp"]
      """  CSF Peru - Fiscal Credit Operation Status  """  
      self.PEIsNRInvc:bool = obj["PEIsNRInvc"]
      """  Peru Localization Field, Field to disable Non-Resident Inovices Fields.  """  
      self.PLVendorAutoInvoiceNum:bool = obj["PLVendorAutoInvoiceNum"]
      """  CSF Poland. Vendor uses Invoice reference number  """  
      self.PostInvtyWipCos:bool = obj["PostInvtyWipCos"]
      self.RecalcAmts:str = obj["RecalcAmts"]
      """   This field indicates id all the amounts related to the invoice are supposed to be re-calculated on change of the Applate Date.
"R" - the user's answer is recalculate the amounts
"N" the user's answer is  do not recalculate the amount
Blank - user is not asked  """  
      self.Recurring:bool = obj["Recurring"]
      """  Recurring Source flag  """  
      self.RecurringState:str = obj["RecurringState"]
      self.Rpt1COIFRSFinancialCharge:int = obj["Rpt1COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt1COIFRSPresentValue:int = obj["Rpt1COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt1CumulativeBalance:int = obj["Rpt1CumulativeBalance"]
      self.Rpt1InvoiceVariance:int = obj["Rpt1InvoiceVariance"]
      self.Rpt1MiscChrgNonDeducTax:int = obj["Rpt1MiscChrgNonDeducTax"]
      self.Rpt1MiscChrgVariance:int = obj["Rpt1MiscChrgVariance"]
      self.Rpt1ScrDiscountAmt:int = obj["Rpt1ScrDiscountAmt"]
      self.Rpt1ScrHdrExpTotal:int = obj["Rpt1ScrHdrExpTotal"]
      self.Rpt1ScrHdrMiscChrgTotal:int = obj["Rpt1ScrHdrMiscChrgTotal"]
      self.Rpt1ScrInvLineTotal:int = obj["Rpt1ScrInvLineTotal"]
      self.Rpt1ScrInvoiceAmt:int = obj["Rpt1ScrInvoiceAmt"]
      self.Rpt1ScrInvoiceBal:int = obj["Rpt1ScrInvoiceBal"]
      self.Rpt1ScrInvoiceVendorAmt:int = obj["Rpt1ScrInvoiceVendorAmt"]
      self.Rpt1ScrLACTaxAmt:int = obj["Rpt1ScrLACTaxAmt"]
      """  Rpt1 Scr LAC Tax Amt  """  
      self.Rpt1ScrRounding:int = obj["Rpt1ScrRounding"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTotBOEWithholding:int = obj["Rpt1ScrTotBOEWithholding"]
      self.Rpt1ScrTotDedTaxAmt:int = obj["Rpt1ScrTotDedTaxAmt"]
      self.Rpt1ScrTotInvoiceAmt:int = obj["Rpt1ScrTotInvoiceAmt"]
      self.Rpt1ScrTotReportableAmt:int = obj["Rpt1ScrTotReportableAmt"]
      self.Rpt1ScrTotSelfAmt:int = obj["Rpt1ScrTotSelfAmt"]
      self.Rpt1ScrTotTaxableAmt:int = obj["Rpt1ScrTotTaxableAmt"]
      self.Rpt1ScrTotWithholdingAmt:int = obj["Rpt1ScrTotWithholdingAmt"]
      self.Rpt1ScrUnpostedBal:int = obj["Rpt1ScrUnpostedBal"]
      self.Rpt1SourceRecurBalance:int = obj["Rpt1SourceRecurBalance"]
      self.Rpt2COIFRSFinancialCharge:int = obj["Rpt2COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt2COIFRSPresentValue:int = obj["Rpt2COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt2CumulativeBalance:int = obj["Rpt2CumulativeBalance"]
      self.Rpt2InvoiceVariance:int = obj["Rpt2InvoiceVariance"]
      self.Rpt2MiscChrgNonDeducTax:int = obj["Rpt2MiscChrgNonDeducTax"]
      self.Rpt2MiscChrgVariance:int = obj["Rpt2MiscChrgVariance"]
      self.Rpt2ScrDiscountAmt:int = obj["Rpt2ScrDiscountAmt"]
      self.Rpt2ScrHdrExpTotal:int = obj["Rpt2ScrHdrExpTotal"]
      self.Rpt2ScrHdrMiscChrgTotal:int = obj["Rpt2ScrHdrMiscChrgTotal"]
      self.Rpt2ScrInvLineTotal:int = obj["Rpt2ScrInvLineTotal"]
      self.Rpt2ScrInvoiceAmt:int = obj["Rpt2ScrInvoiceAmt"]
      self.Rpt2ScrInvoiceBal:int = obj["Rpt2ScrInvoiceBal"]
      self.Rpt2ScrInvoiceVendorAmt:int = obj["Rpt2ScrInvoiceVendorAmt"]
      self.Rpt2ScrLACTaxAmt:int = obj["Rpt2ScrLACTaxAmt"]
      """  Rpt2 Scr LAC Tax Amt  """  
      self.Rpt2ScrRounding:int = obj["Rpt2ScrRounding"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTotBOEWithholding:int = obj["Rpt2ScrTotBOEWithholding"]
      self.Rpt2ScrTotDedTaxAmt:int = obj["Rpt2ScrTotDedTaxAmt"]
      self.Rpt2ScrTotInvoiceAmt:int = obj["Rpt2ScrTotInvoiceAmt"]
      self.Rpt2ScrTotReportableAmt:int = obj["Rpt2ScrTotReportableAmt"]
      self.Rpt2ScrTotSelfAmt:int = obj["Rpt2ScrTotSelfAmt"]
      self.Rpt2ScrTotTaxableAmt:int = obj["Rpt2ScrTotTaxableAmt"]
      self.Rpt2ScrTotWithholdingAmt:int = obj["Rpt2ScrTotWithholdingAmt"]
      self.Rpt2ScrUnpostedBal:int = obj["Rpt2ScrUnpostedBal"]
      self.Rpt2SourceRecurBalance:int = obj["Rpt2SourceRecurBalance"]
      self.Rpt3COIFRSFinancialCharge:int = obj["Rpt3COIFRSFinancialCharge"]
      """  Financial Charge  """  
      self.Rpt3COIFRSPresentValue:int = obj["Rpt3COIFRSPresentValue"]
      """  Present Value  """  
      self.Rpt3CumulativeBalance:int = obj["Rpt3CumulativeBalance"]
      self.Rpt3InvoiceVariance:int = obj["Rpt3InvoiceVariance"]
      self.Rpt3MiscChrgNonDeducTax:int = obj["Rpt3MiscChrgNonDeducTax"]
      self.Rpt3MiscChrgVariance:int = obj["Rpt3MiscChrgVariance"]
      self.Rpt3ScrDiscountAmt:int = obj["Rpt3ScrDiscountAmt"]
      self.Rpt3ScrHdrExpTotal:int = obj["Rpt3ScrHdrExpTotal"]
      self.Rpt3ScrHdrMiscChrgTotal:int = obj["Rpt3ScrHdrMiscChrgTotal"]
      self.Rpt3ScrInvLineTotal:int = obj["Rpt3ScrInvLineTotal"]
      self.Rpt3ScrInvoiceAmt:int = obj["Rpt3ScrInvoiceAmt"]
      self.Rpt3ScrInvoiceBal:int = obj["Rpt3ScrInvoiceBal"]
      self.Rpt3ScrInvoiceVendorAmt:int = obj["Rpt3ScrInvoiceVendorAmt"]
      self.Rpt3ScrLACTaxAmt:int = obj["Rpt3ScrLACTaxAmt"]
      """  Rpt3 Scr LAC Tax Amt  """  
      self.Rpt3ScrRounding:int = obj["Rpt3ScrRounding"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTotBOEWithholding:int = obj["Rpt3ScrTotBOEWithholding"]
      self.Rpt3ScrTotDedTaxAmt:int = obj["Rpt3ScrTotDedTaxAmt"]
      self.Rpt3ScrTotInvoiceAmt:int = obj["Rpt3ScrTotInvoiceAmt"]
      self.Rpt3ScrTotReportableAmt:int = obj["Rpt3ScrTotReportableAmt"]
      self.Rpt3ScrTotSelfAmt:int = obj["Rpt3ScrTotSelfAmt"]
      self.Rpt3ScrTotTaxableAmt:int = obj["Rpt3ScrTotTaxableAmt"]
      self.Rpt3ScrTotWithholdingAmt:int = obj["Rpt3ScrTotWithholdingAmt"]
      self.Rpt3ScrUnpostedBal:int = obj["Rpt3ScrUnpostedBal"]
      self.Rpt3SourceRecurBalance:int = obj["Rpt3SourceRecurBalance"]
      self.RptScrTotWithholdingAmt:int = obj["RptScrTotWithholdingAmt"]
      self.RvnJrnUID:int = obj["RvnJrnUID"]
      """  Review Journal UID  """  
      self.ScrDiscountAmt:int = obj["ScrDiscountAmt"]
      self.ScrDocDiscountAmt:int = obj["ScrDocDiscountAmt"]
      self.ScrDocHdrMiscChrgTotal:int = obj["ScrDocHdrMiscChrgTotal"]
      self.ScrDocInvLineTotal:int = obj["ScrDocInvLineTotal"]
      self.ScrDocInvoiceAmt:int = obj["ScrDocInvoiceAmt"]
      self.ScrDocInvoiceBal:int = obj["ScrDocInvoiceBal"]
      self.ScrDocInvoiceVendorAmt:int = obj["ScrDocInvoiceVendorAmt"]
      self.ScrDocRounding:int = obj["ScrDocRounding"]
      self.ScrDocTaxAmt:int = obj["ScrDocTaxAmt"]
      self.ScrDocTotBOEWithholding:int = obj["ScrDocTotBOEWithholding"]
      self.ScrDocTotDedTaxAmt:int = obj["ScrDocTotDedTaxAmt"]
      self.ScrDocTotInvoiceAmt:int = obj["ScrDocTotInvoiceAmt"]
      self.ScrDocTotReportableAmt:int = obj["ScrDocTotReportableAmt"]
      self.ScrDocTotSelfAmt:int = obj["ScrDocTotSelfAmt"]
      self.ScrDocTotTaxableAmt:int = obj["ScrDocTotTaxableAmt"]
      self.ScrDocTotWithholdingAmt:int = obj["ScrDocTotWithholdingAmt"]
      self.ScrDocUnpostedBal:int = obj["ScrDocUnpostedBal"]
      self.ScrHdrExpTotal:int = obj["ScrHdrExpTotal"]
      self.ScrHdrMiscChrgTotal:int = obj["ScrHdrMiscChrgTotal"]
      self.ScrInvLineTotal:int = obj["ScrInvLineTotal"]
      self.ScrInvoiceAmt:int = obj["ScrInvoiceAmt"]
      self.ScrInvoiceBal:int = obj["ScrInvoiceBal"]
      self.ScrInvoiceRef:str = obj["ScrInvoiceRef"]
      self.ScrInvoiceVendorAmt:int = obj["ScrInvoiceVendorAmt"]
      self.ScrLACDocTaxAmt:int = obj["ScrLACDocTaxAmt"]
      """  Scr LAC Doc Tax Amt  """  
      self.ScrLACTaxAmt:int = obj["ScrLACTaxAmt"]
      """  Scr LAC Tax Amt  """  
      self.ScrRounding:int = obj["ScrRounding"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      """  The screen tax amount  """  
      self.ScrTotBOEWithholding:int = obj["ScrTotBOEWithholding"]
      """  Total of withholdings of all BOE Lines.  """  
      self.ScrTotDedTaxAmt:int = obj["ScrTotDedTaxAmt"]
      self.ScrTotInvoiceAmt:int = obj["ScrTotInvoiceAmt"]
      """  Shall be the sum of column 'Tax Amount' for all lines with collection method 'Invoice'  """  
      self.ScrTotReportableAmt:int = obj["ScrTotReportableAmt"]
      self.ScrTotSelfAmt:int = obj["ScrTotSelfAmt"]
      """  shall be the sum of column 'Tax Amount' for all lines with collection method 'Self-Assessed' or mehtod 'Self-Assessed'  """  
      self.ScrTotTaxableAmt:int = obj["ScrTotTaxableAmt"]
      self.ScrTotWithholdingAmt:int = obj["ScrTotWithholdingAmt"]
      """  shall be the sum of column 'Tax Amount' for all lines with collection  method 'Withholding'  """  
      self.ScrUnpostedBal:int = obj["ScrUnpostedBal"]
      self.SkipRecurring:bool = obj["SkipRecurring"]
      self.SourceInvoiceNum:str = obj["SourceInvoiceNum"]
      """  Recurrent Invoices functionality  """  
      self.SourceLastDate:str = obj["SourceLastDate"]
      self.SourceRecurBalance:int = obj["SourceRecurBalance"]
      self.SwiftCode:str = obj["SwiftCode"]
      """  Swift Code  """  
      self.SystemTranType:str = obj["SystemTranType"]
      """  System Transaction Type: APInvoice/DebitMemo  is used in the filter of TranDocType combo-box.  """  
      self.TaxExchangeRate:int = obj["TaxExchangeRate"]
      self.TaxLinesExist:bool = obj["TaxLinesExist"]
      self.TaxRateLinesExist:bool = obj["TaxRateLinesExist"]
      self.TotalInstanceNum:int = obj["TotalInstanceNum"]
      self.TranDocTypeDescription:str = obj["TranDocTypeDescription"]
      """  Link to TranDocType table, can be removed when path filed TranDocTypeID is replaced with actual one.  """  
      self.TransApplyDate:str = obj["TransApplyDate"]
      """  This field is used when invoice is transferred to another Invoice Group and the user has a chance to change the Apply date of the invoice transferred.  """  
      self.UseTaxRate:bool = obj["UseTaxRate"]
      self.VendorInactive:bool = obj["VendorInactive"]
      """  Indicates if the vendor on the invoice is active or not.  """  
      self.VendorPayHold:bool = obj["VendorPayHold"]
      """  Indicates if the vendor on the invoice is in a pay hold state.  """  
      self.VNDateReceived:str = obj["VNDateReceived"]
      self.VNInvoiceType:str = obj["VNInvoiceType"]
      self.XRateLabel:str = obj["XRateLabel"]
      """  Exchange Rate Label  """  
      self.AllowChgAfterPrint:bool = obj["AllowChgAfterPrint"]
      self.FormattedVendorNameAddress:str = obj["FormattedVendorNameAddress"]
      """  Formatted Supplier Name and Address  """  
      self.SiteIsLegalEntity:bool = obj["SiteIsLegalEntity"]
      """  Site is a LegalEntity  """  
      self.BitFlag:int = obj["BitFlag"]
      self.AGCustomsDescription:str = obj["AGCustomsDescription"]
      self.AGDestinationDescription:str = obj["AGDestinationDescription"]
      self.APInvRecurringCycleInactive:bool = obj["APInvRecurringCycleInactive"]
      self.APInvRecurringCycleDescription:str = obj["APInvRecurringCycleDescription"]
      self.APLOCIDDescription:str = obj["APLOCIDDescription"]
      self.CurrencyCodeCurrName:str = obj["CurrencyCodeCurrName"]
      self.CurrencyCodeCurrSymbol:str = obj["CurrencyCodeCurrSymbol"]
      self.CurrencyCodeCurrencyID:str = obj["CurrencyCodeCurrencyID"]
      self.CurrencyCodeCurrDesc:str = obj["CurrencyCodeCurrDesc"]
      self.CurrencyCodeDocumentDesc:str = obj["CurrencyCodeDocumentDesc"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.JournalCodeJrnlDescription:str = obj["JournalCodeJrnlDescription"]
      self.PayMethodType:int = obj["PayMethodType"]
      self.PayMethodSummarizePerCustomer:bool = obj["PayMethodSummarizePerCustomer"]
      self.PayMethodName:str = obj["PayMethodName"]
      self.RateGrpCodeDescription:str = obj["RateGrpCodeDescription"]
      self.SourcePlantName:str = obj["SourcePlantName"]
      self.TaxRateGrpDescription:str = obj["TaxRateGrpDescription"]
      self.TaxRegionCodeDescription:str = obj["TaxRegionCodeDescription"]
      self.TermsCodeDescription:str = obj["TermsCodeDescription"]
      self.TermsCodeTermsType:str = obj["TermsCodeTermsType"]
      self.THRefVendorNumName:str = obj["THRefVendorNumName"]
      self.THRefVendorNumVendorID:str = obj["THRefVendorNumVendorID"]
      self.VendBankPMUID:int = obj["VendBankPMUID"]
      self.VendBankCardCode:str = obj["VendBankCardCode"]
      self.VendBankBankAcctNumber:str = obj["VendBankBankAcctNumber"]
      self.VendBankIBANCode:str = obj["VendBankIBANCode"]
      self.VendBankBankGiroAcctNbr:str = obj["VendBankBankGiroAcctNbr"]
      self.VendBankSwiftNum:str = obj["VendBankSwiftNum"]
      self.VendBankLocalBIC:str = obj["VendBankLocalBIC"]
      self.VendBankBankName:str = obj["VendBankBankName"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.XbSystAPTaxLnLevel:bool = obj["XbSystAPTaxLnLevel"]
      self.XbSystIsDiscountforDebitM:bool = obj["XbSystIsDiscountforDebitM"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvHedTransferListRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date this invoice will get applied to the books when it is posted.  """  
      self.Company:str = obj["Company"]
      """  Company Identifier  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      """  Total invoice Amount (Vendors Currency). This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and the miscellaneous charges/credits records (APInvMsc). This field has a positive sign (debit memos are negative).  """  
      self.EntryPerson:str = obj["EntryPerson"]
      """  User ID taht entered the invoice. This is not maintainable by the user.  """  
      self.GroupID:str = obj["GroupID"]
      """  The Group that the invoice was associated with during the data entry process. This field is not directly maintainable. it is assigned by the invoice entry program using teh GroupID of the "current" group that the user is working with. It is used as a selection criteria during the posting process.  """  
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      """  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (APInvDtl) and the miscellaneous charges/credits records (APInvMsc). This field has a positive sign (debit memos are negative).  """  
      self.InvoiceDate:str = obj["InvoiceDate"]
      """  Invoice date.  """  
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      """  Invoices that are within a data entry group can be put on "Hold". They will not be posted until InvoceHeld= false. This flag can be used for whatever the reason a user may wish to keep an invoice in a data entry group from being posted. This is NOT the same as putting an invoice on PaymentHold.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  The Legal Number for the record. This number is created based on setup parameters in table LegalNumber  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The internal VendorNum that ties back to the Vendor master file. This field is not directly maintainable, istead it is assigned from the Vendor. VendorNUmusing VendorID to find the Vendor record.  """  
      self.VendorNumName:str = obj["VendorNumName"]
      """  Supplier Name  """  
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      """  Supplier ID  """  
      self.SelectedForAction:bool = obj["SelectedForAction"]
      """  This is used to preserve the selected status of the row.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvJobRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum duplicated from the corresponding APInvDtl record.  Not directly maintainable by the operator.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvDtl record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Copied from the related APINDtl record.  """  
      self.JobNum:str = obj["JobNum"]
      """  Job Number.  """  
      self.AssemblySeq:int = obj["AssemblySeq"]
      """  Assembly sequence number that this record is associated with.  """  
      self.MtlSeq:int = obj["MtlSeq"]
      """  The MtlSeq of the JObMtl record that this is related to.  """  
      self.ExtCost:int = obj["ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt1ExtCost:int = obj["Rpt1ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt2ExtCost:int = obj["Rpt2ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.Rpt3ExtCost:int = obj["Rpt3ExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.DocExtCost:int = obj["DocExtCost"]
      """  item's ext. cost in the vendors unit of measure.  The sum of all APInvJob.ExtCost must equal the total cost of the related APInvDtl.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Project ID, entered for miscellaneous invoice lines only..  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase, entered for miscellaneous invoice lines only.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The purchasing misc charge code used to link to the Job Misc Charge entry to a WBS Phase JobMtl sequence.  """  
      self.ProjProcessed:bool = obj["ProjProcessed"]
      """  Logical field to indicate if this record has been read by project analysis process.  """  
      self.AsOfDate:str = obj["AsOfDate"]
      """  Used By Project Analysis Process  """  
      self.AsOfSeq:int = obj["AsOfSeq"]
      """  Used By Project Analysis Process  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.EmpID:str = obj["EmpID"]
      """  Specifies the employee identifier associated with the job material record.  """  
      self.EmpExpenseNum:int = obj["EmpExpenseNum"]
      """  Specifies the employee expense number associated with the job material record.  """  
      self.PartTranSysRowID:str = obj["PartTranSysRowID"]
      """  PartTranSysRowID  """  
      self.AddedJobMtlSeq:int = obj["AddedJobMtlSeq"]
      """  Used to temporarily hold the JobMtl.MtlSeq if a new JobMtl was created during the while the user is making changes to the ApInvJob record in AP Invoice entry. The value is cleared once the APInvJob changes are saved.  """  
      self.CallLine:int = obj["CallLine"]
      self.CallNum:int = obj["CallNum"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrExtCost:int = obj["DocScrExtCost"]
      self.EnableMaterialComplete:bool = obj["EnableMaterialComplete"]
      self.GroupID:str = obj["GroupID"]
      self.JobMtlDescription:str = obj["JobMtlDescription"]
      self.JobMtlMiscCodeDesc:str = obj["JobMtlMiscCodeDesc"]
      self.JobMtlPartNum:str = obj["JobMtlPartNum"]
      self.JobMtlTotalCost:int = obj["JobMtlTotalCost"]
      self.JobMtlUnitCost:int = obj["JobMtlUnitCost"]
      self.JobType:str = obj["JobType"]
      self.MaterialComplete:bool = obj["MaterialComplete"]
      self.MtlQuestion:str = obj["MtlQuestion"]
      self.PhaseDescription:str = obj["PhaseDescription"]
      self.Posted:bool = obj["Posted"]
      self.Rpt1ScrExtCost:int = obj["Rpt1ScrExtCost"]
      self.Rpt2ScrExtCost:int = obj["Rpt2ScrExtCost"]
      self.Rpt3ScrExtCost:int = obj["Rpt3ScrExtCost"]
      self.ScrExtCost:int = obj["ScrExtCost"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.JobNumPartDescription:str = obj["JobNumPartDescription"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvLnMscTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.MscNum:int = obj["MscNum"]
      """  MscNum  """  
      self.APInvMscSysRowID:str = obj["APInvMscSysRowID"]
      """  APInvMscSysRowID  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deductible Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deductible Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.GroupID:str = obj["GroupID"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DisableManual:bool = obj["DisableManual"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvMscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  Duplicated  from the related APInvHed record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvHed record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the InvcDetl record for the Invoice and the adding 1 to it.  """  
      self.MscNum:int = obj["MscNum"]
      """  Number automatically assigned by invoice entry which is used along with VendorNum, InvoiceNum and InvoiceLine to uniquely identify the miscellaneous record within the invoice.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Code that relates this invoice miscellaneous charge to the PurMisc master. Entered via a DDSL widget.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. Defaulted from PurMisc.Description.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  miscellaneous amount.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  miscellaneous amount in the vendor currency.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that this miscellaneous record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  PO line number that this miscellaneous record is related to. If related to the PO Header then this field is zero.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence number of the Miscellaneous Charge  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """   Identifies Tax Category for this Misc. item.
Defaults from PurMisc.TaxCatID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceLine:int = obj["GlbInvoiceLine"]
      """  Global Invoice Line identifier.  Used in Consolidated Purchasing.  """  
      self.GlbMscNum:int = obj["GlbMscNum"]
      """  Global Invoice Miscellaneous Charge identifier.  Used in Consolidated Purchasing.  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Reporting currency value of this field  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      """  Reference to the APInvExp record that contains the gl distribution for this charge.  """  
      self.LCFlag:bool = obj["LCFlag"]
      """  Indicates if the AP Miscellaneous Charge is for Landed Cost.  """  
      self.ContainerID:int = obj["ContainerID"]
      """  The Container Shipment ID (also known as the ContainerID).  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID of the associated receipt's indirect cost.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip # of the associated receipt's indirect cost.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.LCVendorNum:int = obj["LCVendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  This field, together with the PackSlip and PurPoint, is used to link the APInvMsc to the RcvMisc record that references this misc charge as a Landed Cost's Indirect Cost.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Like PurMisc.LCDisburseMethod. Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.InMiscAmt:int = obj["InMiscAmt"]
      """  miscellaneous amount including taxes.  """  
      self.DocInMiscAmt:int = obj["DocInMiscAmt"]
      """  miscellaneous amount in the vendor currency including taxes.  """  
      self.Rpt1InMiscAmt:int = obj["Rpt1InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2InMiscAmt:int = obj["Rpt2InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3InMiscAmt:int = obj["Rpt3InMiscAmt"]
      """  Reporting currency value of this field  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.CorrectionDtl:bool = obj["CorrectionDtl"]
      """  Will be set to Yes if the AP Invoice Dtl was created by the Correction (Reversing) logic.  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  NoTaxRecalc  """  
      self.Code1099ID:str = obj["Code1099ID"]
      """  Code1099ID  """  
      self.FormTypeID:str = obj["FormTypeID"]
      """  FormTypeID  """  
      self.Gen1099Code:str = obj["Gen1099Code"]
      """  Gen1099Code  """  
      self.TaxExemptReasonCode:str = obj["TaxExemptReasonCode"]
      """  TaxExemptReasonCode  """  
      self.PlasticPackTaxReportID:str = obj["PlasticPackTaxReportID"]
      """  The Plastic Packaging Tax Report ID.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DocScrTotalDedTax:int = obj["DocScrTotalDedTax"]
      self.DocScrTotalSATax:int = obj["DocScrTotalSATax"]
      self.DocScrTotalTax:int = obj["DocScrTotalTax"]
      self.GroupID:str = obj["GroupID"]
      self.InPrice:bool = obj["InPrice"]
      self.LCEnabled:bool = obj["LCEnabled"]
      self.Posted:bool = obj["Posted"]
      self.RecordSource:str = obj["RecordSource"]
      self.Rpt1ScrMiscAmt:int = obj["Rpt1ScrMiscAmt"]
      self.Rpt1ScrTotalDedTax:int = obj["Rpt1ScrTotalDedTax"]
      self.Rpt1ScrTotalSATax:int = obj["Rpt1ScrTotalSATax"]
      self.Rpt1ScrTotalTax:int = obj["Rpt1ScrTotalTax"]
      self.Rpt2ScrMiscAmt:int = obj["Rpt2ScrMiscAmt"]
      self.Rpt2ScrTotalDedTax:int = obj["Rpt2ScrTotalDedTax"]
      self.Rpt2ScrTotalSATax:int = obj["Rpt2ScrTotalSATax"]
      self.Rpt2ScrTotalTax:int = obj["Rpt2ScrTotalTax"]
      self.Rpt3ScrMiscAmt:int = obj["Rpt3ScrMiscAmt"]
      self.Rpt3ScrTotalDedTax:int = obj["Rpt3ScrTotalDedTax"]
      self.Rpt3ScrTotalSATax:int = obj["Rpt3ScrTotalSATax"]
      self.Rpt3ScrTotalTax:int = obj["Rpt3ScrTotalTax"]
      self.ScrDocMiscAmt:int = obj["ScrDocMiscAmt"]
      self.ScrMiscAmt:int = obj["ScrMiscAmt"]
      self.ScrTotalDedTax:int = obj["ScrTotalDedTax"]
      self.ScrTotalSATax:int = obj["ScrTotalSATax"]
      self.ScrTotalTax:int = obj["ScrTotalTax"]
      self.Selected:bool = obj["Selected"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.MiscCodeLCCurrencyCode:str = obj["MiscCodeLCCurrencyCode"]
      self.MiscCodeLCDisburseMethod:str = obj["MiscCodeLCDisburseMethod"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.MiscCodeLCAmount:int = obj["MiscCodeLCAmount"]
      self.POLineVenPartNum:str = obj["POLineVenPartNum"]
      self.POLineLineDesc:str = obj["POLineLineDesc"]
      self.POLinePartNum:str = obj["POLinePartNum"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvPBRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  A  unique integer assigned by the system to new vendors by the  maintenance program. This field is used as the foreign key to identify the vendor in other files such as CheckHed, or POHeader. The end user should never need to know about the value of this field.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Vendor's invoice number.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  This field along with Company, VendorNum and InvoiceNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the APInvDtl record for the Invoice and the adding 1 to it.  """  
      self.RoleCd:str = obj["RoleCd"]
      """  Project Role Code  """  
      self.ProjectID:str = obj["ProjectID"]
      """  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  """  
      self.PhaseID:str = obj["PhaseID"]
      """  Project Phase ID  """  
      self.HoursChg:int = obj["HoursChg"]
      """  This is the hours that the subcontract supplier is charging for the work.  """  
      self.MtlChg:int = obj["MtlChg"]
      """  This is the material costs associated with the subcontract operation. In base currency.  """  
      self.DocMtlChg:int = obj["DocMtlChg"]
      """  This is the material costs associated with the subcontract operation. In document currency.  """  
      self.Rpt1MtlChg:int = obj["Rpt1MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 1.  """  
      self.Rpt2MtlChg:int = obj["Rpt2MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 2.  """  
      self.Rpt3MtlChg:int = obj["Rpt3MtlChg"]
      """  This is the material costs associated with the subcontract operation. In In Reportable currency 3.  """  
      self.InvDtlValue:int = obj["InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Base currency  """  
      self.DocInvDtlValue:int = obj["DocInvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In document currency  """  
      self.Rpt1InvDtlValue:int = obj["Rpt1InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 1.  """  
      self.Rpt2InvDtlValue:int = obj["Rpt2InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 2.  """  
      self.Rpt3InvDtlValue:int = obj["Rpt3InvDtlValue"]
      """  This is the amount of the invoice line total that applies to this Project Role code. In Reportable currency 3.  """  
      self.PBInvNum:int = obj["PBInvNum"]
      """  The Project Billing Invoice Number where these charges were processed.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.ScrMtlChg:int = obj["ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In base currency. Used for data entry. The BL will flip the sign if necessary for the MtlChg db field.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Holds the same value as APInvHed CurrencyCode  """  
      self.ScrDocMtlChg:int = obj["ScrDocMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In document  currency. Used for data entry  """  
      self.Rpt1ScrMtlChg:int = obj["Rpt1ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 1. Used for data entry. The BL will flip the sign if necessary for the Rpt1MtlChg db field.  """  
      self.Rpt2ScrMtlChg:int = obj["Rpt2ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 2. Used for data entry.  """  
      self.Rpt3ScrMtlChg:int = obj["Rpt3ScrMtlChg"]
      """  This is External field for the material costs associated with the subcontract operation. In Reportable currency 3. Used for data entry.  """  
      self.ScrInvDtlValue:int = obj["ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Base currency. Used for data entry.  """  
      self.ScrDocInvDtlValue:int = obj["ScrDocInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Document currency. Used for data entry.  """  
      self.Rpt1ScrInvDtlValue:int = obj["Rpt1ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 1. Used for data entry.  """  
      self.Rpt2ScrInvDtlValue:int = obj["Rpt2ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 2. Used for data entry.  """  
      self.Rpt3ScrInvDtlValue:int = obj["Rpt3ScrInvDtlValue"]
      """  This is external field for the amount of the invoice line total that applies to this Project Role code. In Reportable currency 3. Used for data entry.  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  Same as APInvHed.CurrencySwitch  """  
      self.DebitMemo:bool = obj["DebitMemo"]
      """  Indicates if this invoice is a debit memo  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RoleCdRoleDescription:str = obj["RoleCdRoleDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvPOMiscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase order number that this miscellaneous record is related to.  """  
      self.POLine:int = obj["POLine"]
      """  PO line number that this miscellaneous record is related to. If related to the PO Header then this field is zero. This number is not directly entered by the user; rather it is carried through from the header or detail line that user was on when they requested miscellaneous maintenance.  """  
      self.SeqNum:int = obj["SeqNum"]
      """  Sequence Number  """  
      self.MiscCode:str = obj["MiscCode"]
      """  The Miscellaneous Charge Code. This must be valid in the PurMisc master file.  """  
      self.Description:str = obj["Description"]
      """  Description of the miscellaneous charge. This will be printed on the PO. The default is provided by PurMisc.Description, but it is overridable by the user. This can't be blank.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  The amount of the Miscellaneous Charge/Credit. Can't be zero.  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  The Customer Currency amount of the Miscellaneous Charge/Credit. Can't be zero.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Balance:int = obj["Balance"]
      self.DocBalance:int = obj["DocBalance"]
      self.RecordSource:str = obj["RecordSource"]
      self.MiscCodeDescription:str = obj["MiscCodeDescription"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvPOMiscTableset:
   def __init__(self, obj):
      self.APInvPOMisc:list[Erp_Tablesets_APInvPOMiscRow] = obj["APInvPOMisc"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvReceiptBillingTableset:
   def __init__(self, obj):
      self.APUninvoicedReceipts:list[Erp_Tablesets_APUninvoicedReceiptsRow] = obj["APUninvoicedReceipts"]
      self.APUninvoicedRcptLines:list[Erp_Tablesets_APUninvoicedRcptLinesRow] = obj["APUninvoicedRcptLines"]
      self.APReceiptTotals:list[Erp_Tablesets_APReceiptTotalsRow] = obj["APReceiptTotals"]
      self.APSelectedRcptLines:list[Erp_Tablesets_APSelectedRcptLinesRow] = obj["APSelectedRcptLines"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APInvSchedRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable, instead it is assigned from the Vendor.VendorNum using VendorID to find the Vendor record.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  InvoiceNum  """  
      self.PaySeq:int = obj["PaySeq"]
      """  Specifies the number of payment of the Payment Schedule. This is an auto-generated sequence number.  """  
      self.PayDays:int = obj["PayDays"]
      """  Specifies the number of days for the payment to be paid.  """  
      self.PayDueDate:str = obj["PayDueDate"]
      """  Specifies the due date of the Scheduled payment.  """  
      self.DocPayAmount:int = obj["DocPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment’s Percentage.  """  
      self.PayAmount:int = obj["PayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.Rpt1PayAmount:int = obj["Rpt1PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2PayAmount:int = obj["Rpt2PayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3PayAmount:int = obj["Rpt3PayAmount"]
      """  Reporting currency value of this field  """  
      self.PayPercent:int = obj["PayPercent"]
      """  Specifies the percent of the payment to be paid. This is used to calculate amount to be paid per payment.  """  
      self.CreatedBy:str = obj["CreatedBy"]
      """  UserID of who created record.  """  
      self.CreatedOn:str = obj["CreatedOn"]
      """  Date record was created  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  UserID of who changed record.  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  Date record was changed  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbPaySeq:int = obj["GlbPaySeq"]
      """  Global PaySeq identifier.  Used in Consolidated Purchasing.  """  
      self.GroupID:str = obj["GroupID"]
      self.ScrPayAmount:int = obj["ScrPayAmount"]
      """  Amount in Base Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment's Percentage.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocScrPayAmount:int = obj["DocScrPayAmount"]
      """  Amount in Document Currency to be paid for the payment. This amount calculates by default based on Invoice total amount and Payment’s Percentage.  """  
      self.Rpt1ScrPayAmount:int = obj["Rpt1ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2ScrPayAmount:int = obj["Rpt2ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3ScrPayAmount:int = obj["Rpt3ScrPayAmount"]
      """  Reporting currency value of this field  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.SummaryOnly:bool = obj["SummaryOnly"]
      """   flag to indicate if this record is used only to total detail records,
no update allowed.  """  
      self.DevInt1:int = obj["DevInt1"]
      """  When AP Misc. Payment / Prepayment has related TaxDtl records, and related Prepayment APInvTax record is created this field contains Payment HeadNum  """  
      self.DevInt2:int = obj["DevInt2"]
      """  When AP Misc. Payment / Prepayment has related TaxDtl records, and related Prepayment APInvTax record is created this field contains Pre-Payment APTranNo  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Indicates if the record is created as reversing  for Prepayment related tax record  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  For reversing prepayment  tax records this field is populated with Prepayment invoice number  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangeDate:str = obj["ChangeDate"]
      """  ChangeDate  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.DebitMemo:bool = obj["DebitMemo"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type Description  """  
      self.EnableSuperGRate:bool = obj["EnableSuperGRate"]
      self.GroupID:str = obj["GroupID"]
      self.Posted:bool = obj["Posted"]
      self.RateType:int = obj["RateType"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      """  Display field for Rpt1ScrFixedAmount  """  
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      """  Display field for Rpt2FixedAmount  """  
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      """  Display field for Rpt3rFixedAmount  """  
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrDocDedTaxAmt:int = obj["ScrDocDedTaxAmt"]
      self.ScrDocFixedAmount:int = obj["ScrDocFixedAmount"]
      """  Display field for DocFixedAmount  """  
      self.ScrDocReportableAmt:int = obj["ScrDocReportableAmt"]
      self.ScrDocTaxableAmt:int = obj["ScrDocTaxableAmt"]
      self.ScrDocTaxAmt:int = obj["ScrDocTaxAmt"]
      self.ScrDocTaxAmtVar:int = obj["ScrDocTaxAmtVar"]
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      """  Display field for FixedAmount  """  
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.ExemptReasonCodeDesc:str = obj["ExemptReasonCodeDesc"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvcRecurrRow:
   def __init__(self, obj):
      self.ApplyDate:str = obj["ApplyDate"]
      self.Company:str = obj["Company"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.DocInvoiceAmt:int = obj["DocInvoiceAmt"]
      self.DueDate:str = obj["DueDate"]
      self.InstanceNum:int = obj["InstanceNum"]
      self.InvoiceAmt:int = obj["InvoiceAmt"]
      self.InvoiceDate:str = obj["InvoiceDate"]
      self.InvoiceHeld:bool = obj["InvoiceHeld"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InvoiceRef:str = obj["InvoiceRef"]
      self.Posted:bool = obj["Posted"]
      self.VendorNum:int = obj["VendorNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APInvoiceTableset:
   def __init__(self, obj):
      self.APInvHed:list[Erp_Tablesets_APInvHedRow] = obj["APInvHed"]
      self.APInvHedAttch:list[Erp_Tablesets_APInvHedAttchRow] = obj["APInvHedAttch"]
      self.APIHAPInvExp:list[Erp_Tablesets_APIHAPInvExpRow] = obj["APIHAPInvExp"]
      self.APIHAPInvExpTGLC:list[Erp_Tablesets_APIHAPInvExpTGLCRow] = obj["APIHAPInvExpTGLC"]
      self.APIHAPInvMsc:list[Erp_Tablesets_APIHAPInvMscRow] = obj["APIHAPInvMsc"]
      self.RcvMisc:list[Erp_Tablesets_RcvMiscRow] = obj["RcvMisc"]
      self.APIHAPLnTax:list[Erp_Tablesets_APIHAPLnTaxRow] = obj["APIHAPLnTax"]
      self.APInvDtl:list[Erp_Tablesets_APInvDtlRow] = obj["APInvDtl"]
      self.APInvDtlAttch:list[Erp_Tablesets_APInvDtlAttchRow] = obj["APInvDtlAttch"]
      self.APInvDtlDEASch:list[Erp_Tablesets_APInvDtlDEASchRow] = obj["APInvDtlDEASch"]
      self.APInvExp:list[Erp_Tablesets_APInvExpRow] = obj["APInvExp"]
      self.APInvExpTGLC:list[Erp_Tablesets_APInvExpTGLCRow] = obj["APInvExpTGLC"]
      self.GlbAPIETGLC:list[Erp_Tablesets_GlbAPIETGLCRow] = obj["GlbAPIETGLC"]
      self.APInvJob:list[Erp_Tablesets_APInvJobRow] = obj["APInvJob"]
      self.APInvMsc:list[Erp_Tablesets_APInvMscRow] = obj["APInvMsc"]
      self.APInvLnMscTax:list[Erp_Tablesets_APInvLnMscTaxRow] = obj["APInvLnMscTax"]
      self.APInvPB:list[Erp_Tablesets_APInvPBRow] = obj["APInvPB"]
      self.APLnTax:list[Erp_Tablesets_APLnTaxRow] = obj["APLnTax"]
      self.APInvDtlTGLC:list[Erp_Tablesets_APInvDtlTGLCRow] = obj["APInvDtlTGLC"]
      self.APInvHedMscTax:list[Erp_Tablesets_APInvHedMscTaxRow] = obj["APInvHedMscTax"]
      self.APInvSched:list[Erp_Tablesets_APInvSchedRow] = obj["APInvSched"]
      self.APInvTax:list[Erp_Tablesets_APInvTaxRow] = obj["APInvTax"]
      self.PESUNATDtl:list[Erp_Tablesets_PESUNATDtlRow] = obj["PESUNATDtl"]
      self.EntityGLC:list[Erp_Tablesets_EntityGLCRow] = obj["EntityGLC"]
      self.PEAPInvTax:list[Erp_Tablesets_PEAPInvTaxRow] = obj["PEAPInvTax"]
      self.AdditionalForms_ParametersView:list[Erp_Tablesets_AdditionalForms_ParametersViewRow] = obj["AdditionalForms_ParametersView"]
      self.LegalNumGenOpts:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["LegalNumGenOpts"]
      self.SupplierXRef:list[Erp_Tablesets_SupplierXRefRow] = obj["SupplierXRef"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APLateCostLinesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number  """  
      self.PurPoint:str = obj["PurPoint"]
      """  PurPoint  """  
      self.PackSlip:str = obj["PackSlip"]
      """  PackSlip  """  
      self.ContainerID:int = obj["ContainerID"]
      """  Container ID  """  
      self.PONum:int = obj["PONum"]
      """  PONum  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Misc Charge Code  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  Misc Amount  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  Doc Miisc Amount  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Rpt1MiscAmt  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Rpt2MiscAmt  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Rpt3MiscAmt  """  
      self.MiscSeq:int = obj["MiscSeq"]
      """  Misc Seq from RcvMisc or ContainerMisc  """  
      self.Description:str = obj["Description"]
      """  Misc Charge description  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Num  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.SelectLine:bool = obj["SelectLine"]
      """  Indicates line is selected. When selected row will be removed and added to APSelectedLateCostLines table  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APLateCostTotalsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Num  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Num  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currenc yCode  """  
      self.AvailableTotal:int = obj["AvailableTotal"]
      """  Total of APLateCostLines.MiscAmt  """  
      self.DocAvailableTotal:int = obj["DocAvailableTotal"]
      """  Total of APLateCostLines.DocMiscAmt  """  
      self.Rpt1AvailableTotal:int = obj["Rpt1AvailableTotal"]
      """  Rpt1AvailableTotal  """  
      self.Rpt2AvailableTotal:int = obj["Rpt2AvailableTotal"]
      """  Rpt2AvailableTotal  """  
      self.Rpt3AvailableTotal:int = obj["Rpt3AvailableTotal"]
      """  Rpt3AvailableTotal  """  
      self.SelectedTotal:int = obj["SelectedTotal"]
      """  Total of APSelectedLateCostLines.DocMiscAmt  """  
      self.DocSelectedTotal:int = obj["DocSelectedTotal"]
      """  Total of APSelectedLateCostLines.DocMiscAmt  """  
      self.Rpt1SelectedTotal:int = obj["Rpt1SelectedTotal"]
      """  Rpt1SelectedTotal  """  
      self.Rpt2SelectedTotal:int = obj["Rpt2SelectedTotal"]
      """  Rpt2SelectedTotal  """  
      self.Rpt3SelectedTotal:int = obj["Rpt3SelectedTotal"]
      """  Rpt3SelectedTotal  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APLateCostsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Num  """  
      self.PurPoint:str = obj["PurPoint"]
      """  PurPoint  """  
      self.PackSlip:str = obj["PackSlip"]
      """  PackSlip  """  
      self.ContainerID:int = obj["ContainerID"]
      """  Container ID  """  
      self.PONum:int = obj["PONum"]
      """  PONum  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.CurrencyID:str = obj["CurrencyID"]
      """  Currency ID  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      """  Base Currency ID  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Base Curr Symbol  """  
      self.CurrSymbol:str = obj["CurrSymbol"]
      """  CurrSymbol  """  
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      """  CurrencySwitch  """  
      self.ReceiptDate:str = obj["ReceiptDate"]
      """  Receipt Date  """  
      self.ShipStatus:str = obj["ShipStatus"]
      """  Ship Status from ContainerHeader  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Num  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  Legal Number  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APLateCostsTableset:
   def __init__(self, obj):
      self.APLateCosts:list[Erp_Tablesets_APLateCostsRow] = obj["APLateCosts"]
      self.APLateCostLines:list[Erp_Tablesets_APLateCostLinesRow] = obj["APLateCostLines"]
      self.APLateCostTotals:list[Erp_Tablesets_APLateCostTotalsRow] = obj["APLateCostTotals"]
      self.APSelectedLateCostLines:list[Erp_Tablesets_APSelectedLateCostLinesRow] = obj["APSelectedLateCostLines"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APLnTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Internal Supplier Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  AP Invoice Number.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Descriptive code assigned by user which uniquely identifies a Sales Tax master record.  Can't be blank. This is used as a foreign key in other files and may be used in displays/reports where space for the full description is limited.  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable amount for this invoice.  Manually entered if APInvTax.Manual = Yes else set equal to SysCalcTaxableAmt.  """  
      self.DocTaxableAmt:int = obj["DocTaxableAmt"]
      """  Taxable amount for this invoice in foreign currency. Manually entered if APInvTax.Manual = Yes else it is set equal to SysCalcDocTaxableAmt.  """  
      self.Percent:int = obj["Percent"]
      """  The tax percentage rate that is used for this invoice. This is defaulted from the SalesTax.Percent.  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """   Sales Tax amount for the corresponding taxable sales amount.
Manually entered if APInvTax.Manual = Yes.  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Sales Tax amount for the corresponding taxable sales amount in foreign currency.  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcReportableAmt.  """  
      self.DocReportableAmt:int = obj["DocReportableAmt"]
      """  The reportable sales amount to the tax jurisdiction expressed in the Vendor's currency. Manually entered if APInvTax.Manual = Yes else set equal to SysCalcDocTaxableAmt.  """  
      self.Manual:bool = obj["Manual"]
      """  Indicates if the tax calculations are to be performed manually.  When this field is set the Reportable, Taxable, and TaxAmount fields are enabled.  When it is NOT set these fields are DISABLED and the system will perform all of the Reportable, Taxable, and TaxAmount calculations.  Defaults from the SalesTax.Manual field.  """  
      self.SysCalcTaxableAmt:int = obj["SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.SysCalcDocTaxableAmt:int = obj["SysCalcDocTaxableAmt"]
      """  System calculated Taxable amount for this invoice in foreign currency.  """  
      self.SysCalcReportableAmt:int = obj["SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.SysCalcDocReportableAmt:int = obj["SysCalcDocReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction expressed in the Vendor's currency.  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """   Used to allow a second tax record using the same tax code on an invoice.  When the sales tax field EcAquisition is checked then 2 invoice tax records are created.
NOTE:  This field is now used in VAT Reverse Charge logic.  If an invoice line is marked for Reverse Charge, a second line is created just like in the ECAcquisition logic. To distinguish the two scenarios, the ReverseCharge flag will be set to true if the second line is for Reverse Charge.  """  
      self.GlbCompany:str = obj["GlbCompany"]
      """  Global Company identifier.  Used in Consolidated Purchasing.  """  
      self.GlbVendorNum:int = obj["GlbVendorNum"]
      """  Global Vendor identifier.  Used in Consolidated Purchasing.  """  
      self.GlbInvoiceNum:str = obj["GlbInvoiceNum"]
      """  Global Invoice identifier.  Used in Consolidated Purchasing.  """  
      self.GlbTaxCode:str = obj["GlbTaxCode"]
      """  Global Invoice Tax identifier.  Used in Consolidated Purchasing.  """  
      self.GlbECAcquisitionSeq:int = obj["GlbECAcquisitionSeq"]
      """  Global ECAcquisitionSeq identifier.  Used in Consolidated Purchasing.  """  
      self.ReverseCharge:bool = obj["ReverseCharge"]
      """  Indicates if this tax line is for a Reverse Charge.  """  
      self.Rpt1ReportableAmt:int = obj["Rpt1ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2ReportableAmt:int = obj["Rpt2ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3ReportableAmt:int = obj["Rpt3ReportableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxableAmt:int = obj["Rpt1TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxableAmt:int = obj["Rpt2TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxableAmt:int = obj["Rpt3TaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1TaxAmt:int = obj["Rpt1TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2TaxAmt:int = obj["Rpt2TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3TaxAmt:int = obj["Rpt3TaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt1SysCalcTaxableAmt:int = obj["Rpt1SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt1SysCalcReportableAmt:int = obj["Rpt1SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt2SysCalcTaxableAmt:int = obj["Rpt2SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt2SysCalcReportableAmt:int = obj["Rpt2SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.Rpt3SysCalcTaxableAmt:int = obj["Rpt3SysCalcTaxableAmt"]
      """  System calculated Taxable amount for this invoice.  """  
      self.Rpt3SysCalcReportableAmt:int = obj["Rpt3SysCalcReportableAmt"]
      """  System calculated reportable sales amount to the tax jurisdiction. Set the value as follows; first determine if the item needs to be reported to the tax jurisdiction.  This is done by using the  APInvDtl.TaxCode and APInvDtl/APInvMisc.TaxCat to find a record in the SalesTxC. If a record is not found or SalesTxC.Reportable = Yes then add in the line item extended amount or if this is for a InvcMisc record InvcMisc.Amount.  """  
      self.RateCode:str = obj["RateCode"]
      """  Tax Rate Code.  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Collection Type.  """  
      self.Timing:int = obj["Timing"]
      """  Timing of when to report taxes  """  
      self.ExemptType:int = obj["ExemptType"]
      """  Exemption Type  """  
      self.ExemptPercent:int = obj["ExemptPercent"]
      """  Exemption Percent  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Resolution Number  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Resolution date.  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Date to determine the tax rate.  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.DocDefTaxableAmt:int = obj["DocDefTaxableAmt"]
      """  Balance of the Taxable amount that has been deferred until payment  """  
      self.Rpt1DefTaxableAmt:int = obj["Rpt1DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxableAmt:int = obj["Rpt2DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxableAmt:int = obj["Rpt3DefTaxableAmt"]
      """  Reporting currency value of this field  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.DocDefTaxAmt:int = obj["DocDefTaxAmt"]
      """  Balance of the Tax amount that has been deferred until payment  """  
      self.Rpt1DefTaxAmt:int = obj["Rpt1DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DefTaxAmt:int = obj["Rpt2DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DefTaxAmt:int = obj["Rpt3DefTaxAmt"]
      """  Reporting currency value of this field  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  This record was manually added (not in Liability) but will use the standard calculations  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.DocDedTaxAmt:int = obj["DocDedTaxAmt"]
      """  Deducatable Tax Amount  """  
      self.Rpt1DedTaxAmt:int = obj["Rpt1DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt2DedTaxAmt:int = obj["Rpt2DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.Rpt3DedTaxAmt:int = obj["Rpt3DedTaxAmt"]
      """  Reporting currency value of this field  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Fixed Tax Amount  """  
      self.DocFixedAmount:int = obj["DocFixedAmount"]
      """  Document Fixed Tax Amount  """  
      self.Rpt1FixedAmount:int = obj["Rpt1FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt2FixedAmount:int = obj["Rpt2FixedAmount"]
      """  Reporting currency value of this field  """  
      self.Rpt3FixedAmount:int = obj["Rpt3FixedAmount"]
      """  Reporting currency value of this field  """  
      self.GlbRateCode:str = obj["GlbRateCode"]
      """  Global RateCode identifier.  Used in Consolidated Purchasing.  """  
      self.TextCode:str = obj["TextCode"]
      """  Unique Identifier for Legal Text  """  
      self.TaxAmtVar:int = obj["TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DocTaxAmtVar:int = obj["DocTaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt1TaxAmtVar:int = obj["Rpt1TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt2TaxAmtVar:int = obj["Rpt2TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.Rpt3TaxAmtVar:int = obj["Rpt3TaxAmtVar"]
      """  Difference between tax calculated in document rate less tax calculated in tax rate  """  
      self.DefTaxDate:str = obj["DefTaxDate"]
      """  Deferred tax date for Service Tax Point  """  
      self.TaxFuture:bool = obj["TaxFuture"]
      """  Flag to indicate for posting engine and tax updates whether being treated as current or future  """  
      self.STPProcessed:bool = obj["STPProcessed"]
      """  Flag to indicate if the Service Tax Line is already processed  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  AP Invoice Line related to the Tax Record  """  
      self.DevInt1:int = obj["DevInt1"]
      """  Reserved for Development - Integer  """  
      self.DevInt2:int = obj["DevInt2"]
      """  Reserved for Development - Integer  """  
      self.DevDec1:int = obj["DevDec1"]
      """  Reserved for development - decimal  """  
      self.DevDec2:int = obj["DevDec2"]
      """  Reserved for development - decimal  """  
      self.DevDec3:int = obj["DevDec3"]
      """  Reserved for development - decimal  """  
      self.DevDec4:int = obj["DevDec4"]
      """  Reserved for development - decimal  """  
      self.DevLog1:bool = obj["DevLog1"]
      """  Reserved for development  - logical  """  
      self.DevLog2:bool = obj["DevLog2"]
      """  Reserved for development - logical  """  
      self.DevChar1:str = obj["DevChar1"]
      """  Reserved for development  - character  """  
      self.DevChar2:str = obj["DevChar2"]
      """  Reserved for development - character  """  
      self.DevDate1:str = obj["DevDate1"]
      """  Reserved for development - date  """  
      self.DevDate2:str = obj["DevDate2"]
      """  Reserved for development - date  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.ChangedBy:str = obj["ChangedBy"]
      """  ChangedBy  """  
      self.ChangedOn:str = obj["ChangedOn"]
      """  ChangedOn  """  
      self.ExemptReasonCode:str = obj["ExemptReasonCode"]
      """  ExemptReasonCode  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.DescCollectionType:str = obj["DescCollectionType"]
      """  Collection Type description  """  
      self.DisableManual:bool = obj["DisableManual"]
      self.DocScrDedTaxAmt:int = obj["DocScrDedTaxAmt"]
      self.DocScrFixedAmount:int = obj["DocScrFixedAmount"]
      self.DocScrReportableAmt:int = obj["DocScrReportableAmt"]
      self.DocScrTaxableAmt:int = obj["DocScrTaxableAmt"]
      self.DocScrTaxAmt:int = obj["DocScrTaxAmt"]
      self.DocScrTaxAmtVar:int = obj["DocScrTaxAmtVar"]
      self.GroupID:str = obj["GroupID"]
      self.Rpt1ScrDedTaxAmt:int = obj["Rpt1ScrDedTaxAmt"]
      self.Rpt1ScrFixedAmount:int = obj["Rpt1ScrFixedAmount"]
      self.Rpt1ScrReportableAmt:int = obj["Rpt1ScrReportableAmt"]
      self.Rpt1ScrTaxableAmt:int = obj["Rpt1ScrTaxableAmt"]
      self.Rpt1ScrTaxAmt:int = obj["Rpt1ScrTaxAmt"]
      self.Rpt1ScrTaxAmtVar:int = obj["Rpt1ScrTaxAmtVar"]
      self.Rpt2ScrDedTaxAmt:int = obj["Rpt2ScrDedTaxAmt"]
      self.Rpt2ScrFixedAmount:int = obj["Rpt2ScrFixedAmount"]
      self.Rpt2ScrReportableAmt:int = obj["Rpt2ScrReportableAmt"]
      self.Rpt2ScrTaxableAmt:int = obj["Rpt2ScrTaxableAmt"]
      self.Rpt2ScrTaxAmt:int = obj["Rpt2ScrTaxAmt"]
      self.Rpt2ScrTaxAmtVar:int = obj["Rpt2ScrTaxAmtVar"]
      self.Rpt3ScrDedTaxAmt:int = obj["Rpt3ScrDedTaxAmt"]
      self.Rpt3ScrFixedAmount:int = obj["Rpt3ScrFixedAmount"]
      self.Rpt3ScrReportableAmt:int = obj["Rpt3ScrReportableAmt"]
      self.Rpt3ScrTaxableAmt:int = obj["Rpt3ScrTaxableAmt"]
      self.Rpt3ScrTaxAmt:int = obj["Rpt3ScrTaxAmt"]
      self.Rpt3ScrTaxAmtVar:int = obj["Rpt3ScrTaxAmtVar"]
      self.ScrDedTaxAmt:int = obj["ScrDedTaxAmt"]
      self.ScrDocFixedAmount:int = obj["ScrDocFixedAmount"]
      """  Display Fixed Amount in document currency.  """  
      self.ScrFixedAmount:int = obj["ScrFixedAmount"]
      """  Display Fixed Amount in base currency.  """  
      self.ScrReportableAmt:int = obj["ScrReportableAmt"]
      self.ScrTaxableAmt:int = obj["ScrTaxableAmt"]
      self.ScrTaxAmt:int = obj["ScrTaxAmt"]
      self.ScrTaxAmtVar:int = obj["ScrTaxAmtVar"]
      self.ExemptReasonCodeDesc:str = obj["ExemptReasonCodeDesc"]
      self.BitFlag:int = obj["BitFlag"]
      self.InvoiceNumDescription:str = obj["InvoiceNumDescription"]
      self.RateCodeDescription:str = obj["RateCodeDescription"]
      self.TaxCodeDescription:str = obj["TaxCodeDescription"]
      self.VendorNumDefaultFOB:str = obj["VendorNumDefaultFOB"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.VendorNumState:str = obj["VendorNumState"]
      self.VendorNumTermsCode:str = obj["VendorNumTermsCode"]
      self.VendorNumVendorID:str = obj["VendorNumVendorID"]
      self.VendorNumZIP:str = obj["VendorNumZIP"]
      self.VendorNumAddress1:str = obj["VendorNumAddress1"]
      self.VendorNumAddress2:str = obj["VendorNumAddress2"]
      self.VendorNumAddress3:str = obj["VendorNumAddress3"]
      self.VendorNumCity:str = obj["VendorNumCity"]
      self.VendorNumCountry:str = obj["VendorNumCountry"]
      self.VendorNumCurrencyCode:str = obj["VendorNumCurrencyCode"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APReceiptTotalsRow:
   def __init__(self, obj):
      self.CurrencyCode:str = obj["CurrencyCode"]
      self.AvailableTotal:int = obj["AvailableTotal"]
      self.Company:str = obj["Company"]
      self.DocAvailableTotal:int = obj["DocAvailableTotal"]
      self.DocSelectedTotal:int = obj["DocSelectedTotal"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.Rpt1AvailableTotal:int = obj["Rpt1AvailableTotal"]
      self.Rpt1SelectedTotal:int = obj["Rpt1SelectedTotal"]
      self.Rpt2AvailableTotal:int = obj["Rpt2AvailableTotal"]
      self.Rpt2SelectedTotal:int = obj["Rpt2SelectedTotal"]
      self.Rpt3AvailableTotal:int = obj["Rpt3AvailableTotal"]
      self.Rpt3SelectedTotal:int = obj["Rpt3SelectedTotal"]
      self.SelectedTotal:int = obj["SelectedTotal"]
      self.VendorNum:int = obj["VendorNum"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APRecurringInvTableset:
   def __init__(self, obj):
      self.APInvcRecurr:list[Erp_Tablesets_APInvcRecurrRow] = obj["APInvcRecurr"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_APSelectedLateCostLinesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum  """  
      self.PurPoint:str = obj["PurPoint"]
      """  PurPoint  """  
      self.PackSlip:str = obj["PackSlip"]
      """  PackSlip  """  
      self.ContainerID:int = obj["ContainerID"]
      """  Container ID  """  
      self.PONum:int = obj["PONum"]
      """  PONum  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Misc Charge Code  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.MiscAmt:int = obj["MiscAmt"]
      """  Misc Amount  """  
      self.DocMiscAmt:int = obj["DocMiscAmt"]
      """  Doc Miisc Amount  """  
      self.Rpt1MiscAmt:int = obj["Rpt1MiscAmt"]
      """  Rpt1MiscAmt  """  
      self.Rpt2MiscAmt:int = obj["Rpt2MiscAmt"]
      """  Rpt2MiscAmt  """  
      self.Rpt3MiscAmt:int = obj["Rpt3MiscAmt"]
      """  Rpt3MiscAmt  """  
      self.MiscSeq:int = obj["MiscSeq"]
      """  Misc Seq from RcvMisc or ContainerMisc  """  
      self.Description:str = obj["Description"]
      """  Misc Charge description  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Num  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.DeselectLine:bool = obj["DeselectLine"]
      """  Indicates line should be removed and added to APLateCostLines table  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APSelectedRcptLinesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip #.  """  
      self.PackLine:int = obj["PackLine"]
      """  An integer that uniquely identifies a detail record within a Packing slip. This is assigned by the system by finding the last RcvDtl record for the vendor's packing slip and add 1.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number on which this receipt detail was invoiced. This is updated from the A\P invoice entry process.  """  
      self.PartNum:str = obj["PartNum"]
      """  Our Part Number of the item that has been received. Captured from the related PODetail.PartNum for receipts of PO item. Entered by the user for miscellaneous receipts in which case it can't be blank. It must be valid in the Part file for receipt to stock.  """  
      self.OurQty:int = obj["OurQty"]
      """  Receipt quantity in our unit of measure.  """  
      self.OurUnitCost:int = obj["OurUnitCost"]
      """  Unit cost base on our unit of measure. Defaults from PODetail.IUM for purchase order receipt.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase Order # that the receipt is for. Only applicable for receipt of Purchase Order transactions.  """  
      self.POLine:int = obj["POLine"]
      """  The PO line # which is being received. Only applicable for PO receipt transactions.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase Order Release # which is being received.  """  
      self.TranReference:str = obj["TranReference"]
      """  A generic fill-in field that could be used to allow the user to enter data such as Heat, Lot #'s.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part associated with this transaction. This is not directly entered by the user. Instead the entry programs pull it in from a parent record. The parent record could be the Part, JobOper, PODetl, JobMtl...  """  
      self.VendorQty:int = obj["VendorQty"]
      """  Quantity received against a purchase order in the vendors unit of measure.  """  
      self.VendorUnitCost:int = obj["VendorUnitCost"]
      """  Purchase Order Receipt actual unit cost in the vendors unit of measure. RIO- With the currency module it is calculated based on the current exchange rate.  This is defaulted from the POdetail record. PO receipts uses this along with the calculated purchasing conversion factor to determine the OurlUnitCost field which is used as cost to job or stock.  """  
      self.PUM:str = obj["PUM"]
      """  Vendor's selling Unit of Measure.  """  
      self.DUM:str = obj["DUM"]
      """  Dimension unit of measure. Cannot be blank. Defaults to part's unit of measure.  """  
      self.PassedQty:int = obj["PassedQty"]
      """  Total quantity that passed inspection to date.  In receiving unit of measure.  This is a summary maintained by the DMR process.  """  
      self.FailedQty:int = obj["FailedQty"]
      """  Total to date quantity that has failed inspection.  This is a summary maintained by the DMR process.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.Inspection:str = obj["Inspection"]
      self.LineAmount:int = obj["LineAmount"]
      self.DeselectLine:bool = obj["DeselectLine"]
      self.GridVenPartNum:str = obj["GridVenPartNum"]
      self.DocLineAmount:int = obj["DocLineAmount"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.DropShip:bool = obj["DropShip"]
      """  Flag to know if the line comes from a Drop Shipment  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Pack Slip for Drop Shipments  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.InvoiceQty:int = obj["InvoiceQty"]
      """  Quantity to be invoiced from vendor qty total.  """  
      self.FinalInvoice:bool = obj["FinalInvoice"]
      """  Indicates if this is the final invoice line for a receipt line.  """  
      self.InVendorUnitCost:int = obj["InVendorUnitCost"]
      """  Like VendorUnitCost (with taxes included)  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.DocInVendorUnitCost:int = obj["DocInVendorUnitCost"]
      self.DocVendorUnitCost:int = obj["DocVendorUnitCost"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APUninvoicedRcptLinesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip #.  """  
      self.PackLine:int = obj["PackLine"]
      """  An integer that uniquely identifies a detail record within a Packing slip. This is assigned by the system by finding the last RcvDtl record for the vendor's packing slip and add 1.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number on which this receipt detail was invoiced. This is updated from the A\P invoice entry process.  """  
      self.PartNum:str = obj["PartNum"]
      """  Our Part Number of the item that has been received. Captured from the related PODetail.PartNum for receipts of PO item. Entered by the user for miscellaneous receipts in which case it can't be blank. It must be valid in the Part file for receipt to stock.  """  
      self.OurQty:int = obj["OurQty"]
      """  Receipt quantity in our unit of measure.  """  
      self.OurUnitCost:int = obj["OurUnitCost"]
      """  Unit cost base on our unit of measure. Defaults from PODetail.IUM for purchase order receipt.  """  
      self.PONum:int = obj["PONum"]
      """  Purchase Order # that the receipt is for. Only applicable for receipt of Purchase Order transactions.  """  
      self.POLine:int = obj["POLine"]
      """  The PO line # which is being received. Only applicable for PO receipt transactions.  """  
      self.PORelNum:int = obj["PORelNum"]
      """  Purchase Order Release # which is being received.  """  
      self.TranReference:str = obj["TranReference"]
      """  A generic fill-in field that could be used to allow the user to enter data such as Heat, Lot #'s.  """  
      self.PartDescription:str = obj["PartDescription"]
      """  Describes the Part associated with this transaction. This is not directly entered by the user. Instead the entry programs pull it in from a parent record. The parent record could be the Part, JobOper, PODetl, JobMtl...  """  
      self.VendorQty:int = obj["VendorQty"]
      """  Quantity received against a purchase order in the vendors unit of measure.  """  
      self.VendorUnitCost:int = obj["VendorUnitCost"]
      """  Purchase Order Receipt actual unit cost in the vendors unit of measure. RIO- With the currency module it is calculated based on the current exchange rate.  This is defaulted from the POdetail record. PO receipts uses this along with the calculated purchasing conversion factor to determine the OurlUnitCost field which is used as cost to job or stock.  """  
      self.PUM:str = obj["PUM"]
      """  Vendor's selling Unit of Measure.  """  
      self.DUM:str = obj["DUM"]
      """  Dimension unit of measure. Cannot be blank. Defaults to part's unit of measure.  """  
      self.PassedQty:int = obj["PassedQty"]
      """  Total quantity that passed inspection to date.  In receiving unit of measure.  This is a summary maintained by the DMR process.  """  
      self.FailedQty:int = obj["FailedQty"]
      """  Total to date quantity that has failed inspection.  This is a summary maintained by the DMR process.  """  
      self.DocVendorUnitCost:int = obj["DocVendorUnitCost"]
      """  PO currency value of this field  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.InVendorUnitCost:int = obj["InVendorUnitCost"]
      """  Purchase Order Receipt actual unit cost in the vendors unit of measure. RIO- With the currency module it is calculated based on the current exchange rate.  This is defaulted from the POdetail record. PO receipts uses this along with the calculated purchasing conversion factor to determine the OurlUnitCost field which is used as cost to job or stock.  """  
      self.DocInVendorUnitCost:int = obj["DocInVendorUnitCost"]
      """  PO currency value of this field  """  
      self.SupplierUnInvcReceiptQty:int = obj["SupplierUnInvcReceiptQty"]
      """  Value that indicates the remaining quantity of the receipt that is waiting to be invoiced.  """  
      self.Inspection:str = obj["Inspection"]
      self.LineAmount:int = obj["LineAmount"]
      self.SelectLine:bool = obj["SelectLine"]
      self.DocLineAmount:int = obj["DocLineAmount"]
      self.GridVenPartNum:str = obj["GridVenPartNum"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1LineAmount:int = obj["Rpt1LineAmount"]
      self.Rpt2LineAmount:int = obj["Rpt2LineAmount"]
      self.Rpt3LineAmount:int = obj["Rpt3LineAmount"]
      self.DropShip:bool = obj["DropShip"]
      """  Flag to know if the line comes from a Drop Shipment  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Pack Slip for Drop Shipments  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.TrackInventoryAttributes:bool = obj["TrackInventoryAttributes"]
      """  Indicates if inventory for this part is tracked at the attribute level. This feature requires the Advanced Unit of Measure license.  """  
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_APUninvoicedReceiptsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.PONum:int = obj["PONum"]
      self.PackSlip:str = obj["PackSlip"]
      self.ReceiptDate:str = obj["ReceiptDate"]
      self.PackSlipTotal:int = obj["PackSlipTotal"]
      self.DocPackSlipTotal:int = obj["DocPackSlipTotal"]
      self.CurrencySwitch:bool = obj["CurrencySwitch"]
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      self.CurrSymbol:str = obj["CurrSymbol"]
      self.PurPoint:str = obj["PurPoint"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  Currency Code of the related record  """  
      self.Rpt1PackSlipTotal:int = obj["Rpt1PackSlipTotal"]
      self.Rpt2PackSlipTotal:int = obj["Rpt2PackSlipTotal"]
      self.Rpt3PackSlipTotal:int = obj["Rpt3PackSlipTotal"]
      self.DropShip:bool = obj["DropShip"]
      """  Flag to know if it comes from a Drop Shipment  """  
      self.DropShipPackSlip:str = obj["DropShipPackSlip"]
      """  Pack Slip for Drop Shipments  """  
      self.DummyKey:str = obj["DummyKey"]
      """  DummyKey  """  
      self.BaseCurrencyID:str = obj["BaseCurrencyID"]
      self.CurrencyID:str = obj["CurrencyID"]
      self.AllSelected:bool = obj["AllSelected"]
      """  Flag that notifies the user if all the lines for the current receipt are selected for invoicing.  """  
      self.LegalNumber:str = obj["LegalNumber"]
      """  Legal Number that has been assigned to the Receipt packing slip.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_AdditionalForms_ParametersViewRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.SelectedInvoiceNum:str = obj["SelectedInvoiceNum"]
      self.SelectedInvoiceNumForCorrection:str = obj["SelectedInvoiceNumForCorrection"]
      self.SelectedVendorNumForCorrection:int = obj["SelectedVendorNumForCorrection"]
      self.VendorNumToCorrect:int = obj["VendorNumToCorrect"]
      self.NewInvoiceNumForChange:str = obj["NewInvoiceNumForChange"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_EntityGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.GLControlType:str = obj["GLControlType"]
      """  Identifier of the GL Control Type.  """  
      self.GLControlCode:str = obj["GLControlCode"]
      """  GL Control Identifier.  """  
      self.BusinessEntity:str = obj["BusinessEntity"]
      """  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.GlobalEntityGLC:bool = obj["GlobalEntityGLC"]
      """  Marks this EntityGLC as global, available to be sent out to other companies.  """  
      self.GlobalLock:bool = obj["GlobalLock"]
      """  Disables this record from receiving global updates.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.BankAcctID:str = obj["BankAcctID"]
      """  BankAcctID of the related BankAcct record.  """  
      self.BankFeeID:str = obj["BankFeeID"]
      self.CallCode:str = obj["CallCode"]
      """  CallCode of the related FSCallCd record.  """  
      self.ChargeCode:str = obj["ChargeCode"]
      self.ClassCode:str = obj["ClassCode"]
      """  ClassCode of the related FAClass record.  """  
      self.ClassID:str = obj["ClassID"]
      """  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  """  
      self.ContractCode:str = obj["ContractCode"]
      """  ContractCode of the related FSContCd record.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  CurrencyCode of the related Currency record.  """  
      self.CustNum:int = obj["CustNum"]
      """  CustNum of the related Customer record  """  
      self.DeductionID:str = obj["DeductionID"]
      """  DeductionID of PRClsDed or PRDeduct.  """  
      self.EmpID:str = obj["EmpID"]
      """  EmpID of the related PREmpMas record.  """  
      self.ExpenseCode:str = obj["ExpenseCode"]
      """  ExpenseCode of PayTLbr, LabExpCd  """  
      self.ExtSystemID:str = obj["ExtSystemID"]
      """  ExtSystemID of ExtCompany table  """  
      self.FromPlant:str = obj["FromPlant"]
      """  FromPlant value of the related PlntTranDef record.  """  
      self.GroupCode:str = obj["GroupCode"]
      """  GroupCode of the related FAGroup record.  """  
      self.GroupID:str = obj["GroupID"]
      self.HeadNum:int = obj["HeadNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.JCDept:str = obj["JCDept"]
      """  JCDept of the related JCDept record.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  MiscCode of the related MiscChrg or PurMisc record.  """  
      self.PartNum:str = obj["PartNum"]
      """  PartNum of the related Part record.  """  
      self.PayTypeID:str = obj["PayTypeID"]
      """  PayTypeID of PayType  """  
      self.PerConName:str = obj["PerConName"]
      self.PIStatus:str = obj["PIStatus"]
      """  PI Status  """  
      self.Plant:str = obj["Plant"]
      """  Plant of the related PlantConfCtrl record.  """  
      self.ProdCode:str = obj["ProdCode"]
      """  ProdCode of the related ProdGrup record.  """  
      self.ProjectID:str = obj["ProjectID"]
      """  ProjectID of the related Project record.  """  
      self.PurchCode:str = obj["PurchCode"]
      """  PurchCode of the related GLPurch record.  """  
      self.RateCode:str = obj["RateCode"]
      """  RateCode of the related GLRate record.  """  
      self.ReasonCode:str = obj["ReasonCode"]
      """  ReasonCode of the related Reason record.  """  
      self.ReasonType:str = obj["ReasonType"]
      """  ReasonType of the related Reason record.  """  
      self.SalesCatID:str = obj["SalesCatID"]
      """  SalesCatID of the related SalesCat record.  """  
      self.Shift:int = obj["Shift"]
      """  Shift value of the related JCShift record.  """  
      self.TaxCode:str = obj["TaxCode"]
      """  TaxCode of the related SalesTax record.  """  
      self.TaxTblID:str = obj["TaxTblID"]
      """  TaxTblID of PRTaxMas or PRClsTax.  """  
      self.ToPlant:str = obj["ToPlant"]
      """  ToPlant value of the related PlntTranDef record.  """  
      self.TransferMethod:str = obj["TransferMethod"]
      """  TransferMethod of ExtCompany table  """  
      self.TypeID:str = obj["TypeID"]
      """  Type ID  """  
      self.VendorNum:int = obj["VendorNum"]
      """  VendorNum of the related Vendor record.  """  
      self.WarehouseCode:str = obj["WarehouseCode"]
      """  WarehouseCode of the related Warehse record.  """  
      self.ExpenseTypeCode:str = obj["ExpenseTypeCode"]
      self.IsFiltered:bool = obj["IsFiltered"]
      self.OprTypeCode:str = obj["OprTypeCode"]
      self.CashDeskID:str = obj["CashDeskID"]
      self.TIN:str = obj["TIN"]
      self.ReclassCodeID:str = obj["ReclassCodeID"]
      self.BitFlag:int = obj["BitFlag"]
      self.GLCntrlDescription:str = obj["GLCntrlDescription"]
      self.GLCntrlTypeDescription:str = obj["GLCntrlTypeDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GetLogAPInvRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InvoiceVendorAmt:int = obj["InvoiceVendorAmt"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.Selected:bool = obj["Selected"]
      self.Inactive:bool = obj["Inactive"]
      """  Boolean to see if a Vendor is Inactive.  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_GetLogAPInvTableset:
   def __init__(self, obj):
      self.GetLogAPInv:list[Erp_Tablesets_GetLogAPInvRow] = obj["GetLogAPInv"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_GlbAPIETGLCRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.RelatedToFile:str = obj["RelatedToFile"]
      """   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  """  
      self.Key1:str = obj["Key1"]
      """  Major component of the foreign key of the related master record. For example: For a "PORel" control this field would contain the related PO Number.  """  
      self.Key2:str = obj["Key2"]
      """   2nd component of the foreign key to the related master record.   For example: For a "PORel" control this field would contain the related PO Line Number.
The usage of this field is dependent on the type of record.  """  
      self.Key3:str = obj["Key3"]
      """  3rd component of the foreign key to the related master record.  For example: For a "PORel" control this field would contain the related PO Release Number.  The usage of this field is dependent record type.  """  
      self.Key4:str = obj["Key4"]
      """   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key5:str = obj["Key5"]
      """   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.Key6:str = obj["Key6"]
      """   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  """  
      self.TGLCTranNum:int = obj["TGLCTranNum"]
      """  Internal identifier used to keep records unique for the related record.  The system generates this number by finding the last TranGLC record for the RelatedToFile-Key1-Key2 etc. and adding 1 to it.  """  
      self.GLAcctContext:str = obj["GLAcctContext"]
      """  String identifier of the account context.  """  
      self.BookID:str = obj["BookID"]
      """  Reference to an accounting book.  If not blank must be a valid entry in the GLBook table.  """  
      self.COACode:str = obj["COACode"]
      """  The chart of account code used by the book.  Will contain the Master COA when BookID is blank.  Reference only.  Used for integrity checking when updating/deleting a GL account.  """  
      self.GLAccount:str = obj["GLAccount"]
      """  Full account containing the non-dynamic segment values up to 200 characters.  Unique identifier for the GL Account.  """  
      self.UserCanModify:bool = obj["UserCanModify"]
      """  Indicates if the user can update or delete this record.  """  
      self.SegValue1:str = obj["SegValue1"]
      """  Segement Value 1 of the account for this context.  """  
      self.SegValue2:str = obj["SegValue2"]
      """  Segement Value 2 of the account for this context.  """  
      self.SegValue3:str = obj["SegValue3"]
      """  Segement Value 3 of the account for this context.  """  
      self.SegValue4:str = obj["SegValue4"]
      """  Segement Value 4 of the account for this context.  """  
      self.SegValue5:str = obj["SegValue5"]
      """  Segement Value 5 of the account for this context.  """  
      self.SegValue6:str = obj["SegValue6"]
      """  Segement Value 6 of the account for this context.  """  
      self.SegValue7:str = obj["SegValue7"]
      """  Segement Value 7 of the account for this context.  """  
      self.SegValue8:str = obj["SegValue8"]
      """  Segement Value 8 of the account for this context.  """  
      self.SegValue9:str = obj["SegValue9"]
      """  Segement Value 9 of the account for this context.  """  
      self.SegValue10:str = obj["SegValue10"]
      """  Segement Value 10 of the account for this context.  """  
      self.SegValue11:str = obj["SegValue11"]
      """  Segement Value 11 of the account for this context.  """  
      self.SegValue12:str = obj["SegValue12"]
      """  Segement Value 12 of the account for this context.  """  
      self.SegValue13:str = obj["SegValue13"]
      """  Segement Value 13 of the account for this context.  """  
      self.SegValue14:str = obj["SegValue14"]
      """  Segement Value 14 of the account for this context.  """  
      self.SegValue15:str = obj["SegValue15"]
      """  Segement Value 15 of the account for this context.  """  
      self.SegValue16:str = obj["SegValue16"]
      """  Segement Value 16 of the account for this context.  """  
      self.SegValue17:str = obj["SegValue17"]
      """  Segement Value 17 of the account for this context.  """  
      self.SegValue18:str = obj["SegValue18"]
      """  Segement Value 18 of the account for this context.  """  
      self.SegValue19:str = obj["SegValue19"]
      """  Segement Value 19 of the account for this context.  """  
      self.SegValue20:str = obj["SegValue20"]
      """  Segement Value 20 of the account for this context.  """  
      self.SysGLControlType:str = obj["SysGLControlType"]
      """  Unique Identifier of the system GL Control Type.  """  
      self.SysGLControlCode:str = obj["SysGLControlCode"]
      """  System generated GL Control Identifier.  """  
      self.ExtCompanyID:str = obj["ExtCompanyID"]
      """  Global Company identifier.  Used in Multi-Company Journal.  """  
      self.IsExternalCompany:bool = obj["IsExternalCompany"]
      """  Flag to indicate the account in this record is for an external company.  """  
      self.FiscalYear:int = obj["FiscalYear"]
      """  Fiscal year of the related GLJrnDtl.  """  
      self.JournalCode:str = obj["JournalCode"]
      """  JournalCode of the related GLJrnDtl.  """  
      self.JournalNum:int = obj["JournalNum"]
      """  Journal number of the related GLJrnDtl.  """  
      self.JournalLine:int = obj["JournalLine"]
      """  JournalLine of the related GLJrnDtl.  """  
      self.TranDate:str = obj["TranDate"]
      """  Transaction date of the transaction.  This is used in order to display the transactions in date order.  """  
      self.TranSource:str = obj["TranSource"]
      """   An internal code to identify the table of  the source transaction.
P = PartTran
L = LaborDtl
I = InvcHead
Note: The system does not combine TranSource when creating GLJrnDtl. That is, a specific GLJrnDtl record can only be related to one source.  """  
      self.LaborHedSeq:int = obj["LaborHedSeq"]
      """  LaborHedSeq of the related LaborDtl.  Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.LaborDtlSeq:int = obj["LaborDtlSeq"]
      """  LaborDtlSeq of the related LaborDtl. Pertains only to source from LaborDtl (TranSource = "L")  """  
      self.SysDate:str = obj["SysDate"]
      """  System date of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.SysTime:int = obj["SysTime"]
      """  System time of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.TranNum:int = obj["TranNum"]
      """  TranNum of the related PartTran record.  Pertains only to source from PartTran (TranSource = "P")  """  
      self.ARInvoiceNum:int = obj["ARInvoiceNum"]
      """  InvoiceNum of the related InvcHead record.  Pertains only to source from PartTran (TranSource = "I")  """  
      self.TransAmt:int = obj["TransAmt"]
      """  Transaction amount that this transaction posted to the related GlJrnDtl.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line Number associated with this GL Journal  """  
      self.SeqNum:int = obj["SeqNum"]
      """  The sequence number associated with this GL journal  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The Internal VendorNum that ties back to the Vendor master file.  This field is not directly maintainable.  """  
      self.APInvoiceNum:str = obj["APInvoiceNum"]
      """  Vendor's invoice number.  """  
      self.CreateDate:str = obj["CreateDate"]
      """  Date record was created  """  
      self.FiscalYearSuffix:str = obj["FiscalYearSuffix"]
      """  Fiscal year suffix.  """  
      self.FiscalCalendarID:str = obj["FiscalCalendarID"]
      """  The fiscal calendar year/suffix/period were derived from.  """  
      self.CreditAmount:int = obj["CreditAmount"]
      """  Credit Amount.  """  
      self.DebitAmount:int = obj["DebitAmount"]
      """  Debit Amount.  """  
      self.BookCreditAmount:int = obj["BookCreditAmount"]
      """  BookCreditAmount  """  
      self.BookDebitAmount:int = obj["BookDebitAmount"]
      """  Book Debit Amount  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the document currency.  """  
      self.RecordType:str = obj["RecordType"]
      """   Indicates if this record contains account data only or reference data such as journal number, amounts, etc.  Valid  values are:
A - account data only
R - reference data  """  
      self.CorrAccUID:int = obj["CorrAccUID"]
      """  When a posting rule creates a pair of journal details balancing each other, each detail in the pair should reference the other one. This allows to show correspondence of accounts in reports. Support of reports that allow this being visible is not in the scope of this change.  """  
      self.ABTUID:str = obj["ABTUID"]
      """  this field equals ABTUID which was created during posting  """  
      self.RuleUID:int = obj["RuleUID"]
      """  Technical identifier.  """  
      self.Statistical:int = obj["Statistical"]
      """   Identifies if statistical information may be entered for the natural (chart) account.
Accounts can be used only for monetary amounts, both monetary and statistical amounts or only for statistical amounts.
0 = Only used for monetary amounts.
1 = Used for both monetary and statistical amounts.
2 = Only used for statistical amounts.  """  
      self.StatUOMCode:str = obj["StatUOMCode"]
      """  Statistical UOM code.  """  
      self.DebitStatAmt:int = obj["DebitStatAmt"]
      """  This field shows Debit statistical amount.  """  
      self.CreditStatAmt:int = obj["CreditStatAmt"]
      """  This field shows Credit statistical amount.  """  
      self.IsModifiedByUser:bool = obj["IsModifiedByUser"]
      """  IsModifiedByUser  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.MovementNum:int = obj["MovementNum"]
      """  MovementNum  """  
      self.MovementType:str = obj["MovementType"]
      """  MovementType  """  
      self.Plant:str = obj["Plant"]
      """  Plant  """  
      self.InvExpSeq:int = obj["InvExpSeq"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.COADescription:str = obj["COADescription"]
      self.GLAccountGLShortAcct:str = obj["GLAccountGLShortAcct"]
      self.GLAccountGLAcctDisp:str = obj["GLAccountGLAcctDisp"]
      self.GLAccountAccountDesc:str = obj["GLAccountAccountDesc"]
      self.GLBookDescription:str = obj["GLBookDescription"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LateCostLinesRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.VendorNum:int = obj["VendorNum"]
      self.PurPoint:str = obj["PurPoint"]
      self.PackSlip:str = obj["PackSlip"]
      self.PackLine:int = obj["PackLine"]
      self.Selected:bool = obj["Selected"]
      self.VendorNumName:str = obj["VendorNumName"]
      self.APInvVendorNum:int = obj["APInvVendorNum"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InvoiceLine:int = obj["InvoiceLine"]
      self.MscNum:int = obj["MscNum"]
      self.OurQty:int = obj["OurQty"]
      self.OurUnitCost:int = obj["OurUnitCost"]
      self.PartNum:str = obj["PartNum"]
      self.IUM:str = obj["IUM"]
      self.Weight:int = obj["Weight"]
      self.WeightUOM:str = obj["WeightUOM"]
      self.Volume:int = obj["Volume"]
      self.VolumeUOM:str = obj["VolumeUOM"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_LateCostLinesTableset:
   def __init__(self, obj):
      self.LateCostLines:list[Erp_Tablesets_LateCostLinesRow] = obj["LateCostLines"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_LegalNumGenOptsRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.LegalNumberID:str = obj["LegalNumberID"]
      self.TransYear:int = obj["TransYear"]
      self.TransYearSuffix:str = obj["TransYearSuffix"]
      self.DspTransYear:str = obj["DspTransYear"]
      self.ShowDspTransYear:bool = obj["ShowDspTransYear"]
      """  Indicates if DspTransYear should be displayed when prompting for a manual number.  """  
      self.Prefix:str = obj["Prefix"]
      self.PrefixList:str = obj["PrefixList"]
      """  The list of prefixes that can be selected by the user for manual numbers.  """  
      self.NumberSuffix:str = obj["NumberSuffix"]
      """  The suffix portion of the legal number.  """  
      self.EnablePrefix:bool = obj["EnablePrefix"]
      """  Indicates if the prefix can be entered by the user.  """  
      self.EnableSuffix:bool = obj["EnableSuffix"]
      """  Indicates if the suffix (number) can be entered by the user.  """  
      self.NumberOption:str = obj["NumberOption"]
      self.DocumentDate:str = obj["DocumentDate"]
      self.GenerationType:str = obj["GenerationType"]
      self.Description:str = obj["Description"]
      self.TransPeriod:int = obj["TransPeriod"]
      self.PeriodPrefix:str = obj["PeriodPrefix"]
      """  Prefix for the period  """  
      self.ShowTransPeriod:bool = obj["ShowTransPeriod"]
      self.LegalNumber:str = obj["LegalNumber"]
      """  Used when the full legal number is entered  """  
      self.TranDocTypeID:str = obj["TranDocTypeID"]
      self.TranDocTypeID2:str = obj["TranDocTypeID2"]
      self.GenerationOption:str = obj["GenerationOption"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PEAPInvTaxRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Indicates the Company ID.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Indicates the Supplier Number  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Indicates the Invoice Number  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Indicates the Tax Code  """  
      self.RateCode:str = obj["RateCode"]
      """  Indicates the Tax Rate Code  """  
      self.ECAcquisitionSeq:int = obj["ECAcquisitionSeq"]
      """  EC Acquisition Sequence  """  
      self.LineNum:int = obj["LineNum"]
      """  Indicates the Line Number  """  
      self.ResolutionNum:str = obj["ResolutionNum"]
      """  Indicates the Resolution Number.  """  
      self.TextCode:str = obj["TextCode"]
      """  Indicates the Text Code  """  
      self.ManAdd:bool = obj["ManAdd"]
      """  Manually added tax  """  
      self.Manual:bool = obj["Manual"]
      """  Manually added tax  """  
      self.Percent:int = obj["Percent"]
      """  Indicates the Percentage value  """  
      self.ReportableAmt:int = obj["ReportableAmt"]
      """  Indicates the Reportable Amount  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Indicates the Taxable Amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Indicates the Tax Amount  """  
      self.DefTaxableAmt:int = obj["DefTaxableAmt"]
      """  Default Taxable Amount  """  
      self.DefTaxAmt:int = obj["DefTaxAmt"]
      """  Default Tax Amount  """  
      self.DedTaxAmt:int = obj["DedTaxAmt"]
      """  Detractions Tax Amount  """  
      self.FixedAmount:int = obj["FixedAmount"]
      """  Indicates the Fixed Amount  """  
      self.CollectionType:int = obj["CollectionType"]
      """  Indicates the CollectionType  """  
      self.Timing:int = obj["Timing"]
      """  Indicates the Tax Timing parameter  """  
      self.TaxRateDate:str = obj["TaxRateDate"]
      """  Indicates the Tax Rate Date  """  
      self.ResolutionDate:str = obj["ResolutionDate"]
      """  Indicates the Resolution Date  """  
      self.DocTaxAmt:int = obj["DocTaxAmt"]
      """  Indicates the Document Tax Amount  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      """  Indicates the Group ID  """  
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_PESUNATDtlRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number  """  
      self.LineNum:int = obj["LineNum"]
      """  Line Number  """  
      self.TaxCode:str = obj["TaxCode"]
      """  Tax Code  """  
      self.TaxableAmt:int = obj["TaxableAmt"]
      """  Taxable Amount  """  
      self.TaxAmt:int = obj["TaxAmt"]
      """  Tax Amount  """  
      self.SysRevID:int = obj["SysRevID"]
      """  SysRevID  """  
      self.SysRowID:str = obj["SysRowID"]
      """  SysRowID  """  
      self.GroupID:str = obj["GroupID"]
      self.BitFlag:int = obj["BitFlag"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RcvMiscRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company Identifier.  """  
      self.VendorNum:int = obj["VendorNum"]
      """  The internal key that is used to tie back to the Vendor master file.  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The Vendors purchase point ID.  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Vendors Packing Slip #.  """  
      self.MiscSeq:int = obj["MiscSeq"]
      """  Unique Number automatically assigned within the Company/VendorNum/PurPoint/PackSlip to uniquely identify each Indirect Costs for this receipt.  """  
      self.MiscCode:str = obj["MiscCode"]
      """  Miscellaneous Charge ID that is flagged for Landed Cost  """  
      self.ExcludeFromLC:bool = obj["ExcludeFromLC"]
      """  Flag to indicate if the Indirect Cost is to be excluded from the Landed Cost calculation.  Disabled when IncTransValue is checked.  """  
      self.IncTransValue:bool = obj["IncTransValue"]
      """  Flag to indicate if the Indirect Cost is to be included in the Transaction Value (statistical value) which is used to calculate duties.  Disabled when the ExcludeFromLC is checked.  """  
      self.LCDisburseMethod:str = obj["LCDisburseMethod"]
      """  Identifies how the landed cost will be disbursed among the receipt details.  Valid options are Volume (only for po releases tied to a container), Weight, Value, Quantity and Manual.  """  
      self.ActualAmt:int = obj["ActualAmt"]
      """  Actual Miscellaneous Charge Amount.  """  
      self.DocActualAmt:int = obj["DocActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified.  """  
      self.CurrencyCode:str = obj["CurrencyCode"]
      """  A unique code that identifies the currency.  """  
      self.LockRate:bool = obj["LockRate"]
      """  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  This will also be the default for the invoice.  """  
      self.CommentText:str = obj["CommentText"]
      """  Receipt Indirect Cost Comments  """  
      self.Rpt1ActualAmt:int = obj["Rpt1ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt2ActualAmt:int = obj["Rpt2ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt3ActualAmt:int = obj["Rpt3ActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.ApplyDate:str = obj["ApplyDate"]
      """  The date that will be used to get the exchange rate if the indirect cost is not associated with an invoice miscellaneous charge.  """  
      self.RateGrpCode:str = obj["RateGrpCode"]
      """  Unique identifier of the currency rate group.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number from corresponding APInvMsc record.  """  
      self.InvoiceLine:int = obj["InvoiceLine"]
      """  Invoice Line from corresponding APInvMsc record.  """  
      self.MscNum:int = obj["MscNum"]
      """  The unique sequence number identifying the AP invoice miscellaneous charge.  """  
      self.Percentage:int = obj["Percentage"]
      """  This field will be used to define the percentage of the extended amount that will be applied as the 'Miscellaneous charge'.  """  
      self.Type:str = obj["Type"]
      """  This field will define if the miscellaneous charge is calculated as a flat amount or if is calculated as a percentage of the extended price.  """  
      self.APInvVendorNum:int = obj["APInvVendorNum"]
      """  VendorNum duplicated from the corresponding APInvHed record.  Not directly maintainable by the operator.  """  
      self.PackLine:int = obj["PackLine"]
      """  Reference to RcvDtl.PackLine. An integer that uniquely identifies a detail record within a Packing slip.  """  
      self.SysRevID:int = obj["SysRevID"]
      """  Revision identifier for this row. It is incremented upon each write.  """  
      self.SysRowID:str = obj["SysRowID"]
      """  Unique identifier for this row. The value is a GUID.  """  
      self.TaxCatID:str = obj["TaxCatID"]
      """  Indicates the Tax Category for this Receipt Misc. Used as a default to Order line items or Invoice line items. Can be left blank which indicates item is taxable. If entered must be valid in the TaxCat master file.  """  
      self.Taxable:bool = obj["Taxable"]
      """  Indicates if the Indirect Cost is taxable  """  
      self.NoTaxRecalc:bool = obj["NoTaxRecalc"]
      """  This flag determines whether any manual taxes were created for a line miscellaneous charge, if this is set to True then the tax engine will not calculate any miscellaneous charge tax information.  """  
      self.InActualAmt:int = obj["InActualAmt"]
      """  Actual Miscellaneous Charge Amount.  """  
      self.DocInActualAmt:int = obj["DocInActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified.  """  
      self.Rpt1InActualAmt:int = obj["Rpt1InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt2InActualAmt:int = obj["Rpt2InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.Rpt3InActualAmt:int = obj["Rpt3InActualAmt"]
      """  Reporting currency value of the Actual Amount.  """  
      self.ExchangeRate:int = obj["ExchangeRate"]
      """  Exchange rate that will be used for this indirect cost.  """  
      self.RateLabel:str = obj["RateLabel"]
      """  Label for the exchange rate  """  
      self.TotDedTaxAmt:int = obj["TotDedTaxAmt"]
      """  Total dedicated Tax amount.  """  
      self.TotSATaxAmt:int = obj["TotSATaxAmt"]
      """  Total Self Assessed Tax amount  """  
      self.TotTaxAmt:int = obj["TotTaxAmt"]
      """  Total tax amount  """  
      self.AllowLCUpdate:bool = obj["AllowLCUpdate"]
      """  Flag to indicate if landed cost info can be updated.  """  
      self.BaseCurrSymbol:str = obj["BaseCurrSymbol"]
      """  Currency.CurrSymbol for currency "BASE"  """  
      self.ScrActualAmt:int = obj["ScrActualAmt"]
      """  Actual Miscellaneous Charge Amount - Screen value.  """  
      self.Rpt1ScrActualAmt:int = obj["Rpt1ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value.  """  
      self.Rpt2ScrActualAmt:int = obj["Rpt2ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value.  """  
      self.Rpt3ScrActualAmt:int = obj["Rpt3ScrActualAmt"]
      """  Reporting currency value of the Actual Amount - Screen value  """  
      self.DocScrActualAmt:int = obj["DocScrActualAmt"]
      """  Actual Miscellaneous Charge Amount in the currency specified - Screen value  """  
      self.BitFlag:int = obj["BitFlag"]
      self.APInvVendorName:str = obj["APInvVendorName"]
      self.APInvVendorVendorID:str = obj["APInvVendorVendorID"]
      self.CurrencyCurrSymbol:str = obj["CurrencyCurrSymbol"]
      self.CurrencyCurrencyID:str = obj["CurrencyCurrencyID"]
      self.CurrencyDocumentDesc:str = obj["CurrencyDocumentDesc"]
      self.CurrencyCurrDesc:str = obj["CurrencyCurrDesc"]
      self.CurrencyCurrName:str = obj["CurrencyCurrName"]
      self.PurMiscLCDisburseMethod:str = obj["PurMiscLCDisburseMethod"]
      self.PurMiscLCCurrencyCode:str = obj["PurMiscLCCurrencyCode"]
      self.PurMiscDescription:str = obj["PurMiscDescription"]
      self.PurMiscLCAmount:int = obj["PurMiscLCAmount"]
      self.RateGrpDescription:str = obj["RateGrpDescription"]
      self.RcvHeadReceiptDate:str = obj["RcvHeadReceiptDate"]
      self.RcvHeadInPrice:bool = obj["RcvHeadInPrice"]
      self.TaxCatIDDescription:str = obj["TaxCatIDDescription"]
      self.VendorName:str = obj["VendorName"]
      self.VendorVendorID:str = obj["VendorVendorID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RebateInvRow:
   def __init__(self, obj):
      self.Active:bool = obj["Active"]
      self.Company:str = obj["Company"]
      self.CustNum:int = obj["CustNum"]
      self.RebateDesc:str = obj["RebateDesc"]
      self.RebateID:str = obj["RebateID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_RebateInvTableset:
   def __init__(self, obj):
      self.RebateInv:list[Erp_Tablesets_RebateInvRow] = obj["RebateInv"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Erp_Tablesets_SupplierXRefRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.MfgID:str = obj["MfgID"]
      self.MfgName:str = obj["MfgName"]
      self.MfgNum:int = obj["MfgNum"]
      self.MfgPartNum:str = obj["MfgPartNum"]
      self.PartNum:str = obj["PartNum"]
      self.POReference:bool = obj["POReference"]
      self.Receipt:bool = obj["Receipt"]
      self.VendNum:int = obj["VendNum"]
      self.VendPartNum:str = obj["VendPartNum"]
      self.Invoice:bool = obj["Invoice"]
      self.RcvXRefNum:int = obj["RcvXRefNum"]
      """  RcvXRefNum  """  
      self.Inspected:bool = obj["Inspected"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_TaxConnectStatusRow:
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      """  Company  """  
      self.ETCOffline:bool = obj["ETCOffline"]
      """  If true, service is down. If false, service is up.  """  
      self.ErrorMessage:str = obj["ErrorMessage"]
      """  Error message returned from the call to the tax service.  """  
      self.TCStatus:bool = obj["TCStatus"]
      """  This is the success/failure status of the call to tax connect. If false, the call failed, if true it was successful  """  
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      """  RowMod  """  
      pass

class Erp_Tablesets_UpdExtAPInvoiceTableset:
   def __init__(self, obj):
      self.APInvHed:list[Erp_Tablesets_APInvHedRow] = obj["APInvHed"]
      self.APInvHedAttch:list[Erp_Tablesets_APInvHedAttchRow] = obj["APInvHedAttch"]
      self.APIHAPInvExp:list[Erp_Tablesets_APIHAPInvExpRow] = obj["APIHAPInvExp"]
      self.APIHAPInvExpTGLC:list[Erp_Tablesets_APIHAPInvExpTGLCRow] = obj["APIHAPInvExpTGLC"]
      self.APIHAPInvMsc:list[Erp_Tablesets_APIHAPInvMscRow] = obj["APIHAPInvMsc"]
      self.RcvMisc:list[Erp_Tablesets_RcvMiscRow] = obj["RcvMisc"]
      self.APIHAPLnTax:list[Erp_Tablesets_APIHAPLnTaxRow] = obj["APIHAPLnTax"]
      self.APInvDtl:list[Erp_Tablesets_APInvDtlRow] = obj["APInvDtl"]
      self.APInvDtlAttch:list[Erp_Tablesets_APInvDtlAttchRow] = obj["APInvDtlAttch"]
      self.APInvDtlDEASch:list[Erp_Tablesets_APInvDtlDEASchRow] = obj["APInvDtlDEASch"]
      self.APInvExp:list[Erp_Tablesets_APInvExpRow] = obj["APInvExp"]
      self.APInvExpTGLC:list[Erp_Tablesets_APInvExpTGLCRow] = obj["APInvExpTGLC"]
      self.GlbAPIETGLC:list[Erp_Tablesets_GlbAPIETGLCRow] = obj["GlbAPIETGLC"]
      self.APInvJob:list[Erp_Tablesets_APInvJobRow] = obj["APInvJob"]
      self.APInvMsc:list[Erp_Tablesets_APInvMscRow] = obj["APInvMsc"]
      self.APInvLnMscTax:list[Erp_Tablesets_APInvLnMscTaxRow] = obj["APInvLnMscTax"]
      self.APInvPB:list[Erp_Tablesets_APInvPBRow] = obj["APInvPB"]
      self.APLnTax:list[Erp_Tablesets_APLnTaxRow] = obj["APLnTax"]
      self.APInvDtlTGLC:list[Erp_Tablesets_APInvDtlTGLCRow] = obj["APInvDtlTGLC"]
      self.APInvHedMscTax:list[Erp_Tablesets_APInvHedMscTaxRow] = obj["APInvHedMscTax"]
      self.APInvSched:list[Erp_Tablesets_APInvSchedRow] = obj["APInvSched"]
      self.APInvTax:list[Erp_Tablesets_APInvTaxRow] = obj["APInvTax"]
      self.PESUNATDtl:list[Erp_Tablesets_PESUNATDtlRow] = obj["PESUNATDtl"]
      self.EntityGLC:list[Erp_Tablesets_EntityGLCRow] = obj["EntityGLC"]
      self.PEAPInvTax:list[Erp_Tablesets_PEAPInvTaxRow] = obj["PEAPInvTax"]
      self.AdditionalForms_ParametersView:list[Erp_Tablesets_AdditionalForms_ParametersViewRow] = obj["AdditionalForms_ParametersView"]
      self.LegalNumGenOpts:list[Erp_Tablesets_LegalNumGenOptsRow] = obj["LegalNumGenOpts"]
      self.SupplierXRef:list[Erp_Tablesets_SupplierXRefRow] = obj["SupplierXRef"]
      self.TaxConnectStatus:list[Erp_Tablesets_TaxConnectStatusRow] = obj["TaxConnectStatus"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class GLAllocation_input:
   """ Required : 
   vCurrSwitch
   ds
   """  
   def __init__(self, obj):
      self.vCurrSwitch:bool = obj["vCurrSwitch"]
      """  Currency Swithch  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GLAllocation_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GenerateAmortizationSchedule_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GenerateAmortizationSchedule_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GenerateAmortizationSchedulesForGroup_input:
   """ Required : 
   groupID
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GenerateAmortizationSchedulesForGroup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GenerateRebateInv_input:
   """ Required : 
   invoiceType
   groupID
   ds
   """  
   def __init__(self, obj):
      self.invoiceType:str = obj["invoiceType"]
      """  The invoice type  """  
      self.groupID:str = obj["groupID"]
      """  The group id  """  
      self.ds:list[Erp_Tablesets_RebateInvTableset] = obj["ds"]
      pass

class GenerateRebateInv_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetAPInvHedTransferList_input:
   """ Required : 
   ds
   GroupID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      self.GroupID:str = obj["GroupID"]
      pass

class GetAPInvHedTransferList_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPInvPOMisc_input:
   """ Required : 
   InVendorNum
   InInvoiceNum
   """  
   def __init__(self, obj):
      self.InVendorNum:int = obj["InVendorNum"]
      """  The vendor number on the invoice.  """  
      self.InInvoiceNum:str = obj["InInvoiceNum"]
      """  The invoice number.  """  
      pass

class GetAPInvPOMisc_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvPOMiscTableset] = obj["returnObj"]
      pass

class GetAPInvRecurInfo_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   ipFirstDayOfWeek
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      self.ipFirstDayOfWeek:int = obj["ipFirstDayOfWeek"]
      pass

class GetAPInvRecurInfo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outNexInvDate:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetAPInvcRecurr_input:
   """ Required : 
   vendorNum
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  Vendor number  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  Invoice number  """  
      self.ds:list[Erp_Tablesets_APRecurringInvTableset] = obj["ds"]
      pass

class GetAPInvcRecurr_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APRecurringInvTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPInvoiceRelationshipMap_input:
   """ Required : 
   vendorNum
   invoiceNum
   maxNumOfCards
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.maxNumOfCards:int = obj["maxNumOfCards"]
      pass

class GetAPInvoiceRelationshipMap_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetAPLateCostLines_input:
   """ Required : 
   ds
   vendorNum
   purPoint
   packSlip
   containerID
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      """  The APInvHed Vendor Number  """  
      self.purPoint:str = obj["purPoint"]
      """  The PurPoint of the current late cost  """  
      self.packSlip:str = obj["packSlip"]
      """  The PackSlip of the current late cost.  """  
      self.containerID:int = obj["containerID"]
      """  The ContainerID of the current late cost.  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  The current InvoiceNum.  """  
      pass

class GetAPLateCostLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPLateCosts_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   InPONum
   InContainerID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      """  The APInvHed Vendor Number  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  The APInvHed Invoice Number  """  
      self.InPONum:int = obj["InPONum"]
      """  The PO Number to retrieve Late Costs for.  May be blank.  """  
      self.InContainerID:int = obj["InContainerID"]
      """  The ContainerID to retrieve Late Costs for.  May be blank.  """  
      pass

class GetAPLateCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPUninvoicedDropShipmentLines_input:
   """ Required : 
   VendorNum
   PurPoint
   PackSlip
   InvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Current VendorNum  """  
      self.PurPoint:str = obj["PurPoint"]
      """  Current PurPoint  """  
      self.PackSlip:str = obj["PackSlip"]
      """  Current PackSlip  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Current InvoiceNum  """  
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

class GetAPUninvoicedDropShipmentLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPUninvoicedReceiptLines_input:
   """ Required : 
   ds
   VendorNum
   PurPoint
   PackSlip
   isFirstReceipt
   InvoiceNum
   InPONum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.VendorNum:int = obj["VendorNum"]
      """  The APInvHed Vendor Number  """  
      self.PurPoint:str = obj["PurPoint"]
      """  The PackSlip of the current receipt  """  
      self.PackSlip:str = obj["PackSlip"]
      """  The PackSlip of the current receipt.  """  
      self.isFirstReceipt:bool = obj["isFirstReceipt"]
      """  Used to calculate the BaseAmount when is not the fist row  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  The current InvoiceNum.  """  
      self.InPONum:int = obj["InPONum"]
      """  The PO Number to retrieve uninvoiced receipts for.  May be blank.  """  
      pass

class GetAPUninvoicedReceiptLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAPUninvoicedReceiptsSelectAll_input:
   """ Required : 
   InVendorNum
   InInvoiceNum
   InPONumList
   """  
   def __init__(self, obj):
      self.InVendorNum:int = obj["InVendorNum"]
      """  The APInvHed Vendor Number  """  
      self.InInvoiceNum:str = obj["InInvoiceNum"]
      """  The APInvHed Invoice Number  """  
      self.InPONumList:str = obj["InPONumList"]
      """  Delimited list of PO numbers to retrieve uninvoiced receipts for.  May be blank to retrieve all POs.  """  
      pass

class GetAPUninvoicedReceiptsSelectAll_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["returnObj"]
      pass

class GetAPUninvoicedReceipts_input:
   """ Required : 
   ds
   InVendorNum
   InInvoiceNum
   InPONum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.InVendorNum:int = obj["InVendorNum"]
      """  The APInvHed Vendor Number  """  
      self.InInvoiceNum:str = obj["InInvoiceNum"]
      """  The APInvHed Invoice Number  """  
      self.InPONum:int = obj["InPONum"]
      """  The PO Number to retrieve uninvoiced receipts for.  May be blank.  """  
      pass

class GetAPUninvoicedReceipts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetAllowMultInvcReceiptsValue_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.flag:bool = obj["flag"]
      pass

      """  output parameters  """  

class GetApInvHeadListLoaded_input:
   """ Required : 
   groupId
   vendorId
   """  
   def __init__(self, obj):
      self.groupId:str = obj["groupId"]
      self.vendorId:int = obj["vendorId"]
      pass

class GetApInvHeadListLoaded_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

class GetAvailTranDocTypes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.AvailTypes:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetByID_input:
   """ Required : 
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetByID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class GetBySysRowID_input:
   """ Required : 
   id
   """  
   def __init__(self, obj):
      self.id:str = obj["id"]
      pass

class GetBySysRowID_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class GetBySysRowIDs_input:
   """ Required : 
   ids
   """  
   def __init__(self, obj):
      self.ids:str = obj["ids"]
      pass

class GetBySysRowIDs_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class GetCodeDescList_input:
   """ Required : 
   tableName
   fieldName
   """  
   def __init__(self, obj):
      self.tableName:str = obj["tableName"]
      """  The table name  """  
      self.fieldName:str = obj["fieldName"]
      """  The field name.  """  
      pass

class GetCodeDescList_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetDMRCorrInvRequests_input:
   """ Required : 
   AddToGroupID
   ds
   """  
   def __init__(self, obj):
      self.AddToGroupID:str = obj["AddToGroupID"]
      """  The group id to add the invoices to  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetDMRCorrInvRequests_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ReturnMsg:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDMRDMFilterSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvGetDMRDMSourceTableset] = obj["returnObj"]
      pass

class GetDMRDMSourceSearch_input:
   """ Required : 
   ipSuppList
   """  
   def __init__(self, obj):
      self.ipSuppList:str = obj["ipSuppList"]
      """  List of suppliers.  """  
      pass

class GetDMRDMSourceSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvGetDMRDMSourceTableset] = obj["returnObj"]
      pass

class GetDMRDebitMemos_input:
   """ Required : 
   sysRowIDList
   suppList
   AddToGroupID
   ds
   """  
   def __init__(self, obj):
      self.sysRowIDList:str = obj["sysRowIDList"]
      """  SysRowID List of the DMR selected by user  """  
      self.suppList:str = obj["suppList"]
      """  Supplier List selected by user  """  
      self.AddToGroupID:str = obj["AddToGroupID"]
      """  The group id to add the invoices to  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetDMRDebitMemos_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ReturnMsg:str = obj["parameters"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDefaultAmortizationAccounts_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetDefaultAmortizationAccounts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetDfltDocumentType_input:
   """ Required : 
   inSystemTranID
   """  
   def __init__(self, obj):
      self.inSystemTranID:str = obj["inSystemTranID"]
      """  System Transaction ID  """  
      pass

class GetDfltDocumentType_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outTranDocTypeID:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetGBLGLAccountDesc_input:
   """ Required : 
   ipCompany
   ipExtCompany
   ipCOACode
   ipGLAccount
   """  
   def __init__(self, obj):
      self.ipCompany:str = obj["ipCompany"]
      self.ipExtCompany:str = obj["ipExtCompany"]
      self.ipCOACode:str = obj["ipCOACode"]
      self.ipGLAccount:str = obj["ipGLAccount"]
      pass

class GetGBLGLAccountDesc_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetGLAccountDesc_input:
   """ Required : 
   Company
   COACode
   GLAcctDisp
   """  
   def __init__(self, obj):
      self.Company:str = obj["Company"]
      self.COACode:str = obj["COACode"]
      self.GLAcctDisp:str = obj["GLAcctDisp"]
      pass

class GetGLAccountDesc_output:
   def __init__(self, obj):
      self.returnObj:str = obj["returnObj"]
      pass

class GetLegalNumberOpts_input:
   """ Required : 
   inGroupID
   inVendor
   inInvNum
   ds
   """  
   def __init__(self, obj):
      self.inGroupID:str = obj["inGroupID"]
      """  The group id  """  
      self.inVendor:int = obj["inVendor"]
      """  The vendor num  """  
      self.inInvNum:str = obj["inInvNum"]
      """  The invoice number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetLegalNumberOpts_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.requiresUserInput:bool = obj["requiresUserInput"]
      pass

      """  output parameters  """  

class GetLegalNumforDebitMemo_input:
   """ Required : 
   cGroupID
   """  
   def __init__(self, obj):
      self.cGroupID:str = obj["cGroupID"]
      """  The group id  """  
      pass

class GetLegalNumforDebitMemo_output:
   def __init__(self, obj):
      pass

class GetLinePurPointFilterString_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  Supplier ID  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      pass

class GetLinePurPointFilterString_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opFilterString:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetListBOEReferences_input:
   """ Required : 
   APInvHedWhereClause
   PageSize
   AbsolutePage
   """  
   def __init__(self, obj):
      self.APInvHedWhereClause:str = obj["APInvHedWhereClause"]
      self.PageSize:int = obj["PageSize"]
      self.AbsolutePage:int = obj["AbsolutePage"]
      pass

class GetListBOEReferences_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.MorePages:bool = obj["MorePages"]
      pass

      """  output parameters  """  

class GetListForAssetAdd_input:
   """ Required : 
   WhereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.WhereClause:str = obj["WhereClause"]
      """  COASegValues search clause  """  
      self.pageSize:int = obj["pageSize"]
      """  Page size  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Absolute page  """  
      pass

class GetListForAssetAdd_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetListForLandingPage_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetListForLandingPage_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetList_input:
   """ Required : 
   whereClause
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  An expression used to filter the rows. Can be left blank for all rows.  """  
      self.pageSize:int = obj["pageSize"]
      """  The maximum number of rows to return. Leave as zero for no maximum.  """  
      self.absolutePage:int = obj["absolutePage"]
      """  Page of rows to return.  """  
      pass

class GetList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetNewAPIHAPInvExpTGLC_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   invExpSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.invExpSeq:int = obj["invExpSeq"]
      pass

class GetNewAPIHAPInvExpTGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPIHAPInvExp_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPIHAPInvExp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPIHAPInvMscPlasticPackTaxCost_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   plasticPackTaxReportID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      """  The vendor number of the invoice  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  The invoice number of the invoice  """  
      self.plasticPackTaxReportID:str = obj["plasticPackTaxReportID"]
      """  The plastic packaging tax report ID  """  
      pass

class GetNewAPIHAPInvMscPlasticPackTaxCost_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPIHAPInvMsc_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPIHAPInvMsc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPIHAPLnTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewAPIHAPLnTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlAdvance_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      pass

class GetNewAPInvDtlAdvance_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlAsset_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      pass

class GetNewAPInvDtlAsset_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlAttch_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvDtlAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlDEASchPopulated_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvDtlDEASchPopulated_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlDEASch_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvDtlDEASch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlDMRCredit_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   iDMRNum
   iDMRActionNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      self.iDMRNum:int = obj["iDMRNum"]
      """  The DMR Num that we are creating a line for.  """  
      self.iDMRActionNum:int = obj["iDMRActionNum"]
      """  The DMR ActionNum that we are creating a line for.  """  
      pass

class GetNewAPInvDtlDMRCredit_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlJobMiscellaneous_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      pass

class GetNewAPInvDtlJobMiscellaneous_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlMiscellaneous_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      pass

class GetNewAPInvDtlMiscellaneous_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlTGLC_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetNewAPInvDtlTGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtlUnreceived_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      pass

class GetNewAPInvDtlUnreceived_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvDtl_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetNewAPInvDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvExpTGLC_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   invExpSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.invExpSeq:int = obj["invExpSeq"]
      pass

class GetNewAPInvExpTGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvExp_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvExp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHedAttch_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetNewAPInvHedAttch_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHedBOE_input:
   """ Required : 
   groupID
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      """  The group ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetNewAPInvHedBOE_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHedDebitMemo_input:
   """ Required : 
   ds
   cGroupID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  The group id to add the invoice to  """  
      pass

class GetNewAPInvHedDebitMemo_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHedInvoice_input:
   """ Required : 
   ds
   cGroupID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  The group id to add the invoice to  """  
      pass

class GetNewAPInvHedInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHedMscTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   mscNum
   apInvMscSysRowID
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.mscNum:int = obj["mscNum"]
      self.apInvMscSysRowID:str = obj["apInvMscSysRowID"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewAPInvHedMscTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvHed_input:
   """ Required : 
   ds
   vendorNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      pass

class GetNewAPInvHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvJob_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   jobNum
   assemblySeq
   mtlSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.jobNum:str = obj["jobNum"]
      self.assemblySeq:int = obj["assemblySeq"]
      self.mtlSeq:int = obj["mtlSeq"]
      pass

class GetNewAPInvJob_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvLnMscTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   mscNum
   apInvMscSysRowID
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.mscNum:int = obj["mscNum"]
      self.apInvMscSysRowID:str = obj["apInvMscSysRowID"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewAPInvLnMscTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvMsc_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvMsc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvPB_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      pass

class GetNewAPInvPB_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvSched_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetNewAPInvSched_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPInvTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewAPInvTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewAPLnTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   taxCode
   rateCode
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.taxCode:str = obj["taxCode"]
      self.rateCode:str = obj["rateCode"]
      pass

class GetNewAPLnTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewEntityGLC_input:
   """ Required : 
   ds
   relatedToFile
   key1
   key2
   key3
   key4
   key5
   key6
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.relatedToFile:str = obj["relatedToFile"]
      self.key1:str = obj["key1"]
      self.key2:str = obj["key2"]
      self.key3:str = obj["key3"]
      self.key4:str = obj["key4"]
      self.key5:str = obj["key5"]
      self.key6:str = obj["key6"]
      pass

class GetNewEntityGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewGlbAPIETGLC_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   invoiceLine
   invExpSeq
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.invExpSeq:int = obj["invExpSeq"]
      pass

class GetNewGlbAPIETGLC_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewHdrCharge_input:
   """ Required : 
   ds
   iVendorNum
   cInvoiceNum
   lcFlag
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.iVendorNum:int = obj["iVendorNum"]
      """  The vendor number of the invoice  """  
      self.cInvoiceNum:str = obj["cInvoiceNum"]
      """  The invoice number of the invoice  """  
      self.lcFlag:bool = obj["lcFlag"]
      """  true if late cost should be added  """  
      pass

class GetNewHdrCharge_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewManualGRNIClearing_input:
   """ Required : 
   ds
   cGroupID
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  The group id to add the invoice to  """  
      pass

class GetNewManualGRNIClearing_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPEAPInvTax_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetNewPEAPInvTax_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewPESUNATDtl_input:
   """ Required : 
   ds
   vendorNum
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      pass

class GetNewPESUNATDtl_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNewRcvMisc_input:
   """ Required : 
   ds
   vendorNum
   purPoint
   packSlip
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      self.purPoint:str = obj["purPoint"]
      self.packSlip:str = obj["packSlip"]
      pass

class GetNewRcvMisc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetNotInvRecFilterSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvGetNotInvRecSourceTableset] = obj["returnObj"]
      pass

class GetNotInvRecSourceSearch_input:
   """ Required : 
   ipSuppList
   invoiceDate
   """  
   def __init__(self, obj):
      self.ipSuppList:str = obj["ipSuppList"]
      """  Vendors  """  
      self.invoiceDate:str = obj["invoiceDate"]
      """  Invoice Date  """  
      pass

class GetNotInvRecSourceSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvGetNotInvRecSourceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.alternateMessage:bool = obj["alternateMessage"]
      pass

      """  output parameters  """  

class GetPOFilterString_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  Supplier ID  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      pass

class GetPOFilterString_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opFilterString:str = obj["parameters"]
      pass

      """  output parameters  """  

class GetPercentFixedAmt_input:
   """ Required : 
   ipInvDate
   """  
   def __init__(self, obj):
      self.ipInvDate:str = obj["ipInvDate"]
      pass

class GetPercentFixedAmt_output:
   def __init__(self, obj):
      pass

class GetPlasticPackTaxCostLines_input:
   """ Required : 
   ds
   plasticPackTaxReportID
   invVendorNum
   invNum
   invMscNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      self.plasticPackTaxReportID:str = obj["plasticPackTaxReportID"]
      """  The plastic packaging tax report ID  """  
      self.invVendorNum:int = obj["invVendorNum"]
      """  The AP Invoice VendorNum  """  
      self.invNum:str = obj["invNum"]
      """  The AP Invoice Number  """  
      self.invMscNum:int = obj["invMscNum"]
      """  The AP Invoice MiscNum  """  
      pass

class GetPlasticPackTaxCostLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetRebateInvList_input:
   """ Required : 
   invoiceType
   """  
   def __init__(self, obj):
      self.invoiceType:str = obj["invoiceType"]
      """  The invoice type  """  
      pass

class GetRebateInvList_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_RebateInvTableset] = obj["returnObj"]
      pass

class GetRecurInvoiceSourceSearch_input:
   """ Required : 
   ipSuppList
   ipCycleCodesList
   ipGrpDate
   """  
   def __init__(self, obj):
      self.ipSuppList:str = obj["ipSuppList"]
      """  Vendors, for which recurring source invoices are searched  """  
      self.ipCycleCodesList:str = obj["ipCycleCodesList"]
      """  Cycle Codes, for which recurring source invoices are searched  """  
      self.ipGrpDate:str = obj["ipGrpDate"]
      """  Apply date of the AP Invoice Group  """  
      pass

class GetRecurInvoiceSourceSearch_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvGetRecInvSourceTableset] = obj["returnObj"]
      pass

class GetRefInvoicesForBOE_input:
   """ Required : 
   whereClause
   """  
   def __init__(self, obj):
      self.whereClause:str = obj["whereClause"]
      """  Where clause for Payments.  """  
      pass

class GetRefInvoicesForBOE_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvHedListTableset] = obj["returnObj"]
      pass

class GetRowsForTrackerSite_input:
   """ Required : 
   vendnum
   all
   open
   fromDays
   inRange
   plant
   """  
   def __init__(self, obj):
      self.vendnum:int = obj["vendnum"]
      self.all:bool = obj["all"]
      self.open:bool = obj["open"]
      self.fromDays:int = obj["fromDays"]
      self.inRange:bool = obj["inRange"]
      self.plant:str = obj["plant"]
      pass

class GetRowsForTrackerSite_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class GetRowsForTracker_input:
   """ Required : 
   vendnum
   all
   open
   fromDays
   inRange
   """  
   def __init__(self, obj):
      self.vendnum:int = obj["vendnum"]
      self.all:bool = obj["all"]
      self.open:bool = obj["open"]
      self.fromDays:int = obj["fromDays"]
      self.inRange:bool = obj["inRange"]
      pass

class GetRowsForTracker_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

class GetRows_input:
   """ Required : 
   whereClauseAPInvHed
   whereClauseAPInvHedAttch
   whereClauseAPIHAPInvExp
   whereClauseAPIHAPInvExpTGLC
   whereClauseAPIHAPInvMsc
   whereClauseRcvMisc
   whereClauseAPIHAPLnTax
   whereClauseAPInvDtl
   whereClauseAPInvDtlAttch
   whereClauseAPInvDtlDEASch
   whereClauseAPInvExp
   whereClauseAPInvExpTGLC
   whereClauseGlbAPIETGLC
   whereClauseAPInvJob
   whereClauseAPInvMsc
   whereClauseAPInvLnMscTax
   whereClauseAPInvPB
   whereClauseAPLnTax
   whereClauseAPInvDtlTGLC
   whereClauseAPInvHedMscTax
   whereClauseAPInvSched
   whereClauseAPInvTax
   whereClausePESUNATDtl
   whereClauseEntityGLC
   whereClausePEAPInvTax
   whereClauseAdditionalForms_ParametersView
   whereClauseLegalNumGenOpts
   whereClauseSupplierXRef
   whereClauseTaxConnectStatus
   pageSize
   absolutePage
   """  
   def __init__(self, obj):
      self.whereClauseAPInvHed:str = obj["whereClauseAPInvHed"]
      self.whereClauseAPInvHedAttch:str = obj["whereClauseAPInvHedAttch"]
      self.whereClauseAPIHAPInvExp:str = obj["whereClauseAPIHAPInvExp"]
      self.whereClauseAPIHAPInvExpTGLC:str = obj["whereClauseAPIHAPInvExpTGLC"]
      self.whereClauseAPIHAPInvMsc:str = obj["whereClauseAPIHAPInvMsc"]
      self.whereClauseRcvMisc:str = obj["whereClauseRcvMisc"]
      self.whereClauseAPIHAPLnTax:str = obj["whereClauseAPIHAPLnTax"]
      self.whereClauseAPInvDtl:str = obj["whereClauseAPInvDtl"]
      self.whereClauseAPInvDtlAttch:str = obj["whereClauseAPInvDtlAttch"]
      self.whereClauseAPInvDtlDEASch:str = obj["whereClauseAPInvDtlDEASch"]
      self.whereClauseAPInvExp:str = obj["whereClauseAPInvExp"]
      self.whereClauseAPInvExpTGLC:str = obj["whereClauseAPInvExpTGLC"]
      self.whereClauseGlbAPIETGLC:str = obj["whereClauseGlbAPIETGLC"]
      self.whereClauseAPInvJob:str = obj["whereClauseAPInvJob"]
      self.whereClauseAPInvMsc:str = obj["whereClauseAPInvMsc"]
      self.whereClauseAPInvLnMscTax:str = obj["whereClauseAPInvLnMscTax"]
      self.whereClauseAPInvPB:str = obj["whereClauseAPInvPB"]
      self.whereClauseAPLnTax:str = obj["whereClauseAPLnTax"]
      self.whereClauseAPInvDtlTGLC:str = obj["whereClauseAPInvDtlTGLC"]
      self.whereClauseAPInvHedMscTax:str = obj["whereClauseAPInvHedMscTax"]
      self.whereClauseAPInvSched:str = obj["whereClauseAPInvSched"]
      self.whereClauseAPInvTax:str = obj["whereClauseAPInvTax"]
      self.whereClausePESUNATDtl:str = obj["whereClausePESUNATDtl"]
      self.whereClauseEntityGLC:str = obj["whereClauseEntityGLC"]
      self.whereClausePEAPInvTax:str = obj["whereClausePEAPInvTax"]
      self.whereClauseAdditionalForms_ParametersView:str = obj["whereClauseAdditionalForms_ParametersView"]
      self.whereClauseLegalNumGenOpts:str = obj["whereClauseLegalNumGenOpts"]
      self.whereClauseSupplierXRef:str = obj["whereClauseSupplierXRef"]
      self.whereClauseTaxConnectStatus:str = obj["whereClauseTaxConnectStatus"]
      self.pageSize:int = obj["pageSize"]
      self.absolutePage:int = obj["absolutePage"]
      pass

class GetRows_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.morePages:bool = obj["morePages"]
      pass

      """  output parameters  """  

class GetSiteIsLegalEntity_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      """  bool  """  
      pass

class GetValueExchageRate_input:
   """ Required : 
   vCurrencyCode
   vRateGrpCode
   ds
   """  
   def __init__(self, obj):
      self.vCurrencyCode:str = obj["vCurrencyCode"]
      """  Currency selected for the APInvoice  """  
      self.vRateGrpCode:str = obj["vRateGrpCode"]
      """  Currency Rate Group selected for the APInvoice  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class GetValueExchageRate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.vExchangeRate:int = obj["parameters"]
      self.vXRateLabel:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class GetvalidEAD_input:
   """ Required : 
   inTransType
   inDateLabel
   proposedDate
   """  
   def __init__(self, obj):
      self.inTransType:str = obj["inTransType"]
      self.inDateLabel:str = obj["inDateLabel"]
      self.proposedDate:str = obj["proposedDate"]
      pass

class GetvalidEAD_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.proposedDate:str = obj["parameters"]
      self.cMessageText:str = obj["parameters"]
      pass

      """  output parameters  """  

class Ice_BOUpdErrorRow:
   def __init__(self, obj):
      self.TableName:str = obj["TableName"]
      self.ErrorLevel:str = obj["ErrorLevel"]
      self.ErrorType:str = obj["ErrorType"]
      self.ErrorText:str = obj["ErrorText"]
      self.ErrorSysRowID:str = obj["ErrorSysRowID"]
      self.SysRowID:str = obj["SysRowID"]
      self.RowMod:str = obj["RowMod"]
      pass

class Ice_BOUpdErrorTableset:
   def __init__(self, obj):
      self.BOUpdError:list[Ice_BOUpdErrorRow] = obj["BOUpdError"]
      self.ExtensionTables:list[Ice_Extensions_ExtensionTableData] = obj["ExtensionTables"]
      pass

class Ice_Extensions_ExtensionRow:
   def __init__(self, obj):
      self.ColumnValues:object
      self.RowMod:str = obj["RowMod"]
      self.SysRowID:str = obj["SysRowID"]
      pass

class Ice_Extensions_ExtensionTableColumn:
   def __init__(self, obj):
      self.ColumnName:str = obj["ColumnName"]
      self.ColumnType:str = obj["ColumnType"]
      pass

class Ice_Extensions_ExtensionTableData:
   def __init__(self, obj):
      self.Table:list[Ice_Extensions_ExtensionRow] = obj["Table"]
      self.SystemCode:str = obj["SystemCode"]
      self.TableName:str = obj["TableName"]
      self.Columns:list[Ice_Extensions_ExtensionTableColumn] = obj["Columns"]
      self.PrimaryKeyColumns:str = obj["PrimaryKeyColumns"]
      self.PeerTableSystemCode:str = obj["PeerTableSystemCode"]
      self.PeerTableName:str = obj["PeerTableName"]
      pass

class InvoiceSelectedLateCosts_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

class InvoiceSelectedLateCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class InvoiceSelectedLines_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

class InvoiceSelectedLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.opLOCMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class InvokeInvoiceSelectedLines_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

class InvokeInvoiceSelectedLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.opLOCMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class InvokeLocateGroupID_input:
   """ Required : 
   ipLocGrpInvoiceNum
   ipLocGrpVendorID
   """  
   def __init__(self, obj):
      self.ipLocGrpInvoiceNum:str = obj["ipLocGrpInvoiceNum"]
      self.ipLocGrpVendorID:str = obj["ipLocGrpVendorID"]
      pass

class InvokeLocateGroupID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.outLocGrpVendorID:str = obj["parameters"]
      self.GroupID:str = obj["parameters"]
      pass

      """  output parameters  """  

class IsCorrectionInvoice_input:
   """ Required : 
   cpInvoiceNum
   """  
   def __init__(self, obj):
      self.cpInvoiceNum:str = obj["cpInvoiceNum"]
      """  Invoice Number  """  
      pass

class IsCorrectionInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opIsCorrectionInvoice:bool = obj["opIsCorrectionInvoice"]
      pass

      """  output parameters  """  

class MassGenerateBOEapInvDtl_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  Vendor Number  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  Invoice Number  """  
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      pass

class MassGenerateBOEapInvDtl_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      self.massGenErrorMsg:str = obj["parameters"]
      self.opWarning:str = obj["parameters"]
      pass

      """  output parameters  """  

class MatchLoggedInvoice_input:
   """ Required : 
   ds
   cGroupID
   confirmCheck
   skipInactiveVendors
   ds1
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GetLogAPInvTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      self.confirmCheck:bool = obj["confirmCheck"]
      self.skipInactiveVendors:bool = obj["skipInactiveVendors"]
      self.ds1:list[Erp_Tablesets_APInvoiceTableset] = obj["ds1"]
      pass

class MatchLoggedInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GetLogAPInvTableset] = obj["ds"]
      self.confirmMsg:str = obj["parameters"]
      self.ds1:list[Erp_Tablesets_APInvoiceTableset] = obj["ds1"]
      pass

      """  output parameters  """  

class OnChangeCorrTranDocTypeID_input:
   """ Required : 
   ipTranDocTypeID
   ipSystemTranID
   """  
   def __init__(self, obj):
      self.ipTranDocTypeID:str = obj["ipTranDocTypeID"]
      """  TranDocTypeID supplied  """  
      self.ipSystemTranID:str = obj["ipSystemTranID"]
      """  System TranDocTypeID supplied  """  
      pass

class OnChangeCorrTranDocTypeID_output:
   def __init__(self, obj):
      pass

class OnChangeCycleCode_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   ipCycleCode
   ds
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  The vendor number of the invoice  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  The invoice number.  """  
      self.ipCycleCode:str = obj["ipCycleCode"]
      """  Proposed cycle code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeCycleCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeDEAScheduleLineAmount_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   amortSeq
   srcField
   propValue
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.amortSeq:int = obj["amortSeq"]
      self.srcField:str = obj["srcField"]
      self.propValue:int = obj["propValue"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeDEAScheduleLineAmount_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeDEAScheduleLineFiscalPeriod_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   amortSeq
   srcField
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.amortSeq:int = obj["amortSeq"]
      self.srcField:str = obj["srcField"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeDEAScheduleLineFiscalPeriod_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineCommodityCode_input:
   """ Required : 
   newCommodityCode
   ds
   """  
   def __init__(self, obj):
      self.newCommodityCode:str = obj["newCommodityCode"]
      """  New Commodity Code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineCommodityCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineDEACode_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   deaCode
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.deaCode:str = obj["deaCode"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineDEACode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineDEAStartDate_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   startDate
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.startDate:str = obj["startDate"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineDEAStartDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineDefferedExp_input:
   """ Required : 
   vendorNum
   invoiceNum
   invoiceLine
   ipDefExp
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ipDefExp:bool = obj["ipDefExp"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineDefferedExp_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeLineInvoiceRef_input:
   """ Required : 
   NewInvoiceRef
   ds
   """  
   def __init__(self, obj):
      self.NewInvoiceRef:str = obj["NewInvoiceRef"]
      """  Proposed invoice reference.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeLineInvoiceRef_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opWarning:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeRecurring_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   ipRecurring
   ds
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  The vendor number of the invoice  """  
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  The invoice number.  """  
      self.ipRecurring:bool = obj["ipRecurring"]
      """  Proposed recurring flag  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeRecurring_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeTranDocTypeID_input:
   """ Required : 
   ipTranDocTypeID
   ds
   """  
   def __init__(self, obj):
      self.ipTranDocTypeID:str = obj["ipTranDocTypeID"]
      """  TranDocTypeID supplied  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeTranDocTypeID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeVendBankID_input:
   """ Required : 
   pcVendBankID
   ds
   """  
   def __init__(self, obj):
      self.pcVendBankID:str = obj["pcVendBankID"]
      """  Vendor Bank ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeVendBankID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofApplyDateEx_input:
   """ Required : 
   VendorNum
   InvoiceNum
   recalcAmts
   NewApplyDate
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.NewApplyDate:str = obj["NewApplyDate"]
      """  New Apply Date.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofApplyDateEx_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofApplyDateWithDateCheck_input:
   """ Required : 
   VendorNum
   InvoiceNum
   recalcAmts
   NewApplyDate
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.NewApplyDate:str = obj["NewApplyDate"]
      """  New Apply Date.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofApplyDateWithDateCheck_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.DateMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofApplyDate_input:
   """ Required : 
   VendorNum
   InvoiceNum
   recalcAmts
   NewApplyDate
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.recalcAmts:str = obj["recalcAmts"]
      """  Recalculate Amounts String.  """  
      self.NewApplyDate:str = obj["NewApplyDate"]
      """  New Apply Date.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofApplyDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofLineTaxRgn_input:
   """ Required : 
   iTaxRegionCode
   ds
   """  
   def __init__(self, obj):
      self.iTaxRegionCode:str = obj["iTaxRegionCode"]
      """  Proposed tax category.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofLineTaxRgn_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxPoint_input:
   """ Required : 
   VendorNum
   InvoiceNum
   newTaxPoint
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.newTaxPoint:str = obj["newTaxPoint"]
      """  New Tax Point.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxPoint_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTaxRateDate_input:
   """ Required : 
   VendorNum
   InvoiceNum
   newTaxDate
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.newTaxDate:str = obj["newTaxDate"]
      """  New Tax Date.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTaxRateDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnChangeofTransApplyDate_input:
   """ Required : 
   VendorNum
   InvoiceNum
   NewTransApplyDate
   ds
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  Vendor Number.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Invoice Number.  """  
      self.NewTransApplyDate:str = obj["NewTransApplyDate"]
      """  New Apply Date for Transferred Invoice.  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnChangeofTransApplyDate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnLCFlagOfLineMiscChargeChange_input:
   """ Required : 
   ipMiscCode
   ipLCFlag
   """  
   def __init__(self, obj):
      self.ipMiscCode:str = obj["ipMiscCode"]
      """  The Purchase Miscellaneous ID  """  
      self.ipLCFlag:bool = obj["ipLCFlag"]
      """  The Landed Cost Flag (true/false)  """  
      pass

class OnLCFlagOfLineMiscChargeChange_output:
   def __init__(self, obj):
      pass

class OnShipmentIDChange_input:
   """ Required : 
   ipShipmentID
   ds
   """  
   def __init__(self, obj):
      self.ipShipmentID:int = obj["ipShipmentID"]
      """  The Shipment ID (ContainerHeader.ContainerID)  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnShipmentIDChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnTHRefInvoiceNumChangeWithUnknownSupplier_input:
   """ Required : 
   apInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.apInvoiceNum:str = obj["apInvoiceNum"]
      """  Selected Invoice Number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnTHRefInvoiceNumChangeWithUnknownSupplier_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opMessage:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnTHRefInvoiceNumChange_input:
   """ Required : 
   apInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.apInvoiceNum:str = obj["apInvoiceNum"]
      """  Selected Invoice Number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnTHRefInvoiceNumChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class OnTHRefVendorIDChange_input:
   """ Required : 
   vendorID
   ds
   """  
   def __init__(self, obj):
      self.vendorID:str = obj["vendorID"]
      """  Selected Vendor ID  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class OnTHRefVendorIDChange_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PostGRNIClearingInvoices_input:
   """ Required : 
   GroupID
   InvoiceNum
   VendorNum
   tranDocType
   ds
   """  
   def __init__(self, obj):
      self.GroupID:str = obj["GroupID"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.VendorNum:int = obj["VendorNum"]
      self.tranDocType:str = obj["tranDocType"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class PostGRNIClearingInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.Result:str = obj["parameters"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PreInvoice_input:
   """ Required : 
   ds
   continueProcessingOnError
   recalculateByExtCost
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.recalculateByExtCost:bool = obj["recalculateByExtCost"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class PreInvoice_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class PreSetAllocationAmt_input:
   """ Required : 
   nCurrSwitch
   ds
   """  
   def __init__(self, obj):
      self.nCurrSwitch:bool = obj["nCurrSwitch"]
      """  Indicates if the currency is swithed to Base before Allocation  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class PreSetAllocationAmt_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class PreUpdate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class PreUpdate_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.requiresUserInput:bool = obj["requiresUserInput"]
      pass

      """  output parameters  """  

class RestoreAmortizationSchedulesOfGroup_input:
   """ Required : 
   groupID
   vendorNum
   invoiceNum
   invoiceLine
   ds
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      self.vendorNum:int = obj["vendorNum"]
      self.invoiceNum:str = obj["invoiceNum"]
      self.invoiceLine:int = obj["invoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class RestoreAmortizationSchedulesOfGroup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SelectUninvoicedLateCosts_input:
   """ Required : 
   ds
   vendorNum
   purPoint
   packSlip
   containerID
   invoiceNum
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      self.vendorNum:int = obj["vendorNum"]
      """  The APInvHed Vendor Number  """  
      self.purPoint:str = obj["purPoint"]
      """  The PurPoint of the current late cost  """  
      self.packSlip:str = obj["packSlip"]
      """  The PackSlip of the current late cost.  """  
      self.containerID:int = obj["containerID"]
      """  The ContainerID of the current late cost.  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  The current InvoiceNum.  """  
      pass

class SelectUninvoicedLateCosts_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APLateCostsTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SelectUninvoicedRcptLines_AdditionalActions_input:
   """ Required : 
   ds
   InVendorNum
   InPurPoint
   InPONum
   InPackSlip
   InDropShip
   InvoiceNum
   InGRNIClearing
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.InVendorNum:int = obj["InVendorNum"]
      self.InPurPoint:str = obj["InPurPoint"]
      self.InPONum:int = obj["InPONum"]
      self.InPackSlip:str = obj["InPackSlip"]
      self.InDropShip:bool = obj["InDropShip"]
      self.InvoiceNum:str = obj["InvoiceNum"]
      self.InGRNIClearing:bool = obj["InGRNIClearing"]
      pass

class SelectUninvoicedRcptLines_AdditionalActions_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SelectUninvoicedRcptLines_input:
   """ Required : 
   ds
   InVendorNum
   InPurPoint
   InPONum
   InPackSlip
   InDropShip
   InvoiceNum
   InGRNIClearing
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      self.InVendorNum:int = obj["InVendorNum"]
      """  The Vendor Number of the receipt the uninvoiced lines are assigned to.  """  
      self.InPurPoint:str = obj["InPurPoint"]
      """  The PurPoint of the receipt the uninvoiced lines are assigned to.  """  
      self.InPONum:int = obj["InPONum"]
      """  The PO Number of the receipt the uninvoiced lines are assigned to.  """  
      self.InPackSlip:str = obj["InPackSlip"]
      """  The Pack Slip of the receipt the uninvoiced lines are assigned to.  """  
      self.InDropShip:bool = obj["InDropShip"]
      """  The Drop Ship value.  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  Current InvoiceNum  """  
      self.InGRNIClearing:bool = obj["InGRNIClearing"]
      """  Current GRNIClearing flag  """  
      pass

class SelectUninvoicedRcptLines_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvReceiptBillingTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SetReadyToCalc_input:
   """ Required : 
   ipGroupID
   ipInvoiceNum
   ipVendorNum
   ipCalcAll
   ipCalledFromUI
   ds
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      self.ipVendorNum:int = obj["ipVendorNum"]
      self.ipCalcAll:bool = obj["ipCalcAll"]
      self.ipCalledFromUI:bool = obj["ipCalledFromUI"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class SetReadyToCalc_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class SubCDataBtnClicked_input:
   """ Required : 
   ipVendorNum
   ipInvoiceNum
   ipInvoiceLine
   ds
   """  
   def __init__(self, obj):
      self.ipVendorNum:int = obj["ipVendorNum"]
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      self.ipInvoiceLine:int = obj["ipInvoiceLine"]
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class SubCDataBtnClicked_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class TransferAPInvoices_input:
   """ Required : 
   TransferGroupID
   currentGroupID
   ds
   """  
   def __init__(self, obj):
      self.TransferGroupID:str = obj["TransferGroupID"]
      self.currentGroupID:str = obj["currentGroupID"]
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      pass

class TransferAPInvoices_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvHedListTableset] = obj["ds"]
      self.grpNotFound:str = obj["parameters"]
      pass

      """  output parameters  """  

class TransferInvoiceToGroup_input:
   """ Required : 
   TransferToGroupID
   XferInvVendorNum
   XferInvInvoiceNum
   XferApplyDate
   cGroupID
   """  
   def __init__(self, obj):
      self.TransferToGroupID:str = obj["TransferToGroupID"]
      """  The group id to transfer the invoice to  """  
      self.XferInvVendorNum:int = obj["XferInvVendorNum"]
      """  The vendor number on the invoice to transfer  """  
      self.XferInvInvoiceNum:str = obj["XferInvInvoiceNum"]
      """  The invoice number of the invoice to transfer  """  
      self.XferApplyDate:str = obj["XferApplyDate"]
      """  The apply date of the invoice to transfer  """  
      self.cGroupID:str = obj["cGroupID"]
      """  current APInvGrp GroupID  """  
      pass

class TransferInvoiceToGroup_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.grpTotalInvAmt:int = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      pass

      """  output parameters  """  

class UpdAPInvoiceMatched_input:
   """ Required : 
   txtGroup
   intVendorNum
   txtInvoiceNum
   ds
   """  
   def __init__(self, obj):
      self.txtGroup:str = obj["txtGroup"]
      """  Group Id  """  
      self.intVendorNum:int = obj["intVendorNum"]
      """  Vendor Num  """  
      self.txtInvoiceNum:str = obj["txtInvoiceNum"]
      """  Invoice Num  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class UpdAPInvoiceMatched_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdGetLogAPInv_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_GetLogAPInvTableset] = obj["ds"]
      pass

class UpdGetLogAPInv_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_GetLogAPInvTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UpdateExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class UpdateMasterExt_input:
   """ Required : 
   ds
   continueProcessingOnError
   recalculateByExtCost
   rollbackParentOnChildError
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.continueProcessingOnError:bool = obj["continueProcessingOnError"]
      self.recalculateByExtCost:bool = obj["recalculateByExtCost"]
      self.rollbackParentOnChildError:bool = obj["rollbackParentOnChildError"]
      pass

class UpdateMasterExt_output:
   def __init__(self, obj):
      self.returnObj:list[Ice_BOUpdErrorTableset] = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_UpdExtAPInvoiceTableset] = obj["ds"]
      self.errorsOccurred:bool = obj["errorsOccurred"]
      pass

      """  output parameters  """  

class UpdateMaster_input:
   """ Required : 
   ds
   cGroupID
   cTableName
   runChkCPay
   runChkBankRef
   runChkRevChrg
   suppressUserPrompts
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.cGroupID:str = obj["cGroupID"]
      """  current GroupID on Invoice  """  
      self.cTableName:str = obj["cTableName"]
      """  Indicates the tableName that triggered the update  """  
      self.runChkCPay:bool = obj["runChkCPay"]
      """  Indicates whether the chkCPayCore method should be called  """  
      self.runChkBankRef:bool = obj["runChkBankRef"]
      """  Indicates whether the chkBankRefCore method should be called  """  
      self.runChkRevChrg:bool = obj["runChkRevChrg"]
      """  Indicates whether the chkRevChrgCore method should be called  """  
      self.suppressUserPrompts:bool = obj["suppressUserPrompts"]
      """  Indicates if user prompts should be suppressed  """  
      pass

class UpdateMaster_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.grpTotalInvAmt:int = obj["parameters"]
      self.requiresUserInput:bool = obj["requiresUserInput"]
      self.opMessage:str = obj["parameters"]
      self.opMsgChkBankRef:str = obj["parameters"]
      self.opChkRevMsg:str = obj["parameters"]
      self.lEnableGenLegalNum:bool = obj["lEnableGenLegalNum"]
      self.lUpdateRan:bool = obj["lUpdateRan"]
      self.opDUAMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class UpdateTaxAdjustment_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class UpdateTaxAdjustment_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class Update_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class Update_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class Update_ttAPInvHed_input:
   """ Required : 
   vendorNum
   invoiceNum
   ds
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  VendorNum  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  invoice number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class Update_ttAPInvHed_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class UsePurchaseCode_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.UsePurchaseCode:bool = obj["UsePurchaseCode"]
      pass

      """  output parameters  """  

class ValidateAllDeferredLinesAreScheduled_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      pass

class ValidateAllDeferredLinesAreScheduled_output:
   def __init__(self, obj):
      pass

class ValidateAllDeferredLinesHaveGLAccount_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      pass

class ValidateAllDeferredLinesHaveGLAccount_output:
   def __init__(self, obj):
      pass

class ValidateBankRefs_input:
   """ Required : 
   ipGroupID
   """  
   def __init__(self, obj):
      self.ipGroupID:str = obj["ipGroupID"]
      """  Group ID  """  
      pass

class ValidateBankRefs_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.cErrorMsg:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateCreateCancellationInvoice_input:
   """ Required : 
   VendorNum
   InvoiceNum
   """  
   def __init__(self, obj):
      self.VendorNum:int = obj["VendorNum"]
      """  The proposed VendorNum  """  
      self.InvoiceNum:str = obj["InvoiceNum"]
      """  The proposed InvoiceNum  """  
      pass

class ValidateCreateCancellationInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.OpError:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateGNRIClearingCreation_input:
   """ Required : 
   groupID
   """  
   def __init__(self, obj):
      self.groupID:str = obj["groupID"]
      pass

class ValidateGNRIClearingCreation_output:
   def __init__(self, obj):
      pass

class ValidateGroupID_input:
   """ Required : 
   sGroupID
   """  
   def __init__(self, obj):
      self.sGroupID:str = obj["sGroupID"]
      pass

class ValidateGroupID_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class ValidateInvoiceID_input:
   """ Required : 
   txtVendorID
   txtInvoiceNum
   """  
   def __init__(self, obj):
      self.txtVendorID:str = obj["txtVendorID"]
      """  Vendor ID  """  
      self.txtInvoiceNum:str = obj["txtInvoiceNum"]
      """  Invoice Num  """  
      pass

class ValidateInvoiceID_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.intVendorNum:int = obj["parameters"]
      self.logAPInvFound:bool = obj["logAPInvFound"]
      pass

      """  output parameters  """  

class ValidateLateCostBeforeAllocate_input:
   """ Required : 
   ds
   """  
   def __init__(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      pass

class ValidateLateCostBeforeAllocate_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_LateCostLinesTableset] = obj["ds"]
      self.warningMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateNotPostedInvoices_input:
   """ Required : 
   ipVendorList
   """  
   def __init__(self, obj):
      self.ipVendorList:str = obj["ipVendorList"]
      pass

class ValidateNotPostedInvoices_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

class ValidateOriginalInvoice_input:
   """ Required : 
   ipInvoiceNum
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      pass

class ValidateOriginalInvoice_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.opVendorNum:int = obj["parameters"]
      self.opMultipleInvcsFound:bool = obj["opMultipleInvcsFound"]
      pass

      """  output parameters  """  

class ValidatePLInvoiceReference_input:
   """ Required : 
   intVendorNum
   txtInvoiceNum
   txtPLInvoiceReference
   """  
   def __init__(self, obj):
      self.intVendorNum:int = obj["intVendorNum"]
      self.txtInvoiceNum:str = obj["txtInvoiceNum"]
      self.txtPLInvoiceReference:str = obj["txtPLInvoiceReference"]
      pass

class ValidatePLInvoiceReference_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.isLogAPInvFound:bool = obj["isLogAPInvFound"]
      self.logAPInvNum:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateRcvMiscBeforeDeleteLateCost_input:
   """ Required : 
   vendorNum
   invoiceNum
   mscNum
   miscSeq
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  Vendor number of the Invoice which late cost is intented to be deleted  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  Invoice number of the Invoice which late cost is intented to be deleted  """  
      self.mscNum:int = obj["mscNum"]
      """  Misc. charge number of the Invoice which late cost is intented to be deleted  """  
      self.miscSeq:int = obj["miscSeq"]
      """  Misc. charge sequence of the charge which late cost is intented to be deleted  """  
      pass

class ValidateRcvMiscBeforeDeleteLateCost_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.warningMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateRcvMiscSumBeforeDeleteLateCost_input:
   """ Required : 
   vendorNum
   invoiceNum
   mscNum
   """  
   def __init__(self, obj):
      self.vendorNum:int = obj["vendorNum"]
      """  Vendor number of the Invoice which late cost is intented to be deleted  """  
      self.invoiceNum:str = obj["invoiceNum"]
      """  Invoice number of the Invoice which late cost is intented to be deleted  """  
      self.mscNum:int = obj["mscNum"]
      """  Misc. charge number of the Invoice which late cost is intented to be deleted  """  
      pass

class ValidateRcvMiscSumBeforeDeleteLateCost_output:
   def __init__(self, obj):
      self.returnObj:bool = obj["returnObj"]
      pass

   def parameters(self, obj):
      self.warningMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateTaxRateCodes_input:
   """ Required : 
   proposedRateCode
   ds
   """  
   def __init__(self, obj):
      self.proposedRateCode:str = obj["proposedRateCode"]
      """  The proposed rate code  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ValidateTaxRateCodes_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

      """  output parameters  """  

class ValidateUnreceivedLineForPOBeforeChangePOLine_input:
   """ Required : 
   ProposedPOLine
   ds
   """  
   def __init__(self, obj):
      self.ProposedPOLine:int = obj["ProposedPOLine"]
      """  The proposed po line  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ValidateUnreceivedLineForPOBeforeChangePOLine_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.OpMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class ValidateWBSPhase_input:
   """ Required : 
   PropPhase
   ds
   """  
   def __init__(self, obj):
      self.PropPhase:str = obj["PropPhase"]
      """  The proposed phase number  """  
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      pass

class ValidateWBSPhase_output:
   def __init__(self, obj):
      pass

   def parameters(self, obj):
      self.ds:list[Erp_Tablesets_APInvoiceTableset] = obj["ds"]
      self.OpMessage:str = obj["parameters"]
      pass

      """  output parameters  """  

class VoidLegalNumber_input:
   """ Required : 
   ipInvoiceNum
   ipVoidedReason
   ipVendorNum
   """  
   def __init__(self, obj):
      self.ipInvoiceNum:str = obj["ipInvoiceNum"]
      """  Invoice number  """  
      self.ipVoidedReason:str = obj["ipVoidedReason"]
      """  Reason for the void  """  
      self.ipVendorNum:int = obj["ipVendorNum"]
      """  Vendor Number  """  
      pass

class VoidLegalNumber_output:
   def __init__(self, obj):
      self.returnObj:list[Erp_Tablesets_APInvoiceTableset] = obj["returnObj"]
      pass

