import * as configEpicorSchemas from "./configEpicorSchemas"


// Title: Erp.BO.ProjectSvc
// Version: v1



//////////////////////////////////////////////////////////////////////////
// OData methods:
//////////////////////////////////////////////////////////////////////////

   /**  
   Summary: Get service document
   Description: Get service document for the service
   OperationID: GetServiceDocument
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => application/json
   */  
export function getServiceDocument(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<JSON>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as JSON)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Get metadata document
   Description: Get service ODATA metadata in XML format
   OperationID: GetMetadata
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: Returns metadata document => content
   */  
export function get_metadata(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/$metadata", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get Projects items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_Projects
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectRow
   */  
export function get_Projects(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_Projects
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_Projects(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the Project item
   Description: Calls GetByID to retrieve the Project item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_Project
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectRow
   */  
export function get_Projects_Company_ProjectID(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update Project for the service
   Description: Calls UpdateExt to update Project. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_Project
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_Projects_Company_ProjectID(Company:string, ProjectID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete Project item
   Description: Call UpdateExt to delete Project item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_Project
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_Projects_Company_ProjectID(Company:string, ProjectID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get FieldServiceCalls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_FieldServiceCalls1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.FieldServiceCallsRow
   */  
export function get_Projects_Company_ProjectID_FieldServiceCalls(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceCallsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/FieldServiceCalls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceCallsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the FieldServiceCall item
   Description: Calls GetByID to retrieve the FieldServiceCall item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_FieldServiceCall1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param CallNum Desc: CallNum   Required: True
      @param CallLine Desc: CallLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.FieldServiceCallsRow
   */  
export function get_Projects_Company_ProjectID_FieldServiceCalls_Company_CallNum_CallLine(Company:string, ProjectID:string, CallNum:string, CallLine:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_FieldServiceCallsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/FieldServiceCalls(" + Company + "," + CallNum + "," + CallLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_FieldServiceCallsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get FieldServiceContracts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_FieldServiceContracts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.FieldServiceContractsRow
   */  
export function get_Projects_Company_ProjectID_FieldServiceContracts(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceContractsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/FieldServiceContracts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceContractsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the FieldServiceContract item
   Description: Calls GetByID to retrieve the FieldServiceContract item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_FieldServiceContract1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param ContractNum Desc: ContractNum   Required: True
      @param ContractLine Desc: ContractLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.FieldServiceContractsRow
   */  
export function get_Projects_Company_ProjectID_FieldServiceContracts_Company_ContractNum_ContractLine(Company:string, ProjectID:string, ContractNum:string, ContractLine:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_FieldServiceContractsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/FieldServiceContracts(" + Company + "," + ContractNum + "," + ContractLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_FieldServiceContractsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get EntityGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_EntityGLCs1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   */  
export function get_Projects_Company_ProjectID_EntityGLCs(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/EntityGLCs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   */  
export function get_Projects_Company_ProjectID_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, ProjectID:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_EntityGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_EntityGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBWrkMeasuredHeads items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBWrkMeasuredHeads1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBWrkMeasuredHeadRow
   */  
export function get_Projects_Company_ProjectID_PBWrkMeasuredHeads(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBWrkMeasuredHeads", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBWrkMeasuredHead item
   Description: Calls GetByID to retrieve the PBWrkMeasuredHead item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBWrkMeasuredHead1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredHeadRow
   */  
export function get_Projects_Company_ProjectID_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID(Company:string, ProjectID:string, MeasuredWorkID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBWrkMeasuredHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBWrkMeasuredHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectCsts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectCsts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectCstRow
   */  
export function get_Projects_Company_ProjectID_ProjectCsts(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectCsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectCst item
   Description: Calls GetByID to retrieve the ProjectCst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectCst1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectCstRow
   */  
export function get_Projects_Company_ProjectID_ProjectCsts_Company_ProjectID(Company:string, ProjectID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectCstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectCsts(" + Company + "," + ProjectID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectCstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectJobs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectJobs1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectJobRow
   */  
export function get_Projects_Company_ProjectID_ProjectJobs(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectJobRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectJobs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectJobRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectJob item
   Description: Calls GetByID to retrieve the ProjectJob item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectJob1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectJobRow
   */  
export function get_Projects_Company_ProjectID_ProjectJobs_Company_JobNum(Company:string, ProjectID:string, JobNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectJobRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectJobs(" + Company + "," + JobNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectJobRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectMilestones items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectMilestones1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectMilestoneRow
   */  
export function get_Projects_Company_ProjectID_ProjectMilestones(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectMilestoneRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectMilestones", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectMilestoneRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectMilestone item
   Description: Calls GetByID to retrieve the ProjectMilestone item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectMilestone1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectMilestoneRow
   */  
export function get_Projects_Company_ProjectID_ProjectMilestones_Company_ProjectID_MilestoneID(Company:string, ProjectID:string, MilestoneID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectMilestoneRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectMilestoneRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectOrderLines items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectOrderLines1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectOrderLineRow
   */  
export function get_Projects_Company_ProjectID_ProjectOrderLines(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectOrderLines", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectOrderLine item
   Description: Calls GetByID to retrieve the ProjectOrderLine item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectOrderLine1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectOrderLineRow
   */  
export function get_Projects_Company_ProjectID_ProjectOrderLines_Company_OrderNum_OrderLine(Company:string, ProjectID:string, OrderNum:string, OrderLine:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectOrderLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectOrderLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBdnSets items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBdnSets1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBdnSetsRow
   */  
export function get_Projects_Company_ProjectID_PBdnSets(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBdnSetsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBdnSets", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBdnSetsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBdnSet item
   Description: Calls GetByID to retrieve the PBdnSet item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBdnSet1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BdnSetID Desc: BdnSetID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBdnSetsRow
   */  
export function get_Projects_Company_ProjectID_PBdnSets_Company_ProjectID_BdnSetID(Company:string, ProjectID:string, BdnSetID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBdnSetsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBdnSets(" + Company + "," + ProjectID + "," + BdnSetID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBdnSetsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBEmpCeilings items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBEmpCeilings1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBEmpCeilingRow
   */  
export function get_Projects_Company_ProjectID_PBEmpCeilings(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBEmpCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBEmpCeilings", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBEmpCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBEmpCeiling item
   Description: Calls GetByID to retrieve the PBEmpCeiling item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBEmpCeiling1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param EmpID Desc: EmpID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBEmpCeilingRow
   */  
export function get_Projects_Company_ProjectID_PBEmpCeilings_Company_ProjectID_EmpID(Company:string, ProjectID:string, EmpID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBEmpCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBEmpCeilings(" + Company + "," + ProjectID + "," + EmpID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBEmpCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBillSches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBillSches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBillSchRow
   */  
export function get_Projects_Company_ProjectID_PBillSches(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBillSchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBillSches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBillSchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBillSch item
   Description: Calls GetByID to retrieve the PBillSch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBillSch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BillSchedID Desc: BillSchedID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBillSchRow
   */  
export function get_Projects_Company_ProjectID_PBillSches_Company_ProjectID_BillSchedID(Company:string, ProjectID:string, BillSchedID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBillSchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBillSches(" + Company + "," + ProjectID + "," + BillSchedID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBillSchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBRoleRts items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBRoleRts1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBRoleRtRow
   */  
export function get_Projects_Company_ProjectID_PBRoleRts(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBRoleRtRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBRoleRts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBRoleRtRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBRoleRt item
   Description: Calls GetByID to retrieve the PBRoleRt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBRoleRt1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param RoleCd Desc: RoleCd   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBRoleRtRow
   */  
export function get_Projects_Company_ProjectID_PBRoleRts_Company_ProjectID_RoleCd_Seq(Company:string, ProjectID:string, RoleCd:string, Seq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBRoleRtRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBRoleRts(" + Company + "," + ProjectID + "," + RoleCd + "," + Seq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBRoleRtRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBSchWrks items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBSchWrks1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBSchWrkRow
   */  
export function get_Projects_Company_ProjectID_PBSchWrks(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSchWrkRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBSchWrks", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSchWrkRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBSchWrk item
   Description: Calls GetByID to retrieve the PBSchWrk item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBSchWrk1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param SchWrkID Desc: SchWrkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBSchWrkRow
   */  
export function get_Projects_Company_ProjectID_PBSchWrks_Company_ProjectID_SchWrkID(Company:string, ProjectID:string, SchWrkID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBSchWrkRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBSchWrks(" + Company + "," + ProjectID + "," + SchWrkID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBSchWrkRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBSupCeilings items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBSupCeilings1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBSupCeilingRow
   */  
export function get_Projects_Company_ProjectID_PBSupCeilings(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSupCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBSupCeilings", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSupCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBSupCeiling item
   Description: Calls GetByID to retrieve the PBSupCeiling item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBSupCeiling1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VendorNum Desc: VendorNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBSupCeilingRow
   */  
export function get_Projects_Company_ProjectID_PBSupCeilings_Company_ProjectID_VendorNum(Company:string, ProjectID:string, VendorNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBSupCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PBSupCeilings(" + Company + "," + ProjectID + "," + VendorNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBSupCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PConVars items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PConVars1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PConVarRow
   */  
export function get_Projects_Company_ProjectID_PConVars(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PConVarRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PConVars", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PConVarRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PConVar item
   Description: Calls GetByID to retrieve the PConVar item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PConVar1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VarRefID Desc: VarRefID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PConVarRow
   */  
export function get_Projects_Company_ProjectID_PConVars_Company_ProjectID_VarRefID(Company:string, ProjectID:string, VarRefID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PConVarRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/PConVars(" + Company + "," + ProjectID + "," + VarRefID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PConVarRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectPOes items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectPOes1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectPORow
   */  
export function get_Projects_Company_ProjectID_ProjectPOes(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPORow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectPOes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPORow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectPO item
   Description: Calls GetByID to retrieve the ProjectPO item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectPO1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PONum Desc: PONum   Required: True
      @param POLine Desc: POLine   Required: True
      @param PORelNum Desc: PORelNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectPORow
   */  
export function get_Projects_Company_ProjectID_ProjectPOes_Company_ProjectID_PONum_POLine_PORelNum(Company:string, ProjectID:string, PONum:string, POLine:string, PORelNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectPORow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectPOes(" + Company + "," + ProjectID + "," + PONum + "," + POLine + "," + PORelNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectPORow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectQuots items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectQuots1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectQuotRow
   */  
export function get_Projects_Company_ProjectID_ProjectQuots(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectQuotRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectQuots", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectQuotRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectQuot item
   Description: Calls GetByID to retrieve the ProjectQuot item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectQuot1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param QuoteNum Desc: QuoteNum   Required: True
      @param QuoteLine Desc: QuoteLine   Required: True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectQuotRow
   */  
export function get_Projects_Company_ProjectID_ProjectQuots_Company_QuoteNum_QuoteLine_ProjectID_PhaseID(Company:string, ProjectID:string, QuoteNum:string, QuoteLine:string, PhaseID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectQuotRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectQuots(" + Company + "," + QuoteNum + "," + QuoteLine + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectQuotRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectTasks items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectTasks1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectTaskRow
   */  
export function get_Projects_Company_ProjectID_ProjectTasks(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectTasks", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectTask item
   Description: Calls GetByID to retrieve the ProjectTask item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectTask1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectTaskRow
   */  
export function get_Projects_Company_ProjectID_ProjectTasks_Company_ProjectID_TaskID(Company:string, ProjectID:string, TaskID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectTaskRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectTaskRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjPhases items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjPhases1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseRow
   */  
export function get_Projects_Company_ProjectID_ProjPhases(Company:string, ProjectID:string, select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjPhases", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhase item
   Description: Calls GetByID to retrieve the ProjPhase item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhase1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseRow
   */  
export function get_Projects_Company_ProjectID_ProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectAttchRow
   */  
export function get_Projects_Company_ProjectID_ProjectAttches(Company:string, ProjectID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectAttch item
   Description: Calls GetByID to retrieve the ProjectAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectAttchRow
   */  
export function get_Projects_Company_ProjectID_ProjectAttches_Company_ProjectID_DrawingSeq(Company:string, ProjectID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Projects(" + Company + "," + ProjectID + ")/ProjectAttches(" + Company + "," + ProjectID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get FieldServiceCalls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_FieldServiceCalls
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.FieldServiceCallsRow
   */  
export function get_FieldServiceCalls(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceCallsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceCalls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceCallsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_FieldServiceCalls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.FieldServiceCallsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.FieldServiceCallsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_FieldServiceCalls(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceCalls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the FieldServiceCall item
   Description: Calls GetByID to retrieve the FieldServiceCall item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_FieldServiceCall
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param CallNum Desc: CallNum   Required: True
      @param CallLine Desc: CallLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.FieldServiceCallsRow
   */  
export function get_FieldServiceCalls_Company_CallNum_CallLine(Company:string, CallNum:string, CallLine:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_FieldServiceCallsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceCalls(" + Company + "," + CallNum + "," + CallLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_FieldServiceCallsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update FieldServiceCall for the service
   Description: Calls UpdateExt to update FieldServiceCall. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_FieldServiceCall
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param CallNum Desc: CallNum   Required: True
      @param CallLine Desc: CallLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.FieldServiceCallsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_FieldServiceCalls_Company_CallNum_CallLine(Company:string, CallNum:string, CallLine:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceCalls(" + Company + "," + CallNum + "," + CallLine + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete FieldServiceCall item
   Description: Call UpdateExt to delete FieldServiceCall item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_FieldServiceCall
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param CallNum Desc: CallNum   Required: True
      @param CallLine Desc: CallLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_FieldServiceCalls_Company_CallNum_CallLine(Company:string, CallNum:string, CallLine:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceCalls(" + Company + "," + CallNum + "," + CallLine + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get FieldServiceContracts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_FieldServiceContracts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.FieldServiceContractsRow
   */  
export function get_FieldServiceContracts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceContractsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceContracts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceContractsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_FieldServiceContracts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.FieldServiceContractsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.FieldServiceContractsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_FieldServiceContracts(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceContracts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the FieldServiceContract item
   Description: Calls GetByID to retrieve the FieldServiceContract item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_FieldServiceContract
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ContractNum Desc: ContractNum   Required: True
      @param ContractLine Desc: ContractLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.FieldServiceContractsRow
   */  
export function get_FieldServiceContracts_Company_ContractNum_ContractLine(Company:string, ContractNum:string, ContractLine:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_FieldServiceContractsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceContracts(" + Company + "," + ContractNum + "," + ContractLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_FieldServiceContractsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update FieldServiceContract for the service
   Description: Calls UpdateExt to update FieldServiceContract. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_FieldServiceContract
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ContractNum Desc: ContractNum   Required: True
      @param ContractLine Desc: ContractLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.FieldServiceContractsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_FieldServiceContracts_Company_ContractNum_ContractLine(Company:string, ContractNum:string, ContractLine:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceContracts(" + Company + "," + ContractNum + "," + ContractLine + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete FieldServiceContract item
   Description: Call UpdateExt to delete FieldServiceContract item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_FieldServiceContract
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ContractNum Desc: ContractNum   Required: True
      @param ContractLine Desc: ContractLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_FieldServiceContracts_Company_ContractNum_ContractLine(Company:string, ContractNum:string, ContractLine:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/FieldServiceContracts(" + Company + "," + ContractNum + "," + ContractLine + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get EntityGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_EntityGLCs
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.EntityGLCRow
   */  
export function get_EntityGLCs(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/EntityGLCs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_EntityGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_EntityGLCs(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/EntityGLCs", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the EntityGLC item
   Description: Calls GetByID to retrieve the EntityGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_EntityGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   */  
export function get_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_EntityGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_EntityGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update EntityGLC for the service
   Description: Calls UpdateExt to update EntityGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_EntityGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.EntityGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete EntityGLC item
   Description: Call UpdateExt to delete EntityGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_EntityGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_EntityGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/EntityGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBWrkMeasuredHeads items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBWrkMeasuredHeads
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBWrkMeasuredHeadRow
   */  
export function get_PBWrkMeasuredHeads(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBWrkMeasuredHeads
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredHeadRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredHeadRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBWrkMeasuredHeads(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBWrkMeasuredHead item
   Description: Calls GetByID to retrieve the PBWrkMeasuredHead item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBWrkMeasuredHead
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredHeadRow
   */  
export function get_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID(Company:string, ProjectID:string, MeasuredWorkID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBWrkMeasuredHeadRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBWrkMeasuredHeadRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBWrkMeasuredHead for the service
   Description: Calls UpdateExt to update PBWrkMeasuredHead. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBWrkMeasuredHead
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredHeadRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID(Company:string, ProjectID:string, MeasuredWorkID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBWrkMeasuredHead item
   Description: Call UpdateExt to delete PBWrkMeasuredHead item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBWrkMeasuredHead
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID(Company:string, ProjectID:string, MeasuredWorkID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PBWrkMeasuredDtls items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PBWrkMeasuredDtls1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBWrkMeasuredDtlRow
   */  
export function get_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID_PBWrkMeasuredDtls(Company:string, ProjectID:string, MeasuredWorkID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")/PBWrkMeasuredDtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBWrkMeasuredDtl item
   Description: Calls GetByID to retrieve the PBWrkMeasuredDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBWrkMeasuredDtl1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param DtlSeq Desc: DtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredDtlRow
   */  
export function get_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID_PBWrkMeasuredDtls_Company_ProjectID_MeasuredWorkID_DtlSeq(Company:string, ProjectID:string, MeasuredWorkID:string, DtlSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBWrkMeasuredDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")/PBWrkMeasuredDtls(" + Company + "," + ProjectID + "," + MeasuredWorkID + "," + DtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBWrkMeasuredDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get WBSProjPhases items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_WBSProjPhases1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.WBSProjPhaseRow
   */  
export function get_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID_WBSProjPhases(Company:string, ProjectID:string, MeasuredWorkID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_WBSProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")/WBSProjPhases", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_WBSProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the WBSProjPhase item
   Description: Calls GetByID to retrieve the WBSProjPhase item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_WBSProjPhase1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.WBSProjPhaseRow
   */  
export function get_PBWrkMeasuredHeads_Company_ProjectID_MeasuredWorkID_WBSProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, MeasuredWorkID:string, PhaseID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_WBSProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredHeads(" + Company + "," + ProjectID + "," + MeasuredWorkID + ")/WBSProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_WBSProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBWrkMeasuredDtls items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBWrkMeasuredDtls
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBWrkMeasuredDtlRow
   */  
export function get_PBWrkMeasuredDtls(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredDtls", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBWrkMeasuredDtls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredDtlRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredDtlRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBWrkMeasuredDtls(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredDtls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBWrkMeasuredDtl item
   Description: Calls GetByID to retrieve the PBWrkMeasuredDtl item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBWrkMeasuredDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param DtlSeq Desc: DtlSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredDtlRow
   */  
export function get_PBWrkMeasuredDtls_Company_ProjectID_MeasuredWorkID_DtlSeq(Company:string, ProjectID:string, MeasuredWorkID:string, DtlSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBWrkMeasuredDtlRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredDtls(" + Company + "," + ProjectID + "," + MeasuredWorkID + "," + DtlSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBWrkMeasuredDtlRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBWrkMeasuredDtl for the service
   Description: Calls UpdateExt to update PBWrkMeasuredDtl. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBWrkMeasuredDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param DtlSeq Desc: DtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBWrkMeasuredDtlRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBWrkMeasuredDtls_Company_ProjectID_MeasuredWorkID_DtlSeq(Company:string, ProjectID:string, MeasuredWorkID:string, DtlSeq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredDtls(" + Company + "," + ProjectID + "," + MeasuredWorkID + "," + DtlSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBWrkMeasuredDtl item
   Description: Call UpdateExt to delete PBWrkMeasuredDtl item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBWrkMeasuredDtl
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MeasuredWorkID Desc: MeasuredWorkID   Required: True   Allow empty value : True
      @param DtlSeq Desc: DtlSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBWrkMeasuredDtls_Company_ProjectID_MeasuredWorkID_DtlSeq(Company:string, ProjectID:string, MeasuredWorkID:string, DtlSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBWrkMeasuredDtls(" + Company + "," + ProjectID + "," + MeasuredWorkID + "," + DtlSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get WBSProjPhases items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_WBSProjPhases
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.WBSProjPhaseRow
   */  
export function get_WBSProjPhases(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_WBSProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/WBSProjPhases", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_WBSProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_WBSProjPhases
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.WBSProjPhaseRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.WBSProjPhaseRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_WBSProjPhases(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/WBSProjPhases", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the WBSProjPhase item
   Description: Calls GetByID to retrieve the WBSProjPhase item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_WBSProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.WBSProjPhaseRow
   */  
export function get_WBSProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_WBSProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/WBSProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_WBSProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update WBSProjPhase for the service
   Description: Calls UpdateExt to update WBSProjPhase. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_WBSProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.WBSProjPhaseRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_WBSProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/WBSProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete WBSProjPhase item
   Description: Call UpdateExt to delete WBSProjPhase item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_WBSProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_WBSProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/WBSProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectCsts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectCsts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectCstRow
   */  
export function get_ProjectCsts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCsts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectCsts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectCstRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectCstRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectCsts(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCsts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectCst item
   Description: Calls GetByID to retrieve the ProjectCst item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectCst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectCstRow
   */  
export function get_ProjectCsts_Company_ProjectID(Company:string, ProjectID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectCstRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCsts(" + Company + "," + ProjectID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectCstRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectCst for the service
   Description: Calls UpdateExt to update ProjectCst. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectCst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectCstRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectCsts_Company_ProjectID(Company:string, ProjectID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCsts(" + Company + "," + ProjectID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectCst item
   Description: Call UpdateExt to delete ProjectCst item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectCst
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectCsts_Company_ProjectID(Company:string, ProjectID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCsts(" + Company + "," + ProjectID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectJobs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectJobs
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectJobRow
   */  
export function get_ProjectJobs(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectJobRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectJobs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectJobRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectJobs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectJobRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectJobRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectJobs(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectJobs", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectJob item
   Description: Calls GetByID to retrieve the ProjectJob item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectJob
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectJobRow
   */  
export function get_ProjectJobs_Company_JobNum(Company:string, JobNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectJobRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectJobs(" + Company + "," + JobNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectJobRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectJob for the service
   Description: Calls UpdateExt to update ProjectJob. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectJob
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectJobRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectJobs_Company_JobNum(Company:string, JobNum:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectJobs(" + Company + "," + JobNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectJob item
   Description: Call UpdateExt to delete ProjectJob item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectJob
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param JobNum Desc: JobNum   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectJobs_Company_JobNum(Company:string, JobNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectJobs(" + Company + "," + JobNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectMilestones items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectMilestones
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectMilestoneRow
   */  
export function get_ProjectMilestones(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectMilestoneRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectMilestoneRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectMilestones
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectMilestoneRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectMilestoneRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectMilestones(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectMilestone item
   Description: Calls GetByID to retrieve the ProjectMilestone item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectMilestone
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectMilestoneRow
   */  
export function get_ProjectMilestones_Company_ProjectID_MilestoneID(Company:string, ProjectID:string, MilestoneID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectMilestoneRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectMilestoneRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectMilestone for the service
   Description: Calls UpdateExt to update ProjectMilestone. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectMilestone
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectMilestoneRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectMilestones_Company_ProjectID_MilestoneID(Company:string, ProjectID:string, MilestoneID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectMilestone item
   Description: Call UpdateExt to delete ProjectMilestone item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectMilestone
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectMilestones_Company_ProjectID_MilestoneID(Company:string, ProjectID:string, MilestoneID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectCriterias items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectCriterias1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectCriteriaRow
   */  
export function get_ProjectMilestones_Company_ProjectID_MilestoneID_ProjectCriterias(Company:string, ProjectID:string, MilestoneID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCriteriaRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")/ProjectCriterias", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCriteriaRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectCriteria item
   Description: Calls GetByID to retrieve the ProjectCriteria item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectCriteria1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param CriteriaSeq Desc: CriteriaSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectCriteriaRow
   */  
export function get_ProjectMilestones_Company_ProjectID_MilestoneID_ProjectCriterias_Company_ProjectID_MilestoneID_CriteriaSeq(Company:string, ProjectID:string, MilestoneID:string, CriteriaSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectCriteriaRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectMilestones(" + Company + "," + ProjectID + "," + MilestoneID + ")/ProjectCriterias(" + Company + "," + ProjectID + "," + MilestoneID + "," + CriteriaSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectCriteriaRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectCriterias items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectCriterias
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectCriteriaRow
   */  
export function get_ProjectCriterias(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCriteriaRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCriterias", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCriteriaRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectCriterias
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectCriteriaRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectCriteriaRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectCriterias(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCriterias", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectCriteria item
   Description: Calls GetByID to retrieve the ProjectCriteria item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectCriteria
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param CriteriaSeq Desc: CriteriaSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectCriteriaRow
   */  
export function get_ProjectCriterias_Company_ProjectID_MilestoneID_CriteriaSeq(Company:string, ProjectID:string, MilestoneID:string, CriteriaSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectCriteriaRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCriterias(" + Company + "," + ProjectID + "," + MilestoneID + "," + CriteriaSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectCriteriaRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectCriteria for the service
   Description: Calls UpdateExt to update ProjectCriteria. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectCriteria
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param CriteriaSeq Desc: CriteriaSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectCriteriaRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectCriterias_Company_ProjectID_MilestoneID_CriteriaSeq(Company:string, ProjectID:string, MilestoneID:string, CriteriaSeq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCriterias(" + Company + "," + ProjectID + "," + MilestoneID + "," + CriteriaSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectCriteria item
   Description: Call UpdateExt to delete ProjectCriteria item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectCriteria
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param MilestoneID Desc: MilestoneID   Required: True   Allow empty value : True
      @param CriteriaSeq Desc: CriteriaSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectCriterias_Company_ProjectID_MilestoneID_CriteriaSeq(Company:string, ProjectID:string, MilestoneID:string, CriteriaSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectCriterias(" + Company + "," + ProjectID + "," + MilestoneID + "," + CriteriaSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectOrderLines items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectOrderLines
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectOrderLineRow
   */  
export function get_ProjectOrderLines(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectOrderLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectOrderLineRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectOrderLineRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectOrderLines(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectOrderLine item
   Description: Calls GetByID to retrieve the ProjectOrderLine item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectOrderLine
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectOrderLineRow
   */  
export function get_ProjectOrderLines_Company_OrderNum_OrderLine(Company:string, OrderNum:string, OrderLine:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectOrderLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectOrderLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectOrderLine for the service
   Description: Calls UpdateExt to update ProjectOrderLine. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectOrderLine
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectOrderLineRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectOrderLines_Company_OrderNum_OrderLine(Company:string, OrderNum:string, OrderLine:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectOrderLine item
   Description: Call UpdateExt to delete ProjectOrderLine item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectOrderLine
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectOrderLines_Company_OrderNum_OrderLine(Company:string, OrderNum:string, OrderLine:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectOrderRels items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectOrderRels1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectOrderRelRow
   */  
export function get_ProjectOrderLines_Company_OrderNum_OrderLine_ProjectOrderRels(Company:string, OrderNum:string, OrderLine:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderRelRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")/ProjectOrderRels", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderRelRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectOrderRel item
   Description: Calls GetByID to retrieve the ProjectOrderRel item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectOrderRel1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectOrderRelRow
   */  
export function get_ProjectOrderLines_Company_OrderNum_OrderLine_ProjectOrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company:string, OrderNum:string, OrderLine:string, OrderRelNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectOrderRelRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLines(" + Company + "," + OrderNum + "," + OrderLine + ")/ProjectOrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectOrderRelRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectOrderRels items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectOrderRels
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectOrderRelRow
   */  
export function get_ProjectOrderRels(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderRelRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderRels", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderRelRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectOrderRels
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectOrderRelRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectOrderRelRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectOrderRels(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderRels", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectOrderRel item
   Description: Calls GetByID to retrieve the ProjectOrderRel item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectOrderRel
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectOrderRelRow
   */  
export function get_ProjectOrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company:string, OrderNum:string, OrderLine:string, OrderRelNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectOrderRelRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectOrderRelRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectOrderRel for the service
   Description: Calls UpdateExt to update ProjectOrderRel. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectOrderRel
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectOrderRelRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectOrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company:string, OrderNum:string, OrderLine:string, OrderRelNum:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectOrderRel item
   Description: Call UpdateExt to delete ProjectOrderRel item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectOrderRel
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param OrderNum Desc: OrderNum   Required: True
      @param OrderLine Desc: OrderLine   Required: True
      @param OrderRelNum Desc: OrderRelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectOrderRels_Company_OrderNum_OrderLine_OrderRelNum(Company:string, OrderNum:string, OrderLine:string, OrderRelNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderRels(" + Company + "," + OrderNum + "," + OrderLine + "," + OrderRelNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBdnSets items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBdnSets
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBdnSetsRow
   */  
export function get_PBdnSets(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBdnSetsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBdnSets", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBdnSetsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBdnSets
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBdnSetsRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBdnSetsRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBdnSets(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBdnSets", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBdnSet item
   Description: Calls GetByID to retrieve the PBdnSet item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBdnSet
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BdnSetID Desc: BdnSetID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBdnSetsRow
   */  
export function get_PBdnSets_Company_ProjectID_BdnSetID(Company:string, ProjectID:string, BdnSetID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBdnSetsRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBdnSets(" + Company + "," + ProjectID + "," + BdnSetID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBdnSetsRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBdnSet for the service
   Description: Calls UpdateExt to update PBdnSet. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBdnSet
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BdnSetID Desc: BdnSetID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBdnSetsRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBdnSets_Company_ProjectID_BdnSetID(Company:string, ProjectID:string, BdnSetID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBdnSets(" + Company + "," + ProjectID + "," + BdnSetID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBdnSet item
   Description: Call UpdateExt to delete PBdnSet item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBdnSet
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BdnSetID Desc: BdnSetID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBdnSets_Company_ProjectID_BdnSetID(Company:string, ProjectID:string, BdnSetID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBdnSets(" + Company + "," + ProjectID + "," + BdnSetID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBEmpCeilings items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBEmpCeilings
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBEmpCeilingRow
   */  
export function get_PBEmpCeilings(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBEmpCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBEmpCeilings", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBEmpCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBEmpCeilings
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBEmpCeilingRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBEmpCeilingRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBEmpCeilings(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBEmpCeilings", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBEmpCeiling item
   Description: Calls GetByID to retrieve the PBEmpCeiling item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBEmpCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param EmpID Desc: EmpID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBEmpCeilingRow
   */  
export function get_PBEmpCeilings_Company_ProjectID_EmpID(Company:string, ProjectID:string, EmpID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBEmpCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBEmpCeilings(" + Company + "," + ProjectID + "," + EmpID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBEmpCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBEmpCeiling for the service
   Description: Calls UpdateExt to update PBEmpCeiling. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBEmpCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param EmpID Desc: EmpID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBEmpCeilingRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBEmpCeilings_Company_ProjectID_EmpID(Company:string, ProjectID:string, EmpID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBEmpCeilings(" + Company + "," + ProjectID + "," + EmpID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBEmpCeiling item
   Description: Call UpdateExt to delete PBEmpCeiling item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBEmpCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param EmpID Desc: EmpID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBEmpCeilings_Company_ProjectID_EmpID(Company:string, ProjectID:string, EmpID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBEmpCeilings(" + Company + "," + ProjectID + "," + EmpID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBillSches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBillSches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBillSchRow
   */  
export function get_PBillSches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBillSchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBillSches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBillSchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBillSches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBillSchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBillSchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBillSches(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBillSches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBillSch item
   Description: Calls GetByID to retrieve the PBillSch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBillSch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BillSchedID Desc: BillSchedID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBillSchRow
   */  
export function get_PBillSches_Company_ProjectID_BillSchedID(Company:string, ProjectID:string, BillSchedID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBillSchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBillSches(" + Company + "," + ProjectID + "," + BillSchedID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBillSchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBillSch for the service
   Description: Calls UpdateExt to update PBillSch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBillSch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BillSchedID Desc: BillSchedID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBillSchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBillSches_Company_ProjectID_BillSchedID(Company:string, ProjectID:string, BillSchedID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBillSches(" + Company + "," + ProjectID + "," + BillSchedID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBillSch item
   Description: Call UpdateExt to delete PBillSch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBillSch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param BillSchedID Desc: BillSchedID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBillSches_Company_ProjectID_BillSchedID(Company:string, ProjectID:string, BillSchedID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBillSches(" + Company + "," + ProjectID + "," + BillSchedID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBRoleRts items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBRoleRts
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBRoleRtRow
   */  
export function get_PBRoleRts(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBRoleRtRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBRoleRts", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBRoleRtRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBRoleRts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBRoleRtRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBRoleRtRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBRoleRts(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBRoleRts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBRoleRt item
   Description: Calls GetByID to retrieve the PBRoleRt item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBRoleRt
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param RoleCd Desc: RoleCd   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBRoleRtRow
   */  
export function get_PBRoleRts_Company_ProjectID_RoleCd_Seq(Company:string, ProjectID:string, RoleCd:string, Seq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBRoleRtRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBRoleRts(" + Company + "," + ProjectID + "," + RoleCd + "," + Seq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBRoleRtRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBRoleRt for the service
   Description: Calls UpdateExt to update PBRoleRt. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBRoleRt
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param RoleCd Desc: RoleCd   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBRoleRtRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBRoleRts_Company_ProjectID_RoleCd_Seq(Company:string, ProjectID:string, RoleCd:string, Seq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBRoleRts(" + Company + "," + ProjectID + "," + RoleCd + "," + Seq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBRoleRt item
   Description: Call UpdateExt to delete PBRoleRt item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBRoleRt
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param RoleCd Desc: RoleCd   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBRoleRts_Company_ProjectID_RoleCd_Seq(Company:string, ProjectID:string, RoleCd:string, Seq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBRoleRts(" + Company + "," + ProjectID + "," + RoleCd + "," + Seq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBSchWrks items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBSchWrks
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBSchWrkRow
   */  
export function get_PBSchWrks(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSchWrkRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSchWrks", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSchWrkRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBSchWrks
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBSchWrkRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBSchWrkRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBSchWrks(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSchWrks", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBSchWrk item
   Description: Calls GetByID to retrieve the PBSchWrk item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBSchWrk
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param SchWrkID Desc: SchWrkID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBSchWrkRow
   */  
export function get_PBSchWrks_Company_ProjectID_SchWrkID(Company:string, ProjectID:string, SchWrkID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBSchWrkRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSchWrks(" + Company + "," + ProjectID + "," + SchWrkID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBSchWrkRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBSchWrk for the service
   Description: Calls UpdateExt to update PBSchWrk. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBSchWrk
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param SchWrkID Desc: SchWrkID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBSchWrkRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBSchWrks_Company_ProjectID_SchWrkID(Company:string, ProjectID:string, SchWrkID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSchWrks(" + Company + "," + ProjectID + "," + SchWrkID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBSchWrk item
   Description: Call UpdateExt to delete PBSchWrk item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBSchWrk
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param SchWrkID Desc: SchWrkID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBSchWrks_Company_ProjectID_SchWrkID(Company:string, ProjectID:string, SchWrkID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSchWrks(" + Company + "," + ProjectID + "," + SchWrkID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PBSupCeilings items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PBSupCeilings
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PBSupCeilingRow
   */  
export function get_PBSupCeilings(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSupCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSupCeilings", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSupCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PBSupCeilings
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PBSupCeilingRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PBSupCeilingRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PBSupCeilings(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSupCeilings", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PBSupCeiling item
   Description: Calls GetByID to retrieve the PBSupCeiling item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PBSupCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VendorNum Desc: VendorNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PBSupCeilingRow
   */  
export function get_PBSupCeilings_Company_ProjectID_VendorNum(Company:string, ProjectID:string, VendorNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PBSupCeilingRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSupCeilings(" + Company + "," + ProjectID + "," + VendorNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PBSupCeilingRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PBSupCeiling for the service
   Description: Calls UpdateExt to update PBSupCeiling. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PBSupCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VendorNum Desc: VendorNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PBSupCeilingRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PBSupCeilings_Company_ProjectID_VendorNum(Company:string, ProjectID:string, VendorNum:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSupCeilings(" + Company + "," + ProjectID + "," + VendorNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PBSupCeiling item
   Description: Call UpdateExt to delete PBSupCeiling item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PBSupCeiling
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VendorNum Desc: VendorNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PBSupCeilings_Company_ProjectID_VendorNum(Company:string, ProjectID:string, VendorNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PBSupCeilings(" + Company + "," + ProjectID + "," + VendorNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PConVars items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PConVars
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PConVarRow
   */  
export function get_PConVars(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PConVarRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PConVars", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PConVarRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PConVars
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PConVarRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PConVarRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PConVars(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PConVars", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PConVar item
   Description: Calls GetByID to retrieve the PConVar item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PConVar
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VarRefID Desc: VarRefID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PConVarRow
   */  
export function get_PConVars_Company_ProjectID_VarRefID(Company:string, ProjectID:string, VarRefID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PConVarRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PConVars(" + Company + "," + ProjectID + "," + VarRefID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PConVarRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PConVar for the service
   Description: Calls UpdateExt to update PConVar. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PConVar
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VarRefID Desc: VarRefID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PConVarRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PConVars_Company_ProjectID_VarRefID(Company:string, ProjectID:string, VarRefID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PConVars(" + Company + "," + ProjectID + "," + VarRefID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PConVar item
   Description: Call UpdateExt to delete PConVar item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PConVar
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param VarRefID Desc: VarRefID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PConVars_Company_ProjectID_VarRefID(Company:string, ProjectID:string, VarRefID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PConVars(" + Company + "," + ProjectID + "," + VarRefID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectPOes items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectPOes
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectPORow
   */  
export function get_ProjectPOes(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPORow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPOes", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPORow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectPOes
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectPORow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectPORow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectPOes(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPOes", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectPO item
   Description: Calls GetByID to retrieve the ProjectPO item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectPO
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PONum Desc: PONum   Required: True
      @param POLine Desc: POLine   Required: True
      @param PORelNum Desc: PORelNum   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectPORow
   */  
export function get_ProjectPOes_Company_ProjectID_PONum_POLine_PORelNum(Company:string, ProjectID:string, PONum:string, POLine:string, PORelNum:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectPORow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPOes(" + Company + "," + ProjectID + "," + PONum + "," + POLine + "," + PORelNum + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectPORow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectPO for the service
   Description: Calls UpdateExt to update ProjectPO. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectPO
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PONum Desc: PONum   Required: True
      @param POLine Desc: POLine   Required: True
      @param PORelNum Desc: PORelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectPORow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectPOes_Company_ProjectID_PONum_POLine_PORelNum(Company:string, ProjectID:string, PONum:string, POLine:string, PORelNum:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPOes(" + Company + "," + ProjectID + "," + PONum + "," + POLine + "," + PORelNum + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectPO item
   Description: Call UpdateExt to delete ProjectPO item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectPO
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PONum Desc: PONum   Required: True
      @param POLine Desc: POLine   Required: True
      @param PORelNum Desc: PORelNum   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectPOes_Company_ProjectID_PONum_POLine_PORelNum(Company:string, ProjectID:string, PONum:string, POLine:string, PORelNum:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPOes(" + Company + "," + ProjectID + "," + PONum + "," + POLine + "," + PORelNum + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectQuots items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectQuots
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectQuotRow
   */  
export function get_ProjectQuots(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectQuotRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectQuots", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectQuotRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectQuots
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectQuotRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectQuotRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectQuots(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectQuots", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectQuot item
   Description: Calls GetByID to retrieve the ProjectQuot item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectQuot
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param QuoteNum Desc: QuoteNum   Required: True
      @param QuoteLine Desc: QuoteLine   Required: True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectQuotRow
   */  
export function get_ProjectQuots_Company_QuoteNum_QuoteLine_ProjectID_PhaseID(Company:string, QuoteNum:string, QuoteLine:string, ProjectID:string, PhaseID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectQuotRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectQuots(" + Company + "," + QuoteNum + "," + QuoteLine + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectQuotRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectQuot for the service
   Description: Calls UpdateExt to update ProjectQuot. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectQuot
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param QuoteNum Desc: QuoteNum   Required: True
      @param QuoteLine Desc: QuoteLine   Required: True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectQuotRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectQuots_Company_QuoteNum_QuoteLine_ProjectID_PhaseID(Company:string, QuoteNum:string, QuoteLine:string, ProjectID:string, PhaseID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectQuots(" + Company + "," + QuoteNum + "," + QuoteLine + "," + ProjectID + "," + PhaseID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectQuot item
   Description: Call UpdateExt to delete ProjectQuot item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectQuot
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param QuoteNum Desc: QuoteNum   Required: True
      @param QuoteLine Desc: QuoteLine   Required: True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectQuots_Company_QuoteNum_QuoteLine_ProjectID_PhaseID(Company:string, QuoteNum:string, QuoteLine:string, ProjectID:string, PhaseID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectQuots(" + Company + "," + QuoteNum + "," + QuoteLine + "," + ProjectID + "," + PhaseID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectTasks items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectTasks
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectTaskRow
   */  
export function get_ProjectTasks(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectTasks
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectTaskRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectTaskRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectTasks(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectTask item
   Description: Calls GetByID to retrieve the ProjectTask item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectTask
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectTaskRow
   */  
export function get_ProjectTasks_Company_ProjectID_TaskID(Company:string, ProjectID:string, TaskID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectTaskRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectTaskRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectTask for the service
   Description: Calls UpdateExt to update ProjectTask. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectTask
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectTaskRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectTasks_Company_ProjectID_TaskID(Company:string, ProjectID:string, TaskID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectTask item
   Description: Call UpdateExt to delete ProjectTask item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectTask
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectTasks_Company_ProjectID_TaskID(Company:string, ProjectID:string, TaskID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjectTaskAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjectTaskAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectTaskAttchRow
   */  
export function get_ProjectTasks_Company_ProjectID_TaskID_ProjectTaskAttches(Company:string, ProjectID:string, TaskID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")/ProjectTaskAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectTaskAttch item
   Description: Calls GetByID to retrieve the ProjectTaskAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectTaskAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectTaskAttchRow
   */  
export function get_ProjectTasks_Company_ProjectID_TaskID_ProjectTaskAttches_Company_ProjectID_TaskID_DrawingSeq(Company:string, ProjectID:string, TaskID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectTaskAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTasks(" + Company + "," + ProjectID + "," + TaskID + ")/ProjectTaskAttches(" + Company + "," + ProjectID + "," + TaskID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectTaskAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectTaskAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectTaskAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectTaskAttchRow
   */  
export function get_ProjectTaskAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTaskAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectTaskAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectTaskAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectTaskAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectTaskAttches(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTaskAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectTaskAttch item
   Description: Calls GetByID to retrieve the ProjectTaskAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectTaskAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectTaskAttchRow
   */  
export function get_ProjectTaskAttches_Company_ProjectID_TaskID_DrawingSeq(Company:string, ProjectID:string, TaskID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectTaskAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTaskAttches(" + Company + "," + ProjectID + "," + TaskID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectTaskAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectTaskAttch for the service
   Description: Calls UpdateExt to update ProjectTaskAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectTaskAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectTaskAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectTaskAttches_Company_ProjectID_TaskID_DrawingSeq(Company:string, ProjectID:string, TaskID:string, DrawingSeq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTaskAttches(" + Company + "," + ProjectID + "," + TaskID + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectTaskAttch item
   Description: Call UpdateExt to delete ProjectTaskAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectTaskAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param TaskID Desc: TaskID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectTaskAttches_Company_ProjectID_TaskID_DrawingSeq(Company:string, ProjectID:string, TaskID:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectTaskAttches(" + Company + "," + ProjectID + "," + TaskID + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjPhases items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjPhases
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseRow
   */  
export function get_ProjPhases(select?:string, expand?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjPhases
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjPhaseRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjPhaseRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjPhases(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhase item
   Description: Calls GetByID to retrieve the ProjPhase item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param expand Desc: Odata expand to child
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, select?:string, expand?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjPhase for the service
   Description: Calls UpdateExt to update ProjPhase. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjPhaseRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjPhase item
   Description: Call UpdateExt to delete ProjPhase item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjPhase
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjPhases_Company_ProjectID_PhaseID(Company:string, ProjectID:string, PhaseID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjPhaseGLCs items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjPhaseGLCs1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseGLCRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_ProjPhaseGLCs(Company:string, ProjectID:string, PhaseID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/ProjPhaseGLCs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhaseGLC item
   Description: Calls GetByID to retrieve the ProjPhaseGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhaseGLC1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseGLCRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_ProjPhaseGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, ProjectID:string, PhaseID:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/ProjPhaseGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get PPhaseOpers items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_PPhaseOpers1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PPhaseOperRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_PPhaseOpers(Company:string, ProjectID:string, PhaseID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PPhaseOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/PPhaseOpers", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PPhaseOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PPhaseOper item
   Description: Calls GetByID to retrieve the PPhaseOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PPhaseOper1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PPhaseOperRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_PPhaseOpers_Company_ProjectID_PhaseID_Seq(Company:string, ProjectID:string, PhaseID:string, Seq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PPhaseOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/PPhaseOpers(" + Company + "," + ProjectID + "," + PhaseID + "," + Seq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PPhaseOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID for the service
   Description: Get ProjPhaseAttches items from the server using GetByID standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetByID_ProjPhaseAttches1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseAttchRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_ProjPhaseAttches(Company:string, ProjectID:string, PhaseID:string, select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/ProjPhaseAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhaseAttch item
   Description: Calls GetByID to retrieve the ProjPhaseAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhaseAttch1
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseAttchRow
   */  
export function get_ProjPhases_Company_ProjectID_PhaseID_ProjPhaseAttches_Company_ProjectID_PhaseID_DrawingSeq(Company:string, ProjectID:string, PhaseID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhases(" + Company + "," + ProjectID + "," + PhaseID + ")/ProjPhaseAttches(" + Company + "," + ProjectID + "," + PhaseID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjPhaseGLCs items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjPhaseGLCs
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseGLCRow
   */  
export function get_ProjPhaseGLCs(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseGLCs", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjPhaseGLCs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjPhaseGLCRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjPhaseGLCRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjPhaseGLCs(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseGLCs", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhaseGLC item
   Description: Calls GetByID to retrieve the ProjPhaseGLC item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhaseGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseGLCRow
   */  
export function get_ProjPhaseGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseGLCRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseGLCRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjPhaseGLC for the service
   Description: Calls UpdateExt to update ProjPhaseGLC. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjPhaseGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjPhaseGLCRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjPhaseGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjPhaseGLC item
   Description: Call UpdateExt to delete ProjPhaseGLC item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjPhaseGLC
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param RelatedToFile Desc: RelatedToFile   Required: True   Allow empty value : True
      @param Key1 Desc: Key1   Required: True   Allow empty value : True
      @param Key2 Desc: Key2   Required: True   Allow empty value : True
      @param Key3 Desc: Key3   Required: True   Allow empty value : True
      @param Key4 Desc: Key4   Required: True   Allow empty value : True
      @param Key5 Desc: Key5   Required: True   Allow empty value : True
      @param Key6 Desc: Key6   Required: True   Allow empty value : True
      @param GLControlType Desc: GLControlType   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjPhaseGLCs_Company_RelatedToFile_Key1_Key2_Key3_Key4_Key5_Key6_GLControlType(Company:string, RelatedToFile:string, Key1:string, Key2:string, Key3:string, Key4:string, Key5:string, Key6:string, GLControlType:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseGLCs(" + Company + "," + RelatedToFile + "," + Key1 + "," + Key2 + "," + Key3 + "," + Key4 + "," + Key5 + "," + Key6 + "," + GLControlType + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get PPhaseOpers items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_PPhaseOpers
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.PPhaseOperRow
   */  
export function get_PPhaseOpers(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PPhaseOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PPhaseOpers", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PPhaseOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_PPhaseOpers
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.PPhaseOperRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.PPhaseOperRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PPhaseOpers(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PPhaseOpers", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the PPhaseOper item
   Description: Calls GetByID to retrieve the PPhaseOper item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_PPhaseOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.PPhaseOperRow
   */  
export function get_PPhaseOpers_Company_ProjectID_PhaseID_Seq(Company:string, ProjectID:string, PhaseID:string, Seq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_PPhaseOperRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PPhaseOpers(" + Company + "," + ProjectID + "," + PhaseID + "," + Seq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_PPhaseOperRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update PPhaseOper for the service
   Description: Calls UpdateExt to update PPhaseOper. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_PPhaseOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.PPhaseOperRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_PPhaseOpers_Company_ProjectID_PhaseID_Seq(Company:string, ProjectID:string, PhaseID:string, Seq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PPhaseOpers(" + Company + "," + ProjectID + "," + PhaseID + "," + Seq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete PPhaseOper item
   Description: Call UpdateExt to delete PPhaseOper item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_PPhaseOper
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param Seq Desc: Seq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_PPhaseOpers_Company_ProjectID_PhaseID_Seq(Company:string, ProjectID:string, PhaseID:string, Seq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PPhaseOpers(" + Company + "," + ProjectID + "," + PhaseID + "," + Seq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjPhaseAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjPhaseAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjPhaseAttchRow
   */  
export function get_ProjPhaseAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjPhaseAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjPhaseAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjPhaseAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjPhaseAttches(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjPhaseAttch item
   Description: Calls GetByID to retrieve the ProjPhaseAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjPhaseAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjPhaseAttchRow
   */  
export function get_ProjPhaseAttches_Company_ProjectID_PhaseID_DrawingSeq(Company:string, ProjectID:string, PhaseID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjPhaseAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseAttches(" + Company + "," + ProjectID + "," + PhaseID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjPhaseAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjPhaseAttch for the service
   Description: Calls UpdateExt to update ProjPhaseAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjPhaseAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjPhaseAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjPhaseAttches_Company_ProjectID_PhaseID_DrawingSeq(Company:string, ProjectID:string, PhaseID:string, DrawingSeq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseAttches(" + Company + "," + ProjectID + "," + PhaseID + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjPhaseAttch item
   Description: Call UpdateExt to delete ProjPhaseAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjPhaseAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param PhaseID Desc: PhaseID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjPhaseAttches_Company_ProjectID_PhaseID_DrawingSeq(Company:string, ProjectID:string, PhaseID:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjPhaseAttches(" + Company + "," + ProjectID + "," + PhaseID + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectAttches items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectAttches
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectAttchRow
   */  
export function get_ProjectAttches(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectAttches", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectAttches
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectAttchRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectAttchRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectAttches(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectAttches", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectAttch item
   Description: Calls GetByID to retrieve the ProjectAttch item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectAttchRow
   */  
export function get_ProjectAttches_Company_ProjectID_DrawingSeq(Company:string, ProjectID:string, DrawingSeq:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectAttchRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectAttches(" + Company + "," + ProjectID + "," + DrawingSeq + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectAttchRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectAttch for the service
   Description: Calls UpdateExt to update ProjectAttch. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectAttchRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectAttches_Company_ProjectID_DrawingSeq(Company:string, ProjectID:string, DrawingSeq:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectAttches(" + Company + "," + ProjectID + "," + DrawingSeq + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectAttch item
   Description: Call UpdateExt to delete ProjectAttch item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectAttch
      @param Company Desc: Company   Required: True   Allow empty value : True
      @param ProjectID Desc: ProjectID   Required: True   Allow empty value : True
      @param DrawingSeq Desc: DrawingSeq   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectAttches_Company_ProjectID_DrawingSeq(Company:string, ProjectID:string, DrawingSeq:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectAttches(" + Company + "," + ProjectID + "," + DrawingSeq + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetRows for the service
   Description: Get ProjectPlanContractLines items from the server using GetRows standard method. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetRows_ProjectPlanContractLines
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectPlanContractLineRow
   */  
export function get_ProjectPlanContractLines(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPlanContractLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPlanContractLines", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPlanContractLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to create new item for the service
   Description: Calls UpdateExt to create new item for the service. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: NewUpdateExt_ProjectPlanContractLines
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Erp.Tablesets.ProjectPlanContractLineRow
   Returns: 
      201 Desc: Resource is created. Operation is successful.  => reference#/components/schemas/Erp.Tablesets.ProjectPlanContractLineRow
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectPlanContractLines(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPlanContractLines", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetByID to retrieve the ProjectPlanContractLine item
   Description: Calls GetByID to retrieve the ProjectPlanContractLine item by specified keys. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: GetById_ProjectPlanContractLine
      @param SysRowID Desc: SysRowID   Required: True
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Erp.Tablesets.ProjectPlanContractLineRow
   */  
export function get_ProjectPlanContractLines_SysRowID(SysRowID:string, select?:string, filter?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Erp_Tablesets_ProjectPlanContractLineRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPlanContractLines(" + SysRowID + ")", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Erp_Tablesets_ProjectPlanContractLineRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls UpdateExt to update ProjectPlanContractLine for the service
   Description: Calls UpdateExt to update ProjectPlanContractLine. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: UpdateExt_ProjectPlanContractLine
      @param SysRowID Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
      :param requestBody: Desc: input params  => reference#/components/schemas/Erp.Tablesets.ProjectPlanContractLineRow
   Returns: 
      204 Desc: No Content. Operation is successful.
      400 Desc: Unable to deserialize entity. Input data is not in correct format.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function patch_ProjectPlanContractLines_SysRowID(SysRowID:string, requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPlanContractLines(" + SysRowID + ")", {
          method: 'patch',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Call UpdateExt to delete ProjectPlanContractLine item
   Description: Call UpdateExt to delete ProjectPlanContractLine item. <div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li><li>String parameters should be specified in single quotes</li></ul></div>
   OperationID: DeleteUpdateExt_ProjectPlanContractLine
      @param SysRowID Desc: SysRowID   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      204 Desc: No Content. Operation is successful.
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function delete_ProjectPlanContractLines_SysRowID(SysRowID:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectPlanContractLines(" + SysRowID + ")", {
          method: 'delete',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Calls GetList for the service
   Description: Get list of items<div>OData-specific rules:<ul><li>OData $-parameters data are case-sensitive</li></ul></div>
   OperationID: GetList
      @param select Desc: Odata select comma delimited list of fields
      @param filter Desc: Odata filter results
      @param orderby Desc: Odata sort results
      @param top Desc: Odata top results
      @param skip Desc: Odata skip results
      @param inlinecount Desc: Odata.count value
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas headers
   Returns: 
      200 Desc: OK => reference#/components/schemas/Epicor.RESTApi.Help.ODataSetResponse_System.Collections.Generic.List_Erp.Tablesets.ProjectListRow
   */  
export function get_List(select?:string, filter?:string, orderby?:string, top?:string, skip?:string, inlinecount?:string, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectListRow>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/List", {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectListRow)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}



//////////////////////////////////////////////////////////////////////////
// Custom methods:
//////////////////////////////////////////////////////////////////////////

   /**  
   Summary: Invoke method GetRows
   Description: Returns a dataset containing all rows that satisfy the where clauses.
   OperationID: Get_GetRows
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True   Allow empty value : True
   Required: True
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetRows(whereClauseProject:string, whereClauseProjectAttch:string, whereClauseFieldServiceCalls:string, whereClauseFieldServiceContracts:string, whereClausePBWrkMeasuredHead:string, whereClausePBWrkMeasuredDtl:string, whereClauseWBSProjPhase:string, whereClauseProjectCst:string, whereClauseProjectJob:string, whereClauseProjectMilestone:string, whereClauseProjectCriteria:string, whereClauseProjectOrderLine:string, whereClauseProjectOrderRel:string, whereClausePBdnSets:string, whereClausePBEmpCeiling:string, whereClausePBillSch:string, whereClausePBRoleRt:string, whereClausePBSchWrk:string, whereClausePBSupCeiling:string, whereClausePConVar:string, whereClauseProjectPO:string, whereClauseProjectQuot:string, whereClauseProjectTask:string, whereClauseProjectTaskAttch:string, whereClauseProjPhase:string, whereClauseProjPhaseAttch:string, whereClausePPhaseOper:string, whereClauseProjPhaseGLC:string, whereClauseEntityGLC:string, whereClauseProjectPlanContractLine:string, pageSize:string, absolutePage:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof whereClauseProject!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProject=" + whereClauseProject
   }
   if(typeof whereClauseProjectAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectAttch=" + whereClauseProjectAttch
   }
   if(typeof whereClauseFieldServiceCalls!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseFieldServiceCalls=" + whereClauseFieldServiceCalls
   }
   if(typeof whereClauseFieldServiceContracts!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseFieldServiceContracts=" + whereClauseFieldServiceContracts
   }
   if(typeof whereClausePBWrkMeasuredHead!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBWrkMeasuredHead=" + whereClausePBWrkMeasuredHead
   }
   if(typeof whereClausePBWrkMeasuredDtl!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBWrkMeasuredDtl=" + whereClausePBWrkMeasuredDtl
   }
   if(typeof whereClauseWBSProjPhase!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseWBSProjPhase=" + whereClauseWBSProjPhase
   }
   if(typeof whereClauseProjectCst!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectCst=" + whereClauseProjectCst
   }
   if(typeof whereClauseProjectJob!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectJob=" + whereClauseProjectJob
   }
   if(typeof whereClauseProjectMilestone!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectMilestone=" + whereClauseProjectMilestone
   }
   if(typeof whereClauseProjectCriteria!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectCriteria=" + whereClauseProjectCriteria
   }
   if(typeof whereClauseProjectOrderLine!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectOrderLine=" + whereClauseProjectOrderLine
   }
   if(typeof whereClauseProjectOrderRel!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectOrderRel=" + whereClauseProjectOrderRel
   }
   if(typeof whereClausePBdnSets!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBdnSets=" + whereClausePBdnSets
   }
   if(typeof whereClausePBEmpCeiling!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBEmpCeiling=" + whereClausePBEmpCeiling
   }
   if(typeof whereClausePBillSch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBillSch=" + whereClausePBillSch
   }
   if(typeof whereClausePBRoleRt!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBRoleRt=" + whereClausePBRoleRt
   }
   if(typeof whereClausePBSchWrk!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBSchWrk=" + whereClausePBSchWrk
   }
   if(typeof whereClausePBSupCeiling!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePBSupCeiling=" + whereClausePBSupCeiling
   }
   if(typeof whereClausePConVar!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePConVar=" + whereClausePConVar
   }
   if(typeof whereClauseProjectPO!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectPO=" + whereClauseProjectPO
   }
   if(typeof whereClauseProjectQuot!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectQuot=" + whereClauseProjectQuot
   }
   if(typeof whereClauseProjectTask!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectTask=" + whereClauseProjectTask
   }
   if(typeof whereClauseProjectTaskAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectTaskAttch=" + whereClauseProjectTaskAttch
   }
   if(typeof whereClauseProjPhase!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjPhase=" + whereClauseProjPhase
   }
   if(typeof whereClauseProjPhaseAttch!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjPhaseAttch=" + whereClauseProjPhaseAttch
   }
   if(typeof whereClausePPhaseOper!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClausePPhaseOper=" + whereClausePPhaseOper
   }
   if(typeof whereClauseProjPhaseGLC!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjPhaseGLC=" + whereClauseProjPhaseGLC
   }
   if(typeof whereClauseEntityGLC!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseEntityGLC=" + whereClauseEntityGLC
   }
   if(typeof whereClauseProjectPlanContractLine!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClauseProjectPlanContractLine=" + whereClauseProjectPlanContractLine
   }
   if(typeof pageSize!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "pageSize=" + pageSize
   }
   if(typeof absolutePage!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "absolutePage=" + absolutePage
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetRows" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetByID
   Description: Returns a DataSet given the primary key.
   OperationID: Get_GetByID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetByID(projectID:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof projectID!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "projectID=" + projectID
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetByID" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetList
   Description: Returns a list of rows that satisfy the where clause.
   OperationID: Get_GetList
      @param whereClause Desc: An expression used to filter the rows. Can be left blank for all rows.   Required: True   Allow empty value : True
      @param pageSize Desc: The maximum number of rows to return. Leave as zero for no maximum.   Required: True
      @param absolutePage Desc: Page of rows to return.   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetList(whereClause:string, pageSize:string, absolutePage:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof whereClause!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "whereClause=" + whereClause
   }
   if(typeof pageSize!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "pageSize=" + pageSize
   }
   if(typeof absolutePage!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "absolutePage=" + absolutePage
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetList" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectCst
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectCst
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectCst_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectCst_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectCst(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectCst", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectMilestone
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectMilestone
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectMilestone_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectMilestone_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectMilestone(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectMilestone", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectCriteria
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectCriteria
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectCriteria_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectCriteria_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectCriteria(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectCriteria", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBdnSets
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBdnSets
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBdnSets_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBdnSets_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBdnSets(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBdnSets", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBEmpCeiling
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBEmpCeiling
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBEmpCeiling_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBEmpCeiling_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBEmpCeiling(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBEmpCeiling", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBillSch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBillSch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBillSch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBillSch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBillSch(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBillSch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBRoleRt
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBRoleRt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBRoleRt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBRoleRt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBRoleRt(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBRoleRt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBSchWrk
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBSchWrk
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBSchWrk_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBSchWrk_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBSchWrk(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBSchWrk", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBSupCeiling
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBSupCeiling
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBSupCeiling_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBSupCeiling_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBSupCeiling(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBSupCeiling", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPConVar
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPConVar
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPConVar_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPConVar_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPConVar(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPConVar", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectTask
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectTask
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectTask_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectTask_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectTask(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectTask", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectTaskAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectTaskAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectTaskAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectTaskAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectTaskAttch(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectTaskAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjPhase
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjPhase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjPhase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjPhase_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjPhase(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjPhase", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjPhaseAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjPhaseAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjPhaseAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjPhaseAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjPhaseAttch(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjPhaseAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPPhaseOper
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPPhaseOper
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPPhaseOper_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPPhaseOper_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPPhaseOper(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPPhaseOper", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjPhaseGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjPhaseGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjPhaseGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjPhaseGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjPhaseGLC(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjPhaseGLC", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewEntityGLC
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewEntityGLC
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewEntityGLC_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewEntityGLC_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewEntityGLC(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewEntityGLC", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectPlanContractLine
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectPlanContractLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectPlanContractLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectPlanContractLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectPlanContractLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectPlanContractLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method DeleteByID
   Description: Deletes a row given its ID.
   OperationID: DeleteByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DeleteByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DeleteByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_DeleteByID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/DeleteByID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetBySysRowID
   OperationID: Get_GetBySysRowID
   Required: True   Allow empty value : True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetBySysRowID(id:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof id!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "id=" + id
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetBySysRowID" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetBySysRowIDs
   OperationID: Get_GetBySysRowIDs
   Required: True
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetBySysRowIDs_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function get_GetBySysRowIDs(ids:string, epicorHeaders?:Headers){
   var firstParam = true
   var params = ""
   if(typeof ids!== 'undefined'){
      if(firstParam){
         params += "?"
         firstParam = false
      }else{
         params += "&"
      }
      params += "ids=" + ids
   }

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetBySysRowIDs" + params, {
          method: 'get',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method Update
   Description: Commits the DataSet changes to the data store.
   OperationID: Update
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/Update_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/Update_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_Update(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/Update", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method UpdateExt
   Description: Apply input data to service by calling GetByID/GetNew/Update methods.
   OperationID: UpdateExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/UpdateExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/UpdateExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_UpdateExt(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/UpdateExt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddPhaseQuote
   Description: This method validates the given PONum, POLine and PORelease, then if valid,
adds a ttProjectPO record.
            
An exception is thrown if:
- The given PO/Line/Rel does not exist
- The given PO/Line/Rel...
   OperationID: AddPhaseQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddPhaseQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddPhaseQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddPhaseQuote(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddPhaseQuote", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddProjectJob
   Description: This method validates the given JobNum, then if valid, adds a ttProjectJob
record.
            
An exception is thrown if:
- The given Job does not exist
- The given Job...
   OperationID: AddProjectJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddProjectJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddProjectJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddProjectJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddProjectJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddProjectOrderLine
   Description: This method validates the given OrderNum and OrderLine, then if valid, adds a
ttProjectOrderLine record.
            
An exception is thrown if:
- The given Order/Line does not exist
- The given Order/Line...
   OperationID: AddProjectOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddProjectOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddProjectOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddProjectOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddProjectOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddProjectOrderRel
   Description: This method validates the given Order Release Num to be assigned to the Phase
ttProjectOrderLine record.
   OperationID: AddProjectOrderRel
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddProjectOrderRel_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddProjectOrderRel_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddProjectOrderRel(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddProjectOrderRel", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddProjectPO
   Description: This method validates the given PONum, POLine and PORelease, then if valid,
adds a ttProjectPO record.
            
An exception is thrown if:
- The given PO/Line/Rel does not exist
- The given PO/Line/Rel...
   OperationID: AddProjectPO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddProjectPO_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddProjectPO_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddProjectPO(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddProjectPO", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddProjectQuote
   Description: This method validates the given PONum, POLine and PORelease, then if valid,
adds a ttProjectPO record.
            
An exception is thrown if:
- The given PO/Line/Rel does not exist
- The given PO/Line/Rel...
   OperationID: AddProjectQuote
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddProjectQuote_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddProjectQuote_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddProjectQuote(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddProjectQuote", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddRelatedPOs
   Description: This method validates the given OrderNum and OrderLine, then if valid, adds a
ttProjectOrderLine record.
            
An exception is thrown if:
- The given Order/Line does not exist
- The given Order/Line...
   OperationID: AddRelatedPOs
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddRelatedPOs_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddRelatedPOs_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddRelatedPOs(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddRelatedPOs", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method AddUpNumbers
   OperationID: AddUpNumbers
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/AddUpNumbers_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/AddUpNumbers_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_AddUpNumbers(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/AddUpNumbers", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildInvoicingMethodList
   Description: This procedure returns the available Invoicing Methods depending if
the Progress Billing license is installed or not.
   OperationID: BuildInvoicingMethodList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildInvoicingMethodList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildInvoicingMethodList(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildInvoicingMethodList", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildPBCloseBS
   Description: BuildPBCloseBS
   OperationID: BuildPBCloseBS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildPBCloseBS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildPBCloseBS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildPBCloseBS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildPBCloseBS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildPhaseLevels
   OperationID: BuildPhaseLevels
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildPhaseLevels_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildPhaseLevels_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildPhaseLevels(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildPhaseLevels", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildProjectRevenueRecognitionHistoryDS
   Description: Get historical transactions of Project Manual recognized costs
   OperationID: BuildProjectRevenueRecognitionHistoryDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildProjectRevenueRecognitionHistoryDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildProjectRevenueRecognitionHistoryDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildProjectRevenueRecognitionHistoryDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildProjectRevenueRecognitionHistoryDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildPhaseRevenueRecognitionHistoryDS
   Description: Get historical transactions of WBS Phase Manual recognized costs
   OperationID: BuildPhaseRevenueRecognitionHistoryDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildPhaseRevenueRecognitionHistoryDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildPhaseRevenueRecognitionHistoryDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildPhaseRevenueRecognitionHistoryDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildPhaseRevenueRecognitionHistoryDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method BuildRevenRecogDS
   Description: Build RevenRecog DS for an entire Project
   OperationID: BuildRevenRecogDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/BuildRevenRecogDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/BuildRevenRecogDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_BuildRevenRecogDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/BuildRevenRecogDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RebuildRevenRecogDS
   Description: Rebuild RevenRecog DS for a single Project or WBS Phase.
   OperationID: RebuildRevenRecogDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RebuildRevenRecogDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RebuildRevenRecogDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RebuildRevenRecogDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RebuildRevenRecogDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RebuildProjectRevenRecogDS
   Description: Rebuild RevenRecog DS for a single Project (and none of its WBS Phases, if they exist)
   OperationID: RebuildProjectRevenRecogDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RebuildProjectRevenRecogDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RebuildProjectRevenRecogDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RebuildProjectRevenRecogDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RebuildProjectRevenRecogDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RebuildPhaseRevenRecogDS
   Description: Rebuild RevenRecog DS for a single WBS Phase
   OperationID: RebuildPhaseRevenRecogDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RebuildPhaseRevenRecogDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RebuildPhaseRevenRecogDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RebuildPhaseRevenRecogDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RebuildPhaseRevenRecogDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CalculateButton
   Description: CalculateButton
   OperationID: CalculateButton
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CalculateButton_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CalculateButton_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CalculateButton(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CalculateButton", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ProcessMultiProjectRevenRecogCalculate
   Description: Performs the Revenue Recognition Calculated or the Recognize function for multi project revenue recognition processing.
   OperationID: ProcessMultiProjectRevenRecogCalculate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ProcessMultiProjectRevenRecogCalculate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProcessMultiProjectRevenRecogCalculate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProcessMultiProjectRevenRecogCalculate(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProcessMultiProjectRevenRecogCalculate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckChangedConInvMeth
   Description: CheckChangedConInvMeth
   OperationID: CheckChangedConInvMeth
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckChangedConInvMeth_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckChangedConInvMeth_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckChangedConInvMeth(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CheckChangedConInvMeth", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CheckToReschedule
   Description: This method checks the due date and returns a message asking if you would like to schedule if the conditions are met.
   OperationID: CheckToReschedule
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CheckToReschedule_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CheckToReschedule_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CheckToReschedule(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CheckToReschedule", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ClearAnalysis
   Description: Call this method to delete or clear all ProjectAnalysis records.
This method expects that the user already confirmed that records will be deleted.
   OperationID: ClearAnalysis
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ClearAnalysis_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ClearAnalysis_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ClearAnalysis(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ClearAnalysis", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ClearApprovals
   Description: Call this method to clear the Approvals Methods of children of the Phase given.
   OperationID: ClearApprovals
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ClearApprovals_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ClearApprovals_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ClearApprovals(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ClearApprovals", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ClearTaskSet
   Description: Call this method to clear the Task Sets of children of the Phase given.
   OperationID: ClearTaskSet
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ClearTaskSet_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ClearTaskSet_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ClearTaskSet(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ClearTaskSet", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CloseBillSched
   Description: CloseBillSched
   OperationID: CloseBillSched
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseBillSched_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseBillSched_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CloseBillSched(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CloseBillSched", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CloseProjAccruals
   Description: CloseProjAccruals
   OperationID: CloseProjAccruals
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseProjAccruals_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseProjAccruals_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CloseProjAccruals(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CloseProjAccruals", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CloseProject
   Description: CloseProject
   OperationID: CloseProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CloseProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CloseProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CloseProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CloseProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OpenProject
   OperationID: OpenProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OpenProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OpenProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OpenProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OpenProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CreateProjectJob
   Description: Call this method to create the principal project job with the Id given
   OperationID: CreateProjectJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateProjectJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateProjectJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CreateProjectJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CreateProjectJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method CreateWBSPhaseJob
   Description: Call this method to create the WBS Phase job with the Id given
   OperationID: CreateWBSPhaseJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/CreateWBSPhaseJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/CreateWBSPhaseJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_CreateWBSPhaseJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/CreateWBSPhaseJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ExportToMSProject
   Description: This method performs the actual Project Download to MS Project.  Call this
method after the user selected the Project and entered the necessary input
parameters. This method returns the data table ttMSPDownload containing all
appropriate project information. The resulting records from the ttMSPDownload
will then need to be outputted as a CSV file (comma delimited).
   OperationID: ExportToMSProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ExportToMSProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ExportToMSProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ExportToMSProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ExportToMSProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetAvailablePersonList
   Description: This method returns a double-delimited list of value-name pairs of all
active Persons for the Person table.  This could be used to provide a
starting point for a "picker list" to maintain the Project.PersonList.
   OperationID: GetAvailablePersonList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetAvailablePersonList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetAvailablePersonList(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetAvailablePersonList", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetCodeDescList
   Description: Get the code description list from the zData based on a table and field
   OperationID: GetCodeDescList
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetCodeDescList_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCodeDescList_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetCodeDescList(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetCodeDescList", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetCurrencyBase
   Description: This method returns the Base CurrencyCode
   OperationID: GetCurrencyBase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetCurrencyBase_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetCurrencyBase(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetCurrencyBase", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPhaseQuot
   Description: This method adds a ProjectQuot row to the dataset.
   OperationID: GetNewPhaseQuot
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPhaseQuot_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPhaseQuot_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPhaseQuot(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPhaseQuot", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectJob
   Description: This method adds a ProjectJob row to the dataset.
   OperationID: GetNewProjectJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectOrderLine
   Description: This method adds a ProjectOrderLine row to the dataset.
   OperationID: GetNewProjectOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectPO
   Description: This method adds a ProjectPO row to the dataset.
   OperationID: GetNewProjectPO
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectPO_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectPO_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectPO(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectPO", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectQuot
   Description: This method adds a ProjectQuot row to the dataset.
   OperationID: GetNewProjectQuot
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectQuot_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectQuot_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectQuot(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectQuot", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewWBSProjPhase
   Description: This method adds a ttWBSProjPhase row to the dataset.
   OperationID: GetNewWBSProjPhase
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewWBSProjPhase_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewWBSProjPhase_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewWBSProjPhase(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewWBSProjPhase", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetPBillHistory
   Description: This method gets the related PBillHistory for a ProjectID,BillSchedID.
   OperationID: GetPBillHistory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPBillHistory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPBillHistory_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetPBillHistory(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetPBillHistory", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetPBWrkDtlHistory
   Description: Gets the related Progress Billing History for a ProjectID.
   OperationID: GetPBWrkDtlHistory
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetPBWrkDtlHistory_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetPBWrkDtlHistory_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetPBWrkDtlHistory(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetPBWrkDtlHistory", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetProjectPlanContractDtlRows
   Description: Add Project's Plan Contract Detail to Project Dataset
   OperationID: GetProjectPlanContractDtlRows
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetProjectPlanContractDtlRows_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetProjectPlanContractDtlRows_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetProjectPlanContractDtlRows(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetProjectPlanContractDtlRows", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetMultiProjectRevenRecogDS
   Description: Returns datasets required for multi project revenue recognition processing.
Will only return data for tables: Project, ProjectCst, RevenRecog
   OperationID: GetMultiProjectRevenRecogDS
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetMultiProjectRevenRecogDS_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetMultiProjectRevenRecogDS_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetMultiProjectRevenRecogDS(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetMultiProjectRevenRecogDS", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetValidPhases
   Description: Returns Valid Parent Phases
   OperationID: GetValidPhases
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetValidPhases_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetValidPhases_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetValidPhases(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetValidPhases", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ImportFromMSProject
   Description: This method performs the actual Project Upload from MS Project.  Call this
method after the user selected the Project and entered the necessary input
parameters. This method expects an input data table ttImportFromMSP with data
coming from an external comma delimited file.  The ttImportFromMSP table should
only contain data (i.e. if the first line of the external file is just the
field descriptions then this record should not be included in ttImportFromMSP.)
   OperationID: ImportFromMSProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ImportFromMSProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ImportFromMSProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ImportFromMSProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ImportFromMSProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeActivityStatus
   Description: OnChangeActivityStatus
   OperationID: OnChangeActivityStatus
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeActivityStatus_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeActivityStatus_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeActivityStatus(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeActivityStatus", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeActivityUnit
   Description: This method validates the ActivityUnit.
   OperationID: OnChangeActivityUnit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeActivityUnit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeActivityUnit_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeActivityUnit(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeActivityUnit", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeBdnSetCode
   Description: Validates the given Burden Set Code.
   OperationID: OnChangeBdnSetCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeBdnSetCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeBdnSetCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeBdnSetCode(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeBdnSetCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeBillSchOrderLine
   Description: This method validates the given OrderNum and OrderLine, then if valid, updates
the ttPBillSch dataset row.
   OperationID: OnChangeBillSchOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeBillSchOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeBillSchOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeBillSchOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeBillSchOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateBillSchOrderLine
   Description: This method validates if the CustNum of the OrderNum is different from Project throwing out a message to notify the user
   OperationID: ValidateBillSchOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateBillSchOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateBillSchOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateBillSchOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ValidateBillSchOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeBillSchOrderNum
   Description: This method validates the given OrderNum, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeBillSchOrderNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeBillSchOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeBillSchOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeBillSchOrderNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeBillSchOrderNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConBTCustNumCustID
   Description: This method validates the given Project.ConBTCustNumCustID, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeConBTCustNumCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConBTCustNumCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConBTCustNumCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConBTCustNumCustID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConBTCustNumCustID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConCustNumCustID
   Description: This method validates the given Project.ConCustNumCustID, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeConCustNumCustID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConCustNumCustID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConCustNumCustID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConCustNumCustID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConCustNumCustID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConEndDate
   Description: This method validates the given Project.ConEndDate, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeConEndDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConEndDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConEndDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConEndDate(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConEndDate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConInvMeth
   Description: This method validates the ConInvMeth.
   OperationID: OnChangeConInvMeth
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConInvMeth_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConInvMeth_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConInvMeth(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConInvMeth", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnCheckConInvMeth
   Description: This method gives a warning message when changing invoicing method to None while linked to orders.
   OperationID: OnCheckConInvMeth
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnCheckConInvMeth_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnCheckConInvMeth_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnCheckConInvMeth(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnCheckConInvMeth", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ReviewInvoiceLevel
   Description: This method review Project Level Invoicing Method to avoid to have many orders with different customers when Level Invoice is different from CS, MB or NN .
   OperationID: ReviewInvoiceLevel
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ReviewInvoiceLevel_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ReviewInvoiceLevel_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ReviewInvoiceLevel(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ReviewInvoiceLevel", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConListCode
   Description: This method validates the ConListCode.
   OperationID: OnChangeConListCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConListCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConListCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConListCode(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConListCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConProjMgr
   Description: This method validates the ConProjMgr.
   OperationID: OnChangeConProjMgr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConProjMgr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConProjMgr_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConProjMgr(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConProjMgr", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConTotValue
   Description: This method validates the given Project.ConTotValue, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeConTotValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConTotValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConTotValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConTotValue(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConTotValue", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeCriteriaJobAsm
   Description: This method validates the ProjectCriteria fields JobNum/AsmSeq.
   OperationID: OnChangeCriteriaJobAsm
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCriteriaJobAsm_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCriteriaJobAsm_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeCriteriaJobAsm(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeCriteriaJobAsm", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeCriteriaJobNum
   Description: This method validates the ProjectCriteria fields JobNum.
   OperationID: OnChangeCriteriaJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCriteriaJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCriteriaJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeCriteriaJobNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeCriteriaJobNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeCriteriaJobOpr
   Description: This method validates the ProjectCriteria fields JobNum/AsmSeq/OprSeq.
   OperationID: OnChangeCriteriaJobOpr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCriteriaJobOpr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCriteriaJobOpr_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeCriteriaJobOpr(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeCriteriaJobOpr", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeCurrencyCode
   Description: This method validates the given Project.CurrencyCode, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeCurrencyCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeCurrencyCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeCurrencyCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeCurrencyCode(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeCurrencyCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeDecimalValue
   Description: This method validates the OnChangeDecimalValue.
   OperationID: OnChangeDecimalValue
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeDecimalValue_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeDecimalValue_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeDecimalValue(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeDecimalValue", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeConNumQtySurveyor
   Description: OnConNumQtySurveyor
   OperationID: OnChangeConNumQtySurveyor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeConNumQtySurveyor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeConNumQtySurveyor_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeConNumQtySurveyor(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeConNumQtySurveyor", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeEstHours
   Description: This method validates the given PPhaseOper.EstHours, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeEstHours
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeEstHours_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeEstHours_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeEstHours(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeEstHours", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeJobNum
   Description: This method validates the given JobNum, then if valid, updates the ttProjectJob
dataset row.
   OperationID: OnChangeJobNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeJobNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeJobNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeJobNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeJobNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePrimaryJob
   Description: This method validates the given JobNum, then if valid, updates the PrimaryJob
   OperationID: OnChangePrimaryJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePrimaryJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePrimaryJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePrimaryJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePrimaryJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeMarkupID
   Description: This method validates the MarkupID field.
   OperationID: OnChangeMarkupID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeMarkupID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeMarkupID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeMarkupID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeMarkupID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeMilestoneComplete
   Description: This method validates the complete value
   OperationID: OnChangeMilestoneComplete
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeMilestoneComplete_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeMilestoneComplete_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeMilestoneComplete(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeMilestoneComplete", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeMilestoneOrderLine
   Description: This method validates the given OrderNum and OrderLine, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeMilestoneOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeMilestoneOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeMilestoneOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeMilestoneOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeMilestoneOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeMilestoneOrderNum
   Description: This method validates the given OrderNum, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeMilestoneOrderNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeMilestoneOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeMilestoneOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeMilestoneOrderNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeMilestoneOrderNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeOpCode
   Description: This method validates the given PPhaseOper.OpCode, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeOpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeOpCode(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeOpCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeOrderNum
   Description: This method validates the given OrderNum
the ttProjectOrderLine dataset row.
   OperationID: OnChangeOrderNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOrderNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOrderNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeOrderNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeOrderNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeOrderLine
   Description: This method validates the given OrderNum and OrderLine, then if valid, updates
the ttProjectOrderLine dataset row.
   OperationID: OnChangeOrderLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeOrderLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeOrderLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeOrderLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeOrderLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePBillSchMgr
   Description: This method validates the Mgr.
   OperationID: OnChangePBillSchMgr
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePBillSchMgr_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePBillSchMgr_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePBillSchMgr(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePBillSchMgr", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePBOrder
   Description: Validates the given OrderNum and OrderLine
   OperationID: OnChangePBOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePBOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePBOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePBOrder(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePBOrder", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePhaseOrder
   Description: This method validates the SO data of the WBS Phase.
   OperationID: OnChangePhaseOrder
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePhaseOrder_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePhaseOrder_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePhaseOrder(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePhaseOrder", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePORelNum
   Description: This method validates the given PONum, POLine and PORelease, then if valid,
updates the ttProjectPO dataset row.
   OperationID: OnChangePORelNum
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePORelNum_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePORelNum_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePORelNum(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePORelNum", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePPhaseRoleCd
   Description: This method validates the given PPhaseOper.RoleCd, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangePPhaseRoleCd
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePPhaseRoleCd_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePPhaseRoleCd_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePPhaseRoleCd(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePPhaseRoleCd", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangePricePerUnit
   Description: This method validates the PricePerUnit.
   OperationID: OnChangePricePerUnit
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangePricePerUnit_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangePricePerUnit_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangePricePerUnit(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangePricePerUnit", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjectID
   Description: Method to call when changing the ProjectID.
Validates this is a "Add", ProjectID does not already exist
   OperationID: OnChangeProjectID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjectID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjectID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjectID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjectID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjectContractID
   Description: Validate on changing Project.ContractID
   OperationID: OnChangeProjectContractID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjectContractID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjectContractID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjectContractID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjectContractID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjectWFGroup
   Description: Update the Project TaskSet fields according to the WF Group.
   OperationID: OnChangeProjectWFGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjectWFGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjectWFGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjectWFGroup(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjectWFGroup", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjPhaseWFGroup
   Description: Update the Project Phase TaskSet fields according to the WF Group.
   OperationID: OnChangeProjPhaseWFGroup
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjPhaseWFGroup_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjPhaseWFGroup_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjPhaseWFGroup(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjPhaseWFGroup", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeQtySurveyor
   Description: This method validates the QtySurveyor.
   OperationID: OnChangeQtySurveyor
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeQtySurveyor_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeQtySurveyor_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeQtySurveyor(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeQtySurveyor", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeQuoteLine
   Description: This method validates the given QuotNum, QuotLine then if valid,
updates the ttProjectQuot dataset row.
   OperationID: OnChangeQuoteLine
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeQuoteLine_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeQuoteLine_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeQuoteLine(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeQuoteLine", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeRateGrpCode
   Description: This method validates the given Project.RateGrpCode, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeRateGrpCode
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeRateGrpCode_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeRateGrpCode_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeRateGrpCode(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeRateGrpCode", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeStartDate
   Description: This method validates the given Project.StartDate, then if valid,
updates the related fields in the dataset row.
   OperationID: OnChangeStartDate
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeStartDate_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeStartDate_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeStartDate(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeStartDate", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeTotalQty
   Description: This method validates the TotalQty.
   OperationID: OnChangeTotalQty
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeTotalQty_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeTotalQty_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeTotalQty(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeTotalQty", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeWBSInvMeth
   Description: This method returns a warning if project phase invoicing method changes to None.
   OperationID: OnChangeWBSInvMeth
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeWBSInvMeth_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeWBSInvMeth_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeWBSInvMeth(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeWBSInvMeth", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnSupCeilingSupplierIDChanged
   Description: OnSupCeilingSupplierIDChanged
   OperationID: OnSupCeilingSupplierIDChanged
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnSupCeilingSupplierIDChanged_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnSupCeilingSupplierIDChanged_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnSupCeilingSupplierIDChanged(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnSupCeilingSupplierIDChanged", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateRecognizeRevenueAtPhaseLevel
   Description: This method validates if Recognize Revenue At Phase Level could be set
   OperationID: ValidateRecognizeRevenueAtPhaseLevel
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateRecognizeRevenueAtPhaseLevel_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRecognizeRevenueAtPhaseLevel_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateRecognizeRevenueAtPhaseLevel(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ValidateRecognizeRevenueAtPhaseLevel", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjPhaseRevMethod
   Description: This method validates changes made to ProjPhase.RevMethod
   OperationID: OnChangeProjPhaseRevMethod
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjPhaseRevMethod_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjPhaseRevMethod_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjPhaseRevMethod(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjPhaseRevMethod", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeProjPhaseEngineerWBSJob
   Description: This method validates changes made to ProjPhase.EngineerWBSJob
   OperationID: OnChangeProjPhaseEngineerWBSJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeProjPhaseEngineerWBSJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeProjPhaseEngineerWBSJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeProjPhaseEngineerWBSJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeProjPhaseEngineerWBSJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method OnChangeEngineerPrjJob
   Description: This method validates changes made to Project.EngineerPrjJob
   OperationID: OnChangeEngineerPrjJob
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/OnChangeEngineerPrjJob_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/OnChangeEngineerPrjJob_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_OnChangeEngineerPrjJob(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/OnChangeEngineerPrjJob", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PhaseIDChanged
   Description: This method set Root phase as Parent phase when creating new phase
   OperationID: PhaseIDChanged
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PhaseIDChanged_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PhaseIDChanged_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PhaseIDChanged(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PhaseIDChanged", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ProjectOrderLineAfterGetNew
   OperationID: ProjectOrderLineAfterGetNew
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/ProjectOrderLineAfterGetNew_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ProjectOrderLineAfterGetNew(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ProjectOrderLineAfterGetNew", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method DuplicateProject
   Description: To create a new Project by duplicating from another. All project Dates are amended according to the new Start Date.
   OperationID: DuplicateProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/DuplicateProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/DuplicateProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_DuplicateProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/DuplicateProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RecalcRevenRecogFieldDataExt
   Description: it receives Doc_fieldName then cuts doc and sends it in RecalcRevenRecogFieldData method.
   OperationID: RecalcRevenRecogFieldDataExt
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcRevenRecogFieldDataExt_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcRevenRecogFieldDataExt_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RecalcRevenRecogFieldDataExt(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RecalcRevenRecogFieldDataExt", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RecalcRevenRecogFieldData
   Description: RecalcRevenRecogFieldData
   OperationID: RecalcRevenRecogFieldData
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecalcRevenRecogFieldData_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecalcRevenRecogFieldData_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RecalcRevenRecogFieldData(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RecalcRevenRecogFieldData", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RefreshEnableRevenueRecognitionFlags
   Description: Refresh Enable Revenue Recognition flags following a call to Recognize
   OperationID: RefreshEnableRevenueRecognitionFlags
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RefreshEnableRevenueRecognitionFlags_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RefreshEnableRevenueRecognitionFlags_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RefreshEnableRevenueRecognitionFlags(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RefreshEnableRevenueRecognitionFlags", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method PreRevenueRecognitionSave
   Description: Save Revenue Recognition information in ProjectCst or ProjPhase so that if an Edit List is printed, it can simulate the Recognize based on the most current information
   OperationID: PreRevenueRecognitionSave
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/PreRevenueRecognitionSave_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/PreRevenueRecognitionSave_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_PreRevenueRecognitionSave(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/PreRevenueRecognitionSave", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method RecognizedSave
   Description: Save Recognition data before posting (in ProjCstHistory table)
   OperationID: RecognizedSave
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/RecognizedSave_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/RecognizedSave_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_RecognizedSave(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/RecognizedSave", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method SetArrayAmtFields
   Description: SetArrayAmtFields
   OperationID: SetArrayAmtFields
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
   Returns: 
      200 Desc: OK => reference#/components/schemas/SetArrayAmtFields_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_SetArrayAmtFields(epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/SetArrayAmtFields", {
          method: 'post',
          headers: headers,
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method TrackerGetByID
   Description: Custom GetByID method to retrieve historical data if necessary.
   OperationID: TrackerGetByID
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TrackerGetByID_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TrackerGetByID_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_TrackerGetByID(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/TrackerGetByID", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method TrueUpCalcActual
   Description: Hold percentages, recalculate Actual burden amounts
   OperationID: TrueUpCalcActual
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TrueUpCalcActual_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TrueUpCalcActual_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_TrueUpCalcActual(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/TrueUpCalcActual", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method TrueUpCreateInvoice
   Description: Create True Up invoice according to true up amounts for each line
   OperationID: TrueUpCreateInvoice
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TrueUpCreateInvoice_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TrueUpCreateInvoice_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_TrueUpCreateInvoice(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/TrueUpCreateInvoice", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method TrueUpGetBdn
   Description: Get dataset of Burden codes and actual amounts
   OperationID: TrueUpGetBdn
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/TrueUpGetBdn_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/TrueUpGetBdn_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_TrueUpGetBdn(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/TrueUpGetBdn", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDataForParentPhaseCombo
   Description: GetDataForParentPhaseCombo
   OperationID: GetDataForParentPhaseCombo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDataForParentPhaseCombo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDataForParentPhaseCombo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDataForParentPhaseCombo(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetDataForParentPhaseCombo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetRowFilterForConRevMethodCombo
   Description: Get FilterRow for Revenue Recognition Method Combo
   OperationID: GetRowFilterForConRevMethodCombo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetRowFilterForConRevMethodCombo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetRowFilterForConRevMethodCombo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetRowFilterForConRevMethodCombo(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetRowFilterForConRevMethodCombo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDataForConRevMethodCombo
   Description: Get Data For ConRevMethod Combo
   OperationID: GetDataForConRevMethodCombo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDataForConRevMethodCombo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDataForConRevMethodCombo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDataForConRevMethodCombo(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetDataForConRevMethodCombo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDataForWBSPhaseRevMethodCombo
   Description: Get Data For WBS Phase RevMethod Combo
   OperationID: GetDataForWBSPhaseRevMethodCombo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDataForWBSPhaseRevMethodCombo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDataForWBSPhaseRevMethodCombo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDataForWBSPhaseRevMethodCombo(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetDataForWBSPhaseRevMethodCombo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetDataForCalcBasedOnCombo
   Description: Get Data For CalcBasedOn Combo
   OperationID: GetDataForCalcBasedOnCombo
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetDataForCalcBasedOnCombo_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetDataForCalcBasedOnCombo_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetDataForCalcBasedOnCombo(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetDataForCalcBasedOnCombo", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ValidateRevision
   Description: Validate entered revision
   OperationID: ValidateRevision
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ValidateRevision_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ValidateRevision_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ValidateRevision(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ValidateRevision", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ExportToMSProjectFile
   Description: This method performs the actual Project Download to MS Project.  Call this
method after the user selected the Project and entered the necessary input
parameters. This method returns the data table ttMSPDownload containing all
appropriate project information. The resulting records from the ttMSPDownload
will then need to be outputted as a CSV file (comma delimited).
   OperationID: ExportToMSProjectFile
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ExportToMSProjectFile_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ExportToMSProjectFile_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ExportToMSProjectFile(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ExportToMSProjectFile", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method ImportFromMSProjectCsvFile
   Description: This method performs the actual Project Upload from MS Project.  Call this
method after the user selected the Project and entered the necessary input
parameters. This method expects an input data table ttImportFromMSP with data
coming from an external comma delimited file.  The ttImportFromMSP table should
only contain data (i.e. if the first line of the external file is just the
field descriptions then this record should not be included in ttImportFromMSP.)
   OperationID: ImportFromMSProjectCsvFile
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/ImportFromMSProjectCsvFile_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/ImportFromMSProjectCsvFile_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_ImportFromMSProjectCsvFile(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/ImportFromMSProjectCsvFile", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProject
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProject
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProject_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProject_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProject(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProject", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewProjectAttch
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewProjectAttch
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewProjectAttch_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewProjectAttch_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewProjectAttch(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewProjectAttch", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewFieldServiceCalls
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewFieldServiceCalls
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewFieldServiceCalls_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewFieldServiceCalls_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewFieldServiceCalls(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewFieldServiceCalls", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewFieldServiceContracts
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewFieldServiceContracts
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewFieldServiceContracts_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewFieldServiceContracts_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewFieldServiceContracts(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewFieldServiceContracts", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBWrkMeasuredHead
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBWrkMeasuredHead
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBWrkMeasuredHead_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBWrkMeasuredHead_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBWrkMeasuredHead(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBWrkMeasuredHead", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}

   /**  
   Summary: Invoke method GetNewPBWrkMeasuredDtl
   Description: Inserts a new row in the DataSet with defaults populated.
   OperationID: GetNewPBWrkMeasuredDtl
      :param epicorHeaders: A string representing the epicor log in information to be used, 
         already converted to base64 in the format username:password, defaults to the configEpicorSchemas creds
      :param requestBody: Desc: Input parameters  => reference#/components/schemas/GetNewPBWrkMeasuredDtl_input
   Returns: 
      200 Desc: OK => reference#/components/schemas/GetNewPBWrkMeasuredDtl_output
      500 Desc: Internal server error. Server is unable to process the request.
   */  
export function post_GetNewPBWrkMeasuredDtl(requestBody:any, epicorHeaders?:Headers){

   var headers = configEpicorSchemas.epicorHeaders
   if(typeof epicorHeaders !== 'undefined'){
         headers = epicorHeaders
   }

   return (new Promise<any>((resolve, reject) => {
      const request: RequestInfo = new Request(configEpicorSchemas.epicorURL + "Erp.BO.ProjectSvc/GetNewPBWrkMeasuredDtl", {
          method: 'post',
          headers: headers,
          body: JSON.stringify(requestBody)
      })
      fetch(request)
      .then((res) => res.json())
      .then((data) => {
         resolve(data as any)
          })
      .catch((error) => {
          reject(error)
      })
   }))
}



//////////////////////////////////////////////////////////////////////////
// OData Schemas:
//////////////////////////////////////////////////////////////////////////
export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_EntityGLCRow{
   "odatametadata":string,
   "value":Erp_Tablesets_EntityGLCRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceCallsRow{
   "odatametadata":string,
   "value":Erp_Tablesets_FieldServiceCallsRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_FieldServiceContractsRow{
   "odatametadata":string,
   "value":Erp_Tablesets_FieldServiceContractsRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBEmpCeilingRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBEmpCeilingRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBRoleRtRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBRoleRtRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSchWrkRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBSchWrkRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBSupCeilingRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBSupCeilingRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredDtlRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBWrkMeasuredDtlRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBWrkMeasuredHeadRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBWrkMeasuredHeadRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBdnSetsRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBdnSetsRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PBillSchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PBillSchRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PConVarRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PConVarRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_PPhaseOperRow{
   "odatametadata":string,
   "value":Erp_Tablesets_PPhaseOperRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjPhaseAttchRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseGLCRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjPhaseGLCRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjPhaseRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjPhaseRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectAttchRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCriteriaRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectCriteriaRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectCstRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectCstRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectJobRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectJobRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectListRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectListRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectMilestoneRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectMilestoneRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderLineRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectOrderLineRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectOrderRelRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectOrderRelRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPORow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectPORow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectPlanContractLineRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectPlanContractLineRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectQuotRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectQuotRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskAttchRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectTaskAttchRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_ProjectTaskRow{
   "odatametadata":string,
   "value":Erp_Tablesets_ProjectTaskRow[],
}

export interface Epicor_RESTApi_Help_ODataSetResponse_System_Collections_Generic_List_Erp_Tablesets_WBSProjPhaseRow{
   "odatametadata":string,
   "value":Erp_Tablesets_WBSProjPhaseRow[],
}

export interface Erp_Tablesets_EntityGLCRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  */  
   "RelatedToFile":string,
      /**  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  */  
   "Key1":string,
      /**   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  */  
   "Key2":string,
      /**   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key3":string,
      /**   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key4":string,
      /**   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key5":string,
      /**   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key6":string,
      /**  Identifier of the GL Control Type.  */  
   "GLControlType":string,
      /**  GL Control Identifier.  */  
   "GLControlCode":string,
      /**  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  */  
   "BusinessEntity":string,
      /**  Global Company identifier.  Used in Multi-Company Journal.  */  
   "ExtCompanyID":string,
      /**  Flag to indicate the account in this record is for an external company.  */  
   "IsExternalCompany":boolean,
      /**  Marks this EntityGLC as global, available to be sent out to other companies.  */  
   "GlobalEntityGLC":boolean,
      /**  Disables this record from receiving global updates.  */  
   "GlobalLock":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  BankAcctID of the related BankAcct record.  */  
   "BankAcctID":string,
   "BankFeeID":string,
      /**  CallCode of the related FSCallCd record.  */  
   "CallCode":string,
   "ChargeCode":string,
      /**  ClassCode of the related FAClass record.  */  
   "ClassCode":string,
      /**  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  */  
   "ClassID":string,
      /**  ContractCode of the related FSContCd record.  */  
   "ContractCode":string,
      /**  CurrencyCode of the related Currency record.  */  
   "CurrencyCode":string,
      /**  CustNum of the related Customer record  */  
   "CustNum":number,
      /**  DeductionID of PRClsDed or PRDeduct.  */  
   "DeductionID":string,
      /**  EmpID of the related PREmpMas record.  */  
   "EmpID":string,
      /**  ExpenseCode of PayTLbr, LabExpCd  */  
   "ExpenseCode":string,
      /**  ExtSystemID of ExtCompany table  */  
   "ExtSystemID":string,
      /**  FromPlant value of the related PlntTranDef record.  */  
   "FromPlant":string,
      /**  GroupCode of the related FAGroup record.  */  
   "GroupCode":string,
   "GroupID":string,
   "HeadNum":number,
   "InvoiceNum":string,
      /**  JCDept of the related JCDept record.  */  
   "JCDept":string,
      /**  MiscCode of the related MiscChrg or PurMisc record.  */  
   "MiscCode":string,
      /**  PartNum of the related Part record.  */  
   "PartNum":string,
      /**  PayTypeID of PayType  */  
   "PayTypeID":string,
   "PerConName":string,
      /**  PI Status  */  
   "PIStatus":string,
      /**  Plant of the related PlantConfCtrl record.  */  
   "Plant":string,
      /**  ProdCode of the related ProdGrup record.  */  
   "ProdCode":string,
      /**  ProjectID of the related Project record.  */  
   "ProjectID":string,
      /**  PurchCode of the related GLPurch record.  */  
   "PurchCode":string,
      /**  RateCode of the related GLRate record.  */  
   "RateCode":string,
      /**  ReasonCode of the related Reason record.  */  
   "ReasonCode":string,
      /**  ReasonType of the related Reason record.  */  
   "ReasonType":string,
      /**  SalesCatID of the related SalesCat record.  */  
   "SalesCatID":string,
      /**  Shift value of the related JCShift record.  */  
   "Shift":number,
      /**  TaxCode of the related SalesTax record.  */  
   "TaxCode":string,
      /**  TaxTblID of PRTaxMas or PRClsTax.  */  
   "TaxTblID":string,
      /**  ToPlant value of the related PlntTranDef record.  */  
   "ToPlant":string,
      /**  TransferMethod of ExtCompany table  */  
   "TransferMethod":string,
      /**  Type ID  */  
   "TypeID":string,
      /**  VendorNum of the related Vendor record.  */  
   "VendorNum":number,
      /**  WarehouseCode of the related Warehse record.  */  
   "WarehouseCode":string,
   "ExpenseTypeCode":string,
   "IsFiltered":boolean,
   "OprTypeCode":string,
   "CashDeskID":string,
   "TIN":string,
   "ReclassCodeID":string,
   "BitFlag":number,
   "GLCntrlDescription":string,
   "GLCntrlTypeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_FieldServiceCallsRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  When creating a new Service Call ,the user is prompted for an Call number. If the field is left blank, the next available Number is assigned by the system. The system generates a number by finding the Call  of the last record on file and then a 1 to it.  */  
   "CallNum":number,
      /**  This field along with Company and CallNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last FSCalPrt record for the Call and the adding 1 to it.  */  
   "CallLine":number,
      /**  The PartNum field identifies the Part  */  
   "PartNum":string,
      /**  Optional field that contains the customers revision. Default from the Part.RevisionNum field.  */  
   "RevisionNum":string,
      /**  Line Item description. The Part.Description can be used as a default.  */  
   "LineDesc":string,
      /**  Serial number of the part being repaired.  */  
   "SerialNumber":string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  */  
   "IUM":string,
      /**  TotalCall Quantity for the line item.  */  
   "CallQty":number,
      /**  Packing slip number that this Service call is linked with.  */  
   "PackNum":number,
      /**  The packing slip line that holds the warranty information for this service call  */  
   "PackLine":number,
      /**  Unique code for the Warranty  */  
   "WarrantyCode":string,
      /**  Contract Number if this item is under a contract  */  
   "ContractNum":number,
      /**  This is the contract line the relates to the item on the service call.  */  
   "ContractLine":number,
      /**  A unique code that identifies the Contract  */  
   "ContractCode":string,
      /**  Contains comments about the Item in need of service. These will be printed on the ServiceCall.  */  
   "CallComment":string,
      /**  Used to establish invoice comments about the repaired item. These will copied into the Invoice detail file as defaults.  */  
   "InvoiceComment":string,
      /**  Problem reason code from the reason master table. type problem.  */  
   "ProbReasonCode":string,
      /**  Product Group Code. Use the xasyst.CallProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   "ProdCode":string,
      /**  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  */  
   "XPartNum":string,
      /**  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  */  
   "XRevisionNum":string,
      /**  Are Material cost covered  */  
   "MatCovered":boolean,
      /**  Is Labor Cost Covered  */  
   "LabCovered":boolean,
      /**  Are misc. Costs Covered  */  
   "MiscCovered":boolean,
      /**  Project ID of the Project table record that this FSCallDt record. Can be blank.  */  
   "ProjectID":string,
      /**  Job Number.  Associates the Call Line record back its linked JobHead record.  Not directly maintainable.  */  
   "JobNum":string,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "BitFlag":number,
   "ProjectDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_FieldServiceContractsRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Contract Number of the Contract  */  
   "ContractNum":number,
      /**  This field along with Company and ContractNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the FSContDtl record for the Contract and the adding 1 to it.  The user can override this number if they wish.  */  
   "ContractLine":number,
      /**  A unique code that identifies the Contract  */  
   "ContractCode":string,
      /**  The PartNum field identifies the Part  */  
   "PartNum":string,
      /**  Optional field that contains the customers revision. Default from the Part.RevisionNum field.  */  
   "RevisionNum":string,
      /**  Line Item description. The Part.Description can be used as a default.  */  
   "LineDesc":string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if its a valid Part.  */  
   "IUM":string,
      /**  Price per unit for the Contract in base currency.  Defaults from the FScontCd table  */  
   "PricePerUnit":number,
      /**  Price per unit for the Contract in customers currency.  Defaults from the FScontCd table  */  
   "DocPricePerUnit":number,
      /**  Total Contract Quantity for the line item.  */  
   "ContractQty":number,
      /**  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   "ProdCode":string,
      /**  Used to establish invoice comments about the Contract line item. These will copied into the Invoice detail  file as defaults.  */  
   "InvoiceComment":string,
      /**  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the FSContDt records for a specific customer.  */  
   "CustNum":number,
      /**  Contains the Order Number that ties this detail record back to an OrderHed record.  */  
   "OrderNum":number,
      /**  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  */  
   "OrderLine":number,
      /**  Project ID of the Project table record that this FSContDt record. Can be blank.  */  
   "ProjectID":string,
      /**  Editor widget for Contract comments.  */  
   "CommentText":string,
      /**   A value of "ORD-ENT" indicates that this Service contract is related to a specific Sales Order and its line items and will be created and maintained from there, It will print on the Order acknowledgment and be invoiced with the sales order item as they are shipped.  A Value of "Cnt-Ent" indicates that this Service Contract was created from the service contract entry programs.  It is not directly related to a sales order; it will be printed by itself and invoiced by itself.
(Duplicated from FSContHd for Browse)  */  
   "ContractType":string,
      /**  Contains comments about the detail contract line item. These will be printed on the Sales Acknowledgements and service contracts  */  
   "ContractComment":string,
      /**  Sold to Order Number  */  
   "SoldOrderNum":number,
      /**  Sold To Order line  */  
   "SoldOrderLine":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Currency Code of the related record  */  
   "CurrencyCode":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBEmpCeilingRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  Employee  ID foreign key to the EmpBasic table  */  
   "EmpID":string,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling  */  
   "Ceiling":number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Project currency  */  
   "DocCeiling":number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt1Ceiling":number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt2Ceiling":number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt3Ceiling":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "CurrencyCode":string,
   "BitFlag":number,
   "EmpBasicName":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBRoleRtRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  Project Role Code  */  
   "RoleCd":string,
      /**  The effective date of the project role code rate.  */  
   "RateEffDate":string,
      /**  Time Type Code  */  
   "TimeTypCd":string,
      /**  The charge rate for project role code expressed in the designated currency code.  */  
   "ChargeRate":number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.  */  
   "Ceiling":number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Project currency  */  
   "DocCeiling":number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   "Rpt1Ceiling":number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   "Rpt2Ceiling":number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   "Rpt3Ceiling":number,
      /**  Labor transactions used this Role Code won?t be included in the invoice preparation.  */  
   "ExcludeInvoiced":boolean,
      /**  The end date is used if the rate will only be in affect up to this date.  */  
   "RateEndDate":string,
      /**  Sequence Number  */  
   "Seq":number,
      /**  Role Code Markup Percent  */  
   "PrcMarkup":number,
      /**  Flag to indicate if the value of the PrcMarkup field should be used as an override markup for this role code on this contract  */  
   "OridePrcMarkup":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "CurrencyCode":string,
   "BitFlag":number,
   "RoleCdRoleDescription":string,
   "TimeTypCdDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBSchWrkRow{
      /**  Company  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  User defined ID to be used for this Schedule of Works.  */  
   "SchWrkID":string,
      /**  Schedule of Works description  */  
   "Description":string,
      /**  Free form text for Schedule of Works details.  */  
   "Details":string,
      /**  Planned completion date for reference only, can be blank.  */  
   "PlanCmplDte":string,
      /**  Estimated completion date for reference only, can be blank.  */  
   "EstComplDte":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBSupCeilingRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  Supplier Number, foreign key to the Vendor table  */  
   "VendorNum":number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling  */  
   "Ceiling":number,
      /**  Supplier?s Markup percentage  */  
   "PrcMarkup":number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Project currency  */  
   "DocCeiling":number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt1Ceiling":number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt2Ceiling":number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   "Rpt3Ceiling":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "CurrencyCode":string,
   "BitFlag":number,
   "VendorDefaultFOB":string,
   "VendorTermsCode":string,
   "VendorCity":string,
   "VendorName":string,
   "VendorAddress2":string,
   "VendorAddress1":string,
   "VendorVendorID":string,
   "VendorCountry":string,
   "VendorZIP":string,
   "VendorAddress3":string,
   "VendorCurrencyCode":string,
   "VendorState":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBWrkMeasuredDtlRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  Foreign key to the measured work header.  */  
   "MeasuredWorkID":string,
      /**  System generated number from a counter held on the Measured Work Header.  */  
   "DtlSeq":number,
      /**  Description  */  
   "Description":string,
      /**  Date that the Quantity Surveyor was on site to establish the measurement readings.  */  
   "DateonSite":string,
      /**  Quantity Surveyor is a Foreign Key field to the Shop Employee table, defaults from the Quantity Surveyor of the Measured Work Header.  */  
   "QtySurveyor":string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure  */  
   "ActAmount":number,
      /**  Date that the Measured Work Activity status is set to Approved.  */  
   "ApprovalDate":string,
      /**  Status is applied to this Measured Work Activity. The available codes are ? S = Progress, D = Dispute, A = Approved, P = Posted.  */  
   "ActStatus":string,
      /**  Activity Notes is used as comments for free format text entry.  */  
   "ActNotes":string,
      /**  Issue Resolution Notes is used as comments for free format text entry.  */  
   "IssueNotes":string,
      /**  Amount the customer?s quantity surveyor has agreed for this activity.  */  
   "ApprovalAmt":number,
      /**  Date that the customer?s quantity surveyor agreed the activity amount.  */  
   "CustApprovalDate":string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Project currency  */  
   "DocActAmount":number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   "Rpt1ActAmount":number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   "Rpt2ActAmount":number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   "Rpt3ActAmount":number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Project currency  */  
   "DocApprovalAmt":number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   "Rpt1ApprovalAmt":number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   "Rpt2ApprovalAmt":number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   "Rpt3ApprovalAmt":number,
      /**  Progress Billing Invoice Number  */  
   "PBInvNum":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  A number used to identify the Customer Qty Surveyor record for the related customer.  */  
   "ConNum":number,
   "CurrencyCode":string,
      /**  Contract customer from Project  */  
   "ConCustNum":number,
      /**  List of warning messages (set after update)  */  
   "WarningList":string,
      /**  Used to determine whether the activity record can be updated. Is set to true if there is a related PBGInvcDtlFF where the PBGInvcHead is approved.  */  
   "InvcIsApproved":boolean,
   "CurrencySwitch":boolean,
      /**  Monetary Activity Amount in Base is used for separate control in UI  */  
   "CurActAmount":number,
      /**  Monetary Activity Amount in Project currency is used for separate control than Percentage/Hours in UI  */  
   "DocCurActAmount":number,
      /**  Monetary Activity Amount in Rpt1 is used for separate control than Percentage/Hours in UI  */  
   "Rpt1CurActAmount":number,
      /**  Monetary Activity Amount in Rpt2 is used for separate control than Percentage/Hours in UI  */  
   "Rpt2CurActAmount":number,
      /**  Monetary Activity Amount in Rpt3 is used for separate control than Percentage/Hours in UI  */  
   "Rpt3CurActAmount":number,
      /**  Monetary Approved Amount in Base is used for separate control than Percentage/Hours in UI  */  
   "CurApprovalAmt":number,
      /**  Monetary Approved Amount in Project currency is used for separate control than Percentage/Hours in UI  */  
   "DocCurApprovalAmt":number,
      /**  Monetary Approved Amount in Rpt1 is used for separate control than Percentage/Hours in UI  */  
   "Rpt1CurApprovalAmt":number,
      /**  Monetary Approved Amount in Rpt2 is used for separate control than Percentage/Hours in UI  */  
   "Rpt2CurApprovalAmt":number,
      /**  Monetary Approved Amount in Rpt3 is used for separate control than Percentage/Hours in UI  */  
   "Rpt3CurApprovalAmt":number,
   "InvoiceNum":number,
   "TmpInvcNum":number,
   "InvoiceLine":number,
      /**  Name of the customer's quantity surveyor who has confirmed the measured work amount.  */  
   "CustQtySurveyor":string,
   "BitFlag":number,
   "EmpBasicName":string,
   "PBWrkMeasuredHeadActivityUnit":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBWrkMeasuredHeadRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  User defined ID for the measured work activity.  */  
   "MeasuredWorkID":string,
      /**  Short description for the Measured Work Activity  */  
   "Description":string,
      /**  Standard comment field  */  
   "Details":string,
      /**  Activity Unit with the following options: P = Percentage, H = Hours, C = Cost, L = Linear, M = Monetary.  */  
   "ActivityUnit":string,
      /**  Quantity Surveyor is a Foreign Key field to the Shop Employee table.  */  
   "QtySurveyor":string,
      /**  Total quantity for the measured work.  */  
   "TotalQty":number,
      /**  Contractual amount of the work in the Activity Unit  */  
   "TotalAmt":number,
      /**  Parent Billing Schedule is a Foreign Key field to the Billing Schedules. It can be set as blank if the Measured Work does not need to be included in a Billing Schedule  */  
   "ParentBillSchID":string,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit.  */  
   "PricePerUnit":number,
      /**  Foreign Key field to the Schedule of Works. It can be set to blank if the Measured Work does not need to linked to a Schedule of Work.  */  
   "ParentWrkSchID":string,
      /**  Cost Plus Percent is only used when the Activity Unit is defined as Cost.  */  
   "CostPlusPrc":number,
      /**  Percentage of Contract  */  
   "ContractPrc":number,
      /**  Counter, Last sequence set to the Measured Activity Detail  */  
   "LastDtlSeq":number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Project currency  */  
   "DocPricePerUnit":number,
      /**  Contractual amount of the work in the Activity Unit in the Project currency  */  
   "DocTotalAmt":number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   "Rpt1PricePerUnit":number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   "Rpt1TotalAmt":number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   "Rpt2PricePerUnit":number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   "Rpt2TotalAmt":number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   "Rpt3PricePerUnit":number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   "Rpt3TotalAmt":number,
      /**  Invoiced to date in Reported 3 Currency  */  
   "Rpt3TotInvoiced":number,
      /**  Invoiced to date in Reported 2 Currency  */  
   "Rpt2TotInvoiced":number,
      /**  Invoiced to date in Reported 1 Currency  */  
   "Rpt1TotInvoiced":number,
      /**  Invoiced to date in Base Currency  */  
   "TotInvoiced":number,
      /**  Invoiced To Date in the Activity Unit  */  
   "DocTotInvoiced":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "CurrencyCode":string,
   "CurrencySwitch":boolean,
   "DocCurInvoiced":number,
      /**  Invoiced in Base currency  */  
   "CurInvoiced":number,
      /**  Invoiced in Repostable currency 1  */  
   "Rpt1CurInvoiced":number,
      /**  Rpt2 Invoiced  */  
   "Rpt2CurInvoiced":number,
      /**  Rpt2 Invoiced amount  */  
   "Rpt3CurInvoiced":number,
   "ExistDtlInvoiced":boolean,
   "ActivityUnitIsMoney":boolean,
   "BitFlag":number,
   "ParentBillingScheduleDescription":string,
   "ParentScheduleWorkDescription":string,
   "QtySurveyorFirstName":string,
   "QtySurveyorLastName":string,
   "QtySurveyorName":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBdnSetsRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Project ID.  */  
   "ProjectID":string,
      /**  Burden Set ID.  */  
   "BdnSetID":string,
      /**  When a provisional percent is changed in Burden Set Maint for this burden set this flag will be set to true to indicate that the rate has changed. This is then used during the invoice preparation process to calculate the burden true up going back to the beginning of the fiscal year. This will ONLY takes place during the invoice preparation when the new rates come into effect. When that invoice is approved then this flag will be set back to false.  */  
   "HasChanges":boolean,
      /**  When new row is added it?s defaulted by last sequence plus 10. Can be changed.  */  
   "Seq":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  This field is used to determine if Burden Sets can be added to Project Activity Billing or to Progress Payment Invoice panels  */  
   "ConInvMeth":string,
   "BitFlag":number,
   "BdnSetDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PBillSchRow{
      /**  Company Identifier  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  User defined ID to be used for this Billing Schedule.  */  
   "BillSchedID":string,
      /**  It indicates whether the Billing Schedule is inactive. If true it will be excluded from the invoice generation process.  */  
   "InActive":boolean,
      /**  Billing Schedule description  */  
   "Description":string,
      /**  Billing Schedule frequency.Code/Desc:W = Weekly, M = Monthly, Q = Quarterly, A = Annually  */  
   "SchedFreq":string,
      /**  Number of periods in months for defect liability. For reference only.  */  
   "LiabilityMonths":number,
      /**  This is the date that the user wants to the first invoice to be generated. This will be controlled by the field ?Invoiced to Date? is greater than zero.  */  
   "StartDate":string,
      /**  System generated field. When the record is first created this will default to the Start Date field value. When the Project Entry ? Invoice Generation Process has been run in ?Update? mode the system will set this field dependant on the Schedule Frequency defined.  */  
   "NextDate":string,
      /**  Total contractual value for this  Billing Schedule  */  
   "TotValue":number,
      /**  Percentage of the invoice that is to be retained  */  
   "RetentionPcnt":number,
      /**  When it's set to true the invoice process will reduce the invoice amount by the retention value.  */  
   "ReduceInvByRet":boolean,
      /**  Shows the number of invoices that have been produced. (System generated).  */  
   "NumInvoices":number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated).  */  
   "TotInvoiced":number,
      /**  Total Retention  */  
   "TotRetention":number,
      /**  Sales order number  */  
   "OrderNum":number,
      /**  Sales order number  */  
   "OrderLine":number,
      /**  Product Group that will be used for the invoice posting and the posting or retentions and also the deferred revenue.  */  
   "ProdCode":string,
      /**  Setting this to true will cause a General Journal to be produced as part of the Billing Schedule process to post the Retentions to the Product Group Retentions account.  */  
   "PostRetProdGrp":boolean,
      /**  Billing Schedule manager  */  
   "Manager":string,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Project currency  */  
   "DocTotInvoiced":number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   "Rpt1TotInvoiced":number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   "Rpt2TotInvoiced":number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   "Rpt3TotInvoiced":number,
      /**  in the Project currency  */  
   "DocTotRetention":number,
      /**  in the Reporting currency  */  
   "Rpt1TotRetention":number,
      /**  in the Reporting currency  */  
   "Rpt2TotRetention":number,
      /**  in the Reporting currency  */  
   "Rpt3TotRetention":number,
      /**  Total contractual value for this  Billing Schedule in the Project currency  */  
   "DocTotValue":number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   "Rpt1TotValue":number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   "Rpt2TotValue":number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   "Rpt3TotValue":number,
      /**  Indicates the billling schedule has been closed and no further activity can take place.  */  
   "Closed":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "CurrencyCode":string,
      /**  Project Phase (Patch Field)  */  
   "PhaseID":string,
   "BitFlag":number,
   "ManagerName":string,
   "ProjectIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PConVarRow{
      /**  Company  */  
   "Company":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  User defined variance reference ID  */  
   "VarRefID":string,
      /**  Short description of the variant  */  
   "Description":string,
      /**  The date that the variant was generated  */  
   "DateEntered":string,
      /**  The name of the person entering the variant  */  
   "EnteredBy":string,
      /**  Free format to describe the variant.  */  
   "Details":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_PPhaseOperRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Project Phase is a foregn key to the ProjPhase table  */  
   "PhaseID":string,
      /**  Operation code, reference to the OpMaster table  */  
   "OpCode":string,
      /**  Sequence  */  
   "Seq":number,
      /**  Hours that are required to perform the operation  */  
   "EstHours":number,
      /**  Project Role Code, reference to the PrjRoleCd table  */  
   "RoleCd":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Indicates if the EstHours field should be enabled.  */  
   "EnableEstHours":boolean,
      /**  Indicates whether the OpCode field should be enabled  */  
   "EnableOpCode":boolean,
   "BitFlag":number,
   "OpCodeOpDesc":string,
   "PhaseIDDescription":string,
   "RoleCdRoleDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjPhaseAttchRow{
   "Company":string,
   "ProjectID":string,
   "PhaseID":string,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjPhaseGLCRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  */  
   "RelatedToFile":string,
      /**  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  */  
   "Key1":string,
      /**   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  */  
   "Key2":string,
      /**   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key3":string,
      /**   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key4":string,
      /**   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key5":string,
      /**   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   "Key6":string,
      /**  Identifier of the GL Control Type.  */  
   "GLControlType":string,
      /**  GL Control Identifier.  */  
   "GLControlCode":string,
      /**  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  */  
   "BusinessEntity":string,
      /**  Global Company identifier.  Used in Multi-Company Journal.  */  
   "ExtCompanyID":string,
      /**  Flag to indicate the account in this record is for an external company.  */  
   "IsExternalCompany":boolean,
      /**  Marks this EntityGLC as global, available to be sent out to other companies.  */  
   "GlobalEntityGLC":boolean,
      /**  Disables this record from receiving global updates.  */  
   "GlobalLock":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Project ID  */  
   "ProjectID":string,
      /**  WBS Phase ID  */  
   "PhaseID":string,
   "BitFlag":number,
   "GLCntrlDescription":string,
   "GLCntrlTypeDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjPhaseRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Description  */  
   "Description":string,
      /**  Task start date.  */  
   "StartDate":string,
      /**  Task due date.  */  
   "DueDate":string,
      /**  Must be greater than or equal to 0.  */  
   "PercentComplete":number,
      /**  Date this task was complete.  */  
   "DateComplete":string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   "PhaseStatus":string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   "Duration":number,
      /**  Reference to the job number created for the WBS Phase.  */  
   "WBSJobNum":string,
      /**  This is the parent phase for this WBS Phase. On the UK software this currently uses field ShortChar01  */  
   "ParentPhase":string,
      /**  The task ID that is returned from Microsoft Project.  */  
   "MSPTaskID":string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   "MSPPredecessor":string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Total budget labour hours for the Project phase  */  
   "BudTotLbrHours":number,
      /**  Total budget burden hours for the Project phase.  */  
   "BudTotBurHrs":number,
      /**  Total budget labour cost for the Project phase. This is production and setup combined.  */  
   "BudTotLbrCost":number,
      /**  Total budget burden cost for the Project phase. This is production and setup combined.  */  
   "BudTotBurCost":number,
      /**  Total budget subcontract costs for the Project phase  */  
   "BudTotSubCost":number,
      /**  Total budget material costs for the Project phase  */  
   "BudTotMtlCost":number,
      /**  Total budget material burden costs for the Project phase.  */  
   "BudTotMtlBurCost":number,
      /**  Total estimated labour hours for the Project phase  */  
   "TotEstLbrHrs":number,
      /**  Total estimated burden hours for the Project phase  */  
   "TotEstBurdenHrs":number,
      /**  Total estimated labour cost for the Project phase. This is production and setup combined.  */  
   "TotEstLbrCost":number,
      /**  Total estimated subcontract costs for the Project phase  */  
   "TotEstSubContCost":number,
      /**  Total estimated material costs for the Project phase  */  
   "TotEstMtlCost":number,
      /**  Total actual labour hours for the Project phase  */  
   "TotActLbrHrs":number,
      /**  Total actual burden hours for the Project phase  */  
   "TotActBurHrs":number,
      /**  Total actual labour cost for the Project phase. This is production and setup combined.  */  
   "TotActLbrCost":number,
      /**  Total actual burden cost for the Project phase. This is production and setup combined.  */  
   "TotActBurCost":number,
      /**  Total actual subcontract costs for the Project phase.  */  
   "TotActSubContCost":number,
      /**  Total actual material costs for the Project phase  */  
   "TotActMtlCost":number,
      /**  Total actual material burden costs for the Project phase.  */  
   "TotActMtlBurCost":number,
      /**  Manually entered estimate to complete for the labour hours for the project phase  */  
   "ManEstCtcLbrHrs":number,
      /**  Manually entered estimate to complete for the burden hours.  */  
   "ManEstCtcBurHrs":number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project phase.  */  
   "ManEstCtcLbrCost":number,
      /**  Manually entered estimate to complete for the burden cost for the project phase.  */  
   "ManEstCtcBurCost":number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project phase.  */  
   "ManEstCtcSubConCost":number,
      /**  Manually entered estimate to complete for the material cost for the project phase.  */  
   "ManEstCtcMtlCost":number,
      /**  Manually entered estimate to complete for the material burden cost for the project phase.  */  
   "ManEstCtcMtlBurCost":number,
      /**  Total calculated cost to complete labour hours for the Project phase.  */  
   "TotCtcLbrHours":number,
      /**  Total calculated cost to complete burden hours for the Project phase.  */  
   "TotCtcBurHours":number,
      /**  Total calculated cost to complete labour cost for the Project phase. This will be both production and setup.  */  
   "TotCtcLbrCost":number,
      /**  Total calculated cost to complete burden cost for the Project phase. This will be both production and setup.  */  
   "TotCtcBurCost":number,
      /**  Total calculated cost to complete subcontract cost for the Project phase.  */  
   "TotCtcSubConCost":number,
      /**  Total calculated cost to complete material cost for the Project phase.  */  
   "TotCtcMtlCost":number,
      /**  Total calculated cost to complete material burden cost for the Project phase.  */  
   "TotCtcMtlBurCost":number,
      /**  Total quoted labour hours for the Project phase  */  
   "TotQuotLbrHrs":number,
      /**  Total quoted burden hours for the Project phase.  */  
   "TotQuotBurHrs":number,
      /**  Total quoted labour cost for the Project phase. This will be both production and setup.  */  
   "TotQuotLbrCost":number,
      /**  Total quoted burden cost for the Project phase. This will be both production and setup.  */  
   "TotQuotBurCost":number,
      /**  Total quoted subcontract cost for the Project phase.  */  
   "TotQuotSubContCost":number,
      /**  Total quoted material cost for the Project phase.  */  
   "TotQuotMtlCost":number,
      /**  Total quoted material burden cost for the Project phase.  */  
   "TotQuotMtlBurCost":number,
      /**  This holds the bom level of the phase reletive to the parent.  */  
   "Level":number,
      /**  This is will either be Hours or Days  */  
   "DurationType":string,
      /**  Total estimated burden cost for the Project phase. This is production and setup combined.  */  
   "TotEstBurCost":number,
      /**  Total estimated material burden costs for the Project phase  */  
   "TotEstMtlBurCost":number,
      /**  'Roll Child Manual Cost to Complete to this Level  */  
   "RollChildMan":boolean,
      /**  Roll Child Budgets to this Level  */  
   "RollChildBud":boolean,
      /**  Sort Sequence of the project phase.  This field controls where on the project tree the phase needs to be displayed.  */  
   "SortSeq":number,
      /**  Reference to the Measured Work header.  It is used to collect the cost to determine if the Measured Work was profitable or not.  */  
   "MeasuredWorkID":string,
      /**  Total quoted other direct cost for the Project phase.  */  
   "TotQuotODCCost":number,
      /**  Total estimated other direct costs for the Project phase  */  
   "TotEstODCCost":number,
      /**  Total actual other direct costs for the Project phase.  */  
   "TotActODCCost":number,
      /**  Other direct cost manual CTC  */  
   "ManEstCTCODCCost":number,
      /**  Total calculated cost to complete other direct cost for the Project phase.  */  
   "TotCTCODCCost":number,
      /**  Other direct cost Budget Total  */  
   "BudTotODCCost":number,
      /**  Defines the Approvals Method for Time related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   "TimeApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Time transactions related to this WBS Phase.  */  
   "TimeWFGroupID":string,
      /**  Defines the Approvals Method for Expenses related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   "ExpenseApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Expense transactions related to this WBS Phase.  */  
   "ExpenseWFGroupID":string,
      /**  PartNum  */  
   "PartNum":string,
      /**  RevisionNum  */  
   "RevisionNum":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Invoicing Method  */  
   "InvMethod":string,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery.  */  
   "RevMethod":string,
      /**  Sales Order Number  */  
   "OrderNum":number,
      /**  Sales Order Line  */  
   "OrderLine":number,
      /**  If any activity of the job assigned to the Phase has been recognized or invoiced  */  
   "WasRecInvoiced":boolean,
      /**  Date of last Build WBS Phase Analysis run.  */  
   "LastBuildWBSPhaseAnalysisDate":string,
      /**  Percentage of Completion  */  
   "PercentageOfCompletion":number,
      /**  Labor Cost To Be Recognized  */  
   "ToBeRecognizedLbrCost":number,
      /**  Burden Cost To Be Recognized  */  
   "ToBeRecognizedBurCost":number,
      /**  Material Cost To Be Recognized  */  
   "ToBeRecognizedMtlCost":number,
      /**  Subcontract Cost To Be Recognized  */  
   "ToBeRecognizedSubCost":number,
      /**  Material Burden Cost To Be Recognized  */  
   "ToBeRecognizedMtlBurCost":number,
      /**  ODC Cost To Be Recognized  */  
   "ToBeRecognizedODCCost":number,
      /**  Revenue To Be Recognized  */  
   "ToBeRecognizedRevenue":number,
      /**  When true,  Recognize Revenue separately at Child WBS Phases.  When false, Recognize Revenue for this phase and all child phases at this level.  */  
   "RecognizeRevenueAtChildPhaseLevel":boolean,
      /**  To control if the project phase budget values are to be rolled up to the project phase.  */  
   "RollBudgetsToWBSPhase":boolean,
      /**  TotWBSPhaseRev  */  
   "TotWBSPhaseRev":number,
      /**  The sales category code used in the Revenue recognition process.  */  
   "SalesCatID":string,
      /**  ActMtlNonJobCost  */  
   "ActMtlNonJobCost":number,
      /**  AsOfDate  */  
   "AsOfDate":string,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   "BdnRecSeqPosted":number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   "BdnRecSeqLastAdded":number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   "BdnRevenueAutoToday":number,
      /**  BillingToDate  */  
   "BillingToDate":number,
      /**  BuildAnalysis  */  
   "BuildAnalysis":boolean,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   "BurdenCostOfSales":number,
      /**  BurdenLbrCstToDate  */  
   "BurdenLbrCstToDate":number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "BurdenRecAutoCstTodate":number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   "BurdenRecManCstTodate":number,
      /**  BurManPosted  */  
   "BurManPosted":number,
      /**  BurPur  */  
   "BurPur":number,
      /**  Estimated burden cost.  */  
   "EstBurdenCost":number,
      /**  Estimated burden hours.  */  
   "EstBurdenHours":number,
      /**  Estimated labor cost.  */  
   "EstLaborCost":number,
      /**  Estimated labor hours.  */  
   "EstLaborHours":number,
      /**  Estimated material burden cost.  */  
   "EstMtlBurdenCost":number,
      /**  Estimated material cost.  */  
   "EstMtlCost":number,
      /**  Estimated other direct cost.  */  
   "EstODCCost":number,
      /**  Estimated subcontract cost.  */  
   "EstSubcontractCost":number,
      /**  The labour costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   "LaborCostOfSales":number,
      /**  LaborLbrCstToDate  */  
   "LaborLbrCstToDate":number,
      /**  The labour costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "LaborRecAutoCstTodate":number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "LaborRecManCstTodate":number,
      /**  LbrManPosted  */  
   "LbrManPosted":number,
      /**  LbrPur  */  
   "LbrPur":number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   "MaterialCostOfSales":number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "MaterialRecAutoCstTodate":number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MaterialRecManCstTodate":number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   "MtlBurdenCostOfSales":number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   "MtlBurdenRecAutoCstTodate":number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MtlBurdenRecManCstTodate":number,
      /**  MtlBurManPosted  */  
   "MtlBurManPosted":number,
      /**  MtlBurPur  */  
   "MtlBurPur":number,
      /**  MtlManPosted  */  
   "MtlManPosted":number,
      /**  MtlPur  */  
   "MtlPur":number,
      /**  NextTmpInvcNum  */  
   "NextTmpInvcNum":number,
      /**  ODCManPosted  */  
   "ODCManPosted":number,
      /**  ODCPur  */  
   "ODCPur":number,
      /**  Other Direct cost Recognition to Date  */  
   "ODCRecAutoCstToDate":number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   "ODCRecManCstTodate":number,
      /**  RecManPosted  */  
   "RecManPosted":number,
      /**  RecogToDtBilling  */  
   "RecogToDtBilling":number,
      /**  RecogToDtLbk  */  
   "RecogToDtLbk":number,
      /**  RecogToDtManual  */  
   "RecogToDtManual":number,
      /**  RetentionDt  */  
   "RetentionDt":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   "RevenueRecAutoToDate":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   "RevenueRecManToDate":number,
      /**  Reverse  */  
   "Reverse":string,
      /**  RollManEstToCpte  */  
   "RollManEstToCpte":boolean,
      /**  SubCManPosted  */  
   "SubCManPosted":number,
      /**  SubConCostOfSales  */  
   "SubConCostOfSales":number,
      /**  SubConRecAutoCstTodate  */  
   "SubConRecAutoCstTodate":number,
      /**  SubConRecManCstTodate  */  
   "SubConRecManCstTodate":number,
      /**  SubPur  */  
   "SubPur":number,
      /**  Total contract value for the WBS Phase.  */  
   "ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Document currency.  */  
   "DocConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt1ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt2ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt3ConTotValue":number,
      /**  Net total contract value for the WBS Phase.  */  
   "ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Document currency.  */  
   "DocConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt1ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt2ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt3ConTotValueNet":number,
   "CloseWBSJob":boolean,
   "CurrencyCode":string,
   "DocBudTotBurCost":number,
   "DocBudTotLbrCost":number,
   "DocBudTotMtlBurCost":number,
   "DocBudTotMtlCost":number,
   "DocBudTotODCCost":number,
   "DocGTActualCost":number,
   "DocGTBudgetCost":number,
   "DocGTCalculatedCost":number,
   "DocGTEstimatedCost":number,
   "DocGTManualCost":number,
   "DocGTQuotedCost":number,
   "DocManEstCtcBurCost":number,
   "DocManEstCtcLbrCost":number,
   "DocManEstCtcMtlBurCost":number,
   "DocManEstCtcMtlCost":number,
   "DocManEstCTCODCCost":number,
   "DocManEstCtcSubConCost":number,
   "DocProjectedTotalBurCost":number,
   "DocProjectedTotalCost":number,
   "DocProjectedTotalLbrCost":number,
   "DocProjectedTotalMtlBurCost":number,
   "DocProjectedTotalMtlCost":number,
   "DocProjectedTotalODCCost":number,
   "DocProjectedTotalSubContCost":number,
   "DocTotActSubContCost":number,
   "DocTotCtcBurCost":number,
   "DocTotCtcLbrCost":number,
   "DocTotCtcMtlBurCost":number,
   "DocTotCtcMtlCost":number,
   "DocTotCTCODCCost":number,
   "DocTotCtcSubConCost":number,
   "DocTotEstBurCost":number,
   "DocTotEstLbrCost":number,
   "DocTotEstMtlBurCost":number,
   "DocTotEstMtlCost":number,
   "DocTotEstODCCost":number,
   "DocTotEstSubContCost":number,
   "DocTotQuotBurCost":number,
   "DocTotQuotLbrCost":number,
   "DocTotQuotMtlBurCost":number,
   "DocTotQuotMtlCost":number,
   "DocTotQuotODCCost":number,
   "DocTotQuotSubContCost":number,
   "EnableApprovals":boolean,
      /**  This flag indicates whether ProjPhase.RecognizeRevenueAtChildPhaseLevel should be enabled in the UI.  */  
   "EnableRecognizeRevenueAtChildPhaseLevel":boolean,
      /**  Flag to indicate whether the PPhaseOper for this ProjPhase should allow updates based on the status of the WBSJobNum.  */  
   "EnableUpdOper":boolean,
   "EngineerWBSJob":boolean,
   "ExpenseDefTaskSetID":string,
   "ExpenseTaskSetDescription":string,
   "ExpenseWFGroupIDDescription":string,
   "GTActualCost":number,
   "GTBudgetCost":number,
   "GTCalculatedCost":number,
   "GTEstimatedCost":number,
   "GTManualCost":number,
   "GTQuotedCost":number,
   "IsRootPhase":boolean,
      /**  used to display Due date of the WBS phase job when scheduled  */  
   "JobDueDate":string,
      /**  used to display Start date of the WBS phase job when scheduled  */  
   "JobStartDate":string,
   "ParentPhaseIsRootPhase":boolean,
   "PhaseDesc":string,
   "PInvMethod":string,
   "PRevMethod":string,
   "ProjectedTotalBurCost":number,
   "ProjectedTotalCost":number,
   "ProjectedTotalLbrCost":number,
   "ProjectedTotalMtlBurCost":number,
   "ProjectedTotalMtlCost":number,
   "ProjectedTotalODCCost":number,
   "ProjectedTotalSubContCost":number,
      /**  External Field To create a WBS Phase Combo  */  
   "ProjPhaseID":string,
   "ReleaseWBSJob":boolean,
   "Rpt1BudTotBurCost":number,
   "Rpt1BudTotLbrCost":number,
   "Rpt1BudTotMtlBurCost":number,
   "Rpt1BudTotMtlCost":number,
   "Rpt1BudTotODCCost":number,
   "Rpt1BudTotSubCost":number,
   "Rpt1GTActualCost":number,
   "Rpt1GTBudgetCost":number,
   "Rpt1GTCalculatedCost":number,
   "Rpt1GTEstimatedCost":number,
   "Rpt1GTManualCost":number,
   "Rpt1GTQuotedCost":number,
   "Rpt1ManEstCtcBurCost":number,
   "Rpt1ManEstCtcLbrCost":number,
   "Rpt1ManEstCtcMtlBurCost":number,
   "Rpt1ManEstCtcMtlCost":number,
   "Rpt1ManEstCTCODCCost":number,
   "Rpt1ManEstCtcSubConCost":number,
   "Rpt1ProjectedTotalBurCost":number,
   "Rpt1ProjectedTotalCost":number,
   "Rpt1ProjectedTotalLbrCost":number,
   "Rpt1ProjectedTotalMtlBurCost":number,
   "Rpt1ProjectedTotalMtlCost":number,
   "Rpt1ProjectedTotalODCCost":number,
   "Rpt1ProjectedTotalSubContCost":number,
   "Rpt1TotActBurCost":number,
   "Rpt1TotActLbrCost":number,
   "Rpt1TotActMtlBurCost":number,
   "Rpt1TotActMtlCost":number,
   "Rpt1TotActODCCost":number,
   "Rpt1TotActSubContCost":number,
   "Rpt1TotCtcBurCost":number,
   "Rpt1TotCtcLbrCost":number,
   "Rpt1TotCtcMtlBurCost":number,
   "Rpt1TotCtcMtlCost":number,
   "Rpt1TotCTCODCCost":number,
   "Rpt1TotCtcSubConCost":number,
   "Rpt1TotEstBurCost":number,
   "Rpt1TotEstLbrCost":number,
   "Rpt1TotEstMtlBurCost":number,
   "Rpt1TotEstMtlCost":number,
   "Rpt1TotEstODCCost":number,
   "Rpt1TotEstSubContCost":number,
   "Rpt1TotQuotBurCost":number,
   "Rpt1TotQuotLbrCost":number,
   "Rpt1TotQuotMtlBurCost":number,
   "Rpt1TotQuotMtlCost":number,
   "Rpt1TotQuotODCCost":number,
   "Rpt1TotQuotSubContCost":number,
   "Rpt2BudTotBurCost":number,
   "Rpt2BudTotLbrCost":number,
   "Rpt2BudTotMtlBurCost":number,
   "Rpt2BudTotMtlCost":number,
   "Rpt2BudTotODCCost":number,
   "Rpt2BudTotSubCost":number,
   "Rpt2GTActualCost":number,
   "Rpt2GTBudgetCost":number,
   "Rpt2GTCalculatedCost":number,
   "Rpt2GTEstimatedCost":number,
   "Rpt2GTManualCost":number,
   "Rpt2GTQuotedCost":number,
   "Rpt2ManEstCtcBurCost":number,
   "Rpt2ManEstCtcLbrCost":number,
   "Rpt2ManEstCtcMtlBurCost":number,
   "Rpt2ManEstCtcMtlCost":number,
   "Rpt2ManEstCTCODCCost":number,
   "Rpt2ManEstCtcSubConCost":number,
   "Rpt2ProjectedTotalBurCost":number,
   "Rpt2ProjectedTotalCost":number,
   "Rpt2ProjectedTotalLbrCost":number,
   "Rpt2ProjectedTotalMtlBurCost":number,
   "Rpt2ProjectedTotalMtlCost":number,
   "Rpt2ProjectedTotalODCCost":number,
   "Rpt2ProjectedTotalSubContCost":number,
   "Rpt2TotActBurCost":number,
   "Rpt2TotActLbrCost":number,
   "Rpt2TotActMtlBurCost":number,
   "Rpt2TotActMtlCost":number,
   "Rpt2TotActODCCost":number,
   "Rpt2TotActSubContCost":number,
   "Rpt2TotCtcBurCost":number,
   "Rpt2TotCtcLbrCost":number,
   "Rpt2TotCtcMtlBurCost":number,
   "Rpt2TotCtcMtlCost":number,
   "Rpt2TotCTCODCCost":number,
   "Rpt2TotCtcSubConCost":number,
   "Rpt2TotEstBurCost":number,
   "Rpt2TotEstLbrCost":number,
   "Rpt2TotEstMtlBurCost":number,
   "Rpt2TotEstMtlCost":number,
   "Rpt2TotEstODCCost":number,
   "Rpt2TotEstSubContCost":number,
   "Rpt2TotQuotBurCost":number,
   "Rpt2TotQuotLbrCost":number,
   "Rpt2TotQuotMtlBurCost":number,
   "Rpt2TotQuotMtlCost":number,
   "Rpt2TotQuotODCCost":number,
   "Rpt2TotQuotSubContCost":number,
   "Rpt3BudTotBurCost":number,
   "Rpt3BudTotLbrCost":number,
   "Rpt3BudTotMtlBurCost":number,
   "Rpt3BudTotMtlCost":number,
   "Rpt3BudTotODCCost":number,
   "Rpt3BudTotSubCost":number,
   "Rpt3GTActualCost":number,
   "Rpt3GTBudgetCost":number,
   "Rpt3GTCalculatedCost":number,
   "Rpt3GTEstimatedCost":number,
   "Rpt3GTManualCost":number,
   "Rpt3GTQuotedCost":number,
   "Rpt3ManEstCtcBurCost":number,
   "Rpt3ManEstCtcLbrCost":number,
   "Rpt3ManEstCtcMtlBurCost":number,
   "Rpt3ManEstCtcMtlCost":number,
   "Rpt3ManEstCTCODCCost":number,
   "Rpt3ManEstCtcSubConCost":number,
   "Rpt3ProjectedTotalBurCost":number,
   "Rpt3ProjectedTotalCost":number,
   "Rpt3ProjectedTotalLbrCost":number,
   "Rpt3ProjectedTotalMtlBurCost":number,
   "Rpt3ProjectedTotalMtlCost":number,
   "Rpt3ProjectedTotalODCCost":number,
   "Rpt3ProjectedTotalSubContCost":number,
   "Rpt3TotActBurCost":number,
   "Rpt3TotActLbrCost":number,
   "Rpt3TotActMtlBurCost":number,
   "Rpt3TotActMtlCost":number,
   "Rpt3TotActODCCost":number,
   "Rpt3TotActSubContCost":number,
   "Rpt3TotCtcBurCost":number,
   "Rpt3TotCtcLbrCost":number,
   "Rpt3TotCtcMtlBurCost":number,
   "Rpt3TotCtcMtlCost":number,
   "Rpt3TotCTCODCCost":number,
   "Rpt3TotCtcSubConCost":number,
   "Rpt3TotEstBurCost":number,
   "Rpt3TotEstLbrCost":number,
   "Rpt3TotEstMtlBurCost":number,
   "Rpt3TotEstMtlCost":number,
   "Rpt3TotEstODCCost":number,
   "Rpt3TotEstSubContCost":number,
   "Rpt3TotQuotBurCost":number,
   "Rpt3TotQuotLbrCost":number,
   "Rpt3TotQuotMtlBurCost":number,
   "Rpt3TotQuotMtlCost":number,
   "Rpt3TotQuotODCCost":number,
   "Rpt3TotQuotSubContCost":number,
   "StatusDesc":string,
   "TimeDefTaskSetID":string,
   "TimeTaskSetDescription":string,
   "TimeWFGroupIDDescription":string,
   "WorkResDesc":string,
   "DocBudTotSubCost":number,
   "DocTotActBurCost":number,
   "DocTotActLbrCost":number,
   "DocTotActMtlBurCost":number,
   "DocTotActMtlCost":number,
   "DocTotActODCCost":number,
   "ExpenseApprovalTasksTree":string,
   "TimeApprovalTasksTree":string,
   "BitFlag":number,
   "ParentPhaseDescription":string,
   "ProjectIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
   "UD_SysRevID":string,
   "ProjectType_c":string,
   "ShipToNum_c":string,
   "ShipToSameAsProj_c":boolean,
   "Price_c":number,
   "Discount_c":number,
   "ResaleRevenue_c":number,
   "FreightRevenueAmt_c":number,
   "SalesTaxRevenue_c":number,
   "Approved_c":boolean,
   "ApprovedBy_c":string,
   "ApprovedDate_c":string,
   "PartNum_c":string,
   "PartDescription_c":string,
   "CreateRelatedPhases_c":boolean,
}

export interface Erp_Tablesets_ProjectAttchRow{
   "Company":string,
   "ProjectID":string,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectCriteriaRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the  Project.  Links the Milestone to the Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Project Milestone ID  */  
   "MilestoneID":string,
      /**  Used to create a unique index for each ProjectCriteria.  */  
   "CriteriaSeq":number,
      /**  "F" = Fixed date, "C" = Cost to date, "J" = JobOperation Complete  */  
   "CriteriaType":string,
      /**  Criteria Date  */  
   "CriteriaDate":string,
      /**  Job Number that this criteria is associated.  In conjunction with the Assmbly and OperationSeq, this is used to find one JobOperation record.  */  
   "JobNum":string,
      /**  Job Assembly sequence number that this criteria is associated.  */  
   "AssemblySeq":number,
      /**  A sequence number which uniquely identifies a job operation record within the Job/Assembly structure.  */  
   "OprSeq":number,
      /**  Material Cost  */  
   "MaterialCost":number,
      /**  Subcontract Cost  */  
   "SubcontractCost":number,
      /**  Labor Cost  */  
   "LaborCost":number,
      /**  Burden Cost  */  
   "BurdenCost":number,
      /**  Material Burden Cost  */  
   "MtlBurdenCost":number,
      /**  Total Cost  */  
   "TotalCost":number,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  System-generated Criteria description.  */  
   "CriteriaDescription":string,
   "PhaseDescription":string,
   "BitFlag":number,
   "AssemblySeqDescription":string,
   "MilestoneIDDescription":string,
   "ProjectIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectCstRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Estimated burden cost.  */  
   "EstBurdenCost":number,
      /**  Estimated burden hours.  */  
   "EstBurdenHours":number,
      /**  Estimated labor cost.  */  
   "EstLaborCost":number,
      /**  Estimated labor hours.  */  
   "EstLaborHours":number,
      /**  Estimated subcontract cost.  */  
   "EstSubcontractCost":number,
      /**  Estimated material cost.  */  
   "EstMtlCost":number,
      /**  Estimated material burden cost.  */  
   "EstMtlBurdenCost":number,
      /**  To control if the project phase budget values are to be rolled up to the project  */  
   "RollBudgetstoProject":boolean,
      /**  to control if the project phase manual estimate to complete values are to be rolled up to the project  */  
   "RollManEstToCpte":boolean,
      /**  Total Costd labour hours for the Project  */  
   "TotEstLbrHrs":number,
      /**  Total estimated burden hours for the project  */  
   "TotEstBurdenHrs":number,
      /**  Total estimated labour cost for the project. This is production and setup combined.  */  
   "TotEstLbrCost":number,
      /**  Total estimated material costs for the project  */  
   "TotEstMtlCost":number,
      /**  Total estimated subcontract costs for the project  */  
   "TotEstSubContCost":number,
      /**  Total actual labour hours for the project  */  
   "TotActLbrHrs":number,
      /**  Total actual burden hours for the project.  */  
   "TotActBurHrs":number,
      /**  Total actual labour cost for the project. This is production and setup combined.  */  
   "TotActLbrCost":number,
      /**  Total actual burden cost for the project. This is production and setup combined.  */  
   "TotActBurCost":number,
      /**  Total actual subcontract costs for the project  */  
   "TotActSubContCost":number,
      /**  Total actual material costs for the project  */  
   "TotActMtlCost":number,
      /**  Total actual material burden costs for the project  */  
   "TotActMtlBurCost":number,
      /**  Manually entered estimate to complete for the labour hours for the project.  */  
   "ManEstCtcLbrHrs":number,
      /**  Manually entered estimate to complete for the burden hours for the project.  */  
   "ManEstCtcBurHrs":number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project.  */  
   "ManEstCtcLbrCost":number,
      /**  Manually entered estimate to complete for the burden cost for the project.  */  
   "ManEstCtcBurCost":number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project.  */  
   "ManEstCtcSubConCost":number,
      /**  Manually entered estimate to complete for the material cost for the project.  */  
   "ManEstCtcMtlCost":number,
      /**  Manually entered estimate to complete for the material burden cost for the project.  */  
   "ManEstCtcMtlBurCost":number,
      /**  Total calculated cost to complete labour hours for the project.  */  
   "TotCtcLbrHours":number,
      /**  Total calculated cost to complete burden hours for the project.  */  
   "TotCtcBurHours":number,
      /**  Total calculated cost to complete burden cost for the project. This will be both production and setup.  */  
   "TotCtcBurCost":number,
      /**  Total calculated cost to complete labour cost for the project. This will be both production and setup.  */  
   "TotCtcLbrCost":number,
      /**  Total calculated cost to complete subcontract cost for the project.  */  
   "TotCtcSubConCost":number,
      /**  Total calculated cost to complete material cost for the project.  */  
   "TotCtcMtlCost":number,
      /**  Total calculated cost to complete material burden cost for the project.  */  
   "TotCtcMtlBurCost":number,
      /**  Total quoted labour hours for the project  */  
   "TotQuotLbrHrs":number,
      /**  Total quoted burden hours for the project  */  
   "TotQuotBurHrs":number,
      /**  Total quoted labour cost for the project. This will be both production and setup.  */  
   "TotQuotLbrCost":number,
      /**  Total quoted subcontract cost for the project.  */  
   "TotQuotSubContCost":number,
      /**  Total quoted material cost for the project.  */  
   "TotQuotMtlCost":number,
      /**  Total quoted material burden cost for the project.  */  
   "TotQuotMtlBurCost":number,
      /**  Total estimated burden costs for the project  */  
   "TotEstBurCost":number,
      /**  Total quoted burden cost for the project. This will be both production and setup.  */  
   "TotQuotBurCost":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   "RevenueRecAutoToDate":number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "MaterialRecAutoCstTodate":number,
      /**  The labor costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "LaborRecAutoCstTodate":number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "BurdenRecAutoCstTodate":number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   "MtlBurdenRecAutoCstTodate":number,
      /**  Total budget labour hours for the Project  */  
   "BudTotLbrHours":number,
      /**  Total budget burden hours for the Project  */  
   "BudTotBurHrs":number,
      /**  Total budget labour cost for the Project. This is production and setup combined.  */  
   "BudTotLbrCost":number,
      /**  Total budget burden cost for the Project. This is production and setup combined.  */  
   "BudTotBurCost":number,
      /**  Total budget subcontract costs for the Project  */  
   "BudTotSubCost":number,
      /**  Total budget material costs for the Project  */  
   "BudTotMtlCost":number,
      /**  Total budget material burden costs for the Project phase.  */  
   "BudTotMtlBurCost":number,
      /**  Total estimated material burden costs for the Project phase  */  
   "TotEstMtlBurCost":number,
      /**  The subcontract costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   "SubConRecAutoCstTodate":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   "RevenueRecManToDate":number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MaterialRecManCstTodate":number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "LaborRecManCstTodate":number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   "BurdenRecManCstTodate":number,
      /**  The subcontract costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   "SubConRecManCstTodate":number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MtlBurdenRecManCstTodate":number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   "MaterialCostOfSales":number,
      /**  The labor costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   "LaborCostOfSales":number,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   "BurdenCostOfSales":number,
      /**  The subcontract costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActSubContractCost  */  
   "SubConCostOfSales":number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   "MtlBurdenCostOfSales":number,
      /**  Other Direct Cost Quoted  */  
   "TotQuotODCCost":number,
      /**  Other Direct Cost Estimated  */  
   "TotEstODCCost":number,
      /**  ODC Actual  */  
   "TotActODCCost":number,
      /**  Other direct cost manual CTC  */  
   "ManEstCTCODCCost":number,
      /**  Other direct Cost total CTC  */  
   "TotCTCODCCost":number,
      /**  Other direct Cost Budget Total  */  
   "BudTotODCCost":number,
      /**  Other Direct cost Recognition to Date  */  
   "ODCRecAutoCstToDate":number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   "ODCRecManCstTodate":number,
      /**  Estimated other direct cost  */  
   "EstODCCost":number,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   "BdnRecSeqPosted":number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   "BdnRecSeqLastAdded":number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   "BdnRevenueAutoToday":number,
      /**  AsOfDate  */  
   "AsOfDate":string,
      /**  BuildAnalysis  */  
   "BuildAnalysis":boolean,
      /**  LbrPur  */  
   "LbrPur":number,
      /**  BurPur  */  
   "BurPur":number,
      /**  MtlPur  */  
   "MtlPur":number,
      /**  SubPur  */  
   "SubPur":number,
      /**  MtlBurPur  */  
   "MtlBurPur":number,
      /**  ODCPur  */  
   "ODCPur":number,
      /**  LaborLbrCstToDate  */  
   "LaborLbrCstToDate":number,
      /**  BurdenLbrCstToDate  */  
   "BurdenLbrCstToDate":number,
      /**  ActMtlNonJobCost  */  
   "ActMtlNonJobCost":number,
      /**  RecManPosted  */  
   "RecManPosted":number,
      /**  LbrManPosted  */  
   "LbrManPosted":number,
      /**  BurManPosted  */  
   "BurManPosted":number,
      /**  MtlManPosted  */  
   "MtlManPosted":number,
      /**  SubCManPosted  */  
   "SubCManPosted":number,
      /**  MtlBurManPosted  */  
   "MtlBurManPosted":number,
      /**  ODCManPosted  */  
   "ODCManPosted":number,
      /**  Reverse  */  
   "Reverse":string,
      /**  NextTmpInvcNum  */  
   "NextTmpInvcNum":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Percentage of Completion  */  
   "PercentageOfCompletion":number,
      /**  Labor Cost To Be Recognized  */  
   "ToBeRecognizedLbrCost":number,
      /**  Burden Cost To Be Recognized  */  
   "ToBeRecognizedBurCost":number,
      /**  Material Cost To Be Recognized  */  
   "ToBeRecognizedMtlCost":number,
      /**  Subcontract Cost To Be Recognized  */  
   "ToBeRecognizedSubCost":number,
      /**  Material Burden Cost To Be Recognized  */  
   "ToBeRecognizedMtlBurCost":number,
      /**  ODC Cost To Be Recognized  */  
   "ToBeRecognizedODCCost":number,
      /**  Revenue To Be Recognized  */  
   "ToBeRecognizedRevenue":number,
      /**  BillingToDate  */  
   "BillingToDate":number,
      /**  RecogToDtBilling  */  
   "RecogToDtBilling":number,
      /**  TotProjRev  */  
   "TotProjRev":number,
      /**  RecogToDtLbk  */  
   "RecogToDtLbk":number,
      /**  RecogToDtManual  */  
   "RecogToDtManual":number,
      /**  RetentionDt  */  
   "RetentionDt":number,
   "CurrencyCode":string,
   "DocBudTotBurCost":number,
   "DocBudTotLbrCost":number,
   "DocBudTotMtlBurCost":number,
   "DocBudTotMtlCost":number,
   "DocBudTotODCCost":number,
   "DocBudTotSubCost":number,
   "DocEstBurdenCost":number,
   "DocEstLaborCost":number,
   "DocEstMtlBurdenCost":number,
   "DocEstMtlCost":number,
   "DocEstODCCost":number,
   "DocEstSubcontractCost":number,
   "DocEstTotalCost":number,
   "DocGTActualCost":number,
   "DocGTBudgetCost":number,
   "DocGTCalculatedCost":number,
   "DocGTEstimatedCost":number,
   "DocGTManualCost":number,
   "DocGTQuotedCost":number,
   "DocProjectedTotalBurCost":number,
   "DocProjectedTotalCost":number,
   "DocProjectedTotalLbrCost":number,
   "DocProjectedTotalMtlBurCost":number,
   "DocProjectedTotalMtlCost":number,
   "DocProjectedTotalODCCost":number,
   "DocProjectedTotalSubContCost":number,
   "DocTotActMtlBurCost":number,
   "DocTotActMtlCost":number,
   "DocTotActODCCost":number,
   "DocTotActSubContCost":number,
   "DocTotCtcBurCost":number,
   "DocTotCtcLbrCost":number,
   "DocTotCtcMtlBurCost":number,
   "DocTotCtcMtlCost":number,
   "DocTotCTCODCCost":number,
   "DocTotCtcSubConCost":number,
   "DocTotEstBurCost":number,
   "DocTotEstLbrCost":number,
   "DocTotEstMtlBurCost":number,
   "DocTotEstMtlCost":number,
   "DocTotEstODCCost":number,
   "DocTotEstSubContCost":number,
   "DocTotQuotBurCost":number,
   "DocTotQuotLbrCost":number,
   "DocTotQuotMtlBurCost":number,
   "DocTotQuotMtlCost":number,
   "DocTotQuotODCCost":number,
   "DocTotQuotSubContCost":number,
      /**  This is a calculated field: the sum of the other Project.Est*Cost fields.  It is not stored in the database.  */  
   "EstTotalCost":number,
   "GTActualCost":number,
   "GTBudgetCost":number,
   "GTCalculatedCost":number,
   "GTEstimatedCost":number,
   "GTManualCost":number,
   "GTQuotedCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalBurCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalLbrCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalMtlBurCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalMtlCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalODCCost":number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   "ProjectedTotalSubContCost":number,
      /**  Recognized to Date Billing  */  
   "ReconToDtBilling":number,
   "Rpt1BudTotBurCost":number,
   "Rpt1BudTotLbrCost":number,
   "Rpt1BudTotMtlBurCost":number,
   "Rpt1BudTotMtlCost":number,
   "Rpt1BudTotODCCost":number,
   "Rpt1BudTotSubCost":number,
   "Rpt1EstBurdenCost":number,
   "Rpt1EstLaborCost":number,
   "Rpt1EstMtlBurdenCost":number,
   "Rpt1EstMtlCost":number,
   "Rpt1EstODCCost":number,
   "Rpt1EstSubcontractCost":number,
   "Rpt1EstTotalCost":number,
   "Rpt1GTActualCost":number,
   "Rpt1GTBudgetCost":number,
   "Rpt1GTCalculatedCost":number,
   "Rpt1GTEstimatedCost":number,
   "Rpt1GTManualCost":number,
   "Rpt1GTQuotedCost":number,
   "Rpt1ManEstCtcBurCost":number,
   "Rpt1ManEstCtcLbrCost":number,
   "Rpt1ManEstCtcMtlBurCost":number,
   "Rpt1ManEstCtcMtlCost":number,
   "Rpt1ManEstCTCODCCost":number,
   "Rpt1ManEstCtcSubConCost":number,
   "Rpt1ProjectedTotalBurCost":number,
   "Rpt1ProjectedTotalCost":number,
   "Rpt1ProjectedTotalLbrCost":number,
   "Rpt1ProjectedTotalMtlBurCost":number,
   "Rpt1ProjectedTotalMtlCost":number,
   "Rpt1ProjectedTotalODCCost":number,
   "Rpt1ProjectedTotalSubContCost":number,
   "Rpt1TotActBurCost":number,
   "Rpt1TotActLbrCost":number,
   "Rpt1TotActMtlBurCost":number,
   "Rpt1TotActMtlCost":number,
   "Rpt1TotActODCCost":number,
   "Rpt1TotActSubContCost":number,
   "Rpt1TotCtcBurCost":number,
   "Rpt1TotCtcLbrCost":number,
   "Rpt1TotCtcMtlBurCost":number,
   "Rpt1TotCtcMtlCost":number,
   "Rpt1TotCTCODCCost":number,
   "Rpt1TotCtcSubConCost":number,
   "Rpt1TotEstBurCost":number,
   "Rpt1TotEstLbrCost":number,
   "Rpt1TotEstMtlBurCost":number,
   "Rpt1TotEstMtlCost":number,
   "Rpt1TotEstODCCost":number,
   "Rpt1TotEstSubContCost":number,
   "Rpt1TotQuotBurCost":number,
   "Rpt1TotQuotLbrCost":number,
   "Rpt1TotQuotMtlBurCost":number,
   "Rpt1TotQuotMtlCost":number,
   "Rpt1TotQuotODCCost":number,
   "Rpt1TotQuotSubContCost":number,
   "Rpt2BudTotBurCost":number,
   "Rpt2BudTotLbrCost":number,
   "Rpt2BudTotMtlBurCost":number,
   "Rpt2BudTotMtlCost":number,
   "Rpt2BudTotODCCost":number,
   "Rpt2BudTotSubCost":number,
   "Rpt2EstBurdenCost":number,
   "Rpt2EstLaborCost":number,
   "Rpt2EstMtlBurdenCost":number,
   "Rpt2EstMtlCost":number,
   "Rpt2EstODCCost":number,
   "Rpt2EstSubcontractCost":number,
   "Rpt2EstTotalCost":number,
   "Rpt2GTActualCost":number,
   "Rpt2GTBudgetCost":number,
   "Rpt2GTCalculatedCost":number,
   "Rpt2GTEstimatedCost":number,
   "Rpt2GTManualCost":number,
   "Rpt2GTQuotedCost":number,
   "Rpt2ManEstCtcBurCost":number,
   "Rpt2ManEstCtcLbrCost":number,
   "Rpt2ManEstCtcMtlBurCost":number,
   "Rpt2ManEstCtcMtlCost":number,
   "Rpt2ManEstCTCODCCost":number,
   "Rpt2ManEstCtcSubConCost":number,
   "Rpt2ProjectedTotalBurCost":number,
   "Rpt2ProjectedTotalCost":number,
   "Rpt2ProjectedTotalLbrCost":number,
   "Rpt2ProjectedTotalMtlBurCost":number,
   "Rpt2ProjectedTotalMtlCost":number,
   "Rpt2ProjectedTotalODCCost":number,
   "Rpt2ProjectedTotalSubContCost":number,
   "Rpt2TotActBurCost":number,
   "Rpt2TotActLbrCost":number,
   "Rpt2TotActMtlBurCost":number,
   "Rpt2TotActMtlCost":number,
   "Rpt2TotActODCCost":number,
   "Rpt2TotActSubContCost":number,
   "Rpt2TotCtcBurCost":number,
   "Rpt2TotCtcLbrCost":number,
   "Rpt2TotCtcMtlBurCost":number,
   "Rpt2TotCtcMtlCost":number,
   "Rpt2TotCTCODCCost":number,
   "Rpt2TotCtcSubConCost":number,
   "Rpt2TotEstBurCost":number,
   "Rpt2TotEstLbrCost":number,
   "Rpt2TotEstMtlBurCost":number,
   "Rpt2TotEstMtlCost":number,
   "Rpt2TotEstODCCost":number,
   "Rpt2TotEstSubContCost":number,
   "Rpt2TotQuotBurCost":number,
   "Rpt2TotQuotLbrCost":number,
   "Rpt2TotQuotMtlBurCost":number,
   "Rpt2TotQuotMtlCost":number,
   "Rpt2TotQuotODCCost":number,
   "Rpt2TotQuotSubContCost":number,
   "Rpt3BudTotBurCost":number,
   "Rpt3BudTotLbrCost":number,
   "Rpt3BudTotMtlBurCost":number,
   "Rpt3BudTotMtlCost":number,
   "Rpt3BudTotODCCost":number,
   "Rpt3BudTotSubCost":number,
   "Rpt3EstBurdenCost":number,
   "Rpt3EstLaborCost":number,
   "Rpt3EstMtlBurdenCost":number,
   "Rpt3EstMtlCost":number,
   "Rpt3EstODCCost":number,
   "Rpt3EstSubcontractCost":number,
   "Rpt3EstTotalCost":number,
   "Rpt3GTActualCost":number,
   "Rpt3GTBudgetCost":number,
   "Rpt3GTCalculatedCost":number,
   "Rpt3GTEstimatedCost":number,
   "Rpt3GTManualCost":number,
   "Rpt3GTQuotedCost":number,
   "Rpt3ManEstCtcBurCost":number,
   "Rpt3ManEstCtcLbrCost":number,
   "Rpt3ManEstCtcMtlBurCost":number,
   "Rpt3ManEstCtcMtlCost":number,
   "Rpt3ManEstCTCODCCost":number,
   "Rpt3ManEstCtcSubConCost":number,
   "Rpt3ProjectedTotalBurCost":number,
   "Rpt3ProjectedTotalCost":number,
   "Rpt3ProjectedTotalLbrCost":number,
   "Rpt3ProjectedTotalMtlBurCost":number,
   "Rpt3ProjectedTotalMtlCost":number,
   "Rpt3ProjectedTotalODCCost":number,
   "Rpt3ProjectedTotalSubContCost":number,
   "Rpt3TotActBurCost":number,
   "Rpt3TotActLbrCost":number,
   "Rpt3TotActMtlBurCost":number,
   "Rpt3TotActMtlCost":number,
   "Rpt3TotActODCCost":number,
   "Rpt3TotActSubContCost":number,
   "Rpt3TotCtcBurCost":number,
   "Rpt3TotCtcLbrCost":number,
   "Rpt3TotCtcMtlBurCost":number,
   "Rpt3TotCtcMtlCost":number,
   "Rpt3TotCTCODCCost":number,
   "Rpt3TotCtcSubConCost":number,
   "Rpt3TotEstBurCost":number,
   "Rpt3TotEstLbrCost":number,
   "Rpt3TotEstMtlBurCost":number,
   "Rpt3TotEstMtlCost":number,
   "Rpt3TotEstODCCost":number,
   "Rpt3TotEstSubContCost":number,
   "Rpt3TotQuotBurCost":number,
   "Rpt3TotQuotLbrCost":number,
   "Rpt3TotQuotMtlBurCost":number,
   "Rpt3TotQuotMtlCost":number,
   "Rpt3TotQuotODCCost":number,
   "Rpt3TotQuotSubContCost":number,
   "DocManEstCtcBurCost":number,
   "DocManEstCtcLbrCost":number,
   "DocManEstCtcMtlBurCost":number,
   "DocManEstCtcMtlCost":number,
   "DocManEstCTCODCCost":number,
   "DocManEstCtcSubConCost":number,
   "DocTotActBurCost":number,
   "DocTotActLbrCost":number,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectJobRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   "JobCompletionDate":string,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   "JobNum":string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   "PartNum":string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   "RevisionNum":string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   "PartDescription":string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   "ProdQty":number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   "IUM":string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   "StartDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   "StartHour":number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   "DueDate":string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   "DueHour":number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   "ReqDueDate":string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   "QuoteNum":number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   "QuoteLine":number,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   "ProjectID":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Holds the user answer to the question: "This job is part of project &1.  Do you wish to change the associated project for this job?"  */  
   "OkToReassociate":boolean,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectListRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Full description of Project Management Code.  */  
   "Description":string,
      /**  Indicates if this Project is active.  Can be changed directly by the user during entry.  */  
   "ActiveProject":boolean,
      /**  Editor widget for project comments.  */  
   "CommentText":string,
      /**  A LIST-DELIM delimited list of people.  */  
   "PersonList":string,
      /**  Will contain the coma separated list of the fields that the user has added to the project from within Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMap":string,
      /**  Will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Holds the default project warehouse code.  */  
   "WarehouseCode":string,
      /**  Holds the default project bin code.  */  
   "BinNum":string,
      /**  This holds the top level job to which all of the jobs created for a WBS Phase will be associated  */  
   "PrimaryJob":string,
      /**  This is the material placeholder in the primary project job to which all WBS Phase jobs will be linked.  */  
   "PrimaryMtl":number,
      /**  The sales category code used in the Revenue recognition process.  */  
   "SalesCatID":string,
      /**  The Product Group code used in the Revenue Recognition process.  */  
   "ProdCode":string,
      /**  RESERVED FOR FUTURE USE: Logical field. When set to true it indicates that the journals created to recognise the revenue for the project have been reversed.  */  
   "CloseAccrual":boolean,
      /**  Assembly Seq from JobAsmbl record.  */  
   "PrimaryAsmSeq":number,
      /**  Start Date of the project  */  
   "StartDate":string,
      /**  A  unique integer assigned by the system to new customers by Contract customer number. This field can be blank.  */  
   "ConCustNum":number,
      /**  Contract start date  */  
   "ConStartDate":string,
      /**  Date the contract is due to be complete  */  
   "ConEndDate":string,
      /**  Projected Contract End Date. Defaults to the Contract End Date but can be used to report on the projected end date.  */  
   "ConProjectedEnd":string,
      /**   Contract Reference number for project.
At the Epicor 9.05 release this field is reference only, at the Epicor 9.1 release when the whole contract system is enhanced then this field will reference an actual contract and a search will be provided.  */  
   "ConReference":string,
      /**  Employee ID of the person who has responsibility for the project  */  
   "ConProjMgr":string,
      /**  Total contract value for the project.  */  
   "ConTotValue":number,
      /**  Value of the posted invoices to date (system field)  */  
   "ConTotInv":number,
      /**   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
?CP? = Cost Plus
The default is Customer Shipment.  */  
   "ConInvMeth":string,
      /**  Foreign key to the QMarkUp  */  
   "MarkUpID":string,
      /**  Override of Labor Markup Percent  */  
   "PBLbMarkUp":number,
      /**  Override of Material Markup Percent  */  
   "PBMtlMarkUp":number,
      /**  Override of Subcontract Markup Percentage  */  
   "PBSubMarkUp":number,
      /**  Override of Other Direct Cost Markup %  */  
   "PBMiscMarkUp":number,
      /**  Retention percentage. How this is used is dependent on RetentionProc field.  */  
   "PBRetentionPcnt":number,
      /**   How the retention percentage will be used.
The options are ?M? = Maximum of Contract Value
?P? = Percent of Invoice Value.  */  
   "PBRetentionProc":string,
      /**  Project Fee  */  
   "PBFeeProject":number,
      /**  Apply Fee with list of the options: F =  First Invoice Only, A = All Invoices  */  
   "PBFeeApply":string,
      /**  Fee Type with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeType":string,
      /**  Apply Fees on list with the options: N = Net Cost, G = Gross Cost.  */  
   "PBFeeApplyOn":string,
      /**  Fee Invoice Text in Free format to allow the user to enter text that will be displayed on the invoice  */  
   "PBFeeInvoiceText":string,
      /**  Fee that is to be charged against any labor charges on an invoice  */  
   "PBFeeLbrCharge":number,
      /**  Labor Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeLbrType":string,
      /**  Labor Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeLbrApply":string,
      /**  Fee that is to be charged against any material charges on an invoice  */  
   "PBFeeMtlCharge":number,
      /**  Material Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeMtlType":string,
      /**  Material Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeMtlApply":string,
      /**  Fee that is to be charged against any Subcontract charges on an invoice.  */  
   "PBFeeSubCharge":number,
      /**  Subcontract Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeSubType":string,
      /**  Subcontract Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeSubApply":string,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice.  */  
   "PBFeeMiscCharge":number,
      /**  Miscellaneous Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeMiscType":string,
      /**  Miscellaneous Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeMiscApply":string,
      /**  Currency Code  */  
   "CurrencyCode":string,
      /**  Contract Customer Bill To number, foreign key to Customer  */  
   "ConBTCustNum":number,
      /**  If invoices are allowed to be generated even if the element is over the predefined ceiling.  */  
   "ConOverCeiling":boolean,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  */  
   "ConRevMethod":string,
      /**  Price list is used to establish the price for any materials when the invoicing method is set to T & M or Cost Plus. Can be empty.  */  
   "ConListCode":string,
      /**  Hours for Invoicing allows the user to decide which hours are to be used by the invoicing process, it has system list with the options: L =  Labor, B = Burden  */  
   "ConHrsInvc":string,
      /**  Rate Type Code  */  
   "RateGrpCode":string,
      /**  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  */  
   "LockRate":boolean,
      /**  Exchange rate that will be used for this role code entry.  Defaults from CurrRate.CurrentRate  */  
   "ExchangeRate":number,
      /**  This is the projected end date of the project but is not required and is only used if entered in the creation of the project job and for any user reporting requirements.  */  
   "EndDate":string,
      /**  Defaults from JCSyst.DfltPrjRtSrc. Defines where the invoice process will obtain the Project Role Rates from. Hierarchical works as defined for Invoice Preparation. All of the others will ONLY obtain the rates from the area defined. HIER = Hierarchical, PROJ = Project Only, EMPL = Employee Only, ROLE = Project Role Only  */  
   "PBPrjRtSrc":string,
      /**  Value of the posted invoices to date (system field) in the Project currency  */  
   "DocConTotInv":number,
      /**  If set to true a new primary job will be created automatically for the project.  */  
   "CreatePrjJob":boolean,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt1ConTotInv":number,
      /**  Project revision number  */  
   "Revision":number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt2ConTotInv":number,
      /**   This is the percentage of the costs for material, labor and burden that will be invoiced.
This is also used by the invoice entry process when invoicing regular shipments to determine the actual value of the invoice and how much will be relieved from the Progress Payments to date.  */  
   "PPAllowPcnt":number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt3ConTotInv":number,
      /**   This will allow regular shipments to be invoiced normally.
Setting the field to true will cause the Customer Shipment process to place any packing slips for any sales order associated with the project to be placed on hold to prevent them being selected for invoicing. 
When the user changes this flag to true it will trigger business logic that will release the shipments for invoicing.  */  
   "HoldPrdInv":boolean,
      /**  Total contract value for the project. in the Project currency  */  
   "DocConTotValue":number,
      /**   This will default to true which will then trigger the Invoice Preparation process to produce a Progress Payment Invoice.
Setting this to false will cause the project to be ignored by the Invoice Preparation process.  */  
   "PPActive":boolean,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt1ConTotValue":number,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt2ConTotValue":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments.  */  
   "TotLiqToDate":number,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt3ConTotValue":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then  */  
   "PPCeilingTotal":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Project currency  */  
   "DocPBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt1PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt2PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt3PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Project currency  */  
   "DocPBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt1PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt2PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt3PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Project currency  */  
   "DocPBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt1PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt2PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt3PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Project currency  */  
   "DocPBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt1PBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt2PBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt3PBFeeSubCharge":number,
      /**  Allows individual ceilings to be applied to suppliers  */  
   "PBIndCeilingSup":boolean,
      /**  Allows individual ceilings to be applied to employee  */  
   "PBIndCeilingEmp":boolean,
      /**  Allows individual ceilings to be applied to role  */  
   "PBIndCeilingPRole":boolean,
      /**  Material Cost invoiced by date.  */  
   "PBDocInvoicedMtl":number,
      /**  Labor cost invoiced by date.  */  
   "PBDocInvoicedLbr":number,
      /**  Subcontract cost invoiced by date.  */  
   "PBDocInvoicedSub":number,
      /**  Material Burden Material cost invoiced by date.  */  
   "PBDocInvoicedMtlBur":number,
      /**  Other direct Costs invoiced by date.  */  
   "PBDocInvoicedMisc":number,
      /**  Burden Costs invoiced by date.  */  
   "PBDocInvoicedBur":number,
      /**  Fees charged by date  */  
   "PBDocInvoicedFees":number,
      /**  Next Temporary Invoice number used in the Invoice preparation table before invoice is generated  */  
   "NextTmpInvcNum":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Project currency  */  
   "DocTotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt1TotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt2TotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt3TotLiqToDate":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Project currency  */  
   "DocPPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt1PPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt2PPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt3PPCeilingTotal":number,
      /**  Progress Billing - Order Number  */  
   "PBOrderNum":number,
      /**  Progress Payment - Order Number  */  
   "PPOrderNum":number,
      /**  Progress Billing - Order Line  */  
   "PBOrderLine":number,
      /**  Progress Payment - Order Line  */  
   "PPOrderLine":number,
      /**  Project Fee in the Project currency  */  
   "DocPBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt1PBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt2PBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt3PBFeeProject":number,
      /**  Set to true when the close billing has been executed. For Fixed Fee this is set only after all PBillSch are closed. For other types this is set when Close Project is executed.  */  
   "PBClose":boolean,
      /**  This field is set to true after the Project True Up has been executed.  */  
   "PBTrueUp":boolean,
      /**  Defines the Approvals Method for Time related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   "TimeApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Time transactions related to this Project.  */  
   "TimeWFGroupID":string,
      /**  Defines the Approvals Method for Expenses related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   "ExpenseApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Expense transactions related to this Project.  */  
   "ExpenseWFGroupID":string,
      /**  Number of Invoices generated for the Project  */  
   "PBNumInvoices":number,
      /**  List of fiscal years for which True Up was called  */  
   "PBTrueUpYearList":string,
      /**  Site Identifier  */  
   "Plant":string,
      /**  Customer Contract Number  */  
   "ConConNum":number,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  material lines. If blank the standard InvcDtl.TaxCatID defaulting will be used.  */  
   "MtlTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  labor lines.  */  
   "LbrTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  fee lines.  */  
   "FeeTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  ODC lines. If blank use the tax category from the PurMisc misc charge code record  */  
   "ODCTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID Subcontract lines.  */  
   "SubTaxCatID":string,
      /**  Descriptive code assigned by user which uniquely identifies a Tax Category to default for PB Invoice InvcDtl.TaxCatID  Burden lines.  */  
   "BdnTaxCatID":string,
      /**  Calculate taxes on the amount net of the retention (for future use)  */  
   "TaxOnNetOfRet":boolean,
      /**  Date of last project analysis run.  */  
   "LastAnalDate":string,
      /**  Indicates if full Re-gen is required for the project. When this is set, the next generate of project analysis will be full re-gen.  */  
   "RegenReqd":boolean,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling.  */  
   "PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Project currency  */  
   "DocPBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt1PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt2PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt3PBCeilingTotal":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling.  */  
   "PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Project currency  */  
   "DocPBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt1PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt2PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt3PBCeilingFees":number,
      /**  If false then when an employee is booking hours to a job they can enter any Project Role code that has been set up on the employee. When the field is set to true then the Project Role entered MUST be one of the Project Role codes that have been assigned to the operation.  */  
   "ChkEmpPrjRole":boolean,
      /**  Progress Payment Liquidation Percentage, used in Get Shipment.  */  
   "PPLiquidPct":number,
      /**  Progress Invoice All Order Lines.  If this is set to trye, then the progress invoice preparation process will include the jobs as defined by the parameter PPAllPrjJobs.  */  
   "PPAllOrderLines":boolean,
      /**  If this is false then the Progress Payment Invoice process will ONLY process jobs that have a demand link to the sales order defined on this sheet. If the field is true then all jobs linked to the project (WBS or Production) will be processed by the Invoice Preparation process.  */  
   "PPAllPrjJobs":boolean,
      /**  PbsTaxCatID  */  
   "PbsTaxCatID":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Activate Revenue Recognition at WBS Phase level  */  
   "RecognizeRevenueAtPhaseLevel":boolean,
      /**  Last action performed on Project as relates to revenue recognition.  */  
   "LastAction":string,
      /**  Date when the LastAction happened to the Project.  */  
   "ActionDate":string,
   "WhseDesc":string,
   "BinDesc":string,
   "AsmSeq":number,
      /**  Field used to display the address of ConCustNum  */  
   "DspConCustAddr":string,
      /**  Field used to display the address of ConBTCustNum  */  
   "DspConBTCustAddr":string,
      /**  Indicates whether the revenue recognition method can be changed on the project. True = the user can change the value defaulted into the project.  */  
   "AllowRevRecChg":boolean,
      /**  True indicates the user can change the Derive Project Rates from at the project level.  */  
   "AllowPrjRtSrcChg":boolean,
      /**  It is the balance of the Total Progress Payments to date minus Total Amount Liquidated to date.  */  
   "PPOBalance":number,
      /**  Field used in UI to disable/enable ExchangeRate.  */  
   "EnableExchangeRate":boolean,
      /**  Field used in UI to disable/enable LockRate.  */  
   "EnableLockRate":boolean,
   "BaseCurrencyID":string,
   "RefCodeCurrSymbol":string,
   "CurrencySwitch":boolean,
   "DocPPOBalance":number,
   "Rpt1PPOBalance":number,
   "Rpt2PPOBalance":number,
   "Rpt3PPOBalance":number,
      /**  Holds the use answer to the question: Burden Sets will be reset. Continue?  */  
   "OkToResetBdnSets":boolean,
      /**  True if HoldPrdInv field was changed from true to false.  */  
   "ChgdHoldPrdInvTtoF":boolean,
      /**  True if HoldPrdInv field was changed from false to true.  */  
   "ChgdHoldPrdInvFtoT":boolean,
   "opMessage":string,
   "TimeWFGroupIDDescription":string,
   "ExpenseWFGroupIDDescription":string,
   "EnableApprovals":boolean,
   "TimeDefTaskSetID":string,
   "ExpenseDefTaskSetID":string,
   "ExpenseTaskSetDescription":string,
   "TimeTaskSetDescription":string,
      /**  logial to tell us whether the TimeApprovalReqd flag is set in PlantConfCtrl.  */  
   "TimeApprovalReqd":boolean,
      /**  logical to determine whether ExpenseApprovalReqd is set in PlantConfCtrl  */  
   "ExpenseApprovalReqd":boolean,
      /**  Set to true if any PBGInvcHead where PBGInvcHead.PrcStatus = A or P (approved or posted). Used to control enable/disable of fields in Project Entry  */  
   "InvcIsApproved":boolean,
      /**  Used to determine whether to enable the ChkEmpPrjRole flag on Project.  */  
   "AllowChkEmpPrjRoleChg":boolean,
      /**  The full name of the customer.  */  
   "ConBTCustNumName":string,
      /**  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  */  
   "ConBTCustNumBTName":string,
      /**  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  */  
   "ConBTCustNumCustID":string,
      /**  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  */  
   "ConCustNumCustID":string,
      /**  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  */  
   "ConCustNumBTName":string,
      /**  The full name of the customer.  */  
   "ConCustNumName":string,
      /**  Date the price list become effective.  */  
   "ConListCodeStartDate":string,
      /**  Date that the price list expires on.  */  
   "ConListCodeEndDate":string,
      /**  Description of the price list.  */  
   "ConListCodeListDescription":string,
      /**  Last name of employee  */  
   "ConProjMgrLastName":string,
      /**  This is the employee's full name. This is not directly maintainable. It is a concatenation of the FirstName + MiddleInitial + LastName fields. It exists so that it can be used in browses or where ever the complete name in a first, middle, last fashion is required.  */  
   "ConProjMgrName":string,
      /**  First name of employee.  */  
   "ConProjMgrFirstName":string,
      /**  Description of the currency  */  
   "CurrencyCodeCurrDesc":string,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   "CurrencyCodeCurrSymbol":string,
      /**  This is the updatable version of CurrencyCode.  This currency cannot be a record already in the currency table.  */  
   "CurrencyCodeCurrencyID":string,
      /**   An extended description that can be used on documents such as
POs and invoices.  */  
   "CurrencyCodeDocumentDesc":string,
      /**   Used to print as the suffix to the word amount line printed on checks.  For example:
One Hundred and 00/100 Dollars. In this case  "Dollars" is the CurrName  */  
   "CurrencyCodeCurrName":string,
      /**  The Plant name. Used on shipping reports.  */  
   "PlantName":string,
      /**  Description of the markup.  */  
   "QMarkupDescription":string,
      /**  Description  */  
   "RateGrpCodeDescription":string,
      /**  Description of the sales category.  */  
   "SalesCatDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatBdnDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatFeeDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatLbrDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatMtlDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatODCDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatPbsDescription":string,
      /**  Full description for the Sales Tax category.  */  
   "TaxCatSubDescription":string,
      /**  Messaging related to transacting on Revenue Recognition.  */  
   "RevenueRecognitionMessage":string,
      /**  Row has been selected for processing.  */  
   "SelectedForAction":boolean,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectMilestoneRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the  Project.  Links the Milestone to the Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Uniquely identifies a ProjectMilestone.  */  
   "MilestoneID":string,
      /**  A milestone is marked as complete when all the associated criteria, as defined by the MilestoneCritera, are true.  The field is set by the system in OMP20.W.  Or it can be set manually.  */  
   "Complete":boolean,
      /**  Description  */  
   "Description":string,
      /**  How the billing amount will be generated.   "C" = Cost To Date, "F" = Fixed Amount.  */  
   "BillingType":string,
      /**  If YES, an A/R invoice will be generated when all the associated ProjectCriteria are true.  */  
   "BillingRequired":boolean,
      /**  When Billing Type = "F", then this is the amount to be on the Invoice Line.  */  
   "BillingAmount":number,
      /**  The OrderHed that this ProjectMilestone is linked to.  Company plus OrderNum is the foreign key to the OrderHed table.  */  
   "OrderNum":number,
      /**   For an invoice to be generated this needs to be a valid OrderDtl record.  Once a ProjectMilestone is linked to an OrderDtl, the OrderDtl cannot be deleted.
Company plus OrderNum plus OrderLine is the foreign key to the OrderDtl table.  */  
   "OrderLine":number,
      /**  The OrderRel Num is assigned when the A/R Invoice is created.  It is set to the last open OrderRel for the OrderNum/OrderLine.  If there are no open OrderRels, then it is the last OrderRel.  */  
   "OrderRelNum":number,
      /**  Markup Material Percent.  The amount to be billed will be the total Material Cost of the associated Job, multiplied by this amount.  */  
   "MarkupMtlPct":number,
      /**  Markup subcontract percent.  The amount to be billed will be the total Subcontract Cost of the associated Job, multiplied by this amount.  */  
   "MarkupSubcontractPct":number,
      /**  Markup labor percent.  The amount to be billed will be the total Labor cost of the associated Job, multiplied by this amount.  */  
   "MarkupLaborPct":number,
      /**  Markup burden percent.  The amount to be billed will be the total Burden cost of the associated Job, multiplied by this amount.  */  
   "MarkupBurdenPct":number,
      /**  Markup material burden percent.  The amount to be billed will be the total Material Burden Cost of the associated Job, multiplied by this amount.  */  
   "MarkupMtlBurdenPct":number,
      /**  Company plus InvoiceNum is the foreign key to the InvcHead.   When an invoice is generated for the ProjectMilestone this field is set.  It is not user maintainable.  */  
   "InvoiceNum":number,
      /**  Company plus InvoiceNum plus InvoiceLine is the foreign key to the InvcDtl table.   When an invoice is generated for the ProjectMilestone this field is set.  It is not user maintainable.  */  
   "InvoiceLine":number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Mandatory entry and must be valid. Default as the system date.  */  
   "OrderDate":string,
      /**  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  */  
   "OrderPONum":string,
      /**  The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.  */  
   "OrderDtlPartNum":string,
      /**  A unique code that identifies the currency.  Comes from OrderHed.CurrencyCode.  */  
   "CurrencyCode":string,
      /**  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  */  
   "InvoiceAmt":number,
      /**  Invoice date is duplicated from the InvcGrp record.  */  
   "InvoiceDate":string,
      /**  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments ...the earliest unpaid scheduled payment.  */  
   "InvoiceDueDate":string,
      /**  Indicates if this invoice has been Posted to the receivables file.  */  
   "InvoicePosted":boolean,
      /**  The full name of the customer.  */  
   "CustomerName":string,
   "BillingTypeDescription":string,
   "BitFlag":number,
   "InvoiceLineLineDesc":string,
   "InvoiceNumCardMemberName":string,
   "InvoiceNumTermsCode":string,
   "OrderLineLineDesc":string,
   "OrderNumCurrencyCode":string,
   "OrderNumCardMemberName":string,
   "ProjectIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectOrderLineRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Contains the Order Number that ties this detail record back to an OrderHed record.  */  
   "OrderNum":number,
      /**  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  */  
   "OrderLine":number,
      /**   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the OrderDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  */  
   "PartNum":string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  */  
   "IUM":string,
      /**  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  */  
   "RevisionNum":string,
      /**   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  */  
   "UnitPrice":number,
      /**   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  */  
   "DocUnitPrice":number,
      /**  Total Order Quantity for the line item. This quantity must always be kept in sync with the scheduled ship quantities stored in the OrderRel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line ( more than one OrderRel record) the OrderQty is not maintainable. As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This ensures that Order quantity and scheduled ship quantity are always in sync.  */  
   "OrderQty":number,
      /**   Date that the first release needs be shipped by in order to meet the customers due date for the first delivery. Defaulted as OrderHed.RequestDate.
Not directly maintainable when more than one delivery record exists, in which case it gets refreshed as the earliest ReqDate of the related OrderRel records.  */  
   "RequestDate":string,
      /**  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  */  
   "XPartNum":string,
      /**  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  */  
   "XRevisionNum":string,
      /**  Quote number to which this line item detail record is associated with. This is part of the foreign key to QuoteHed file. This field is updated via the "get quote" function within Order Entry.  */  
   "QuoteNum":number,
      /**  Quote Line number from which this order line was created. Updated via the Get Quote function within Order Entry. This field along with Company and QuoteNum make up the link to the QuoteDtl file.  */  
   "QuoteLine":number,
      /**   Date the customer needs the first release to be delivered.
Defaulted as OrderHed.NeedByDate. Not directly maintainable when more than one delivery record exists. In which case it is kept in sync with the OrderRel record which has the earliest ReqDate which are maintained in the shipping release dialog boxes.  */  
   "NeedByDate":string,
      /**  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the OrderDtl records for a specific customer.  */  
   "CustNum":number,
      /**  Project ID of the Project table record that this OrderDtl record. Can be blank.  */  
   "ProjectID":string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  The full name of the customer.  */  
   "CustomerName":string,
      /**  Holds the user answer to the question: "This order line is part of project &1.  Do you wish to change the associated project for this order line?"  */  
   "OkToReassociate":boolean,
      /**  Currency Code of the related record  */  
   "CurrencyCode":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
   "UD_SysRevID":string,
   "Phase_c":string,
   "ItemID_c":string,
   "TypeCode_c":string,
   "OrigTypeCode_c":string,
   "PhaseID_c":string,
   "SalesCatID_c":string,
   "IndustryShipDate_c":string,
   "CreateDate_c":string,
   "PriceUpdateDate_c":string,
   "CreatedBy_c":string,
   "UpdatedBy_c":string,
}

export interface Erp_Tablesets_ProjectOrderRelRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Sales Order Number  */  
   "OrderNum":number,
      /**  Sales order Line number that this order release is linked to.  */  
   "OrderLine":number,
      /**  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  */  
   "OrderRelNum":number,
      /**  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  */  
   "LineType":string,
      /**  Date which the item needs to be shipped by in order to meet the customers due date. Initially defaulted as OrderHed.ReqDate.  */  
   "ReqDate":string,
      /**  Quantity ,using Our U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  */  
   "OurReqQty":number,
      /**  The ShipTo ID to be used for this scheduled release record. This MUST BE VALID IN THE SHIPTO file. Use the OrderHead.ShiptoNum as the default when creating new records.  */  
   "ShipToNum":string,
      /**  Ship Via ID that is used for this shipment release. THIS CAN BE BLANK or MUST BE VALID IN THE SHIPVIA master file. Use the OrderHead.ShipViaCode as the default.  */  
   "ShipViaCode":string,
      /**  Indicates if this release is open.  This is normally set to closed via the shipping program. But can be changed indirectly  by the user during order entry when they "Void" the release..  */  
   "OpenRelease":boolean,
      /**  Indicates if this release is  "FIRM". The opposite is an uncommitted release, that is when the customer gives releases that are just 'Best Guesses' of what they will require in the future, such as in blanket order situations. This type of  releases is no different to the system, except that the FirmRelease field will be printed on reports such as TimePhase requirements.  */  
   "FirmRelease":boolean,
      /**   Indicates if this requirement or any part of it will be manufactured. Default the setting to "No" if valid Part and the Part.Type is "S" or "P".

Default the setting to "Yes" if the part is not found in Part master or the Part.Type = "J".  This flag also gets set if this release gets linked to a Job via Job Entry. There is an Index on this field so that we can display releases that need have a job assigned to them. This display is part of Job Entry.  */  
   "Make":boolean,
      /**   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.

When an OrderRel record is 'voided' any outstanding inventory allocations are relieved, OrderRel.OpenRelease is set to "no" and records are created/updated in the OrdJobMsg file for all the related  open OrderRel records if the OrderDtl that was tied to a Job to indicate that the line item was voided.  */  
   "VoidRelease":boolean,
      /**  Quantity, using Our U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  */  
   "OurStockQty":number,
      /**  Indicates the inventory warehouse. This field is only relevant if this line references a valid Part record. Use the PrimWhse in the Part table as a default.  */  
   "WarehouseCode":string,
      /**  Actual quantity, using our U/M, shipped from Stock.  Updated via the shipping process.  */  
   "OurStockShippedQty":number,
      /**  The part number the release quantity is currently allocated to (if it exists in the part master file).  This is a duplicate of the OrderDtl part number and is not user maintainable.  */  
   "PartNum":string,
      /**  Part Revision number.  Mirror image of OrderDtl.RevisionNum.  Not directly maintainable.  */  
   "RevisionNum":string,
      /**  Indicates if this customer/shipto  is exempt from sales tax for this line item. If field is non-blank it is considered exempt. Defaults from the Customer/Shipto file.  This code is totally user definable and no validation is required. This field will be printed on the Tax report if this item is reportable .  */  
   "TaxExempt":string,
      /**  Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Enter via a DDSL fill-in for contact name. Use OrderHed.ShpConNum when the OrderRel.ShipToNum = OrderHed.ShipToNum else use ShipTo.PrimScon as a default.  */  
   "ShpConNum":number,
      /**  Date customer needs the item to be delivered. Defaulted as OrderHed.NeedByDate.  */  
   "NeedByDate":string,
      /**  EDI Reference  */  
   "Reference":string,
      /**  Site Identifier.  */  
   "Plant":string,
      /**  Indicates if the release is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  */  
   "SelectForPicking":boolean,
      /**  The shipping "Staging" warehouse for the release.  Defaults from the system default shipping area (Site.DefShippingWhse). This is maintainable in the Sales Allocation program.  */  
   "StagingWarehouseCode":string,
      /**  The shipping "Staging" bin for the release.  Defaults from the system default shipping area (Site.DefShippingBin). This is maintainable in the Sales Allocation program.  */  
   "StagingBinNum":string,
      /**   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  */  
   "PickError":string,
      /**  Quantity from last EDI update.  */  
   "CumeQty":number,
      /**  Date of last update  */  
   "CumeDate":string,
      /**  Indicates if this order release is linked to an inter-company PO release.  */  
   "Linked":boolean,
      /**  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  */  
   "ICPOLine":number,
      /**  External Trading Company Identifier.  */  
   "ExtCompany":string,
      /**  A link to the demand schedule that created/updated this OrderRel.  */  
   "ScheduleNumber":string,
      /**  The Mark For to be used for this order release record. This MUST BE VALID IN THE SHIPTO file.  */  
   "MarkForNum":string,
      /**  Full name for the drop shipment.  */  
   "DropShipName":string,
      /**  RAN Number.  Used for informational purposes.  Supplied by EDI.  */  
   "RAN":string,
      /**  Demand Reference.  Used for informational purposes and to aide in matching demand schedules with existing OrderRel records.  Supplied by EDI.  */  
   "DemandReference":string,
      /**  Indicates if the demand schedule that created/updated this order release has been rejected.  */  
   "DemandSchedRejected":boolean,
      /**  The last date that the Material Queue Report was run for this release.  This field will be null until the Material Queue Report is run.  */  
   "DatePickTicketPrinted":string,
      /**  Is this a residential delivery  */  
   "ResDelivery":boolean,
      /**  Is a Saturday delivery acceptable  */  
   "SatDelivery":boolean,
      /**  Is a Saturday pickup available  */  
   "SatPickup":boolean,
      /**  Verbal Confirmation required  */  
   "VerbalConf":boolean,
      /**  Hazmat or Dangerous Goods delivery  */  
   "Hazmat":boolean,
      /**  Documents Only delivery  */  
   "DocOnly":boolean,
      /**  Reference Notes for the delivery  */  
   "RefNotes":string,
      /**  Apply Handling Charge to shipment  */  
   "ApplyChrg":boolean,
      /**  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  */  
   "GroundType":string,
      /**  Indicates whether to send an email notification of delivery  */  
   "NotifyFlag":boolean,
      /**  The list of email address to notify about a delivery  */  
   "NotifyEMail":string,
      /**  Flag to indicate that an insurance value was declared on delivery  */  
   "DeclaredIns":boolean,
      /**  Declared Insurance Amount  */  
   "DeclaredAmt":number,
      /**  Service Home Delivery Type Code  */  
   "DeliveryType":string,
      /**  Override Carrier Defaults.  If not checked then the Site values will be used  */  
   "OverrideCarrier":boolean,
      /**  Override Service Options.  If not checked then the Site values will be used  */  
   "OverrideService":boolean,
      /**  The dockingstation of the shipto address.  For future use.  */  
   "DockingStation":string,
      /**  The location within the customer shipto address.  For future use.  */  
   "Location":string,
      /**  The code of the transport routing/time. For future use.  */  
   "TransportID":string,
      /**  Userid of user who made the last change to this record.  */  
   "ChangedBy":string,
      /**  The date that the record was last changed  */  
   "ChangeDate":string,
      /**  The time that the record was last change (seconds since midnight)  */  
   "ChangeTime":number,
      /**  If true, the OrderRelTax records tied to this release are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  */  
   "TaxConnectCalc":boolean,
      /**  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the release before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  */  
   "GetDfltTaxIds":boolean,
      /**  Unique identifier of the Tax Region assigned by the user.  */  
   "TaxRegionCode":string,
      /**  Indicates that the One Time ShipTO information defined for this release should be used.  */  
   "UseOTS":boolean,
      /**   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a store description.
Will be printed on the packing slip  */  
   "SubShipTo":string,
      /**  This field identifies Buy To Order releases.  */  
   "BuyToOrder":boolean,
      /**  The value for this field will be defaulted from the Supplier defined in the Part Site sub tab at the Part form. Used only for Buy To Order releases.  */  
   "VendorNum":number,
      /**  Supplier Purchase Point. Used only for Buy To Order releases.  */  
   "PurPoint":string,
      /**  This field identifies Drop Ship releases. Used only for Buy To Order releases.  */  
   "DropShip":boolean,
      /**  Purchase order related to this Buy To Order release. Used only for Buy To Order releases.  */  
   "PONum":number,
      /**  The line number of the purchase order related to this Buy To Order release. Used only for Buy To Order releases.  */  
   "POLine":number,
      /**  The release number of the purchase order line related to this Buy To Order release. Used only for Buy To Order releases.  */  
   "PORelNum":number,
      /**  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  */  
   "OpenOrder":boolean,
      /**  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  */  
   "ShipToCustNum":number,
      /**   Unit of Measure that qualifies the "our" quantity fields.
If a valid part then it is the Base Stocking UOM (Part.IUM).
A mirror image of OrderDtl.IUM. Not directly maintainable  */  
   "IUM":string,
      /**   Selling Unit of measure. Qualifies the "Selling" quantity fields.
A mirror image of OrderDtl.SalesUM. Not directly maintainable.  */  
   "SalesUM":string,
      /**  Status of Order Release  */  
   "RelStatus":string,
      /**  Displays the cause why the item is not compliant.  */  
   "ComplianceMsg":string,
      /**  Mark For Customer Number. This along with Mark For ShipToNum provides the foreign key field to a given ShipTo.  */  
   "MFCustNum":number,
      /**  Indicates that the One Time Mark For information defined for this record should be used.  */  
   "UseOTMF":boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  PhaseID  */  
   "PhaseID":string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
   "ProjectID":string,
   "ShipToNumInactive":boolean,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
   "UD_SysRevID":string,
   "JobNum_c":string,
}

export interface Erp_Tablesets_ProjectPORow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Indicates if this release is open.  This is normally closed via the receiving program. But can be changed indirectly  by the user during order entry when they "Void" the release..  */  
   "OpenRelease":boolean,
      /**   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.
When an PORel record is 'voided',  PORel.OpenRelease is set to "no".  If no other open PORel records exist for the related PODetail then the PoDetail.OpenLine is set to "No". If no other open PoDetail records exist then set the PoHeader.OperOrder = No.
This can also be set when the related PoDetail or PoHeader is voided.  */  
   "VoidRelease":boolean,
      /**  Purchase order that this release record is related to.  */  
   "PONum":number,
      /**  The line # of  PODetail record that the PORel record is related to.  */  
   "POLine":number,
      /**  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  */  
   "PORelNum":number,
      /**  Specifies the date by which you need to receive a release of a part. This date is taken from the Purchase Order Line Due Date, if it’s null, PORel.DueDate will take the value from POHeader.DueDate. If you're adding releases from: - BTO or Drop Shipments, PORel.DueDate will take the value from OrderRel.NeedByDate  - Job Material , PORel.DueDate will take the value from JobMtl.ReqDate. - Subcontract Operations, PORel.DueDate wil take the value from JobOper.DueDate  */  
   "DueDate":string,
      /**  This is populated for Purchase Direct items only and contains the job number for the purchased direct item.  */  
   "JobNum":string,
      /**  This is populated for Purchase Direct items only and contains the assembly number for the purchased direct item.  */  
   "AssemblySeq":number,
      /**   Qualifies the JobSeq field as to be a "M" - Material (JobMtl) record or "S" - Subcontract (JobOper) reference.
FYI: This field can indirectly sets the TranType field via the write trigger. It can itself be set from the TranType. System keeps them compatible. JobSeqType/TranType values are; M = PUR-MTL,  S = PUR-SUB, " " = PUR-STK or PUR-UKN. This possibly could have been deleted. However we decided to keep it for backward compatablity reasons.  */  
   "JobSeqType":string,
      /**  Seq # of specific material or subcontract operation record.  */  
   "JobSeq":number,
      /**  Total quantity received to stock to date. In Purchasing unit of measure. This is a field maintained by the receipt process.  */  
   "ReceivedQty":number,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Project Phase ID  */  
   "WBSPhaseID":string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   "AttributeSetID":number,
      /**  OUR internal Part number for this item.  Comes from PODetail.  */  
   "PartNum":string,
      /**  The VendorNum that ties back to the Vendor master file.  This field is a duplicate of the field in POHeader and is maintained  in the write triggers of POHeader and PODetail.  */  
   "VendorNum":number,
      /**  A descriptive code assigned by the user to uniquely identify the vendor record.  This code must be unique within the file.  This ID may be used on displays/reports where space for full name is not available or may be inappropriate.  */  
   "VendorID":string,
      /**  Vendor's name.  This field has a format length of 50. Normally the maintenance will be done in a left/right scrollable field of 30. Printing may not always print all 50. This also applies to the address lines.  */  
   "VendorName":string,
      /**  Holds the user answer to the question: "This purchase order release is part of project &1.  Do you wish to change the associated project for this purchase order release?"  */  
   "OkToReassociate":boolean,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectPlanContractLineRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  The unique identifier of the planning contract.  */  
   "ContractID":string,
      /**  The unique identifier of the planning contract line.  */  
   "LineNum":number,
      /**  A unique part number that identifies this part. Sales Kits not allowed. Same part number can only be entered once in the same contract.  */  
   "PartNum":string,
      /**  Describes the Part.  */  
   "PartDescription":string,
      /**  The quantity that the user defined that the planning contract needs to plan ahead.  */  
   "ContractQty":number,
      /**  ContractUOM  */  
   "ContractUOM":string,
      /**  Due date of the planning contract line.  */  
   "DueDate":string,
      /**  The planning contract line comments.  */  
   "Comments":string,
      /**  OurContractQty  */  
   "OurContractQty":number,
      /**  The portion of the contract quantity that has been consumed for the demands linked to this planning contract. This is calculated when MRP is executed.  */  
   "ConsumedQty":number,
      /**  SysRevID  */  
   "SysRevID":number,
      /**  SysRowID  */  
   "SysRowID":string,
      /**  The portion of the demand linked to the contract that has been already satisfied.  */  
   "CompletedQty":number,
      /**  Inventory UOM that the Plan Contract Detail Part is allocated against.  */  
   "InvtyUOM":string,
   "OnHandQty":number,
      /**  The Contract Quantity expressed in the Inventory Unit of Measure  */  
   "ThisContractInvtyQty":number,
      /**  The portion of the contract quantity that has been Consumed but it is not yet been Completed. Calculated as Completed Qty - Consumed Qty.  */  
   "ThisOpenQty":number,
      /**  The portion of the contract quantity that has not been consumed yet. Calculated as Contract Qty - Consumed Qty.  */  
   "UnconsumedQty":number,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectQuotRow{
      /**  Company Identifier.  */  
   "Company":string,
   "CustomerName":string,
      /**  Quote number to which this line item detail record is associated with. This is part of the foreign key to OrderHed file.  */  
   "QuoteNum":number,
      /**  This field along with Company and QuoteNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the QuoteDtl record for the Quote and the adding 1 to it.  */  
   "QuoteLine":number,
   "DocUnitPrice":number,
   "ExpectedQty":number,
   "OkToReassociate":boolean,
      /**   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the QuoteDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  */  
   "PartNum":string,
   "Rev":string,
   "UM":string,
   "UnitPrice":number,
      /**  Currency Code of the related record  */  
   "CurrencyCode":string,
      /**  Project ID of linked project.  Must exist on the Project table. Can be blank.  */  
   "ProjectID":string,
      /**  Must exist on ProjPhase table if entered  */  
   "PhaseID":string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  ContractID  */  
   "ContractID":string,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Full description of Project Management Code.  */  
   "Description":string,
      /**  Indicates if this Project is active.  Can be changed directly by the user during entry.  */  
   "ActiveProject":boolean,
      /**  Editor widget for project comments.  */  
   "CommentText":string,
      /**  A LIST-DELIM delimited list of people.  */  
   "PersonList":string,
      /**  Will contain the coma separated list of the fields that the user has added to the project from within Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMap":string,
      /**  Will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Holds the default project warehouse code.  */  
   "WarehouseCode":string,
      /**  Holds the default project bin code.  */  
   "BinNum":string,
      /**  This holds the top level job to which all of the jobs created for a WBS Phase will be associated  */  
   "PrimaryJob":string,
      /**  This is the material placeholder in the primary project job to which all WBS Phase jobs will be linked.  */  
   "PrimaryMtl":number,
      /**  The sales category code used in the Revenue recognition process.  */  
   "SalesCatID":string,
      /**  The Product Group code used in the Revenue Recognition process.  */  
   "ProdCode":string,
      /**  RESERVED FOR FUTURE USE: Logical field. When set to true it indicates that the journals created to recognise the revenue for the project have been reversed.  */  
   "CloseAccrual":boolean,
      /**  Assembly Seq from JobAsmbl record.  */  
   "PrimaryAsmSeq":number,
      /**  Start Date of the project  */  
   "StartDate":string,
      /**  A  unique integer assigned by the system to new customers by Contract customer number. This field can be blank.  */  
   "ConCustNum":number,
      /**  Contract start date  */  
   "ConStartDate":string,
      /**  Date the contract is due to be complete  */  
   "ConEndDate":string,
      /**  Projected Contract End Date. Defaults to the Contract End Date but can be used to report on the projected end date.  */  
   "ConProjectedEnd":string,
      /**   Contract Reference number for project.
At the Epicor 9.05 release this field is reference only, at the Epicor 9.1 release when the whole contract system is enhanced then this field will reference an actual contract and a search will be provided.  */  
   "ConReference":string,
      /**  Employee ID of the person who has responsibility for the project  */  
   "ConProjMgr":string,
      /**  Total contract value for the project.  */  
   "ConTotValue":number,
      /**  Value of the posted invoices to date (system field)  */  
   "ConTotInv":number,
      /**   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
?CP? = Cost Plus
The default is Customer Shipment.  */  
   "ConInvMeth":string,
      /**  Foreign key to the QMarkUp  */  
   "MarkUpID":string,
      /**  Override of Labor Markup Percent  */  
   "PBLbMarkUp":number,
      /**  Override of Material Markup Percent  */  
   "PBMtlMarkUp":number,
      /**  Override of Subcontract Markup Percentage  */  
   "PBSubMarkUp":number,
      /**  Override of Other Direct Cost Markup %  */  
   "PBMiscMarkUp":number,
      /**  Retention percentage. How this is used is dependent on RetentionProc field.  */  
   "PBRetentionPcnt":number,
      /**   How the retention percentage will be used.
The options are ?M? = Maximum of Contract Value
?P? = Percent of Invoice Value.  */  
   "PBRetentionProc":string,
      /**  Project Fee  */  
   "PBFeeProject":number,
      /**  Apply Fee with list of the options: F =  First Invoice Only, A = All Invoices  */  
   "PBFeeApply":string,
      /**  Fee Type with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeType":string,
      /**  Apply Fees on list with the options: N = Net Cost, G = Gross Cost.  */  
   "PBFeeApplyOn":string,
      /**  Fee Invoice Text in Free format to allow the user to enter text that will be displayed on the invoice  */  
   "PBFeeInvoiceText":string,
      /**  Fee that is to be charged against any labor charges on an invoice  */  
   "PBFeeLbrCharge":number,
      /**  Labor Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeLbrType":string,
      /**  Labor Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeLbrApply":string,
      /**  Fee that is to be charged against any material charges on an invoice  */  
   "PBFeeMtlCharge":number,
      /**  Material Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeMtlType":string,
      /**  Material Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeMtlApply":string,
      /**  Fee that is to be charged against any Subcontract charges on an invoice.  */  
   "PBFeeSubCharge":number,
      /**  Subcontract Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeSubType":string,
      /**  Subcontract Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeSubApply":string,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice.  */  
   "PBFeeMiscCharge":number,
      /**  Miscellaneous Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   "PBFeeMiscType":string,
      /**  Miscellaneous Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   "PBFeeMiscApply":string,
      /**  Currency Code  */  
   "CurrencyCode":string,
      /**  Contract Customer Bill To number, foreign key to Customer  */  
   "ConBTCustNum":number,
      /**  If invoices are allowed to be generated even if the element is over the predefined ceiling.  */  
   "ConOverCeiling":boolean,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  */  
   "ConRevMethod":string,
      /**  Price list is used to establish the price for any materials when the invoicing method is set to T & M or Cost Plus. Can be empty.  */  
   "ConListCode":string,
      /**  Hours for Invoicing allows the user to decide which hours are to be used by the invoicing process, it has system list with the options: L =  Labor, B = Burden  */  
   "ConHrsInvc":string,
      /**  Rate Type Code  */  
   "RateGrpCode":string,
      /**  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  */  
   "LockRate":boolean,
      /**  Exchange rate that will be used for this role code entry.  Defaults from CurrRate.CurrentRate  */  
   "ExchangeRate":number,
      /**  This is the projected end date of the project but is not required and is only used if entered in the creation of the project job and for any user reporting requirements.  */  
   "EndDate":string,
      /**  Defaults from JCSyst.DfltPrjRtSrc. Defines where the invoice process will obtain the Project Role Rates from. Hierarchical works as defined for Invoice Preparation. All of the others will ONLY obtain the rates from the area defined. HIER = Hierarchical, PROJ = Project Only, EMPL = Employee Only, ROLE = Project Role Only  */  
   "PBPrjRtSrc":string,
      /**  Value of the posted invoices to date (system field) in the Project currency  */  
   "DocConTotInv":number,
      /**  If set to true a new primary job will be created automatically for the project.  */  
   "CreatePrjJob":boolean,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt1ConTotInv":number,
      /**  Project revision number  */  
   "Revision":number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt2ConTotInv":number,
      /**   This is the percentage of the costs for material, labor and burden that will be invoiced.
This is also used by the invoice entry process when invoicing regular shipments to determine the actual value of the invoice and how much will be relieved from the Progress Payments to date.  */  
   "PPAllowPcnt":number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   "Rpt3ConTotInv":number,
      /**   This will allow regular shipments to be invoiced normally.
Setting the field to true will cause the Customer Shipment process to place any packing slips for any sales order associated with the project to be placed on hold to prevent them being selected for invoicing. 
When the user changes this flag to true it will trigger business logic that will release the shipments for invoicing.  */  
   "HoldPrdInv":boolean,
      /**  Total contract value for the project. in the Project currency  */  
   "DocConTotValue":number,
      /**   This will default to true which will then trigger the Invoice Preparation process to produce a Progress Payment Invoice.
Setting this to false will cause the project to be ignored by the Invoice Preparation process.  */  
   "PPActive":boolean,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt1ConTotValue":number,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt2ConTotValue":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments.  */  
   "TotLiqToDate":number,
      /**  Total contract value for the project. in the Reporting currency  */  
   "Rpt3ConTotValue":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then  */  
   "PPCeilingTotal":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Project currency  */  
   "DocPBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt1PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt2PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   "Rpt3PBFeeLbrCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Project currency  */  
   "DocPBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt1PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt2PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   "Rpt3PBFeeMiscCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Project currency  */  
   "DocPBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt1PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt2PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   "Rpt3PBFeeMtlCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Project currency  */  
   "DocPBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt1PBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt2PBFeeSubCharge":number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   "Rpt3PBFeeSubCharge":number,
      /**  Allows individual ceilings to be applied to suppliers  */  
   "PBIndCeilingSup":boolean,
      /**  Allows individual ceilings to be applied to employee  */  
   "PBIndCeilingEmp":boolean,
      /**  Allows individual ceilings to be applied to role  */  
   "PBIndCeilingPRole":boolean,
      /**  Material Cost invoiced by date.  */  
   "PBDocInvoicedMtl":number,
      /**  Labor cost invoiced by date.  */  
   "PBDocInvoicedLbr":number,
      /**  Subcontract cost invoiced by date.  */  
   "PBDocInvoicedSub":number,
      /**  Material Burden Material cost invoiced by date.  */  
   "PBDocInvoicedMtlBur":number,
      /**  Other direct Costs invoiced by date.  */  
   "PBDocInvoicedMisc":number,
      /**  Burden Costs invoiced by date.  */  
   "PBDocInvoicedBur":number,
      /**  Fees charged by date  */  
   "PBDocInvoicedFees":number,
      /**  Next Temporary Invoice number used in the Invoice preparation table before invoice is generated  */  
   "NextTmpInvcNum":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Project currency  */  
   "DocTotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt1TotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt2TotLiqToDate":number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   "Rpt3TotLiqToDate":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Project currency  */  
   "DocPPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt1PPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt2PPCeilingTotal":number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   "Rpt3PPCeilingTotal":number,
      /**  Progress Billing - Order Number  */  
   "PBOrderNum":number,
      /**  Progress Payment - Order Number  */  
   "PPOrderNum":number,
      /**  Progress Billing - Order Line  */  
   "PBOrderLine":number,
      /**  Progress Payment - Order Line  */  
   "PPOrderLine":number,
      /**  Project Fee in the Project currency  */  
   "DocPBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt1PBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt2PBFeeProject":number,
      /**  Project Fee in the Reporting currency  */  
   "Rpt3PBFeeProject":number,
      /**  Set to true when the close billing has been executed. For Fixed Fee this is set only after all PBillSch are closed. For other types this is set when Close Project is executed.  */  
   "PBClose":boolean,
      /**  This field is set to true after the Project True Up has been executed.  */  
   "PBTrueUp":boolean,
      /**  Defines the Approvals Method for Time related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   "TimeApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Time transactions related to this Project.  */  
   "TimeWFGroupID":string,
      /**  Defines the Approvals Method for Expenses related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   "ExpenseApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Expense transactions related to this Project.  */  
   "ExpenseWFGroupID":string,
      /**  Number of Invoices generated for the Project  */  
   "PBNumInvoices":number,
      /**  List of fiscal years for which True Up was called  */  
   "PBTrueUpYearList":string,
      /**  Site Identifier  */  
   "Plant":string,
      /**  Customer Contract Number  */  
   "ConConNum":number,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  material lines. If blank the standard InvcDtl.TaxCatID defaulting will be used.  */  
   "MtlTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  labor lines.  */  
   "LbrTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  fee lines.  */  
   "FeeTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  ODC lines. If blank use the tax category from the PurMisc misc charge code record  */  
   "ODCTaxCatID":string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID Subcontract lines.  */  
   "SubTaxCatID":string,
      /**  Descriptive code assigned by user which uniquely identifies a Tax Category to default for PB Invoice InvcDtl.TaxCatID  Burden lines.  */  
   "BdnTaxCatID":string,
      /**  Calculate taxes on the amount net of the retention (for future use)  */  
   "TaxOnNetOfRet":boolean,
      /**  Date of last project analysis run.  */  
   "LastAnalDate":string,
      /**  Indicates if full Re-gen is required for the project. When this is set, the next generate of project analysis will be full re-gen.  */  
   "RegenReqd":boolean,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling.  */  
   "PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Project currency  */  
   "DocPBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt1PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt2PBCeilingTotal":number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt3PBCeilingTotal":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling.  */  
   "PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Project currency  */  
   "DocPBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt1PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt2PBCeilingFees":number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   "Rpt3PBCeilingFees":number,
      /**  If false then when an employee is booking hours to a job they can enter any Project Role code that has been set up on the employee. When the field is set to true then the Project Role entered MUST be one of the Project Role codes that have been assigned to the operation.  */  
   "ChkEmpPrjRole":boolean,
      /**  Progress Payment Liquidation Percentage, used in Get Shipment.  */  
   "PPLiquidPct":number,
      /**  Progress Invoice All Order Lines.  If this is set to trye, then the progress invoice preparation process will include the jobs as defined by the parameter PPAllPrjJobs.  */  
   "PPAllOrderLines":boolean,
      /**  If this is false then the Progress Payment Invoice process will ONLY process jobs that have a demand link to the sales order defined on this sheet. If the field is true then all jobs linked to the project (WBS or Production) will be processed by the Invoice Preparation process.  */  
   "PPAllPrjJobs":boolean,
      /**  AvoidPriceList  */  
   "AvoidPriceList":boolean,
      /**  PbsTaxCatID  */  
   "PbsTaxCatID":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  The identifier of the planning contract.  */  
   "ContractID":string,
      /**  Activate Revenue Recognition at WBS Phase level  */  
   "RecognizeRevenueAtPhaseLevel":boolean,
      /**  Indicates the date when the project is closed, if the project is reopen, the field will be cleared.  */  
   "ClosedDate":string,
      /**  Last action performed on Project as relates to revenue recognition.  */  
   "LastAction":string,
      /**  Date when the LastAction happened to the Project.  */  
   "ActionDate":string,
      /**  True indicates the user can change the Derive Project Rates from at the project level.  */  
   "AllowPrjRtSrcChg":boolean,
      /**  Indicates whether the revenue recognition method can be changed on the project. True = the user can change the value defaulted into the project.  */  
   "AllowRevRecChg":boolean,
   "AsmSeq":number,
   "BaseCurrencyID":string,
   "BinDesc":string,
      /**  True if HoldPrdInv field was changed from false to true.  */  
   "ChgdHoldPrdInvFtoT":boolean,
      /**  True if HoldPrdInv field was changed from true to false.  */  
   "ChgdHoldPrdInvTtoF":boolean,
   "ClosePrjJob":boolean,
      /**  List of fields which are referenced by COA segments.  */  
   "COASegReferences":string,
   "CurrencySwitch":boolean,
   "DocPPOBalance":number,
      /**  Field used to display the address of ConBTCustNum  */  
   "DspConBTCustAddr":string,
      /**  Field used to display the address of ConCustNum  */  
   "DspConCustAddr":string,
   "EnableApprovals":boolean,
      /**  Field used in UI to disable/enable ExchangeRate.  */  
   "EnableExchangeRate":boolean,
      /**  Field used in UI to disable/enable LockRate.  */  
   "EnableLockRate":boolean,
   "EngineerPrjJob":boolean,
      /**  logical to determine whether ExpenseApprovalReqd is set in PlantConfCtrl  */  
   "ExpenseApprovalReqd":boolean,
   "ExpenseDefTaskSetID":string,
   "ExpenseTaskSetDescription":string,
   "ExpenseWFGroupIDDescription":string,
      /**  Set to true if any PBGInvcHead where PBGInvcHead.PrcStatus = A or P (approved or posted). Used to control enable/disable of fields in Project Entry  */  
   "InvcIsApproved":boolean,
      /**  If exists  any Phase or Project with Invoicing method Fixed Fee.  */  
   "InvMethHasFF":boolean,
      /**  If exists  any Phase or Project with Invoicing method Time and Material or Cost Plus.  */  
   "InvMethHasTMCP":boolean,
      /**  List of Invoicing methods of the Project and all WBS Phases, delimitered by comma  */  
   "InvMethList":string,
      /**  Calculated field indicates if the Invoicing method is defined on Project Contract level only (not on any WBS Phase), is used in RowRules when user modifies Invocing method on Contract.  */  
   "InvMethOnHeader":boolean,
      /**  Holds the use answer to the question: Burden Sets will be reset. Continue?  */  
   "OkToResetBdnSets":boolean,
   "opMessage":string,
      /**  It is the balance of the Total Progress Payments to date minus Total Amount Liquidated to date.  */  
   "PPOBalance":number,
   "RefCodeCurrSymbol":string,
      /**  This controls if the principal job of a project is released or not.  */  
   "ReleasePrjJob":boolean,
      /**  If exists  any Phase or Project with Revenue Recognition method Manual.  */  
   "RevRecHasMan":boolean,
   "RevRecJrnlReverse":string,
   "Rpt1PPOBalance":number,
   "Rpt2PPOBalance":number,
   "Rpt3PPOBalance":number,
      /**  Pb tax cat ID description  */  
   "TaxCatPbsDescription":string,
      /**  logial to tell us whether the TimeApprovalReqd flag is set in PlantConfCtrl.  */  
   "TimeApprovalReqd":boolean,
   "TimeDefTaskSetID":string,
   "TimeTaskSetDescription":string,
   "TimeWFGroupIDDescription":string,
      /**  Calculated field is used to display opposite value of AvoidPriceList (so the former has default value True)  */  
   "UsePriceList":boolean,
   "WhseDesc":string,
      /**  Used to determine whether to enable the ChkEmpPrjRole flag on Project.  */  
   "AllowChkEmpPrjRoleChg":boolean,
   "EnableRecognizeRevenueAtPhaseLevel":boolean,
      /**  formatted address  */  
   "ConCustAddrFormatted":string,
      /**  formatted address  */  
   "ConBTCustAddrFormatted":string,
   "InvMethHasCP":boolean,
   "InvMethHasCS":boolean,
   "InvMethHasMB":boolean,
   "InvMethHasNN":boolean,
   "InvMethHasPP":boolean,
   "InvMethHasTM":boolean,
   "ExpenseApprovalTasksTree":string,
   "TimeApprovalTasksTree":string,
   "XRateLabel":string,
   "BitFlag":number,
   "ConBTCustNumBTName":string,
   "ConBTCustNumCustID":string,
   "ConBTCustNumName":string,
   "ConBTCustNumInactive":boolean,
   "ConCustNumInactive":boolean,
   "ConCustNumName":string,
   "ConCustNumBTName":string,
   "ConCustNumCustID":string,
   "ConListCodeStartDate":string,
   "ConListCodeListDescription":string,
   "ConListCodeEndDate":string,
   "ConProjMgrFirstName":string,
   "ConProjMgrName":string,
   "ConProjMgrLastName":string,
   "CurrencyCodeCurrSymbol":string,
   "CurrencyCodeDocumentDesc":string,
   "CurrencyCodeCurrencyID":string,
   "CurrencyCodeCurrName":string,
   "CurrencyCodeCurrDesc":string,
   "PlantName":string,
   "QMarkupMiscCostMarkUp":number,
   "QMarkupMaterialMarkUp":number,
   "QMarkupLaborMarkUp":number,
   "QMarkupSubcontractMarkUp":number,
   "QMarkupDescription":string,
   "RateGrpCodeDescription":string,
   "SalesCatDescription":string,
   "TaxCatBdnDescription":string,
   "TaxCatFeeDescription":string,
   "TaxCatLbrDescription":string,
   "TaxCatMtlDescription":string,
   "TaxCatODCDescription":string,
   "TaxCatSubDescription":string,
      /**  RowMod  */  
   "RowMod":string,
   "UD_SysRevID":string,
   "CustNum_c":number,
   "ShipToNum_c":string,
   "LienRequired_c":boolean,
   "DNBComplete_c":boolean,
   "DNBCompletedBy_c":string,
   "PermitRequired_c":boolean,
   "RightToLien_c":boolean,
   "RightToLienWithInDays_c":number,
   "ReviewedBy_c":string,
   "TermsCode_c":string,
   "AdditionalTerms_c":string,
   "PlannedShipDate_c":string,
   "SchedSubmittalDate_c":string,
   "FreightAmt_c":number,
   "NextMilestoneDate_c":string,
   "NextMilestoneDesc_c":string,
   "EstProfit_c":number,
   "EstMargin_c":number,
   "CommissionApproval_c":string,
   "CommissionApprovedBy_c":string,
   "CommissionApprovalDate_c":string,
}

export interface Erp_Tablesets_ProjectTaskAttchRow{
   "Company":string,
   "ProjectID":string,
   "TaskID":string,
   "DrawingSeq":number,
   "XFileRefNum":number,
   "SysRevID":number,
   "SysRowID":string,
   "ForeignSysRowID":string,
   "DrawDesc":string,
   "FileName":string,
   "PDMDocID":string,
   "DocTypeID":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_ProjectTaskRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  A user assigned code used to uniquely identify a Task within a Project.  Cannot be blank.  */  
   "TaskID":string,
      /**  Full description of Task ID.  */  
   "Description":string,
      /**  Editor widget for task comments.  */  
   "CommentText":string,
      /**  Task start date.  */  
   "StartDate":string,
      /**  Task due date.  */  
   "DueDate":string,
      /**  Must be greater than or equal to 0.  */  
   "PercentComplete":number,
      /**  Date this task was complete.  */  
   "DateComplete":string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   "TaskStatus":string,
      /**  A code which, when combined with the CompanyCode, uniquely identifies a person record.  */  
   "PersonID":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  The task ID that is returned from Microsoft Project.  */  
   "MSPTaskID":string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   "MSPPredecessor":string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  The key to the project checklist type used on the project task,  */  
   "TypeID":string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   "Duration":number,
      /**  This is will either be Hours or Days  */  
   "DurationType":string,
      /**  Person List - Obsolete field  */  
   "PersonList":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
   "TypeDesc":string,
   "PersonName":string,
   "PhaseDesc":string,
      /**  Person List got from the table ProjectTaskPerson  */  
   "DspPersonLst":string,
   "BitFlag":number,
   "PersonIDName":string,
   "ProjectIDDescription":string,
      /**  RowMod  */  
   "RowMod":string,
}

export interface Erp_Tablesets_WBSProjPhaseRow{
      /**  Company Identifier.  */  
   "Company":string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   "ProjectID":string,
      /**  Project Phase ID  */  
   "PhaseID":string,
      /**  Description  */  
   "Description":string,
      /**  Task start date.  */  
   "StartDate":string,
      /**  Task due date.  */  
   "DueDate":string,
      /**  Must be greater than or equal to 0.  */  
   "PercentComplete":number,
      /**  Date this task was complete.  */  
   "DateComplete":string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   "PhaseStatus":string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   "Duration":number,
      /**  Reference to the job number created for the WBS Phase.  */  
   "WBSJobNum":string,
      /**  This is the parent phase for this WBS Phase. On the UK software this currently uses field ShortChar01  */  
   "ParentPhase":string,
      /**  The task ID that is returned from Microsoft Project.  */  
   "MSPTaskID":string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   "MSPPredecessor":string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   "UserMapData":string,
      /**  Total budget labour hours for the Project phase  */  
   "BudTotLbrHours":number,
      /**  Total budget burden hours for the Project phase.  */  
   "BudTotBurHrs":number,
      /**  Total budget labour cost for the Project phase. This is production and setup combined.  */  
   "BudTotLbrCost":number,
      /**  Total budget burden cost for the Project phase. This is production and setup combined.  */  
   "BudTotBurCost":number,
      /**  Total budget subcontract costs for the Project phase  */  
   "BudTotSubCost":number,
      /**  Total budget material costs for the Project phase  */  
   "BudTotMtlCost":number,
      /**  Total budget material burden costs for the Project phase.  */  
   "BudTotMtlBurCost":number,
      /**  Total estimated labour hours for the Project phase  */  
   "TotEstLbrHrs":number,
      /**  Total estimated burden hours for the Project phase  */  
   "TotEstBurdenHrs":number,
      /**  Total estimated labour cost for the Project phase. This is production and setup combined.  */  
   "TotEstLbrCost":number,
      /**  Total estimated subcontract costs for the Project phase  */  
   "TotEstSubContCost":number,
      /**  Total estimated material costs for the Project phase  */  
   "TotEstMtlCost":number,
      /**  Total actual labour hours for the Project phase  */  
   "TotActLbrHrs":number,
      /**  Total actual burden hours for the Project phase  */  
   "TotActBurHrs":number,
      /**  Total actual labour cost for the Project phase. This is production and setup combined.  */  
   "TotActLbrCost":number,
      /**  Total actual burden cost for the Project phase. This is production and setup combined.  */  
   "TotActBurCost":number,
      /**  Total actual subcontract costs for the Project phase.  */  
   "TotActSubContCost":number,
      /**  Total actual material costs for the Project phase  */  
   "TotActMtlCost":number,
      /**  Total actual material burden costs for the Project phase.  */  
   "TotActMtlBurCost":number,
      /**  Manually entered estimate to complete for the labour hours for the project phase  */  
   "ManEstCtcLbrHrs":number,
      /**  Manually entered estimate to complete for the burden hours.  */  
   "ManEstCtcBurHrs":number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project phase.  */  
   "ManEstCtcLbrCost":number,
      /**  Manually entered estimate to complete for the burden cost for the project phase.  */  
   "ManEstCtcBurCost":number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project phase.  */  
   "ManEstCtcSubConCost":number,
      /**  Manually entered estimate to complete for the material cost for the project phase.  */  
   "ManEstCtcMtlCost":number,
      /**  Manually entered estimate to complete for the material burden cost for the project phase.  */  
   "ManEstCtcMtlBurCost":number,
      /**  Total calculated cost to complete labour hours for the Project phase.  */  
   "TotCtcLbrHours":number,
      /**  Total calculated cost to complete burden hours for the Project phase.  */  
   "TotCtcBurHours":number,
      /**  Total calculated cost to complete labour cost for the Project phase. This will be both production and setup.  */  
   "TotCtcLbrCost":number,
      /**  Total calculated cost to complete burden cost for the Project phase. This will be both production and setup.  */  
   "TotCtcBurCost":number,
      /**  Total calculated cost to complete subcontract cost for the Project phase.  */  
   "TotCtcSubConCost":number,
      /**  Total calculated cost to complete material cost for the Project phase.  */  
   "TotCtcMtlCost":number,
      /**  Total calculated cost to complete material burden cost for the Project phase.  */  
   "TotCtcMtlBurCost":number,
      /**  Total quoted labour hours for the Project phase  */  
   "TotQuotLbrHrs":number,
      /**  Total quoted burden hours for the Project phase.  */  
   "TotQuotBurHrs":number,
      /**  Total quoted labour cost for the Project phase. This will be both production and setup.  */  
   "TotQuotLbrCost":number,
      /**  Total quoted burden cost for the Project phase. This will be both production and setup.  */  
   "TotQuotBurCost":number,
      /**  Total quoted subcontract cost for the Project phase.  */  
   "TotQuotSubContCost":number,
      /**  Total quoted material cost for the Project phase.  */  
   "TotQuotMtlCost":number,
      /**  Total quoted material burden cost for the Project phase.  */  
   "TotQuotMtlBurCost":number,
      /**  This holds the bom level of the phase reletive to the parent.  */  
   "Level":number,
      /**  This is will either be Hours or Days  */  
   "DurationType":string,
      /**  Total estimated burden cost for the Project phase. This is production and setup combined.  */  
   "TotEstBurCost":number,
      /**  Total estimated material burden costs for the Project phase  */  
   "TotEstMtlBurCost":number,
      /**  'Roll Child Manual Cost to Complete to this Level  */  
   "RollChildMan":boolean,
      /**  Roll Child Budgets to this Level  */  
   "RollChildBud":boolean,
      /**  Sort Sequence of the project phase.  This field controls where on the project tree the phase needs to be displayed.  */  
   "SortSeq":number,
      /**  Reference to the Measured Work header.  It is used to collect the cost to determine if the Measured Work was profitable or not.  */  
   "MeasuredWorkID":string,
      /**  Total quoted other direct cost for the Project phase.  */  
   "TotQuotODCCost":number,
      /**  Total estimated other direct costs for the Project phase  */  
   "TotEstODCCost":number,
      /**  Total actual other direct costs for the Project phase.  */  
   "TotActODCCost":number,
      /**  Other direct cost manual CTC  */  
   "ManEstCTCODCCost":number,
      /**  Total calculated cost to complete other direct cost for the Project phase.  */  
   "TotCTCODCCost":number,
      /**  Other direct cost Budget Total  */  
   "BudTotODCCost":number,
      /**  Defines the Approvals Method for Time related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   "TimeApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Time transactions related to this WBS Phase.  */  
   "TimeWFGroupID":string,
      /**  Defines the Approvals Method for Expenses related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   "ExpenseApprovalsMethod":string,
      /**  Unique identifier of the workflow group for Expense transactions related to this WBS Phase.  */  
   "ExpenseWFGroupID":string,
      /**  PartNum  */  
   "PartNum":string,
      /**  RevisionNum  */  
   "RevisionNum":string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   "SysRevID":number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   "SysRowID":string,
      /**  Invoicing Method  */  
   "InvMethod":string,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery.  */  
   "RevMethod":string,
      /**  Sales Order Number  */  
   "OrderNum":number,
      /**  Sales Order Line  */  
   "OrderLine":number,
      /**  If any activity of the job assigned to the Phase has been recognized or invoiced  */  
   "WasRecInvoiced":boolean,
      /**  Date of last Build WBS Phase Analysis run.  */  
   "LastBuildWBSPhaseAnalysisDate":string,
      /**  Percentage of Completion  */  
   "PercentageOfCompletion":number,
      /**  Labor Cost To Be Recognized  */  
   "ToBeRecognizedLbrCost":number,
      /**  Burden Cost To Be Recognized  */  
   "ToBeRecognizedBurCost":number,
      /**  Material Cost To Be Recognized  */  
   "ToBeRecognizedMtlCost":number,
      /**  Subcontract Cost To Be Recognized  */  
   "ToBeRecognizedSubCost":number,
      /**  Material Burden Cost To Be Recognized  */  
   "ToBeRecognizedMtlBurCost":number,
      /**  ODC Cost To Be Recognized  */  
   "ToBeRecognizedODCCost":number,
      /**  Revenue To Be Recognized  */  
   "ToBeRecognizedRevenue":number,
      /**  When true,  Recognize Revenue separately at Child WBS Phases.  When false, Recognize Revenue for this phase and all child phases at this level.  */  
   "RecognizeRevenueAtChildPhaseLevel":boolean,
      /**  To control if the project phase budget values are to be rolled up to the project phase.  */  
   "RollBudgetsToWBSPhase":boolean,
      /**  TotWBSPhaseRev  */  
   "TotWBSPhaseRev":number,
      /**  The sales category code used in the Revenue recognition process.  */  
   "SalesCatID":string,
      /**  ActMtlNonJobCost  */  
   "ActMtlNonJobCost":number,
      /**  AsOfDate  */  
   "AsOfDate":string,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   "BdnRecSeqPosted":number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   "BdnRecSeqLastAdded":number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   "BdnRevenueAutoToday":number,
      /**  BillingToDate  */  
   "BillingToDate":number,
      /**  BuildAnalysis  */  
   "BuildAnalysis":boolean,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   "BurdenCostOfSales":number,
      /**  BurdenLbrCstToDate  */  
   "BurdenLbrCstToDate":number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "BurdenRecAutoCstTodate":number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   "BurdenRecManCstTodate":number,
      /**  BurManPosted  */  
   "BurManPosted":number,
      /**  BurPur  */  
   "BurPur":number,
      /**  Estimated burden cost.  */  
   "EstBurdenCost":number,
      /**  Estimated burden hours.  */  
   "EstBurdenHours":number,
      /**  Estimated labor cost.  */  
   "EstLaborCost":number,
      /**  Estimated labor hours.  */  
   "EstLaborHours":number,
      /**  Estimated material burden cost.  */  
   "EstMtlBurdenCost":number,
      /**  Estimated material cost.  */  
   "EstMtlCost":number,
      /**  Estimated other direct cost.  */  
   "EstODCCost":number,
      /**  Estimated subcontract cost.  */  
   "EstSubcontractCost":number,
      /**  The labour costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   "LaborCostOfSales":number,
      /**  LaborLbrCstToDate  */  
   "LaborLbrCstToDate":number,
      /**  The labour costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "LaborRecAutoCstTodate":number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "LaborRecManCstTodate":number,
      /**  LbrManPosted  */  
   "LbrManPosted":number,
      /**  LbrPur  */  
   "LbrPur":number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   "MaterialCostOfSales":number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   "MaterialRecAutoCstTodate":number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MaterialRecManCstTodate":number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   "MtlBurdenCostOfSales":number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   "MtlBurdenRecAutoCstTodate":number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   "MtlBurdenRecManCstTodate":number,
      /**  MtlBurManPosted  */  
   "MtlBurManPosted":number,
      /**  MtlBurPur  */  
   "MtlBurPur":number,
      /**  MtlManPosted  */  
   "MtlManPosted":number,
      /**  MtlPur  */  
   "MtlPur":number,
      /**  NextTmpInvcNum  */  
   "NextTmpInvcNum":number,
      /**  ODCManPosted  */  
   "ODCManPosted":number,
      /**  ODCPur  */  
   "ODCPur":number,
      /**  Other Direct cost Recognition to Date  */  
   "ODCRecAutoCstToDate":number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   "ODCRecManCstTodate":number,
      /**  RecManPosted  */  
   "RecManPosted":number,
      /**  RecogToDtBilling  */  
   "RecogToDtBilling":number,
      /**  RecogToDtLbk  */  
   "RecogToDtLbk":number,
      /**  RecogToDtManual  */  
   "RecogToDtManual":number,
      /**  RetentionDt  */  
   "RetentionDt":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   "RevenueRecAutoToDate":number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   "RevenueRecManToDate":number,
      /**  Reverse  */  
   "Reverse":string,
      /**  RollManEstToCpte  */  
   "RollManEstToCpte":boolean,
      /**  SubCManPosted  */  
   "SubCManPosted":number,
      /**  SubConCostOfSales  */  
   "SubConCostOfSales":number,
      /**  SubConRecAutoCstTodate  */  
   "SubConRecAutoCstTodate":number,
      /**  SubConRecManCstTodate  */  
   "SubConRecManCstTodate":number,
      /**  SubPur  */  
   "SubPur":number,
      /**  Total contract value for the WBS Phase.  */  
   "ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Document currency.  */  
   "DocConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt1ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt2ConTotValue":number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt3ConTotValue":number,
      /**  Net total contract value for the WBS Phase.  */  
   "ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Document currency.  */  
   "DocConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt1ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt2ConTotValueNet":number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   "Rpt3ConTotValueNet":number,
   "BitFlag":number,
      /**  RowMod  */  
   "RowMod":string,
   "UD_SysRevID":string,
   "ProjectType_c":string,
   "ShipToNum_c":string,
   "ShipToSameAsProj_c":boolean,
   "Price_c":number,
   "Discount_c":number,
   "ResaleRevenue_c":number,
   "FreightRevenueAmt_c":number,
   "SalesTaxRevenue_c":number,
   "Approved_c":boolean,
   "ApprovedBy_c":string,
   "ApprovedDate_c":string,
   "PartNum_c":string,
   "PartDescription_c":string,
   "CreateRelatedPhases_c":boolean,
}




//////////////////////////////////////////////////////////////////////////
// Custom Schemas:
//////////////////////////////////////////////////////////////////////////
   /** Required : 
      @param piQuoteNum
      @param piQuoteLine
      @param ds
   */  
export interface AddPhaseQuote_input{
      /**  The PO number of the candidate release to Add to the Project.  */  
   piQuoteNum:number,
      /**  The PO Line number of the candidate release to Add to the Project.  */  
   piQuoteLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddPhaseQuote_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   opMethMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param ds
   */  
export interface AddProjectJob_input{
      /**  The Job number of the candidate Job to Add to the Project.  */  
   pcJobNum:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddProjectJob_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param piOrderLine
      @param ds
   */  
export interface AddProjectOrderLine_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
      /**  The Line number of the candidate OrderLine to Add to the Project.  */  
   piOrderLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddProjectOrderLine_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   opPOMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipOrderRelNum
      @param ipCheckWarn
      @param ds
   */  
export interface AddProjectOrderRel_input{
      /**  The Order Release number of the candidate to Add to the Phase.  */  
   ipOrderRelNum:number,
      /**  if true, check if WBS Phase has no defined invoicing method.  */  
   ipCheckWarn:boolean,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddProjectOrderRel_output{
parameters : {
      /**  output parameters  */  
   opMesg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piPONum
      @param piPOLine
      @param piPORelNum
      @param ds
   */  
export interface AddProjectPO_input{
      /**  The PO number of the candidate release to Add to the Project.  */  
   piPONum:number,
      /**  The PO Line number of the candidate release to Add to the Project.  */  
   piPOLine:number,
      /**  The Release number of the candidate release to Add to the Project.  */  
   piPORelNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddProjectPO_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   pcSOWarnMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piQuoteNum
      @param piQuoteLine
      @param ds
   */  
export interface AddProjectQuote_input{
      /**  The PO number of the candidate release to Add to the Project.  */  
   piQuoteNum:number,
      /**  The PO Line number of the candidate release to Add to the Project.  */  
   piQuoteLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddProjectQuote_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   opMethMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipOrderNum
      @param ipOrderLine
      @param ipOrderRelNum
      @param ds
   */  
export interface AddRelatedPOs_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   ipOrderNum:number,
      /**  The Line number of the candidate OrderLine to Add to the Project.  */  
   ipOrderLine:number,
      /**  The release number of the candidate OrderLine to Add to the Project.  */  
   ipOrderRelNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddRelatedPOs_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface AddUpNumbers_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface AddUpNumbers_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

export interface BuildInvoicingMethodList_output{
parameters : {
      /**  output parameters  */  
   opInvMethList:string,
}
}

   /** Required : 
      @param ipProjectID
   */  
export interface BuildPBCloseBS_input{
      /**  project id  */  
   ipProjectID:string,
}

export interface BuildPBCloseBS_output{
   returnObj:Erp_Tablesets_PBCloseBSTableset[],
}

   /** Required : 
      @param ipProjectID
      @param ipPhaseID
   */  
export interface BuildPhaseLevels_input{
      /**  ipProjectID  */  
   ipProjectID:string,
      /**  ipPhaseID  */  
   ipPhaseID:string,
}

export interface BuildPhaseLevels_output{
}

   /** Required : 
      @param ds
      @param ipProjectID
      @param ipPhaseID
   */  
export interface BuildPhaseRevenueRecognitionHistoryDS_input{
   ds:Erp_Tablesets_RecognHistTableset[],
      /**  Project ID  */  
   ipProjectID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
}

export interface BuildPhaseRevenueRecognitionHistoryDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RecognHistTableset[],
}
}

   /** Required : 
      @param ds
      @param ipProjectID
   */  
export interface BuildProjectRevenueRecognitionHistoryDS_input{
   ds:Erp_Tablesets_RecognHistTableset[],
      /**  Project ID  */  
   ipProjectID:string,
}

export interface BuildProjectRevenueRecognitionHistoryDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RecognHistTableset[],
}
}

   /** Required : 
      @param ds
      @param ipProjectID
   */  
export interface BuildRevenRecogDS_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
      /**  Project ID  */  
   ipProjectID:string,
}

export interface BuildRevenRecogDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface CalculateButton_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface CalculateButton_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ipConInvMeth
      @param outMessage
      @param ds
   */  
export interface CheckChangedConInvMeth_input{
      /**  ipConInvMeth  */  
   ipConInvMeth:string,
      /**  outMessage  */  
   outMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface CheckChangedConInvMeth_output{
parameters : {
      /**  output parameters  */  
   outMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipCompany
      @param ipJobNum
   */  
export interface CheckToReschedule_input{
      /**  The returned message  */  
   ipCompany:string,
      /**  The returned message  */  
   ipJobNum:string,
}

export interface CheckToReschedule_output{
parameters : {
      /**  output parameters  */  
   vMessage:string,
}
}

   /** Required : 
      @param ipProjectID
      @param ds
   */  
export interface ClearAnalysis_input{
      /**  ipProjectID.  */  
   ipProjectID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface ClearAnalysis_output{
parameters : {
      /**  output parameters  */  
   opMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjID
      @param ipPhaseID
      @param ds
   */  
export interface ClearApprovals_input{
      /**  Project ID  */  
   ipProjID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface ClearApprovals_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjID
      @param ipPhaseID
      @param ds
   */  
export interface ClearTaskSet_input{
      /**  Project ID  */  
   ipProjID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface ClearTaskSet_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ds1
   */  
export interface CloseBillSched_input{
   ds:Erp_Tablesets_ProjectTableset[],
   ds1:Erp_Tablesets_PBCloseBSTableset[],
}

export interface CloseBillSched_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface CloseProjAccruals_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface CloseProjAccruals_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface CloseProject_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface CloseProject_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjectID
      @param ds
   */  
export interface CreateProjectJob_input{
      /**  Project ID  */  
   ipProjectID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface CreateProjectJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjectID
      @param ipPhaseID
      @param ds
   */  
export interface CreateWBSPhaseJob_input{
      /**  Project ID  */  
   ipProjectID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface CreateWBSPhaseJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param projectID
   */  
export interface DeleteByID_input{
   projectID:string,
}

export interface DeleteByID_output{
}

   /** Required : 
      @param sourceProjectID
      @param targetProjectID
      @param targetDescription
      @param ipCreateWBSJobs
      @param targetStartDate
   */  
export interface DuplicateProject_input{
      /**  Existing Project that will be duplicated.  */  
   sourceProjectID:string,
      /**  New Project ID that will be created.  */  
   targetProjectID:string,
      /**  Description that will be used for the new Project.  */  
   targetDescription:string,
      /**  Create WBS Phase Jobs.  */  
   ipCreateWBSJobs:boolean,
      /**  New Project Start Date.  */  
   targetStartDate:string,
}

export interface DuplicateProject_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
parameters : {
      /**  output parameters  */  
   outMessage:string,
}
}

export interface Erp_Tablesets_EntityGLCRow{
      /**  Company Identifier.  */  
   Company:string,
      /**   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  */  
   RelatedToFile:string,
      /**  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  */  
   Key1:string,
      /**   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  */  
   Key2:string,
      /**   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key3:string,
      /**   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key4:string,
      /**   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key5:string,
      /**   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key6:string,
      /**  Identifier of the GL Control Type.  */  
   GLControlType:string,
      /**  GL Control Identifier.  */  
   GLControlCode:string,
      /**  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  */  
   BusinessEntity:string,
      /**  Global Company identifier.  Used in Multi-Company Journal.  */  
   ExtCompanyID:string,
      /**  Flag to indicate the account in this record is for an external company.  */  
   IsExternalCompany:boolean,
      /**  Marks this EntityGLC as global, available to be sent out to other companies.  */  
   GlobalEntityGLC:boolean,
      /**  Disables this record from receiving global updates.  */  
   GlobalLock:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  BankAcctID of the related BankAcct record.  */  
   BankAcctID:string,
   BankFeeID:string,
      /**  CallCode of the related FSCallCd record.  */  
   CallCode:string,
   ChargeCode:string,
      /**  ClassCode of the related FAClass record.  */  
   ClassCode:string,
      /**  ClassID.  This can be ClassID of PartClass, PRClsDed, or PRClsTax  */  
   ClassID:string,
      /**  ContractCode of the related FSContCd record.  */  
   ContractCode:string,
      /**  CurrencyCode of the related Currency record.  */  
   CurrencyCode:string,
      /**  CustNum of the related Customer record  */  
   CustNum:number,
      /**  DeductionID of PRClsDed or PRDeduct.  */  
   DeductionID:string,
      /**  EmpID of the related PREmpMas record.  */  
   EmpID:string,
      /**  ExpenseCode of PayTLbr, LabExpCd  */  
   ExpenseCode:string,
      /**  ExtSystemID of ExtCompany table  */  
   ExtSystemID:string,
      /**  FromPlant value of the related PlntTranDef record.  */  
   FromPlant:string,
      /**  GroupCode of the related FAGroup record.  */  
   GroupCode:string,
   GroupID:string,
   HeadNum:number,
   InvoiceNum:string,
      /**  JCDept of the related JCDept record.  */  
   JCDept:string,
      /**  MiscCode of the related MiscChrg or PurMisc record.  */  
   MiscCode:string,
      /**  PartNum of the related Part record.  */  
   PartNum:string,
      /**  PayTypeID of PayType  */  
   PayTypeID:string,
   PerConName:string,
      /**  PI Status  */  
   PIStatus:string,
      /**  Plant of the related PlantConfCtrl record.  */  
   Plant:string,
      /**  ProdCode of the related ProdGrup record.  */  
   ProdCode:string,
      /**  ProjectID of the related Project record.  */  
   ProjectID:string,
      /**  PurchCode of the related GLPurch record.  */  
   PurchCode:string,
      /**  RateCode of the related GLRate record.  */  
   RateCode:string,
      /**  ReasonCode of the related Reason record.  */  
   ReasonCode:string,
      /**  ReasonType of the related Reason record.  */  
   ReasonType:string,
      /**  SalesCatID of the related SalesCat record.  */  
   SalesCatID:string,
      /**  Shift value of the related JCShift record.  */  
   Shift:number,
      /**  TaxCode of the related SalesTax record.  */  
   TaxCode:string,
      /**  TaxTblID of PRTaxMas or PRClsTax.  */  
   TaxTblID:string,
      /**  ToPlant value of the related PlntTranDef record.  */  
   ToPlant:string,
      /**  TransferMethod of ExtCompany table  */  
   TransferMethod:string,
      /**  Type ID  */  
   TypeID:string,
      /**  VendorNum of the related Vendor record.  */  
   VendorNum:number,
      /**  WarehouseCode of the related Warehse record.  */  
   WarehouseCode:string,
   ExpenseTypeCode:string,
   IsFiltered:boolean,
   OprTypeCode:string,
   CashDeskID:string,
   TIN:string,
   ReclassCodeID:string,
   BitFlag:number,
   GLCntrlDescription:string,
   GLCntrlTypeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ExportToMSPRow{
   Name:string,
   level:number,
   StartDate:string,
   Duration:string,
   Operation:string,
   ResName:string,
   Predecessors:string,
   TaskID:string,
   WorkHours:number,
   PcntComplete:number,
   RecNum:number,
   UserMap:string,
   UserMapData:string,
   EndDate:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ExportToMSPTableset{
   ExportToMSP:Erp_Tablesets_ExportToMSPRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_FieldServiceCallsRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  When creating a new Service Call ,the user is prompted for an Call number. If the field is left blank, the next available Number is assigned by the system. The system generates a number by finding the Call  of the last record on file and then a 1 to it.  */  
   CallNum:number,
      /**  This field along with Company and CallNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the last FSCalPrt record for the Call and the adding 1 to it.  */  
   CallLine:number,
      /**  The PartNum field identifies the Part  */  
   PartNum:string,
      /**  Optional field that contains the customers revision. Default from the Part.RevisionNum field.  */  
   RevisionNum:string,
      /**  Line Item description. The Part.Description can be used as a default.  */  
   LineDesc:string,
      /**  Serial number of the part being repaired.  */  
   SerialNumber:string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  */  
   IUM:string,
      /**  TotalCall Quantity for the line item.  */  
   CallQty:number,
      /**  Packing slip number that this Service call is linked with.  */  
   PackNum:number,
      /**  The packing slip line that holds the warranty information for this service call  */  
   PackLine:number,
      /**  Unique code for the Warranty  */  
   WarrantyCode:string,
      /**  Contract Number if this item is under a contract  */  
   ContractNum:number,
      /**  This is the contract line the relates to the item on the service call.  */  
   ContractLine:number,
      /**  A unique code that identifies the Contract  */  
   ContractCode:string,
      /**  Contains comments about the Item in need of service. These will be printed on the ServiceCall.  */  
   CallComment:string,
      /**  Used to establish invoice comments about the repaired item. These will copied into the Invoice detail file as defaults.  */  
   InvoiceComment:string,
      /**  Problem reason code from the reason master table. type problem.  */  
   ProbReasonCode:string,
      /**  Product Group Code. Use the xasyst.CallProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  */  
   XPartNum:string,
      /**  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  */  
   XRevisionNum:string,
      /**  Are Material cost covered  */  
   MatCovered:boolean,
      /**  Is Labor Cost Covered  */  
   LabCovered:boolean,
      /**  Are misc. Costs Covered  */  
   MiscCovered:boolean,
      /**  Project ID of the Project table record that this FSCallDt record. Can be blank.  */  
   ProjectID:string,
      /**  Job Number.  Associates the Call Line record back its linked JobHead record.  Not directly maintainable.  */  
   JobNum:string,
      /**  Site Identifier.  */  
   Plant:string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   BitFlag:number,
   ProjectDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_FieldServiceContractsRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Contract Number of the Contract  */  
   ContractNum:number,
      /**  This field along with Company and ContractNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the FSContDtl record for the Contract and the adding 1 to it.  The user can override this number if they wish.  */  
   ContractLine:number,
      /**  A unique code that identifies the Contract  */  
   ContractCode:string,
      /**  The PartNum field identifies the Part  */  
   PartNum:string,
      /**  Optional field that contains the customers revision. Default from the Part.RevisionNum field.  */  
   RevisionNum:string,
      /**  Line Item description. The Part.Description can be used as a default.  */  
   LineDesc:string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if its a valid Part.  */  
   IUM:string,
      /**  Price per unit for the Contract in base currency.  Defaults from the FScontCd table  */  
   PricePerUnit:number,
      /**  Price per unit for the Contract in customers currency.  Defaults from the FScontCd table  */  
   DocPricePerUnit:number,
      /**  Total Contract Quantity for the line item.  */  
   ContractQty:number,
      /**  Product Group Code. Use the Part.ProdCode as a default.  This can be blank or must be valid in the ProdGrup table.  */  
   ProdCode:string,
      /**  Used to establish invoice comments about the Contract line item. These will copied into the Invoice detail  file as defaults.  */  
   InvoiceComment:string,
      /**  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the FSContDt records for a specific customer.  */  
   CustNum:number,
      /**  Contains the Order Number that ties this detail record back to an OrderHed record.  */  
   OrderNum:number,
      /**  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  */  
   OrderLine:number,
      /**  Project ID of the Project table record that this FSContDt record. Can be blank.  */  
   ProjectID:string,
      /**  Editor widget for Contract comments.  */  
   CommentText:string,
      /**   A value of "ORD-ENT" indicates that this Service contract is related to a specific Sales Order and its line items and will be created and maintained from there, It will print on the Order acknowledgment and be invoiced with the sales order item as they are shipped.  A Value of "Cnt-Ent" indicates that this Service Contract was created from the service contract entry programs.  It is not directly related to a sales order; it will be printed by itself and invoiced by itself.
(Duplicated from FSContHd for Browse)  */  
   ContractType:string,
      /**  Contains comments about the detail contract line item. These will be printed on the Sales Acknowledgements and service contracts  */  
   ContractComment:string,
      /**  Sold to Order Number  */  
   SoldOrderNum:number,
      /**  Sold To Order line  */  
   SoldOrderLine:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ImportFromMSPRow{
   Name:string,
   level:number,
   StartDate:string,
   UserMap:string,
   UserMapData:string,
   Duration:number,
   PcntComplete:number,
   WorkHours:number,
   TaskID:string,
   Predecessors:string,
   RecNum:number,
   OpCode:string,
   WHType:string,
   DurType:string,
   EndDate:string,
   ResName:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ImportFromMSPTableset{
   ImportFromMSP:Erp_Tablesets_ImportFromMSPRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PBCloseBSRow{
   Company:string,
   ProjectID:string,
   BillSchedID:string,
   Description:string,
      /**  Flag to indicate if the billing schedule is selected for close.  */  
   CloseIt:boolean,
      /**  Total value of the Retentions that have not been invoiced in the project currency.  */  
   DocTotRetention:number,
      /**  The total value of the Billing Schedule Invoices produced.  */  
   DocTotInvoiced:number,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBCloseBSTableset{
   PBCloseBS:Erp_Tablesets_PBCloseBSRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PBEmpCeilingRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Employee  ID foreign key to the EmpBasic table  */  
   EmpID:string,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling  */  
   Ceiling:number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Project currency  */  
   DocCeiling:number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt1Ceiling:number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt2Ceiling:number,
      /**   Maximum value for the Employee that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt3Ceiling:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
   BitFlag:number,
   EmpBasicName:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBRoleRtRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Project Role Code  */  
   RoleCd:string,
      /**  The effective date of the project role code rate.  */  
   RateEffDate:string,
      /**  Time Type Code  */  
   TimeTypCd:string,
      /**  The charge rate for project role code expressed in the designated currency code.  */  
   ChargeRate:number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.  */  
   Ceiling:number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Project currency  */  
   DocCeiling:number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   Rpt1Ceiling:number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   Rpt2Ceiling:number,
      /**   Maximum value that can be charged for this Project Role Code.
Leaving the field at 0.00 means that there is no ceiling.
 in the Reporting currency  */  
   Rpt3Ceiling:number,
      /**  Labor transactions used this Role Code won?t be included in the invoice preparation.  */  
   ExcludeInvoiced:boolean,
      /**  The end date is used if the rate will only be in affect up to this date.  */  
   RateEndDate:string,
      /**  Sequence Number  */  
   Seq:number,
      /**  Role Code Markup Percent  */  
   PrcMarkup:number,
      /**  Flag to indicate if the value of the PrcMarkup field should be used as an override markup for this role code on this contract  */  
   OridePrcMarkup:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
   BitFlag:number,
   RoleCdRoleDescription:string,
   TimeTypCdDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBSchWrkRow{
      /**  Company  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  User defined ID to be used for this Schedule of Works.  */  
   SchWrkID:string,
      /**  Schedule of Works description  */  
   Description:string,
      /**  Free form text for Schedule of Works details.  */  
   Details:string,
      /**  Planned completion date for reference only, can be blank.  */  
   PlanCmplDte:string,
      /**  Estimated completion date for reference only, can be blank.  */  
   EstComplDte:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBSupCeilingRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Supplier Number, foreign key to the Vendor table  */  
   VendorNum:number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling  */  
   Ceiling:number,
      /**  Supplier?s Markup percentage  */  
   PrcMarkup:number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Project currency  */  
   DocCeiling:number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt1Ceiling:number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt2Ceiling:number,
      /**   Maximum value for the Supplier that can be charged.
Leaving the field at 0 means that there is no ceiling
 in the Reporting currency  */  
   Rpt3Ceiling:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
   BitFlag:number,
   VendorDefaultFOB:string,
   VendorTermsCode:string,
   VendorCity:string,
   VendorName:string,
   VendorAddress2:string,
   VendorAddress1:string,
   VendorVendorID:string,
   VendorCountry:string,
   VendorZIP:string,
   VendorAddress3:string,
   VendorCurrencyCode:string,
   VendorState:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBTrueUpBdnRow{
   Company:string,
   ProjectID:string,
   CurrencyCode:string,
   BdnSetID:string,
   BdnCd:string,
   ActBdnPrc:number,
   DocActTotalAmt:number,
   DocTrueUp:number,
   DocInvTotalAmt:number,
   BdnCdDescription:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBTrueUpBdnTableset{
   PBTrueUpBdn:Erp_Tablesets_PBTrueUpBdnRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PBWrkDtlHistoryRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Foreign key to the measured work header.  */  
   MeasuredWorkID:string,
      /**  System generated number from a counter held on the Measured Work Header.  */  
   DtlSeq:number,
      /**  Description  */  
   Description:string,
      /**  Date that the Quantity Surveyor was on site to establish the measurement readings.  */  
   DateonSite:string,
      /**  Quantity Surveyor is a Foreign Key field to the Shop Employee table, defaults from the Quantity Surveyor of the Measured Work Header.  */  
   QtySurveyor:string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure  */  
   ActAmount:number,
      /**  Date that the Measured Work Activity status is set to Approved.  */  
   ApprovalDate:string,
      /**  Status is applied to this Measured Work Activity. The available codes are ? S = Progress, D = Dispute, A = Approved, P = Posted.  */  
   ActStatus:string,
      /**  Activity Notes is used as comments for free format text entry.  */  
   ActNotes:string,
      /**  Issue Resolution Notes is used as comments for free format text entry.  */  
   IssueNotes:string,
      /**  Amount the customer?s quantity surveyor has agreed for this activity.  */  
   ApprovalAmt:number,
      /**  Date that the customer?s quantity surveyor agreed the activity amount.  */  
   CustApprovalDate:string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Project currency  */  
   DocActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt1ActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt2ActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt3ActAmount:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Project currency  */  
   DocApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt1ApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt2ApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt3ApprovalAmt:number,
      /**  Progress Billing Invoice Number  */  
   PBInvNum:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  A number used to identify the Customer Qty Surveyor record for the related customer.  */  
   ConNum:number,
   BitFlag:number,
   PBWrkMeasuredHeadActivityUnit:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBWrkDtlHistoryTableset{
   PBWrkDtlHistory:Erp_Tablesets_PBWrkDtlHistoryRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PBWrkMeasuredDtlRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Foreign key to the measured work header.  */  
   MeasuredWorkID:string,
      /**  System generated number from a counter held on the Measured Work Header.  */  
   DtlSeq:number,
      /**  Description  */  
   Description:string,
      /**  Date that the Quantity Surveyor was on site to establish the measurement readings.  */  
   DateonSite:string,
      /**  Quantity Surveyor is a Foreign Key field to the Shop Employee table, defaults from the Quantity Surveyor of the Measured Work Header.  */  
   QtySurveyor:string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure  */  
   ActAmount:number,
      /**  Date that the Measured Work Activity status is set to Approved.  */  
   ApprovalDate:string,
      /**  Status is applied to this Measured Work Activity. The available codes are ? S = Progress, D = Dispute, A = Approved, P = Posted.  */  
   ActStatus:string,
      /**  Activity Notes is used as comments for free format text entry.  */  
   ActNotes:string,
      /**  Issue Resolution Notes is used as comments for free format text entry.  */  
   IssueNotes:string,
      /**  Amount the customer?s quantity surveyor has agreed for this activity.  */  
   ApprovalAmt:number,
      /**  Date that the customer?s quantity surveyor agreed the activity amount.  */  
   CustApprovalDate:string,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Project currency  */  
   DocActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt1ActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt2ActAmount:number,
      /**  Amount that is considered to be completed for this activity period. It will be entered in the Measured Work Unit of Measure in the Reporting currency  */  
   Rpt3ActAmount:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Project currency  */  
   DocApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt1ApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt2ApprovalAmt:number,
      /**  Amount the customer quantity surveyor has agreed for this activity. in the Reporting currency  */  
   Rpt3ApprovalAmt:number,
      /**  Progress Billing Invoice Number  */  
   PBInvNum:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  A number used to identify the Customer Qty Surveyor record for the related customer.  */  
   ConNum:number,
   CurrencyCode:string,
      /**  Contract customer from Project  */  
   ConCustNum:number,
      /**  List of warning messages (set after update)  */  
   WarningList:string,
      /**  Used to determine whether the activity record can be updated. Is set to true if there is a related PBGInvcDtlFF where the PBGInvcHead is approved.  */  
   InvcIsApproved:boolean,
   CurrencySwitch:boolean,
      /**  Monetary Activity Amount in Base is used for separate control in UI  */  
   CurActAmount:number,
      /**  Monetary Activity Amount in Project currency is used for separate control than Percentage/Hours in UI  */  
   DocCurActAmount:number,
      /**  Monetary Activity Amount in Rpt1 is used for separate control than Percentage/Hours in UI  */  
   Rpt1CurActAmount:number,
      /**  Monetary Activity Amount in Rpt2 is used for separate control than Percentage/Hours in UI  */  
   Rpt2CurActAmount:number,
      /**  Monetary Activity Amount in Rpt3 is used for separate control than Percentage/Hours in UI  */  
   Rpt3CurActAmount:number,
      /**  Monetary Approved Amount in Base is used for separate control than Percentage/Hours in UI  */  
   CurApprovalAmt:number,
      /**  Monetary Approved Amount in Project currency is used for separate control than Percentage/Hours in UI  */  
   DocCurApprovalAmt:number,
      /**  Monetary Approved Amount in Rpt1 is used for separate control than Percentage/Hours in UI  */  
   Rpt1CurApprovalAmt:number,
      /**  Monetary Approved Amount in Rpt2 is used for separate control than Percentage/Hours in UI  */  
   Rpt2CurApprovalAmt:number,
      /**  Monetary Approved Amount in Rpt3 is used for separate control than Percentage/Hours in UI  */  
   Rpt3CurApprovalAmt:number,
   InvoiceNum:number,
   TmpInvcNum:number,
   InvoiceLine:number,
      /**  Name of the customer's quantity surveyor who has confirmed the measured work amount.  */  
   CustQtySurveyor:string,
   BitFlag:number,
   EmpBasicName:string,
   PBWrkMeasuredHeadActivityUnit:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBWrkMeasuredHeadRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  User defined ID for the measured work activity.  */  
   MeasuredWorkID:string,
      /**  Short description for the Measured Work Activity  */  
   Description:string,
      /**  Standard comment field  */  
   Details:string,
      /**  Activity Unit with the following options: P = Percentage, H = Hours, C = Cost, L = Linear, M = Monetary.  */  
   ActivityUnit:string,
      /**  Quantity Surveyor is a Foreign Key field to the Shop Employee table.  */  
   QtySurveyor:string,
      /**  Total quantity for the measured work.  */  
   TotalQty:number,
      /**  Contractual amount of the work in the Activity Unit  */  
   TotalAmt:number,
      /**  Parent Billing Schedule is a Foreign Key field to the Billing Schedules. It can be set as blank if the Measured Work does not need to be included in a Billing Schedule  */  
   ParentBillSchID:string,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit.  */  
   PricePerUnit:number,
      /**  Foreign Key field to the Schedule of Works. It can be set to blank if the Measured Work does not need to linked to a Schedule of Work.  */  
   ParentWrkSchID:string,
      /**  Cost Plus Percent is only used when the Activity Unit is defined as Cost.  */  
   CostPlusPrc:number,
      /**  Percentage of Contract  */  
   ContractPrc:number,
      /**  Counter, Last sequence set to the Measured Activity Detail  */  
   LastDtlSeq:number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Project currency  */  
   DocPricePerUnit:number,
      /**  Contractual amount of the work in the Activity Unit in the Project currency  */  
   DocTotalAmt:number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   Rpt1PricePerUnit:number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   Rpt1TotalAmt:number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   Rpt2PricePerUnit:number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   Rpt2TotalAmt:number,
      /**  Price Per Unit is the price that is to be charged to the customer defined in the Activity Unit. in the Reporting currency  */  
   Rpt3PricePerUnit:number,
      /**  Contractual amount of the work in the Activity Unit in the Reporting currency  */  
   Rpt3TotalAmt:number,
      /**  Invoiced to date in Reported 3 Currency  */  
   Rpt3TotInvoiced:number,
      /**  Invoiced to date in Reported 2 Currency  */  
   Rpt2TotInvoiced:number,
      /**  Invoiced to date in Reported 1 Currency  */  
   Rpt1TotInvoiced:number,
      /**  Invoiced to date in Base Currency  */  
   TotInvoiced:number,
      /**  Invoiced To Date in the Activity Unit  */  
   DocTotInvoiced:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
   CurrencySwitch:boolean,
   DocCurInvoiced:number,
      /**  Invoiced in Base currency  */  
   CurInvoiced:number,
      /**  Invoiced in Repostable currency 1  */  
   Rpt1CurInvoiced:number,
      /**  Rpt2 Invoiced  */  
   Rpt2CurInvoiced:number,
      /**  Rpt2 Invoiced amount  */  
   Rpt3CurInvoiced:number,
   ExistDtlInvoiced:boolean,
   ActivityUnitIsMoney:boolean,
   BitFlag:number,
   ParentBillingScheduleDescription:string,
   ParentScheduleWorkDescription:string,
   QtySurveyorFirstName:string,
   QtySurveyorLastName:string,
   QtySurveyorName:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBdnSetsRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Project ID.  */  
   ProjectID:string,
      /**  Burden Set ID.  */  
   BdnSetID:string,
      /**  When a provisional percent is changed in Burden Set Maint for this burden set this flag will be set to true to indicate that the rate has changed. This is then used during the invoice preparation process to calculate the burden true up going back to the beginning of the fiscal year. This will ONLY takes place during the invoice preparation when the new rates come into effect. When that invoice is approved then this flag will be set back to false.  */  
   HasChanges:boolean,
      /**  When new row is added it?s defaulted by last sequence plus 10. Can be changed.  */  
   Seq:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  This field is used to determine if Burden Sets can be added to Project Activity Billing or to Progress Payment Invoice panels  */  
   ConInvMeth:string,
   BitFlag:number,
   BdnSetDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBillHistoryRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  Foreign Key field to the Billing Schedule.  */  
   BillSchedID:string,
      /**  Foreign key to the InvcHead.  */  
   InvoiceNum:number,
      /**  Foreign key to the InvcDtl  */  
   InvoiceLine:number,
      /**  The Invoice value from the invoice to this line item. (Extended Price of the invoice line)  */  
   InvcLineAmt:number,
      /**  The value of the Retention for this line.  */  
   RetentionAmt:number,
      /**  The Invoice value from the invoice to this line item. (Extended Price of the invoice line)  in the Project currency  */  
   DocInvcLineAmt:number,
      /**  The Invoice value from the invoice to this line item. (Extended Price of the invoice line)  in the Reporting currency  */  
   Rpt1InvcLineAmt:number,
      /**  The Invoice value from the invoice to this line item. (Extended Price of the invoice line)  in the Reporting currency  */  
   Rpt2InvcLineAmt:number,
      /**  The Invoice value from the invoice to this line item. (Extended Price of the invoice line)  in the Reporting currency  */  
   Rpt3InvcLineAmt:number,
      /**  The value of the Retention for this line. in the Project currency  */  
   DocRetentionAmt:number,
      /**  The value of the Retention for this line. in the Reporting currency  */  
   Rpt1RetentionAmt:number,
      /**  The value of the Retention for this line. in the Reporting currency  */  
   Rpt2RetentionAmt:number,
      /**  The value of the Retention for this line. in the Reporting currency  */  
   Rpt3RetentionAmt:number,
      /**  reference to PBWrkMeasuredDtl.MeasuredWorkID  */  
   MeasuredWorkID:string,
      /**  Activity ID  */  
   DtlSeq:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
   BitFlag:number,
   PBillSchDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PBillHistoryTableset{
   PBillHistory:Erp_Tablesets_PBillHistoryRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PBillSchRow{
      /**  Company Identifier  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  User defined ID to be used for this Billing Schedule.  */  
   BillSchedID:string,
      /**  It indicates whether the Billing Schedule is inactive. If true it will be excluded from the invoice generation process.  */  
   InActive:boolean,
      /**  Billing Schedule description  */  
   Description:string,
      /**  Billing Schedule frequency.Code/Desc:W = Weekly, M = Monthly, Q = Quarterly, A = Annually  */  
   SchedFreq:string,
      /**  Number of periods in months for defect liability. For reference only.  */  
   LiabilityMonths:number,
      /**  This is the date that the user wants to the first invoice to be generated. This will be controlled by the field ?Invoiced to Date? is greater than zero.  */  
   StartDate:string,
      /**  System generated field. When the record is first created this will default to the Start Date field value. When the Project Entry ? Invoice Generation Process has been run in ?Update? mode the system will set this field dependant on the Schedule Frequency defined.  */  
   NextDate:string,
      /**  Total contractual value for this  Billing Schedule  */  
   TotValue:number,
      /**  Percentage of the invoice that is to be retained  */  
   RetentionPcnt:number,
      /**  When it's set to true the invoice process will reduce the invoice amount by the retention value.  */  
   ReduceInvByRet:boolean,
      /**  Shows the number of invoices that have been produced. (System generated).  */  
   NumInvoices:number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated).  */  
   TotInvoiced:number,
      /**  Total Retention  */  
   TotRetention:number,
      /**  Sales order number  */  
   OrderNum:number,
      /**  Sales order number  */  
   OrderLine:number,
      /**  Product Group that will be used for the invoice posting and the posting or retentions and also the deferred revenue.  */  
   ProdCode:string,
      /**  Setting this to true will cause a General Journal to be produced as part of the Billing Schedule process to post the Retentions to the Product Group Retentions account.  */  
   PostRetProdGrp:boolean,
      /**  Billing Schedule manager  */  
   Manager:string,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Project currency  */  
   DocTotInvoiced:number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   Rpt1TotInvoiced:number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   Rpt2TotInvoiced:number,
      /**  Shows the total value of all posted invoices made against this Billing Schedule (system generated). in the Reporting currency  */  
   Rpt3TotInvoiced:number,
      /**  in the Project currency  */  
   DocTotRetention:number,
      /**  in the Reporting currency  */  
   Rpt1TotRetention:number,
      /**  in the Reporting currency  */  
   Rpt2TotRetention:number,
      /**  in the Reporting currency  */  
   Rpt3TotRetention:number,
      /**  Total contractual value for this  Billing Schedule in the Project currency  */  
   DocTotValue:number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   Rpt1TotValue:number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   Rpt2TotValue:number,
      /**  Total contractual value for this  Billing Schedule in the Reporting currency  */  
   Rpt3TotValue:number,
      /**  Indicates the billling schedule has been closed and no further activity can take place.  */  
   Closed:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   CurrencyCode:string,
      /**  Project Phase (Patch Field)  */  
   PhaseID:string,
   BitFlag:number,
   ManagerName:string,
   ProjectIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PConVarRow{
      /**  Company  */  
   Company:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  User defined variance reference ID  */  
   VarRefID:string,
      /**  Short description of the variant  */  
   Description:string,
      /**  The date that the variant was generated  */  
   DateEntered:string,
      /**  The name of the person entering the variant  */  
   EnteredBy:string,
      /**  Free format to describe the variant.  */  
   Details:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_PPhaseOperRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Project Phase is a foregn key to the ProjPhase table  */  
   PhaseID:string,
      /**  Operation code, reference to the OpMaster table  */  
   OpCode:string,
      /**  Sequence  */  
   Seq:number,
      /**  Hours that are required to perform the operation  */  
   EstHours:number,
      /**  Project Role Code, reference to the PrjRoleCd table  */  
   RoleCd:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Indicates if the EstHours field should be enabled.  */  
   EnableEstHours:boolean,
      /**  Indicates whether the OpCode field should be enabled  */  
   EnableOpCode:boolean,
   BitFlag:number,
   OpCodeOpDesc:string,
   PhaseIDDescription:string,
   RoleCdRoleDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ParentPhasesListRow{
   Description:string,
   PhaseID:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ParentPhasesListTableset{
   ParentPhasesList:Erp_Tablesets_ParentPhasesListRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_PartTranRecRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  System date at time that record was created.  */  
   SysDate:string,
      /**  System Time (hr-min-sec) when transaction was created.  */  
   SysTime:number,
      /**  A number which is used to allow create a unique key for the file.  */  
   TranNum:number,
      /**  Part Number that this transaction is for.  */  
   PartNum:string,
      /**   Transaction Class...A-adjustment, D-DMR, I-issue, R-receipt, S-Shipment X-Job Adjustment. A character field which classifies PartTran records.  This is a higher level of classification of the TransType field. Their relationships are;
 R = DMR-STK, INS-MTL, INS-STK, INS-SUB, MFG-PLT, MFG-STK, MFG-WIP, PLT-STK, PUR-INS, PUR-MTL, PUR-STK, PUR-SUB, PUR-UKN, RMA-INS, STK-DMR, SVG-STK
I = ASM-INS, INS-ASM, INS-REJ, MTL-INS, PLT-ASM, PLT-MTL, STK-ASM, STK-INS, STK-MTL, STK-SRV, STK-UKN, SUB-DMR, SUB-INS,WIP-MFG
A = ADJ-CST, ADJ-PUR, ADJ-QTY, MFG-VAR, STK-PLT, STK-STK
S = MFG-CUS, MFG-VEN, STK-CUS
D = DMR-MTL, DMR-REJ, DMR-SUB, INS-DMR, MTL-DMR
X = ADJ-MTL, ADJ-SUB
Intended to  be used for record selection purposes.  */  
   TranClass:string,
      /**   Field that indicates the type of transaction:
ADJ-CST -  Adjustment to Stock Cost.
ADJ-DEM - Adjustment to Demand Quantity.
ADJ-MTL - Adjustment to Job Cost Material.
ADJ-PUR - Purchase Price variance (created by A/P invoice)
ADJ-QTY - Adjustment to  */  
   TranType:string,
      /**  date of transaction.  */  
   TranDate:string,
      /**   Transaction Quantity.
Always represented in the Parts Primary Inventory Unit of Measure which will be stored in Parttran.UM This is the UOM that the unit costs are based on. 
The actual Transaction quatity is found in ActTranQty  */  
   TranQty:number,
      /**  Unit of Measure.  (part primary inventory uom)  */  
   UM:string,
      /**  Material Unit Cost  */  
   MtlUnitCost:number,
      /**  Labor Unit Cost  */  
   LbrUnitCost:number,
      /**  Burden Unit Cost  */  
   BurUnitCost:number,
      /**  Subcontract Unit Cost  */  
   SubUnitCost:number,
      /**  Material Burden Unit Cost  */  
   MtlBurUnitCost:number,
      /**   Extended Cost is calculated as
(TranQty * (MtlUnitCost + LbrUnitCost + BurUnitCost) ). This is updated via the PartTran write trigger. 
NOTE: An exception is where PartTran.TranType = "Adj-Pur" in which case the TranQty and UnitCost fields are zero and the ExtCost is calculated outside of the write trigger.  */  
   ExtCost:number,
      /**  Job Number that transaction is associated with.  */  
   JobNum:string,
      /**  Indicates the type of Packing Slip... "C" = Customer (related to ShipDtl), "M" = Miscellaneous(MscShpDt),  "S" = Subcontractor (SubShipd) "TO" = (Transfer Order). This field, used along with PackNum/PackLine can be used to find the related shipping document record.  */  
   PackType:string,
      /**   The sales order number that this detail shipment line is linked to.
This is not directly maintainable; It is carried forward through from the ShipHead.OrderNum field.  */  
   OrderNum:number,
      /**  The sales order line that this transaction is associated with.  */  
   OrderLine:number,
      /**  Can be used to hold a short comment.  In some cases the Manufacturing System uses this field to make a comment about the source of the transaction, as in the case of "backflush" process.  */  
   TranReference:string,
      /**  Describes the Part associated with this transaction. This is not directly entered by the user. Instead the entry programs pull it in from a parent record. The parent record could be the Part, JobOper, PODetl, JobMtl...  */  
   PartDescription:string,
      /**  Part Revision number. Not directly entered. Instead it is duplicated at the time of transaction creation from an associated Parent record. The Parent file could be the Part, JobOPer, JobMtl, ShipDtl,  SubShipD ....  */  
   RevisionNum:string,
      /**  Indicates if transaction was posted to G/L.  Transactions are posted in summary form via the Job Management Capture COS/WIP process .  */  
   PostedToGL:boolean,
      /**  Site Identifier.  */  
   Plant:string,
      /**   PartTran.VarTarget, with following values:
'JOB' ? Use Job Expense Account
'STK' ? Use Inventory Account
'VAR' ? Use Purchase Variance Account
'INS' ? Use Inspection Account
'UKN' ? Expense Account (Miscellaneous receipt)
'MTL' ? Use WIP Material Account
'SUB' ? Use WIP Subcontract account
'DMR' ? Use DMR account
'REJ' ? Use DMR Write off Account
'ACA' ? Use Actual Cost Account  */  
   VarTarget:string,
      /**  Used By Project Analysis Process  */  
   AsOfSeq:number,
      /**  ODC Unit Cost  */  
   ODCUnitCost:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  WBS Phase ID  */  
   PhaseID:string,
      /**  Project ID  */  
   ProjectID:string,
   IsProjectLevelRevenRecog:boolean,
   CurrencyCode:string,
   DocBurUnitCost:number,
   DocLbrUnitCost:number,
   DocMtlBurUnitCost:number,
   DocMtlUnitCost:number,
   DocODCUnitCost:number,
   DocSubUnitCost:number,
   Rpt1BurUnitCost:number,
   Rpt1LbrUnitCost:number,
   Rpt1MtlBurUnitCost:number,
   Rpt1MtlUnitCost:number,
   Rpt1ODCUnitCost:number,
   Rpt1SubUnitCost:number,
   Rpt2BurUnitCost:number,
   Rpt2LbrUnitCost:number,
   Rpt2MtlBurUnitCost:number,
   Rpt2MtlUnitCost:number,
   Rpt2ODCUnitCost:number,
   Rpt2SubUnitCost:number,
   Rpt3BurUnitCost:number,
   Rpt3LbrUnitCost:number,
   Rpt3MtlBurUnitCost:number,
   Rpt3MtlUnitCost:number,
   Rpt3ODCUnitCost:number,
   Rpt3SubUnitCost:number,
   DocExtCost:number,
   Rpt1ExtCost:number,
   Rpt2ExtCost:number,
   Rpt3ExtCost:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjPhaseAttchRow{
   Company:string,
   ProjectID:string,
   PhaseID:string,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjPhaseGLCRow{
      /**  Company Identifier.  */  
   Company:string,
      /**   Identifies the master file to which the GL Control is related to.  This field is used to properly isolate controls to the masters they are related to.
For example; Customer, PartClass identifies controls that are related to Customers and Part Classes  */  
   RelatedToFile:string,
      /**  Major component of the foreign key of the related master record. For example: For a "Part"  control this field would contain the related Part Number,  for a "Customer"  it contains the Customer.CustNum.  */  
   Key1:string,
      /**   2nd component of the foreign key to the related master record.
The usage of this field is dependent on the type of record.  */  
   Key2:string,
      /**   3rd component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key3:string,
      /**   4th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key4:string,
      /**   5th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key5:string,
      /**   6th component of the foreign key to the related master record.
The usage of this field is dependent record type.  */  
   Key6:string,
      /**  Identifier of the GL Control Type.  */  
   GLControlType:string,
      /**  GL Control Identifier.  */  
   GLControlCode:string,
      /**  Identifies the entity.  Reference only.  Used for integrity validation when deleting a GLCTEntity record.  */  
   BusinessEntity:string,
      /**  Global Company identifier.  Used in Multi-Company Journal.  */  
   ExtCompanyID:string,
      /**  Flag to indicate the account in this record is for an external company.  */  
   IsExternalCompany:boolean,
      /**  Marks this EntityGLC as global, available to be sent out to other companies.  */  
   GlobalEntityGLC:boolean,
      /**  Disables this record from receiving global updates.  */  
   GlobalLock:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Project ID  */  
   ProjectID:string,
      /**  WBS Phase ID  */  
   PhaseID:string,
   BitFlag:number,
   GLCntrlDescription:string,
   GLCntrlTypeDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjPhaseRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Description  */  
   Description:string,
      /**  Task start date.  */  
   StartDate:string,
      /**  Task due date.  */  
   DueDate:string,
      /**  Must be greater than or equal to 0.  */  
   PercentComplete:number,
      /**  Date this task was complete.  */  
   DateComplete:string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   PhaseStatus:string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   Duration:number,
      /**  Reference to the job number created for the WBS Phase.  */  
   WBSJobNum:string,
      /**  This is the parent phase for this WBS Phase. On the UK software this currently uses field ShortChar01  */  
   ParentPhase:string,
      /**  The task ID that is returned from Microsoft Project.  */  
   MSPTaskID:string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   MSPPredecessor:string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Total budget labour hours for the Project phase  */  
   BudTotLbrHours:number,
      /**  Total budget burden hours for the Project phase.  */  
   BudTotBurHrs:number,
      /**  Total budget labour cost for the Project phase. This is production and setup combined.  */  
   BudTotLbrCost:number,
      /**  Total budget burden cost for the Project phase. This is production and setup combined.  */  
   BudTotBurCost:number,
      /**  Total budget subcontract costs for the Project phase  */  
   BudTotSubCost:number,
      /**  Total budget material costs for the Project phase  */  
   BudTotMtlCost:number,
      /**  Total budget material burden costs for the Project phase.  */  
   BudTotMtlBurCost:number,
      /**  Total estimated labour hours for the Project phase  */  
   TotEstLbrHrs:number,
      /**  Total estimated burden hours for the Project phase  */  
   TotEstBurdenHrs:number,
      /**  Total estimated labour cost for the Project phase. This is production and setup combined.  */  
   TotEstLbrCost:number,
      /**  Total estimated subcontract costs for the Project phase  */  
   TotEstSubContCost:number,
      /**  Total estimated material costs for the Project phase  */  
   TotEstMtlCost:number,
      /**  Total actual labour hours for the Project phase  */  
   TotActLbrHrs:number,
      /**  Total actual burden hours for the Project phase  */  
   TotActBurHrs:number,
      /**  Total actual labour cost for the Project phase. This is production and setup combined.  */  
   TotActLbrCost:number,
      /**  Total actual burden cost for the Project phase. This is production and setup combined.  */  
   TotActBurCost:number,
      /**  Total actual subcontract costs for the Project phase.  */  
   TotActSubContCost:number,
      /**  Total actual material costs for the Project phase  */  
   TotActMtlCost:number,
      /**  Total actual material burden costs for the Project phase.  */  
   TotActMtlBurCost:number,
      /**  Manually entered estimate to complete for the labour hours for the project phase  */  
   ManEstCtcLbrHrs:number,
      /**  Manually entered estimate to complete for the burden hours.  */  
   ManEstCtcBurHrs:number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project phase.  */  
   ManEstCtcLbrCost:number,
      /**  Manually entered estimate to complete for the burden cost for the project phase.  */  
   ManEstCtcBurCost:number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project phase.  */  
   ManEstCtcSubConCost:number,
      /**  Manually entered estimate to complete for the material cost for the project phase.  */  
   ManEstCtcMtlCost:number,
      /**  Manually entered estimate to complete for the material burden cost for the project phase.  */  
   ManEstCtcMtlBurCost:number,
      /**  Total calculated cost to complete labour hours for the Project phase.  */  
   TotCtcLbrHours:number,
      /**  Total calculated cost to complete burden hours for the Project phase.  */  
   TotCtcBurHours:number,
      /**  Total calculated cost to complete labour cost for the Project phase. This will be both production and setup.  */  
   TotCtcLbrCost:number,
      /**  Total calculated cost to complete burden cost for the Project phase. This will be both production and setup.  */  
   TotCtcBurCost:number,
      /**  Total calculated cost to complete subcontract cost for the Project phase.  */  
   TotCtcSubConCost:number,
      /**  Total calculated cost to complete material cost for the Project phase.  */  
   TotCtcMtlCost:number,
      /**  Total calculated cost to complete material burden cost for the Project phase.  */  
   TotCtcMtlBurCost:number,
      /**  Total quoted labour hours for the Project phase  */  
   TotQuotLbrHrs:number,
      /**  Total quoted burden hours for the Project phase.  */  
   TotQuotBurHrs:number,
      /**  Total quoted labour cost for the Project phase. This will be both production and setup.  */  
   TotQuotLbrCost:number,
      /**  Total quoted burden cost for the Project phase. This will be both production and setup.  */  
   TotQuotBurCost:number,
      /**  Total quoted subcontract cost for the Project phase.  */  
   TotQuotSubContCost:number,
      /**  Total quoted material cost for the Project phase.  */  
   TotQuotMtlCost:number,
      /**  Total quoted material burden cost for the Project phase.  */  
   TotQuotMtlBurCost:number,
      /**  This holds the bom level of the phase reletive to the parent.  */  
   Level:number,
      /**  This is will either be Hours or Days  */  
   DurationType:string,
      /**  Total estimated burden cost for the Project phase. This is production and setup combined.  */  
   TotEstBurCost:number,
      /**  Total estimated material burden costs for the Project phase  */  
   TotEstMtlBurCost:number,
      /**  'Roll Child Manual Cost to Complete to this Level  */  
   RollChildMan:boolean,
      /**  Roll Child Budgets to this Level  */  
   RollChildBud:boolean,
      /**  Sort Sequence of the project phase.  This field controls where on the project tree the phase needs to be displayed.  */  
   SortSeq:number,
      /**  Reference to the Measured Work header.  It is used to collect the cost to determine if the Measured Work was profitable or not.  */  
   MeasuredWorkID:string,
      /**  Total quoted other direct cost for the Project phase.  */  
   TotQuotODCCost:number,
      /**  Total estimated other direct costs for the Project phase  */  
   TotEstODCCost:number,
      /**  Total actual other direct costs for the Project phase.  */  
   TotActODCCost:number,
      /**  Other direct cost manual CTC  */  
   ManEstCTCODCCost:number,
      /**  Total calculated cost to complete other direct cost for the Project phase.  */  
   TotCTCODCCost:number,
      /**  Other direct cost Budget Total  */  
   BudTotODCCost:number,
      /**  Defines the Approvals Method for Time related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   TimeApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Time transactions related to this WBS Phase.  */  
   TimeWFGroupID:string,
      /**  Defines the Approvals Method for Expenses related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   ExpenseApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Expense transactions related to this WBS Phase.  */  
   ExpenseWFGroupID:string,
      /**  PartNum  */  
   PartNum:string,
      /**  RevisionNum  */  
   RevisionNum:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Invoicing Method  */  
   InvMethod:string,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery.  */  
   RevMethod:string,
      /**  Sales Order Number  */  
   OrderNum:number,
      /**  Sales Order Line  */  
   OrderLine:number,
      /**  If any activity of the job assigned to the Phase has been recognized or invoiced  */  
   WasRecInvoiced:boolean,
      /**  Date of last Build WBS Phase Analysis run.  */  
   LastBuildWBSPhaseAnalysisDate:string,
      /**  Percentage of Completion  */  
   PercentageOfCompletion:number,
      /**  Labor Cost To Be Recognized  */  
   ToBeRecognizedLbrCost:number,
      /**  Burden Cost To Be Recognized  */  
   ToBeRecognizedBurCost:number,
      /**  Material Cost To Be Recognized  */  
   ToBeRecognizedMtlCost:number,
      /**  Subcontract Cost To Be Recognized  */  
   ToBeRecognizedSubCost:number,
      /**  Material Burden Cost To Be Recognized  */  
   ToBeRecognizedMtlBurCost:number,
      /**  ODC Cost To Be Recognized  */  
   ToBeRecognizedODCCost:number,
      /**  Revenue To Be Recognized  */  
   ToBeRecognizedRevenue:number,
      /**  When true,  Recognize Revenue separately at Child WBS Phases.  When false, Recognize Revenue for this phase and all child phases at this level.  */  
   RecognizeRevenueAtChildPhaseLevel:boolean,
      /**  To control if the project phase budget values are to be rolled up to the project phase.  */  
   RollBudgetsToWBSPhase:boolean,
      /**  TotWBSPhaseRev  */  
   TotWBSPhaseRev:number,
      /**  The sales category code used in the Revenue recognition process.  */  
   SalesCatID:string,
      /**  ActMtlNonJobCost  */  
   ActMtlNonJobCost:number,
      /**  AsOfDate  */  
   AsOfDate:string,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   BdnRecSeqPosted:number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   BdnRecSeqLastAdded:number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   BdnRevenueAutoToday:number,
      /**  BillingToDate  */  
   BillingToDate:number,
      /**  BuildAnalysis  */  
   BuildAnalysis:boolean,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   BurdenCostOfSales:number,
      /**  BurdenLbrCstToDate  */  
   BurdenLbrCstToDate:number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   BurdenRecAutoCstTodate:number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   BurdenRecManCstTodate:number,
      /**  BurManPosted  */  
   BurManPosted:number,
      /**  BurPur  */  
   BurPur:number,
      /**  Estimated burden cost.  */  
   EstBurdenCost:number,
      /**  Estimated burden hours.  */  
   EstBurdenHours:number,
      /**  Estimated labor cost.  */  
   EstLaborCost:number,
      /**  Estimated labor hours.  */  
   EstLaborHours:number,
      /**  Estimated material burden cost.  */  
   EstMtlBurdenCost:number,
      /**  Estimated material cost.  */  
   EstMtlCost:number,
      /**  Estimated other direct cost.  */  
   EstODCCost:number,
      /**  Estimated subcontract cost.  */  
   EstSubcontractCost:number,
      /**  The labour costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   LaborCostOfSales:number,
      /**  LaborLbrCstToDate  */  
   LaborLbrCstToDate:number,
      /**  The labour costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   LaborRecAutoCstTodate:number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   LaborRecManCstTodate:number,
      /**  LbrManPosted  */  
   LbrManPosted:number,
      /**  LbrPur  */  
   LbrPur:number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   MaterialCostOfSales:number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   MaterialRecAutoCstTodate:number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MaterialRecManCstTodate:number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   MtlBurdenCostOfSales:number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   MtlBurdenRecAutoCstTodate:number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MtlBurdenRecManCstTodate:number,
      /**  MtlBurManPosted  */  
   MtlBurManPosted:number,
      /**  MtlBurPur  */  
   MtlBurPur:number,
      /**  MtlManPosted  */  
   MtlManPosted:number,
      /**  MtlPur  */  
   MtlPur:number,
      /**  NextTmpInvcNum  */  
   NextTmpInvcNum:number,
      /**  ODCManPosted  */  
   ODCManPosted:number,
      /**  ODCPur  */  
   ODCPur:number,
      /**  Other Direct cost Recognition to Date  */  
   ODCRecAutoCstToDate:number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   ODCRecManCstTodate:number,
      /**  RecManPosted  */  
   RecManPosted:number,
      /**  RecogToDtBilling  */  
   RecogToDtBilling:number,
      /**  RecogToDtLbk  */  
   RecogToDtLbk:number,
      /**  RecogToDtManual  */  
   RecogToDtManual:number,
      /**  RetentionDt  */  
   RetentionDt:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   RevenueRecAutoToDate:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   RevenueRecManToDate:number,
      /**  Reverse  */  
   Reverse:string,
      /**  RollManEstToCpte  */  
   RollManEstToCpte:boolean,
      /**  SubCManPosted  */  
   SubCManPosted:number,
      /**  SubConCostOfSales  */  
   SubConCostOfSales:number,
      /**  SubConRecAutoCstTodate  */  
   SubConRecAutoCstTodate:number,
      /**  SubConRecManCstTodate  */  
   SubConRecManCstTodate:number,
      /**  SubPur  */  
   SubPur:number,
      /**  Total contract value for the WBS Phase.  */  
   ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Document currency.  */  
   DocConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt1ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt2ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt3ConTotValue:number,
      /**  Net total contract value for the WBS Phase.  */  
   ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Document currency.  */  
   DocConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt1ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt2ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt3ConTotValueNet:number,
   CloseWBSJob:boolean,
   CurrencyCode:string,
   DocBudTotBurCost:number,
   DocBudTotLbrCost:number,
   DocBudTotMtlBurCost:number,
   DocBudTotMtlCost:number,
   DocBudTotODCCost:number,
   DocGTActualCost:number,
   DocGTBudgetCost:number,
   DocGTCalculatedCost:number,
   DocGTEstimatedCost:number,
   DocGTManualCost:number,
   DocGTQuotedCost:number,
   DocManEstCtcBurCost:number,
   DocManEstCtcLbrCost:number,
   DocManEstCtcMtlBurCost:number,
   DocManEstCtcMtlCost:number,
   DocManEstCTCODCCost:number,
   DocManEstCtcSubConCost:number,
   DocProjectedTotalBurCost:number,
   DocProjectedTotalCost:number,
   DocProjectedTotalLbrCost:number,
   DocProjectedTotalMtlBurCost:number,
   DocProjectedTotalMtlCost:number,
   DocProjectedTotalODCCost:number,
   DocProjectedTotalSubContCost:number,
   DocTotActSubContCost:number,
   DocTotCtcBurCost:number,
   DocTotCtcLbrCost:number,
   DocTotCtcMtlBurCost:number,
   DocTotCtcMtlCost:number,
   DocTotCTCODCCost:number,
   DocTotCtcSubConCost:number,
   DocTotEstBurCost:number,
   DocTotEstLbrCost:number,
   DocTotEstMtlBurCost:number,
   DocTotEstMtlCost:number,
   DocTotEstODCCost:number,
   DocTotEstSubContCost:number,
   DocTotQuotBurCost:number,
   DocTotQuotLbrCost:number,
   DocTotQuotMtlBurCost:number,
   DocTotQuotMtlCost:number,
   DocTotQuotODCCost:number,
   DocTotQuotSubContCost:number,
   EnableApprovals:boolean,
      /**  This flag indicates whether ProjPhase.RecognizeRevenueAtChildPhaseLevel should be enabled in the UI.  */  
   EnableRecognizeRevenueAtChildPhaseLevel:boolean,
      /**  Flag to indicate whether the PPhaseOper for this ProjPhase should allow updates based on the status of the WBSJobNum.  */  
   EnableUpdOper:boolean,
   EngineerWBSJob:boolean,
   ExpenseDefTaskSetID:string,
   ExpenseTaskSetDescription:string,
   ExpenseWFGroupIDDescription:string,
   GTActualCost:number,
   GTBudgetCost:number,
   GTCalculatedCost:number,
   GTEstimatedCost:number,
   GTManualCost:number,
   GTQuotedCost:number,
   IsRootPhase:boolean,
      /**  used to display Due date of the WBS phase job when scheduled  */  
   JobDueDate:string,
      /**  used to display Start date of the WBS phase job when scheduled  */  
   JobStartDate:string,
   ParentPhaseIsRootPhase:boolean,
   PhaseDesc:string,
   PInvMethod:string,
   PRevMethod:string,
   ProjectedTotalBurCost:number,
   ProjectedTotalCost:number,
   ProjectedTotalLbrCost:number,
   ProjectedTotalMtlBurCost:number,
   ProjectedTotalMtlCost:number,
   ProjectedTotalODCCost:number,
   ProjectedTotalSubContCost:number,
      /**  External Field To create a WBS Phase Combo  */  
   ProjPhaseID:string,
   ReleaseWBSJob:boolean,
   Rpt1BudTotBurCost:number,
   Rpt1BudTotLbrCost:number,
   Rpt1BudTotMtlBurCost:number,
   Rpt1BudTotMtlCost:number,
   Rpt1BudTotODCCost:number,
   Rpt1BudTotSubCost:number,
   Rpt1GTActualCost:number,
   Rpt1GTBudgetCost:number,
   Rpt1GTCalculatedCost:number,
   Rpt1GTEstimatedCost:number,
   Rpt1GTManualCost:number,
   Rpt1GTQuotedCost:number,
   Rpt1ManEstCtcBurCost:number,
   Rpt1ManEstCtcLbrCost:number,
   Rpt1ManEstCtcMtlBurCost:number,
   Rpt1ManEstCtcMtlCost:number,
   Rpt1ManEstCTCODCCost:number,
   Rpt1ManEstCtcSubConCost:number,
   Rpt1ProjectedTotalBurCost:number,
   Rpt1ProjectedTotalCost:number,
   Rpt1ProjectedTotalLbrCost:number,
   Rpt1ProjectedTotalMtlBurCost:number,
   Rpt1ProjectedTotalMtlCost:number,
   Rpt1ProjectedTotalODCCost:number,
   Rpt1ProjectedTotalSubContCost:number,
   Rpt1TotActBurCost:number,
   Rpt1TotActLbrCost:number,
   Rpt1TotActMtlBurCost:number,
   Rpt1TotActMtlCost:number,
   Rpt1TotActODCCost:number,
   Rpt1TotActSubContCost:number,
   Rpt1TotCtcBurCost:number,
   Rpt1TotCtcLbrCost:number,
   Rpt1TotCtcMtlBurCost:number,
   Rpt1TotCtcMtlCost:number,
   Rpt1TotCTCODCCost:number,
   Rpt1TotCtcSubConCost:number,
   Rpt1TotEstBurCost:number,
   Rpt1TotEstLbrCost:number,
   Rpt1TotEstMtlBurCost:number,
   Rpt1TotEstMtlCost:number,
   Rpt1TotEstODCCost:number,
   Rpt1TotEstSubContCost:number,
   Rpt1TotQuotBurCost:number,
   Rpt1TotQuotLbrCost:number,
   Rpt1TotQuotMtlBurCost:number,
   Rpt1TotQuotMtlCost:number,
   Rpt1TotQuotODCCost:number,
   Rpt1TotQuotSubContCost:number,
   Rpt2BudTotBurCost:number,
   Rpt2BudTotLbrCost:number,
   Rpt2BudTotMtlBurCost:number,
   Rpt2BudTotMtlCost:number,
   Rpt2BudTotODCCost:number,
   Rpt2BudTotSubCost:number,
   Rpt2GTActualCost:number,
   Rpt2GTBudgetCost:number,
   Rpt2GTCalculatedCost:number,
   Rpt2GTEstimatedCost:number,
   Rpt2GTManualCost:number,
   Rpt2GTQuotedCost:number,
   Rpt2ManEstCtcBurCost:number,
   Rpt2ManEstCtcLbrCost:number,
   Rpt2ManEstCtcMtlBurCost:number,
   Rpt2ManEstCtcMtlCost:number,
   Rpt2ManEstCTCODCCost:number,
   Rpt2ManEstCtcSubConCost:number,
   Rpt2ProjectedTotalBurCost:number,
   Rpt2ProjectedTotalCost:number,
   Rpt2ProjectedTotalLbrCost:number,
   Rpt2ProjectedTotalMtlBurCost:number,
   Rpt2ProjectedTotalMtlCost:number,
   Rpt2ProjectedTotalODCCost:number,
   Rpt2ProjectedTotalSubContCost:number,
   Rpt2TotActBurCost:number,
   Rpt2TotActLbrCost:number,
   Rpt2TotActMtlBurCost:number,
   Rpt2TotActMtlCost:number,
   Rpt2TotActODCCost:number,
   Rpt2TotActSubContCost:number,
   Rpt2TotCtcBurCost:number,
   Rpt2TotCtcLbrCost:number,
   Rpt2TotCtcMtlBurCost:number,
   Rpt2TotCtcMtlCost:number,
   Rpt2TotCTCODCCost:number,
   Rpt2TotCtcSubConCost:number,
   Rpt2TotEstBurCost:number,
   Rpt2TotEstLbrCost:number,
   Rpt2TotEstMtlBurCost:number,
   Rpt2TotEstMtlCost:number,
   Rpt2TotEstODCCost:number,
   Rpt2TotEstSubContCost:number,
   Rpt2TotQuotBurCost:number,
   Rpt2TotQuotLbrCost:number,
   Rpt2TotQuotMtlBurCost:number,
   Rpt2TotQuotMtlCost:number,
   Rpt2TotQuotODCCost:number,
   Rpt2TotQuotSubContCost:number,
   Rpt3BudTotBurCost:number,
   Rpt3BudTotLbrCost:number,
   Rpt3BudTotMtlBurCost:number,
   Rpt3BudTotMtlCost:number,
   Rpt3BudTotODCCost:number,
   Rpt3BudTotSubCost:number,
   Rpt3GTActualCost:number,
   Rpt3GTBudgetCost:number,
   Rpt3GTCalculatedCost:number,
   Rpt3GTEstimatedCost:number,
   Rpt3GTManualCost:number,
   Rpt3GTQuotedCost:number,
   Rpt3ManEstCtcBurCost:number,
   Rpt3ManEstCtcLbrCost:number,
   Rpt3ManEstCtcMtlBurCost:number,
   Rpt3ManEstCtcMtlCost:number,
   Rpt3ManEstCTCODCCost:number,
   Rpt3ManEstCtcSubConCost:number,
   Rpt3ProjectedTotalBurCost:number,
   Rpt3ProjectedTotalCost:number,
   Rpt3ProjectedTotalLbrCost:number,
   Rpt3ProjectedTotalMtlBurCost:number,
   Rpt3ProjectedTotalMtlCost:number,
   Rpt3ProjectedTotalODCCost:number,
   Rpt3ProjectedTotalSubContCost:number,
   Rpt3TotActBurCost:number,
   Rpt3TotActLbrCost:number,
   Rpt3TotActMtlBurCost:number,
   Rpt3TotActMtlCost:number,
   Rpt3TotActODCCost:number,
   Rpt3TotActSubContCost:number,
   Rpt3TotCtcBurCost:number,
   Rpt3TotCtcLbrCost:number,
   Rpt3TotCtcMtlBurCost:number,
   Rpt3TotCtcMtlCost:number,
   Rpt3TotCTCODCCost:number,
   Rpt3TotCtcSubConCost:number,
   Rpt3TotEstBurCost:number,
   Rpt3TotEstLbrCost:number,
   Rpt3TotEstMtlBurCost:number,
   Rpt3TotEstMtlCost:number,
   Rpt3TotEstODCCost:number,
   Rpt3TotEstSubContCost:number,
   Rpt3TotQuotBurCost:number,
   Rpt3TotQuotLbrCost:number,
   Rpt3TotQuotMtlBurCost:number,
   Rpt3TotQuotMtlCost:number,
   Rpt3TotQuotODCCost:number,
   Rpt3TotQuotSubContCost:number,
   StatusDesc:string,
   TimeDefTaskSetID:string,
   TimeTaskSetDescription:string,
   TimeWFGroupIDDescription:string,
   WorkResDesc:string,
   DocBudTotSubCost:number,
   DocTotActBurCost:number,
   DocTotActLbrCost:number,
   DocTotActMtlBurCost:number,
   DocTotActMtlCost:number,
   DocTotActODCCost:number,
   ExpenseApprovalTasksTree:string,
   TimeApprovalTasksTree:string,
   BitFlag:number,
   ParentPhaseDescription:string,
   ProjectIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
   UD_SysRevID:string,
   ProjectType_c:string,
   ShipToNum_c:string,
   ShipToSameAsProj_c:boolean,
   Price_c:number,
   Discount_c:number,
   ResaleRevenue_c:number,
   FreightRevenueAmt_c:number,
   SalesTaxRevenue_c:number,
   Approved_c:boolean,
   ApprovedBy_c:string,
   ApprovedDate_c:string,
   PartNum_c:string,
   PartDescription_c:string,
   CreateRelatedPhases_c:boolean,
}

export interface Erp_Tablesets_ProjRevenueRecRow{
      /**  The date that this data was written to the history table.  */  
   HistoryDate:string,
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Total actual labour cost for the project. This is production and setup combined.  */  
   TotActLbrCost:number,
      /**  Total actual burden cost for the project. This is production and setup combined.  */  
   TotActBurCost:number,
      /**  Total actual subcontract costs for the project  */  
   TotActSubContCost:number,
      /**  Total actual material costs for the project  */  
   TotActMtlCost:number,
      /**  Total actual material burden costs for the project  */  
   TotActMtlBurCost:number,
      /**  Sequence  */  
   Seq:number,
      /**  PostedRecog  */  
   PostedRecog:boolean,
      /**  RevenueAmt  */  
   RevenueAmt:number,
      /**  TotActODC  */  
   TotActODC:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   PhaseID:string,
   IsProjectLevelRevenRecog:boolean,
   CurrencyCode:string,
   DocRevenueAmt:number,
   Rpt1RevenueAmt:number,
   Rpt2RevenueAmt:number,
   Rpt3RevenueAmt:number,
   DocTotActBurCost:number,
   DocTotActLbrCost:number,
   DocTotActMtlBurCost:number,
   DocTotActMtlCost:number,
   DocTotActODC:number,
   DocTotActSubContCost:number,
   Rpt1TotActBurCost:number,
   Rpt1TotActLbrCost:number,
   Rpt1TotActMtlBurCost:number,
   Rpt1TotActMtlCost:number,
   Rpt1TotActODC:number,
   Rpt1TotActSubContCost:number,
   Rpt2TotActBurCost:number,
   Rpt2TotActLbrCost:number,
   Rpt2TotActMtlBurCost:number,
   Rpt2TotActMtlCost:number,
   Rpt2TotActODC:number,
   Rpt2TotActSubContCost:number,
   Rpt3TotActLbrCost:number,
   Rpt3TotActMtlBurCost:number,
   Rpt3TotActBurCost:number,
   Rpt3TotActMtlCost:number,
   Rpt3TotActODC:number,
   Rpt3TotActSubContCost:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectAttchRow{
   Company:string,
   ProjectID:string,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectCriteriaRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the  Project.  Links the Milestone to the Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Project Milestone ID  */  
   MilestoneID:string,
      /**  Used to create a unique index for each ProjectCriteria.  */  
   CriteriaSeq:number,
      /**  "F" = Fixed date, "C" = Cost to date, "J" = JobOperation Complete  */  
   CriteriaType:string,
      /**  Criteria Date  */  
   CriteriaDate:string,
      /**  Job Number that this criteria is associated.  In conjunction with the Assmbly and OperationSeq, this is used to find one JobOperation record.  */  
   JobNum:string,
      /**  Job Assembly sequence number that this criteria is associated.  */  
   AssemblySeq:number,
      /**  A sequence number which uniquely identifies a job operation record within the Job/Assembly structure.  */  
   OprSeq:number,
      /**  Material Cost  */  
   MaterialCost:number,
      /**  Subcontract Cost  */  
   SubcontractCost:number,
      /**  Labor Cost  */  
   LaborCost:number,
      /**  Burden Cost  */  
   BurdenCost:number,
      /**  Material Burden Cost  */  
   MtlBurdenCost:number,
      /**  Total Cost  */  
   TotalCost:number,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  System-generated Criteria description.  */  
   CriteriaDescription:string,
   PhaseDescription:string,
   BitFlag:number,
   AssemblySeqDescription:string,
   MilestoneIDDescription:string,
   ProjectIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectCstRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Estimated burden cost.  */  
   EstBurdenCost:number,
      /**  Estimated burden hours.  */  
   EstBurdenHours:number,
      /**  Estimated labor cost.  */  
   EstLaborCost:number,
      /**  Estimated labor hours.  */  
   EstLaborHours:number,
      /**  Estimated subcontract cost.  */  
   EstSubcontractCost:number,
      /**  Estimated material cost.  */  
   EstMtlCost:number,
      /**  Estimated material burden cost.  */  
   EstMtlBurdenCost:number,
      /**  To control if the project phase budget values are to be rolled up to the project  */  
   RollBudgetstoProject:boolean,
      /**  to control if the project phase manual estimate to complete values are to be rolled up to the project  */  
   RollManEstToCpte:boolean,
      /**  Total Costd labour hours for the Project  */  
   TotEstLbrHrs:number,
      /**  Total estimated burden hours for the project  */  
   TotEstBurdenHrs:number,
      /**  Total estimated labour cost for the project. This is production and setup combined.  */  
   TotEstLbrCost:number,
      /**  Total estimated material costs for the project  */  
   TotEstMtlCost:number,
      /**  Total estimated subcontract costs for the project  */  
   TotEstSubContCost:number,
      /**  Total actual labour hours for the project  */  
   TotActLbrHrs:number,
      /**  Total actual burden hours for the project.  */  
   TotActBurHrs:number,
      /**  Total actual labour cost for the project. This is production and setup combined.  */  
   TotActLbrCost:number,
      /**  Total actual burden cost for the project. This is production and setup combined.  */  
   TotActBurCost:number,
      /**  Total actual subcontract costs for the project  */  
   TotActSubContCost:number,
      /**  Total actual material costs for the project  */  
   TotActMtlCost:number,
      /**  Total actual material burden costs for the project  */  
   TotActMtlBurCost:number,
      /**  Manually entered estimate to complete for the labour hours for the project.  */  
   ManEstCtcLbrHrs:number,
      /**  Manually entered estimate to complete for the burden hours for the project.  */  
   ManEstCtcBurHrs:number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project.  */  
   ManEstCtcLbrCost:number,
      /**  Manually entered estimate to complete for the burden cost for the project.  */  
   ManEstCtcBurCost:number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project.  */  
   ManEstCtcSubConCost:number,
      /**  Manually entered estimate to complete for the material cost for the project.  */  
   ManEstCtcMtlCost:number,
      /**  Manually entered estimate to complete for the material burden cost for the project.  */  
   ManEstCtcMtlBurCost:number,
      /**  Total calculated cost to complete labour hours for the project.  */  
   TotCtcLbrHours:number,
      /**  Total calculated cost to complete burden hours for the project.  */  
   TotCtcBurHours:number,
      /**  Total calculated cost to complete burden cost for the project. This will be both production and setup.  */  
   TotCtcBurCost:number,
      /**  Total calculated cost to complete labour cost for the project. This will be both production and setup.  */  
   TotCtcLbrCost:number,
      /**  Total calculated cost to complete subcontract cost for the project.  */  
   TotCtcSubConCost:number,
      /**  Total calculated cost to complete material cost for the project.  */  
   TotCtcMtlCost:number,
      /**  Total calculated cost to complete material burden cost for the project.  */  
   TotCtcMtlBurCost:number,
      /**  Total quoted labour hours for the project  */  
   TotQuotLbrHrs:number,
      /**  Total quoted burden hours for the project  */  
   TotQuotBurHrs:number,
      /**  Total quoted labour cost for the project. This will be both production and setup.  */  
   TotQuotLbrCost:number,
      /**  Total quoted subcontract cost for the project.  */  
   TotQuotSubContCost:number,
      /**  Total quoted material cost for the project.  */  
   TotQuotMtlCost:number,
      /**  Total quoted material burden cost for the project.  */  
   TotQuotMtlBurCost:number,
      /**  Total estimated burden costs for the project  */  
   TotEstBurCost:number,
      /**  Total quoted burden cost for the project. This will be both production and setup.  */  
   TotQuotBurCost:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   RevenueRecAutoToDate:number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   MaterialRecAutoCstTodate:number,
      /**  The labor costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   LaborRecAutoCstTodate:number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   BurdenRecAutoCstTodate:number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   MtlBurdenRecAutoCstTodate:number,
      /**  Total budget labour hours for the Project  */  
   BudTotLbrHours:number,
      /**  Total budget burden hours for the Project  */  
   BudTotBurHrs:number,
      /**  Total budget labour cost for the Project. This is production and setup combined.  */  
   BudTotLbrCost:number,
      /**  Total budget burden cost for the Project. This is production and setup combined.  */  
   BudTotBurCost:number,
      /**  Total budget subcontract costs for the Project  */  
   BudTotSubCost:number,
      /**  Total budget material costs for the Project  */  
   BudTotMtlCost:number,
      /**  Total budget material burden costs for the Project phase.  */  
   BudTotMtlBurCost:number,
      /**  Total estimated material burden costs for the Project phase  */  
   TotEstMtlBurCost:number,
      /**  The subcontract costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   SubConRecAutoCstTodate:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   RevenueRecManToDate:number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MaterialRecManCstTodate:number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   LaborRecManCstTodate:number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   BurdenRecManCstTodate:number,
      /**  The subcontract costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   SubConRecManCstTodate:number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MtlBurdenRecManCstTodate:number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   MaterialCostOfSales:number,
      /**  The labor costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   LaborCostOfSales:number,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   BurdenCostOfSales:number,
      /**  The subcontract costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActSubContractCost  */  
   SubConCostOfSales:number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   MtlBurdenCostOfSales:number,
      /**  Other Direct Cost Quoted  */  
   TotQuotODCCost:number,
      /**  Other Direct Cost Estimated  */  
   TotEstODCCost:number,
      /**  ODC Actual  */  
   TotActODCCost:number,
      /**  Other direct cost manual CTC  */  
   ManEstCTCODCCost:number,
      /**  Other direct Cost total CTC  */  
   TotCTCODCCost:number,
      /**  Other direct Cost Budget Total  */  
   BudTotODCCost:number,
      /**  Other Direct cost Recognition to Date  */  
   ODCRecAutoCstToDate:number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   ODCRecManCstTodate:number,
      /**  Estimated other direct cost  */  
   EstODCCost:number,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   BdnRecSeqPosted:number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   BdnRecSeqLastAdded:number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   BdnRevenueAutoToday:number,
      /**  AsOfDate  */  
   AsOfDate:string,
      /**  BuildAnalysis  */  
   BuildAnalysis:boolean,
      /**  LbrPur  */  
   LbrPur:number,
      /**  BurPur  */  
   BurPur:number,
      /**  MtlPur  */  
   MtlPur:number,
      /**  SubPur  */  
   SubPur:number,
      /**  MtlBurPur  */  
   MtlBurPur:number,
      /**  ODCPur  */  
   ODCPur:number,
      /**  LaborLbrCstToDate  */  
   LaborLbrCstToDate:number,
      /**  BurdenLbrCstToDate  */  
   BurdenLbrCstToDate:number,
      /**  ActMtlNonJobCost  */  
   ActMtlNonJobCost:number,
      /**  RecManPosted  */  
   RecManPosted:number,
      /**  LbrManPosted  */  
   LbrManPosted:number,
      /**  BurManPosted  */  
   BurManPosted:number,
      /**  MtlManPosted  */  
   MtlManPosted:number,
      /**  SubCManPosted  */  
   SubCManPosted:number,
      /**  MtlBurManPosted  */  
   MtlBurManPosted:number,
      /**  ODCManPosted  */  
   ODCManPosted:number,
      /**  Reverse  */  
   Reverse:string,
      /**  NextTmpInvcNum  */  
   NextTmpInvcNum:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Percentage of Completion  */  
   PercentageOfCompletion:number,
      /**  Labor Cost To Be Recognized  */  
   ToBeRecognizedLbrCost:number,
      /**  Burden Cost To Be Recognized  */  
   ToBeRecognizedBurCost:number,
      /**  Material Cost To Be Recognized  */  
   ToBeRecognizedMtlCost:number,
      /**  Subcontract Cost To Be Recognized  */  
   ToBeRecognizedSubCost:number,
      /**  Material Burden Cost To Be Recognized  */  
   ToBeRecognizedMtlBurCost:number,
      /**  ODC Cost To Be Recognized  */  
   ToBeRecognizedODCCost:number,
      /**  Revenue To Be Recognized  */  
   ToBeRecognizedRevenue:number,
      /**  BillingToDate  */  
   BillingToDate:number,
      /**  RecogToDtBilling  */  
   RecogToDtBilling:number,
      /**  TotProjRev  */  
   TotProjRev:number,
      /**  RecogToDtLbk  */  
   RecogToDtLbk:number,
      /**  RecogToDtManual  */  
   RecogToDtManual:number,
      /**  RetentionDt  */  
   RetentionDt:number,
   CurrencyCode:string,
   DocBudTotBurCost:number,
   DocBudTotLbrCost:number,
   DocBudTotMtlBurCost:number,
   DocBudTotMtlCost:number,
   DocBudTotODCCost:number,
   DocBudTotSubCost:number,
   DocEstBurdenCost:number,
   DocEstLaborCost:number,
   DocEstMtlBurdenCost:number,
   DocEstMtlCost:number,
   DocEstODCCost:number,
   DocEstSubcontractCost:number,
   DocEstTotalCost:number,
   DocGTActualCost:number,
   DocGTBudgetCost:number,
   DocGTCalculatedCost:number,
   DocGTEstimatedCost:number,
   DocGTManualCost:number,
   DocGTQuotedCost:number,
   DocProjectedTotalBurCost:number,
   DocProjectedTotalCost:number,
   DocProjectedTotalLbrCost:number,
   DocProjectedTotalMtlBurCost:number,
   DocProjectedTotalMtlCost:number,
   DocProjectedTotalODCCost:number,
   DocProjectedTotalSubContCost:number,
   DocTotActMtlBurCost:number,
   DocTotActMtlCost:number,
   DocTotActODCCost:number,
   DocTotActSubContCost:number,
   DocTotCtcBurCost:number,
   DocTotCtcLbrCost:number,
   DocTotCtcMtlBurCost:number,
   DocTotCtcMtlCost:number,
   DocTotCTCODCCost:number,
   DocTotCtcSubConCost:number,
   DocTotEstBurCost:number,
   DocTotEstLbrCost:number,
   DocTotEstMtlBurCost:number,
   DocTotEstMtlCost:number,
   DocTotEstODCCost:number,
   DocTotEstSubContCost:number,
   DocTotQuotBurCost:number,
   DocTotQuotLbrCost:number,
   DocTotQuotMtlBurCost:number,
   DocTotQuotMtlCost:number,
   DocTotQuotODCCost:number,
   DocTotQuotSubContCost:number,
      /**  This is a calculated field: the sum of the other Project.Est*Cost fields.  It is not stored in the database.  */  
   EstTotalCost:number,
   GTActualCost:number,
   GTBudgetCost:number,
   GTCalculatedCost:number,
   GTEstimatedCost:number,
   GTManualCost:number,
   GTQuotedCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalBurCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalLbrCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalMtlBurCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalMtlCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalODCCost:number,
      /**  This is a calculated field: the sum of the other Project.ProjectedTotal*Cost fields.  It is not stored in the database.  */  
   ProjectedTotalSubContCost:number,
      /**  Recognized to Date Billing  */  
   ReconToDtBilling:number,
   Rpt1BudTotBurCost:number,
   Rpt1BudTotLbrCost:number,
   Rpt1BudTotMtlBurCost:number,
   Rpt1BudTotMtlCost:number,
   Rpt1BudTotODCCost:number,
   Rpt1BudTotSubCost:number,
   Rpt1EstBurdenCost:number,
   Rpt1EstLaborCost:number,
   Rpt1EstMtlBurdenCost:number,
   Rpt1EstMtlCost:number,
   Rpt1EstODCCost:number,
   Rpt1EstSubcontractCost:number,
   Rpt1EstTotalCost:number,
   Rpt1GTActualCost:number,
   Rpt1GTBudgetCost:number,
   Rpt1GTCalculatedCost:number,
   Rpt1GTEstimatedCost:number,
   Rpt1GTManualCost:number,
   Rpt1GTQuotedCost:number,
   Rpt1ManEstCtcBurCost:number,
   Rpt1ManEstCtcLbrCost:number,
   Rpt1ManEstCtcMtlBurCost:number,
   Rpt1ManEstCtcMtlCost:number,
   Rpt1ManEstCTCODCCost:number,
   Rpt1ManEstCtcSubConCost:number,
   Rpt1ProjectedTotalBurCost:number,
   Rpt1ProjectedTotalCost:number,
   Rpt1ProjectedTotalLbrCost:number,
   Rpt1ProjectedTotalMtlBurCost:number,
   Rpt1ProjectedTotalMtlCost:number,
   Rpt1ProjectedTotalODCCost:number,
   Rpt1ProjectedTotalSubContCost:number,
   Rpt1TotActBurCost:number,
   Rpt1TotActLbrCost:number,
   Rpt1TotActMtlBurCost:number,
   Rpt1TotActMtlCost:number,
   Rpt1TotActODCCost:number,
   Rpt1TotActSubContCost:number,
   Rpt1TotCtcBurCost:number,
   Rpt1TotCtcLbrCost:number,
   Rpt1TotCtcMtlBurCost:number,
   Rpt1TotCtcMtlCost:number,
   Rpt1TotCTCODCCost:number,
   Rpt1TotCtcSubConCost:number,
   Rpt1TotEstBurCost:number,
   Rpt1TotEstLbrCost:number,
   Rpt1TotEstMtlBurCost:number,
   Rpt1TotEstMtlCost:number,
   Rpt1TotEstODCCost:number,
   Rpt1TotEstSubContCost:number,
   Rpt1TotQuotBurCost:number,
   Rpt1TotQuotLbrCost:number,
   Rpt1TotQuotMtlBurCost:number,
   Rpt1TotQuotMtlCost:number,
   Rpt1TotQuotODCCost:number,
   Rpt1TotQuotSubContCost:number,
   Rpt2BudTotBurCost:number,
   Rpt2BudTotLbrCost:number,
   Rpt2BudTotMtlBurCost:number,
   Rpt2BudTotMtlCost:number,
   Rpt2BudTotODCCost:number,
   Rpt2BudTotSubCost:number,
   Rpt2EstBurdenCost:number,
   Rpt2EstLaborCost:number,
   Rpt2EstMtlBurdenCost:number,
   Rpt2EstMtlCost:number,
   Rpt2EstODCCost:number,
   Rpt2EstSubcontractCost:number,
   Rpt2EstTotalCost:number,
   Rpt2GTActualCost:number,
   Rpt2GTBudgetCost:number,
   Rpt2GTCalculatedCost:number,
   Rpt2GTEstimatedCost:number,
   Rpt2GTManualCost:number,
   Rpt2GTQuotedCost:number,
   Rpt2ManEstCtcBurCost:number,
   Rpt2ManEstCtcLbrCost:number,
   Rpt2ManEstCtcMtlBurCost:number,
   Rpt2ManEstCtcMtlCost:number,
   Rpt2ManEstCTCODCCost:number,
   Rpt2ManEstCtcSubConCost:number,
   Rpt2ProjectedTotalBurCost:number,
   Rpt2ProjectedTotalCost:number,
   Rpt2ProjectedTotalLbrCost:number,
   Rpt2ProjectedTotalMtlBurCost:number,
   Rpt2ProjectedTotalMtlCost:number,
   Rpt2ProjectedTotalODCCost:number,
   Rpt2ProjectedTotalSubContCost:number,
   Rpt2TotActBurCost:number,
   Rpt2TotActLbrCost:number,
   Rpt2TotActMtlBurCost:number,
   Rpt2TotActMtlCost:number,
   Rpt2TotActODCCost:number,
   Rpt2TotActSubContCost:number,
   Rpt2TotCtcBurCost:number,
   Rpt2TotCtcLbrCost:number,
   Rpt2TotCtcMtlBurCost:number,
   Rpt2TotCtcMtlCost:number,
   Rpt2TotCTCODCCost:number,
   Rpt2TotCtcSubConCost:number,
   Rpt2TotEstBurCost:number,
   Rpt2TotEstLbrCost:number,
   Rpt2TotEstMtlBurCost:number,
   Rpt2TotEstMtlCost:number,
   Rpt2TotEstODCCost:number,
   Rpt2TotEstSubContCost:number,
   Rpt2TotQuotBurCost:number,
   Rpt2TotQuotLbrCost:number,
   Rpt2TotQuotMtlBurCost:number,
   Rpt2TotQuotMtlCost:number,
   Rpt2TotQuotODCCost:number,
   Rpt2TotQuotSubContCost:number,
   Rpt3BudTotBurCost:number,
   Rpt3BudTotLbrCost:number,
   Rpt3BudTotMtlBurCost:number,
   Rpt3BudTotMtlCost:number,
   Rpt3BudTotODCCost:number,
   Rpt3BudTotSubCost:number,
   Rpt3EstBurdenCost:number,
   Rpt3EstLaborCost:number,
   Rpt3EstMtlBurdenCost:number,
   Rpt3EstMtlCost:number,
   Rpt3EstODCCost:number,
   Rpt3EstSubcontractCost:number,
   Rpt3EstTotalCost:number,
   Rpt3GTActualCost:number,
   Rpt3GTBudgetCost:number,
   Rpt3GTCalculatedCost:number,
   Rpt3GTEstimatedCost:number,
   Rpt3GTManualCost:number,
   Rpt3GTQuotedCost:number,
   Rpt3ManEstCtcBurCost:number,
   Rpt3ManEstCtcLbrCost:number,
   Rpt3ManEstCtcMtlBurCost:number,
   Rpt3ManEstCtcMtlCost:number,
   Rpt3ManEstCTCODCCost:number,
   Rpt3ManEstCtcSubConCost:number,
   Rpt3ProjectedTotalBurCost:number,
   Rpt3ProjectedTotalCost:number,
   Rpt3ProjectedTotalLbrCost:number,
   Rpt3ProjectedTotalMtlBurCost:number,
   Rpt3ProjectedTotalMtlCost:number,
   Rpt3ProjectedTotalODCCost:number,
   Rpt3ProjectedTotalSubContCost:number,
   Rpt3TotActBurCost:number,
   Rpt3TotActLbrCost:number,
   Rpt3TotActMtlBurCost:number,
   Rpt3TotActMtlCost:number,
   Rpt3TotActODCCost:number,
   Rpt3TotActSubContCost:number,
   Rpt3TotCtcBurCost:number,
   Rpt3TotCtcLbrCost:number,
   Rpt3TotCtcMtlBurCost:number,
   Rpt3TotCtcMtlCost:number,
   Rpt3TotCTCODCCost:number,
   Rpt3TotCtcSubConCost:number,
   Rpt3TotEstBurCost:number,
   Rpt3TotEstLbrCost:number,
   Rpt3TotEstMtlBurCost:number,
   Rpt3TotEstMtlCost:number,
   Rpt3TotEstODCCost:number,
   Rpt3TotEstSubContCost:number,
   Rpt3TotQuotBurCost:number,
   Rpt3TotQuotLbrCost:number,
   Rpt3TotQuotMtlBurCost:number,
   Rpt3TotQuotMtlCost:number,
   Rpt3TotQuotODCCost:number,
   Rpt3TotQuotSubContCost:number,
   DocManEstCtcBurCost:number,
   DocManEstCtcLbrCost:number,
   DocManEstCtcMtlBurCost:number,
   DocManEstCtcMtlCost:number,
   DocManEstCTCODCCost:number,
   DocManEstCtcSubConCost:number,
   DocTotActBurCost:number,
   DocTotActLbrCost:number,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectJobRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  The date that production was completed for this Job.  Maintained via Job Completion Processing.  */  
   JobCompletionDate:string,
      /**  Job number.  Unique key to identify the production job.  When adding "new" records and this is left blank the system will assign a job number.  Assigning numbers will be done by using a "database" sequence number.  Then using that number loop and increment until an available number is found.  */  
   JobNum:string,
      /**   Part number of the manufactured item.  Does not have to be valid in the Part master.  Cannot be blank.
With verion 8.0 and Advanced Production License a job can have multiple end parts. These are defined in the JobPart table.
This field has not changed. But will now be used to indicate the primary end part that is being produced. That is, the JobPart record where JobPart.PartNum = JobHead.PartNum will be considered as the primary end part. A primary part is only significant on Concurrent mode of production, because it?s quantity drives the material/operation requirements.  */  
   PartNum:string,
      /**  Part Revision number.  Defaults from the most current PartRev.RevisionNum.  */  
   RevisionNum:string,
      /**  The description of the part that is to be manufactured.  Use the Part.Description as the default.  */  
   PartDescription:string,
      /**  This field is not directly maintainable. The value stored here will be different than it was in the pre 8.0- versions. If ProcessMode is  Sequential then this is a total of ALL end parts that are being produced on the job. If Concurrent then it is the production quantity of the primary part /PartsPerOp .  For example 1000 bottle caps are require, 100 caps are produced per machine cycle would result in ProdQty of 10.
See JobPart table for information on end parts of a job.  */  
   ProdQty:number,
      /**  The unit of measure for the job.  Defaulted from Part.IUM.  */  
   IUM:string,
      /**  The Scheduled job start date (including queue time).  This is not directly user maintainable.  It is calculated/updated via the scheduling functions  */  
   StartDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to begin (including queue time).  */  
   StartHour:number,
      /**  Scheduled finish date for the entire Job (including move time).  This is not user maintainable.  It is updated via the scheduling process.  */  
   DueDate:string,
      /**  This field is established by scheduling.  It represents the "Hour offset from the beginning of the work day" when this job is scheduled to end (including move time).  */  
   DueHour:number,
      /**  Indicates the date at which this job needs to be completed.  This is maintainable by the user.  It can be defaulted as the earliest due date of the linked orders.  This due date is used as the default date for "backward" scheduling of the job.  */  
   ReqDueDate:string,
      /**  Contains the Quote number reference.  This was assigned when the job details were pulled in from the quote.  It will be used to show quote figures compared to estimated and actual.  */  
   QuoteNum:number,
      /**  Contains the quote line number reference. (see QuoteNum )  */  
   QuoteLine:number,
      /**  Associates the JobHead with a project in the Project table.  This can be blank.  */  
   ProjectID:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Holds the user answer to the question: "This job is part of project &1.  Do you wish to change the associated project for this job?"  */  
   OkToReassociate:boolean,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectListRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Full description of Project Management Code.  */  
   Description:string,
      /**  Indicates if this Project is active.  Can be changed directly by the user during entry.  */  
   ActiveProject:boolean,
      /**  Editor widget for project comments.  */  
   CommentText:string,
      /**  A LIST-DELIM delimited list of people.  */  
   PersonList:string,
      /**  Will contain the coma separated list of the fields that the user has added to the project from within Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMap:string,
      /**  Will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Holds the default project warehouse code.  */  
   WarehouseCode:string,
      /**  Holds the default project bin code.  */  
   BinNum:string,
      /**  This holds the top level job to which all of the jobs created for a WBS Phase will be associated  */  
   PrimaryJob:string,
      /**  This is the material placeholder in the primary project job to which all WBS Phase jobs will be linked.  */  
   PrimaryMtl:number,
      /**  The sales category code used in the Revenue recognition process.  */  
   SalesCatID:string,
      /**  The Product Group code used in the Revenue Recognition process.  */  
   ProdCode:string,
      /**  RESERVED FOR FUTURE USE: Logical field. When set to true it indicates that the journals created to recognise the revenue for the project have been reversed.  */  
   CloseAccrual:boolean,
      /**  Assembly Seq from JobAsmbl record.  */  
   PrimaryAsmSeq:number,
      /**  Start Date of the project  */  
   StartDate:string,
      /**  A  unique integer assigned by the system to new customers by Contract customer number. This field can be blank.  */  
   ConCustNum:number,
      /**  Contract start date  */  
   ConStartDate:string,
      /**  Date the contract is due to be complete  */  
   ConEndDate:string,
      /**  Projected Contract End Date. Defaults to the Contract End Date but can be used to report on the projected end date.  */  
   ConProjectedEnd:string,
      /**   Contract Reference number for project.
At the Epicor 9.05 release this field is reference only, at the Epicor 9.1 release when the whole contract system is enhanced then this field will reference an actual contract and a search will be provided.  */  
   ConReference:string,
      /**  Employee ID of the person who has responsibility for the project  */  
   ConProjMgr:string,
      /**  Total contract value for the project.  */  
   ConTotValue:number,
      /**  Value of the posted invoices to date (system field)  */  
   ConTotInv:number,
      /**   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
?CP? = Cost Plus
The default is Customer Shipment.  */  
   ConInvMeth:string,
      /**  Foreign key to the QMarkUp  */  
   MarkUpID:string,
      /**  Override of Labor Markup Percent  */  
   PBLbMarkUp:number,
      /**  Override of Material Markup Percent  */  
   PBMtlMarkUp:number,
      /**  Override of Subcontract Markup Percentage  */  
   PBSubMarkUp:number,
      /**  Override of Other Direct Cost Markup %  */  
   PBMiscMarkUp:number,
      /**  Retention percentage. How this is used is dependent on RetentionProc field.  */  
   PBRetentionPcnt:number,
      /**   How the retention percentage will be used.
The options are ?M? = Maximum of Contract Value
?P? = Percent of Invoice Value.  */  
   PBRetentionProc:string,
      /**  Project Fee  */  
   PBFeeProject:number,
      /**  Apply Fee with list of the options: F =  First Invoice Only, A = All Invoices  */  
   PBFeeApply:string,
      /**  Fee Type with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeType:string,
      /**  Apply Fees on list with the options: N = Net Cost, G = Gross Cost.  */  
   PBFeeApplyOn:string,
      /**  Fee Invoice Text in Free format to allow the user to enter text that will be displayed on the invoice  */  
   PBFeeInvoiceText:string,
      /**  Fee that is to be charged against any labor charges on an invoice  */  
   PBFeeLbrCharge:number,
      /**  Labor Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeLbrType:string,
      /**  Labor Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeLbrApply:string,
      /**  Fee that is to be charged against any material charges on an invoice  */  
   PBFeeMtlCharge:number,
      /**  Material Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeMtlType:string,
      /**  Material Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeMtlApply:string,
      /**  Fee that is to be charged against any Subcontract charges on an invoice.  */  
   PBFeeSubCharge:number,
      /**  Subcontract Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeSubType:string,
      /**  Subcontract Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeSubApply:string,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice.  */  
   PBFeeMiscCharge:number,
      /**  Miscellaneous Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeMiscType:string,
      /**  Miscellaneous Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeMiscApply:string,
      /**  Currency Code  */  
   CurrencyCode:string,
      /**  Contract Customer Bill To number, foreign key to Customer  */  
   ConBTCustNum:number,
      /**  If invoices are allowed to be generated even if the element is over the predefined ceiling.  */  
   ConOverCeiling:boolean,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  */  
   ConRevMethod:string,
      /**  Price list is used to establish the price for any materials when the invoicing method is set to T & M or Cost Plus. Can be empty.  */  
   ConListCode:string,
      /**  Hours for Invoicing allows the user to decide which hours are to be used by the invoicing process, it has system list with the options: L =  Labor, B = Burden  */  
   ConHrsInvc:string,
      /**  Rate Type Code  */  
   RateGrpCode:string,
      /**  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  */  
   LockRate:boolean,
      /**  Exchange rate that will be used for this role code entry.  Defaults from CurrRate.CurrentRate  */  
   ExchangeRate:number,
      /**  This is the projected end date of the project but is not required and is only used if entered in the creation of the project job and for any user reporting requirements.  */  
   EndDate:string,
      /**  Defaults from JCSyst.DfltPrjRtSrc. Defines where the invoice process will obtain the Project Role Rates from. Hierarchical works as defined for Invoice Preparation. All of the others will ONLY obtain the rates from the area defined. HIER = Hierarchical, PROJ = Project Only, EMPL = Employee Only, ROLE = Project Role Only  */  
   PBPrjRtSrc:string,
      /**  Value of the posted invoices to date (system field) in the Project currency  */  
   DocConTotInv:number,
      /**  If set to true a new primary job will be created automatically for the project.  */  
   CreatePrjJob:boolean,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt1ConTotInv:number,
      /**  Project revision number  */  
   Revision:number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt2ConTotInv:number,
      /**   This is the percentage of the costs for material, labor and burden that will be invoiced.
This is also used by the invoice entry process when invoicing regular shipments to determine the actual value of the invoice and how much will be relieved from the Progress Payments to date.  */  
   PPAllowPcnt:number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt3ConTotInv:number,
      /**   This will allow regular shipments to be invoiced normally.
Setting the field to true will cause the Customer Shipment process to place any packing slips for any sales order associated with the project to be placed on hold to prevent them being selected for invoicing. 
When the user changes this flag to true it will trigger business logic that will release the shipments for invoicing.  */  
   HoldPrdInv:boolean,
      /**  Total contract value for the project. in the Project currency  */  
   DocConTotValue:number,
      /**   This will default to true which will then trigger the Invoice Preparation process to produce a Progress Payment Invoice.
Setting this to false will cause the project to be ignored by the Invoice Preparation process.  */  
   PPActive:boolean,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt1ConTotValue:number,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt2ConTotValue:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments.  */  
   TotLiqToDate:number,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt3ConTotValue:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then  */  
   PPCeilingTotal:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Project currency  */  
   DocPBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt1PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt2PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt3PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Project currency  */  
   DocPBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt1PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt2PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt3PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Project currency  */  
   DocPBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt1PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt2PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt3PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Project currency  */  
   DocPBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt1PBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt2PBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt3PBFeeSubCharge:number,
      /**  Allows individual ceilings to be applied to suppliers  */  
   PBIndCeilingSup:boolean,
      /**  Allows individual ceilings to be applied to employee  */  
   PBIndCeilingEmp:boolean,
      /**  Allows individual ceilings to be applied to role  */  
   PBIndCeilingPRole:boolean,
      /**  Material Cost invoiced by date.  */  
   PBDocInvoicedMtl:number,
      /**  Labor cost invoiced by date.  */  
   PBDocInvoicedLbr:number,
      /**  Subcontract cost invoiced by date.  */  
   PBDocInvoicedSub:number,
      /**  Material Burden Material cost invoiced by date.  */  
   PBDocInvoicedMtlBur:number,
      /**  Other direct Costs invoiced by date.  */  
   PBDocInvoicedMisc:number,
      /**  Burden Costs invoiced by date.  */  
   PBDocInvoicedBur:number,
      /**  Fees charged by date  */  
   PBDocInvoicedFees:number,
      /**  Next Temporary Invoice number used in the Invoice preparation table before invoice is generated  */  
   NextTmpInvcNum:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Project currency  */  
   DocTotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt1TotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt2TotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt3TotLiqToDate:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Project currency  */  
   DocPPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt1PPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt2PPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt3PPCeilingTotal:number,
      /**  Progress Billing - Order Number  */  
   PBOrderNum:number,
      /**  Progress Payment - Order Number  */  
   PPOrderNum:number,
      /**  Progress Billing - Order Line  */  
   PBOrderLine:number,
      /**  Progress Payment - Order Line  */  
   PPOrderLine:number,
      /**  Project Fee in the Project currency  */  
   DocPBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt1PBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt2PBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt3PBFeeProject:number,
      /**  Set to true when the close billing has been executed. For Fixed Fee this is set only after all PBillSch are closed. For other types this is set when Close Project is executed.  */  
   PBClose:boolean,
      /**  This field is set to true after the Project True Up has been executed.  */  
   PBTrueUp:boolean,
      /**  Defines the Approvals Method for Time related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   TimeApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Time transactions related to this Project.  */  
   TimeWFGroupID:string,
      /**  Defines the Approvals Method for Expenses related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   ExpenseApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Expense transactions related to this Project.  */  
   ExpenseWFGroupID:string,
      /**  Number of Invoices generated for the Project  */  
   PBNumInvoices:number,
      /**  List of fiscal years for which True Up was called  */  
   PBTrueUpYearList:string,
      /**  Site Identifier  */  
   Plant:string,
      /**  Customer Contract Number  */  
   ConConNum:number,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  material lines. If blank the standard InvcDtl.TaxCatID defaulting will be used.  */  
   MtlTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  labor lines.  */  
   LbrTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  fee lines.  */  
   FeeTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  ODC lines. If blank use the tax category from the PurMisc misc charge code record  */  
   ODCTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID Subcontract lines.  */  
   SubTaxCatID:string,
      /**  Descriptive code assigned by user which uniquely identifies a Tax Category to default for PB Invoice InvcDtl.TaxCatID  Burden lines.  */  
   BdnTaxCatID:string,
      /**  Calculate taxes on the amount net of the retention (for future use)  */  
   TaxOnNetOfRet:boolean,
      /**  Date of last project analysis run.  */  
   LastAnalDate:string,
      /**  Indicates if full Re-gen is required for the project. When this is set, the next generate of project analysis will be full re-gen.  */  
   RegenReqd:boolean,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling.  */  
   PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Project currency  */  
   DocPBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt1PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt2PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt3PBCeilingTotal:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling.  */  
   PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Project currency  */  
   DocPBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt1PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt2PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt3PBCeilingFees:number,
      /**  If false then when an employee is booking hours to a job they can enter any Project Role code that has been set up on the employee. When the field is set to true then the Project Role entered MUST be one of the Project Role codes that have been assigned to the operation.  */  
   ChkEmpPrjRole:boolean,
      /**  Progress Payment Liquidation Percentage, used in Get Shipment.  */  
   PPLiquidPct:number,
      /**  Progress Invoice All Order Lines.  If this is set to trye, then the progress invoice preparation process will include the jobs as defined by the parameter PPAllPrjJobs.  */  
   PPAllOrderLines:boolean,
      /**  If this is false then the Progress Payment Invoice process will ONLY process jobs that have a demand link to the sales order defined on this sheet. If the field is true then all jobs linked to the project (WBS or Production) will be processed by the Invoice Preparation process.  */  
   PPAllPrjJobs:boolean,
      /**  PbsTaxCatID  */  
   PbsTaxCatID:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Activate Revenue Recognition at WBS Phase level  */  
   RecognizeRevenueAtPhaseLevel:boolean,
      /**  Last action performed on Project as relates to revenue recognition.  */  
   LastAction:string,
      /**  Date when the LastAction happened to the Project.  */  
   ActionDate:string,
   WhseDesc:string,
   BinDesc:string,
   AsmSeq:number,
      /**  Field used to display the address of ConCustNum  */  
   DspConCustAddr:string,
      /**  Field used to display the address of ConBTCustNum  */  
   DspConBTCustAddr:string,
      /**  Indicates whether the revenue recognition method can be changed on the project. True = the user can change the value defaulted into the project.  */  
   AllowRevRecChg:boolean,
      /**  True indicates the user can change the Derive Project Rates from at the project level.  */  
   AllowPrjRtSrcChg:boolean,
      /**  It is the balance of the Total Progress Payments to date minus Total Amount Liquidated to date.  */  
   PPOBalance:number,
      /**  Field used in UI to disable/enable ExchangeRate.  */  
   EnableExchangeRate:boolean,
      /**  Field used in UI to disable/enable LockRate.  */  
   EnableLockRate:boolean,
   BaseCurrencyID:string,
   RefCodeCurrSymbol:string,
   CurrencySwitch:boolean,
   DocPPOBalance:number,
   Rpt1PPOBalance:number,
   Rpt2PPOBalance:number,
   Rpt3PPOBalance:number,
      /**  Holds the use answer to the question: Burden Sets will be reset. Continue?  */  
   OkToResetBdnSets:boolean,
      /**  True if HoldPrdInv field was changed from true to false.  */  
   ChgdHoldPrdInvTtoF:boolean,
      /**  True if HoldPrdInv field was changed from false to true.  */  
   ChgdHoldPrdInvFtoT:boolean,
   opMessage:string,
   TimeWFGroupIDDescription:string,
   ExpenseWFGroupIDDescription:string,
   EnableApprovals:boolean,
   TimeDefTaskSetID:string,
   ExpenseDefTaskSetID:string,
   ExpenseTaskSetDescription:string,
   TimeTaskSetDescription:string,
      /**  logial to tell us whether the TimeApprovalReqd flag is set in PlantConfCtrl.  */  
   TimeApprovalReqd:boolean,
      /**  logical to determine whether ExpenseApprovalReqd is set in PlantConfCtrl  */  
   ExpenseApprovalReqd:boolean,
      /**  Set to true if any PBGInvcHead where PBGInvcHead.PrcStatus = A or P (approved or posted). Used to control enable/disable of fields in Project Entry  */  
   InvcIsApproved:boolean,
      /**  Used to determine whether to enable the ChkEmpPrjRole flag on Project.  */  
   AllowChkEmpPrjRoleChg:boolean,
      /**  The full name of the customer.  */  
   ConBTCustNumName:string,
      /**  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  */  
   ConBTCustNumBTName:string,
      /**  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  */  
   ConBTCustNumCustID:string,
      /**  A user defined external customer ID.  This must be unique within the file.  This ID may be used in certain screen displays or reports where a full customer name is inappropriate. Therefore users should use meaningful characters as they would in any other master file. This master file key is a little different in that the user can change. This change is allowed because the system is not using the CustID as a foreign key in any other file.  Rather it uses the CustNum field which is assigned to th  */  
   ConCustNumCustID:string,
      /**  The Bill To name of this customer. Will be used by the AR module for Invoices. This defaults to the Customer.Name but can be overrode by the user.  */  
   ConCustNumBTName:string,
      /**  The full name of the customer.  */  
   ConCustNumName:string,
      /**  Date the price list become effective.  */  
   ConListCodeStartDate:string,
      /**  Date that the price list expires on.  */  
   ConListCodeEndDate:string,
      /**  Description of the price list.  */  
   ConListCodeListDescription:string,
      /**  Last name of employee  */  
   ConProjMgrLastName:string,
      /**  This is the employee's full name. This is not directly maintainable. It is a concatenation of the FirstName + MiddleInitial + LastName fields. It exists so that it can be used in browses or where ever the complete name in a first, middle, last fashion is required.  */  
   ConProjMgrName:string,
      /**  First name of employee.  */  
   ConProjMgrFirstName:string,
      /**  Description of the currency  */  
   CurrencyCodeCurrDesc:string,
      /**  A symbol that identifies the currency. Used on Forms and displays  */  
   CurrencyCodeCurrSymbol:string,
      /**  This is the updatable version of CurrencyCode.  This currency cannot be a record already in the currency table.  */  
   CurrencyCodeCurrencyID:string,
      /**   An extended description that can be used on documents such as
POs and invoices.  */  
   CurrencyCodeDocumentDesc:string,
      /**   Used to print as the suffix to the word amount line printed on checks.  For example:
One Hundred and 00/100 Dollars. In this case  "Dollars" is the CurrName  */  
   CurrencyCodeCurrName:string,
      /**  The Plant name. Used on shipping reports.  */  
   PlantName:string,
      /**  Description of the markup.  */  
   QMarkupDescription:string,
      /**  Description  */  
   RateGrpCodeDescription:string,
      /**  Description of the sales category.  */  
   SalesCatDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatBdnDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatFeeDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatLbrDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatMtlDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatODCDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatPbsDescription:string,
      /**  Full description for the Sales Tax category.  */  
   TaxCatSubDescription:string,
      /**  Messaging related to transacting on Revenue Recognition.  */  
   RevenueRecognitionMessage:string,
      /**  Row has been selected for processing.  */  
   SelectedForAction:boolean,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectListTableset{
   ProjectList:Erp_Tablesets_ProjectListRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_ProjectMilestoneRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the  Project.  Links the Milestone to the Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Uniquely identifies a ProjectMilestone.  */  
   MilestoneID:string,
      /**  A milestone is marked as complete when all the associated criteria, as defined by the MilestoneCritera, are true.  The field is set by the system in OMP20.W.  Or it can be set manually.  */  
   Complete:boolean,
      /**  Description  */  
   Description:string,
      /**  How the billing amount will be generated.   "C" = Cost To Date, "F" = Fixed Amount.  */  
   BillingType:string,
      /**  If YES, an A/R invoice will be generated when all the associated ProjectCriteria are true.  */  
   BillingRequired:boolean,
      /**  When Billing Type = "F", then this is the amount to be on the Invoice Line.  */  
   BillingAmount:number,
      /**  The OrderHed that this ProjectMilestone is linked to.  Company plus OrderNum is the foreign key to the OrderHed table.  */  
   OrderNum:number,
      /**   For an invoice to be generated this needs to be a valid OrderDtl record.  Once a ProjectMilestone is linked to an OrderDtl, the OrderDtl cannot be deleted.
Company plus OrderNum plus OrderLine is the foreign key to the OrderDtl table.  */  
   OrderLine:number,
      /**  The OrderRel Num is assigned when the A/R Invoice is created.  It is set to the last open OrderRel for the OrderNum/OrderLine.  If there are no open OrderRels, then it is the last OrderRel.  */  
   OrderRelNum:number,
      /**  Markup Material Percent.  The amount to be billed will be the total Material Cost of the associated Job, multiplied by this amount.  */  
   MarkupMtlPct:number,
      /**  Markup subcontract percent.  The amount to be billed will be the total Subcontract Cost of the associated Job, multiplied by this amount.  */  
   MarkupSubcontractPct:number,
      /**  Markup labor percent.  The amount to be billed will be the total Labor cost of the associated Job, multiplied by this amount.  */  
   MarkupLaborPct:number,
      /**  Markup burden percent.  The amount to be billed will be the total Burden cost of the associated Job, multiplied by this amount.  */  
   MarkupBurdenPct:number,
      /**  Markup material burden percent.  The amount to be billed will be the total Material Burden Cost of the associated Job, multiplied by this amount.  */  
   MarkupMtlBurdenPct:number,
      /**  Company plus InvoiceNum is the foreign key to the InvcHead.   When an invoice is generated for the ProjectMilestone this field is set.  It is not user maintainable.  */  
   InvoiceNum:number,
      /**  Company plus InvoiceNum plus InvoiceLine is the foreign key to the InvcDtl table.   When an invoice is generated for the ProjectMilestone this field is set.  It is not user maintainable.  */  
   InvoiceLine:number,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Mandatory entry and must be valid. Default as the system date.  */  
   OrderDate:string,
      /**  This is an optional field used to enter the customers Purchase Order Number.  This will be used as an alternate index for searching Orders by PO number.  */  
   OrderPONum:string,
      /**  The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.  */  
   OrderDtlPartNum:string,
      /**  A unique code that identifies the currency.  Comes from OrderHed.CurrencyCode.  */  
   CurrencyCode:string,
      /**  Total invoice Amount. This field is an accumulation of the extended net amounts of the detail line items (InvcDtl) and of the miscellaneous charges/credits (InvcMisc) records.  This field has a true sign. (credit memos are negative).  */  
   InvoiceAmt:number,
      /**  Invoice date is duplicated from the InvcGrp record.  */  
   InvoiceDate:string,
      /**  The due date of the earlist unpaid scheduled payment amount. Normally invoices only have a single due date and amount. However we provide for installment payments ...the earliest unpaid scheduled payment.  */  
   InvoiceDueDate:string,
      /**  Indicates if this invoice has been Posted to the receivables file.  */  
   InvoicePosted:boolean,
      /**  The full name of the customer.  */  
   CustomerName:string,
   BillingTypeDescription:string,
   BitFlag:number,
   InvoiceLineLineDesc:string,
   InvoiceNumCardMemberName:string,
   InvoiceNumTermsCode:string,
   OrderLineLineDesc:string,
   OrderNumCurrencyCode:string,
   OrderNumCardMemberName:string,
   ProjectIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectOrderLineRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Contains the Order Number that ties this detail record back to an OrderHed record.  */  
   OrderNum:number,
      /**  This field along with Company and OrderNum make up the unique key to the table. The system should generate this number during entry of new detail records. The system determines next available number by finding the OrderDtl record for the Order and the adding 1 to it.  The user can override this number if they wish.  */  
   OrderLine:number,
      /**   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the OrderDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  */  
   PartNum:string,
      /**  Unit Of Measure (how it is sold/issued). Use the default Part.IUM if it's a valid Part.  */  
   IUM:string,
      /**  Optional field that contains the customers revision. Default from the PartRev.RevisionNum field.  */  
   RevisionNum:string,
      /**   If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  */  
   UnitPrice:number,
      /**   Same as Unit price except that this field contains the unit price in
the customer currency (converted using the exchange rate on OrderHed.
If it's a valid item in the Part table the unit price is defaulted using the following logic:
- Determine if a price break is effective. The basic idea is to see if you can find a record in the OPrice table and then adjust the unit price retrieved from the Part table. 
Price breaks can exist with the following configurations:

 1. Part/Customer
 2. Part/Price level
 3. Part 
 4. Product group/Customer
 5. Product group/level
 6. Product Group 
The search logic is done in the above order. If a OPrice is found and it has an EndDate of zeros or the EndDate is >= OrderDate then consider that a price break has been found and the search quits. Use the Order quantity to determine which element of the QtyBreak array should be used. Then either a fixed unit price is selected (unitprices) or a discount percent is selected (discountPercents) and applied to the Unit Price retrieved from the Part table.  */  
   DocUnitPrice:number,
      /**  Total Order Quantity for the line item. This quantity must always be kept in sync with the scheduled ship quantities stored in the OrderRel table. Normally this field is directly maintainable. However when multiple shipping releases have been established for this line ( more than one OrderRel record) the OrderQty is not maintainable. As the user modifies the quantities in the individual release lines the OrderQty field will get adjusted. This ensures that Order quantity and scheduled ship quantity are always in sync.  */  
   OrderQty:number,
      /**   Date that the first release needs be shipped by in order to meet the customers due date for the first delivery. Defaulted as OrderHed.RequestDate.
Not directly maintainable when more than one delivery record exists, in which case it gets refreshed as the earliest ReqDate of the related OrderRel records.  */  
   RequestDate:string,
      /**  An optional field that is used if the customer has a different  Part number  than the users internal part number.  The XPartNum and PartNum can provide defaults for each other via the PartXref table.. The XPartNum can be blank, does not have to exist in the PartXref table.  */  
   XPartNum:string,
      /**  Optional field that contains the customers revision. Default from the CustXPrt.RevisionNum field.  */  
   XRevisionNum:string,
      /**  Quote number to which this line item detail record is associated with. This is part of the foreign key to QuoteHed file. This field is updated via the "get quote" function within Order Entry.  */  
   QuoteNum:number,
      /**  Quote Line number from which this order line was created. Updated via the Get Quote function within Order Entry. This field along with Company and QuoteNum make up the link to the QuoteDtl file.  */  
   QuoteLine:number,
      /**   Date the customer needs the first release to be delivered.
Defaulted as OrderHed.NeedByDate. Not directly maintainable when more than one delivery record exists. In which case it is kept in sync with the OrderRel record which has the earliest ReqDate which are maintained in the shipping release dialog boxes.  */  
   NeedByDate:string,
      /**  Customer number that the sales order is for. Duplicated from OrderHed.CustNum.  Used to allow efficient browsing of the OrderDtl records for a specific customer.  */  
   CustNum:number,
      /**  Project ID of the Project table record that this OrderDtl record. Can be blank.  */  
   ProjectID:string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  The full name of the customer.  */  
   CustomerName:string,
      /**  Holds the user answer to the question: "This order line is part of project &1.  Do you wish to change the associated project for this order line?"  */  
   OkToReassociate:boolean,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
   UD_SysRevID:string,
   Phase_c:string,
   ItemID_c:string,
   TypeCode_c:string,
   OrigTypeCode_c:string,
   PhaseID_c:string,
   SalesCatID_c:string,
   IndustryShipDate_c:string,
   CreateDate_c:string,
   PriceUpdateDate_c:string,
   CreatedBy_c:string,
   UpdatedBy_c:string,
}

export interface Erp_Tablesets_ProjectOrderRelRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Sales Order Number  */  
   OrderNum:number,
      /**  Sales order Line number that this order release is linked to.  */  
   OrderLine:number,
      /**  The release number assigned by the system.  The user never sees this field. It  is used as a foreign key in other files (such as ShipDtl) to tie those records back to the release record.  */  
   OrderRelNum:number,
      /**  Used to differentiate between standard lines which are for parts "PART"  and lines for service contracts "CONTRACT".  */  
   LineType:string,
      /**  Date which the item needs to be shipped by in order to meet the customers due date. Initially defaulted as OrderHed.ReqDate.  */  
   ReqDate:string,
      /**  Quantity ,using Our U/M, that is requested to be shipped for this release. This MUST BE > ZERO.  */  
   OurReqQty:number,
      /**  The ShipTo ID to be used for this scheduled release record. This MUST BE VALID IN THE SHIPTO file. Use the OrderHead.ShiptoNum as the default when creating new records.  */  
   ShipToNum:string,
      /**  Ship Via ID that is used for this shipment release. THIS CAN BE BLANK or MUST BE VALID IN THE SHIPVIA master file. Use the OrderHead.ShipViaCode as the default.  */  
   ShipViaCode:string,
      /**  Indicates if this release is open.  This is normally set to closed via the shipping program. But can be changed indirectly  by the user during order entry when they "Void" the release..  */  
   OpenRelease:boolean,
      /**  Indicates if this release is  "FIRM". The opposite is an uncommitted release, that is when the customer gives releases that are just 'Best Guesses' of what they will require in the future, such as in blanket order situations. This type of  releases is no different to the system, except that the FirmRelease field will be printed on reports such as TimePhase requirements.  */  
   FirmRelease:boolean,
      /**   Indicates if this requirement or any part of it will be manufactured. Default the setting to "No" if valid Part and the Part.Type is "S" or "P".

Default the setting to "Yes" if the part is not found in Part master or the Part.Type = "J".  This flag also gets set if this release gets linked to a Job via Job Entry. There is an Index on this field so that we can display releases that need have a job assigned to them. This display is part of Job Entry.  */  
   Make:boolean,
      /**   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.

When an OrderRel record is 'voided' any outstanding inventory allocations are relieved, OrderRel.OpenRelease is set to "no" and records are created/updated in the OrdJobMsg file for all the related  open OrderRel records if the OrderDtl that was tied to a Job to indicate that the line item was voided.  */  
   VoidRelease:boolean,
      /**  Quantity, using Our U/M, of the Sales Order release that is planned to be filled (pulled) from stock. This quantity is assigned = to the ReqQty when this item is not manufactured (Make = No).  For manufactured items this quantity can be updated by job entry when the user decides to pull some from stock and manufacture some. This value is used to  allocate to the designated warehouse.  */  
   OurStockQty:number,
      /**  Indicates the inventory warehouse. This field is only relevant if this line references a valid Part record. Use the PrimWhse in the Part table as a default.  */  
   WarehouseCode:string,
      /**  Actual quantity, using our U/M, shipped from Stock.  Updated via the shipping process.  */  
   OurStockShippedQty:number,
      /**  The part number the release quantity is currently allocated to (if it exists in the part master file).  This is a duplicate of the OrderDtl part number and is not user maintainable.  */  
   PartNum:string,
      /**  Part Revision number.  Mirror image of OrderDtl.RevisionNum.  Not directly maintainable.  */  
   RevisionNum:string,
      /**  Indicates if this customer/shipto  is exempt from sales tax for this line item. If field is non-blank it is considered exempt. Defaults from the Customer/Shipto file.  This code is totally user definable and no validation is required. This field will be printed on the Tax report if this item is reportable .  */  
   TaxExempt:string,
      /**  Contains the key value for the shipping contact in the CUSTCNT table. Can be blank or must be valid in the CUSTCNT table. Enter via a DDSL fill-in for contact name. Use OrderHed.ShpConNum when the OrderRel.ShipToNum = OrderHed.ShipToNum else use ShipTo.PrimScon as a default.  */  
   ShpConNum:number,
      /**  Date customer needs the item to be delivered. Defaulted as OrderHed.NeedByDate.  */  
   NeedByDate:string,
      /**  EDI Reference  */  
   Reference:string,
      /**  Site Identifier.  */  
   Plant:string,
      /**  Indicates if the release is selected to be submitted to the picking queue. When submitted for picking a record is written to the MtlQueue table and then SelectForPicking is reset to NO.  */  
   SelectForPicking:boolean,
      /**  The shipping "Staging" warehouse for the release.  Defaults from the system default shipping area (Site.DefShippingWhse). This is maintainable in the Sales Allocation program.  */  
   StagingWarehouseCode:string,
      /**  The shipping "Staging" bin for the release.  Defaults from the system default shipping area (Site.DefShippingBin). This is maintainable in the Sales Allocation program.  */  
   StagingBinNum:string,
      /**   A non blank character indicates that the release could not be picked by the Auto Pick process.
The possible values are;
"L" - Order Line can't be shipped complete.
"O" - Order can't be shipped complete.
"I" - Insufficient quantity reserved
"Z" - Zero quantity reserved.  */  
   PickError:string,
      /**  Quantity from last EDI update.  */  
   CumeQty:number,
      /**  Date of last update  */  
   CumeDate:string,
      /**  Indicates if this order release is linked to an inter-company PO release.  */  
   Linked:boolean,
      /**  The line number of the detail record on the inter-company purchase order.  This number uniquely identifies the record within the Purchase Order number.  The number not directly maintainable, it's assigned by the system when records are created. The user references this item during PO receipt process.  */  
   ICPOLine:number,
      /**  External Trading Company Identifier.  */  
   ExtCompany:string,
      /**  A link to the demand schedule that created/updated this OrderRel.  */  
   ScheduleNumber:string,
      /**  The Mark For to be used for this order release record. This MUST BE VALID IN THE SHIPTO file.  */  
   MarkForNum:string,
      /**  Full name for the drop shipment.  */  
   DropShipName:string,
      /**  RAN Number.  Used for informational purposes.  Supplied by EDI.  */  
   RAN:string,
      /**  Demand Reference.  Used for informational purposes and to aide in matching demand schedules with existing OrderRel records.  Supplied by EDI.  */  
   DemandReference:string,
      /**  Indicates if the demand schedule that created/updated this order release has been rejected.  */  
   DemandSchedRejected:boolean,
      /**  The last date that the Material Queue Report was run for this release.  This field will be null until the Material Queue Report is run.  */  
   DatePickTicketPrinted:string,
      /**  Is this a residential delivery  */  
   ResDelivery:boolean,
      /**  Is a Saturday delivery acceptable  */  
   SatDelivery:boolean,
      /**  Is a Saturday pickup available  */  
   SatPickup:boolean,
      /**  Verbal Confirmation required  */  
   VerbalConf:boolean,
      /**  Hazmat or Dangerous Goods delivery  */  
   Hazmat:boolean,
      /**  Documents Only delivery  */  
   DocOnly:boolean,
      /**  Reference Notes for the delivery  */  
   RefNotes:string,
      /**  Apply Handling Charge to shipment  */  
   ApplyChrg:boolean,
      /**  Valid Values are blank, "Any" (Any Payment), "GF" (Guaranteed Funds), or "Cash" (Currency)  */  
   GroundType:string,
      /**  Indicates whether to send an email notification of delivery  */  
   NotifyFlag:boolean,
      /**  The list of email address to notify about a delivery  */  
   NotifyEMail:string,
      /**  Flag to indicate that an insurance value was declared on delivery  */  
   DeclaredIns:boolean,
      /**  Declared Insurance Amount  */  
   DeclaredAmt:number,
      /**  Service Home Delivery Type Code  */  
   DeliveryType:string,
      /**  Override Carrier Defaults.  If not checked then the Site values will be used  */  
   OverrideCarrier:boolean,
      /**  Override Service Options.  If not checked then the Site values will be used  */  
   OverrideService:boolean,
      /**  The dockingstation of the shipto address.  For future use.  */  
   DockingStation:string,
      /**  The location within the customer shipto address.  For future use.  */  
   Location:string,
      /**  The code of the transport routing/time. For future use.  */  
   TransportID:string,
      /**  Userid of user who made the last change to this record.  */  
   ChangedBy:string,
      /**  The date that the record was last changed  */  
   ChangeDate:string,
      /**  The time that the record was last change (seconds since midnight)  */  
   ChangeTime:number,
      /**  If true, the OrderRelTax records tied to this release are calculated using Tax Connect logic. If  false, taxes are calculated using the standard calc methods.  */  
   TaxConnectCalc:boolean,
      /**  If set to true, the tax calculation logic will retrieve the default SalesTax ids for the release before calculating taxes. It will also be reset to true if the TaxConnectCalc flag switches from true to false.  */  
   GetDfltTaxIds:boolean,
      /**  Unique identifier of the Tax Region assigned by the user.  */  
   TaxRegionCode:string,
      /**  Indicates that the One Time ShipTO information defined for this release should be used.  */  
   UseOTS:boolean,
      /**   Free form. Can be used to further identify the shipping destination. Example, ship to a distribution site, this could contain a store description.
Will be printed on the packing slip  */  
   SubShipTo:string,
      /**  This field identifies Buy To Order releases.  */  
   BuyToOrder:boolean,
      /**  The value for this field will be defaulted from the Supplier defined in the Part Site sub tab at the Part form. Used only for Buy To Order releases.  */  
   VendorNum:number,
      /**  Supplier Purchase Point. Used only for Buy To Order releases.  */  
   PurPoint:string,
      /**  This field identifies Drop Ship releases. Used only for Buy To Order releases.  */  
   DropShip:boolean,
      /**  Purchase order related to this Buy To Order release. Used only for Buy To Order releases.  */  
   PONum:number,
      /**  The line number of the purchase order related to this Buy To Order release. Used only for Buy To Order releases.  */  
   POLine:number,
      /**  The release number of the purchase order line related to this Buy To Order release. Used only for Buy To Order releases.  */  
   PORelNum:number,
      /**  Indicates if this order is in an "open" status. Open orders appear in the browses, open order reports. This field is not directly maintainable. Instead it is set to "no" if order is cancelled or if there are no open line details. If the order has no OrderDtl records, then it is still considered as "open". An order that is not open, is not accessible by order entry.  */  
   OpenOrder:boolean,
      /**  Ship To Customer Number. This along with ShipToNum provides the foreign key field to a given ShipTo. Normally this has the same value as the CustNum field. However, if the customer allows 3rd party shipto (Customer.AllowShipTo3) then this could be a different custnum.  */  
   ShipToCustNum:number,
      /**   Unit of Measure that qualifies the "our" quantity fields.
If a valid part then it is the Base Stocking UOM (Part.IUM).
A mirror image of OrderDtl.IUM. Not directly maintainable  */  
   IUM:string,
      /**   Selling Unit of measure. Qualifies the "Selling" quantity fields.
A mirror image of OrderDtl.SalesUM. Not directly maintainable.  */  
   SalesUM:string,
      /**  Status of Order Release  */  
   RelStatus:string,
      /**  Displays the cause why the item is not compliant.  */  
   ComplianceMsg:string,
      /**  Mark For Customer Number. This along with Mark For ShipToNum provides the foreign key field to a given ShipTo.  */  
   MFCustNum:number,
      /**  Indicates that the One Time Mark For information defined for this record should be used.  */  
   UseOTMF:boolean,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  PhaseID  */  
   PhaseID:string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
   ProjectID:string,
   ShipToNumInactive:boolean,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
   UD_SysRevID:string,
   JobNum_c:string,
}

export interface Erp_Tablesets_ProjectPORow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Indicates if this release is open.  This is normally closed via the receiving program. But can be changed indirectly  by the user during order entry when they "Void" the release..  */  
   OpenRelease:boolean,
      /**   Indicates if the release was voided. Voided releases items are not maintainable, can't "unvoid". This field is not directly maintainable. Instead the void function will be performed via a "Void Release" button. Which then presents a verification dialog box.
When an PORel record is 'voided',  PORel.OpenRelease is set to "no".  If no other open PORel records exist for the related PODetail then the PoDetail.OpenLine is set to "No". If no other open PoDetail records exist then set the PoHeader.OperOrder = No.
This can also be set when the related PoDetail or PoHeader is voided.  */  
   VoidRelease:boolean,
      /**  Purchase order that this release record is related to.  */  
   PONum:number,
      /**  The line # of  PODetail record that the PORel record is related to.  */  
   POLine:number,
      /**  Purchase order release number uniquely identifies a purchase release requirement record for a specific line item on an order. This is assigned by the system.  */  
   PORelNum:number,
      /**  Specifies the date by which you need to receive a release of a part. This date is taken from the Purchase Order Line Due Date, if it’s null, PORel.DueDate will take the value from POHeader.DueDate. If you're adding releases from: - BTO or Drop Shipments, PORel.DueDate will take the value from OrderRel.NeedByDate  - Job Material , PORel.DueDate will take the value from JobMtl.ReqDate. - Subcontract Operations, PORel.DueDate wil take the value from JobOper.DueDate  */  
   DueDate:string,
      /**  This is populated for Purchase Direct items only and contains the job number for the purchased direct item.  */  
   JobNum:string,
      /**  This is populated for Purchase Direct items only and contains the assembly number for the purchased direct item.  */  
   AssemblySeq:number,
      /**   Qualifies the JobSeq field as to be a "M" - Material (JobMtl) record or "S" - Subcontract (JobOper) reference.
FYI: This field can indirectly sets the TranType field via the write trigger. It can itself be set from the TranType. System keeps them compatible. JobSeqType/TranType values are; M = PUR-MTL,  S = PUR-SUB, " " = PUR-STK or PUR-UKN. This possibly could have been deleted. However we decided to keep it for backward compatablity reasons.  */  
   JobSeqType:string,
      /**  Seq # of specific material or subcontract operation record.  */  
   JobSeq:number,
      /**  Total quantity received to stock to date. In Purchasing unit of measure. This is a field maintained by the receipt process.  */  
   ReceivedQty:number,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Project Phase ID  */  
   WBSPhaseID:string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  The unique identifier of the related Dynamic Attribute Set.  */  
   AttributeSetID:number,
      /**  OUR internal Part number for this item.  Comes from PODetail.  */  
   PartNum:string,
      /**  The VendorNum that ties back to the Vendor master file.  This field is a duplicate of the field in POHeader and is maintained  in the write triggers of POHeader and PODetail.  */  
   VendorNum:number,
      /**  A descriptive code assigned by the user to uniquely identify the vendor record.  This code must be unique within the file.  This ID may be used on displays/reports where space for full name is not available or may be inappropriate.  */  
   VendorID:string,
      /**  Vendor's name.  This field has a format length of 50. Normally the maintenance will be done in a left/right scrollable field of 30. Printing may not always print all 50. This also applies to the address lines.  */  
   VendorName:string,
      /**  Holds the user answer to the question: "This purchase order release is part of project &1.  Do you wish to change the associated project for this purchase order release?"  */  
   OkToReassociate:boolean,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectPlanContractLineRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  The unique identifier of the planning contract.  */  
   ContractID:string,
      /**  The unique identifier of the planning contract line.  */  
   LineNum:number,
      /**  A unique part number that identifies this part. Sales Kits not allowed. Same part number can only be entered once in the same contract.  */  
   PartNum:string,
      /**  Describes the Part.  */  
   PartDescription:string,
      /**  The quantity that the user defined that the planning contract needs to plan ahead.  */  
   ContractQty:number,
      /**  ContractUOM  */  
   ContractUOM:string,
      /**  Due date of the planning contract line.  */  
   DueDate:string,
      /**  The planning contract line comments.  */  
   Comments:string,
      /**  OurContractQty  */  
   OurContractQty:number,
      /**  The portion of the contract quantity that has been consumed for the demands linked to this planning contract. This is calculated when MRP is executed.  */  
   ConsumedQty:number,
      /**  SysRevID  */  
   SysRevID:number,
      /**  SysRowID  */  
   SysRowID:string,
      /**  The portion of the demand linked to the contract that has been already satisfied.  */  
   CompletedQty:number,
      /**  Inventory UOM that the Plan Contract Detail Part is allocated against.  */  
   InvtyUOM:string,
   OnHandQty:number,
      /**  The Contract Quantity expressed in the Inventory Unit of Measure  */  
   ThisContractInvtyQty:number,
      /**  The portion of the contract quantity that has been Consumed but it is not yet been Completed. Calculated as Completed Qty - Consumed Qty.  */  
   ThisOpenQty:number,
      /**  The portion of the contract quantity that has not been consumed yet. Calculated as Contract Qty - Consumed Qty.  */  
   UnconsumedQty:number,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectQuotRow{
      /**  Company Identifier.  */  
   Company:string,
   CustomerName:string,
      /**  Quote number to which this line item detail record is associated with. This is part of the foreign key to OrderHed file.  */  
   QuoteNum:number,
      /**  This field along with Company and QuoteNum make up the unique key to the table. The system generates this number during entry of new detail records. The system determines next available number by finding the QuoteDtl record for the Quote and the adding 1 to it.  */  
   QuoteLine:number,
   DocUnitPrice:number,
   ExpectedQty:number,
   OkToReassociate:boolean,
      /**   The user's Internal Part number used to identify line item part. It cannot  be blank. It does not have to exist in the Part table.

A default should be made when the QuoteDtl.XPartNum is changed.  The PartNum and XPartNum fields work together in providing defaults for each other. Default when a valid record is found in the PartXRef table. NOTE THE PART CROSS REFERENCE LOGIC IS NOT INCLUDED IN RELEASE 1.0 ... PLAN FOR FUTURE  */  
   PartNum:string,
   Rev:string,
   UM:string,
   UnitPrice:number,
      /**  Currency Code of the related record  */  
   CurrencyCode:string,
      /**  Project ID of linked project.  Must exist on the Project table. Can be blank.  */  
   ProjectID:string,
      /**  Must exist on ProjPhase table if entered  */  
   PhaseID:string,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  ContractID  */  
   ContractID:string,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Full description of Project Management Code.  */  
   Description:string,
      /**  Indicates if this Project is active.  Can be changed directly by the user during entry.  */  
   ActiveProject:boolean,
      /**  Editor widget for project comments.  */  
   CommentText:string,
      /**  A LIST-DELIM delimited list of people.  */  
   PersonList:string,
      /**  Will contain the coma separated list of the fields that the user has added to the project from within Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMap:string,
      /**  Will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Holds the default project warehouse code.  */  
   WarehouseCode:string,
      /**  Holds the default project bin code.  */  
   BinNum:string,
      /**  This holds the top level job to which all of the jobs created for a WBS Phase will be associated  */  
   PrimaryJob:string,
      /**  This is the material placeholder in the primary project job to which all WBS Phase jobs will be linked.  */  
   PrimaryMtl:number,
      /**  The sales category code used in the Revenue recognition process.  */  
   SalesCatID:string,
      /**  The Product Group code used in the Revenue Recognition process.  */  
   ProdCode:string,
      /**  RESERVED FOR FUTURE USE: Logical field. When set to true it indicates that the journals created to recognise the revenue for the project have been reversed.  */  
   CloseAccrual:boolean,
      /**  Assembly Seq from JobAsmbl record.  */  
   PrimaryAsmSeq:number,
      /**  Start Date of the project  */  
   StartDate:string,
      /**  A  unique integer assigned by the system to new customers by Contract customer number. This field can be blank.  */  
   ConCustNum:number,
      /**  Contract start date  */  
   ConStartDate:string,
      /**  Date the contract is due to be complete  */  
   ConEndDate:string,
      /**  Projected Contract End Date. Defaults to the Contract End Date but can be used to report on the projected end date.  */  
   ConProjectedEnd:string,
      /**   Contract Reference number for project.
At the Epicor 9.05 release this field is reference only, at the Epicor 9.1 release when the whole contract system is enhanced then this field will reference an actual contract and a search will be provided.  */  
   ConReference:string,
      /**  Employee ID of the person who has responsibility for the project  */  
   ConProjMgr:string,
      /**  Total contract value for the project.  */  
   ConTotValue:number,
      /**  Value of the posted invoices to date (system field)  */  
   ConTotInv:number,
      /**   Invoicing Method. If advanced billing is not licensed the only options are CS and MB. Code/Desc: CS = Customer Shipment, MB = Milestone Billing, PB = Progress Billing, TM = Time and aterials
?CP? = Cost Plus
The default is Customer Shipment.  */  
   ConInvMeth:string,
      /**  Foreign key to the QMarkUp  */  
   MarkUpID:string,
      /**  Override of Labor Markup Percent  */  
   PBLbMarkUp:number,
      /**  Override of Material Markup Percent  */  
   PBMtlMarkUp:number,
      /**  Override of Subcontract Markup Percentage  */  
   PBSubMarkUp:number,
      /**  Override of Other Direct Cost Markup %  */  
   PBMiscMarkUp:number,
      /**  Retention percentage. How this is used is dependent on RetentionProc field.  */  
   PBRetentionPcnt:number,
      /**   How the retention percentage will be used.
The options are ?M? = Maximum of Contract Value
?P? = Percent of Invoice Value.  */  
   PBRetentionProc:string,
      /**  Project Fee  */  
   PBFeeProject:number,
      /**  Apply Fee with list of the options: F =  First Invoice Only, A = All Invoices  */  
   PBFeeApply:string,
      /**  Fee Type with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeType:string,
      /**  Apply Fees on list with the options: N = Net Cost, G = Gross Cost.  */  
   PBFeeApplyOn:string,
      /**  Fee Invoice Text in Free format to allow the user to enter text that will be displayed on the invoice  */  
   PBFeeInvoiceText:string,
      /**  Fee that is to be charged against any labor charges on an invoice  */  
   PBFeeLbrCharge:number,
      /**  Labor Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeLbrType:string,
      /**  Labor Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeLbrApply:string,
      /**  Fee that is to be charged against any material charges on an invoice  */  
   PBFeeMtlCharge:number,
      /**  Material Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeMtlType:string,
      /**  Material Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeMtlApply:string,
      /**  Fee that is to be charged against any Subcontract charges on an invoice.  */  
   PBFeeSubCharge:number,
      /**  Subcontract Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeSubType:string,
      /**  Subcontract Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeSubApply:string,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice.  */  
   PBFeeMiscCharge:number,
      /**  Miscellaneous Fee Type of with list of the options: P = Percentage, F = Fixed Amount  */  
   PBFeeMiscType:string,
      /**  Miscellaneous Fee Apply on  with list of options F = First Invoice Only, A = All Invoices.  */  
   PBFeeMiscApply:string,
      /**  Currency Code  */  
   CurrencyCode:string,
      /**  Contract Customer Bill To number, foreign key to Customer  */  
   ConBTCustNum:number,
      /**  If invoices are allowed to be generated even if the element is over the predefined ceiling.  */  
   ConOverCeiling:boolean,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery  */  
   ConRevMethod:string,
      /**  Price list is used to establish the price for any materials when the invoicing method is set to T & M or Cost Plus. Can be empty.  */  
   ConListCode:string,
      /**  Hours for Invoicing allows the user to decide which hours are to be used by the invoicing process, it has system list with the options: L =  Labor, B = Burden  */  
   ConHrsInvc:string,
      /**  Rate Type Code  */  
   RateGrpCode:string,
      /**  Used with the currency module.  When TRUE the currency rate can be changed by the user and cannot be changed by the system.  */  
   LockRate:boolean,
      /**  Exchange rate that will be used for this role code entry.  Defaults from CurrRate.CurrentRate  */  
   ExchangeRate:number,
      /**  This is the projected end date of the project but is not required and is only used if entered in the creation of the project job and for any user reporting requirements.  */  
   EndDate:string,
      /**  Defaults from JCSyst.DfltPrjRtSrc. Defines where the invoice process will obtain the Project Role Rates from. Hierarchical works as defined for Invoice Preparation. All of the others will ONLY obtain the rates from the area defined. HIER = Hierarchical, PROJ = Project Only, EMPL = Employee Only, ROLE = Project Role Only  */  
   PBPrjRtSrc:string,
      /**  Value of the posted invoices to date (system field) in the Project currency  */  
   DocConTotInv:number,
      /**  If set to true a new primary job will be created automatically for the project.  */  
   CreatePrjJob:boolean,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt1ConTotInv:number,
      /**  Project revision number  */  
   Revision:number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt2ConTotInv:number,
      /**   This is the percentage of the costs for material, labor and burden that will be invoiced.
This is also used by the invoice entry process when invoicing regular shipments to determine the actual value of the invoice and how much will be relieved from the Progress Payments to date.  */  
   PPAllowPcnt:number,
      /**  Value of the posted invoices to date (system field) in the Reporting currency  */  
   Rpt3ConTotInv:number,
      /**   This will allow regular shipments to be invoiced normally.
Setting the field to true will cause the Customer Shipment process to place any packing slips for any sales order associated with the project to be placed on hold to prevent them being selected for invoicing. 
When the user changes this flag to true it will trigger business logic that will release the shipments for invoicing.  */  
   HoldPrdInv:boolean,
      /**  Total contract value for the project. in the Project currency  */  
   DocConTotValue:number,
      /**   This will default to true which will then trigger the Invoice Preparation process to produce a Progress Payment Invoice.
Setting this to false will cause the project to be ignored by the Invoice Preparation process.  */  
   PPActive:boolean,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt1ConTotValue:number,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt2ConTotValue:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments.  */  
   TotLiqToDate:number,
      /**  Total contract value for the project. in the Reporting currency  */  
   Rpt3ConTotValue:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then  */  
   PPCeilingTotal:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Project currency  */  
   DocPBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt1PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt2PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any labor charges on an invoice in the Reporting currency  */  
   Rpt3PBFeeLbrCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Project currency  */  
   DocPBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt1PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt2PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any miscellaneous charges on an invoice. in the Reporting currency  */  
   Rpt3PBFeeMiscCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Project currency  */  
   DocPBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt1PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt2PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any material charges on an invoice in the Reporting currency  */  
   Rpt3PBFeeMtlCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Project currency  */  
   DocPBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt1PBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt2PBFeeSubCharge:number,
      /**  Fee that is to be charged against any Subcontract charges on an invoice. in the Reporting currency  */  
   Rpt3PBFeeSubCharge:number,
      /**  Allows individual ceilings to be applied to suppliers  */  
   PBIndCeilingSup:boolean,
      /**  Allows individual ceilings to be applied to employee  */  
   PBIndCeilingEmp:boolean,
      /**  Allows individual ceilings to be applied to role  */  
   PBIndCeilingPRole:boolean,
      /**  Material Cost invoiced by date.  */  
   PBDocInvoicedMtl:number,
      /**  Labor cost invoiced by date.  */  
   PBDocInvoicedLbr:number,
      /**  Subcontract cost invoiced by date.  */  
   PBDocInvoicedSub:number,
      /**  Material Burden Material cost invoiced by date.  */  
   PBDocInvoicedMtlBur:number,
      /**  Other direct Costs invoiced by date.  */  
   PBDocInvoicedMisc:number,
      /**  Burden Costs invoiced by date.  */  
   PBDocInvoicedBur:number,
      /**  Fees charged by date  */  
   PBDocInvoicedFees:number,
      /**  Next Temporary Invoice number used in the Invoice preparation table before invoice is generated  */  
   NextTmpInvcNum:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Project currency  */  
   DocTotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt1TotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt2TotLiqToDate:number,
      /**  This is a system maintained field that reflects the value of liquidations that have taken place as part of customer shipments. in the Reporting currency  */  
   Rpt3TotLiqToDate:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Project currency  */  
   DocPPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt1PPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt2PPCeilingTotal:number,
      /**  If a value is entered in this field then this will be the ceiling for the overall project. Once this is reached then in the Reporting currency  */  
   Rpt3PPCeilingTotal:number,
      /**  Progress Billing - Order Number  */  
   PBOrderNum:number,
      /**  Progress Payment - Order Number  */  
   PPOrderNum:number,
      /**  Progress Billing - Order Line  */  
   PBOrderLine:number,
      /**  Progress Payment - Order Line  */  
   PPOrderLine:number,
      /**  Project Fee in the Project currency  */  
   DocPBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt1PBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt2PBFeeProject:number,
      /**  Project Fee in the Reporting currency  */  
   Rpt3PBFeeProject:number,
      /**  Set to true when the close billing has been executed. For Fixed Fee this is set only after all PBillSch are closed. For other types this is set when Close Project is executed.  */  
   PBClose:boolean,
      /**  This field is set to true after the Project True Up has been executed.  */  
   PBTrueUp:boolean,
      /**  Defines the Approvals Method for Time related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   TimeApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Time transactions related to this Project.  */  
   TimeWFGroupID:string,
      /**  Defines the Approvals Method for Expenses related to the Project.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override this value at the Project.  */  
   ExpenseApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Expense transactions related to this Project.  */  
   ExpenseWFGroupID:string,
      /**  Number of Invoices generated for the Project  */  
   PBNumInvoices:number,
      /**  List of fiscal years for which True Up was called  */  
   PBTrueUpYearList:string,
      /**  Site Identifier  */  
   Plant:string,
      /**  Customer Contract Number  */  
   ConConNum:number,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  material lines. If blank the standard InvcDtl.TaxCatID defaulting will be used.  */  
   MtlTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  labor lines.  */  
   LbrTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  fee lines.  */  
   FeeTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID  ODC lines. If blank use the tax category from the PurMisc misc charge code record  */  
   ODCTaxCatID:string,
      /**  Tax Category to default for PB Invoice InvcDtl.TaxCatID Subcontract lines.  */  
   SubTaxCatID:string,
      /**  Descriptive code assigned by user which uniquely identifies a Tax Category to default for PB Invoice InvcDtl.TaxCatID  Burden lines.  */  
   BdnTaxCatID:string,
      /**  Calculate taxes on the amount net of the retention (for future use)  */  
   TaxOnNetOfRet:boolean,
      /**  Date of last project analysis run.  */  
   LastAnalDate:string,
      /**  Indicates if full Re-gen is required for the project. When this is set, the next generate of project analysis will be full re-gen.  */  
   RegenReqd:boolean,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling.  */  
   PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Project currency  */  
   DocPBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt1PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt2PBCeilingTotal:number,
      /**  Maximum value for overall Project that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt3PBCeilingTotal:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling.  */  
   PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Project currency  */  
   DocPBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt1PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt2PBCeilingFees:number,
      /**  Maximum value for Fees that can be charged. Zero means no ceiling. in the Reporting currency  */  
   Rpt3PBCeilingFees:number,
      /**  If false then when an employee is booking hours to a job they can enter any Project Role code that has been set up on the employee. When the field is set to true then the Project Role entered MUST be one of the Project Role codes that have been assigned to the operation.  */  
   ChkEmpPrjRole:boolean,
      /**  Progress Payment Liquidation Percentage, used in Get Shipment.  */  
   PPLiquidPct:number,
      /**  Progress Invoice All Order Lines.  If this is set to trye, then the progress invoice preparation process will include the jobs as defined by the parameter PPAllPrjJobs.  */  
   PPAllOrderLines:boolean,
      /**  If this is false then the Progress Payment Invoice process will ONLY process jobs that have a demand link to the sales order defined on this sheet. If the field is true then all jobs linked to the project (WBS or Production) will be processed by the Invoice Preparation process.  */  
   PPAllPrjJobs:boolean,
      /**  AvoidPriceList  */  
   AvoidPriceList:boolean,
      /**  PbsTaxCatID  */  
   PbsTaxCatID:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  The identifier of the planning contract.  */  
   ContractID:string,
      /**  Activate Revenue Recognition at WBS Phase level  */  
   RecognizeRevenueAtPhaseLevel:boolean,
      /**  Indicates the date when the project is closed, if the project is reopen, the field will be cleared.  */  
   ClosedDate:string,
      /**  Last action performed on Project as relates to revenue recognition.  */  
   LastAction:string,
      /**  Date when the LastAction happened to the Project.  */  
   ActionDate:string,
      /**  True indicates the user can change the Derive Project Rates from at the project level.  */  
   AllowPrjRtSrcChg:boolean,
      /**  Indicates whether the revenue recognition method can be changed on the project. True = the user can change the value defaulted into the project.  */  
   AllowRevRecChg:boolean,
   AsmSeq:number,
   BaseCurrencyID:string,
   BinDesc:string,
      /**  True if HoldPrdInv field was changed from false to true.  */  
   ChgdHoldPrdInvFtoT:boolean,
      /**  True if HoldPrdInv field was changed from true to false.  */  
   ChgdHoldPrdInvTtoF:boolean,
   ClosePrjJob:boolean,
      /**  List of fields which are referenced by COA segments.  */  
   COASegReferences:string,
   CurrencySwitch:boolean,
   DocPPOBalance:number,
      /**  Field used to display the address of ConBTCustNum  */  
   DspConBTCustAddr:string,
      /**  Field used to display the address of ConCustNum  */  
   DspConCustAddr:string,
   EnableApprovals:boolean,
      /**  Field used in UI to disable/enable ExchangeRate.  */  
   EnableExchangeRate:boolean,
      /**  Field used in UI to disable/enable LockRate.  */  
   EnableLockRate:boolean,
   EngineerPrjJob:boolean,
      /**  logical to determine whether ExpenseApprovalReqd is set in PlantConfCtrl  */  
   ExpenseApprovalReqd:boolean,
   ExpenseDefTaskSetID:string,
   ExpenseTaskSetDescription:string,
   ExpenseWFGroupIDDescription:string,
      /**  Set to true if any PBGInvcHead where PBGInvcHead.PrcStatus = A or P (approved or posted). Used to control enable/disable of fields in Project Entry  */  
   InvcIsApproved:boolean,
      /**  If exists  any Phase or Project with Invoicing method Fixed Fee.  */  
   InvMethHasFF:boolean,
      /**  If exists  any Phase or Project with Invoicing method Time and Material or Cost Plus.  */  
   InvMethHasTMCP:boolean,
      /**  List of Invoicing methods of the Project and all WBS Phases, delimitered by comma  */  
   InvMethList:string,
      /**  Calculated field indicates if the Invoicing method is defined on Project Contract level only (not on any WBS Phase), is used in RowRules when user modifies Invocing method on Contract.  */  
   InvMethOnHeader:boolean,
      /**  Holds the use answer to the question: Burden Sets will be reset. Continue?  */  
   OkToResetBdnSets:boolean,
   opMessage:string,
      /**  It is the balance of the Total Progress Payments to date minus Total Amount Liquidated to date.  */  
   PPOBalance:number,
   RefCodeCurrSymbol:string,
      /**  This controls if the principal job of a project is released or not.  */  
   ReleasePrjJob:boolean,
      /**  If exists  any Phase or Project with Revenue Recognition method Manual.  */  
   RevRecHasMan:boolean,
   RevRecJrnlReverse:string,
   Rpt1PPOBalance:number,
   Rpt2PPOBalance:number,
   Rpt3PPOBalance:number,
      /**  Pb tax cat ID description  */  
   TaxCatPbsDescription:string,
      /**  logial to tell us whether the TimeApprovalReqd flag is set in PlantConfCtrl.  */  
   TimeApprovalReqd:boolean,
   TimeDefTaskSetID:string,
   TimeTaskSetDescription:string,
   TimeWFGroupIDDescription:string,
      /**  Calculated field is used to display opposite value of AvoidPriceList (so the former has default value True)  */  
   UsePriceList:boolean,
   WhseDesc:string,
      /**  Used to determine whether to enable the ChkEmpPrjRole flag on Project.  */  
   AllowChkEmpPrjRoleChg:boolean,
   EnableRecognizeRevenueAtPhaseLevel:boolean,
      /**  formatted address  */  
   ConCustAddrFormatted:string,
      /**  formatted address  */  
   ConBTCustAddrFormatted:string,
   InvMethHasCP:boolean,
   InvMethHasCS:boolean,
   InvMethHasMB:boolean,
   InvMethHasNN:boolean,
   InvMethHasPP:boolean,
   InvMethHasTM:boolean,
   ExpenseApprovalTasksTree:string,
   TimeApprovalTasksTree:string,
   XRateLabel:string,
   BitFlag:number,
   ConBTCustNumBTName:string,
   ConBTCustNumCustID:string,
   ConBTCustNumName:string,
   ConBTCustNumInactive:boolean,
   ConCustNumInactive:boolean,
   ConCustNumName:string,
   ConCustNumBTName:string,
   ConCustNumCustID:string,
   ConListCodeStartDate:string,
   ConListCodeListDescription:string,
   ConListCodeEndDate:string,
   ConProjMgrFirstName:string,
   ConProjMgrName:string,
   ConProjMgrLastName:string,
   CurrencyCodeCurrSymbol:string,
   CurrencyCodeDocumentDesc:string,
   CurrencyCodeCurrencyID:string,
   CurrencyCodeCurrName:string,
   CurrencyCodeCurrDesc:string,
   PlantName:string,
   QMarkupMiscCostMarkUp:number,
   QMarkupMaterialMarkUp:number,
   QMarkupLaborMarkUp:number,
   QMarkupSubcontractMarkUp:number,
   QMarkupDescription:string,
   RateGrpCodeDescription:string,
   SalesCatDescription:string,
   TaxCatBdnDescription:string,
   TaxCatFeeDescription:string,
   TaxCatLbrDescription:string,
   TaxCatMtlDescription:string,
   TaxCatODCDescription:string,
   TaxCatSubDescription:string,
      /**  RowMod  */  
   RowMod:string,
   UD_SysRevID:string,
   CustNum_c:number,
   ShipToNum_c:string,
   LienRequired_c:boolean,
   DNBComplete_c:boolean,
   DNBCompletedBy_c:string,
   PermitRequired_c:boolean,
   RightToLien_c:boolean,
   RightToLienWithInDays_c:number,
   ReviewedBy_c:string,
   TermsCode_c:string,
   AdditionalTerms_c:string,
   PlannedShipDate_c:string,
   SchedSubmittalDate_c:string,
   FreightAmt_c:number,
   NextMilestoneDate_c:string,
   NextMilestoneDesc_c:string,
   EstProfit_c:number,
   EstMargin_c:number,
   CommissionApproval_c:string,
   CommissionApprovedBy_c:string,
   CommissionApprovalDate_c:string,
}

export interface Erp_Tablesets_ProjectTableset{
   Project:Erp_Tablesets_ProjectRow[],
   ProjectAttch:Erp_Tablesets_ProjectAttchRow[],
   FieldServiceCalls:Erp_Tablesets_FieldServiceCallsRow[],
   FieldServiceContracts:Erp_Tablesets_FieldServiceContractsRow[],
   PBWrkMeasuredHead:Erp_Tablesets_PBWrkMeasuredHeadRow[],
   PBWrkMeasuredDtl:Erp_Tablesets_PBWrkMeasuredDtlRow[],
   WBSProjPhase:Erp_Tablesets_WBSProjPhaseRow[],
   ProjectCst:Erp_Tablesets_ProjectCstRow[],
   ProjectJob:Erp_Tablesets_ProjectJobRow[],
   ProjectMilestone:Erp_Tablesets_ProjectMilestoneRow[],
   ProjectCriteria:Erp_Tablesets_ProjectCriteriaRow[],
   ProjectOrderLine:Erp_Tablesets_ProjectOrderLineRow[],
   ProjectOrderRel:Erp_Tablesets_ProjectOrderRelRow[],
   PBdnSets:Erp_Tablesets_PBdnSetsRow[],
   PBEmpCeiling:Erp_Tablesets_PBEmpCeilingRow[],
   PBillSch:Erp_Tablesets_PBillSchRow[],
   PBRoleRt:Erp_Tablesets_PBRoleRtRow[],
   PBSchWrk:Erp_Tablesets_PBSchWrkRow[],
   PBSupCeiling:Erp_Tablesets_PBSupCeilingRow[],
   PConVar:Erp_Tablesets_PConVarRow[],
   ProjectPO:Erp_Tablesets_ProjectPORow[],
   ProjectQuot:Erp_Tablesets_ProjectQuotRow[],
   ProjectTask:Erp_Tablesets_ProjectTaskRow[],
   ProjectTaskAttch:Erp_Tablesets_ProjectTaskAttchRow[],
   ProjPhase:Erp_Tablesets_ProjPhaseRow[],
   ProjPhaseAttch:Erp_Tablesets_ProjPhaseAttchRow[],
   PPhaseOper:Erp_Tablesets_PPhaseOperRow[],
   ProjPhaseGLC:Erp_Tablesets_ProjPhaseGLCRow[],
   EntityGLC:Erp_Tablesets_EntityGLCRow[],
   ProjectPlanContractLine:Erp_Tablesets_ProjectPlanContractLineRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_ProjectTaskAttchRow{
   Company:string,
   ProjectID:string,
   TaskID:string,
   DrawingSeq:number,
   XFileRefNum:number,
   SysRevID:number,
   SysRowID:string,
   ForeignSysRowID:string,
   DrawDesc:string,
   FileName:string,
   PDMDocID:string,
   DocTypeID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_ProjectTaskRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  A user assigned code used to uniquely identify a Task within a Project.  Cannot be blank.  */  
   TaskID:string,
      /**  Full description of Task ID.  */  
   Description:string,
      /**  Editor widget for task comments.  */  
   CommentText:string,
      /**  Task start date.  */  
   StartDate:string,
      /**  Task due date.  */  
   DueDate:string,
      /**  Must be greater than or equal to 0.  */  
   PercentComplete:number,
      /**  Date this task was complete.  */  
   DateComplete:string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   TaskStatus:string,
      /**  A code which, when combined with the CompanyCode, uniquely identifies a person record.  */  
   PersonID:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  The task ID that is returned from Microsoft Project.  */  
   MSPTaskID:string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   MSPPredecessor:string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  The key to the project checklist type used on the project task,  */  
   TypeID:string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   Duration:number,
      /**  This is will either be Hours or Days  */  
   DurationType:string,
      /**  Person List - Obsolete field  */  
   PersonList:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
   TypeDesc:string,
   PersonName:string,
   PhaseDesc:string,
      /**  Person List got from the table ProjectTaskPerson  */  
   DspPersonLst:string,
   BitFlag:number,
   PersonIDName:string,
   ProjectIDDescription:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_RecognHistTableset{
   PartTranRec:Erp_Tablesets_PartTranRecRow[],
   ProjRevenueRec:Erp_Tablesets_ProjRevenueRecRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_RevenRecogRow{
   ProjectID:string,
   Description:string,
   QtdMtlCost:number,
   QtdLbrCost:number,
   QtdBurCost:number,
   QtdSubCost:number,
   QuotMtlBurCost:number,
   EstMtlCost:number,
   EstLbrCost:number,
   EstBurCost:number,
   EstSubCost:number,
   ActMtlCost:number,
   ActLbrCost:number,
   ActBurCost:number,
   ActSubCost:number,
   ActMtlBurCost:number,
   EstMtlBurCost:number,
   ManCTCMtlCost:number,
   ManCTCLbrCost:number,
   ManCTCBurCost:number,
   ManCTCSubCCost:number,
   ManCTCMtlBurCost:number,
   CalcCTCMtlBurCost:number,
   CalcCTCMtlCost:number,
   CalcCTCLbrCost:number,
   CalcCTCBurCost:number,
   CalcCTCSubConCost:number,
   ProjMtlTotal:number,
   ProjLbrTotal:number,
   ProjBurTotal:number,
   ProjMtlBurTotal:number,
   ProjSubTotal:number,
   BudjMtlTotal:number,
   BudjLbrTotal:number,
   BudjBurTotal:number,
   BudjSubTotal:number,
   BudjMtlBurTotal:number,
   TotProjRev:number,
   BillingToDate:number,
   CloseProjAccrual:boolean,
   ReconToDtAuto:number,
   ReconToDtManual:number,
   NewValueToRecog:number,
   Total:number,
   MtlTakenToDate:number,
   LbrTakenToDate:number,
   BurTakenToDate:number,
   SubTakenToDate:number,
   MtlBurTakenToDate:number,
   TotTakenToDate:number,
   MtlManTaken:number,
   LbrManTaken:number,
   BurManTaken:number,
   SubCManTaken:number,
   MtlBurManTaken:number,
   ManTakenTotal:number,
   MtlToBeTaken:number,
   LbrToBeTaken:number,
   BurToBeTaken:number,
   SubToBeTaken:number,
   MtlBurToBeTaken:number,
   TotToBeTaken:number,
   MtlTotTaken:number,
   LbrTotTaken:number,
   BurTotTaken:number,
   SubTotTaken:number,
   MtlBurTotTaken:number,
   TotTaken:number,
   CalcBasedOn:string,
      /**  Is got from the As of Date of the last Build Project Analisys process. Disabled.  */  
   PostingDate:string,
   SalesCat:string,
   ProdGrup:string,
   ManEntPcnt:number,
   Company:string,
   QtdTotal:number,
   EstTotal:number,
   ActTotal:number,
   ProjTotal:number,
   ManCTCTotal:number,
   CalcCTCTotal:number,
   BudjTotal:number,
   SalesCatDesc:string,
   ProdGrupDesc:string,
      /**  ODC Quoted Cost  */  
   QtdODCCost:number,
      /**  ODC Estimated Cost  */  
   EstODCCost:number,
      /**  ODC Actual Cost  */  
   ActODCCost:number,
      /**  ODC Manual CTC Cost  */  
   ManCTCODCCost:number,
      /**  ODC Calculated CTC Cost  */  
   CalcCTCODCCost:number,
      /**  ODC Projected Total  */  
   ProjODCTotal:number,
      /**  ODC Budget total  */  
   BudjODCTotal:number,
      /**  ODC Taken To Date  */  
   ODCTakenToDate:number,
      /**  ODC To Be Taken  */  
   ODCToBeTaken:number,
   ODCTotTaken:number,
   ODCManTaken:number,
   CurrencyCode:string,
      /**  Documented for BillingToDate  */  
   DocBillingToDate:number,
      /**  Reportable 1 for BillingToDate  */  
   Rpt1BillingToDate:number,
      /**  Reportable 2 for BillingToDate  */  
   Rpt2BillingToDate:number,
      /**  Documented for BurManTaken  */  
   DocBurManTaken:number,
      /**  Reportable 1 for BurManTaken  */  
   Rpt1BurManTaken:number,
      /**  Reportable 2 for BurManTaken  */  
   Rpt2BurManTaken:number,
      /**  Documented for BurTakenToDate  */  
   DocBurTakenToDate:number,
      /**  Reportable 1 for BurTakenToDate  */  
   Rpt1BurTakenToDate:number,
      /**  Reportable 2 for BurTakenToDate  */  
   Rpt2BurTakenToDate:number,
      /**  Documented for BurToBeTaken  */  
   DocBurToBeTaken:number,
      /**  Reportable 1 for BurToBeTaken  */  
   Rpt1BurToBeTaken:number,
      /**  Reportable 2 for BurToBeTaken  */  
   Rpt2BurToBeTaken:number,
      /**  Documented for BurTotTaken  */  
   DocBurTotTaken:number,
      /**  Reportable 1 for BurTotTaken  */  
   Rpt1BurTotTaken:number,
      /**  Reportable 2 for BurTotTaken  */  
   Rpt2BurTotTaken:number,
      /**  Documented for LbrManTaken  */  
   DocLbrManTaken:number,
      /**  Reportable 1 for LbrManTaken  */  
   Rpt1LbrManTaken:number,
      /**  Reportable 2 for LbrManTaken  */  
   Rpt2LbrManTaken:number,
      /**  Documented for LbrTakenToDate  */  
   DocLbrTakenToDate:number,
      /**  Reportable 1 for LbrTakenToDate  */  
   Rpt1LbrTakenToDate:number,
      /**  Reportable 2 for LbrTakenToDate  */  
   Rpt2LbrTakenToDate:number,
      /**  Documented for LbrToBeTaken  */  
   DocLbrToBeTaken:number,
      /**  Reportable 1 for LbrToBeTaken  */  
   Rpt1LbrToBeTaken:number,
      /**  Reportable 2 for LbrToBeTaken  */  
   Rpt2LbrToBeTaken:number,
      /**  Documented for LbrTotTaken  */  
   DocLbrTotTaken:number,
      /**  Reportable 1 for LbrTotTaken  */  
   Rpt1LbrTotTaken:number,
      /**  Reportable 2 for LbrTotTaken  */  
   Rpt2LbrTotTaken:number,
      /**  Documented for ManTakenTotal  */  
   DocManTakenTotal:number,
      /**  Reportable 1 for ManTakenTotal  */  
   Rpt1ManTakenTotal:number,
      /**  Reportable 2 for ManTakenTotal  */  
   Rpt2ManTakenTotal:number,
      /**  Documented for MtlBurManTaken  */  
   DocMtlBurManTaken:number,
      /**  Reportable 1 for MtlBurManTaken  */  
   Rpt1MtlBurManTaken:number,
      /**  Reportable 2 for MtlBurManTaken  */  
   Rpt2MtlBurManTaken:number,
      /**  Documented for MtlBurTakenToDate  */  
   DocMtlBurTakenToDate:number,
      /**  Reportable 1 for MtlBurTakenToDate  */  
   Rpt1MtlBurTakenToDate:number,
      /**  Reportable 2 for MtlBurTakenToDate  */  
   Rpt2MtlBurTakenToDate:number,
      /**  Documented for MtlBurToBeTaken  */  
   DocMtlBurToBeTaken:number,
      /**  Reportable 1 for MtlBurToBeTaken  */  
   Rpt1MtlBurToBeTaken:number,
      /**  Reportable 2 for MtlBurToBeTaken  */  
   Rpt2MtlBurToBeTaken:number,
      /**  Documented for MtlBurTotTaken  */  
   DocMtlBurTotTaken:number,
      /**  Reportable 1 for MtlBurTotTaken  */  
   Rpt1MtlBurTotTaken:number,
      /**  Reportable 2 for MtlBurTotTaken  */  
   Rpt2MtlBurTotTaken:number,
      /**  Documented for MtlManTaken  */  
   DocMtlManTaken:number,
      /**  Reportable 1 for MtlManTaken  */  
   Rpt1MtlManTaken:number,
      /**  Reportable 2 for MtlManTaken  */  
   Rpt2MtlManTaken:number,
      /**  Documented for MtlTakenToDate  */  
   DocMtlTakenToDate:number,
      /**  Reportable 1 for MtlTakenToDate  */  
   Rpt1MtlTakenToDate:number,
      /**  Reportable 2 for MtlTakenToDate  */  
   Rpt2MtlTakenToDate:number,
      /**  Documented for MtlToBeTaken  */  
   DocMtlToBeTaken:number,
      /**  Reportable 1 for MtlToBeTaken  */  
   Rpt1MtlToBeTaken:number,
      /**  Reportable 2 for MtlToBeTaken  */  
   Rpt2MtlToBeTaken:number,
      /**  Documented for MtlTotTaken  */  
   DocMtlTotTaken:number,
      /**  Reportable 1 for MtlTotTaken  */  
   Rpt1MtlTotTaken:number,
      /**  Reportable 2 for MtlTotTaken  */  
   Rpt2MtlTotTaken:number,
      /**  Documented for NewValueToRecog  */  
   DocNewValueToRecog:number,
      /**  Reportable 1 for NewValueToRecog  */  
   Rpt1NewValueToRecog:number,
      /**  Reportable 2 for NewValueToRecog  */  
   Rpt2NewValueToRecog:number,
      /**  Documented for ODCManTaken  */  
   DocODCManTaken:number,
      /**  Reportable 1 for ODCManTaken  */  
   Rpt1ODCManTaken:number,
      /**  Reportable 2 for ODCManTaken  */  
   Rpt2ODCManTaken:number,
      /**  Documented for: ODC Taken To Date  */  
   DocODCTakenToDate:number,
      /**  Reportable 1 for: ODC Taken To Date  */  
   Rpt1ODCTakenToDate:number,
      /**  Reportable 2 for: ODC Taken To Date  */  
   Rpt2ODCTakenToDate:number,
      /**  Documented for: ODC To Be Taken  */  
   DocODCToBeTaken:number,
      /**  Reportable 1 for: ODC To Be Taken  */  
   Rpt1ODCToBeTaken:number,
      /**  Reportable 2 for: ODC To Be Taken  */  
   Rpt2ODCToBeTaken:number,
      /**  Documented for ODCTotTaken  */  
   DocODCTotTaken:number,
      /**  Reportable 1 for ODCTotTaken  */  
   Rpt1ODCTotTaken:number,
      /**  Reportable 2 for ODCTotTaken  */  
   Rpt2ODCTotTaken:number,
      /**  Documented for ReconToDtAuto  */  
   DocReconToDtAuto:number,
      /**  Reportable 1 for ReconToDtAuto  */  
   Rpt1ReconToDtAuto:number,
      /**  Documented for ReconToDtManual  */  
   DocReconToDtManual:number,
      /**  Reportable 1 for ReconToDtManual  */  
   Rpt1ReconToDtManual:number,
      /**  Documented for SubCManTaken  */  
   DocSubCManTaken:number,
      /**  Reportable 1 for SubCManTaken  */  
   Rpt1SubCManTaken:number,
      /**  Documented for SubTakenToDate  */  
   DocSubTakenToDate:number,
      /**  Reportable 1 for SubTakenToDate  */  
   Rpt1SubTakenToDate:number,
      /**  Documented for SubToBeTaken  */  
   DocSubToBeTaken:number,
      /**  Reportable 1 for SubToBeTaken  */  
   Rpt1SubToBeTaken:number,
      /**  Documented for SubTotTaken  */  
   DocSubTotTaken:number,
      /**  Reportable 1 for SubTotTaken  */  
   Rpt1SubTotTaken:number,
      /**  Documented for Total  */  
   DocTotal:number,
      /**  Reportable 1 for Total  */  
   Rpt1Total:number,
      /**  Documented for TotProjRev  */  
   DocTotProjRev:number,
      /**  Reportable 1 for TotProjRev  */  
   Rpt1TotProjRev:number,
      /**  Documented for TotTaken  */  
   DocTotTaken:number,
      /**  Reportable 1 for TotTaken  */  
   Rpt1TotTaken:number,
      /**  Documented for TotTakenToDate  */  
   DocTotTakenToDate:number,
      /**  Reportable 1 for TotTakenToDate  */  
   Rpt1TotTakenToDate:number,
      /**  Documented for TotToBeTaken  */  
   DocTotToBeTaken:number,
      /**  Reportable 1 for TotToBeTaken  */  
   Rpt1TotToBeTaken:number,
      /**  Reportable 3 for BillingToDate  */  
   Rpt3BillingToDate:number,
      /**  Reportable 3 for BurManTaken  */  
   Rpt3BurManTaken:number,
      /**  Reportable 3 for BurTakenToDate  */  
   Rpt3BurTakenToDate:number,
      /**  Reportable 3 for BurToBeTaken  */  
   Rpt3BurToBeTaken:number,
      /**  Reportable 3 for BurTotTaken  */  
   Rpt3BurTotTaken:number,
      /**  Reportable 3 for LbrManTaken  */  
   Rpt3LbrManTaken:number,
      /**  Reportable 3 for LbrTakenToDate  */  
   Rpt3LbrTakenToDate:number,
      /**  Reportable 3 for LbrToBeTaken  */  
   Rpt3LbrToBeTaken:number,
      /**  Reportable 3 for LbrTotTaken  */  
   Rpt3LbrTotTaken:number,
      /**  Reportable 3 for ManTakenTotal  */  
   Rpt3ManTakenTotal:number,
      /**  Reportable 3 for MtlBurManTaken  */  
   Rpt3MtlBurManTaken:number,
      /**  Reportable 3 for MtlBurTakenToDate  */  
   Rpt3MtlBurTakenToDate:number,
      /**  Reportable 3 for MtlBurToBeTaken  */  
   Rpt3MtlBurToBeTaken:number,
      /**  Reportable 3 for MtlBurTotTaken  */  
   Rpt3MtlBurTotTaken:number,
      /**  Reportable 3 for MtlManTaken  */  
   Rpt3MtlManTaken:number,
      /**  Reportable 3 for MtlTakenToDate  */  
   Rpt3MtlTakenToDate:number,
      /**  Reportable 3 for MtlToBeTaken  */  
   Rpt3MtlToBeTaken:number,
      /**  Reportable 3 for MtlTotTaken  */  
   Rpt3MtlTotTaken:number,
      /**  Reportable 3 for NewValueToRecog  */  
   Rpt3NewValueToRecog:number,
      /**  Reportable 3 for ODCManTaken  */  
   Rpt3ODCManTaken:number,
      /**  Reportable 3 for: ODC Taken To Date  */  
   Rpt3ODCTakenToDate:number,
      /**  Reportable 3 for: ODC To Be Taken  */  
   Rpt3ODCToBeTaken:number,
      /**  Reportable 3 for ODCTotTaken  */  
   Rpt3ODCTotTaken:number,
      /**  Reportable 2 for ReconToDtAuto  */  
   Rpt2ReconToDtAuto:number,
      /**  Reportable 3 for ReconToDtAuto  */  
   Rpt3ReconToDtAuto:number,
      /**  Reportable 2 for ReconToDtManual  */  
   Rpt2ReconToDtManual:number,
      /**  Reportable 3 for ReconToDtManual  */  
   Rpt3ReconToDtManual:number,
      /**  Reportable 2 for SubCManTaken  */  
   Rpt2SubCManTaken:number,
      /**  Reportable 3 for SubCManTaken  */  
   Rpt3SubCManTaken:number,
      /**  Reportable 2 for SubTakenToDate  */  
   Rpt2SubTakenToDate:number,
      /**  Reportable 3 for SubTakenToDate  */  
   Rpt3SubTakenToDate:number,
      /**  Reportable 2 for SubToBeTaken  */  
   Rpt2SubToBeTaken:number,
      /**  Reportable 3 for SubToBeTaken  */  
   Rpt3SubToBeTaken:number,
      /**  Reportable 2 for SubTotTaken  */  
   Rpt2SubTotTaken:number,
      /**  Reportable 3 for SubTotTaken  */  
   Rpt3SubTotTaken:number,
      /**  Reportable 2 for Total  */  
   Rpt2Total:number,
      /**  Reportable 3 for Total  */  
   Rpt3Total:number,
      /**  Reportable 2 for TotProjRev  */  
   Rpt2TotProjRev:number,
      /**  Reportable 3 for TotProjRev  */  
   Rpt3TotProjRev:number,
      /**  Reportable 2 for TotTaken  */  
   Rpt2TotTaken:number,
      /**  Reportable 3 for TotTaken  */  
   Rpt3TotTaken:number,
      /**  Reportable 2 for TotTakenToDate  */  
   Rpt2TotTakenToDate:number,
      /**  Reportable 3 for TotTakenToDate  */  
   Rpt3TotTakenToDate:number,
      /**  Reportable 2 for TotToBeTaken  */  
   Rpt2TotToBeTaken:number,
      /**  Reportable 3 for TotToBeTaken  */  
   Rpt3TotToBeTaken:number,
   BaseCurrencyID:string,
   CurrencyCodeCurID:string,
   CurrencySwitch:boolean,
   ReconToDtBilling:number,
      /**  Documented for ReconToDtBilling  */  
   DocReconToDtBilling:number,
      /**  Reportable 1 for ReconToDtBilling  */  
   Rpt1ReconToDtBilling:number,
      /**  Reportable 2 for ReconToDtBilling  */  
   Rpt2ReconToDtBilling:number,
      /**  Reportable 3 for ReconToDtBilling  */  
   Rpt3ReconToDtBilling:number,
   ReconToDtTotal:number,
   DocReconToDtTotal:number,
   Rpt1ReconToDtTotal:number,
   Rpt2ReconToDtTotal:number,
   Rpt3ReconToDtTotal:number,
   LbrBeenTaken:number,
   DocLbrBeenTaken:number,
   Rpt1LbrBeenTaken:number,
   Rpt2LbrBeenTaken:number,
   Rpt3LbrBeenTaken:number,
   MtlBeenTaken:number,
   DocMtlBeenTaken:number,
   Rpt1MtlBeenTaken:number,
   Rpt2MtlBeenTaken:number,
   Rpt3MtlBeenTaken:number,
   MtlBurBeenTaken:number,
   DocMtlBurBeenTaken:number,
   Rpt1MtlBurBeenTaken:number,
   Rpt2MtlBurBeenTaken:number,
   Rpt3MtlBurBeenTaken:number,
   SubBeenTaken:number,
   DocSubBeenTaken:number,
   Rpt1SubBeenTaken:number,
   Rpt2SubBeenTaken:number,
   Rpt3SubBeenTaken:number,
   BurBeenTaken:number,
   DocBurBeenTaken:number,
   Rpt1BurBeenTaken:number,
   Rpt2BurBeenTaken:number,
   Rpt3BurBeenTaken:number,
   ODCBeenTaken:number,
   DocODCBeenTaken:number,
   Rpt1ODCBeenTaken:number,
   Rpt2ODCBeenTaken:number,
   Rpt3ODCBeenTaken:number,
      /**  if PRJ Job assigned to the Project exists  */  
   HasJobPRJ:boolean,
   RetentionDt:number,
   DocRetentionDt:number,
   Rpt1RetentionDt:number,
   Rpt2RetentionDt:number,
   Rpt3RetentionDt:number,
   TotBeenTaken:number,
   DocTotBeenTaken:number,
   Rpt1TotBeenTaken:number,
   Rpt2TotBeenTaken:number,
   Rpt3TotBeenTaken:number,
      /**  Labor cost recognized to date via the Labor Booking recognition method.  */  
   LbrLbkTaken:number,
      /**  Documented for LbrLbkTaken  */  
   DocLbrLbkTaken:number,
      /**  Reportable 1 for LbrLbkTaken  */  
   Rpt1LbrLbkTaken:number,
      /**  Reportable 2 for LbrLbkTaken  */  
   Rpt2LbrLbkTaken:number,
      /**  Reportable 3 for LbrLbkTaken  */  
   Rpt3LbrLbkTaken:number,
      /**  Burden cost recognized to date via the Labor Booking recognition method.  */  
   BurLbkTaken:number,
      /**  Documented for BurLbkTaken  */  
   DocBurLbkTaken:number,
      /**  Reportable 1 for BurLbkTaken  */  
   Rpt1BurLbkTaken:number,
      /**  Reportable 2 for BurLbkTaken  */  
   Rpt2BurLbkTaken:number,
      /**  Reportable 3 for BurLbkTaken  */  
   Rpt3BurLbkTaken:number,
      /**  Total costs recognized to date via the Labor Booking.  */  
   LbkTakenTotal:number,
      /**  Documented for LbkTakenTotal  */  
   DocLbkTakenTotal:number,
      /**  Reportable 1 for LbkTakenTotal  */  
   Rpt1LbkTakenTotal:number,
      /**  Reportable 2 for LbkTakenTotal  */  
   Rpt2LbkTakenTotal:number,
      /**  Reportable 3 for LbkTakenTotal  */  
   Rpt3LbkTakenTotal:number,
      /**  Revenue recognized to date via the Labor Booking recognition method.  */  
   ReconToDtLbk:number,
      /**  Documented for ReconToDtLbk  */  
   DocReconToDtLbk:number,
      /**  Reportable 1 for ReconToDtLbk  */  
   Rpt1ReconToDtLbk:number,
      /**  Reportable 2 for ReconToDtLbk  */  
   Rpt2ReconToDtLbk:number,
      /**  Reportable 3 for ReconToDtLbk  */  
   Rpt3ReconToDtLbk:number,
   LbrPur:number,
   DocLbrPur:number,
   Rpt1LbrPur:number,
   Rpt2LbrPur:number,
   Rpt3LbrPur:number,
   BurPur:number,
   DocBurPur:number,
   Rpt1BurPur:number,
   Rpt2BurPur:number,
   Rpt3BurPur:number,
   SubPur:number,
   DocSubPur:number,
   Rpt1SubPur:number,
   Rpt2SubPur:number,
   Rpt3SubPur:number,
   MtlPur:number,
   DocMtlPur:number,
   Rpt1MtlPur:number,
   Rpt2MtlPur:number,
   Rpt3MtlPur:number,
   ODCPur:number,
   DocODCPur:number,
   Rpt1ODCPur:number,
   Rpt2ODCPur:number,
   Rpt3ODCPur:number,
   MtlBurPur:number,
   DocMtlBurPur:number,
   Rpt1MtlBurPur:number,
   Rpt2MtlBurPur:number,
   Rpt3MtlBurPur:number,
   TotalPur:number,
   DocTotalPur:number,
   Rpt1TotalPur:number,
   Rpt2TotalPur:number,
   Rpt3TotalPur:number,
   DocLbrManPosted:number,
   LbrManPosted:number,
   Rpt1LbrManPosted:number,
   Rpt2LbrManPosted:number,
   Rpt3LbrManPosted:number,
   DocBurManPosted:number,
   BurManPosted:number,
   Rpt1BurManPosted:number,
   Rpt2BurManPosted:number,
   Rpt3BurManPosted:number,
   DocSubCManPosted:number,
   SubCManPosted:number,
   Rpt1SubCManPosted:number,
   Rpt2SubCManPosted:number,
   Rpt3SubCManPosted:number,
   DocMtlBurManPosted:number,
   MtlBurManPosted:number,
   Rpt1MtlBurManPosted:number,
   Rpt2MtlBurManPosted:number,
   Rpt3MtlBurManPosted:number,
   DocMtlManPosted:number,
   MtlManPosted:number,
   Rpt1MtlManPosted:number,
   Rpt2MtlManPosted:number,
   Rpt3MtlManPosted:number,
   DocODCManPosted:number,
   ODCManPosted:number,
   Rpt1ODCManPosted:number,
   Rpt2ODCManPosted:number,
   Rpt3ODCManPosted:number,
   DocRecManPosted:number,
   RecManPosted:number,
   Rpt1RecManPosted:number,
   Rpt2RecManPosted:number,
   Rpt3RecManPosted:number,
   DocTotalManPosted:number,
   TotalManPosted:number,
   Rpt1TotalManPosted:number,
   Rpt2TotalManPosted:number,
   Rpt3TotalManPosted:number,
   NonPostedExist:boolean,
      /**  WBS Phase ID  */  
   PhaseID:string,
   DocGTQuotedCost:number,
      /**  Total Estimated  */  
   DocGTEstimatedCost:number,
   DocGTActualCost:number,
      /**  Total Manual Cost to complete  */  
   DocGTManualCost:number,
      /**  Total Manual Cost to complete  */  
   DocGTBudgetCost:number,
      /**  Total Projected Cost  */  
   DocProjectedTotalCost:number,
   IsProjectLevelRevenRecog:boolean,
   EnableRevRecCapability:boolean,
   BIToBeRecognizedBurCost:number,
   BIToBeRecognizedLbrCost:number,
   BIToBeRecognizedMtlBurCost:number,
   BIToBeRecognizedMtlCost:number,
   BIToBeRecognizedODCCost:number,
   BIToBeRecognizedSubCost:number,
   BISalesCatID:string,
   BIToBeRecognizedRevenue:number,
      /**  Revenue Recognition Method  */  
   RevMethod:string,
   SysRowID:string,
      /**  RowMod  */  
   RowMod:string,
}

export interface Erp_Tablesets_RevenRecogTableset{
   RevenRecog:Erp_Tablesets_RevenRecogRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_UpdExtProjectTableset{
   Project:Erp_Tablesets_ProjectRow[],
   ProjectAttch:Erp_Tablesets_ProjectAttchRow[],
   FieldServiceCalls:Erp_Tablesets_FieldServiceCallsRow[],
   FieldServiceContracts:Erp_Tablesets_FieldServiceContractsRow[],
   PBWrkMeasuredHead:Erp_Tablesets_PBWrkMeasuredHeadRow[],
   PBWrkMeasuredDtl:Erp_Tablesets_PBWrkMeasuredDtlRow[],
   WBSProjPhase:Erp_Tablesets_WBSProjPhaseRow[],
   ProjectCst:Erp_Tablesets_ProjectCstRow[],
   ProjectJob:Erp_Tablesets_ProjectJobRow[],
   ProjectMilestone:Erp_Tablesets_ProjectMilestoneRow[],
   ProjectCriteria:Erp_Tablesets_ProjectCriteriaRow[],
   ProjectOrderLine:Erp_Tablesets_ProjectOrderLineRow[],
   ProjectOrderRel:Erp_Tablesets_ProjectOrderRelRow[],
   PBdnSets:Erp_Tablesets_PBdnSetsRow[],
   PBEmpCeiling:Erp_Tablesets_PBEmpCeilingRow[],
   PBillSch:Erp_Tablesets_PBillSchRow[],
   PBRoleRt:Erp_Tablesets_PBRoleRtRow[],
   PBSchWrk:Erp_Tablesets_PBSchWrkRow[],
   PBSupCeiling:Erp_Tablesets_PBSupCeilingRow[],
   PConVar:Erp_Tablesets_PConVarRow[],
   ProjectPO:Erp_Tablesets_ProjectPORow[],
   ProjectQuot:Erp_Tablesets_ProjectQuotRow[],
   ProjectTask:Erp_Tablesets_ProjectTaskRow[],
   ProjectTaskAttch:Erp_Tablesets_ProjectTaskAttchRow[],
   ProjPhase:Erp_Tablesets_ProjPhaseRow[],
   ProjPhaseAttch:Erp_Tablesets_ProjPhaseAttchRow[],
   PPhaseOper:Erp_Tablesets_PPhaseOperRow[],
   ProjPhaseGLC:Erp_Tablesets_ProjPhaseGLCRow[],
   EntityGLC:Erp_Tablesets_EntityGLCRow[],
   ProjectPlanContractLine:Erp_Tablesets_ProjectPlanContractLineRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Erp_Tablesets_WBSProjPhaseRow{
      /**  Company Identifier.  */  
   Company:string,
      /**  Descriptive code assigned by the user to uniquely identify the Jobs, Orders, POs, and Tasks in a Project.  Cannot be blank.  */  
   ProjectID:string,
      /**  Project Phase ID  */  
   PhaseID:string,
      /**  Description  */  
   Description:string,
      /**  Task start date.  */  
   StartDate:string,
      /**  Task due date.  */  
   DueDate:string,
      /**  Must be greater than or equal to 0.  */  
   PercentComplete:number,
      /**  Date this task was complete.  */  
   DateComplete:string,
      /**  Valid values are "N" = Not started, "I" = In Process, "C" = Completed.  */  
   PhaseStatus:string,
      /**  This is the duration of the WBS Phase. On the UK software this currently uses field Number09  */  
   Duration:number,
      /**  Reference to the job number created for the WBS Phase.  */  
   WBSJobNum:string,
      /**  This is the parent phase for this WBS Phase. On the UK software this currently uses field ShortChar01  */  
   ParentPhase:string,
      /**  The task ID that is returned from Microsoft Project.  */  
   MSPTaskID:string,
      /**  This is the Microsoft Project predecessor. This needs to be a text field as Microsoft Project may pass back a alpha numeric string.  */  
   MSPPredecessor:string,
      /**  Character field that will contain the coma separated data that has been returned from Microsoft Project. This data will be retained exactly as it was returned from Microsoft Project. This field will NOT be editable within Epicor.  */  
   UserMapData:string,
      /**  Total budget labour hours for the Project phase  */  
   BudTotLbrHours:number,
      /**  Total budget burden hours for the Project phase.  */  
   BudTotBurHrs:number,
      /**  Total budget labour cost for the Project phase. This is production and setup combined.  */  
   BudTotLbrCost:number,
      /**  Total budget burden cost for the Project phase. This is production and setup combined.  */  
   BudTotBurCost:number,
      /**  Total budget subcontract costs for the Project phase  */  
   BudTotSubCost:number,
      /**  Total budget material costs for the Project phase  */  
   BudTotMtlCost:number,
      /**  Total budget material burden costs for the Project phase.  */  
   BudTotMtlBurCost:number,
      /**  Total estimated labour hours for the Project phase  */  
   TotEstLbrHrs:number,
      /**  Total estimated burden hours for the Project phase  */  
   TotEstBurdenHrs:number,
      /**  Total estimated labour cost for the Project phase. This is production and setup combined.  */  
   TotEstLbrCost:number,
      /**  Total estimated subcontract costs for the Project phase  */  
   TotEstSubContCost:number,
      /**  Total estimated material costs for the Project phase  */  
   TotEstMtlCost:number,
      /**  Total actual labour hours for the Project phase  */  
   TotActLbrHrs:number,
      /**  Total actual burden hours for the Project phase  */  
   TotActBurHrs:number,
      /**  Total actual labour cost for the Project phase. This is production and setup combined.  */  
   TotActLbrCost:number,
      /**  Total actual burden cost for the Project phase. This is production and setup combined.  */  
   TotActBurCost:number,
      /**  Total actual subcontract costs for the Project phase.  */  
   TotActSubContCost:number,
      /**  Total actual material costs for the Project phase  */  
   TotActMtlCost:number,
      /**  Total actual material burden costs for the Project phase.  */  
   TotActMtlBurCost:number,
      /**  Manually entered estimate to complete for the labour hours for the project phase  */  
   ManEstCtcLbrHrs:number,
      /**  Manually entered estimate to complete for the burden hours.  */  
   ManEstCtcBurHrs:number,
      /**  Manually entered estimate to complete for the labour cost. This will be both production and setup for the project phase.  */  
   ManEstCtcLbrCost:number,
      /**  Manually entered estimate to complete for the burden cost for the project phase.  */  
   ManEstCtcBurCost:number,
      /**  Manually entered estimate to complete for the Subcontract cost for the project phase.  */  
   ManEstCtcSubConCost:number,
      /**  Manually entered estimate to complete for the material cost for the project phase.  */  
   ManEstCtcMtlCost:number,
      /**  Manually entered estimate to complete for the material burden cost for the project phase.  */  
   ManEstCtcMtlBurCost:number,
      /**  Total calculated cost to complete labour hours for the Project phase.  */  
   TotCtcLbrHours:number,
      /**  Total calculated cost to complete burden hours for the Project phase.  */  
   TotCtcBurHours:number,
      /**  Total calculated cost to complete labour cost for the Project phase. This will be both production and setup.  */  
   TotCtcLbrCost:number,
      /**  Total calculated cost to complete burden cost for the Project phase. This will be both production and setup.  */  
   TotCtcBurCost:number,
      /**  Total calculated cost to complete subcontract cost for the Project phase.  */  
   TotCtcSubConCost:number,
      /**  Total calculated cost to complete material cost for the Project phase.  */  
   TotCtcMtlCost:number,
      /**  Total calculated cost to complete material burden cost for the Project phase.  */  
   TotCtcMtlBurCost:number,
      /**  Total quoted labour hours for the Project phase  */  
   TotQuotLbrHrs:number,
      /**  Total quoted burden hours for the Project phase.  */  
   TotQuotBurHrs:number,
      /**  Total quoted labour cost for the Project phase. This will be both production and setup.  */  
   TotQuotLbrCost:number,
      /**  Total quoted burden cost for the Project phase. This will be both production and setup.  */  
   TotQuotBurCost:number,
      /**  Total quoted subcontract cost for the Project phase.  */  
   TotQuotSubContCost:number,
      /**  Total quoted material cost for the Project phase.  */  
   TotQuotMtlCost:number,
      /**  Total quoted material burden cost for the Project phase.  */  
   TotQuotMtlBurCost:number,
      /**  This holds the bom level of the phase reletive to the parent.  */  
   Level:number,
      /**  This is will either be Hours or Days  */  
   DurationType:string,
      /**  Total estimated burden cost for the Project phase. This is production and setup combined.  */  
   TotEstBurCost:number,
      /**  Total estimated material burden costs for the Project phase  */  
   TotEstMtlBurCost:number,
      /**  'Roll Child Manual Cost to Complete to this Level  */  
   RollChildMan:boolean,
      /**  Roll Child Budgets to this Level  */  
   RollChildBud:boolean,
      /**  Sort Sequence of the project phase.  This field controls where on the project tree the phase needs to be displayed.  */  
   SortSeq:number,
      /**  Reference to the Measured Work header.  It is used to collect the cost to determine if the Measured Work was profitable or not.  */  
   MeasuredWorkID:string,
      /**  Total quoted other direct cost for the Project phase.  */  
   TotQuotODCCost:number,
      /**  Total estimated other direct costs for the Project phase  */  
   TotEstODCCost:number,
      /**  Total actual other direct costs for the Project phase.  */  
   TotActODCCost:number,
      /**  Other direct cost manual CTC  */  
   ManEstCTCODCCost:number,
      /**  Total calculated cost to complete other direct cost for the Project phase.  */  
   TotCTCODCCost:number,
      /**  Other direct cost Budget Total  */  
   BudTotODCCost:number,
      /**  Defines the Approvals Method for Time related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   TimeApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Time transactions related to this WBS Phase.  */  
   TimeWFGroupID:string,
      /**  Defines the Approvals Method for Expenses related to the WBS Phase.  Valid values are E (Employee), P (Project) and A (Automatic).  If the application is configured not to require Time and Expense approvals, this value is set to Automatic.  A value set at the WBS Phase will override the value at the Project.  */  
   ExpenseApprovalsMethod:string,
      /**  Unique identifier of the workflow group for Expense transactions related to this WBS Phase.  */  
   ExpenseWFGroupID:string,
      /**  PartNum  */  
   PartNum:string,
      /**  RevisionNum  */  
   RevisionNum:string,
      /**  Revision identifier for this row. It is incremented upon each write.  */  
   SysRevID:number,
      /**  Unique identifier for this row. The value is a GUID.  */  
   SysRowID:string,
      /**  Invoicing Method  */  
   InvMethod:string,
      /**  Revenue Recognition Method has system list of the following options: LBR = Labor Booking Recognition, MAN = Manual Recognition, BDN = Actual Burden Recognition, PCC = POC-Cost-to-Cost, PCE = POC-Efforts, PCU = POC-Units-of-Delivery.  */  
   RevMethod:string,
      /**  Sales Order Number  */  
   OrderNum:number,
      /**  Sales Order Line  */  
   OrderLine:number,
      /**  If any activity of the job assigned to the Phase has been recognized or invoiced  */  
   WasRecInvoiced:boolean,
      /**  Date of last Build WBS Phase Analysis run.  */  
   LastBuildWBSPhaseAnalysisDate:string,
      /**  Percentage of Completion  */  
   PercentageOfCompletion:number,
      /**  Labor Cost To Be Recognized  */  
   ToBeRecognizedLbrCost:number,
      /**  Burden Cost To Be Recognized  */  
   ToBeRecognizedBurCost:number,
      /**  Material Cost To Be Recognized  */  
   ToBeRecognizedMtlCost:number,
      /**  Subcontract Cost To Be Recognized  */  
   ToBeRecognizedSubCost:number,
      /**  Material Burden Cost To Be Recognized  */  
   ToBeRecognizedMtlBurCost:number,
      /**  ODC Cost To Be Recognized  */  
   ToBeRecognizedODCCost:number,
      /**  Revenue To Be Recognized  */  
   ToBeRecognizedRevenue:number,
      /**  When true,  Recognize Revenue separately at Child WBS Phases.  When false, Recognize Revenue for this phase and all child phases at this level.  */  
   RecognizeRevenueAtChildPhaseLevel:boolean,
      /**  To control if the project phase budget values are to be rolled up to the project phase.  */  
   RollBudgetsToWBSPhase:boolean,
      /**  TotWBSPhaseRev  */  
   TotWBSPhaseRev:number,
      /**  The sales category code used in the Revenue recognition process.  */  
   SalesCatID:string,
      /**  ActMtlNonJobCost  */  
   ActMtlNonJobCost:number,
      /**  AsOfDate  */  
   AsOfDate:string,
      /**  Number of Recalculation of burden amounts posted to GL by Revenue Recognition process  */  
   BdnRecSeqPosted:number,
      /**  Number of Recalculation of burden amounts created by Revenue Recognition process  */  
   BdnRecSeqLastAdded:number,
      /**  Sum of all Actual Burden Charges posted by today  */  
   BdnRevenueAutoToday:number,
      /**  BillingToDate  */  
   BillingToDate:number,
      /**  BuildAnalysis  */  
   BuildAnalysis:boolean,
      /**  The burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActBurdenCost  */  
   BurdenCostOfSales:number,
      /**  BurdenLbrCstToDate  */  
   BurdenLbrCstToDate:number,
      /**  The burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   BurdenRecAutoCstTodate:number,
      /**  The burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process  */  
   BurdenRecManCstTodate:number,
      /**  BurManPosted  */  
   BurManPosted:number,
      /**  BurPur  */  
   BurPur:number,
      /**  Estimated burden cost.  */  
   EstBurdenCost:number,
      /**  Estimated burden hours.  */  
   EstBurdenHours:number,
      /**  Estimated labor cost.  */  
   EstLaborCost:number,
      /**  Estimated labor hours.  */  
   EstLaborHours:number,
      /**  Estimated material burden cost.  */  
   EstMtlBurdenCost:number,
      /**  Estimated material cost.  */  
   EstMtlCost:number,
      /**  Estimated other direct cost.  */  
   EstODCCost:number,
      /**  Estimated subcontract cost.  */  
   EstSubcontractCost:number,
      /**  The labour costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of labor with a linesource of COS with value from ProjectAnalysis.ActLaborCost.  */  
   LaborCostOfSales:number,
      /**  LaborLbrCstToDate  */  
   LaborLbrCstToDate:number,
      /**  The labour costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   LaborRecAutoCstTodate:number,
      /**  The labor costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   LaborRecManCstTodate:number,
      /**  LbrManPosted  */  
   LbrManPosted:number,
      /**  LbrPur  */  
   LbrPur:number,
      /**  The material costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of Material with a linesource of COS with value from ProjectAnalysis.ActMatCost.  */  
   MaterialCostOfSales:number,
      /**  The material costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order.  */  
   MaterialRecAutoCstTodate:number,
      /**  The material costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MaterialRecManCstTodate:number,
      /**  The material burden costs that have been posted to Cost of Sales. This is the sum of ProjectAnalysis records with a Linecode of material with a linesource of COS with value from ProjectAnalysis.ActMatBurdenCost  */  
   MtlBurdenCostOfSales:number,
      /**  The material burden costs posted to cost of sales to date. These costs are defined by the Capture Cost Activity for the project top job that is linked to the sales order  */  
   MtlBurdenRecAutoCstTodate:number,
      /**  The material burden costs posted to cost of sales to date. This is cost that has been manually recognised using this process.  */  
   MtlBurdenRecManCstTodate:number,
      /**  MtlBurManPosted  */  
   MtlBurManPosted:number,
      /**  MtlBurPur  */  
   MtlBurPur:number,
      /**  MtlManPosted  */  
   MtlManPosted:number,
      /**  MtlPur  */  
   MtlPur:number,
      /**  NextTmpInvcNum  */  
   NextTmpInvcNum:number,
      /**  ODCManPosted  */  
   ODCManPosted:number,
      /**  ODCPur  */  
   ODCPur:number,
      /**  Other Direct cost Recognition to Date  */  
   ODCRecAutoCstToDate:number,
      /**  Other Direct Cost Manual Recognition to Date  */  
   ODCRecManCstTodate:number,
      /**  RecManPosted  */  
   RecManPosted:number,
      /**  RecogToDtBilling  */  
   RecogToDtBilling:number,
      /**  RecogToDtLbk  */  
   RecogToDtLbk:number,
      /**  RecogToDtManual  */  
   RecogToDtManual:number,
      /**  RetentionDt  */  
   RetentionDt:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been invoiced against the sales order either as an advanced billing or a shipment. This is the sum of ProjectAnalysis records with a Linecode of Revenue with a linesource of Invoice with value from ProjectAnalysis.ActMatCost.  */  
   RevenueRecAutoToDate:number,
      /**  The revenue that has been recognised to date for the project. This is revenue that has been manually recognised using this process.  */  
   RevenueRecManToDate:number,
      /**  Reverse  */  
   Reverse:string,
      /**  RollManEstToCpte  */  
   RollManEstToCpte:boolean,
      /**  SubCManPosted  */  
   SubCManPosted:number,
      /**  SubConCostOfSales  */  
   SubConCostOfSales:number,
      /**  SubConRecAutoCstTodate  */  
   SubConRecAutoCstTodate:number,
      /**  SubConRecManCstTodate  */  
   SubConRecManCstTodate:number,
      /**  SubPur  */  
   SubPur:number,
      /**  Total contract value for the WBS Phase.  */  
   ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Document currency.  */  
   DocConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt1ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt2ConTotValue:number,
      /**  Total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt3ConTotValue:number,
      /**  Net total contract value for the WBS Phase.  */  
   ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Document currency.  */  
   DocConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt1ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt2ConTotValueNet:number,
      /**  Net total contract value for the WBS Phase in the Reporting currency.  */  
   Rpt3ConTotValueNet:number,
   BitFlag:number,
      /**  RowMod  */  
   RowMod:string,
   UD_SysRevID:string,
   ProjectType_c:string,
   ShipToNum_c:string,
   ShipToSameAsProj_c:boolean,
   Price_c:number,
   Discount_c:number,
   ResaleRevenue_c:number,
   FreightRevenueAmt_c:number,
   SalesTaxRevenue_c:number,
   Approved_c:boolean,
   ApprovedBy_c:string,
   ApprovedDate_c:string,
   PartNum_c:string,
   PartDescription_c:string,
   CreateRelatedPhases_c:boolean,
}

   /** Required : 
      @param ipFilename
      @param ipProjectID
      @param ipPctComplete
      @param ipPredecessors
      @param ipTasks
      @param ipPhases
      @param ipPhaseAsTask
      @param ipJobs
      @param ipJobAsm
      @param ipJobOper
      @param ipDuration
      @param ipOprFinish
      @param ipMsProjVersion
   */  
export interface ExportToMSProjectFile_input{
      /**  The project ID of the selected Project.  */  
   ipFilename:string,
      /**  The project ID of the selected Project.  */  
   ipProjectID:string,
      /**  The Download Percent Complete code.  */  
   ipPctComplete:string,
      /**  Include Predecessors in the download.  */  
   ipPredecessors:boolean,
      /**  Include Tasks in the download.  */  
   ipTasks:boolean,
      /**  Include Phases in the download.  */  
   ipPhases:boolean,
      /**  Send phase as task.  */  
   ipPhaseAsTask:boolean,
      /**  Include Jobs in the download.  */  
   ipJobs:boolean,
      /**  Include Job Assemblies in the download.  */  
   ipJobAsm:boolean,
      /**  Include Job Operations in the download.  */  
   ipJobOper:boolean,
      /**  The operation duration unit (Days or Hours).  */  
   ipDuration:string,
      /**  The operation finish date (Null or Due Date).  */  
   ipOprFinish:string,
   ipMsProjVersion:string,
}

export interface ExportToMSProjectFile_output{
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipProjectID
      @param ipPctComplete
      @param ipPredecessors
      @param ipTasks
      @param ipPhases
      @param ipPhaseAsTask
      @param ipJobs
      @param ipJobAsm
      @param ipJobOper
      @param ipDuration
      @param ipOprFinish
      @param ipMsProjVersion
   */  
export interface ExportToMSProject_input{
      /**  The project ID of the selected Project.  */  
   ipProjectID:string,
      /**  The Download Percent Complete code.  */  
   ipPctComplete:string,
      /**  Include Predecessors in the download.  */  
   ipPredecessors:boolean,
      /**  Include Tasks in the download.  */  
   ipTasks:boolean,
      /**  Include Phases in the download.  */  
   ipPhases:boolean,
      /**  Send phase as task.  */  
   ipPhaseAsTask:boolean,
      /**  Include Jobs in the download.  */  
   ipJobs:boolean,
      /**  Include Job Assemblies in the download.  */  
   ipJobAsm:boolean,
      /**  Include Job Operations in the download.  */  
   ipJobOper:boolean,
      /**  The operation duration unit (Days or Hours).  */  
   ipDuration:string,
      /**  The operation finish date (Null or Due Date).  */  
   ipOprFinish:string,
   ipMsProjVersion:string,
}

export interface ExportToMSProject_output{
   returnObj:Erp_Tablesets_ExportToMSPTableset[],
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

export interface GetAvailablePersonList_output{
parameters : {
      /**  output parameters  */  
   pcAvailablePersonList:string,
}
}

   /** Required : 
      @param projectID
   */  
export interface GetByID_input{
   projectID:string,
}

export interface GetByID_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
}

   /** Required : 
      @param id
   */  
export interface GetBySysRowID_input{
   id:string,
}

export interface GetBySysRowID_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
}

   /** Required : 
      @param ids
   */  
export interface GetBySysRowIDs_input{
   ids:string,
}

export interface GetBySysRowIDs_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
}

   /** Required : 
      @param tableName
      @param fieldName
   */  
export interface GetCodeDescList_input{
      /**  Table name  */  
   tableName:string,
      /**  Column name that contains the code description list.  */  
   fieldName:string,
}

export interface GetCodeDescList_output{
   returnObj:string,
}

export interface GetCurrencyBase_output{
parameters : {
      /**  output parameters  */  
   opCurrencyBase:string,
}
}

   /** Required : 
      @param method
      @param table
      @param field
   */  
export interface GetDataForCalcBasedOnCombo_input{
   method:string,
   table:string,
   field:string,
}

export interface GetDataForCalcBasedOnCombo_output{
   returnObj:string,
}

   /** Required : 
      @param invMethod
   */  
export interface GetDataForConRevMethodCombo_input{
      /**  Invoicing Method  */  
   invMethod:string,
}

export interface GetDataForConRevMethodCombo_output{
      /**  CodeDesc list  */  
   returnObj:string,
}

   /** Required : 
      @param projectID
      @param phaseID
      @param isRootPhase
      @param rowMod
   */  
export interface GetDataForParentPhaseCombo_input{
   projectID:string,
   phaseID:string,
   isRootPhase:boolean,
   rowMod:string,
}

export interface GetDataForParentPhaseCombo_output{
   returnObj:Erp_Tablesets_ParentPhasesListTableset[],
}

   /** Required : 
      @param invMethod
   */  
export interface GetDataForWBSPhaseRevMethodCombo_input{
      /**  Invoicing Method  */  
   invMethod:string,
}

export interface GetDataForWBSPhaseRevMethodCombo_output{
      /**  CodeDesc list  */  
   returnObj:string,
}

   /** Required : 
      @param whereClause
      @param pageSize
      @param absolutePage
   */  
export interface GetList_input{
      /**  An expression used to filter the rows. Can be left blank for all rows.  */  
   whereClause:string,
      /**  The maximum number of rows to return. Leave as zero for no maximum.  */  
   pageSize:number,
      /**  Page of rows to return.  */  
   absolutePage:number,
}

export interface GetList_output{
   returnObj:Erp_Tablesets_ProjectListTableset[],
parameters : {
      /**  output parameters  */  
   morePages:boolean,
}
}

   /** Required : 
      @param projectID
   */  
export interface GetMultiProjectRevenRecogDS_input{
   projectID:string,
}

export interface GetMultiProjectRevenRecogDS_output{
parameters : {
      /**  output parameters  */  
   projectDS:Erp_Tablesets_ProjectTableset[],
   revenRecogDS:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
      @param relatedToFile
      @param key1
      @param key2
      @param key3
      @param key4
      @param key5
      @param key6
   */  
export interface GetNewEntityGLC_input{
   ds:Erp_Tablesets_ProjectTableset[],
   relatedToFile:string,
   key1:string,
   key2:string,
   key3:string,
   key4:string,
   key5:string,
   key6:string,
}

export interface GetNewEntityGLC_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param callNum
   */  
export interface GetNewFieldServiceCalls_input{
   ds:Erp_Tablesets_ProjectTableset[],
   callNum:number,
}

export interface GetNewFieldServiceCalls_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param contractNum
   */  
export interface GetNewFieldServiceContracts_input{
   ds:Erp_Tablesets_ProjectTableset[],
   contractNum:number,
}

export interface GetNewFieldServiceContracts_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBEmpCeiling_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBEmpCeiling_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param roleCd
   */  
export interface GetNewPBRoleRt_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   roleCd:string,
}

export interface GetNewPBRoleRt_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBSchWrk_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBSchWrk_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBSupCeiling_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBSupCeiling_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param measuredWorkID
   */  
export interface GetNewPBWrkMeasuredDtl_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   measuredWorkID:string,
}

export interface GetNewPBWrkMeasuredDtl_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBWrkMeasuredHead_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBWrkMeasuredHead_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBdnSets_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBdnSets_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPBillSch_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPBillSch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewPConVar_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewPConVar_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param phaseID
   */  
export interface GetNewPPhaseOper_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   phaseID:string,
}

export interface GetNewPPhaseOper_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ProjectID
      @param phaseID
   */  
export interface GetNewPhaseQuot_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   ProjectID:string,
      /**  PhaseID.  */  
   phaseID:string,
}

export interface GetNewPhaseQuot_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param phaseID
   */  
export interface GetNewProjPhaseAttch_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   phaseID:string,
}

export interface GetNewProjPhaseAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param relatedToFile
      @param key1
      @param key2
      @param key3
      @param key4
      @param key5
      @param key6
   */  
export interface GetNewProjPhaseGLC_input{
   ds:Erp_Tablesets_ProjectTableset[],
   relatedToFile:string,
   key1:string,
   key2:string,
   key3:string,
   key4:string,
   key5:string,
   key6:string,
}

export interface GetNewProjPhaseGLC_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewProjPhase_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewProjPhase_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewProjectAttch_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewProjectAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param milestoneID
   */  
export interface GetNewProjectCriteria_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   milestoneID:string,
}

export interface GetNewProjectCriteria_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface GetNewProjectCst_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface GetNewProjectCst_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ProjectID
   */  
export interface GetNewProjectJob_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   ProjectID:string,
}

export interface GetNewProjectJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewProjectMilestone_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewProjectMilestone_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ProjectID
   */  
export interface GetNewProjectOrderLine_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   ProjectID:string,
}

export interface GetNewProjectOrderLine_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ProjectID
   */  
export interface GetNewProjectPO_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   ProjectID:string,
}

export interface GetNewProjectPO_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface GetNewProjectPlanContractLine_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface GetNewProjectPlanContractLine_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ProjectID
   */  
export interface GetNewProjectQuot_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   ProjectID:string,
}

export interface GetNewProjectQuot_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param taskID
   */  
export interface GetNewProjectTaskAttch_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
   taskID:string,
}

export interface GetNewProjectTaskAttch_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
   */  
export interface GetNewProjectTask_input{
   ds:Erp_Tablesets_ProjectTableset[],
   projectID:string,
}

export interface GetNewProjectTask_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface GetNewProject_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface GetNewProject_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param projectID
      @param measuredWorkID
   */  
export interface GetNewWBSProjPhase_input{
   ds:Erp_Tablesets_ProjectTableset[],
      /**  ProjectID.  */  
   projectID:string,
      /**  MeasuredWorkID.  */  
   measuredWorkID:string,
}

export interface GetNewWBSProjPhase_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjectID
   */  
export interface GetPBWrkDtlHistory_input{
      /**  ProjectID  */  
   ipProjectID:string,
}

export interface GetPBWrkDtlHistory_output{
   returnObj:Erp_Tablesets_PBWrkDtlHistoryTableset[],
}

   /** Required : 
      @param ipProjectID
      @param ipBillSchedID
   */  
export interface GetPBillHistory_input{
      /**  The ProjectID  */  
   ipProjectID:string,
      /**  The BillSchedID.  */  
   ipBillSchedID:string,
}

export interface GetPBillHistory_output{
   returnObj:Erp_Tablesets_PBillHistoryTableset[],
}

   /** Required : 
      @param company
      @param contractID
      @param plant
   */  
export interface GetProjectPlanContractDtlRows_input{
      /**  Company  */  
   company:string,
      /**  ContractID  */  
   contractID:string,
      /**  Plant  */  
   plant:string,
}

export interface GetProjectPlanContractDtlRows_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
}

   /** Required : 
      @param invMethod
   */  
export interface GetRowFilterForConRevMethodCombo_input{
      /**  Invoicing Method  */  
   invMethod:string,
}

export interface GetRowFilterForConRevMethodCombo_output{
   returnObj:string,
}

   /** Required : 
      @param whereClauseProject
      @param whereClauseProjectAttch
      @param whereClauseFieldServiceCalls
      @param whereClauseFieldServiceContracts
      @param whereClausePBWrkMeasuredHead
      @param whereClausePBWrkMeasuredDtl
      @param whereClauseWBSProjPhase
      @param whereClauseProjectCst
      @param whereClauseProjectJob
      @param whereClauseProjectMilestone
      @param whereClauseProjectCriteria
      @param whereClauseProjectOrderLine
      @param whereClauseProjectOrderRel
      @param whereClausePBdnSets
      @param whereClausePBEmpCeiling
      @param whereClausePBillSch
      @param whereClausePBRoleRt
      @param whereClausePBSchWrk
      @param whereClausePBSupCeiling
      @param whereClausePConVar
      @param whereClauseProjectPO
      @param whereClauseProjectQuot
      @param whereClauseProjectTask
      @param whereClauseProjectTaskAttch
      @param whereClauseProjPhase
      @param whereClauseProjPhaseAttch
      @param whereClausePPhaseOper
      @param whereClauseProjPhaseGLC
      @param whereClauseEntityGLC
      @param whereClauseProjectPlanContractLine
      @param pageSize
      @param absolutePage
   */  
export interface GetRows_input{
   whereClauseProject:string,
   whereClauseProjectAttch:string,
   whereClauseFieldServiceCalls:string,
   whereClauseFieldServiceContracts:string,
   whereClausePBWrkMeasuredHead:string,
   whereClausePBWrkMeasuredDtl:string,
   whereClauseWBSProjPhase:string,
   whereClauseProjectCst:string,
   whereClauseProjectJob:string,
   whereClauseProjectMilestone:string,
   whereClauseProjectCriteria:string,
   whereClauseProjectOrderLine:string,
   whereClauseProjectOrderRel:string,
   whereClausePBdnSets:string,
   whereClausePBEmpCeiling:string,
   whereClausePBillSch:string,
   whereClausePBRoleRt:string,
   whereClausePBSchWrk:string,
   whereClausePBSupCeiling:string,
   whereClausePConVar:string,
   whereClauseProjectPO:string,
   whereClauseProjectQuot:string,
   whereClauseProjectTask:string,
   whereClauseProjectTaskAttch:string,
   whereClauseProjPhase:string,
   whereClauseProjPhaseAttch:string,
   whereClausePPhaseOper:string,
   whereClauseProjPhaseGLC:string,
   whereClauseEntityGLC:string,
   whereClauseProjectPlanContractLine:string,
   pageSize:number,
   absolutePage:number,
}

export interface GetRows_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
parameters : {
      /**  output parameters  */  
   morePages:boolean,
}
}

   /** Required : 
      @param ipProjectID
      @param ipPhaseID
   */  
export interface GetValidPhases_input{
      /**  ProjectID  */  
   ipProjectID:string,
      /**  PhaseID  */  
   ipPhaseID:string,
}

export interface GetValidPhases_output{
parameters : {
      /**  output parameters  */  
   opPhaseList:string,
}
}

export interface Ice_BOUpdErrorRow{
   TableName:string,
   ErrorLevel:string,
   ErrorType:string,
   ErrorText:string,
   ErrorSysRowID:string,
   SysRowID:string,
   RowMod:string,
}

export interface Ice_BOUpdErrorTableset{
   BOUpdError:Ice_BOUpdErrorRow[],
   ExtensionTables:Ice_Extensions_ExtensionTableData[],
}

export interface Ice_Extensions_ExtensionRow{
   ColumnValues:object
   RowMod:string,
   SysRowID:string,
}

export interface Ice_Extensions_ExtensionTableColumn{
   ColumnName:string,
   ColumnType:string,
}

export interface Ice_Extensions_ExtensionTableData{
   Table:Ice_Extensions_ExtensionRow[],
   SystemCode:string,
   TableName:string,
   Columns:Ice_Extensions_ExtensionTableColumn[],
   PrimaryKeyColumns:string,
   PeerTableSystemCode:string,
   PeerTableName:string,
}

   /** Required : 
      @param ipProjectID
      @param ipPhases
      @param ipTasks
      @param ipProjJobs
      @param ipPhaseTasks
      @param ipPhaseJobs
      @param ipCrtePhsJobs
      @param ipProjStart
      @param ipProjEnd
      @param ipPhaseStart
      @param ipPhaseEnd
      @param ipTaskStart
      @param ipTaskEnd
      @param ipJobStart
      @param ipJobEnd
      @param ipAsmStart
      @param ipAsmEnd
      @param ipOprStart
      @param ipOprEnd
      @param fileName
   */  
export interface ImportFromMSProjectCsvFile_input{
      /**  The project ID of the selected Project.  */  
   ipProjectID:string,
      /**  Indicates if Phases should be created.  */  
   ipPhases:boolean,
      /**  Indicates if Tasks should be created.  */  
   ipTasks:boolean,
      /**  Indicates if Project and Job links should be updated.  */  
   ipProjJobs:boolean,
      /**  Indicates if Phase and Task links should be updated.  */  
   ipPhaseTasks:boolean,
      /**  Indicates if Phase and Job links should be updated.  */  
   ipPhaseJobs:boolean,
      /**  Indicates if Jobs should be created.  */  
   ipCrtePhsJobs:boolean,
      /**  Indicates if Project Start Date should be updated.  */  
   ipProjStart:boolean,
      /**  Indicates if Project End Date should be updated.  */  
   ipProjEnd:boolean,
      /**  Indicates if Phase Start Date should be updated.  */  
   ipPhaseStart:boolean,
      /**  Indicates if Phase End Date should be updated.  */  
   ipPhaseEnd:boolean,
      /**  Indicates if Task Start Date should be updated.  */  
   ipTaskStart:boolean,
      /**  Indicates if Task End Date should be updated.  */  
   ipTaskEnd:boolean,
      /**  Indicates if Job Start Date should be updated.  */  
   ipJobStart:boolean,
      /**  Indicates if Job End Date should be updated.  */  
   ipJobEnd:boolean,
      /**  Indicates if Assembly Start Date should be updated.  */  
   ipAsmStart:boolean,
      /**  Indicates if Assembly End Date should be updated.  */  
   ipAsmEnd:boolean,
      /**  Indicates if JobOperation Start Date should be updated.  */  
   ipOprStart:boolean,
      /**  Indicates if JobOperation End Date should be updated.  */  
   ipOprEnd:boolean,
      /**  Imported file  */  
   fileName:string,
}

export interface ImportFromMSProjectCsvFile_output{
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipProjectID
      @param ipPhases
      @param ipTasks
      @param ipProjJobs
      @param ipPhaseTasks
      @param ipPhaseJobs
      @param ipCrtePhsJobs
      @param ipProjStart
      @param ipProjEnd
      @param ipPhaseStart
      @param ipPhaseEnd
      @param ipTaskStart
      @param ipTaskEnd
      @param ipJobStart
      @param ipJobEnd
      @param ipAsmStart
      @param ipAsmEnd
      @param ipOprStart
      @param ipOprEnd
      @param ds
   */  
export interface ImportFromMSProject_input{
      /**  The project ID of the selected Project.  */  
   ipProjectID:string,
      /**  Indicates if Phases should be created.  */  
   ipPhases:boolean,
      /**  Indicates if Tasks should be created.  */  
   ipTasks:boolean,
      /**  Indicates if Project and Job links should be updated.  */  
   ipProjJobs:boolean,
      /**  Indicates if Phase and Task links should be updated.  */  
   ipPhaseTasks:boolean,
      /**  Indicates if Phase and Job links should be updated.  */  
   ipPhaseJobs:boolean,
      /**  Indicates if Jobs should be created.  */  
   ipCrtePhsJobs:boolean,
      /**  Indicates if Project Start Date should be updated.  */  
   ipProjStart:boolean,
      /**  Indicates if Project End Date should be updated.  */  
   ipProjEnd:boolean,
      /**  Indicates if Phase Start Date should be updated.  */  
   ipPhaseStart:boolean,
      /**  Indicates if Phase End Date should be updated.  */  
   ipPhaseEnd:boolean,
      /**  Indicates if Task Start Date should be updated.  */  
   ipTaskStart:boolean,
      /**  Indicates if Task End Date should be updated.  */  
   ipTaskEnd:boolean,
      /**  Indicates if Job Start Date should be updated.  */  
   ipJobStart:boolean,
      /**  Indicates if Job End Date should be updated.  */  
   ipJobEnd:boolean,
      /**  Indicates if Assembly Start Date should be updated.  */  
   ipAsmStart:boolean,
      /**  Indicates if Assembly End Date should be updated.  */  
   ipAsmEnd:boolean,
      /**  Indicates if JobOperation Start Date should be updated.  */  
   ipOprStart:boolean,
      /**  Indicates if JobOperation End Date should be updated.  */  
   ipOprEnd:boolean,
   ds:Erp_Tablesets_ImportFromMSPTableset[],
}

export interface ImportFromMSProject_output{
parameters : {
      /**  output parameters  */  
   opMessage:string,
}
}

   /** Required : 
      @param ipActStatus
      @param ds
   */  
export interface OnChangeActivityStatus_input{
   ipActStatus:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeActivityStatus_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipActivityUnit
      @param ds
   */  
export interface OnChangeActivityUnit_input{
      /**  The ActivityUnit value.  */  
   ipActivityUnit:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeActivityUnit_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipBdnSetID
      @param ipProjectID
      @param ds
   */  
export interface OnChangeBdnSetCode_input{
      /**  Burden Set Code.  */  
   ipBdnSetID:string,
      /**  Project ID Code.  */  
   ipProjectID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeBdnSetCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param piOrderLine
      @param ds
   */  
export interface OnChangeBillSchOrderLine_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
      /**  The Line number of the candidate OrderLine to Add to the Project.  */  
   piOrderLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeBillSchOrderLine_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param ds
   */  
export interface OnChangeBillSchOrderNum_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeBillSchOrderNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConBTCustNumCustID
      @param ds
   */  
export interface OnChangeConBTCustNumCustID_input{
      /**  The ConBTCustNumCustID.  */  
   ipConBTCustNumCustID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConBTCustNumCustID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConCustNumCustID
      @param ds
   */  
export interface OnChangeConCustNumCustID_input{
      /**  The ConCustNumCustID.  */  
   ipConCustNumCustID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConCustNumCustID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConEndDate
      @param ds
   */  
export interface OnChangeConEndDate_input{
      /**  The ConEndDate.  */  
   ipConEndDate:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConEndDate_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConInvMeth
      @param ds
   */  
export interface OnChangeConInvMeth_input{
      /**  The ConInvMeth value.  */  
   ipConInvMeth:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConInvMeth_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConListCode
      @param ds
   */  
export interface OnChangeConListCode_input{
      /**  The ConListCode value.  */  
   ipConListCode:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConListCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConNumQtySurveyor
      @param ds
   */  
export interface OnChangeConNumQtySurveyor_input{
   ipConNumQtySurveyor:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConNumQtySurveyor_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConProjMgr
      @param ds
   */  
export interface OnChangeConProjMgr_input{
      /**  The ConProjMgr value.  */  
   ipConProjMgr:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConProjMgr_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConTotValue
      @param ds
   */  
export interface OnChangeConTotValue_input{
      /**  The ConProjMgr value.  */  
   ipConTotValue:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeConTotValue_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param piAssemblySeq
      @param ds
   */  
export interface OnChangeCriteriaJobAsm_input{
      /**  The Job number of the candidate Job to Add to the Project.  */  
   pcJobNum:string,
      /**  The Assembly Sequence number of the candidate Job to Add to the Project.  */  
   piAssemblySeq:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeCriteriaJobAsm_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param ds
   */  
export interface OnChangeCriteriaJobNum_input{
      /**  The Job number of the candidate Job to Add to the Project.  */  
   pcJobNum:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeCriteriaJobNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param piAssemblySeq
      @param piOprSeq
      @param ds
   */  
export interface OnChangeCriteriaJobOpr_input{
      /**  The Job number of the candidate Job to Add to the Project.  */  
   pcJobNum:string,
      /**  The Assembly Sequence number of the candidate Job to Add to the Project.  */  
   piAssemblySeq:number,
      /**  The Operation Sequence number of the candidate Job to Add to the Project.  */  
   piOprSeq:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeCriteriaJobOpr_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipCurrencyCode
      @param ds
   */  
export interface OnChangeCurrencyCode_input{
      /**  The ConProjMgr value.  */  
   ipCurrencyCode:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeCurrencyCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipColumnName
      @param ipDecimal
      @param ds
   */  
export interface OnChangeDecimalValue_input{
      /**  The column name value.  */  
   ipColumnName:string,
      /**  The decimal value.  */  
   ipDecimal:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeDecimalValue_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param proposedEngineerPrjJob
      @param ds
   */  
export interface OnChangeEngineerPrjJob_input{
   proposedEngineerPrjJob:boolean,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeEngineerPrjJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipEstHours
      @param ds
   */  
export interface OnChangeEstHours_input{
      /**  The EstHours.  */  
   ipEstHours:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeEstHours_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param ds
   */  
export interface OnChangeJobNum_input{
      /**  The Job number of the candidate Job to Add to the Project.  */  
   pcJobNum:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeJobNum_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipMarkupID
      @param ds
   */  
export interface OnChangeMarkupID_input{
      /**  The MarkupID value.  */  
   ipMarkupID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeMarkupID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface OnChangeMilestoneComplete_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeMilestoneComplete_output{
parameters : {
      /**  output parameters  */  
   pcMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param piOrderLine
      @param ds
   */  
export interface OnChangeMilestoneOrderLine_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
      /**  The Line number of the candidate OrderLine to Add to the Project.  */  
   piOrderLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeMilestoneOrderLine_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param ds
   */  
export interface OnChangeMilestoneOrderNum_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeMilestoneOrderNum_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipOpCode
      @param ds
   */  
export interface OnChangeOpCode_input{
      /**  The OpCode.  */  
   ipOpCode:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeOpCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param piOrderLine
      @param ds
   */  
export interface OnChangeOrderLine_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
      /**  The Line number of the candidate OrderLine to Add to the Project.  */  
   piOrderLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeOrderLine_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param ds
   */  
export interface OnChangeOrderNum_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeOrderNum_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipProjectID
      @param ipOrderNum
      @param ipOrderLine
      @param ipValidate
      @param ds
   */  
export interface OnChangePBOrder_input{
      /**  The Project ID.  */  
   ipProjectID:string,
      /**  Order Number.  */  
   ipOrderNum:number,
      /**  The Project ID.  */  
   ipOrderLine:number,
      /**  if true, validate order detail.  */  
   ipValidate:boolean,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePBOrder_output{
parameters : {
      /**  output parameters  */  
   opAskMessage:string,
   opErrMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipMgr
      @param ds
   */  
export interface OnChangePBillSchMgr_input{
      /**  The Mgr value.  */  
   ipMgr:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePBillSchMgr_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piPONum
      @param piPOLine
      @param piPORelNum
      @param ds
   */  
export interface OnChangePORelNum_input{
      /**  The PO number of the candidate release to Add to the Project.  */  
   piPONum:number,
      /**  The PO Line number of the candidate release to Add to the Project.  */  
   piPOLine:number,
      /**  The Release number of the candidate release to Add to the Project.  */  
   piPORelNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePORelNum_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipRoleCd
      @param ds
   */  
export interface OnChangePPhaseRoleCd_input{
      /**  The RoleCd.  */  
   ipRoleCd:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePPhaseRoleCd_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipOrderNum
      @param ipOrderLine
      @param ipValidate
      @param ds
   */  
export interface OnChangePhaseOrder_input{
      /**  Order Number  */  
   ipOrderNum:number,
      /**  Order Line  */  
   ipOrderLine:number,
      /**  Is validation  */  
   ipValidate:boolean,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePhaseOrder_output{
parameters : {
      /**  output parameters  */  
   opAskMessage:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipPricePerUnit
      @param ds
   */  
export interface OnChangePricePerUnit_input{
      /**  The PricePerUnit value.  */  
   ipPricePerUnit:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePricePerUnit_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param pcJobNum
      @param ds
   */  
export interface OnChangePrimaryJob_input{
      /**  The Job number of the candidate Job to Add as primary job.  */  
   pcJobNum:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangePrimaryJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param engineerWBSJob
      @param ds
   */  
export interface OnChangeProjPhaseEngineerWBSJob_input{
   engineerWBSJob:boolean,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeProjPhaseEngineerWBSJob_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param revMethod
      @param ds
   */  
export interface OnChangeProjPhaseRevMethod_input{
      /**  The proposed value of ProjPhase Rev Method  */  
   revMethod:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeProjPhaseRevMethod_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipColChanging
      @param ipWFGrpID
      @param ds
   */  
export interface OnChangeProjPhaseWFGroup_input{
      /**  The column name changing  */  
   ipColChanging:string,
      /**  The value changing  */  
   ipWFGrpID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeProjPhaseWFGroup_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
      @param ContractID
   */  
export interface OnChangeProjectContractID_input{
   ds:Erp_Tablesets_ProjectTableset[],
   ContractID:string,
}

export interface OnChangeProjectContractID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
   ContractID:string,
}
}

   /** Required : 
      @param proposedProjectID
      @param ds
   */  
export interface OnChangeProjectID_input{
      /**  The proposed ProjectID value  */  
   proposedProjectID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeProjectID_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipColChanging
      @param ipWFGrpID
      @param ds
   */  
export interface OnChangeProjectWFGroup_input{
      /**  The column name changing  */  
   ipColChanging:string,
      /**  The value changing  */  
   ipWFGrpID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeProjectWFGroup_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipQtySurveyor
      @param ds
   */  
export interface OnChangeQtySurveyor_input{
      /**  The QtySurveyor value.  */  
   ipQtySurveyor:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeQtySurveyor_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piQuoteNum
      @param piQuoteLine
      @param ds
   */  
export interface OnChangeQuoteLine_input{
      /**  The Quote number of the candidate release to Add to the Project.  */  
   piQuoteNum:number,
      /**  The Quote Line number of the candidate release to Add to the Project.  */  
   piQuoteLine:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeQuoteLine_output{
parameters : {
      /**  output parameters  */  
   pcWarningMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipRateGrpCode
      @param ds
   */  
export interface OnChangeRateGrpCode_input{
      /**  The ConProjMgr value.  */  
   ipRateGrpCode:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeRateGrpCode_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipStartDate
      @param ds
   */  
export interface OnChangeStartDate_input{
      /**  The StartDate.  */  
   ipStartDate:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeStartDate_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipTotalQty
      @param ds
   */  
export interface OnChangeTotalQty_input{
      /**  The TotalQty value.  */  
   ipTotalQty:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeTotalQty_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipInvMethod
      @param ds
   */  
export interface OnChangeWBSInvMeth_input{
      /**  The proposed InvMeth value.  */  
   ipInvMethod:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnChangeWBSInvMeth_output{
parameters : {
      /**  output parameters  */  
   opMethMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipConInvMeth
      @param ds
   */  
export interface OnCheckConInvMeth_input{
      /**  The proposed ConInvMeth value.  */  
   ipConInvMeth:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnCheckConInvMeth_output{
parameters : {
      /**  output parameters  */  
   opMethMsg:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipSupplierID
      @param ds
   */  
export interface OnSupCeilingSupplierIDChanged_input{
   ipSupplierID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OnSupCeilingSupplierIDChanged_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface OpenProject_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface OpenProject_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param phaseID
      @param ds
   */  
export interface PhaseIDChanged_input{
      /**  PhaseID  */  
   phaseID:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface PhaseIDChanged_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface PreRevenueRecognitionSave_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface PreRevenueRecognitionSave_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param projectList
      @param runCalculate
      @param rebuild
      @param calcBasedOn
      @param manEntPcnt
   */  
export interface ProcessMultiProjectRevenRecogCalculate_input{
   projectList:Erp_Tablesets_ProjectListTableset[],
      /**  Just run the CalculateButton process  */  
   runCalculate:boolean,
      /**  Just run the BuildRevenRecogDS process  */  
   rebuild:boolean,
      /**  Calculation based on  */  
   calcBasedOn:string,
      /**  Manually Entered Percentage  */  
   manEntPcnt:number,
}

export interface ProcessMultiProjectRevenRecogCalculate_output{
parameters : {
      /**  output parameters  */  
   projectList:Erp_Tablesets_ProjectListTableset[],
   errMsg:string,
}
}

export interface ProjectOrderLineAfterGetNew_output{
}

   /** Required : 
      @param ds
      @param ipProjectID
      @param ipPhaseID
   */  
export interface RebuildPhaseRevenRecogDS_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
      /**  Project ID  */  
   ipProjectID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
}

export interface RebuildPhaseRevenRecogDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
      @param ipProjectID
   */  
export interface RebuildProjectRevenRecogDS_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
      /**  Project ID  */  
   ipProjectID:string,
}

export interface RebuildProjectRevenRecogDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ipProjectID
      @param ipPhaseID
      @param isProjectLevelRevenRecog
      @param ds
      @param projectDS
   */  
export interface RebuildRevenRecogDS_input{
      /**  Project ID  */  
   ipProjectID:string,
      /**  Phase ID  */  
   ipPhaseID:string,
      /**  Indicates whether to rebuild RevenRegcog DS for a single Project or WBS Phase.  */  
   isProjectLevelRevenRecog:boolean,
   ds:Erp_Tablesets_RevenRecogTableset[],
   projectDS:Erp_Tablesets_ProjectTableset[],
}

export interface RebuildRevenRecogDS_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
   projectDS:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param ipFieldName
      @param ds
   */  
export interface RecalcRevenRecogFieldDataExt_input{
      /**  Field name with Doc prefix  */  
   ipFieldName:string,
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface RecalcRevenRecogFieldDataExt_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ipFieldName
      @param ds
   */  
export interface RecalcRevenRecogFieldData_input{
      /**  field name  */  
   ipFieldName:string,
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface RecalcRevenRecogFieldData_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface RecognizedSave_input{
   ds:Erp_Tablesets_RevenRecogTableset[],
}

export interface RecognizedSave_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_RevenRecogTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface RefreshEnableRevenueRecognitionFlags_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface RefreshEnableRevenueRecognitionFlags_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param CustNum
      @param LevelInvoice
      @param ds
   */  
export interface ReviewInvoiceLevel_input{
      /**  Customer ID from Project.  */  
   CustNum:number,
      /**  Project Level Invoicing Method proposed.  */  
   LevelInvoice:string,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface ReviewInvoiceLevel_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

export interface SetArrayAmtFields_output{
}

   /** Required : 
      @param projectID
      @param revision
   */  
export interface TrackerGetByID_input{
      /**  The ProjectID.  */  
   projectID:string,
      /**  The Revision.  */  
   revision:number,
}

export interface TrackerGetByID_output{
   returnObj:Erp_Tablesets_ProjectTableset[],
}

   /** Required : 
      @param ipYear
      @param ds
   */  
export interface TrueUpCalcActual_input{
      /**  Fiscal Year  */  
   ipYear:number,
   ds:Erp_Tablesets_PBTrueUpBdnTableset[],
}

export interface TrueUpCalcActual_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_PBTrueUpBdnTableset[],
}
}

   /** Required : 
      @param ds
   */  
export interface TrueUpCreateInvoice_input{
   ds:Erp_Tablesets_PBTrueUpBdnTableset[],
}

export interface TrueUpCreateInvoice_output{
parameters : {
      /**  output parameters  */  
   ouMessage:string,
}
}

   /** Required : 
      @param ipProjectID
   */  
export interface TrueUpGetBdn_input{
      /**  The Project ID  */  
   ipProjectID:string,
}

export interface TrueUpGetBdn_output{
   returnObj:Erp_Tablesets_PBTrueUpBdnTableset[],
parameters : {
      /**  output parameters  */  
   ouYearsList:string,
}
}

   /** Required : 
      @param ds
      @param continueProcessingOnError
      @param rollbackParentOnChildError
   */  
export interface UpdateExt_input{
   ds:Erp_Tablesets_UpdExtProjectTableset[],
   continueProcessingOnError:boolean,
   rollbackParentOnChildError:boolean,
}

export interface UpdateExt_output{
   returnObj:Ice_BOUpdErrorTableset[],
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_UpdExtProjectTableset[],
   errorsOccurred:boolean,
}
}

   /** Required : 
      @param ds
   */  
export interface Update_input{
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface Update_output{
parameters : {
      /**  output parameters  */  
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param piOrderNum
      @param ds
   */  
export interface ValidateBillSchOrderLine_input{
      /**  The Order number of the candidate OrderLine to Add to the Project.  */  
   piOrderNum:number,
   ds:Erp_Tablesets_ProjectTableset[],
}

export interface ValidateBillSchOrderLine_output{
parameters : {
      /**  output parameters  */  
   msgChgCustandOrder:string,
   ds:Erp_Tablesets_ProjectTableset[],
}
}

   /** Required : 
      @param projectID
      @param recRevAtPhaseLevel
      @param conRevMethod
      @param recRevAtPhaseLevelChanged
   */  
export interface ValidateRecognizeRevenueAtPhaseLevel_input{
      /**  Project ID.  */  
   projectID:string,
      /**  Recognize Revenue At Phase Level.  */  
   recRevAtPhaseLevel:boolean,
      /**  Revenue Recognition method  */  
   conRevMethod:string,
      /**  Indicate if field Recog Revenue at Phase level was changed  */  
   recRevAtPhaseLevelChanged:boolean,
}

export interface ValidateRecognizeRevenueAtPhaseLevel_output{
}

   /** Required : 
      @param projectID
      @param revision
   */  
export interface ValidateRevision_input{
   projectID:string,
   revision:number,
}

export interface ValidateRevision_output{
}

